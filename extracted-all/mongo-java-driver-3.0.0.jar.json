{"mongo-java-driver-3.0.0.jar": [["boolean", "com.mongodb.AcknowledgedBulkWriteResult.isAcknowledged()", "public boolean isAcknowledged()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getRemovedCount()", "public int getRemovedCount()"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.BulkWriteUpsert>", "com.mongodb.AcknowledgedBulkWriteResult.getUpserts()", "public java.util.List<com.mongodb.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.AcknowledgedBulkWriteResult.toString()", "public java.lang.String toString()"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.AggregateIterableImpl.allowDiskUse(java.lang.Boolean)", "public com.mongodb.client.AggregateIterable<TResult> allowDiskUse(java.lang.Boolean)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.AggregateIterableImpl.batchSize(int)", "public com.mongodb.client.AggregateIterable<TResult> batchSize(int)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.AggregateIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.AggregateIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.AggregateIterableImpl.useCursor(java.lang.Boolean)", "public com.mongodb.client.AggregateIterable<TResult> useCursor(java.lang.Boolean)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.AggregateIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["TResult", "com.mongodb.AggregateIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.AggregateIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.AggregateIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.AggregateIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.AggregateIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.AggregateIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.batchSize(java.lang.Integer)", "public com.mongodb.AggregationOptions$Builder batchSize(java.lang.Integer)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.allowDiskUse(java.lang.Boolean)", "public com.mongodb.AggregationOptions$Builder allowDiskUse(java.lang.Boolean)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.outputMode(com.mongodb.AggregationOptions$OutputMode)", "public com.mongodb.AggregationOptions$Builder outputMode(com.mongodb.AggregationOptions$OutputMode)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.AggregationOptions$Builder maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.AggregationOptions", "com.mongodb.AggregationOptions$Builder.build()", "public com.mongodb.AggregationOptions build()"], ["com.mongodb.AggregationOptions$OutputMode[]", "com.mongodb.AggregationOptions$OutputMode.values()", "public static com.mongodb.AggregationOptions$OutputMode[] values()"], ["com.mongodb.AggregationOptions$OutputMode", "com.mongodb.AggregationOptions$OutputMode.valueOf(java.lang.String)", "public static com.mongodb.AggregationOptions$OutputMode valueOf(java.lang.String)"], ["java.lang.Boolean", "com.mongodb.AggregationOptions.getAllowDiskUse()", "public java.lang.Boolean getAllowDiskUse()"], ["java.lang.Integer", "com.mongodb.AggregationOptions.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.AggregationOptions$OutputMode", "com.mongodb.AggregationOptions.getOutputMode()", "public com.mongodb.AggregationOptions$OutputMode getOutputMode()"], ["long", "com.mongodb.AggregationOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.AggregationOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions.builder()", "public static com.mongodb.AggregationOptions$Builder builder()"], ["java.lang.Iterable<com.mongodb.DBObject>", "com.mongodb.AggregationOutput.results()", "public java.lang.Iterable<com.mongodb.DBObject> results()"], ["com.mongodb.AuthenticationMechanism[]", "com.mongodb.AuthenticationMechanism.values()", "public static com.mongodb.AuthenticationMechanism[] values()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.AuthenticationMechanism.valueOf(java.lang.String)", "public static com.mongodb.AuthenticationMechanism valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.AuthenticationMechanism.getMechanismName()", "public java.lang.String getMechanismName()"], ["java.lang.String", "com.mongodb.AuthenticationMechanism.toString()", "public java.lang.String toString()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.AuthenticationMechanism.fromMechanismName(java.lang.String)", "public static com.mongodb.AuthenticationMechanism fromMechanismName(java.lang.String)"], ["com.mongodb.BasicDBList", "com.mongodb.BasicDBList()", "public com.mongodb.BasicDBList()"], ["java.lang.String", "com.mongodb.BasicDBList.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.BasicDBList.isPartialObject()", "public boolean isPartialObject()"], ["void", "com.mongodb.BasicDBList.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.Object", "com.mongodb.BasicDBList.copy()", "public java.lang.Object copy()"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject()", "public com.mongodb.BasicDBObject()"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(int)", "public com.mongodb.BasicDBObject(int)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObject(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(java.util.Map)", "public com.mongodb.BasicDBObject(java.util.Map)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject.append(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObject append(java.lang.String, java.lang.Object)"], ["boolean", "com.mongodb.BasicDBObject.isPartialObject()", "public boolean isPartialObject()"], ["java.lang.String", "com.mongodb.BasicDBObject.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.BasicDBObject.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.Object", "com.mongodb.BasicDBObject.copy()", "public java.lang.Object copy()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.BasicDBObject.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BasicBSONObject", "com.mongodb.BasicDBObject.append(java.lang.String, java.lang.Object)", "public org.bson.BasicBSONObject append(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder()", "public com.mongodb.BasicDBObjectBuilder()"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start()", "public static com.mongodb.BasicDBObjectBuilder start()"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start(java.lang.String, java.lang.Object)", "public static com.mongodb.BasicDBObjectBuilder start(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start(java.util.Map)", "public static com.mongodb.BasicDBObjectBuilder start(java.util.Map)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.append(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObjectBuilder append(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.add(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObjectBuilder add(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.push(java.lang.String)", "public com.mongodb.BasicDBObjectBuilder push(java.lang.String)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.pop()", "public com.mongodb.BasicDBObjectBuilder pop()"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectBuilder.get()", "public com.mongodb.DBObject get()"], ["boolean", "com.mongodb.BasicDBObjectBuilder.isEmpty()", "public boolean isEmpty()"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectFactory.getInstance()", "public com.mongodb.DBObject getInstance()"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectFactory.getInstance(java.util.List<java.lang.String>)", "public com.mongodb.DBObject getInstance(java.util.List<java.lang.String>)"], ["com.mongodb.BSONTimestampCodec", "com.mongodb.BSONTimestampCodec()", "public com.mongodb.BSONTimestampCodec()"], ["void", "com.mongodb.BSONTimestampCodec.encode(org.bson.BsonWriter, org.bson.types.BSONTimestamp, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.BSONTimestamp, org.bson.codecs.EncoderContext)"], ["org.bson.types.BSONTimestamp", "com.mongodb.BSONTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.BSONTimestamp decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.BSONTimestamp>", "com.mongodb.BSONTimestampCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.BSONTimestamp> getEncoderClass()"], ["void", "com.mongodb.BSONTimestampCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.BSONTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.BulkUpdateRequestBuilder.replaceOne(com.mongodb.DBObject)", "public void replaceOne(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkUpdateRequestBuilder.update(com.mongodb.DBObject)", "public void update(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkUpdateRequestBuilder.updateOne(com.mongodb.DBObject)", "public void updateOne(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteError", "com.mongodb.BulkWriteError(int, java.lang.String, com.mongodb.DBObject, int)", "public com.mongodb.BulkWriteError(int, java.lang.String, com.mongodb.DBObject, int)"], ["int", "com.mongodb.BulkWriteError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.BulkWriteError.getMessage()", "public java.lang.String getMessage()"], ["com.mongodb.DBObject", "com.mongodb.BulkWriteError.getDetails()", "public com.mongodb.DBObject getDetails()"], ["int", "com.mongodb.BulkWriteError.getIndex()", "public int getIndex()"], ["boolean", "com.mongodb.BulkWriteError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteError.hashCode()", "public int hashCode()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteException.getWriteResult()", "public com.mongodb.BulkWriteResult getWriteResult()"], ["java.util.List<com.mongodb.BulkWriteError>", "com.mongodb.BulkWriteException.getWriteErrors()", "public java.util.List<com.mongodb.BulkWriteError> getWriteErrors()"], ["com.mongodb.WriteConcernError", "com.mongodb.BulkWriteException.getWriteConcernError()", "public com.mongodb.WriteConcernError getWriteConcernError()"], ["boolean", "com.mongodb.BulkWriteException.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteException.hashCode()", "public int hashCode()"], ["boolean", "com.mongodb.BulkWriteOperation.isOrdered()", "public boolean isOrdered()"], ["void", "com.mongodb.BulkWriteOperation.insert(com.mongodb.DBObject)", "public void insert(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteRequestBuilder", "com.mongodb.BulkWriteOperation.find(com.mongodb.DBObject)", "public com.mongodb.BulkWriteRequestBuilder find(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteOperation.execute()", "public com.mongodb.BulkWriteResult execute()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteOperation.execute(com.mongodb.WriteConcern)", "public com.mongodb.BulkWriteResult execute(com.mongodb.WriteConcern)"], ["void", "com.mongodb.BulkWriteRequestBuilder.remove()", "public void remove()"], ["void", "com.mongodb.BulkWriteRequestBuilder.removeOne()", "public void removeOne()"], ["void", "com.mongodb.BulkWriteRequestBuilder.replaceOne(com.mongodb.DBObject)", "public void replaceOne(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkWriteRequestBuilder.update(com.mongodb.DBObject)", "public void update(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkWriteRequestBuilder.updateOne(com.mongodb.DBObject)", "public void updateOne(com.mongodb.DBObject)"], ["com.mongodb.BulkUpdateRequestBuilder", "com.mongodb.BulkWriteRequestBuilder.upsert()", "public com.mongodb.BulkUpdateRequestBuilder upsert()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteResult()", "public com.mongodb.BulkWriteResult()"], ["com.mongodb.BulkWriteUpsert", "com.mongodb.BulkWriteUpsert(int, java.lang.Object)", "public com.mongodb.BulkWriteUpsert(int, java.lang.Object)"], ["int", "com.mongodb.BulkWriteUpsert.getIndex()", "public int getIndex()"], ["java.lang.Object", "com.mongodb.BulkWriteUpsert.getId()", "public java.lang.Object getId()"], ["boolean", "com.mongodb.BulkWriteUpsert.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteUpsert.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.BulkWriteUpsert.toString()", "public java.lang.String toString()"], ["com.mongodb.Bytes", "com.mongodb.Bytes()", "public com.mongodb.Bytes()"], ["byte", "com.mongodb.Bytes.getType(java.lang.Object)", "public static byte getType(java.lang.Object)"], ["boolean", "com.mongodb.CommandResult.ok()", "public boolean ok()"], ["java.lang.String", "com.mongodb.CommandResult.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["com.mongodb.MongoException", "com.mongodb.CommandResult.getException()", "public com.mongodb.MongoException getException()"], ["void", "com.mongodb.CommandResult.throwOnError()", "public void throwOnError()"], ["com.mongodb.CompoundDBObjectCodec", "com.mongodb.CompoundDBObjectCodec(org.bson.codecs.Encoder<com.mongodb.DBObject>, org.bson.codecs.Decoder<com.mongodb.DBObject>)", "public com.mongodb.CompoundDBObjectCodec(org.bson.codecs.Encoder<com.mongodb.DBObject>, org.bson.codecs.Decoder<com.mongodb.DBObject>)"], ["com.mongodb.CompoundDBObjectCodec", "com.mongodb.CompoundDBObjectCodec(org.bson.codecs.Codec<com.mongodb.DBObject>)", "public com.mongodb.CompoundDBObjectCodec(org.bson.codecs.Codec<com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.CompoundDBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBObject decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.CompoundDBObjectCodec.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.CompoundDBObjectCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["org.bson.codecs.Encoder<com.mongodb.DBObject>", "com.mongodb.CompoundDBObjectCodec.getEncoder()", "public org.bson.codecs.Encoder<com.mongodb.DBObject> getEncoder()"], ["org.bson.codecs.Decoder<com.mongodb.DBObject>", "com.mongodb.CompoundDBObjectCodec.getDecoder()", "public org.bson.codecs.Decoder<com.mongodb.DBObject> getDecoder()"], ["void", "com.mongodb.CompoundDBObjectCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.CompoundDBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.ConnectionString", "com.mongodb.ConnectionString(java.lang.String)", "public com.mongodb.ConnectionString(java.lang.String)"], ["java.lang.String", "com.mongodb.ConnectionString.getUsername()", "public java.lang.String getUsername()"], ["char[]", "com.mongodb.ConnectionString.getPassword()", "public char[] getPassword()"], ["java.util.List<java.lang.String>", "com.mongodb.ConnectionString.getHosts()", "public java.util.List<java.lang.String> getHosts()"], ["java.lang.String", "com.mongodb.ConnectionString.getDatabase()", "public java.lang.String getDatabase()"], ["java.lang.String", "com.mongodb.ConnectionString.getCollection()", "public java.lang.String getCollection()"], ["java.lang.String", "com.mongodb.ConnectionString.getURI()", "public java.lang.String getURI()"], ["java.util.List<com.mongodb.MongoCredential>", "com.mongodb.ConnectionString.getCredentialList()", "public java.util.List<com.mongodb.MongoCredential> getCredentialList()"], ["com.mongodb.ReadPreference", "com.mongodb.ConnectionString.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.ConnectionString.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMinConnectionPoolSize()", "public java.lang.Integer getMinConnectionPoolSize()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionPoolSize()", "public java.lang.Integer getMaxConnectionPoolSize()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getThreadsAllowedToBlockForConnectionMultiplier()", "public java.lang.Integer getThreadsAllowedToBlockForConnectionMultiplier()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxWaitTime()", "public java.lang.Integer getMaxWaitTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionIdleTime()", "public java.lang.Integer getMaxConnectionIdleTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionLifeTime()", "public java.lang.Integer getMaxConnectionLifeTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getConnectTimeout()", "public java.lang.Integer getConnectTimeout()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getSocketTimeout()", "public java.lang.Integer getSocketTimeout()"], ["java.lang.Boolean", "com.mongodb.ConnectionString.getSslEnabled()", "public java.lang.Boolean getSslEnabled()"], ["java.lang.String", "com.mongodb.ConnectionString.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["java.lang.String", "com.mongodb.ConnectionString.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.ConnectionString.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ConnectionString.hashCode()", "public int hashCode()"], ["boolean", "com.mongodb.CursorType$1.isTailable()", "public boolean isTailable()"], ["boolean", "com.mongodb.CursorType$2.isTailable()", "public boolean isTailable()"], ["boolean", "com.mongodb.CursorType$3.isTailable()", "public boolean isTailable()"], ["com.mongodb.CursorType[]", "com.mongodb.CursorType.values()", "public static com.mongodb.CursorType[] values()"], ["com.mongodb.CursorType", "com.mongodb.CursorType.valueOf(java.lang.String)", "public static com.mongodb.CursorType valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.DB$1.apply(com.mongodb.DBObject)", "public java.lang.String apply(com.mongodb.DBObject)"], ["java.lang.Object", "com.mongodb.DB$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.DB", "com.mongodb.DB(com.mongodb.Mongo, java.lang.String)", "public com.mongodb.DB(com.mongodb.Mongo, java.lang.String)"], ["com.mongodb.Mongo", "com.mongodb.DB.getMongo()", "public com.mongodb.Mongo getMongo()"], ["void", "com.mongodb.DB.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["void", "com.mongodb.DB.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.ReadPreference", "com.mongodb.DB.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.DB.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.DBCollection", "com.mongodb.DB.getCollection(java.lang.String)", "public com.mongodb.DBCollection getCollection(java.lang.String)"], ["void", "com.mongodb.DB.dropDatabase()", "public void dropDatabase()"], ["com.mongodb.DBCollection", "com.mongodb.DB.getCollectionFromString(java.lang.String)", "public com.mongodb.DBCollection getCollectionFromString(java.lang.String)"], ["java.lang.String", "com.mongodb.DB.getName()", "public java.lang.String getName()"], ["java.util.Set<java.lang.String>", "com.mongodb.DB.getCollectionNames()", "public java.util.Set<java.lang.String> getCollectionNames()"], ["com.mongodb.DBCollection", "com.mongodb.DB.createCollection(java.lang.String, com.mongodb.DBObject)", "public com.mongodb.DBCollection createCollection(java.lang.String, com.mongodb.DBObject)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(java.lang.String)", "public com.mongodb.CommandResult command(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject)", "public com.mongodb.CommandResult command(com.mongodb.DBObject)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.DBEncoder)", "public com.mongodb.CommandResult command(com.mongodb.DBObject, com.mongodb.DBEncoder)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.ReadPreference, com.mongodb.DBEncoder)", "public com.mongodb.CommandResult command(com.mongodb.DBObject, com.mongodb.ReadPreference, com.mongodb.DBEncoder)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.CommandResult command(com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(java.lang.String, com.mongodb.ReadPreference)", "public com.mongodb.CommandResult command(java.lang.String, com.mongodb.ReadPreference)"], ["com.mongodb.DB", "com.mongodb.DB.getSisterDB(java.lang.String)", "public com.mongodb.DB getSisterDB(java.lang.String)"], ["boolean", "com.mongodb.DB.collectionExists(java.lang.String)", "public boolean collectionExists(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DB.doEval(java.lang.String, java.lang.Object...)", "public com.mongodb.CommandResult doEval(java.lang.String, java.lang.Object...)"], ["java.lang.Object", "com.mongodb.DB.eval(java.lang.String, java.lang.Object...)", "public java.lang.Object eval(java.lang.String, java.lang.Object...)"], ["com.mongodb.CommandResult", "com.mongodb.DB.getStats()", "public com.mongodb.CommandResult getStats()"], ["com.mongodb.WriteResult", "com.mongodb.DB.addUser(java.lang.String, char[])", "public com.mongodb.WriteResult addUser(java.lang.String, char[])"], ["com.mongodb.WriteResult", "com.mongodb.DB.addUser(java.lang.String, char[], boolean)", "public com.mongodb.WriteResult addUser(java.lang.String, char[], boolean)"], ["com.mongodb.WriteResult", "com.mongodb.DB.removeUser(java.lang.String)", "public com.mongodb.WriteResult removeUser(java.lang.String)"], ["void", "com.mongodb.DB.slaveOk()", "public void slaveOk()"], ["void", "com.mongodb.DB.addOption(int)", "public void addOption(int)"], ["void", "com.mongodb.DB.setOptions(int)", "public void setOptions(int)"], ["void", "com.mongodb.DB.resetOptions()", "public void resetOptions()"], ["int", "com.mongodb.DB.getOptions()", "public int getOptions()"], ["java.lang.String", "com.mongodb.DB.toString()", "public java.lang.String toString()"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String)", "public com.mongodb.DBAddress(java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(com.mongodb.DBAddress, java.lang.String)", "public com.mongodb.DBAddress(com.mongodb.DBAddress, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String, java.lang.String)", "public com.mongodb.DBAddress(java.lang.String, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String, int, java.lang.String)", "public com.mongodb.DBAddress(java.lang.String, int, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.net.InetAddress, int, java.lang.String)", "public com.mongodb.DBAddress(java.net.InetAddress, int, java.lang.String)"], ["int", "com.mongodb.DBAddress.hashCode()", "public int hashCode()"], ["boolean", "com.mongodb.DBAddress.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress.getSister(java.lang.String)", "public com.mongodb.DBAddress getSister(java.lang.String)"], ["java.lang.String", "com.mongodb.DBAddress.getDBName()", "public java.lang.String getDBName()"], ["java.lang.String", "com.mongodb.DBAddress.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.mongodb.DBCollection$1.apply(org.bson.BsonValue)", "public java.lang.Object apply(org.bson.BsonValue)"], ["java.lang.Object", "com.mongodb.DBCollection$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject...)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject...)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.WriteConcern, com.mongodb.DBObject...)", "public com.mongodb.WriteResult insert(com.mongodb.WriteConcern, com.mongodb.DBObject...)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject[], com.mongodb.WriteConcern)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject[], com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject[], com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject[], com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.InsertOptions)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.InsertOptions)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.save(com.mongodb.DBObject)", "public com.mongodb.WriteResult save(com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.save(com.mongodb.DBObject, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult save(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.updateMulti(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.WriteResult updateMulti(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject)", "public com.mongodb.WriteResult remove(com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult remove(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult remove(com.mongodb.DBObject, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject, int, int, int)", "public com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject, int, int, int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject, int, int)", "public com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject, int, int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject)", "public com.mongodb.DBCursor find(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find()", "public com.mongodb.DBCursor find()"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne()", "public com.mongodb.DBObject findOne()"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(java.lang.Object)", "public com.mongodb.DBObject findOne(java.lang.Object)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(java.lang.Object, com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(java.lang.Object, com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.count()", "public long count()"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject)", "public long count(com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject, com.mongodb.ReadPreference)", "public long count(com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount()", "public long getCount()"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.ReadPreference)", "public long getCount(com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject)", "public long getCount(com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long, com.mongodb.ReadPreference)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long, com.mongodb.ReadPreference)"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.rename(java.lang.String)", "public com.mongodb.DBCollection rename(java.lang.String)"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.rename(java.lang.String, boolean)", "public com.mongodb.DBCollection rename(java.lang.String, boolean)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String)", "public com.mongodb.DBObject group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)", "public com.mongodb.DBObject group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.ReadPreference)", "public com.mongodb.DBObject group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.GroupCommand)", "public com.mongodb.DBObject group(com.mongodb.GroupCommand)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.GroupCommand, com.mongodb.ReadPreference)", "public com.mongodb.DBObject group(com.mongodb.GroupCommand, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String)", "public java.util.List distinct(java.lang.String)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.ReadPreference)", "public java.util.List distinct(java.lang.String, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.DBObject)", "public java.util.List distinct(java.lang.String, com.mongodb.DBObject)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public java.util.List distinct(java.lang.String, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.DBObject)", "public com.mongodb.MapReduceOutput mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.DBObject)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)", "public com.mongodb.MapReduceOutput mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.MapReduceOutput mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(com.mongodb.MapReduceCommand)", "public com.mongodb.MapReduceOutput mapReduce(com.mongodb.MapReduceCommand)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(com.mongodb.DBObject, com.mongodb.DBObject...)", "public com.mongodb.AggregationOutput aggregate(com.mongodb.DBObject, com.mongodb.DBObject...)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.AggregationOutput aggregate(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.ReadPreference)", "public com.mongodb.AggregationOutput aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.ReadPreference)"], ["com.mongodb.Cursor", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)", "public com.mongodb.Cursor aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)"], ["com.mongodb.Cursor", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions, com.mongodb.ReadPreference)", "public com.mongodb.Cursor aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions, com.mongodb.ReadPreference)"], ["com.mongodb.CommandResult", "com.mongodb.DBCollection.explainAggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)", "public com.mongodb.CommandResult explainAggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)"], ["java.util.List<com.mongodb.Cursor>", "com.mongodb.DBCollection.parallelScan(com.mongodb.ParallelScanOptions)", "public java.util.List<com.mongodb.Cursor> parallelScan(com.mongodb.ParallelScanOptions)"], ["java.lang.String", "com.mongodb.DBCollection.getName()", "public java.lang.String getName()"], ["java.lang.String", "com.mongodb.DBCollection.getFullName()", "public java.lang.String getFullName()"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.getCollection(java.lang.String)", "public com.mongodb.DBCollection getCollection(java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(java.lang.String)", "public void createIndex(java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, java.lang.String)", "public void createIndex(com.mongodb.DBObject, java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, java.lang.String, boolean)", "public void createIndex(com.mongodb.DBObject, java.lang.String, boolean)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject)", "public void createIndex(com.mongodb.DBObject)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, com.mongodb.DBObject)", "public void createIndex(com.mongodb.DBObject, com.mongodb.DBObject)"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCollection.getHintFields()", "public java.util.List<com.mongodb.DBObject> getHintFields()"], ["void", "com.mongodb.DBCollection.setHintFields(java.util.List<? extends com.mongodb.DBObject>)", "public void setHintFields(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndRemove(com.mongodb.DBObject)", "public com.mongodb.DBObject findAndRemove(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DB", "com.mongodb.DBCollection.getDB()", "public com.mongodb.DB getDB()"], ["com.mongodb.WriteConcern", "com.mongodb.DBCollection.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["void", "com.mongodb.DBCollection.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.ReadPreference", "com.mongodb.DBCollection.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["void", "com.mongodb.DBCollection.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["void", "com.mongodb.DBCollection.slaveOk()", "public void slaveOk()"], ["void", "com.mongodb.DBCollection.addOption(int)", "public void addOption(int)"], ["void", "com.mongodb.DBCollection.resetOptions()", "public void resetOptions()"], ["int", "com.mongodb.DBCollection.getOptions()", "public int getOptions()"], ["void", "com.mongodb.DBCollection.setOptions(int)", "public void setOptions(int)"], ["void", "com.mongodb.DBCollection.drop()", "public void drop()"], ["synchronized", "com.mongodb.DBCollection.com.mongodb.DBDecoderFactory getDBDecoderFactory()", "public synchronized com.mongodb.DBDecoderFactory getDBDecoderFactory()"], ["synchronized", "com.mongodb.DBCollection.void setDBDecoderFactory(com.mongodb.DBDecoderFactory)", "public synchronized void setDBDecoderFactory(com.mongodb.DBDecoderFactory)"], ["synchronized", "com.mongodb.DBCollection.com.mongodb.DBEncoderFactory getDBEncoderFactory()", "public synchronized com.mongodb.DBEncoderFactory getDBEncoderFactory()"], ["synchronized", "com.mongodb.DBCollection.void setDBEncoderFactory(com.mongodb.DBEncoderFactory)", "public synchronized void setDBEncoderFactory(com.mongodb.DBEncoderFactory)"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCollection.getIndexInfo()", "public java.util.List<com.mongodb.DBObject> getIndexInfo()"], ["void", "com.mongodb.DBCollection.dropIndex(com.mongodb.DBObject)", "public void dropIndex(com.mongodb.DBObject)"], ["void", "com.mongodb.DBCollection.dropIndex(java.lang.String)", "public void dropIndex(java.lang.String)"], ["void", "com.mongodb.DBCollection.dropIndexes()", "public void dropIndexes()"], ["void", "com.mongodb.DBCollection.dropIndexes(java.lang.String)", "public void dropIndexes(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DBCollection.getStats()", "public com.mongodb.CommandResult getStats()"], ["boolean", "com.mongodb.DBCollection.isCapped()", "public boolean isCapped()"], ["java.lang.Class", "com.mongodb.DBCollection.getObjectClass()", "public java.lang.Class getObjectClass()"], ["void", "com.mongodb.DBCollection.setObjectClass(java.lang.Class<? extends com.mongodb.DBObject>)", "public void setObjectClass(java.lang.Class<? extends com.mongodb.DBObject>)"], ["void", "com.mongodb.DBCollection.setInternalClass(java.lang.String, java.lang.Class<? extends com.mongodb.DBObject>)", "public void setInternalClass(java.lang.String, java.lang.Class<? extends com.mongodb.DBObject>)"], ["java.lang.String", "com.mongodb.DBCollection.toString()", "public java.lang.String toString()"], ["com.mongodb.BulkWriteOperation", "com.mongodb.DBCollection.initializeOrderedBulkOperation()", "public com.mongodb.BulkWriteOperation initializeOrderedBulkOperation()"], ["com.mongodb.BulkWriteOperation", "com.mongodb.DBCollection.initializeUnorderedBulkOperation()", "public com.mongodb.BulkWriteOperation initializeUnorderedBulkOperation()"], ["com.mongodb.DBCollectionObjectFactory", "com.mongodb.DBCollectionObjectFactory()", "public com.mongodb.DBCollectionObjectFactory()"], ["com.mongodb.DBObject", "com.mongodb.DBCollectionObjectFactory.getInstance()", "public com.mongodb.DBObject getInstance()"], ["com.mongodb.DBObject", "com.mongodb.DBCollectionObjectFactory.getInstance(java.util.List<java.lang.String>)", "public com.mongodb.DBObject getInstance(java.util.List<java.lang.String>)"], ["com.mongodb.DBCollectionObjectFactory", "com.mongodb.DBCollectionObjectFactory.update(java.lang.Class<? extends com.mongodb.DBObject>)", "public com.mongodb.DBCollectionObjectFactory update(java.lang.Class<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBCollectionObjectFactory", "com.mongodb.DBCollectionObjectFactory.update(java.lang.Class<? extends com.mongodb.DBObject>, java.util.List<java.lang.String>)", "public com.mongodb.DBCollectionObjectFactory update(java.lang.Class<? extends com.mongodb.DBObject>, java.util.List<java.lang.String>)"], ["com.mongodb.DBCursor$IteratorOrArray[]", "com.mongodb.DBCursor$IteratorOrArray.values()", "public static com.mongodb.DBCursor$IteratorOrArray[] values()"], ["com.mongodb.DBCursor$IteratorOrArray", "com.mongodb.DBCursor$IteratorOrArray.valueOf(java.lang.String)", "public static com.mongodb.DBCursor$IteratorOrArray valueOf(java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.DBCursor(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.copy()", "public com.mongodb.DBCursor copy()"], ["boolean", "com.mongodb.DBCursor.hasNext()", "public boolean hasNext()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.next()", "public com.mongodb.DBObject next()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.tryNext()", "public com.mongodb.DBObject tryNext()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.curr()", "public com.mongodb.DBObject curr()"], ["void", "com.mongodb.DBCursor.remove()", "public void remove()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.addOption(int)", "public com.mongodb.DBCursor addOption(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setOptions(int)", "public com.mongodb.DBCursor setOptions(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.resetOptions()", "public com.mongodb.DBCursor resetOptions()"], ["int", "com.mongodb.DBCursor.getOptions()", "public int getOptions()"], ["int", "com.mongodb.DBCursor.getLimit()", "public int getLimit()"], ["int", "com.mongodb.DBCursor.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.addSpecial(java.lang.String, java.lang.Object)", "public com.mongodb.DBCursor addSpecial(java.lang.String, java.lang.Object)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.comment(java.lang.String)", "public com.mongodb.DBCursor comment(java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.maxScan(int)", "public com.mongodb.DBCursor maxScan(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.max(com.mongodb.DBObject)", "public com.mongodb.DBCursor max(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.min(com.mongodb.DBObject)", "public com.mongodb.DBCursor min(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.returnKey()", "public com.mongodb.DBCursor returnKey()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.showDiskLoc()", "public com.mongodb.DBCursor showDiskLoc()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.hint(com.mongodb.DBObject)", "public com.mongodb.DBCursor hint(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.hint(java.lang.String)", "public com.mongodb.DBCursor hint(java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.DBCursor maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.snapshot()", "public com.mongodb.DBCursor snapshot()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.explain()", "public com.mongodb.DBObject explain()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.sort(com.mongodb.DBObject)", "public com.mongodb.DBCursor sort(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.limit(int)", "public com.mongodb.DBCursor limit(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.batchSize(int)", "public com.mongodb.DBCursor batchSize(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.skip(int)", "public com.mongodb.DBCursor skip(int)"], ["long", "com.mongodb.DBCursor.getCursorId()", "public long getCursorId()"], ["int", "com.mongodb.DBCursor.numSeen()", "public int numSeen()"], ["void", "com.mongodb.DBCursor.close()", "public void close()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.slaveOk()", "public com.mongodb.DBCursor slaveOk()"], ["java.util.Iterator<com.mongodb.DBObject>", "com.mongodb.DBCursor.iterator()", "public java.util.Iterator<com.mongodb.DBObject> iterator()"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCursor.toArray()", "public java.util.List<com.mongodb.DBObject> toArray()"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCursor.toArray(int)", "public java.util.List<com.mongodb.DBObject> toArray(int)"], ["int", "com.mongodb.DBCursor.count()", "public int count()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.one()", "public com.mongodb.DBObject one()"], ["int", "com.mongodb.DBCursor.length()", "public int length()"], ["int", "com.mongodb.DBCursor.itcount()", "public int itcount()"], ["int", "com.mongodb.DBCursor.size()", "public int size()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.getKeysWanted()", "public com.mongodb.DBObject getKeysWanted()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBCollection", "com.mongodb.DBCursor.getCollection()", "public com.mongodb.DBCollection getCollection()"], ["com.mongodb.ServerAddress", "com.mongodb.DBCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setReadPreference(com.mongodb.ReadPreference)", "public com.mongodb.DBCursor setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.DBCursor.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setDecoderFactory(com.mongodb.DBDecoderFactory)", "public com.mongodb.DBCursor setDecoderFactory(com.mongodb.DBDecoderFactory)"], ["com.mongodb.DBDecoderFactory", "com.mongodb.DBCursor.getDecoderFactory()", "public com.mongodb.DBDecoderFactory getDecoderFactory()"], ["java.lang.String", "com.mongodb.DBCursor.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.mongodb.DBCursor.next()", "public java.lang.Object next()"], ["com.mongodb.DBDecoderAdapter", "com.mongodb.DBDecoderAdapter(com.mongodb.DBDecoder, com.mongodb.DBCollection, com.mongodb.connection.BufferProvider)", "public com.mongodb.DBDecoderAdapter(com.mongodb.DBDecoder, com.mongodb.DBCollection, com.mongodb.connection.BufferProvider)"], ["com.mongodb.DBObject", "com.mongodb.DBDecoderAdapter.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBObject decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "com.mongodb.DBDecoderAdapter.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.DBEncoderAdapter", "com.mongodb.DBEncoderAdapter(com.mongodb.DBEncoder)", "public com.mongodb.DBEncoderAdapter(com.mongodb.DBEncoder)"], ["void", "com.mongodb.DBEncoderAdapter.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.DBEncoderAdapter.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["void", "com.mongodb.DBEncoderAdapter.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["com.mongodb.DBEncoderFactoryAdapter", "com.mongodb.DBEncoderFactoryAdapter(com.mongodb.DBEncoderFactory)", "public com.mongodb.DBEncoderFactoryAdapter(com.mongodb.DBEncoderFactory)"], ["void", "com.mongodb.DBEncoderFactoryAdapter.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.DBEncoderFactoryAdapter.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["void", "com.mongodb.DBEncoderFactoryAdapter.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)", "public com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, com.mongodb.DBObjectFactory)", "public com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, com.mongodb.DBObjectFactory)"], ["void", "com.mongodb.DBObjectCodec.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["com.mongodb.DBObject", "com.mongodb.DBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBObject decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.DBObjectCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["boolean", "com.mongodb.DBObjectCodec.documentHasId(com.mongodb.DBObject)", "public boolean documentHasId(com.mongodb.DBObject)"], ["org.bson.BsonValue", "com.mongodb.DBObjectCodec.getDocumentId(com.mongodb.DBObject)", "public org.bson.BsonValue getDocumentId(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBObjectCodec.generateIdIfAbsentFromDocument(com.mongodb.DBObject)", "public com.mongodb.DBObject generateIdIfAbsentFromDocument(com.mongodb.DBObject)"], ["org.bson.BsonValue", "com.mongodb.DBObjectCodec.getDocumentId(java.lang.Object)", "public org.bson.BsonValue getDocumentId(java.lang.Object)"], ["boolean", "com.mongodb.DBObjectCodec.documentHasId(java.lang.Object)", "public boolean documentHasId(java.lang.Object)"], ["java.lang.Object", "com.mongodb.DBObjectCodec.generateIdIfAbsentFromDocument(java.lang.Object)", "public java.lang.Object generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "com.mongodb.DBObjectCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.DBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.DBObjectCodecProvider", "com.mongodb.DBObjectCodecProvider()", "public com.mongodb.DBObjectCodecProvider()"], ["com.mongodb.DBObjectCodecProvider", "com.mongodb.DBObjectCodecProvider(org.bson.codecs.BsonTypeClassMap)", "public com.mongodb.DBObjectCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.DBObjectCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.DBObjectCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DBObjectCodecProvider.hashCode()", "public int hashCode()"], ["com.mongodb.DBObject", "com.mongodb.DBObjects.toDBObject(org.bson.BsonDocument)", "public static com.mongodb.DBObject toDBObject(org.bson.BsonDocument)"], ["com.mongodb.DBRef", "com.mongodb.DBRef(java.lang.String, java.lang.Object)", "public com.mongodb.DBRef(java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.mongodb.DBRef.getId()", "public java.lang.Object getId()"], ["java.lang.String", "com.mongodb.DBRef.getCollectionName()", "public java.lang.String getCollectionName()"], ["boolean", "com.mongodb.DBRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DBRef.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.DBRef.toString()", "public java.lang.String toString()"], ["com.mongodb.DBRefCodec", "com.mongodb.DBRefCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.DBRefCodec(org.bson.codecs.configuration.CodecRegistry)"], ["void", "com.mongodb.DBRefCodec.encode(org.bson.BsonWriter, com.mongodb.DBRef, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBRef, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBRef>", "com.mongodb.DBRefCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.DBRef> getEncoderClass()"], ["com.mongodb.DBRef", "com.mongodb.DBRefCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBRef decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.DBRefCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.DBRefCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.DBRefCodecProvider", "com.mongodb.DBRefCodecProvider()", "public com.mongodb.DBRefCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.DBRefCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.DBRefCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DBRefCodecProvider.hashCode()", "public int hashCode()"], ["com.mongodb.DBCallback", "com.mongodb.DefaultDBCallback$1.create(com.mongodb.DBCollection)", "public com.mongodb.DBCallback create(com.mongodb.DBCollection)"], ["com.mongodb.DefaultDBCallback", "com.mongodb.DefaultDBCallback(com.mongodb.DBCollection)", "public com.mongodb.DefaultDBCallback(com.mongodb.DBCollection)"], ["org.bson.BSONObject", "com.mongodb.DefaultDBCallback.create()", "public org.bson.BSONObject create()"], ["org.bson.BSONObject", "com.mongodb.DefaultDBCallback.create(boolean, java.util.List<java.lang.String>)", "public org.bson.BSONObject create(boolean, java.util.List<java.lang.String>)"], ["void", "com.mongodb.DefaultDBCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)", "public void gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["java.lang.Object", "com.mongodb.DefaultDBCallback.objectDone()", "public java.lang.Object objectDone()"], ["com.mongodb.DBDecoder", "com.mongodb.DefaultDBDecoder$1.create()", "public com.mongodb.DBDecoder create()"], ["com.mongodb.DefaultDBDecoder", "com.mongodb.DefaultDBDecoder()", "public com.mongodb.DefaultDBDecoder()"], ["com.mongodb.DBCallback", "com.mongodb.DefaultDBDecoder.getDBCallback(com.mongodb.DBCollection)", "public com.mongodb.DBCallback getDBCallback(com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.DefaultDBDecoder.decode(java.io.InputStream, com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(java.io.InputStream, com.mongodb.DBCollection) throws java.io.IOException"], ["com.mongodb.DBObject", "com.mongodb.DefaultDBDecoder.decode(byte[], com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(byte[], com.mongodb.DBCollection)"], ["java.lang.String", "com.mongodb.DefaultDBDecoder.toString()", "public java.lang.String toString()"], ["com.mongodb.DBEncoder", "com.mongodb.DefaultDBEncoder$1.create()", "public com.mongodb.DBEncoder create()"], ["com.mongodb.DefaultDBEncoder", "com.mongodb.DefaultDBEncoder()", "public com.mongodb.DefaultDBEncoder()"], ["int", "com.mongodb.DefaultDBEncoder.writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)", "public int writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)"], ["java.lang.String", "com.mongodb.DefaultDBEncoder.toString()", "public java.lang.String toString()"], ["com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.DistinctIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.DistinctIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.DistinctIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.DistinctIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.DistinctIterableImpl.batchSize(int)", "public com.mongodb.client.DistinctIterable<TResult> batchSize(int)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.DistinctIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["TResult", "com.mongodb.DistinctIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.DistinctIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.DistinctIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.DistinctIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.DistinctIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.DistinctIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["java.lang.Object", "com.mongodb.DocumentToDBRefTransformer.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["boolean", "com.mongodb.DocumentToDBRefTransformer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DocumentToDBRefTransformer.hashCode()", "public int hashCode()"], ["com.mongodb.DuplicateKeyException", "com.mongodb.DuplicateKeyException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)", "public com.mongodb.DuplicateKeyException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)"], ["com.mongodb.ErrorCategory[]", "com.mongodb.ErrorCategory.values()", "public static com.mongodb.ErrorCategory[] values()"], ["com.mongodb.ErrorCategory", "com.mongodb.ErrorCategory.valueOf(java.lang.String)", "public static com.mongodb.ErrorCategory valueOf(java.lang.String)"], ["com.mongodb.ErrorCategory", "com.mongodb.ErrorCategory.fromErrorCode(int)", "public static com.mongodb.ErrorCategory fromErrorCode(int)"], ["com.mongodb.ExplainVerbosity[]", "com.mongodb.ExplainVerbosity.values()", "public static com.mongodb.ExplainVerbosity[] values()"], ["com.mongodb.ExplainVerbosity", "com.mongodb.ExplainVerbosity.valueOf(java.lang.String)", "public static com.mongodb.ExplainVerbosity valueOf(java.lang.String)"], ["TResult", "com.mongodb.FindIterableImpl$FindOperationIterable.first()", "public TResult first()"], ["com.mongodb.FindIterableImpl<TDocument, TResult>.FindOperationIterable", "com.mongodb.FindIterableImpl$FindOperationIterable.batchSize(int)", "public com.mongodb.FindIterableImpl<TDocument, TResult>.FindOperationIterable batchSize(int)"], ["com.mongodb.client.MongoIterable", "com.mongodb.FindIterableImpl$FindOperationIterable.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.limit(int)", "public com.mongodb.client.FindIterable<TResult> limit(int)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.skip(int)", "public com.mongodb.client.FindIterable<TResult> skip(int)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.FindIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.batchSize(int)", "public com.mongodb.client.FindIterable<TResult> batchSize(int)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.modifiers(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> modifiers(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.projection(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> projection(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.sort(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> sort(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.noCursorTimeout(boolean)", "public com.mongodb.client.FindIterable<TResult> noCursorTimeout(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.oplogReplay(boolean)", "public com.mongodb.client.FindIterable<TResult> oplogReplay(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.partial(boolean)", "public com.mongodb.client.FindIterable<TResult> partial(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.FindIterableImpl.cursorType(com.mongodb.CursorType)", "public com.mongodb.client.FindIterable<TResult> cursorType(com.mongodb.CursorType)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.FindIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["TResult", "com.mongodb.FindIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.FindIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.FindIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.FindIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.FindIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.FindIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)", "public com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.GroupCommand.toDBObject()", "public com.mongodb.DBObject toDBObject()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions()", "public com.mongodb.InsertOptions()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.InsertOptions writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.continueOnError(boolean)", "public com.mongodb.InsertOptions continueOnError(boolean)"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.dbEncoder(com.mongodb.DBEncoder)", "public com.mongodb.InsertOptions dbEncoder(com.mongodb.DBEncoder)"], ["com.mongodb.WriteConcern", "com.mongodb.InsertOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.InsertOptions.isContinueOnError()", "public boolean isContinueOnError()"], ["com.mongodb.DBEncoder", "com.mongodb.InsertOptions.getDbEncoder()", "public com.mongodb.DBEncoder getDbEncoder()"], ["com.mongodb.InsertRequest", "com.mongodb.InsertRequest(com.mongodb.DBObject, org.bson.codecs.Encoder<com.mongodb.DBObject>)", "public com.mongodb.InsertRequest(com.mongodb.DBObject, org.bson.codecs.Encoder<com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.InsertRequest.getDocument()", "public com.mongodb.DBObject getDocument()"], ["com.mongodb.LazyDBCallback", "com.mongodb.LazyDBCallback(com.mongodb.DBCollection)", "public com.mongodb.LazyDBCallback(com.mongodb.DBCollection)"], ["java.lang.Object", "com.mongodb.LazyDBCallback.createObject(byte[], int)", "public java.lang.Object createObject(byte[], int)"], ["java.util.List", "com.mongodb.LazyDBCallback.createArray(byte[], int)", "public java.util.List createArray(byte[], int)"], ["java.lang.Object", "com.mongodb.LazyDBCallback.createDBRef(java.lang.String, org.bson.types.ObjectId)", "public java.lang.Object createDBRef(java.lang.String, org.bson.types.ObjectId)"], ["com.mongodb.DBDecoder", "com.mongodb.LazyDBDecoder$1.create()", "public com.mongodb.DBDecoder create()"], ["com.mongodb.LazyDBDecoder", "com.mongodb.LazyDBDecoder()", "public com.mongodb.LazyDBDecoder()"], ["com.mongodb.DBCallback", "com.mongodb.LazyDBDecoder.getDBCallback(com.mongodb.DBCollection)", "public com.mongodb.DBCallback getDBCallback(com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.readObject(java.io.InputStream)", "public com.mongodb.DBObject readObject(java.io.InputStream) throws java.io.IOException"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.decode(java.io.InputStream, com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(java.io.InputStream, com.mongodb.DBCollection) throws java.io.IOException"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.decode(byte[], com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(byte[], com.mongodb.DBCollection)"], ["org.bson.BSONObject", "com.mongodb.LazyDBDecoder.readObject(java.io.InputStream)", "public org.bson.BSONObject readObject(java.io.InputStream) throws java.io.IOException"], ["com.mongodb.LazyDBEncoder", "com.mongodb.LazyDBEncoder()", "public com.mongodb.LazyDBEncoder()"], ["int", "com.mongodb.LazyDBEncoder.writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)", "public int writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)"], ["com.mongodb.LazyDBList", "com.mongodb.LazyDBList(byte[], org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBList(byte[], org.bson.LazyBSONCallback)"], ["com.mongodb.LazyDBList", "com.mongodb.LazyDBList(byte[], int, org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBList(byte[], int, org.bson.LazyBSONCallback)"], ["void", "com.mongodb.LazyDBList.markAsPartialObject()", "public void markAsPartialObject()"], ["boolean", "com.mongodb.LazyDBList.isPartialObject()", "public boolean isPartialObject()"], ["com.mongodb.LazyDBObject", "com.mongodb.LazyDBObject(byte[], org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBObject(byte[], org.bson.LazyBSONCallback)"], ["com.mongodb.LazyDBObject", "com.mongodb.LazyDBObject(byte[], int, org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBObject(byte[], int, org.bson.LazyBSONCallback)"], ["void", "com.mongodb.LazyDBObject.markAsPartialObject()", "public void markAsPartialObject()"], ["boolean", "com.mongodb.LazyDBObject.isPartialObject()", "public boolean isPartialObject()"], ["com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.ListCollectionsIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.ListCollectionsIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.ListCollectionsIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.ListCollectionsIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.ListCollectionsIterableImpl.batchSize(int)", "public com.mongodb.client.ListCollectionsIterable<TResult> batchSize(int)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.ListCollectionsIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["TResult", "com.mongodb.ListCollectionsIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.ListCollectionsIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.ListCollectionsIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.ListCollectionsIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.ListCollectionsIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.ListCollectionsIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.ListDatabasesIterableImpl<TResult>", "com.mongodb.ListDatabasesIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.ListDatabasesIterableImpl<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.ListDatabasesIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["TResult", "com.mongodb.ListDatabasesIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.ListDatabasesIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.ListDatabasesIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.ListDatabasesIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["com.mongodb.client.ListDatabasesIterable<TResult>", "com.mongodb.ListDatabasesIterableImpl.batchSize(int)", "public com.mongodb.client.ListDatabasesIterable<TResult> batchSize(int)"], ["com.mongodb.client.ListDatabasesIterable", "com.mongodb.ListDatabasesIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.ListDatabasesIterable maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.MongoIterable", "com.mongodb.ListDatabasesIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.ListDatabasesIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.ListIndexesIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.ListIndexesIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.ListIndexesIterableImpl.batchSize(int)", "public com.mongodb.client.ListIndexesIterable<TResult> batchSize(int)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.ListIndexesIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["TResult", "com.mongodb.ListIndexesIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.ListIndexesIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.ListIndexesIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.ListIndexesIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.ListIndexesIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.ListIndexesIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["void", "com.mongodb.MappingIterable$1.apply(U)", "public void apply(U)"], ["void", "com.mongodb.MappingIterable$2.apply(V)", "public void apply(V)"], ["com.mongodb.MappingIterable", "com.mongodb.MappingIterable(com.mongodb.client.MongoIterable<U>, com.mongodb.Function<U, V>)", "public com.mongodb.MappingIterable(com.mongodb.client.MongoIterable<U>, com.mongodb.Function<U, V>)"], ["com.mongodb.client.MongoCursor<V>", "com.mongodb.MappingIterable.iterator()", "public com.mongodb.client.MongoCursor<V> iterator()"], ["V", "com.mongodb.MappingIterable.first()", "public V first()"], ["void", "com.mongodb.MappingIterable.forEach(com.mongodb.Block<? super V>)", "public void forEach(com.mongodb.Block<? super V>)"], ["<A extends java.util.Collection<? super V>> A", "com.mongodb.MappingIterable.into(A)", "public <A extends java.util.Collection<? super V>> A into(A)"], ["com.mongodb.MappingIterable<U, V>", "com.mongodb.MappingIterable.batchSize(int)", "public com.mongodb.MappingIterable<U, V> batchSize(int)"], ["<W> com.mongodb.client.MongoIterable<W>", "com.mongodb.MappingIterable.map(com.mongodb.Function<V, W>)", "public <W> com.mongodb.client.MongoIterable<W> map(com.mongodb.Function<V, W>)"], ["com.mongodb.client.MongoIterable", "com.mongodb.MappingIterable.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.MappingIterable.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.MapReduceCommand$OutputType[]", "com.mongodb.MapReduceCommand$OutputType.values()", "public static com.mongodb.MapReduceCommand$OutputType[] values()"], ["com.mongodb.MapReduceCommand$OutputType", "com.mongodb.MapReduceCommand$OutputType.valueOf(java.lang.String)", "public static com.mongodb.MapReduceCommand$OutputType valueOf(java.lang.String)"], ["com.mongodb.MapReduceCommand", "com.mongodb.MapReduceCommand(com.mongodb.DBCollection, java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)", "public com.mongodb.MapReduceCommand(com.mongodb.DBCollection, java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)"], ["void", "com.mongodb.MapReduceCommand.setVerbose(java.lang.Boolean)", "public void setVerbose(java.lang.Boolean)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.isVerbose()", "public java.lang.Boolean isVerbose()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getInput()", "public java.lang.String getInput()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getMap()", "public java.lang.String getMap()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getReduce()", "public java.lang.String getReduce()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getOutputTarget()", "public java.lang.String getOutputTarget()"], ["com.mongodb.MapReduceCommand$OutputType", "com.mongodb.MapReduceCommand.getOutputType()", "public com.mongodb.MapReduceCommand$OutputType getOutputType()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getFinalize()", "public java.lang.String getFinalize()"], ["void", "com.mongodb.MapReduceCommand.setFinalize(java.lang.String)", "public void setFinalize(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.getSort()", "public com.mongodb.DBObject getSort()"], ["void", "com.mongodb.MapReduceCommand.setSort(com.mongodb.DBObject)", "public void setSort(com.mongodb.DBObject)"], ["int", "com.mongodb.MapReduceCommand.getLimit()", "public int getLimit()"], ["void", "com.mongodb.MapReduceCommand.setLimit(int)", "public void setLimit(int)"], ["long", "com.mongodb.MapReduceCommand.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.MapReduceCommand.setMaxTime(long, java.util.concurrent.TimeUnit)", "public void setMaxTime(long, java.util.concurrent.TimeUnit)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.mongodb.MapReduceCommand.getScope()", "public java.util.Map<java.lang.String, java.lang.Object> getScope()"], ["void", "com.mongodb.MapReduceCommand.setScope(java.util.Map<java.lang.String, java.lang.Object>)", "public void setScope(java.util.Map<java.lang.String, java.lang.Object>)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.getJsMode()", "public java.lang.Boolean getJsMode()"], ["void", "com.mongodb.MapReduceCommand.setJsMode(java.lang.Boolean)", "public void setJsMode(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.MapReduceCommand.getOutputDB()", "public java.lang.String getOutputDB()"], ["void", "com.mongodb.MapReduceCommand.setOutputDB(java.lang.String)", "public void setOutputDB(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.toDBObject()", "public com.mongodb.DBObject toDBObject()"], ["void", "com.mongodb.MapReduceCommand.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.MapReduceCommand.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["java.lang.String", "com.mongodb.MapReduceCommand.toString()", "public java.lang.String toString()"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.collectionName(java.lang.String)", "public com.mongodb.client.MapReduceIterable<TResult> collectionName(java.lang.String)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.finalizeFunction(java.lang.String)", "public com.mongodb.client.MapReduceIterable<TResult> finalizeFunction(java.lang.String)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.scope(org.bson.conversions.Bson)", "public com.mongodb.client.MapReduceIterable<TResult> scope(org.bson.conversions.Bson)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.sort(org.bson.conversions.Bson)", "public com.mongodb.client.MapReduceIterable<TResult> sort(org.bson.conversions.Bson)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.MapReduceIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.limit(int)", "public com.mongodb.client.MapReduceIterable<TResult> limit(int)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.jsMode(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> jsMode(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.verbose(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> verbose(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.MapReduceIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.action(com.mongodb.client.model.MapReduceAction)", "public com.mongodb.client.MapReduceIterable<TResult> action(com.mongodb.client.model.MapReduceAction)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.databaseName(java.lang.String)", "public com.mongodb.client.MapReduceIterable<TResult> databaseName(java.lang.String)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.sharded(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> sharded(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.nonAtomic(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> nonAtomic(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MapReduceIterableImpl.batchSize(int)", "public com.mongodb.client.MapReduceIterable<TResult> batchSize(int)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.MapReduceIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["TResult", "com.mongodb.MapReduceIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.MapReduceIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.MapReduceIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.MapReduceIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.MapReduceIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.MapReduceIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["java.lang.Iterable<com.mongodb.DBObject>", "com.mongodb.MapReduceOutput.results()", "public java.lang.Iterable<com.mongodb.DBObject> results()"], ["void", "com.mongodb.MapReduceOutput.drop()", "public void drop()"], ["com.mongodb.DBCollection", "com.mongodb.MapReduceOutput.getOutputCollection()", "public com.mongodb.DBCollection getOutputCollection()"], ["com.mongodb.DBObject", "com.mongodb.MapReduceOutput.getCommand()", "public com.mongodb.DBObject getCommand()"], ["java.lang.String", "com.mongodb.MapReduceOutput.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.MapReduceOutput.getCollectionName()", "public final java.lang.String getCollectionName()"], ["java.lang.String", "com.mongodb.MapReduceOutput.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["int", "com.mongodb.MapReduceOutput.getDuration()", "public int getDuration()"], ["int", "com.mongodb.MapReduceOutput.getInputCount()", "public int getInputCount()"], ["int", "com.mongodb.MapReduceOutput.getOutputCount()", "public int getOutputCount()"], ["int", "com.mongodb.MapReduceOutput.getEmitCount()", "public int getEmitCount()"], ["java.lang.String", "com.mongodb.Mongo$1.apply(com.mongodb.DBObject)", "public java.lang.String apply(com.mongodb.DBObject)"], ["java.lang.Object", "com.mongodb.Mongo$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["<T> T", "com.mongodb.Mongo$2.execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference)", "public <T> T execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference)"], ["<T> T", "com.mongodb.Mongo$2.execute(com.mongodb.operation.WriteOperation<T>)", "public <T> T execute(com.mongodb.operation.WriteOperation<T>)"], ["void", "com.mongodb.Mongo$3.run()", "public void run()"], ["java.lang.Thread", "com.mongodb.Mongo$DaemonThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["com.mongodb.Mongo$Holder", "com.mongodb.Mongo$Holder()", "public com.mongodb.Mongo$Holder()"], ["com.mongodb.Mongo$Holder", "com.mongodb.Mongo$Holder.singleton()", "public static com.mongodb.Mongo$Holder singleton()"], ["com.mongodb.Mongo", "com.mongodb.Mongo$Holder.connect(com.mongodb.MongoURI)", "public com.mongodb.Mongo connect(com.mongodb.MongoURI)"], ["com.mongodb.Mongo", "com.mongodb.Mongo$Holder.connect(com.mongodb.MongoClientURI)", "public com.mongodb.Mongo connect(com.mongodb.MongoClientURI)"], ["com.mongodb.Mongo", "com.mongodb.Mongo()", "public com.mongodb.Mongo()"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String)", "public com.mongodb.Mongo(java.lang.String)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(java.lang.String, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String, int)", "public com.mongodb.Mongo(java.lang.String, int)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress)", "public com.mongodb.Mongo(com.mongodb.ServerAddress)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress)", "public com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>)", "public com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.MongoURI)", "public com.mongodb.Mongo(com.mongodb.MongoURI)"], ["void", "com.mongodb.Mongo.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.Mongo.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["void", "com.mongodb.Mongo.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.Mongo.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["java.util.List<com.mongodb.ServerAddress>", "com.mongodb.Mongo.getAllAddress()", "public java.util.List<com.mongodb.ServerAddress> getAllAddress()"], ["java.util.List<com.mongodb.ServerAddress>", "com.mongodb.Mongo.getServerAddressList()", "public java.util.List<com.mongodb.ServerAddress> getServerAddressList()"], ["com.mongodb.ServerAddress", "com.mongodb.Mongo.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["com.mongodb.MongoOptions", "com.mongodb.Mongo.getMongoOptions()", "public com.mongodb.MongoOptions getMongoOptions()"], ["com.mongodb.ReplicaSetStatus", "com.mongodb.Mongo.getReplicaSetStatus()", "public com.mongodb.ReplicaSetStatus getReplicaSetStatus()"], ["java.util.List<java.lang.String>", "com.mongodb.Mongo.getDatabaseNames()", "public java.util.List<java.lang.String> getDatabaseNames()"], ["com.mongodb.DB", "com.mongodb.Mongo.getDB(java.lang.String)", "public com.mongodb.DB getDB(java.lang.String)"], ["java.util.Collection<com.mongodb.DB>", "com.mongodb.Mongo.getUsedDatabases()", "public java.util.Collection<com.mongodb.DB> getUsedDatabases()"], ["void", "com.mongodb.Mongo.dropDatabase(java.lang.String)", "public void dropDatabase(java.lang.String)"], ["void", "com.mongodb.Mongo.close()", "public void close()"], ["void", "com.mongodb.Mongo.slaveOk()", "public void slaveOk()"], ["void", "com.mongodb.Mongo.setOptions(int)", "public void setOptions(int)"], ["void", "com.mongodb.Mongo.resetOptions()", "public void resetOptions()"], ["void", "com.mongodb.Mongo.addOption(int)", "public void addOption(int)"], ["int", "com.mongodb.Mongo.getOptions()", "public int getOptions()"], ["com.mongodb.CommandResult", "com.mongodb.Mongo.fsync(boolean)", "public com.mongodb.CommandResult fsync(boolean)"], ["com.mongodb.CommandResult", "com.mongodb.Mongo.fsyncAndLock()", "public com.mongodb.CommandResult fsyncAndLock()"], ["com.mongodb.DBObject", "com.mongodb.Mongo.unlock()", "public com.mongodb.DBObject unlock()"], ["boolean", "com.mongodb.Mongo.isLocked()", "public boolean isLocked()"], ["java.lang.String", "com.mongodb.Mongo.toString()", "public java.lang.String toString()"], ["int", "com.mongodb.Mongo.getMaxBsonObjectSize()", "public int getMaxBsonObjectSize()"], ["java.lang.String", "com.mongodb.Mongo.getConnectPoint()", "public java.lang.String getConnectPoint()"], ["com.mongodb.MongoBatchCursorAdapter", "com.mongodb.MongoBatchCursorAdapter(com.mongodb.operation.BatchCursor<T>)", "public com.mongodb.MongoBatchCursorAdapter(com.mongodb.operation.BatchCursor<T>)"], ["void", "com.mongodb.MongoBatchCursorAdapter.remove()", "public void remove()"], ["void", "com.mongodb.MongoBatchCursorAdapter.close()", "public void close()"], ["boolean", "com.mongodb.MongoBatchCursorAdapter.hasNext()", "public boolean hasNext()"], ["T", "com.mongodb.MongoBatchCursorAdapter.next()", "public T next()"], ["T", "com.mongodb.MongoBatchCursorAdapter.tryNext()", "public T tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.MongoBatchCursorAdapter.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoBatchCursorAdapter.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.MongoBulkWriteException(com.mongodb.bulk.BulkWriteResult, java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)", "public com.mongodb.MongoBulkWriteException(com.mongodb.bulk.BulkWriteResult, java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoBulkWriteException.getWriteResult()", "public com.mongodb.bulk.BulkWriteResult getWriteResult()"], ["java.util.List<com.mongodb.bulk.BulkWriteError>", "com.mongodb.MongoBulkWriteException.getWriteErrors()", "public java.util.List<com.mongodb.bulk.BulkWriteError> getWriteErrors()"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.MongoBulkWriteException.getWriteConcernError()", "public com.mongodb.bulk.WriteConcernError getWriteConcernError()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoBulkWriteException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["boolean", "com.mongodb.MongoBulkWriteException.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoBulkWriteException.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoClient$1.apply(org.bson.BsonDocument)", "public java.lang.String apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.MongoClient$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClient.getDefaultCodecRegistry()", "public static org.bson.codecs.configuration.CodecRegistry getDefaultCodecRegistry()"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient()", "public com.mongodb.MongoClient()"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String)", "public com.mongodb.MongoClient(java.lang.String)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(java.lang.String, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String, int)", "public com.mongodb.MongoClient(java.lang.String, int)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.MongoClientURI)", "public com.mongodb.MongoClient(com.mongodb.MongoClientURI)"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClient.getMongoClientOptions()", "public com.mongodb.MongoClientOptions getMongoClientOptions()"], ["java.util.List<com.mongodb.MongoCredential>", "com.mongodb.MongoClient.getCredentialsList()", "public java.util.List<com.mongodb.MongoCredential> getCredentialsList()"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.MongoClient.listDatabaseNames()", "public com.mongodb.client.MongoIterable<java.lang.String> listDatabaseNames()"], ["com.mongodb.client.ListDatabasesIterable<org.bson.Document>", "com.mongodb.MongoClient.listDatabases()", "public com.mongodb.client.ListDatabasesIterable<org.bson.Document> listDatabases()"], ["<T> com.mongodb.client.ListDatabasesIterable<T>", "com.mongodb.MongoClient.listDatabases(java.lang.Class<T>)", "public <T> com.mongodb.client.ListDatabasesIterable<T> listDatabases(java.lang.Class<T>)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoClient.getDatabase(java.lang.String)", "public com.mongodb.client.MongoDatabase getDatabase(java.lang.String)"], ["com.mongodb.MongoClientException", "com.mongodb.MongoClientException(java.lang.String)", "public com.mongodb.MongoClientException(java.lang.String)"], ["com.mongodb.MongoClientException", "com.mongodb.MongoClientException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoClientException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder()", "public com.mongodb.MongoClientOptions$Builder()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder(com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClientOptions$Builder(com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.description(java.lang.String)", "public com.mongodb.MongoClientOptions$Builder description(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.minConnectionsPerHost(int)", "public com.mongodb.MongoClientOptions$Builder minConnectionsPerHost(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.connectionsPerHost(int)", "public com.mongodb.MongoClientOptions$Builder connectionsPerHost(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.threadsAllowedToBlockForConnectionMultiplier(int)", "public com.mongodb.MongoClientOptions$Builder threadsAllowedToBlockForConnectionMultiplier(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.serverSelectionTimeout(int)", "public com.mongodb.MongoClientOptions$Builder serverSelectionTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxWaitTime(int)", "public com.mongodb.MongoClientOptions$Builder maxWaitTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxConnectionIdleTime(int)", "public com.mongodb.MongoClientOptions$Builder maxConnectionIdleTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxConnectionLifeTime(int)", "public com.mongodb.MongoClientOptions$Builder maxConnectionLifeTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.connectTimeout(int)", "public com.mongodb.MongoClientOptions$Builder connectTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketTimeout(int)", "public com.mongodb.MongoClientOptions$Builder socketTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketKeepAlive(boolean)", "public com.mongodb.MongoClientOptions$Builder socketKeepAlive(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslEnabled(boolean)", "public com.mongodb.MongoClientOptions$Builder sslEnabled(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslInvalidHostNameAllowed(boolean)", "public com.mongodb.MongoClientOptions$Builder sslInvalidHostNameAllowed(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.MongoClientOptions$Builder readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.MongoClientOptions$Builder writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.codecRegistry(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.MongoClientOptions$Builder codecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketFactory(javax.net.SocketFactory)", "public com.mongodb.MongoClientOptions$Builder socketFactory(javax.net.SocketFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.cursorFinalizerEnabled(boolean)", "public com.mongodb.MongoClientOptions$Builder cursorFinalizerEnabled(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.alwaysUseMBeans(boolean)", "public com.mongodb.MongoClientOptions$Builder alwaysUseMBeans(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.dbDecoderFactory(com.mongodb.DBDecoderFactory)", "public com.mongodb.MongoClientOptions$Builder dbDecoderFactory(com.mongodb.DBDecoderFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.dbEncoderFactory(com.mongodb.DBEncoderFactory)", "public com.mongodb.MongoClientOptions$Builder dbEncoderFactory(com.mongodb.DBEncoderFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatFrequency(int)", "public com.mongodb.MongoClientOptions$Builder heartbeatFrequency(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.minHeartbeatFrequency(int)", "public com.mongodb.MongoClientOptions$Builder minHeartbeatFrequency(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatConnectTimeout(int)", "public com.mongodb.MongoClientOptions$Builder heartbeatConnectTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatSocketTimeout(int)", "public com.mongodb.MongoClientOptions$Builder heartbeatSocketTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.localThreshold(int)", "public com.mongodb.MongoClientOptions$Builder localThreshold(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.requiredReplicaSetName(java.lang.String)", "public com.mongodb.MongoClientOptions$Builder requiredReplicaSetName(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.legacyDefaults()", "public com.mongodb.MongoClientOptions$Builder legacyDefaults()"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClientOptions$Builder.build()", "public com.mongodb.MongoClientOptions build()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions.builder()", "public static com.mongodb.MongoClientOptions$Builder builder()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions.builder(com.mongodb.MongoClientOptions)", "public static com.mongodb.MongoClientOptions$Builder builder(com.mongodb.MongoClientOptions)"], ["java.lang.String", "com.mongodb.MongoClientOptions.getDescription()", "public java.lang.String getDescription()"], ["int", "com.mongodb.MongoClientOptions.getConnectionsPerHost()", "public int getConnectionsPerHost()"], ["int", "com.mongodb.MongoClientOptions.getMinConnectionsPerHost()", "public int getMinConnectionsPerHost()"], ["int", "com.mongodb.MongoClientOptions.getThreadsAllowedToBlockForConnectionMultiplier()", "public int getThreadsAllowedToBlockForConnectionMultiplier()"], ["int", "com.mongodb.MongoClientOptions.getServerSelectionTimeout()", "public int getServerSelectionTimeout()"], ["int", "com.mongodb.MongoClientOptions.getMaxWaitTime()", "public int getMaxWaitTime()"], ["int", "com.mongodb.MongoClientOptions.getMaxConnectionIdleTime()", "public int getMaxConnectionIdleTime()"], ["int", "com.mongodb.MongoClientOptions.getMaxConnectionLifeTime()", "public int getMaxConnectionLifeTime()"], ["int", "com.mongodb.MongoClientOptions.getConnectTimeout()", "public int getConnectTimeout()"], ["int", "com.mongodb.MongoClientOptions.getSocketTimeout()", "public int getSocketTimeout()"], ["boolean", "com.mongodb.MongoClientOptions.isSocketKeepAlive()", "public boolean isSocketKeepAlive()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatFrequency()", "public int getHeartbeatFrequency()"], ["int", "com.mongodb.MongoClientOptions.getMinHeartbeatFrequency()", "public int getMinHeartbeatFrequency()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatConnectTimeout()", "public int getHeartbeatConnectTimeout()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatSocketTimeout()", "public int getHeartbeatSocketTimeout()"], ["int", "com.mongodb.MongoClientOptions.getLocalThreshold()", "public int getLocalThreshold()"], ["java.lang.String", "com.mongodb.MongoClientOptions.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["boolean", "com.mongodb.MongoClientOptions.isSslEnabled()", "public boolean isSslEnabled()"], ["boolean", "com.mongodb.MongoClientOptions.isSslInvalidHostNameAllowed()", "public boolean isSslInvalidHostNameAllowed()"], ["com.mongodb.ReadPreference", "com.mongodb.MongoClientOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoClientOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClientOptions.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["com.mongodb.DBDecoderFactory", "com.mongodb.MongoClientOptions.getDbDecoderFactory()", "public com.mongodb.DBDecoderFactory getDbDecoderFactory()"], ["com.mongodb.DBEncoderFactory", "com.mongodb.MongoClientOptions.getDbEncoderFactory()", "public com.mongodb.DBEncoderFactory getDbEncoderFactory()"], ["boolean", "com.mongodb.MongoClientOptions.isAlwaysUseMBeans()", "public boolean isAlwaysUseMBeans()"], ["javax.net.SocketFactory", "com.mongodb.MongoClientOptions.getSocketFactory()", "public javax.net.SocketFactory getSocketFactory()"], ["boolean", "com.mongodb.MongoClientOptions.isCursorFinalizerEnabled()", "public boolean isCursorFinalizerEnabled()"], ["boolean", "com.mongodb.MongoClientOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoClientOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoClientOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoClientURI", "com.mongodb.MongoClientURI(java.lang.String)", "public com.mongodb.MongoClientURI(java.lang.String)"], ["com.mongodb.MongoClientURI", "com.mongodb.MongoClientURI(java.lang.String, com.mongodb.MongoClientOptions$Builder)", "public com.mongodb.MongoClientURI(java.lang.String, com.mongodb.MongoClientOptions$Builder)"], ["java.lang.String", "com.mongodb.MongoClientURI.getUsername()", "public java.lang.String getUsername()"], ["char[]", "com.mongodb.MongoClientURI.getPassword()", "public char[] getPassword()"], ["java.util.List<java.lang.String>", "com.mongodb.MongoClientURI.getHosts()", "public java.util.List<java.lang.String> getHosts()"], ["java.lang.String", "com.mongodb.MongoClientURI.getDatabase()", "public java.lang.String getDatabase()"], ["java.lang.String", "com.mongodb.MongoClientURI.getCollection()", "public java.lang.String getCollection()"], ["java.lang.String", "com.mongodb.MongoClientURI.getURI()", "public java.lang.String getURI()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoClientURI.getCredentials()", "public com.mongodb.MongoCredential getCredentials()"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClientURI.getOptions()", "public com.mongodb.MongoClientOptions getOptions()"], ["boolean", "com.mongodb.MongoClientURI.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoClientURI.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoClientURI.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoCollectionImpl.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["java.lang.Class<TDocument>", "com.mongodb.MongoCollectionImpl.getDocumentClass()", "public java.lang.Class<TDocument> getDocumentClass()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoCollectionImpl.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["com.mongodb.ReadPreference", "com.mongodb.MongoCollectionImpl.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoCollectionImpl.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["<NewTDocument> com.mongodb.client.MongoCollection<NewTDocument>", "com.mongodb.MongoCollectionImpl.withDocumentClass(java.lang.Class<NewTDocument>)", "public <NewTDocument> com.mongodb.client.MongoCollection<NewTDocument> withDocumentClass(java.lang.Class<NewTDocument>)"], ["com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.MongoCollectionImpl.withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.MongoCollection<TDocument> withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.MongoCollectionImpl.withReadPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.MongoCollection<TDocument> withReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.MongoCollectionImpl.withWriteConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.MongoCollection<TDocument> withWriteConcern(com.mongodb.WriteConcern)"], ["long", "com.mongodb.MongoCollectionImpl.count()", "public long count()"], ["long", "com.mongodb.MongoCollectionImpl.count(org.bson.conversions.Bson)", "public long count(org.bson.conversions.Bson)"], ["long", "com.mongodb.MongoCollectionImpl.count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)", "public long count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.MongoCollectionImpl.distinct(java.lang.String, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.DistinctIterable<TResult> distinct(java.lang.String, java.lang.Class<TResult>)"], ["com.mongodb.client.FindIterable<TDocument>", "com.mongodb.MongoCollectionImpl.find()", "public com.mongodb.client.FindIterable<TDocument> find()"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.MongoCollectionImpl.find(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.FindIterable<TResult> find(java.lang.Class<TResult>)"], ["com.mongodb.client.FindIterable<TDocument>", "com.mongodb.MongoCollectionImpl.find(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TDocument> find(org.bson.conversions.Bson)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.MongoCollectionImpl.find(org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.FindIterable<TResult> find(org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["com.mongodb.client.AggregateIterable<TDocument>", "com.mongodb.MongoCollectionImpl.aggregate(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.AggregateIterable<TDocument> aggregate(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.MongoCollectionImpl.aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.AggregateIterable<TResult> aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.MapReduceIterable<TDocument>", "com.mongodb.MongoCollectionImpl.mapReduce(java.lang.String, java.lang.String)", "public com.mongodb.client.MapReduceIterable<TDocument> mapReduce(java.lang.String, java.lang.String)"], ["<TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.MongoCollectionImpl.mapReduce(java.lang.String, java.lang.String, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.MapReduceIterable<TResult> mapReduce(java.lang.String, java.lang.String, java.lang.Class<TResult>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoCollectionImpl.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)", "public com.mongodb.bulk.BulkWriteResult bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoCollectionImpl.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)", "public com.mongodb.bulk.BulkWriteResult bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)"], ["void", "com.mongodb.MongoCollectionImpl.insertOne(TDocument)", "public void insertOne(TDocument)"], ["void", "com.mongodb.MongoCollectionImpl.insertMany(java.util.List<? extends TDocument>)", "public void insertMany(java.util.List<? extends TDocument>)"], ["void", "com.mongodb.MongoCollectionImpl.insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)", "public void insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteOne(org.bson.conversions.Bson)", "public com.mongodb.client.result.DeleteResult deleteOne(org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.MongoCollectionImpl.deleteMany(org.bson.conversions.Bson)", "public com.mongodb.client.result.DeleteResult deleteMany(org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.replaceOne(org.bson.conversions.Bson, TDocument)", "public com.mongodb.client.result.UpdateResult replaceOne(org.bson.conversions.Bson, TDocument)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.result.UpdateResult updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.result.UpdateResult updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndDelete(org.bson.conversions.Bson)", "public TDocument findOneAndDelete(org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)", "public TDocument findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndReplace(org.bson.conversions.Bson, TDocument)", "public TDocument findOneAndReplace(org.bson.conversions.Bson, TDocument)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)", "public TDocument findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public TDocument findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)", "public TDocument findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["void", "com.mongodb.MongoCollectionImpl.drop()", "public void drop()"], ["java.lang.String", "com.mongodb.MongoCollectionImpl.createIndex(org.bson.conversions.Bson)", "public java.lang.String createIndex(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.MongoCollectionImpl.createIndex(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)", "public java.lang.String createIndex(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["java.util.List<java.lang.String>", "com.mongodb.MongoCollectionImpl.createIndexes(java.util.List<com.mongodb.client.model.IndexModel>)", "public java.util.List<java.lang.String> createIndexes(java.util.List<com.mongodb.client.model.IndexModel>)"], ["com.mongodb.client.ListIndexesIterable<org.bson.Document>", "com.mongodb.MongoCollectionImpl.listIndexes()", "public com.mongodb.client.ListIndexesIterable<org.bson.Document> listIndexes()"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.MongoCollectionImpl.listIndexes(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ListIndexesIterable<TResult> listIndexes(java.lang.Class<TResult>)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(java.lang.String)", "public void dropIndex(java.lang.String)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndex(org.bson.conversions.Bson)", "public void dropIndex(org.bson.conversions.Bson)"], ["void", "com.mongodb.MongoCollectionImpl.dropIndexes()", "public void dropIndexes()"], ["void", "com.mongodb.MongoCollectionImpl.renameCollection(com.mongodb.MongoNamespace)", "public void renameCollection(com.mongodb.MongoNamespace)"], ["void", "com.mongodb.MongoCollectionImpl.renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)", "public void renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)"], ["com.mongodb.MongoCommandException", "com.mongodb.MongoCommandException(org.bson.BsonDocument, com.mongodb.ServerAddress)", "public com.mongodb.MongoCommandException(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["int", "com.mongodb.MongoCommandException.getErrorCode()", "public int getErrorCode()"], ["java.lang.String", "com.mongodb.MongoCommandException.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["org.bson.BsonDocument", "com.mongodb.MongoCommandException.getResponse()", "public org.bson.BsonDocument getResponse()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createCredential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createScramSha1Credential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createScramSha1Credential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoCRCredential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createMongoCRCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoX509Credential(java.lang.String)", "public static com.mongodb.MongoCredential createMongoX509Credential(java.lang.String)"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createPlainCredential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createPlainCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createGSSAPICredential(java.lang.String)", "public static com.mongodb.MongoCredential createGSSAPICredential(java.lang.String)"], ["<T> com.mongodb.MongoCredential", "com.mongodb.MongoCredential.withMechanismProperty(java.lang.String, T)", "public <T> com.mongodb.MongoCredential withMechanismProperty(java.lang.String, T)"], ["java.lang.String", "com.mongodb.MongoCredential.getMechanism()", "public java.lang.String getMechanism()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.MongoCredential.getAuthenticationMechanism()", "public com.mongodb.AuthenticationMechanism getAuthenticationMechanism()"], ["java.lang.String", "com.mongodb.MongoCredential.getUserName()", "public java.lang.String getUserName()"], ["java.lang.String", "com.mongodb.MongoCredential.getSource()", "public java.lang.String getSource()"], ["char[]", "com.mongodb.MongoCredential.getPassword()", "public char[] getPassword()"], ["<T> T", "com.mongodb.MongoCredential.getMechanismProperty(java.lang.String, T)", "public <T> T getMechanismProperty(java.lang.String, T)"], ["boolean", "com.mongodb.MongoCredential.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoCredential.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoCredential.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoCursorAdapter", "com.mongodb.MongoCursorAdapter(com.mongodb.client.MongoCursor<com.mongodb.DBObject>)", "public com.mongodb.MongoCursorAdapter(com.mongodb.client.MongoCursor<com.mongodb.DBObject>)"], ["long", "com.mongodb.MongoCursorAdapter.getCursorId()", "public long getCursorId()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoCursorAdapter.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["void", "com.mongodb.MongoCursorAdapter.close()", "public void close()"], ["boolean", "com.mongodb.MongoCursorAdapter.hasNext()", "public boolean hasNext()"], ["com.mongodb.DBObject", "com.mongodb.MongoCursorAdapter.next()", "public com.mongodb.DBObject next()"], ["void", "com.mongodb.MongoCursorAdapter.remove()", "public void remove()"], ["java.lang.Object", "com.mongodb.MongoCursorAdapter.next()", "public java.lang.Object next()"], ["com.mongodb.MongoCursorNotFoundException", "com.mongodb.MongoCursorNotFoundException(long, com.mongodb.ServerAddress)", "public com.mongodb.MongoCursorNotFoundException(long, com.mongodb.ServerAddress)"], ["long", "com.mongodb.MongoCursorNotFoundException.getCursorId()", "public long getCursorId()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoCursorNotFoundException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["java.lang.String", "com.mongodb.MongoDatabaseImpl$1.apply(org.bson.BsonDocument)", "public java.lang.String apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.MongoDatabaseImpl$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.String", "com.mongodb.MongoDatabaseImpl.getName()", "public java.lang.String getName()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoDatabaseImpl.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["com.mongodb.ReadPreference", "com.mongodb.MongoDatabaseImpl.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoDatabaseImpl.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoDatabaseImpl.withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.MongoDatabase withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoDatabaseImpl.withReadPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.MongoDatabase withReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoDatabaseImpl.withWriteConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.MongoDatabase withWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.MongoCollection<org.bson.Document>", "com.mongodb.MongoDatabaseImpl.getCollection(java.lang.String)", "public com.mongodb.client.MongoCollection<org.bson.Document> getCollection(java.lang.String)"], ["<TDocument> com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.MongoDatabaseImpl.getCollection(java.lang.String, java.lang.Class<TDocument>)", "public <TDocument> com.mongodb.client.MongoCollection<TDocument> getCollection(java.lang.String, java.lang.Class<TDocument>)"], ["org.bson.Document", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson)", "public org.bson.Document runCommand(org.bson.conversions.Bson)"], ["org.bson.Document", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference)", "public org.bson.Document runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference)"], ["<TResult> TResult", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> TResult runCommand(org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> TResult", "com.mongodb.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)", "public <TResult> TResult runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)"], ["void", "com.mongodb.MongoDatabaseImpl.drop()", "public void drop()"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.MongoDatabaseImpl.listCollectionNames()", "public com.mongodb.client.MongoIterable<java.lang.String> listCollectionNames()"], ["com.mongodb.client.ListCollectionsIterable<org.bson.Document>", "com.mongodb.MongoDatabaseImpl.listCollections()", "public com.mongodb.client.ListCollectionsIterable<org.bson.Document> listCollections()"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.MongoDatabaseImpl.listCollections(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ListCollectionsIterable<TResult> listCollections(java.lang.Class<TResult>)"], ["void", "com.mongodb.MongoDatabaseImpl.createCollection(java.lang.String)", "public void createCollection(java.lang.String)"], ["void", "com.mongodb.MongoDatabaseImpl.createCollection(java.lang.String, com.mongodb.client.model.CreateCollectionOptions)", "public void createCollection(java.lang.String, com.mongodb.client.model.CreateCollectionOptions)"], ["com.mongodb.MongoException", "com.mongodb.MongoException.fromThrowable(java.lang.Throwable)", "public static com.mongodb.MongoException fromThrowable(java.lang.Throwable)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(java.lang.String)", "public com.mongodb.MongoException(java.lang.String)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(int, java.lang.String)", "public com.mongodb.MongoException(int, java.lang.String)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(int, java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoException(int, java.lang.String, java.lang.Throwable)"], ["int", "com.mongodb.MongoException.getCode()", "public int getCode()"], ["com.mongodb.MongoExecutionTimeoutException", "com.mongodb.MongoExecutionTimeoutException(int, java.lang.String)", "public com.mongodb.MongoExecutionTimeoutException(int, java.lang.String)"], ["com.mongodb.MongoIncompatibleDriverException", "com.mongodb.MongoIncompatibleDriverException(java.lang.String, com.mongodb.connection.ClusterDescription)", "public com.mongodb.MongoIncompatibleDriverException(java.lang.String, com.mongodb.connection.ClusterDescription)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.MongoIncompatibleDriverException.getClusterDescription()", "public com.mongodb.connection.ClusterDescription getClusterDescription()"], ["com.mongodb.MongoInternalException", "com.mongodb.MongoInternalException(java.lang.String)", "public com.mongodb.MongoInternalException(java.lang.String)"], ["com.mongodb.MongoInternalException", "com.mongodb.MongoInternalException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoInternalException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoInterruptedException", "com.mongodb.MongoInterruptedException(java.lang.String, java.lang.Exception)", "public com.mongodb.MongoInterruptedException(java.lang.String, java.lang.Exception)"], ["com.mongodb.MongoMappingCursor", "com.mongodb.MongoMappingCursor(com.mongodb.client.MongoCursor<T>, com.mongodb.Function<T, U>)", "public com.mongodb.MongoMappingCursor(com.mongodb.client.MongoCursor<T>, com.mongodb.Function<T, U>)"], ["void", "com.mongodb.MongoMappingCursor.close()", "public void close()"], ["boolean", "com.mongodb.MongoMappingCursor.hasNext()", "public boolean hasNext()"], ["U", "com.mongodb.MongoMappingCursor.next()", "public U next()"], ["U", "com.mongodb.MongoMappingCursor.tryNext()", "public U tryNext()"], ["void", "com.mongodb.MongoMappingCursor.remove()", "public void remove()"], ["com.mongodb.ServerCursor", "com.mongodb.MongoMappingCursor.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoMappingCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoNamespace(java.lang.String)", "public com.mongodb.MongoNamespace(java.lang.String)"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoNamespace(java.lang.String, java.lang.String)", "public com.mongodb.MongoNamespace(java.lang.String, java.lang.String)"], ["java.lang.String", "com.mongodb.MongoNamespace.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["java.lang.String", "com.mongodb.MongoNamespace.getCollectionName()", "public java.lang.String getCollectionName()"], ["java.lang.String", "com.mongodb.MongoNamespace.getFullName()", "public java.lang.String getFullName()"], ["boolean", "com.mongodb.MongoNamespace.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.mongodb.MongoNamespace.toString()", "public java.lang.String toString()"], ["int", "com.mongodb.MongoNamespace.hashCode()", "public int hashCode()"], ["com.mongodb.MongoNodeIsRecoveringException", "com.mongodb.MongoNodeIsRecoveringException(com.mongodb.ServerAddress)", "public com.mongodb.MongoNodeIsRecoveringException(com.mongodb.ServerAddress)"], ["com.mongodb.MongoNotPrimaryException", "com.mongodb.MongoNotPrimaryException(com.mongodb.ServerAddress)", "public com.mongodb.MongoNotPrimaryException(com.mongodb.ServerAddress)"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions()", "public com.mongodb.MongoOptions()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions(com.mongodb.MongoClientOptions)", "public com.mongodb.MongoOptions(com.mongodb.MongoClientOptions)"], ["void", "com.mongodb.MongoOptions.reset()", "public void reset()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions.copy()", "public com.mongodb.MongoOptions copy()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["void", "com.mongodb.MongoOptions.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["synchronized", "com.mongodb.MongoOptions.javax.net.SocketFactory getSocketFactory()", "public synchronized javax.net.SocketFactory getSocketFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketFactory(javax.net.SocketFactory)", "public synchronized void setSocketFactory(javax.net.SocketFactory)"], ["synchronized", "com.mongodb.MongoOptions.java.lang.String getDescription()", "public synchronized java.lang.String getDescription()"], ["synchronized", "com.mongodb.MongoOptions.void setDescription(java.lang.String)", "public synchronized void setDescription(java.lang.String)"], ["synchronized", "com.mongodb.MongoOptions.int getConnectionsPerHost()", "public synchronized int getConnectionsPerHost()"], ["synchronized", "com.mongodb.MongoOptions.void setConnectionsPerHost(int)", "public synchronized void setConnectionsPerHost(int)"], ["synchronized", "com.mongodb.MongoOptions.int getThreadsAllowedToBlockForConnectionMultiplier()", "public synchronized int getThreadsAllowedToBlockForConnectionMultiplier()"], ["synchronized", "com.mongodb.MongoOptions.void setThreadsAllowedToBlockForConnectionMultiplier(int)", "public synchronized void setThreadsAllowedToBlockForConnectionMultiplier(int)"], ["synchronized", "com.mongodb.MongoOptions.int getMaxWaitTime()", "public synchronized int getMaxWaitTime()"], ["synchronized", "com.mongodb.MongoOptions.void setMaxWaitTime(int)", "public synchronized void setMaxWaitTime(int)"], ["synchronized", "com.mongodb.MongoOptions.int getConnectTimeout()", "public synchronized int getConnectTimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setConnectTimeout(int)", "public synchronized void setConnectTimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.int getSocketTimeout()", "public synchronized int getSocketTimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketTimeout(int)", "public synchronized void setSocketTimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.boolean isSocketKeepAlive()", "public synchronized boolean isSocketKeepAlive()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketKeepAlive(boolean)", "public synchronized void setSocketKeepAlive(boolean)"], ["synchronized", "com.mongodb.MongoOptions.com.mongodb.DBDecoderFactory getDbDecoderFactory()", "public synchronized com.mongodb.DBDecoderFactory getDbDecoderFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setDbDecoderFactory(com.mongodb.DBDecoderFactory)", "public synchronized void setDbDecoderFactory(com.mongodb.DBDecoderFactory)"], ["synchronized", "com.mongodb.MongoOptions.com.mongodb.DBEncoderFactory getDbEncoderFactory()", "public synchronized com.mongodb.DBEncoderFactory getDbEncoderFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setDbEncoderFactory(com.mongodb.DBEncoderFactory)", "public synchronized void setDbEncoderFactory(com.mongodb.DBEncoderFactory)"], ["synchronized", "com.mongodb.MongoOptions.boolean isSafe()", "public synchronized boolean isSafe()"], ["synchronized", "com.mongodb.MongoOptions.void setSafe(boolean)", "public synchronized void setSafe(boolean)"], ["synchronized", "com.mongodb.MongoOptions.int getW()", "public synchronized int getW()"], ["synchronized", "com.mongodb.MongoOptions.void setW(int)", "public synchronized void setW(int)"], ["synchronized", "com.mongodb.MongoOptions.int getWtimeout()", "public synchronized int getWtimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setWtimeout(int)", "public synchronized void setWtimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.boolean isFsync()", "public synchronized boolean isFsync()"], ["synchronized", "com.mongodb.MongoOptions.void setFsync(boolean)", "public synchronized void setFsync(boolean)"], ["synchronized", "com.mongodb.MongoOptions.boolean isJ()", "public synchronized boolean isJ()"], ["synchronized", "com.mongodb.MongoOptions.void setJ(boolean)", "public synchronized void setJ(boolean)"], ["com.mongodb.ReadPreference", "com.mongodb.MongoOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["void", "com.mongodb.MongoOptions.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["boolean", "com.mongodb.MongoOptions.isCursorFinalizerEnabled()", "public boolean isCursorFinalizerEnabled()"], ["void", "com.mongodb.MongoOptions.setCursorFinalizerEnabled(boolean)", "public void setCursorFinalizerEnabled(boolean)"], ["boolean", "com.mongodb.MongoOptions.isAlwaysUseMBeans()", "public boolean isAlwaysUseMBeans()"], ["void", "com.mongodb.MongoOptions.setAlwaysUseMBeans(boolean)", "public void setAlwaysUseMBeans(boolean)"], ["java.lang.String", "com.mongodb.MongoOptions.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["boolean", "com.mongodb.MongoOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoQueryException", "com.mongodb.MongoQueryException(com.mongodb.ServerAddress, int, java.lang.String)", "public com.mongodb.MongoQueryException(com.mongodb.ServerAddress, int, java.lang.String)"], ["int", "com.mongodb.MongoQueryException.getErrorCode()", "public int getErrorCode()"], ["java.lang.String", "com.mongodb.MongoQueryException.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["com.mongodb.MongoSecurityException", "com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoSecurityException", "com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String)", "public com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String)"], ["com.mongodb.MongoCredential", "com.mongodb.MongoSecurityException.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["com.mongodb.MongoServerException", "com.mongodb.MongoServerException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoServerException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoServerException", "com.mongodb.MongoServerException(int, java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoServerException(int, java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.MongoServerException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.MongoSocketClosedException", "com.mongodb.MongoSocketClosedException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoSocketClosedException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoSocketException", "com.mongodb.MongoSocketException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoSocketException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.MongoSocketException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.MongoSocketOpenException", "com.mongodb.MongoSocketOpenException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketOpenException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.MongoSocketReadException", "com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoSocketReadException", "com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.MongoSocketReadTimeoutException", "com.mongodb.MongoSocketReadTimeoutException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketReadTimeoutException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.MongoSocketWriteException", "com.mongodb.MongoSocketWriteException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketWriteException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.MongoTimeoutException", "com.mongodb.MongoTimeoutException(java.lang.String)", "public com.mongodb.MongoTimeoutException(java.lang.String)"], ["com.mongodb.MongoURI", "com.mongodb.MongoURI(java.lang.String)", "public com.mongodb.MongoURI(java.lang.String)"], ["com.mongodb.MongoURI", "com.mongodb.MongoURI(com.mongodb.MongoClientURI)", "public com.mongodb.MongoURI(com.mongodb.MongoClientURI)"], ["java.lang.String", "com.mongodb.MongoURI.getUsername()", "public java.lang.String getUsername()"], ["char[]", "com.mongodb.MongoURI.getPassword()", "public char[] getPassword()"], ["java.util.List<java.lang.String>", "com.mongodb.MongoURI.getHosts()", "public java.util.List<java.lang.String> getHosts()"], ["java.lang.String", "com.mongodb.MongoURI.getDatabase()", "public java.lang.String getDatabase()"], ["java.lang.String", "com.mongodb.MongoURI.getCollection()", "public java.lang.String getCollection()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoURI.getCredentials()", "public com.mongodb.MongoCredential getCredentials()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoURI.getOptions()", "public com.mongodb.MongoOptions getOptions()"], ["com.mongodb.Mongo", "com.mongodb.MongoURI.connect()", "public com.mongodb.Mongo connect()"], ["com.mongodb.DB", "com.mongodb.MongoURI.connectDB()", "public com.mongodb.DB connectDB()"], ["com.mongodb.DB", "com.mongodb.MongoURI.connectDB(com.mongodb.Mongo)", "public com.mongodb.DB connectDB(com.mongodb.Mongo)"], ["com.mongodb.DBCollection", "com.mongodb.MongoURI.connectCollection(com.mongodb.DB)", "public com.mongodb.DBCollection connectCollection(com.mongodb.DB)"], ["com.mongodb.DBCollection", "com.mongodb.MongoURI.connectCollection(com.mongodb.Mongo)", "public com.mongodb.DBCollection connectCollection(com.mongodb.Mongo)"], ["java.lang.String", "com.mongodb.MongoURI.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoWaitQueueFullException", "com.mongodb.MongoWaitQueueFullException(java.lang.String)", "public com.mongodb.MongoWaitQueueFullException(java.lang.String)"], ["com.mongodb.MongoWriteConcernException", "com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)", "public com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.MongoWriteConcernException.getWriteConcernError()", "public com.mongodb.bulk.WriteConcernError getWriteConcernError()"], ["com.mongodb.MongoWriteException", "com.mongodb.MongoWriteException(com.mongodb.WriteError, com.mongodb.ServerAddress)", "public com.mongodb.MongoWriteException(com.mongodb.WriteError, com.mongodb.ServerAddress)"], ["com.mongodb.WriteError", "com.mongodb.MongoWriteException.getError()", "public com.mongodb.WriteError getError()"], ["void", "com.mongodb.OperationIterable$1.apply(T)", "public void apply(T)"], ["com.mongodb.client.MongoCursor<T>", "com.mongodb.OperationIterable.iterator()", "public com.mongodb.client.MongoCursor<T> iterator()"], ["T", "com.mongodb.OperationIterable.first()", "public T first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.OperationIterable.map(com.mongodb.Function<T, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<T, U>)"], ["void", "com.mongodb.OperationIterable.forEach(com.mongodb.Block<? super T>)", "public void forEach(com.mongodb.Block<? super T>)"], ["<A extends java.util.Collection<? super T>> A", "com.mongodb.OperationIterable.into(A)", "public <A extends java.util.Collection<? super T>> A into(A)"], ["com.mongodb.client.MongoIterable<T>", "com.mongodb.OperationIterable.batchSize(int)", "public com.mongodb.client.MongoIterable<T> batchSize(int)"], ["java.util.Iterator", "com.mongodb.OperationIterable.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder()", "public com.mongodb.ParallelScanOptions$Builder()"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.numCursors(int)", "public com.mongodb.ParallelScanOptions$Builder numCursors(int)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.batchSize(int)", "public com.mongodb.ParallelScanOptions$Builder batchSize(int)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.ParallelScanOptions$Builder readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ParallelScanOptions", "com.mongodb.ParallelScanOptions$Builder.build()", "public com.mongodb.ParallelScanOptions build()"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions.builder()", "public static com.mongodb.ParallelScanOptions$Builder builder()"], ["int", "com.mongodb.ParallelScanOptions.getNumCursors()", "public int getNumCursors()"], ["int", "com.mongodb.ParallelScanOptions.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.ReadPreference", "com.mongodb.ParallelScanOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder()", "public com.mongodb.QueryBuilder()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.start()", "public static com.mongodb.QueryBuilder start()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.start(java.lang.String)", "public static com.mongodb.QueryBuilder start(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.put(java.lang.String)", "public com.mongodb.QueryBuilder put(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.and(java.lang.String)", "public com.mongodb.QueryBuilder and(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.greaterThan(java.lang.Object)", "public com.mongodb.QueryBuilder greaterThan(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.greaterThanEquals(java.lang.Object)", "public com.mongodb.QueryBuilder greaterThanEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.lessThan(java.lang.Object)", "public com.mongodb.QueryBuilder lessThan(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.lessThanEquals(java.lang.Object)", "public com.mongodb.QueryBuilder lessThanEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.is(java.lang.Object)", "public com.mongodb.QueryBuilder is(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.notEquals(java.lang.Object)", "public com.mongodb.QueryBuilder notEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.in(java.lang.Object)", "public com.mongodb.QueryBuilder in(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.notIn(java.lang.Object)", "public com.mongodb.QueryBuilder notIn(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.mod(java.lang.Object)", "public com.mongodb.QueryBuilder mod(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.all(java.lang.Object)", "public com.mongodb.QueryBuilder all(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.size(java.lang.Object)", "public com.mongodb.QueryBuilder size(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.exists(java.lang.Object)", "public com.mongodb.QueryBuilder exists(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.regex(java.util.regex.Pattern)", "public com.mongodb.QueryBuilder regex(java.util.regex.Pattern)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.elemMatch(com.mongodb.DBObject)", "public com.mongodb.QueryBuilder elemMatch(com.mongodb.DBObject)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinCenter(double, double, double)", "public com.mongodb.QueryBuilder withinCenter(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.near(double, double)", "public com.mongodb.QueryBuilder near(double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.near(double, double, double)", "public com.mongodb.QueryBuilder near(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.nearSphere(double, double)", "public com.mongodb.QueryBuilder nearSphere(double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.nearSphere(double, double, double)", "public com.mongodb.QueryBuilder nearSphere(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinCenterSphere(double, double, double)", "public com.mongodb.QueryBuilder withinCenterSphere(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinBox(double, double, double, double)", "public com.mongodb.QueryBuilder withinBox(double, double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinPolygon(java.util.List<java.lang.Double[]>)", "public com.mongodb.QueryBuilder withinPolygon(java.util.List<java.lang.Double[]>)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.text(java.lang.String)", "public com.mongodb.QueryBuilder text(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.text(java.lang.String, java.lang.String)", "public com.mongodb.QueryBuilder text(java.lang.String, java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.not()", "public com.mongodb.QueryBuilder not()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.or(com.mongodb.DBObject...)", "public com.mongodb.QueryBuilder or(com.mongodb.DBObject...)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.and(com.mongodb.DBObject...)", "public com.mongodb.QueryBuilder and(com.mongodb.DBObject...)"], ["com.mongodb.DBObject", "com.mongodb.QueryBuilder.get()", "public com.mongodb.DBObject get()"], ["boolean", "com.mongodb.ReadPreference$PrimaryReadPreference.isSlaveOk()", "public boolean isSlaveOk()"], ["java.lang.String", "com.mongodb.ReadPreference$PrimaryReadPreference.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.ReadPreference$PrimaryReadPreference.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ReadPreference$PrimaryReadPreference.hashCode()", "public int hashCode()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.ReadPreference$PrimaryReadPreference.choose(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> choose(com.mongodb.connection.ClusterDescription)"], ["org.bson.BsonDocument", "com.mongodb.ReadPreference$PrimaryReadPreference.toDocument()", "public org.bson.BsonDocument toDocument()"], ["java.lang.String", "com.mongodb.ReadPreference$PrimaryReadPreference.getName()", "public java.lang.String getName()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primary()", "public static com.mongodb.ReadPreference primary()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primaryPreferred()", "public static com.mongodb.ReadPreference primaryPreferred()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondary()", "public static com.mongodb.ReadPreference secondary()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondaryPreferred()", "public static com.mongodb.ReadPreference secondaryPreferred()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.nearest()", "public static com.mongodb.ReadPreference nearest()"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference primaryPreferred(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference secondary(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference secondaryPreferred(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference nearest(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference primaryPreferred(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference secondary(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference secondaryPreferred(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference nearest(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String)", "public static com.mongodb.ReadPreference valueOf(java.lang.String)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>)"], ["java.util.Set<java.lang.String>", "com.mongodb.ReflectionDBObject$JavaWrapper.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "com.mongodb.ReflectionDBObject$JavaWrapper.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject$JavaWrapper.get(com.mongodb.ReflectionDBObject, java.lang.String)", "public java.lang.Object get(com.mongodb.ReflectionDBObject, java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject$JavaWrapper.set(com.mongodb.ReflectionDBObject, java.lang.String, java.lang.Object)", "public java.lang.Object set(com.mongodb.ReflectionDBObject, java.lang.String, java.lang.Object)"], ["com.mongodb.ReflectionDBObject", "com.mongodb.ReflectionDBObject()", "public com.mongodb.ReflectionDBObject()"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["java.util.Set<java.lang.String>", "com.mongodb.ReflectionDBObject.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "com.mongodb.ReflectionDBObject.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "com.mongodb.ReflectionDBObject.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["void", "com.mongodb.ReflectionDBObject.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["void", "com.mongodb.ReflectionDBObject.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.get_id()", "public java.lang.Object get_id()"], ["void", "com.mongodb.ReflectionDBObject.set_id(java.lang.Object)", "public void set_id(java.lang.Object)"], ["boolean", "com.mongodb.ReflectionDBObject.isPartialObject()", "public boolean isPartialObject()"], ["java.util.Map", "com.mongodb.ReflectionDBObject.toMap()", "public java.util.Map toMap()"], ["void", "com.mongodb.ReflectionDBObject.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["com.mongodb.ReflectionDBObject$JavaWrapper", "com.mongodb.ReflectionDBObject.getWrapperIfReflectionObject(java.lang.Class)", "public static com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)"], ["com.mongodb.ReflectionDBObject$JavaWrapper", "com.mongodb.ReflectionDBObject.getWrapper(java.lang.Class)", "public static com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)"], ["com.mongodb.RemoveRequest", "com.mongodb.RemoveRequest(com.mongodb.DBObject, boolean, org.bson.codecs.Encoder<com.mongodb.DBObject>)", "public com.mongodb.RemoveRequest(com.mongodb.DBObject, boolean, org.bson.codecs.Encoder<com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.RemoveRequest.getQuery()", "public com.mongodb.DBObject getQuery()"], ["boolean", "com.mongodb.RemoveRequest.isMulti()", "public boolean isMulti()"], ["com.mongodb.ReplaceRequest", "com.mongodb.ReplaceRequest(com.mongodb.DBObject, com.mongodb.DBObject, boolean, org.bson.codecs.Encoder<com.mongodb.DBObject>, org.bson.codecs.Encoder<com.mongodb.DBObject>)", "public com.mongodb.ReplaceRequest(com.mongodb.DBObject, com.mongodb.DBObject, boolean, org.bson.codecs.Encoder<com.mongodb.DBObject>, org.bson.codecs.Encoder<com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.ReplaceRequest.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBObject", "com.mongodb.ReplaceRequest.getDocument()", "public com.mongodb.DBObject getDocument()"], ["boolean", "com.mongodb.ReplaceRequest.isUpsert()", "public boolean isUpsert()"], ["java.lang.String", "com.mongodb.ReplicaSetStatus.getName()", "public java.lang.String getName()"], ["com.mongodb.ServerAddress", "com.mongodb.ReplicaSetStatus.getMaster()", "public com.mongodb.ServerAddress getMaster()"], ["boolean", "com.mongodb.ReplicaSetStatus.isMaster(com.mongodb.ServerAddress)", "public boolean isMaster(com.mongodb.ServerAddress)"], ["int", "com.mongodb.ReplicaSetStatus.getMaxBsonObjectSize()", "public int getMaxBsonObjectSize()"], ["java.lang.String", "com.mongodb.ReplicaSetStatus.toString()", "public java.lang.String toString()"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress()", "public com.mongodb.ServerAddress()"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.lang.String)", "public com.mongodb.ServerAddress(java.lang.String)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetAddress)", "public com.mongodb.ServerAddress(java.net.InetAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetAddress, int)", "public com.mongodb.ServerAddress(java.net.InetAddress, int)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetSocketAddress)", "public com.mongodb.ServerAddress(java.net.InetSocketAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.lang.String, int)", "public com.mongodb.ServerAddress(java.lang.String, int)"], ["boolean", "com.mongodb.ServerAddress.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ServerAddress.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.ServerAddress.getHost()", "public java.lang.String getHost()"], ["int", "com.mongodb.ServerAddress.getPort()", "public int getPort()"], ["java.net.InetSocketAddress", "com.mongodb.ServerAddress.getSocketAddress()", "public java.net.InetSocketAddress getSocketAddress()"], ["java.lang.String", "com.mongodb.ServerAddress.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.ServerAddress.defaultHost()", "public static java.lang.String defaultHost()"], ["int", "com.mongodb.ServerAddress.defaultPort()", "public static int defaultPort()"], ["boolean", "com.mongodb.ServerAddress.sameHost(java.lang.String)", "public boolean sameHost(java.lang.String)"], ["com.mongodb.ServerCursor", "com.mongodb.ServerCursor(long, com.mongodb.ServerAddress)", "public com.mongodb.ServerCursor(long, com.mongodb.ServerAddress)"], ["long", "com.mongodb.ServerCursor.getId()", "public long getId()"], ["com.mongodb.ServerAddress", "com.mongodb.ServerCursor.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["boolean", "com.mongodb.ServerCursor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ServerCursor.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.ServerCursor.toString()", "public java.lang.String toString()"], ["com.mongodb.Tag", "com.mongodb.Tag(java.lang.String, java.lang.String)", "public com.mongodb.Tag(java.lang.String, java.lang.String)"], ["java.lang.String", "com.mongodb.Tag.getName()", "public java.lang.String getName()"], ["java.lang.String", "com.mongodb.Tag.getValue()", "public java.lang.String getValue()"], ["boolean", "com.mongodb.Tag.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.Tag.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.Tag.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.TaggableReadPreference$NearestReadPreference.getName()", "public java.lang.String getName()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.TaggableReadPreference$NearestReadPreference.choose(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> choose(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.getName()", "public java.lang.String getName()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.choose(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> choose(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.getName()", "public java.lang.String getName()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.choose(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> choose(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.TaggableReadPreference$SecondaryReadPreference.getName()", "public java.lang.String getName()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.TaggableReadPreference$SecondaryReadPreference.choose(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> choose(com.mongodb.connection.ClusterDescription)"], ["boolean", "com.mongodb.TaggableReadPreference.isSlaveOk()", "public boolean isSlaveOk()"], ["org.bson.BsonDocument", "com.mongodb.TaggableReadPreference.toDocument()", "public org.bson.BsonDocument toDocument()"], ["java.util.List<com.mongodb.TagSet>", "com.mongodb.TaggableReadPreference.getTagSetList()", "public java.util.List<com.mongodb.TagSet> getTagSetList()"], ["java.lang.String", "com.mongodb.TaggableReadPreference.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.TaggableReadPreference.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.TaggableReadPreference.hashCode()", "public int hashCode()"], ["com.mongodb.TagSet", "com.mongodb.TagSet()", "public com.mongodb.TagSet()"], ["com.mongodb.TagSet", "com.mongodb.TagSet(com.mongodb.Tag)", "public com.mongodb.TagSet(com.mongodb.Tag)"], ["com.mongodb.TagSet", "com.mongodb.TagSet(java.util.List<com.mongodb.Tag>)", "public com.mongodb.TagSet(java.util.List<com.mongodb.Tag>)"], ["java.util.Iterator<com.mongodb.Tag>", "com.mongodb.TagSet.iterator()", "public java.util.Iterator<com.mongodb.Tag> iterator()"], ["boolean", "com.mongodb.TagSet.containsAll(com.mongodb.TagSet)", "public boolean containsAll(com.mongodb.TagSet)"], ["boolean", "com.mongodb.TagSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.TagSet.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.TagSet.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.isAcknowledged()", "public boolean isAcknowledged()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getRemovedCount()", "public int getRemovedCount()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.BulkWriteUpsert>", "com.mongodb.UnacknowledgedBulkWriteResult.getUpserts()", "public java.util.List<com.mongodb.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.UnacknowledgedBulkWriteResult.toString()", "public java.lang.String toString()"], ["com.mongodb.UpdateRequest", "com.mongodb.UpdateRequest(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, org.bson.codecs.Encoder<com.mongodb.DBObject>)", "public com.mongodb.UpdateRequest(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, org.bson.codecs.Encoder<com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.UpdateRequest.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBObject", "com.mongodb.UpdateRequest.getUpdate()", "public com.mongodb.DBObject getUpdate()"], ["boolean", "com.mongodb.UpdateRequest.isUpsert()", "public boolean isUpsert()"], ["boolean", "com.mongodb.UpdateRequest.isMulti()", "public boolean isMulti()"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern$Majority()", "public com.mongodb.WriteConcern$Majority()"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern$Majority(int, boolean, boolean)", "public com.mongodb.WriteConcern$Majority(int, boolean, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern()", "public com.mongodb.WriteConcern()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int)", "public com.mongodb.WriteConcern(int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(java.lang.String)", "public com.mongodb.WriteConcern(java.lang.String)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int)", "public com.mongodb.WriteConcern(int, int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(boolean)", "public com.mongodb.WriteConcern(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int, boolean)", "public com.mongodb.WriteConcern(int, int, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int, boolean, boolean)", "public com.mongodb.WriteConcern(int, int, boolean, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(java.lang.String, int, boolean, boolean)", "public com.mongodb.WriteConcern(java.lang.String, int, boolean, boolean)"], ["java.lang.Object", "com.mongodb.WriteConcern.getWObject()", "public java.lang.Object getWObject()"], ["int", "com.mongodb.WriteConcern.getW()", "public int getW()"], ["java.lang.String", "com.mongodb.WriteConcern.getWString()", "public java.lang.String getWString()"], ["int", "com.mongodb.WriteConcern.getWtimeout()", "public int getWtimeout()"], ["boolean", "com.mongodb.WriteConcern.getFsync()", "public boolean getFsync()"], ["boolean", "com.mongodb.WriteConcern.fsync()", "public boolean fsync()"], ["boolean", "com.mongodb.WriteConcern.callGetLastError()", "public boolean callGetLastError()"], ["boolean", "com.mongodb.WriteConcern.isServerDefault()", "public boolean isServerDefault()"], ["org.bson.BsonDocument", "com.mongodb.WriteConcern.asDocument()", "public org.bson.BsonDocument asDocument()"], ["boolean", "com.mongodb.WriteConcern.isAcknowledged()", "public boolean isAcknowledged()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.valueOf(java.lang.String)", "public static com.mongodb.WriteConcern valueOf(java.lang.String)"], ["boolean", "com.mongodb.WriteConcern.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcern.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcern.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.WriteConcern.getJ()", "public boolean getJ()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withW(int)", "public com.mongodb.WriteConcern withW(int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withW(java.lang.String)", "public com.mongodb.WriteConcern withW(java.lang.String)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withFsync(boolean)", "public com.mongodb.WriteConcern withFsync(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withJ(boolean)", "public com.mongodb.WriteConcern withJ(boolean)"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern.majorityWriteConcern(int, boolean, boolean)", "public static com.mongodb.WriteConcern$Majority majorityWriteConcern(int, boolean, boolean)"], ["com.mongodb.WriteConcernError", "com.mongodb.WriteConcernError(int, java.lang.String, com.mongodb.DBObject)", "public com.mongodb.WriteConcernError(int, java.lang.String, com.mongodb.DBObject)"], ["int", "com.mongodb.WriteConcernError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.WriteConcernError.getMessage()", "public java.lang.String getMessage()"], ["com.mongodb.DBObject", "com.mongodb.WriteConcernError.getDetails()", "public com.mongodb.DBObject getDetails()"], ["boolean", "com.mongodb.WriteConcernError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernError.toString()", "public java.lang.String toString()"], ["com.mongodb.WriteConcernException", "com.mongodb.WriteConcernException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)", "public com.mongodb.WriteConcernException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)"], ["int", "com.mongodb.WriteConcernException.extractErrorCode(org.bson.BsonDocument)", "public static int extractErrorCode(org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.WriteConcernException.extractErrorMessage(org.bson.BsonDocument)", "public static java.lang.String extractErrorMessage(org.bson.BsonDocument)"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernException.getWriteConcernResult()", "public com.mongodb.WriteConcernResult getWriteConcernResult()"], ["int", "com.mongodb.WriteConcernException.getErrorCode()", "public int getErrorCode()"], ["java.lang.String", "com.mongodb.WriteConcernException.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["org.bson.BsonDocument", "com.mongodb.WriteConcernException.getResponse()", "public org.bson.BsonDocument getResponse()"], ["boolean", "com.mongodb.WriteConcernResult$1.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.WriteConcernResult$1.getCount()", "public int getCount()"], ["boolean", "com.mongodb.WriteConcernResult$1.isUpdateOfExisting()", "public boolean isUpdateOfExisting()"], ["org.bson.BsonValue", "com.mongodb.WriteConcernResult$1.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.WriteConcernResult$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernResult$1.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernResult$1.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.WriteConcernResult$2.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.WriteConcernResult$2.getCount()", "public int getCount()"], ["boolean", "com.mongodb.WriteConcernResult$2.isUpdateOfExisting()", "public boolean isUpdateOfExisting()"], ["org.bson.BsonValue", "com.mongodb.WriteConcernResult$2.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.WriteConcernResult$2.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernResult$2.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernResult$2.toString()", "public java.lang.String toString()"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult()", "public com.mongodb.WriteConcernResult()"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult.acknowledged(int, boolean, org.bson.BsonValue)", "public static com.mongodb.WriteConcernResult acknowledged(int, boolean, org.bson.BsonValue)"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult.unacknowledged()", "public static com.mongodb.WriteConcernResult unacknowledged()"], ["com.mongodb.WriteError", "com.mongodb.WriteError(int, java.lang.String, org.bson.BsonDocument)", "public com.mongodb.WriteError(int, java.lang.String, org.bson.BsonDocument)"], ["com.mongodb.WriteError", "com.mongodb.WriteError(com.mongodb.WriteError)", "public com.mongodb.WriteError(com.mongodb.WriteError)"], ["com.mongodb.ErrorCategory", "com.mongodb.WriteError.getCategory()", "public com.mongodb.ErrorCategory getCategory()"], ["int", "com.mongodb.WriteError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.WriteError.getMessage()", "public java.lang.String getMessage()"], ["org.bson.BsonDocument", "com.mongodb.WriteError.getDetails()", "public org.bson.BsonDocument getDetails()"], ["boolean", "com.mongodb.WriteError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteError.toString()", "public java.lang.String toString()"], ["com.mongodb.WriteResult", "com.mongodb.WriteResult.unacknowledged()", "public static com.mongodb.WriteResult unacknowledged()"], ["com.mongodb.WriteResult", "com.mongodb.WriteResult(int, boolean, java.lang.Object)", "public com.mongodb.WriteResult(int, boolean, java.lang.Object)"], ["boolean", "com.mongodb.WriteResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.WriteResult.getN()", "public int getN()"], ["java.lang.Object", "com.mongodb.WriteResult.getUpsertedId()", "public java.lang.Object getUpsertedId()"], ["boolean", "com.mongodb.WriteResult.isUpdateOfExisting()", "public boolean isUpdateOfExisting()"], ["java.lang.String", "com.mongodb.WriteResult.toString()", "public java.lang.String toString()"], ["<T> T", "com.mongodb.assertions.Assertions.notNull(java.lang.String, T)", "public static <T> T notNull(java.lang.String, T)"], ["<T> T", "com.mongodb.assertions.Assertions.notNull(java.lang.String, T, com.mongodb.async.SingleResultCallback<?>)", "public static <T> T notNull(java.lang.String, T, com.mongodb.async.SingleResultCallback<?>)"], ["void", "com.mongodb.assertions.Assertions.isTrue(java.lang.String, boolean)", "public static void isTrue(java.lang.String, boolean)"], ["void", "com.mongodb.assertions.Assertions.isTrue(java.lang.String, boolean, com.mongodb.async.SingleResultCallback<?>)", "public static void isTrue(java.lang.String, boolean, com.mongodb.async.SingleResultCallback<?>)"], ["void", "com.mongodb.assertions.Assertions.isTrueArgument(java.lang.String, boolean)", "public static void isTrueArgument(java.lang.String, boolean)"], ["int", "com.mongodb.binding.AbstractReferenceCounted.getCount()", "public int getCount()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AbstractReferenceCounted.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.binding.AbstractReferenceCounted.release()", "public void release()"], ["void", "com.mongodb.binding.AsyncClusterBinding$1.onResult(com.mongodb.connection.Server, java.lang.Throwable)", "public void onResult(com.mongodb.connection.Server, java.lang.Throwable)"], ["void", "com.mongodb.binding.AsyncClusterBinding$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["void", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)", "public void getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.binding.AsyncConnectionSource", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.retain()", "public com.mongodb.binding.AsyncConnectionSource retain()"], ["void", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.AsyncClusterBinding", "com.mongodb.binding.AsyncClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)", "public com.mongodb.binding.AsyncClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)"], ["com.mongodb.binding.AsyncReadWriteBinding", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.AsyncReadWriteBinding retain()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.AsyncClusterBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["void", "com.mongodb.binding.AsyncClusterBinding.getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)", "public void getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["void", "com.mongodb.binding.AsyncClusterBinding.getWriteConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)", "public void getWriteConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["void", "com.mongodb.binding.AsyncClusterBinding.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["int", "com.mongodb.binding.AsyncClusterBinding.getCount()", "public int getCount()"], ["com.mongodb.binding.AsyncReadBinding", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.AsyncReadBinding retain()"], ["com.mongodb.binding.AsyncWriteBinding", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.AsyncWriteBinding retain()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.retain()", "public com.mongodb.binding.ConnectionSource retain()"], ["void", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.ClusterBinding", "com.mongodb.binding.ClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)", "public com.mongodb.binding.ClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.ReadWriteBinding retain()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.ClusterBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding.getReadConnectionSource()", "public com.mongodb.binding.ConnectionSource getReadConnectionSource()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding.getWriteConnectionSource()", "public com.mongodb.binding.ConnectionSource getWriteConnectionSource()"], ["void", "com.mongodb.binding.ClusterBinding.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["int", "com.mongodb.binding.ClusterBinding.getCount()", "public int getCount()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.ReadBinding retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.WriteBinding retain()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.retain()", "public com.mongodb.binding.ConnectionSource retain()"], ["void", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress)", "public com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress)"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress, com.mongodb.ReadPreference)", "public com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress, com.mongodb.ReadPreference)"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding.getWriteConnectionSource()", "public com.mongodb.binding.ConnectionSource getWriteConnectionSource()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.SingleServerBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding.getReadConnectionSource()", "public com.mongodb.binding.ConnectionSource getReadConnectionSource()"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.SingleServerBinding retain()"], ["void", "com.mongodb.binding.SingleServerBinding.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["int", "com.mongodb.binding.SingleServerBinding.getCount()", "public int getCount()"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.ReadWriteBinding retain()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.ReadBinding retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.WriteBinding retain()"], ["com.mongodb.bulk.BulkWriteError", "com.mongodb.bulk.BulkWriteError(int, java.lang.String, org.bson.BsonDocument, int)", "public com.mongodb.bulk.BulkWriteError(int, java.lang.String, org.bson.BsonDocument, int)"], ["int", "com.mongodb.bulk.BulkWriteError.getIndex()", "public int getIndex()"], ["boolean", "com.mongodb.bulk.BulkWriteError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteError.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getDeletedCount()", "public int getDeletedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.bulk.BulkWriteUpsert>", "com.mongodb.bulk.BulkWriteResult$1.getUpserts()", "public java.util.List<com.mongodb.bulk.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteResult$1.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteResult$1.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getDeletedCount()", "public int getDeletedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.bulk.BulkWriteUpsert>", "com.mongodb.bulk.BulkWriteResult$2.getUpserts()", "public java.util.List<com.mongodb.bulk.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteResult$2.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteResult$2.toString()", "public java.lang.String toString()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult()", "public com.mongodb.bulk.BulkWriteResult()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)", "public static com.mongodb.bulk.BulkWriteResult acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)", "public static com.mongodb.bulk.BulkWriteResult acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(int, int, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)", "public static com.mongodb.bulk.BulkWriteResult acknowledged(int, int, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.unacknowledged()", "public static com.mongodb.bulk.BulkWriteResult unacknowledged()"], ["com.mongodb.bulk.BulkWriteUpsert", "com.mongodb.bulk.BulkWriteUpsert(int, org.bson.BsonValue)", "public com.mongodb.bulk.BulkWriteUpsert(int, org.bson.BsonValue)"], ["int", "com.mongodb.bulk.BulkWriteUpsert.getIndex()", "public int getIndex()"], ["org.bson.BsonValue", "com.mongodb.bulk.BulkWriteUpsert.getId()", "public org.bson.BsonValue getId()"], ["boolean", "com.mongodb.bulk.BulkWriteUpsert.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteUpsert.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteUpsert.toString()", "public java.lang.String toString()"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest(org.bson.BsonDocument)", "public com.mongodb.bulk.DeleteRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.DeleteRequest.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest.multi(boolean)", "public com.mongodb.bulk.DeleteRequest multi(boolean)"], ["boolean", "com.mongodb.bulk.DeleteRequest.isMulti()", "public boolean isMulti()"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.DeleteRequest.getType()", "public com.mongodb.bulk.WriteRequest$Type getType()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getKeys()", "public org.bson.BsonDocument getKeys()"], ["boolean", "com.mongodb.bulk.IndexRequest.isBackground()", "public boolean isBackground()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.background(boolean)", "public com.mongodb.bulk.IndexRequest background(boolean)"], ["boolean", "com.mongodb.bulk.IndexRequest.isUnique()", "public boolean isUnique()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.unique(boolean)", "public com.mongodb.bulk.IndexRequest unique(boolean)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getName()", "public java.lang.String getName()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.name(java.lang.String)", "public com.mongodb.bulk.IndexRequest name(java.lang.String)"], ["boolean", "com.mongodb.bulk.IndexRequest.isSparse()", "public boolean isSparse()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.sparse(boolean)", "public com.mongodb.bulk.IndexRequest sparse(boolean)"], ["java.lang.Long", "com.mongodb.bulk.IndexRequest.getExpireAfter(java.util.concurrent.TimeUnit)", "public java.lang.Long getExpireAfter(java.util.concurrent.TimeUnit)"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)", "public com.mongodb.bulk.IndexRequest expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getVersion()", "public java.lang.Integer getVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.version(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest version(java.lang.Integer)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getWeights()", "public org.bson.BsonDocument getWeights()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.weights(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest weights(org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getDefaultLanguage()", "public java.lang.String getDefaultLanguage()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.defaultLanguage(java.lang.String)", "public com.mongodb.bulk.IndexRequest defaultLanguage(java.lang.String)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getLanguageOverride()", "public java.lang.String getLanguageOverride()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.languageOverride(java.lang.String)", "public com.mongodb.bulk.IndexRequest languageOverride(java.lang.String)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getTextVersion()", "public java.lang.Integer getTextVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.textVersion(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest textVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getSphereVersion()", "public java.lang.Integer getSphereVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.sphereVersion(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest sphereVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getBits()", "public java.lang.Integer getBits()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.bits(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest bits(java.lang.Integer)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getMin()", "public java.lang.Double getMin()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.min(java.lang.Double)", "public com.mongodb.bulk.IndexRequest min(java.lang.Double)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getMax()", "public java.lang.Double getMax()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.max(java.lang.Double)", "public com.mongodb.bulk.IndexRequest max(java.lang.Double)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getBucketSize()", "public java.lang.Double getBucketSize()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.bucketSize(java.lang.Double)", "public com.mongodb.bulk.IndexRequest bucketSize(java.lang.Double)"], ["boolean", "com.mongodb.bulk.IndexRequest.getDropDups()", "public boolean getDropDups()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.dropDups(boolean)", "public com.mongodb.bulk.IndexRequest dropDups(boolean)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getStorageEngine()", "public org.bson.BsonDocument getStorageEngine()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.storageEngine(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest storageEngine(org.bson.BsonDocument)"], ["com.mongodb.bulk.InsertRequest", "com.mongodb.bulk.InsertRequest(org.bson.BsonDocument)", "public com.mongodb.bulk.InsertRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.InsertRequest.getDocument()", "public org.bson.BsonDocument getDocument()"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.InsertRequest.getType()", "public com.mongodb.bulk.WriteRequest$Type getType()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest(org.bson.BsonDocument, org.bson.BsonDocument, com.mongodb.bulk.WriteRequest$Type)", "public com.mongodb.bulk.UpdateRequest(org.bson.BsonDocument, org.bson.BsonDocument, com.mongodb.bulk.WriteRequest$Type)"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.UpdateRequest.getType()", "public com.mongodb.bulk.WriteRequest$Type getType()"], ["org.bson.BsonDocument", "com.mongodb.bulk.UpdateRequest.getFilter()", "public org.bson.BsonDocument getFilter()"], ["org.bson.BsonDocument", "com.mongodb.bulk.UpdateRequest.getUpdate()", "public org.bson.BsonDocument getUpdate()"], ["boolean", "com.mongodb.bulk.UpdateRequest.isMulti()", "public boolean isMulti()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.multi(boolean)", "public com.mongodb.bulk.UpdateRequest multi(boolean)"], ["boolean", "com.mongodb.bulk.UpdateRequest.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.upsert(boolean)", "public com.mongodb.bulk.UpdateRequest upsert(boolean)"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.bulk.WriteConcernError(int, java.lang.String, org.bson.BsonDocument)", "public com.mongodb.bulk.WriteConcernError(int, java.lang.String, org.bson.BsonDocument)"], ["int", "com.mongodb.bulk.WriteConcernError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.bulk.WriteConcernError.getMessage()", "public java.lang.String getMessage()"], ["org.bson.BsonDocument", "com.mongodb.bulk.WriteConcernError.getDetails()", "public org.bson.BsonDocument getDetails()"], ["boolean", "com.mongodb.bulk.WriteConcernError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.WriteConcernError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.WriteConcernError.toString()", "public java.lang.String toString()"], ["com.mongodb.bulk.WriteRequest$Type[]", "com.mongodb.bulk.WriteRequest$Type.values()", "public static com.mongodb.bulk.WriteRequest$Type[] values()"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.WriteRequest$Type.valueOf(java.lang.String)", "public static com.mongodb.bulk.WriteRequest$Type valueOf(java.lang.String)"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions()", "public com.mongodb.client.model.BulkWriteOptions()"], ["boolean", "com.mongodb.client.model.BulkWriteOptions.isOrdered()", "public boolean isOrdered()"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions.ordered(boolean)", "public com.mongodb.client.model.BulkWriteOptions ordered(boolean)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions()", "public com.mongodb.client.model.CountOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.CountOptions.getHint()", "public org.bson.conversions.Bson getHint()"], ["java.lang.String", "com.mongodb.client.model.CountOptions.getHintString()", "public java.lang.String getHintString()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.hint(org.bson.conversions.Bson)", "public com.mongodb.client.model.CountOptions hint(org.bson.conversions.Bson)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.hintString(java.lang.String)", "public com.mongodb.client.model.CountOptions hintString(java.lang.String)"], ["int", "com.mongodb.client.model.CountOptions.getLimit()", "public int getLimit()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.limit(int)", "public com.mongodb.client.model.CountOptions limit(int)"], ["int", "com.mongodb.client.model.CountOptions.getSkip()", "public int getSkip()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.skip(int)", "public com.mongodb.client.model.CountOptions skip(int)"], ["long", "com.mongodb.client.model.CountOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.CountOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions()", "public com.mongodb.client.model.CreateCollectionOptions()"], ["boolean", "com.mongodb.client.model.CreateCollectionOptions.isAutoIndex()", "public boolean isAutoIndex()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.autoIndex(boolean)", "public com.mongodb.client.model.CreateCollectionOptions autoIndex(boolean)"], ["long", "com.mongodb.client.model.CreateCollectionOptions.getMaxDocuments()", "public long getMaxDocuments()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.maxDocuments(long)", "public com.mongodb.client.model.CreateCollectionOptions maxDocuments(long)"], ["boolean", "com.mongodb.client.model.CreateCollectionOptions.isCapped()", "public boolean isCapped()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.capped(boolean)", "public com.mongodb.client.model.CreateCollectionOptions capped(boolean)"], ["long", "com.mongodb.client.model.CreateCollectionOptions.getSizeInBytes()", "public long getSizeInBytes()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.sizeInBytes(long)", "public com.mongodb.client.model.CreateCollectionOptions sizeInBytes(long)"], ["java.lang.Boolean", "com.mongodb.client.model.CreateCollectionOptions.isUsePowerOf2Sizes()", "public java.lang.Boolean isUsePowerOf2Sizes()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.usePowerOf2Sizes(java.lang.Boolean)", "public com.mongodb.client.model.CreateCollectionOptions usePowerOf2Sizes(java.lang.Boolean)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.CreateCollectionOptions.getStorageEngineOptions()", "public org.bson.conversions.Bson getStorageEngineOptions()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.storageEngineOptions(org.bson.conversions.Bson)", "public com.mongodb.client.model.CreateCollectionOptions storageEngineOptions(org.bson.conversions.Bson)"], ["com.mongodb.client.model.DeleteManyModel", "com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson)", "public com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.DeleteManyModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["com.mongodb.client.model.DeleteOneModel", "com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson)", "public com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.DeleteOneModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$2.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.Filters$AndFilter", "com.mongodb.client.model.Filters$AndFilter(java.lang.Iterable<org.bson.conversions.Bson>)", "public com.mongodb.client.model.Filters$AndFilter(java.lang.Iterable<org.bson.conversions.Bson>)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$AndFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$IterableOperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.Filters$NotFilter", "com.mongodb.client.model.Filters$NotFilter(org.bson.conversions.Bson)", "public com.mongodb.client.model.Filters$NotFilter(org.bson.conversions.Bson)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$NotFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonDocument", "com.mongodb.client.model.Filters$NotFilter.toFilter(org.bson.BsonDocument)", "public org.bson.BsonDocument toFilter(org.bson.BsonDocument)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$OperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.Filters$OrFilter", "com.mongodb.client.model.Filters$OrFilter(java.lang.Iterable<org.bson.conversions.Bson>)", "public com.mongodb.client.model.Filters$OrFilter(java.lang.Iterable<org.bson.conversions.Bson>)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$OrFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.Filters$SimpleEncodingFilter", "com.mongodb.client.model.Filters$SimpleEncodingFilter(java.lang.String, TItem)", "public com.mongodb.client.model.Filters$SimpleEncodingFilter(java.lang.String, TItem)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$SimpleEncodingFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$SimpleFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.eq(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson eq(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.ne(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson ne(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.gt(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson gt(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.lt(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson lt(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.gte(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson gte(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.lte(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson lte(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.in(java.lang.String, TItem...)", "public static <TItem> org.bson.conversions.Bson in(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.in(java.lang.String, java.lang.Iterable<TItem>)", "public static <TItem> org.bson.conversions.Bson in(java.lang.String, java.lang.Iterable<TItem>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nin(java.lang.String, TItem...)", "public static <TItem> org.bson.conversions.Bson nin(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nin(java.lang.String, java.lang.Iterable<TItem>)", "public static <TItem> org.bson.conversions.Bson nin(java.lang.String, java.lang.Iterable<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.and(java.lang.Iterable<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson and(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.and(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson and(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.or(java.lang.Iterable<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson or(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.or(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson or(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.not(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson not(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nor(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson nor(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nor(java.lang.Iterable<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson nor(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.exists(java.lang.String)", "public static org.bson.conversions.Bson exists(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.exists(java.lang.String, boolean)", "public static org.bson.conversions.Bson exists(java.lang.String, boolean)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.type(java.lang.String, org.bson.BsonType)", "public static org.bson.conversions.Bson type(java.lang.String, org.bson.BsonType)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.mod(java.lang.String, long, long)", "public static org.bson.conversions.Bson mod(java.lang.String, long, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson regex(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson regex(java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.util.regex.Pattern)", "public static org.bson.conversions.Bson regex(java.lang.String, java.util.regex.Pattern)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String)", "public static org.bson.conversions.Bson text(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson text(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.where(java.lang.String)", "public static org.bson.conversions.Bson where(java.lang.String)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.all(java.lang.String, TItem...)", "public static <TItem> org.bson.conversions.Bson all(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.all(java.lang.String, java.lang.Iterable<TItem>)", "public static <TItem> org.bson.conversions.Bson all(java.lang.String, java.lang.Iterable<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.elemMatch(java.lang.String, org.bson.conversions.Bson)", "public static org.bson.conversions.Bson elemMatch(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.size(java.lang.String, int)", "public static org.bson.conversions.Bson size(java.lang.String, int)"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions()", "public com.mongodb.client.model.FindOneAndDeleteOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndDeleteOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndDeleteOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndDeleteOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndDeleteOptions sort(org.bson.conversions.Bson)"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOneAndDeleteOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndDeleteOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions()", "public com.mongodb.client.model.FindOneAndReplaceOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndReplaceOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndReplaceOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndReplaceOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndReplaceOptions sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOneAndReplaceOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.upsert(boolean)", "public com.mongodb.client.model.FindOneAndReplaceOptions upsert(boolean)"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.FindOneAndReplaceOptions.getReturnDocument()", "public com.mongodb.client.model.ReturnDocument getReturnDocument()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.returnDocument(com.mongodb.client.model.ReturnDocument)", "public com.mongodb.client.model.FindOneAndReplaceOptions returnDocument(com.mongodb.client.model.ReturnDocument)"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOneAndReplaceOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndReplaceOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions()", "public com.mongodb.client.model.FindOneAndUpdateOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndUpdateOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndUpdateOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndUpdateOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndUpdateOptions sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOneAndUpdateOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.upsert(boolean)", "public com.mongodb.client.model.FindOneAndUpdateOptions upsert(boolean)"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.FindOneAndUpdateOptions.getReturnDocument()", "public com.mongodb.client.model.ReturnDocument getReturnDocument()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.returnDocument(com.mongodb.client.model.ReturnDocument)", "public com.mongodb.client.model.FindOneAndUpdateOptions returnDocument(com.mongodb.client.model.ReturnDocument)"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOneAndUpdateOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndUpdateOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions()", "public com.mongodb.client.model.FindOptions()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions(com.mongodb.client.model.FindOptions)", "public com.mongodb.client.model.FindOptions(com.mongodb.client.model.FindOptions)"], ["int", "com.mongodb.client.model.FindOptions.getLimit()", "public int getLimit()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.limit(int)", "public com.mongodb.client.model.FindOptions limit(int)"], ["int", "com.mongodb.client.model.FindOptions.getSkip()", "public int getSkip()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.skip(int)", "public com.mongodb.client.model.FindOptions skip(int)"], ["long", "com.mongodb.client.model.FindOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.client.model.FindOptions.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.batchSize(int)", "public com.mongodb.client.model.FindOptions batchSize(int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getModifiers()", "public org.bson.conversions.Bson getModifiers()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.modifiers(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions modifiers(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOptions.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.noCursorTimeout(boolean)", "public com.mongodb.client.model.FindOptions noCursorTimeout(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.oplogReplay(boolean)", "public com.mongodb.client.model.FindOptions oplogReplay(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isPartial()", "public boolean isPartial()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.partial(boolean)", "public com.mongodb.client.model.FindOptions partial(boolean)"], ["com.mongodb.CursorType", "com.mongodb.client.model.FindOptions.getCursorType()", "public com.mongodb.CursorType getCursorType()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.cursorType(com.mongodb.CursorType)", "public com.mongodb.client.model.FindOptions cursorType(com.mongodb.CursorType)"], ["java.lang.String", "com.mongodb.client.model.FindOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.IndexModel", "com.mongodb.client.model.IndexModel(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexModel(org.bson.conversions.Bson)"], ["com.mongodb.client.model.IndexModel", "com.mongodb.client.model.IndexModel(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)", "public com.mongodb.client.model.IndexModel(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexModel.getKeys()", "public org.bson.conversions.Bson getKeys()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexModel.getOptions()", "public com.mongodb.client.model.IndexOptions getOptions()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions()", "public com.mongodb.client.model.IndexOptions()"], ["boolean", "com.mongodb.client.model.IndexOptions.isBackground()", "public boolean isBackground()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.background(boolean)", "public com.mongodb.client.model.IndexOptions background(boolean)"], ["boolean", "com.mongodb.client.model.IndexOptions.isUnique()", "public boolean isUnique()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.unique(boolean)", "public com.mongodb.client.model.IndexOptions unique(boolean)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getName()", "public java.lang.String getName()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.name(java.lang.String)", "public com.mongodb.client.model.IndexOptions name(java.lang.String)"], ["boolean", "com.mongodb.client.model.IndexOptions.isSparse()", "public boolean isSparse()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.sparse(boolean)", "public com.mongodb.client.model.IndexOptions sparse(boolean)"], ["java.lang.Long", "com.mongodb.client.model.IndexOptions.getExpireAfter(java.util.concurrent.TimeUnit)", "public java.lang.Long getExpireAfter(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.IndexOptions expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getVersion()", "public java.lang.Integer getVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.version(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions version(java.lang.Integer)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getWeights()", "public org.bson.conversions.Bson getWeights()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.weights(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexOptions weights(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getDefaultLanguage()", "public java.lang.String getDefaultLanguage()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.defaultLanguage(java.lang.String)", "public com.mongodb.client.model.IndexOptions defaultLanguage(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getLanguageOverride()", "public java.lang.String getLanguageOverride()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.languageOverride(java.lang.String)", "public com.mongodb.client.model.IndexOptions languageOverride(java.lang.String)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getTextVersion()", "public java.lang.Integer getTextVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.textVersion(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions textVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getSphereVersion()", "public java.lang.Integer getSphereVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.sphereVersion(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions sphereVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getBits()", "public java.lang.Integer getBits()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.bits(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions bits(java.lang.Integer)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getMin()", "public java.lang.Double getMin()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.min(java.lang.Double)", "public com.mongodb.client.model.IndexOptions min(java.lang.Double)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getMax()", "public java.lang.Double getMax()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.max(java.lang.Double)", "public com.mongodb.client.model.IndexOptions max(java.lang.Double)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getBucketSize()", "public java.lang.Double getBucketSize()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.bucketSize(java.lang.Double)", "public com.mongodb.client.model.IndexOptions bucketSize(java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getStorageEngine()", "public org.bson.conversions.Bson getStorageEngine()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.storageEngine(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexOptions storageEngine(org.bson.conversions.Bson)"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions()", "public com.mongodb.client.model.InsertManyOptions()"], ["boolean", "com.mongodb.client.model.InsertManyOptions.isOrdered()", "public boolean isOrdered()"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions.ordered(boolean)", "public com.mongodb.client.model.InsertManyOptions ordered(boolean)"], ["com.mongodb.client.model.InsertOneModel", "com.mongodb.client.model.InsertOneModel(T)", "public com.mongodb.client.model.InsertOneModel(T)"], ["T", "com.mongodb.client.model.InsertOneModel.getDocument()", "public T getDocument()"], ["com.mongodb.client.model.MapReduceAction[]", "com.mongodb.client.model.MapReduceAction.values()", "public static com.mongodb.client.model.MapReduceAction[] values()"], ["com.mongodb.client.model.MapReduceAction", "com.mongodb.client.model.MapReduceAction.valueOf(java.lang.String)", "public static com.mongodb.client.model.MapReduceAction valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.MapReduceAction.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.ParallelCollectionScanOptions", "com.mongodb.client.model.ParallelCollectionScanOptions()", "public com.mongodb.client.model.ParallelCollectionScanOptions()"], ["int", "com.mongodb.client.model.ParallelCollectionScanOptions.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.client.model.ParallelCollectionScanOptions", "com.mongodb.client.model.ParallelCollectionScanOptions.batchSize(int)", "public com.mongodb.client.model.ParallelCollectionScanOptions batchSize(int)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Projections$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Projections$2.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.include(java.lang.String...)", "public static org.bson.conversions.Bson include(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.include(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson include(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.exclude(java.lang.String...)", "public static org.bson.conversions.Bson exclude(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.exclude(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson exclude(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.excludeId()", "public static org.bson.conversions.Bson excludeId()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.elemMatch(java.lang.String)", "public static org.bson.conversions.Bson elemMatch(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.elemMatch(java.lang.String, org.bson.conversions.Bson)", "public static org.bson.conversions.Bson elemMatch(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.metaTextScore(java.lang.String)", "public static org.bson.conversions.Bson metaTextScore(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.slice(java.lang.String, int)", "public static org.bson.conversions.Bson slice(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.slice(java.lang.String, int, int)", "public static org.bson.conversions.Bson slice(java.lang.String, int, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.fields(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson fields(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.fields(java.util.List<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson fields(java.util.List<org.bson.conversions.Bson>)"], ["com.mongodb.client.model.RenameCollectionOptions", "com.mongodb.client.model.RenameCollectionOptions()", "public com.mongodb.client.model.RenameCollectionOptions()"], ["boolean", "com.mongodb.client.model.RenameCollectionOptions.isDropTarget()", "public boolean isDropTarget()"], ["com.mongodb.client.model.RenameCollectionOptions", "com.mongodb.client.model.RenameCollectionOptions.dropTarget(boolean)", "public com.mongodb.client.model.RenameCollectionOptions dropTarget(boolean)"], ["com.mongodb.client.model.ReplaceOneModel", "com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T)", "public com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T)"], ["com.mongodb.client.model.ReplaceOneModel", "com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.ReplaceOneModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["T", "com.mongodb.client.model.ReplaceOneModel.getReplacement()", "public T getReplacement()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.ReplaceOneModel.getOptions()", "public com.mongodb.client.model.UpdateOptions getOptions()"], ["com.mongodb.client.model.ReturnDocument[]", "com.mongodb.client.model.ReturnDocument.values()", "public static com.mongodb.client.model.ReturnDocument[] values()"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.ReturnDocument.valueOf(java.lang.String)", "public static com.mongodb.client.model.ReturnDocument valueOf(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Sorts$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.ascending(java.lang.String...)", "public static org.bson.conversions.Bson ascending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.ascending(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson ascending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.descending(java.lang.String...)", "public static org.bson.conversions.Bson descending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.descending(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson descending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.metaTextScore(java.lang.String)", "public static org.bson.conversions.Bson metaTextScore(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.orderBy(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson orderBy(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.orderBy(java.util.List<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson orderBy(java.util.List<org.bson.conversions.Bson>)"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateManyModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateManyModel.getUpdate()", "public org.bson.conversions.Bson getUpdate()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateManyModel.getOptions()", "public com.mongodb.client.model.UpdateOptions getOptions()"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateOneModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateOneModel.getUpdate()", "public org.bson.conversions.Bson getUpdate()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOneModel.getOptions()", "public com.mongodb.client.model.UpdateOptions getOptions()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions()", "public com.mongodb.client.model.UpdateOptions()"], ["boolean", "com.mongodb.client.model.UpdateOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.upsert(boolean)", "public com.mongodb.client.model.UpdateOptions upsert(boolean)"], ["com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult(long)", "public com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult(long)"], ["boolean", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.getDeletedCount()", "public long getDeletedCount()"], ["boolean", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.getDeletedCount()", "public long getDeletedCount()"], ["boolean", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.toString()", "public java.lang.String toString()"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult()", "public com.mongodb.client.result.DeleteResult()"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult.acknowledged(long)", "public static com.mongodb.client.result.DeleteResult acknowledged(long)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult.unacknowledged()", "public static com.mongodb.client.result.DeleteResult unacknowledged()"], ["com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult(long, java.lang.Long, org.bson.BsonValue)", "public com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult(long, java.lang.Long, org.bson.BsonValue)"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getMatchedCount()", "public long getMatchedCount()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["long", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getModifiedCount()", "public long getModifiedCount()"], ["org.bson.BsonValue", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getMatchedCount()", "public long getMatchedCount()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["long", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getModifiedCount()", "public long getModifiedCount()"], ["org.bson.BsonValue", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.toString()", "public java.lang.String toString()"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult()", "public com.mongodb.client.result.UpdateResult()"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult.acknowledged(long, java.lang.Long, org.bson.BsonValue)", "public static com.mongodb.client.result.UpdateResult acknowledged(long, java.lang.Long, org.bson.BsonValue)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult.unacknowledged()", "public static com.mongodb.client.result.UpdateResult unacknowledged()"], ["int", "com.mongodb.connection.AbstractReferenceCounted.getCount()", "public int getCount()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.connection.AbstractReferenceCounted.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.connection.AbstractReferenceCounted.release()", "public void release()"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$1.completed(java.lang.Void, java.lang.Object)", "public void completed(java.lang.Void, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$2.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$2.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$2.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$3.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$3.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$3.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter$1.completed(java.lang.Integer, java.lang.Object)", "public void completed(java.lang.Integer, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$AsyncWritableByteChannelAdapter.write(java.nio.ByteBuffer, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void write(java.nio.ByteBuffer, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.completed(java.lang.Integer, java.lang.Void)", "public void completed(java.lang.Integer, java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.failed(java.lang.Throwable, java.lang.Void)", "public void failed(java.lang.Throwable, java.lang.Void)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream$BasicCompletionHandler.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["org.bson.ByteBuf", "com.mongodb.connection.AsynchronousSocketChannelStream.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.open()", "public void open() throws java.io.IOException"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.write(java.util.List<org.bson.ByteBuf>)", "public void write(java.util.List<org.bson.ByteBuf>) throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.connection.AsynchronousSocketChannelStream.read(int)", "public org.bson.ByteBuf read(int) throws java.io.IOException"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)", "public void readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.AsynchronousSocketChannelStream.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["void", "com.mongodb.connection.AsynchronousSocketChannelStream.close()", "public void close()"], ["boolean", "com.mongodb.connection.AsynchronousSocketChannelStream.isClosed()", "public boolean isClosed()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.Stream create(com.mongodb.ServerAddress)"], ["byte[]", "com.mongodb.connection.Base64Codec.decode(java.lang.String)", "public byte[] decode(java.lang.String)"], ["java.lang.String", "com.mongodb.connection.Base64Codec.encode(byte[])", "public java.lang.String encode(byte[])"], ["void", "com.mongodb.connection.BaseCluster$WaitQueueHandler.run()", "public void run()"], ["com.mongodb.connection.BaseCluster", "com.mongodb.connection.BaseCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ClusterableServerFactory, com.mongodb.event.ClusterListener)", "public com.mongodb.connection.BaseCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ClusterableServerFactory, com.mongodb.event.ClusterListener)"], ["com.mongodb.connection.Server", "com.mongodb.connection.BaseCluster.selectServer(com.mongodb.selector.ServerSelector)", "public com.mongodb.connection.Server selectServer(com.mongodb.selector.ServerSelector)"], ["void", "com.mongodb.connection.BaseCluster.selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>)", "public void selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.BaseCluster.getDescription()", "public com.mongodb.connection.ClusterDescription getDescription()"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.connection.BaseCluster.getSettings()", "public com.mongodb.connection.ClusterSettings getSettings()"], ["void", "com.mongodb.connection.BaseCluster.close()", "public void close()"], ["boolean", "com.mongodb.connection.BaseCluster.isClosed()", "public boolean isClosed()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage(java.lang.String, int, int, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.BaseQueryMessage(java.lang.String, int, int, com.mongodb.connection.MessageSettings)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isTailableCursor()", "public boolean isTailableCursor()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.tailableCursor(boolean)", "public com.mongodb.connection.BaseQueryMessage tailableCursor(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isSlaveOk()", "public boolean isSlaveOk()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.slaveOk(boolean)", "public com.mongodb.connection.BaseQueryMessage slaveOk(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.oplogReplay(boolean)", "public com.mongodb.connection.BaseQueryMessage oplogReplay(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.noCursorTimeout(boolean)", "public com.mongodb.connection.BaseQueryMessage noCursorTimeout(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isAwaitData()", "public boolean isAwaitData()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.awaitData(boolean)", "public com.mongodb.connection.BaseQueryMessage awaitData(boolean)"], ["boolean", "com.mongodb.connection.BaseQueryMessage.isPartial()", "public boolean isPartial()"], ["com.mongodb.connection.BaseQueryMessage", "com.mongodb.connection.BaseQueryMessage.partial(boolean)", "public com.mongodb.connection.BaseQueryMessage partial(boolean)"], ["com.mongodb.connection.BaseWriteCommandMessage", "com.mongodb.connection.BaseWriteCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.BaseWriteCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, com.mongodb.connection.MessageSettings)"], ["com.mongodb.MongoNamespace", "com.mongodb.connection.BaseWriteCommandMessage.getWriteNamespace()", "public com.mongodb.MongoNamespace getWriteNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.connection.BaseWriteCommandMessage.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.connection.BaseWriteCommandMessage.isOrdered()", "public boolean isOrdered()"], ["com.mongodb.connection.BaseWriteCommandMessage", "com.mongodb.connection.BaseWriteCommandMessage.encode(org.bson.io.BsonOutput)", "public com.mongodb.connection.BaseWriteCommandMessage encode(org.bson.io.BsonOutput)"], ["com.mongodb.connection.RequestMessage", "com.mongodb.connection.BaseWriteCommandMessage.encode(org.bson.io.BsonOutput)", "public com.mongodb.connection.RequestMessage encode(org.bson.io.BsonOutput)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$1.compare(com.mongodb.bulk.BulkWriteUpsert, com.mongodb.bulk.BulkWriteUpsert)", "public int compare(com.mongodb.bulk.BulkWriteUpsert, com.mongodb.bulk.BulkWriteUpsert)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$2.compare(com.mongodb.bulk.BulkWriteError, com.mongodb.bulk.BulkWriteError)", "public int compare(com.mongodb.bulk.BulkWriteError, com.mongodb.bulk.BulkWriteError)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["com.mongodb.connection.BulkWriteBatchCombiner", "com.mongodb.connection.BulkWriteBatchCombiner(com.mongodb.ServerAddress, boolean, com.mongodb.WriteConcern)", "public com.mongodb.connection.BulkWriteBatchCombiner(com.mongodb.ServerAddress, boolean, com.mongodb.WriteConcern)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addResult(com.mongodb.bulk.BulkWriteResult, com.mongodb.internal.connection.IndexMap)", "public void addResult(com.mongodb.bulk.BulkWriteResult, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addErrorResult(com.mongodb.MongoBulkWriteException, com.mongodb.internal.connection.IndexMap)", "public void addErrorResult(com.mongodb.MongoBulkWriteException, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addWriteErrorResult(com.mongodb.bulk.BulkWriteError, com.mongodb.internal.connection.IndexMap)", "public void addWriteErrorResult(com.mongodb.bulk.BulkWriteError, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addWriteConcernErrorResult(com.mongodb.bulk.WriteConcernError)", "public void addWriteConcernErrorResult(com.mongodb.bulk.WriteConcernError)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addErrorResult(java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.internal.connection.IndexMap)", "public void addErrorResult(java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.internal.connection.IndexMap)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.BulkWriteBatchCombiner.getResult()", "public com.mongodb.bulk.BulkWriteResult getResult()"], ["boolean", "com.mongodb.connection.BulkWriteBatchCombiner.shouldStopSendingMoreBatches()", "public boolean shouldStopSendingMoreBatches()"], ["boolean", "com.mongodb.connection.BulkWriteBatchCombiner.hasErrors()", "public boolean hasErrors()"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.connection.BulkWriteBatchCombiner.getError()", "public com.mongodb.MongoBulkWriteException getError()"], ["com.mongodb.connection.ByteBufferBsonOutput", "com.mongodb.connection.ByteBufferBsonOutput(com.mongodb.connection.BufferProvider)", "public com.mongodb.connection.ByteBufferBsonOutput(com.mongodb.connection.BufferProvider)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.writeByte(int)", "public void writeByte(int)"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.getPosition()", "public int getPosition()"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.getSize()", "public int getSize()"], ["java.util.List<org.bson.ByteBuf>", "com.mongodb.connection.ByteBufferBsonOutput.getByteBuffers()", "public java.util.List<org.bson.ByteBuf> getByteBuffers()"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.pipe(java.io.OutputStream)", "public int pipe(java.io.OutputStream) throws java.io.IOException"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.truncateToPosition(int)", "public void truncateToPosition(int)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.close()", "public void close()"], ["com.mongodb.connection.ChangeEvent", "com.mongodb.connection.ChangeEvent(T, T)", "public com.mongodb.connection.ChangeEvent(T, T)"], ["T", "com.mongodb.connection.ChangeEvent.getOldValue()", "public T getOldValue()"], ["T", "com.mongodb.connection.ChangeEvent.getNewValue()", "public T getNewValue()"], ["boolean", "com.mongodb.connection.ChangeEvent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ChangeEvent.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ChangeEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterConnectionMode[]", "com.mongodb.connection.ClusterConnectionMode.values()", "public static com.mongodb.connection.ClusterConnectionMode[] values()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterConnectionMode.valueOf(java.lang.String)", "public static com.mongodb.connection.ClusterConnectionMode valueOf(java.lang.String)"], ["int", "com.mongodb.connection.ClusterDescription$1.compare(com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)", "public int compare(com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)"], ["int", "com.mongodb.connection.ClusterDescription$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "com.mongodb.connection.ClusterDescription$2.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["boolean", "com.mongodb.connection.ClusterDescription$3.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["boolean", "com.mongodb.connection.ClusterDescription$4.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["boolean", "com.mongodb.connection.ClusterDescription$5.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["boolean", "com.mongodb.connection.ClusterDescription$6.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["boolean", "com.mongodb.connection.ClusterDescription$7.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>)", "public com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>)"], ["boolean", "com.mongodb.connection.ClusterDescription.isCompatibleWithDriver()", "public boolean isCompatibleWithDriver()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterDescription.getConnectionMode()", "public com.mongodb.connection.ClusterConnectionMode getConnectionMode()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterDescription.getType()", "public com.mongodb.connection.ClusterType getType()"], ["java.util.Set<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAll()", "public java.util.Set<com.mongodb.connection.ServerDescription> getAll()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ClusterDescription.getByServerAddress(com.mongodb.ServerAddress)", "public com.mongodb.connection.ServerDescription getByServerAddress(com.mongodb.ServerAddress)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getPrimaries()", "public java.util.List<com.mongodb.connection.ServerDescription> getPrimaries()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getSecondaries()", "public java.util.List<com.mongodb.connection.ServerDescription> getSecondaries()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getSecondaries(com.mongodb.TagSet)", "public java.util.List<com.mongodb.connection.ServerDescription> getSecondaries(com.mongodb.TagSet)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAny()", "public java.util.List<com.mongodb.connection.ServerDescription> getAny()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAnyPrimaryOrSecondary()", "public java.util.List<com.mongodb.connection.ServerDescription> getAnyPrimaryOrSecondary()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAnyPrimaryOrSecondary(com.mongodb.TagSet)", "public java.util.List<com.mongodb.connection.ServerDescription> getAnyPrimaryOrSecondary(com.mongodb.TagSet)"], ["boolean", "com.mongodb.connection.ClusterDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterDescription.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterDescription.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.connection.ClusterDescription.getShortDescription()", "public java.lang.String getShortDescription()"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ClusterId()", "public com.mongodb.connection.ClusterId()"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ClusterId(java.lang.String)", "public com.mongodb.connection.ClusterId(java.lang.String)"], ["java.lang.String", "com.mongodb.connection.ClusterId.getValue()", "public java.lang.String getValue()"], ["java.lang.String", "com.mongodb.connection.ClusterId.getDescription()", "public java.lang.String getDescription()"], ["boolean", "com.mongodb.connection.ClusterId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterId.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterId.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.description(java.lang.String)", "public com.mongodb.connection.ClusterSettings$Builder description(java.lang.String)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.hosts(java.util.List<com.mongodb.ServerAddress>)", "public com.mongodb.connection.ClusterSettings$Builder hosts(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.mode(com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.connection.ClusterSettings$Builder mode(com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.requiredReplicaSetName(java.lang.String)", "public com.mongodb.connection.ClusterSettings$Builder requiredReplicaSetName(java.lang.String)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.requiredClusterType(com.mongodb.connection.ClusterType)", "public com.mongodb.connection.ClusterSettings$Builder requiredClusterType(com.mongodb.connection.ClusterType)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.serverSelector(com.mongodb.selector.ServerSelector)", "public com.mongodb.connection.ClusterSettings$Builder serverSelector(com.mongodb.selector.ServerSelector)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.serverSelectionTimeout(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ClusterSettings$Builder serverSelectionTimeout(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.maxWaitQueueSize(int)", "public com.mongodb.connection.ClusterSettings$Builder maxWaitQueueSize(int)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.ClusterSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.connection.ClusterSettings$Builder.build()", "public com.mongodb.connection.ClusterSettings build()"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings.builder()", "public static com.mongodb.connection.ClusterSettings$Builder builder()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getDescription()", "public java.lang.String getDescription()"], ["java.util.List<com.mongodb.ServerAddress>", "com.mongodb.connection.ClusterSettings.getHosts()", "public java.util.List<com.mongodb.ServerAddress> getHosts()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterSettings.getMode()", "public com.mongodb.connection.ClusterConnectionMode getMode()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterSettings.getRequiredClusterType()", "public com.mongodb.connection.ClusterType getRequiredClusterType()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["com.mongodb.selector.ServerSelector", "com.mongodb.connection.ClusterSettings.getServerSelector()", "public com.mongodb.selector.ServerSelector getServerSelector()"], ["long", "com.mongodb.connection.ClusterSettings.getServerSelectionTimeout(java.util.concurrent.TimeUnit)", "public long getServerSelectionTimeout(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.connection.ClusterSettings.getMaxWaitQueueSize()", "public int getMaxWaitQueueSize()"], ["boolean", "com.mongodb.connection.ClusterSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getShortDescription()", "public java.lang.String getShortDescription()"], ["com.mongodb.connection.ClusterType[]", "com.mongodb.connection.ClusterType.values()", "public static com.mongodb.connection.ClusterType[] values()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterType.valueOf(java.lang.String)", "public static com.mongodb.connection.ClusterType valueOf(java.lang.String)"], ["void", "com.mongodb.connection.CommandHelper$1$1.onResult(com.mongodb.connection.ReplyMessage<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ReplyMessage<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$1.onResult(com.mongodb.connection.CommandMessage, java.lang.Throwable)", "public void onResult(com.mongodb.connection.CommandMessage, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$2.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$3.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.CommandHelper$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.CommandMessage", "com.mongodb.connection.CommandMessage(java.lang.String, org.bson.BsonDocument, boolean, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.CommandMessage(java.lang.String, org.bson.BsonDocument, boolean, com.mongodb.connection.MessageSettings)"], ["com.mongodb.connection.CommandMessage", "com.mongodb.connection.CommandMessage(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.CommandMessage(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, com.mongodb.connection.MessageSettings)"], ["com.mongodb.connection.CommandProtocol", "com.mongodb.connection.CommandProtocol(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)", "public com.mongodb.connection.CommandProtocol(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)"], ["boolean", "com.mongodb.connection.CommandProtocol.isSlaveOk()", "public boolean isSlaveOk()"], ["com.mongodb.connection.CommandProtocol<T>", "com.mongodb.connection.CommandProtocol.slaveOk(boolean)", "public com.mongodb.connection.CommandProtocol<T> slaveOk(boolean)"], ["T", "com.mongodb.connection.CommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public T execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.CommandProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ServerId)", "public com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int)", "public com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ConnectionDescription.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.connection.ConnectionId", "com.mongodb.connection.ConnectionDescription.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ConnectionDescription.getServerVersion()", "public com.mongodb.connection.ServerVersion getServerVersion()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ConnectionDescription.getServerType()", "public com.mongodb.connection.ServerType getServerType()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxBatchCount()", "public int getMaxBatchCount()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxMessageSize()", "public int getMaxMessageSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getDefaultMaxMessageSize()", "public static int getDefaultMaxMessageSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getDefaultMaxWriteBatchSize()", "public static int getDefaultMaxWriteBatchSize()"], ["boolean", "com.mongodb.connection.ConnectionDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionDescription.hashCode()", "public int hashCode()"], ["com.mongodb.connection.ServerId", "com.mongodb.connection.ConnectionId.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["int", "com.mongodb.connection.ConnectionId.getLocalValue()", "public int getLocalValue()"], ["java.lang.Integer", "com.mongodb.connection.ConnectionId.getServerValue()", "public java.lang.Integer getServerValue()"], ["boolean", "com.mongodb.connection.ConnectionId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionId.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ConnectionId.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder()", "public com.mongodb.connection.ConnectionPoolSettings$Builder()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxSize(int)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.minSize(int)", "public com.mongodb.connection.ConnectionPoolSettings$Builder minSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxWaitQueueSize(int)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxWaitQueueSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxWaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxWaitTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxConnectionLifeTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxConnectionLifeTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxConnectionIdleTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxConnectionIdleTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maintenanceInitialDelay(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maintenanceInitialDelay(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maintenanceFrequency(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maintenanceFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings", "com.mongodb.connection.ConnectionPoolSettings$Builder.build()", "public com.mongodb.connection.ConnectionPoolSettings build()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.ConnectionPoolSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings.builder()", "public static com.mongodb.connection.ConnectionPoolSettings$Builder builder()"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMaxSize()", "public int getMaxSize()"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMinSize()", "public int getMinSize()"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMaxWaitQueueSize()", "public int getMaxWaitQueueSize()"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxWaitTime(java.util.concurrent.TimeUnit)", "public long getMaxWaitTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxConnectionLifeTime(java.util.concurrent.TimeUnit)", "public long getMaxConnectionLifeTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxConnectionIdleTime(java.util.concurrent.TimeUnit)", "public long getMaxConnectionIdleTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaintenanceInitialDelay(java.util.concurrent.TimeUnit)", "public long getMaintenanceInitialDelay(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaintenanceFrequency(java.util.concurrent.TimeUnit)", "public long getMaintenanceFrequency(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.ConnectionPoolSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionPoolSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ConnectionPoolSettings.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.DefaultAuthenticator", "com.mongodb.connection.DefaultAuthenticator(com.mongodb.MongoCredential)", "public com.mongodb.connection.DefaultAuthenticator(com.mongodb.MongoCredential)"], ["com.mongodb.connection.DefaultClusterableServerFactory", "com.mongodb.connection.DefaultClusterableServerFactory(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ConnectionListener, com.mongodb.event.ConnectionPoolListener)", "public com.mongodb.connection.DefaultClusterableServerFactory(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ConnectionListener, com.mongodb.event.ConnectionPoolListener)"], ["com.mongodb.connection.ClusterableServer", "com.mongodb.connection.DefaultClusterableServerFactory.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.ClusterableServer create(com.mongodb.ServerAddress)"], ["com.mongodb.connection.ServerSettings", "com.mongodb.connection.DefaultClusterableServerFactory.getSettings()", "public com.mongodb.connection.ServerSettings getSettings()"], ["com.mongodb.connection.DefaultClusterFactory", "com.mongodb.connection.DefaultClusterFactory()", "public com.mongodb.connection.DefaultClusterFactory()"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener)", "public com.mongodb.connection.Cluster create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener)"], ["com.mongodb.connection.Connection", "com.mongodb.connection.DefaultConnectionFactory.create(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.connection.Connection create(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.connection.AsyncConnection", "com.mongodb.connection.DefaultConnectionFactory.createAsync(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.connection.AsyncConnection createAsync(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["void", "com.mongodb.connection.DefaultConnectionPool$1.run()", "public void run()"], ["void", "com.mongodb.connection.DefaultConnectionPool$2.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["synchronized", "com.mongodb.connection.DefaultConnectionPool$3.void run()", "public synchronized void run()"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$2.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.DefaultConnectionPool$PooledConnection", "com.mongodb.connection.DefaultConnectionPool$PooledConnection(com.mongodb.connection.DefaultConnectionPool, com.mongodb.connection.UsageTrackingInternalConnection)", "public com.mongodb.connection.DefaultConnectionPool$PooledConnection(com.mongodb.connection.DefaultConnectionPool, com.mongodb.connection.UsageTrackingInternalConnection)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.open()", "public void open()"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.close()", "public void close()"], ["boolean", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.opened()", "public boolean opened()"], ["boolean", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.isClosed()", "public boolean isClosed()"], ["org.bson.ByteBuf", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)", "public void sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["com.mongodb.connection.ResponseBuffers", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.receiveMessage(int)", "public com.mongodb.connection.ResponseBuffers receiveMessage(int)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)", "public void receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.DefaultConnectionPool$PooledConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory(com.mongodb.connection.DefaultConnectionPool, com.mongodb.connection.InternalConnectionFactory)", "public com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory(com.mongodb.connection.DefaultConnectionPool, com.mongodb.connection.InternalConnectionFactory)"], ["com.mongodb.connection.UsageTrackingInternalConnection", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.create()", "public com.mongodb.connection.UsageTrackingInternalConnection create()"], ["void", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.close(com.mongodb.connection.UsageTrackingInternalConnection)", "public void close(com.mongodb.connection.UsageTrackingInternalConnection)"], ["boolean", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.shouldPrune(com.mongodb.connection.UsageTrackingInternalConnection)", "public boolean shouldPrune(com.mongodb.connection.UsageTrackingInternalConnection)"], ["boolean", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.shouldPrune(java.lang.Object)", "public boolean shouldPrune(java.lang.Object)"], ["void", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.close(java.lang.Object)", "public void close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.create()", "public java.lang.Object create()"], ["com.mongodb.connection.DefaultConnectionPool", "com.mongodb.connection.DefaultConnectionPool(com.mongodb.connection.ServerId, com.mongodb.connection.InternalConnectionFactory, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.event.ConnectionPoolListener)", "public com.mongodb.connection.DefaultConnectionPool(com.mongodb.connection.ServerId, com.mongodb.connection.InternalConnectionFactory, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.event.ConnectionPoolListener)"], ["com.mongodb.connection.InternalConnection", "com.mongodb.connection.DefaultConnectionPool.get()", "public com.mongodb.connection.InternalConnection get()"], ["com.mongodb.connection.InternalConnection", "com.mongodb.connection.DefaultConnectionPool.get(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.InternalConnection get(long, java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.connection.DefaultConnectionPool.getAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.InternalConnection>)", "public void getAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.InternalConnection>)"], ["void", "com.mongodb.connection.DefaultConnectionPool.invalidate()", "public void invalidate()"], ["void", "com.mongodb.connection.DefaultConnectionPool.close()", "public void close()"], ["void", "com.mongodb.connection.DefaultConnectionPool.doMaintenance()", "public void doMaintenance()"], ["void", "com.mongodb.connection.DefaultServer$1.onResult(com.mongodb.connection.InternalConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.InternalConnection, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultServer$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor$1.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["<T> T", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.execute(com.mongodb.connection.Protocol<T>, com.mongodb.connection.InternalConnection)", "public <T> T execute(com.mongodb.connection.Protocol<T>, com.mongodb.connection.InternalConnection)"], ["<T> void", "com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.executeAsync(com.mongodb.connection.Protocol<T>, com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)", "public <T> void executeAsync(com.mongodb.connection.Protocol<T>, com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)"], ["void", "com.mongodb.connection.DefaultServer$DefaultServerStateListener.stateChanged(com.mongodb.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)", "public void stateChanged(com.mongodb.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)"], ["com.mongodb.connection.DefaultServer", "com.mongodb.connection.DefaultServer(com.mongodb.ServerAddress, com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ConnectionPool, com.mongodb.connection.ConnectionFactory, com.mongodb.connection.ServerMonitorFactory)", "public com.mongodb.connection.DefaultServer(com.mongodb.ServerAddress, com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ConnectionPool, com.mongodb.connection.ConnectionFactory, com.mongodb.connection.ServerMonitorFactory)"], ["com.mongodb.connection.Connection", "com.mongodb.connection.DefaultServer.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["void", "com.mongodb.connection.DefaultServer.getConnectionAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)", "public void getConnectionAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.DefaultServer.getDescription()", "public com.mongodb.connection.ServerDescription getDescription()"], ["void", "com.mongodb.connection.DefaultServer.addChangeListener(com.mongodb.connection.ChangeListener<com.mongodb.connection.ServerDescription>)", "public void addChangeListener(com.mongodb.connection.ChangeListener<com.mongodb.connection.ServerDescription>)"], ["void", "com.mongodb.connection.DefaultServer.invalidate()", "public void invalidate()"], ["void", "com.mongodb.connection.DefaultServer.close()", "public void close()"], ["boolean", "com.mongodb.connection.DefaultServer.isClosed()", "public boolean isClosed()"], ["void", "com.mongodb.connection.DefaultServer.connect()", "public void connect()"], ["com.mongodb.connection.DefaultServerConnection", "com.mongodb.connection.DefaultServerConnection(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.connection.DefaultServerConnection(com.mongodb.connection.InternalConnection, com.mongodb.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.connection.DefaultServerConnection", "com.mongodb.connection.DefaultServerConnection.retain()", "public com.mongodb.connection.DefaultServerConnection retain()"], ["void", "com.mongodb.connection.DefaultServerConnection.release()", "public void release()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.DefaultServerConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DefaultServerConnection.insert(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)", "public com.mongodb.WriteConcernResult insert(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["void", "com.mongodb.connection.DefaultServerConnection.insertAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void insertAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DefaultServerConnection.update(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)", "public com.mongodb.WriteConcernResult update(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["void", "com.mongodb.connection.DefaultServerConnection.updateAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void updateAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DefaultServerConnection.delete(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)", "public com.mongodb.WriteConcernResult delete(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["void", "com.mongodb.connection.DefaultServerConnection.deleteAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void deleteAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.DefaultServerConnection.insertCommand(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)", "public com.mongodb.bulk.BulkWriteResult insertCommand(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["void", "com.mongodb.connection.DefaultServerConnection.insertCommandAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void insertCommandAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.DefaultServerConnection.updateCommand(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)", "public com.mongodb.bulk.BulkWriteResult updateCommand(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["void", "com.mongodb.connection.DefaultServerConnection.updateCommandAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void updateCommandAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.DefaultServerConnection.deleteCommand(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)", "public com.mongodb.bulk.BulkWriteResult deleteCommand(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["void", "com.mongodb.connection.DefaultServerConnection.deleteCommandAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void deleteCommandAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["<T> T", "com.mongodb.connection.DefaultServerConnection.command(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)", "public <T> T command(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.commandAsync(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<T>)", "public <T> void commandAsync(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<T>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.connection.DefaultServerConnection.query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public <T> void queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.connection.DefaultServerConnection.getMore(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> getMore(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)"], ["<T> void", "com.mongodb.connection.DefaultServerConnection.getMoreAsync(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public <T> void getMoreAsync(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["void", "com.mongodb.connection.DefaultServerConnection.killCursor(java.util.List<java.lang.Long>)", "public void killCursor(java.util.List<java.lang.Long>)"], ["void", "com.mongodb.connection.DefaultServerConnection.killCursorAsync(java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void killCursorAsync(java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.connection.DefaultServerConnection.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.connection.Connection", "com.mongodb.connection.DefaultServerConnection.retain()", "public com.mongodb.connection.Connection retain()"], ["com.mongodb.connection.AsyncConnection", "com.mongodb.connection.DefaultServerConnection.retain()", "public com.mongodb.connection.AsyncConnection retain()"], ["void", "com.mongodb.connection.DefaultServerMonitor$ServerMonitorRunnable.close()", "public void close()"], ["synchronized", "com.mongodb.connection.DefaultServerMonitor$ServerMonitorRunnable.void run()", "public synchronized void run()"], ["void", "com.mongodb.connection.DefaultServerMonitor.start()", "public void start()"], ["void", "com.mongodb.connection.DefaultServerMonitor.connect()", "public void connect()"], ["void", "com.mongodb.connection.DefaultServerMonitor.invalidate()", "public void invalidate()"], ["void", "com.mongodb.connection.DefaultServerMonitor.close()", "public void close()"], ["com.mongodb.connection.ServerMonitor", "com.mongodb.connection.DefaultServerMonitorFactory.create(com.mongodb.connection.ChangeListener<com.mongodb.connection.ServerDescription>)", "public com.mongodb.connection.ServerMonitor create(com.mongodb.connection.ChangeListener<com.mongodb.connection.ServerDescription>)"], ["com.mongodb.connection.DeleteCommandMessage", "com.mongodb.connection.DeleteCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.DeleteCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.connection.MessageSettings)"], ["int", "com.mongodb.connection.DeleteCommandMessage.getItemCount()", "public int getItemCount()"], ["java.util.List<com.mongodb.bulk.DeleteRequest>", "com.mongodb.connection.DeleteCommandMessage.getRequests()", "public java.util.List<com.mongodb.bulk.DeleteRequest> getRequests()"], ["void", "com.mongodb.connection.DeleteCommandProtocol$1.onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)", "public void onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.DeleteCommandProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.DeleteCommandProtocol", "com.mongodb.connection.DeleteCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)", "public com.mongodb.connection.DeleteCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.DeleteCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.bulk.BulkWriteResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.DeleteCommandProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["java.lang.Object", "com.mongodb.connection.DeleteCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.DeleteMessage", "com.mongodb.connection.DeleteMessage(java.lang.String, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.DeleteMessage(java.lang.String, java.util.List<com.mongodb.bulk.DeleteRequest>, com.mongodb.connection.MessageSettings)"], ["void", "com.mongodb.connection.DeleteProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.DeleteProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.DeleteProtocol", "com.mongodb.connection.DeleteProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)", "public com.mongodb.connection.DeleteProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.DeleteProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.DeleteProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.DeleteProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.completed(T)", "public void completed(T)"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.getOpen()", "public void getOpen() throws java.io.IOException"], ["void", "com.mongodb.connection.FutureAsyncCompletionHandler.getWrite()", "public void getWrite() throws java.io.IOException"], ["T", "com.mongodb.connection.FutureAsyncCompletionHandler.getRead()", "public T getRead() throws java.io.IOException"], ["com.mongodb.connection.GenericWriteProtocol", "com.mongodb.connection.GenericWriteProtocol(com.mongodb.MongoNamespace, com.mongodb.connection.RequestMessage, boolean, com.mongodb.WriteConcern)", "public com.mongodb.connection.GenericWriteProtocol(com.mongodb.MongoNamespace, com.mongodb.connection.RequestMessage, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.connection.GetMoreMessage", "com.mongodb.connection.GetMoreMessage(java.lang.String, long, int)", "public com.mongodb.connection.GetMoreMessage(java.lang.String, long, int)"], ["long", "com.mongodb.connection.GetMoreMessage.getCursorId()", "public long getCursorId()"], ["com.mongodb.connection.GetMoreProtocol", "com.mongodb.connection.GetMoreProtocol(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)", "public com.mongodb.connection.GetMoreProtocol(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)"], ["com.mongodb.connection.QueryResult<T>", "com.mongodb.connection.GetMoreProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.connection.QueryResult<T> execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.GetMoreProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["java.lang.Object", "com.mongodb.connection.GetMoreProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.GetMoreResultCallback", "com.mongodb.connection.GetMoreResultCallback(com.mongodb.MongoNamespace, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>, org.bson.codecs.Decoder<T>, long, long, com.mongodb.ServerAddress)", "public com.mongodb.connection.GetMoreResultCallback(com.mongodb.MongoNamespace, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>, org.bson.codecs.Decoder<T>, long, long, com.mongodb.ServerAddress)"], ["java.lang.String", "com.mongodb.connection.GSSAPIAuthenticator.getMechanismName()", "public java.lang.String getMechanismName()"], ["com.mongodb.connection.InsertCommandMessage", "com.mongodb.connection.InsertCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.InsertCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.connection.MessageSettings)"], ["int", "com.mongodb.connection.InsertCommandMessage.getItemCount()", "public int getItemCount()"], ["java.util.List<com.mongodb.bulk.InsertRequest>", "com.mongodb.connection.InsertCommandMessage.getRequests()", "public java.util.List<com.mongodb.bulk.InsertRequest> getRequests()"], ["void", "com.mongodb.connection.InsertCommandProtocol$1.onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)", "public void onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.InsertCommandProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.InsertCommandProtocol", "com.mongodb.connection.InsertCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)", "public com.mongodb.connection.InsertCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.InsertCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.bulk.BulkWriteResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.InsertCommandProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["java.lang.Object", "com.mongodb.connection.InsertCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.InsertMessage", "com.mongodb.connection.InsertMessage(java.lang.String, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.InsertMessage(java.lang.String, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>, com.mongodb.connection.MessageSettings)"], ["void", "com.mongodb.connection.InsertProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.InsertProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.InsertProtocol", "com.mongodb.connection.InsertProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)", "public com.mongodb.connection.InsertProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.InsertProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.InsertProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.InsertProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.InternalStreamConnection$1$1.onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$1.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.connection.InternalStreamConnection$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$1.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["void", "com.mongodb.connection.InternalStreamConnection$2.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.connection.InternalStreamConnection$2.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$2.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["void", "com.mongodb.connection.InternalStreamConnection$3.completed(org.bson.ByteBuf)", "public void completed(org.bson.ByteBuf)"], ["void", "com.mongodb.connection.InternalStreamConnection$3.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$3.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["com.mongodb.connection.InternalStreamConnection$ErrorHandlingConnectionListener", "com.mongodb.connection.InternalStreamConnection$ErrorHandlingConnectionListener(com.mongodb.event.ConnectionListener)", "public com.mongodb.connection.InternalStreamConnection$ErrorHandlingConnectionListener(com.mongodb.event.ConnectionListener)"], ["void", "com.mongodb.connection.InternalStreamConnection$ErrorHandlingConnectionListener.connectionOpened(com.mongodb.event.ConnectionEvent)", "public void connectionOpened(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.connection.InternalStreamConnection$ErrorHandlingConnectionListener.connectionClosed(com.mongodb.event.ConnectionEvent)", "public void connectionClosed(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.connection.InternalStreamConnection$ErrorHandlingConnectionListener.messagesSent(com.mongodb.event.ConnectionMessagesSentEvent)", "public void messagesSent(com.mongodb.event.ConnectionMessagesSentEvent)"], ["void", "com.mongodb.connection.InternalStreamConnection$ErrorHandlingConnectionListener.messageReceived(com.mongodb.event.ConnectionMessageReceivedEvent)", "public void messageReceived(com.mongodb.event.ConnectionMessageReceivedEvent)"], ["void", "com.mongodb.connection.InternalStreamConnection$ResponseBuffersCallback.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$ResponseBuffersCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback$ResponseBodyCallback", "com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback$ResponseBodyCallback(com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback, com.mongodb.connection.ReplyHeader)", "public com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback$ResponseBodyCallback(com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback, com.mongodb.connection.ReplyHeader)"], ["void", "com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback$ResponseBodyCallback.onResult(org.bson.ByteBuf, java.lang.Throwable)", "public void onResult(org.bson.ByteBuf, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback$ResponseBodyCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback", "com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback(com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)", "public com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback(com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)"], ["void", "com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback.onResult(org.bson.ByteBuf, java.lang.Throwable)", "public void onResult(org.bson.ByteBuf, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnection$ResponseHeaderCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.async.SingleResultCallback<java.lang.Void>", "com.mongodb.connection.InternalStreamConnection$SendMessageRequest.getCallback()", "public com.mongodb.async.SingleResultCallback<java.lang.Void> getCallback()"], ["java.util.List<org.bson.ByteBuf>", "com.mongodb.connection.InternalStreamConnection$SendMessageRequest.getByteBuffers()", "public java.util.List<org.bson.ByteBuf> getByteBuffers()"], ["int", "com.mongodb.connection.InternalStreamConnection$SendMessageRequest.getMessageId()", "public int getMessageId()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.InternalStreamConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["void", "com.mongodb.connection.InternalStreamConnection.open()", "public void open()"], ["void", "com.mongodb.connection.InternalStreamConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.InternalStreamConnection.close()", "public void close()"], ["boolean", "com.mongodb.connection.InternalStreamConnection.opened()", "public boolean opened()"], ["boolean", "com.mongodb.connection.InternalStreamConnection.isClosed()", "public boolean isClosed()"], ["void", "com.mongodb.connection.InternalStreamConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)", "public void sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["com.mongodb.connection.ResponseBuffers", "com.mongodb.connection.InternalStreamConnection.receiveMessage(int)", "public com.mongodb.connection.ResponseBuffers receiveMessage(int)"], ["void", "com.mongodb.connection.InternalStreamConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.InternalStreamConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)", "public void receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)"], ["org.bson.ByteBuf", "com.mongodb.connection.InternalStreamConnection.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["com.mongodb.connection.InternalStreamConnectionFactory", "com.mongodb.connection.InternalStreamConnectionFactory(com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ConnectionListener)", "public com.mongodb.connection.InternalStreamConnectionFactory(com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ConnectionListener)"], ["com.mongodb.connection.InternalConnection", "com.mongodb.connection.InternalStreamConnectionFactory.create(com.mongodb.connection.ServerId)", "public com.mongodb.connection.InternalConnection create(com.mongodb.connection.ServerId)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1.onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$3.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator", "com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.start()", "public void start()"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.InternalStreamConnectionInitializer.initialize(com.mongodb.connection.InternalConnection)", "public com.mongodb.connection.ConnectionDescription initialize(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.InternalStreamConnectionInitializer.initializeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>)", "public void initializeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>)"], ["void", "com.mongodb.connection.KillCursorProtocol$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.KillCursorProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.KillCursorProtocol", "com.mongodb.connection.KillCursorProtocol(java.util.List<java.lang.Long>)", "public com.mongodb.connection.KillCursorProtocol(java.util.List<java.lang.Long>)"], ["java.lang.Void", "com.mongodb.connection.KillCursorProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Void execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.KillCursorProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.connection.KillCursorProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.KillCursorsMessage", "com.mongodb.connection.KillCursorsMessage(java.util.List<java.lang.Long>)", "public com.mongodb.connection.KillCursorsMessage(java.util.List<java.lang.Long>)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder()", "public com.mongodb.connection.MessageSettings$Builder()"], ["com.mongodb.connection.MessageSettings", "com.mongodb.connection.MessageSettings$Builder.build()", "public com.mongodb.connection.MessageSettings build()"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.maxDocumentSize(int)", "public com.mongodb.connection.MessageSettings$Builder maxDocumentSize(int)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.maxMessageSize(int)", "public com.mongodb.connection.MessageSettings$Builder maxMessageSize(int)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings$Builder.maxBatchCount(int)", "public com.mongodb.connection.MessageSettings$Builder maxBatchCount(int)"], ["com.mongodb.connection.MessageSettings$Builder", "com.mongodb.connection.MessageSettings.builder()", "public static com.mongodb.connection.MessageSettings$Builder builder()"], ["int", "com.mongodb.connection.MessageSettings.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["int", "com.mongodb.connection.MessageSettings.getMaxMessageSize()", "public int getMaxMessageSize()"], ["int", "com.mongodb.connection.MessageSettings.getMaxBatchCount()", "public int getMaxBatchCount()"], ["void", "com.mongodb.connection.MultiServerCluster$DefaultServerStateListener.stateChanged(com.mongodb.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)", "public void stateChanged(com.mongodb.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)"], ["com.mongodb.connection.MultiServerCluster", "com.mongodb.connection.MultiServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ClusterableServerFactory, com.mongodb.event.ClusterListener)", "public com.mongodb.connection.MultiServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ClusterableServerFactory, com.mongodb.event.ClusterListener)"], ["void", "com.mongodb.connection.MultiServerCluster.close()", "public void close()"], ["void", "com.mongodb.connection.NativeAuthenticator$1$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.NativeAuthenticator$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.NativeAuthenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.NativeAuthenticator$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.NativeAuthenticator", "com.mongodb.connection.NativeAuthenticator(com.mongodb.MongoCredential)", "public com.mongodb.connection.NativeAuthenticator(com.mongodb.MongoCredential)"], ["void", "com.mongodb.connection.NativeAuthenticator.authenticate(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)", "public void authenticate(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.connection.PlainAuthenticator$1.handle(javax.security.auth.callback.Callback[])", "public void handle(javax.security.auth.callback.Callback[]) throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException"], ["java.lang.String", "com.mongodb.connection.PlainAuthenticator.getMechanismName()", "public java.lang.String getMechanismName()"], ["com.mongodb.connection.QueryMessage", "com.mongodb.connection.QueryMessage(java.lang.String, int, int, org.bson.BsonDocument, org.bson.BsonDocument, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.QueryMessage(java.lang.String, int, int, org.bson.BsonDocument, org.bson.BsonDocument, com.mongodb.connection.MessageSettings)"], ["com.mongodb.connection.QueryProtocol", "com.mongodb.connection.QueryProtocol(com.mongodb.MongoNamespace, int, int, org.bson.BsonDocument, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)", "public com.mongodb.connection.QueryProtocol(com.mongodb.MongoNamespace, int, int, org.bson.BsonDocument, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["boolean", "com.mongodb.connection.QueryProtocol.isTailableCursor()", "public boolean isTailableCursor()"], ["com.mongodb.connection.QueryProtocol<T>", "com.mongodb.connection.QueryProtocol.tailableCursor(boolean)", "public com.mongodb.connection.QueryProtocol<T> tailableCursor(boolean)"], ["boolean", "com.mongodb.connection.QueryProtocol.isSlaveOk()", "public boolean isSlaveOk()"], ["com.mongodb.connection.QueryProtocol<T>", "com.mongodb.connection.QueryProtocol.slaveOk(boolean)", "public com.mongodb.connection.QueryProtocol<T> slaveOk(boolean)"], ["boolean", "com.mongodb.connection.QueryProtocol.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.connection.QueryProtocol<T>", "com.mongodb.connection.QueryProtocol.oplogReplay(boolean)", "public com.mongodb.connection.QueryProtocol<T> oplogReplay(boolean)"], ["boolean", "com.mongodb.connection.QueryProtocol.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.connection.QueryProtocol<T>", "com.mongodb.connection.QueryProtocol.noCursorTimeout(boolean)", "public com.mongodb.connection.QueryProtocol<T> noCursorTimeout(boolean)"], ["boolean", "com.mongodb.connection.QueryProtocol.isAwaitData()", "public boolean isAwaitData()"], ["com.mongodb.connection.QueryProtocol<T>", "com.mongodb.connection.QueryProtocol.awaitData(boolean)", "public com.mongodb.connection.QueryProtocol<T> awaitData(boolean)"], ["boolean", "com.mongodb.connection.QueryProtocol.isPartial()", "public boolean isPartial()"], ["com.mongodb.connection.QueryProtocol<T>", "com.mongodb.connection.QueryProtocol.partial(boolean)", "public com.mongodb.connection.QueryProtocol<T> partial(boolean)"], ["com.mongodb.connection.QueryResult<T>", "com.mongodb.connection.QueryProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.connection.QueryResult<T> execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.QueryProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["java.lang.Object", "com.mongodb.connection.QueryProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.QueryResult", "com.mongodb.connection.QueryResult(com.mongodb.MongoNamespace, java.util.List<T>, long, com.mongodb.ServerAddress)", "public com.mongodb.connection.QueryResult(com.mongodb.MongoNamespace, java.util.List<T>, long, com.mongodb.ServerAddress)"], ["com.mongodb.MongoNamespace", "com.mongodb.connection.QueryResult.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["com.mongodb.ServerCursor", "com.mongodb.connection.QueryResult.getCursor()", "public com.mongodb.ServerCursor getCursor()"], ["java.util.List<T>", "com.mongodb.connection.QueryResult.getResults()", "public java.util.List<T> getResults()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.QueryResult.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["com.mongodb.connection.QueryResultCallback", "com.mongodb.connection.QueryResultCallback(com.mongodb.MongoNamespace, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>, org.bson.codecs.Decoder<T>, int, com.mongodb.ServerAddress)", "public com.mongodb.connection.QueryResultCallback(com.mongodb.MongoNamespace, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>, org.bson.codecs.Decoder<T>, int, com.mongodb.ServerAddress)"], ["com.mongodb.connection.ReplyHeader", "com.mongodb.connection.ReplyHeader(org.bson.io.BsonInput)", "public com.mongodb.connection.ReplyHeader(org.bson.io.BsonInput)"], ["int", "com.mongodb.connection.ReplyHeader.getMessageLength()", "public int getMessageLength()"], ["int", "com.mongodb.connection.ReplyHeader.getRequestId()", "public int getRequestId()"], ["int", "com.mongodb.connection.ReplyHeader.getResponseTo()", "public int getResponseTo()"], ["int", "com.mongodb.connection.ReplyHeader.getResponseFlags()", "public int getResponseFlags()"], ["long", "com.mongodb.connection.ReplyHeader.getCursorId()", "public long getCursorId()"], ["int", "com.mongodb.connection.ReplyHeader.getStartingFrom()", "public int getStartingFrom()"], ["int", "com.mongodb.connection.ReplyHeader.getNumberReturned()", "public int getNumberReturned()"], ["boolean", "com.mongodb.connection.ReplyHeader.isCursorNotFound()", "public boolean isCursorNotFound()"], ["boolean", "com.mongodb.connection.ReplyHeader.isQueryFailure()", "public boolean isQueryFailure()"], ["com.mongodb.connection.ReplyMessage", "com.mongodb.connection.ReplyMessage(com.mongodb.connection.ResponseBuffers, org.bson.codecs.Decoder<T>, long)", "public com.mongodb.connection.ReplyMessage(com.mongodb.connection.ResponseBuffers, org.bson.codecs.Decoder<T>, long)"], ["com.mongodb.connection.ReplyHeader", "com.mongodb.connection.ReplyMessage.getReplyHeader()", "public com.mongodb.connection.ReplyHeader getReplyHeader()"], ["java.util.List<T>", "com.mongodb.connection.ReplyMessage.getDocuments()", "public java.util.List<T> getDocuments()"], ["com.mongodb.connection.RequestMessage$OpCode[]", "com.mongodb.connection.RequestMessage$OpCode.values()", "public static com.mongodb.connection.RequestMessage$OpCode[] values()"], ["com.mongodb.connection.RequestMessage$OpCode", "com.mongodb.connection.RequestMessage$OpCode.valueOf(java.lang.String)", "public static com.mongodb.connection.RequestMessage$OpCode valueOf(java.lang.String)"], ["int", "com.mongodb.connection.RequestMessage$OpCode.getValue()", "public int getValue()"], ["int", "com.mongodb.connection.RequestMessage.getCurrentGlobalId()", "public static int getCurrentGlobalId()"], ["com.mongodb.connection.RequestMessage", "com.mongodb.connection.RequestMessage(com.mongodb.connection.RequestMessage$OpCode, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.RequestMessage(com.mongodb.connection.RequestMessage$OpCode, com.mongodb.connection.MessageSettings)"], ["com.mongodb.connection.RequestMessage", "com.mongodb.connection.RequestMessage(java.lang.String, com.mongodb.connection.RequestMessage$OpCode, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.RequestMessage(java.lang.String, com.mongodb.connection.RequestMessage$OpCode, com.mongodb.connection.MessageSettings)"], ["int", "com.mongodb.connection.RequestMessage.getId()", "public int getId()"], ["com.mongodb.connection.RequestMessage$OpCode", "com.mongodb.connection.RequestMessage.getOpCode()", "public com.mongodb.connection.RequestMessage$OpCode getOpCode()"], ["java.lang.String", "com.mongodb.connection.RequestMessage.getNamespace()", "public java.lang.String getNamespace()"], ["com.mongodb.connection.MessageSettings", "com.mongodb.connection.RequestMessage.getSettings()", "public com.mongodb.connection.MessageSettings getSettings()"], ["com.mongodb.connection.RequestMessage", "com.mongodb.connection.RequestMessage.encode(org.bson.io.BsonOutput)", "public com.mongodb.connection.RequestMessage encode(org.bson.io.BsonOutput)"], ["com.mongodb.connection.ResponseBuffers", "com.mongodb.connection.ResponseBuffers(com.mongodb.connection.ReplyHeader, org.bson.ByteBuf)", "public com.mongodb.connection.ResponseBuffers(com.mongodb.connection.ReplyHeader, org.bson.ByteBuf)"], ["com.mongodb.connection.ReplyHeader", "com.mongodb.connection.ResponseBuffers.getReplyHeader()", "public com.mongodb.connection.ReplyHeader getReplyHeader()"], ["org.bson.ByteBuf", "com.mongodb.connection.ResponseBuffers.getBodyByteBuffer()", "public org.bson.ByteBuf getBodyByteBuffer()"], ["void", "com.mongodb.connection.ResponseBuffers.close()", "public void close()"], ["void", "com.mongodb.connection.ResponseCallback.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.ResponseCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.SaslAuthenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.SaslAuthenticator$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.SaslAuthenticator$Continuator", "com.mongodb.connection.SaslAuthenticator$Continuator(javax.security.sasl.SaslClient, org.bson.BsonDocument, com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public com.mongodb.connection.SaslAuthenticator$Continuator(javax.security.sasl.SaslClient, org.bson.BsonDocument, com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.SaslAuthenticator$Continuator.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.SaslAuthenticator$Continuator.start()", "public void start()"], ["void", "com.mongodb.connection.SaslAuthenticator$Continuator.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.SaslAuthenticator.authenticate(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)", "public void authenticate(com.mongodb.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)"], ["com.mongodb.connection.ScramSha1Authenticator$DefaultRandomStringGenerator", "com.mongodb.connection.ScramSha1Authenticator$DefaultRandomStringGenerator()", "public com.mongodb.connection.ScramSha1Authenticator$DefaultRandomStringGenerator()"], ["java.lang.String", "com.mongodb.connection.ScramSha1Authenticator$DefaultRandomStringGenerator.generate(int)", "public java.lang.String generate(int)"], ["java.lang.String", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.getMechanismName()", "public java.lang.String getMechanismName()"], ["boolean", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.hasInitialResponse()", "public boolean hasInitialResponse()"], ["byte[]", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.evaluateChallenge(byte[])", "public byte[] evaluateChallenge(byte[]) throws javax.security.sasl.SaslException"], ["boolean", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.isComplete()", "public boolean isComplete()"], ["byte[]", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.unwrap(byte[], int, int)", "public byte[] unwrap(byte[], int, int) throws javax.security.sasl.SaslException"], ["byte[]", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.wrap(byte[], int, int)", "public byte[] wrap(byte[], int, int) throws javax.security.sasl.SaslException"], ["java.lang.Object", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.getNegotiatedProperty(java.lang.String)", "public java.lang.Object getNegotiatedProperty(java.lang.String)"], ["void", "com.mongodb.connection.ScramSha1Authenticator$ScramSha1SaslClient.dispose()", "public void dispose() throws javax.security.sasl.SaslException"], ["java.lang.String", "com.mongodb.connection.ScramSha1Authenticator.getMechanismName()", "public java.lang.String getMechanismName()"], ["void", "com.mongodb.connection.SendMessageCallback.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.SendMessageCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ServerConnectionState[]", "com.mongodb.connection.ServerConnectionState.values()", "public static com.mongodb.connection.ServerConnectionState[] values()"], ["com.mongodb.connection.ServerConnectionState", "com.mongodb.connection.ServerConnectionState.valueOf(java.lang.String)", "public static com.mongodb.connection.ServerConnectionState valueOf(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder()", "public com.mongodb.connection.ServerDescription$Builder()"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.address(com.mongodb.ServerAddress)", "public com.mongodb.connection.ServerDescription$Builder address(com.mongodb.ServerAddress)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.type(com.mongodb.connection.ServerType)", "public com.mongodb.connection.ServerDescription$Builder type(com.mongodb.connection.ServerType)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.hosts(java.util.Set<java.lang.String>)", "public com.mongodb.connection.ServerDescription$Builder hosts(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.passives(java.util.Set<java.lang.String>)", "public com.mongodb.connection.ServerDescription$Builder passives(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.arbiters(java.util.Set<java.lang.String>)", "public com.mongodb.connection.ServerDescription$Builder arbiters(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.primary(java.lang.String)", "public com.mongodb.connection.ServerDescription$Builder primary(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.maxDocumentSize(int)", "public com.mongodb.connection.ServerDescription$Builder maxDocumentSize(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.tagSet(com.mongodb.TagSet)", "public com.mongodb.connection.ServerDescription$Builder tagSet(com.mongodb.TagSet)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.roundTripTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ServerDescription$Builder roundTripTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.setName(java.lang.String)", "public com.mongodb.connection.ServerDescription$Builder setName(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.ok(boolean)", "public com.mongodb.connection.ServerDescription$Builder ok(boolean)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.state(com.mongodb.connection.ServerConnectionState)", "public com.mongodb.connection.ServerDescription$Builder state(com.mongodb.connection.ServerConnectionState)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.version(com.mongodb.connection.ServerVersion)", "public com.mongodb.connection.ServerDescription$Builder version(com.mongodb.connection.ServerVersion)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.minWireVersion(int)", "public com.mongodb.connection.ServerDescription$Builder minWireVersion(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.maxWireVersion(int)", "public com.mongodb.connection.ServerDescription$Builder maxWireVersion(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.exception(java.lang.Throwable)", "public com.mongodb.connection.ServerDescription$Builder exception(java.lang.Throwable)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ServerDescription$Builder.build()", "public com.mongodb.connection.ServerDescription build()"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription.builder()", "public static com.mongodb.connection.ServerDescription$Builder builder()"], ["boolean", "com.mongodb.connection.ServerDescription.isCompatibleWithDriver()", "public boolean isCompatibleWithDriver()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMaxDocumentSize()", "public static int getDefaultMaxDocumentSize()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMinWireVersion()", "public static int getDefaultMinWireVersion()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMaxWireVersion()", "public static int getDefaultMaxWireVersion()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ServerDescription.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["boolean", "com.mongodb.connection.ServerDescription.isReplicaSetMember()", "public boolean isReplicaSetMember()"], ["boolean", "com.mongodb.connection.ServerDescription.isShardRouter()", "public boolean isShardRouter()"], ["boolean", "com.mongodb.connection.ServerDescription.isStandAlone()", "public boolean isStandAlone()"], ["boolean", "com.mongodb.connection.ServerDescription.isPrimary()", "public boolean isPrimary()"], ["boolean", "com.mongodb.connection.ServerDescription.isSecondary()", "public boolean isSecondary()"], ["java.util.Set<java.lang.String>", "com.mongodb.connection.ServerDescription.getHosts()", "public java.util.Set<java.lang.String> getHosts()"], ["java.util.Set<java.lang.String>", "com.mongodb.connection.ServerDescription.getPassives()", "public java.util.Set<java.lang.String> getPassives()"], ["java.util.Set<java.lang.String>", "com.mongodb.connection.ServerDescription.getArbiters()", "public java.util.Set<java.lang.String> getArbiters()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getPrimary()", "public java.lang.String getPrimary()"], ["int", "com.mongodb.connection.ServerDescription.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["com.mongodb.TagSet", "com.mongodb.connection.ServerDescription.getTagSet()", "public com.mongodb.TagSet getTagSet()"], ["int", "com.mongodb.connection.ServerDescription.getMinWireVersion()", "public int getMinWireVersion()"], ["int", "com.mongodb.connection.ServerDescription.getMaxWireVersion()", "public int getMaxWireVersion()"], ["boolean", "com.mongodb.connection.ServerDescription.hasTags(com.mongodb.TagSet)", "public boolean hasTags(com.mongodb.TagSet)"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getSetName()", "public java.lang.String getSetName()"], ["boolean", "com.mongodb.connection.ServerDescription.isOk()", "public boolean isOk()"], ["com.mongodb.connection.ServerConnectionState", "com.mongodb.connection.ServerDescription.getState()", "public com.mongodb.connection.ServerConnectionState getState()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ServerDescription.getType()", "public com.mongodb.connection.ServerType getType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerDescription.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerDescription.getVersion()", "public com.mongodb.connection.ServerVersion getVersion()"], ["long", "com.mongodb.connection.ServerDescription.getRoundTripTimeNanos()", "public long getRoundTripTimeNanos()"], ["java.lang.Throwable", "com.mongodb.connection.ServerDescription.getException()", "public java.lang.Throwable getException()"], ["boolean", "com.mongodb.connection.ServerDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerDescription.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getShortDescription()", "public java.lang.String getShortDescription()"], ["com.mongodb.connection.ServerId", "com.mongodb.connection.ServerId(com.mongodb.connection.ClusterId, com.mongodb.ServerAddress)", "public com.mongodb.connection.ServerId(com.mongodb.connection.ClusterId, com.mongodb.ServerAddress)"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ServerId.getClusterId()", "public com.mongodb.connection.ClusterId getClusterId()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ServerId.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["boolean", "com.mongodb.connection.ServerId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerId.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerId.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder()", "public com.mongodb.connection.ServerSettings$Builder()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.heartbeatFrequency(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ServerSettings$Builder heartbeatFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.minHeartbeatFrequency(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ServerSettings$Builder minHeartbeatFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerSettings", "com.mongodb.connection.ServerSettings$Builder.build()", "public com.mongodb.connection.ServerSettings build()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings.builder()", "public static com.mongodb.connection.ServerSettings$Builder builder()"], ["long", "com.mongodb.connection.ServerSettings.getHeartbeatFrequency(java.util.concurrent.TimeUnit)", "public long getHeartbeatFrequency(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ServerSettings.getMinHeartbeatFrequency(java.util.concurrent.TimeUnit)", "public long getMinHeartbeatFrequency(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.ServerSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerSettings.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$1.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$2.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$3.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$4.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$5.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$6.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$7.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$8.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ServerType[]", "com.mongodb.connection.ServerType.values()", "public static com.mongodb.connection.ServerType[] values()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ServerType.valueOf(java.lang.String)", "public static com.mongodb.connection.ServerType valueOf(java.lang.String)"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion()", "public com.mongodb.connection.ServerVersion()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion(java.util.List<java.lang.Integer>)", "public com.mongodb.connection.ServerVersion(java.util.List<java.lang.Integer>)"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion(int, int)", "public com.mongodb.connection.ServerVersion(int, int)"], ["java.util.List<java.lang.Integer>", "com.mongodb.connection.ServerVersion.getVersionList()", "public java.util.List<java.lang.Integer> getVersionList()"], ["int", "com.mongodb.connection.ServerVersion.compareTo(com.mongodb.connection.ServerVersion)", "public int compareTo(com.mongodb.connection.ServerVersion)"], ["boolean", "com.mongodb.connection.ServerVersion.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerVersion.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerVersion.toString()", "public java.lang.String toString()"], ["int", "com.mongodb.connection.ServerVersion.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["void", "com.mongodb.connection.SingleServerCluster$1.stateChanged(com.mongodb.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)", "public void stateChanged(com.mongodb.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)"], ["com.mongodb.connection.SingleServerCluster", "com.mongodb.connection.SingleServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ClusterableServerFactory, com.mongodb.event.ClusterListener)", "public com.mongodb.connection.SingleServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ClusterableServerFactory, com.mongodb.event.ClusterListener)"], ["void", "com.mongodb.connection.SingleServerCluster.close()", "public void close()"], ["com.mongodb.connection.SocketChannelStream", "com.mongodb.connection.SocketChannelStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, com.mongodb.connection.BufferProvider)", "public com.mongodb.connection.SocketChannelStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, com.mongodb.connection.BufferProvider)"], ["void", "com.mongodb.connection.SocketChannelStream.open()", "public void open() throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketChannelStream.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.connection.SocketChannelStream.write(java.util.List<org.bson.ByteBuf>)", "public void write(java.util.List<org.bson.ByteBuf>) throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketChannelStream.read(int)", "public org.bson.ByteBuf read(int) throws java.io.IOException"], ["void", "com.mongodb.connection.SocketChannelStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketChannelStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketChannelStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)", "public void readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.SocketChannelStream.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["void", "com.mongodb.connection.SocketChannelStream.close()", "public void close()"], ["boolean", "com.mongodb.connection.SocketChannelStream.isClosed()", "public boolean isClosed()"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder()", "public com.mongodb.connection.SocketSettings$Builder()"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.connectTimeout(int, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.SocketSettings$Builder connectTimeout(int, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.readTimeout(int, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.SocketSettings$Builder readTimeout(int, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.keepAlive(boolean)", "public com.mongodb.connection.SocketSettings$Builder keepAlive(boolean)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.receiveBufferSize(int)", "public com.mongodb.connection.SocketSettings$Builder receiveBufferSize(int)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.sendBufferSize(int)", "public com.mongodb.connection.SocketSettings$Builder sendBufferSize(int)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.SocketSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.SocketSettings", "com.mongodb.connection.SocketSettings$Builder.build()", "public com.mongodb.connection.SocketSettings build()"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings.builder()", "public static com.mongodb.connection.SocketSettings$Builder builder()"], ["int", "com.mongodb.connection.SocketSettings.getConnectTimeout(java.util.concurrent.TimeUnit)", "public int getConnectTimeout(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.connection.SocketSettings.getReadTimeout(java.util.concurrent.TimeUnit)", "public int getReadTimeout(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.SocketSettings.isKeepAlive()", "public boolean isKeepAlive()"], ["int", "com.mongodb.connection.SocketSettings.getReceiveBufferSize()", "public int getReceiveBufferSize()"], ["int", "com.mongodb.connection.SocketSettings.getSendBufferSize()", "public int getSendBufferSize()"], ["boolean", "com.mongodb.connection.SocketSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.SocketSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.SocketSettings.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.SocketStream", "com.mongodb.connection.SocketStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory, com.mongodb.connection.BufferProvider)", "public com.mongodb.connection.SocketStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory, com.mongodb.connection.BufferProvider)"], ["void", "com.mongodb.connection.SocketStream.open()", "public void open() throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketStream.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.connection.SocketStream.write(java.util.List<org.bson.ByteBuf>)", "public void write(java.util.List<org.bson.ByteBuf>) throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.connection.SocketStream.read(int)", "public org.bson.ByteBuf read(int) throws java.io.IOException"], ["void", "com.mongodb.connection.SocketStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.SocketStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)", "public void readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.SocketStream.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["void", "com.mongodb.connection.SocketStream.close()", "public void close()"], ["boolean", "com.mongodb.connection.SocketStream.isClosed()", "public boolean isClosed()"], ["com.mongodb.connection.SocketStreamFactory", "com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.SocketStreamFactory", "com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory)", "public com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.SocketStreamFactory.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.Stream create(com.mongodb.ServerAddress)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder()", "public com.mongodb.connection.SslSettings$Builder()"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.enabled(boolean)", "public com.mongodb.connection.SslSettings$Builder enabled(boolean)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.invalidHostNameAllowed(boolean)", "public com.mongodb.connection.SslSettings$Builder invalidHostNameAllowed(boolean)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.SslSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.SslSettings", "com.mongodb.connection.SslSettings$Builder.build()", "public com.mongodb.connection.SslSettings build()"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings.builder()", "public static com.mongodb.connection.SslSettings$Builder builder()"], ["boolean", "com.mongodb.connection.SslSettings.isEnabled()", "public boolean isEnabled()"], ["boolean", "com.mongodb.connection.SslSettings.isInvalidHostNameAllowed()", "public boolean isInvalidHostNameAllowed()"], ["boolean", "com.mongodb.connection.SslSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.SslSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.SslSettings.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.connection.UnacknowledgedWriteResultCallback.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.UnacknowledgedWriteResultCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["boolean", "com.mongodb.connection.UpdateCommandMessage$UpdatesValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.connection.UpdateCommandMessage$UpdatesValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.connection.UpdateCommandMessage", "com.mongodb.connection.UpdateCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.UpdateCommandMessage(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.connection.MessageSettings)"], ["java.util.List<com.mongodb.bulk.UpdateRequest>", "com.mongodb.connection.UpdateCommandMessage.getRequests()", "public java.util.List<com.mongodb.bulk.UpdateRequest> getRequests()"], ["int", "com.mongodb.connection.UpdateCommandMessage.getItemCount()", "public int getItemCount()"], ["void", "com.mongodb.connection.UpdateCommandProtocol$1.onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)", "public void onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.UpdateCommandProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.UpdateCommandProtocol", "com.mongodb.connection.UpdateCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)", "public com.mongodb.connection.UpdateCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.UpdateCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.bulk.BulkWriteResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.UpdateCommandProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["java.lang.Object", "com.mongodb.connection.UpdateCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.UpdateMessage", "com.mongodb.connection.UpdateMessage(java.lang.String, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.connection.MessageSettings)", "public com.mongodb.connection.UpdateMessage(java.lang.String, java.util.List<com.mongodb.bulk.UpdateRequest>, com.mongodb.connection.MessageSettings)"], ["void", "com.mongodb.connection.UpdateProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.connection.UpdateProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.UpdateProtocol", "com.mongodb.connection.UpdateProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)", "public com.mongodb.connection.UpdateProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.UpdateProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.UpdateProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.UpdateProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$2.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$3.onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.open()", "public void open()"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.close()", "public void close()"], ["boolean", "com.mongodb.connection.UsageTrackingInternalConnection.opened()", "public boolean opened()"], ["boolean", "com.mongodb.connection.UsageTrackingInternalConnection.isClosed()", "public boolean isClosed()"], ["org.bson.ByteBuf", "com.mongodb.connection.UsageTrackingInternalConnection.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)", "public void sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["com.mongodb.connection.ResponseBuffers", "com.mongodb.connection.UsageTrackingInternalConnection.receiveMessage(int)", "public com.mongodb.connection.ResponseBuffers receiveMessage(int)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.connection.UsageTrackingInternalConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)", "public void receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ResponseBuffers>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.UsageTrackingInternalConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["void", "com.mongodb.connection.WriteCommandProtocol$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.WriteCommandProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.WriteCommandProtocol", "com.mongodb.connection.WriteCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)", "public com.mongodb.connection.WriteCommandProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.connection.WriteCommandProtocol.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.WriteCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.bulk.BulkWriteResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.WriteCommandProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["com.mongodb.MongoNamespace", "com.mongodb.connection.WriteCommandProtocol.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["java.lang.Object", "com.mongodb.connection.WriteCommandProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.WriteProtocol", "com.mongodb.connection.WriteProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)", "public com.mongodb.connection.WriteProtocol(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcernResult", "com.mongodb.connection.WriteProtocol.execute(com.mongodb.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.WriteProtocol.executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.connection.WriteProtocol.execute(com.mongodb.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.connection.InternalConnection)"], ["com.mongodb.connection.WriteResultCallback", "com.mongodb.connection.WriteResultCallback(com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>, org.bson.codecs.Decoder<org.bson.BsonDocument>, com.mongodb.MongoNamespace, com.mongodb.connection.RequestMessage, boolean, com.mongodb.WriteConcern, long, com.mongodb.connection.InternalConnection)", "public com.mongodb.connection.WriteResultCallback(com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>, org.bson.codecs.Decoder<org.bson.BsonDocument>, com.mongodb.MongoNamespace, com.mongodb.connection.RequestMessage, boolean, com.mongodb.WriteConcern, long, com.mongodb.connection.InternalConnection)"], ["void", "com.mongodb.connection.X509Authenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.connection.X509Authenticator$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.netty.NettyBufferProvider", "com.mongodb.connection.netty.NettyBufferProvider()", "public com.mongodb.connection.netty.NettyBufferProvider()"], ["com.mongodb.connection.netty.NettyBufferProvider", "com.mongodb.connection.netty.NettyBufferProvider(io.netty.buffer.ByteBufAllocator)", "public com.mongodb.connection.netty.NettyBufferProvider(io.netty.buffer.ByteBufAllocator)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyBufferProvider.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["com.mongodb.connection.netty.NettyByteBuf", "com.mongodb.connection.netty.NettyByteBuf(io.netty.buffer.ByteBuf)", "public com.mongodb.connection.netty.NettyByteBuf(io.netty.buffer.ByteBuf)"], ["com.mongodb.connection.netty.NettyByteBuf", "com.mongodb.connection.netty.NettyByteBuf(io.netty.buffer.ByteBuf, boolean)", "public com.mongodb.connection.netty.NettyByteBuf(io.netty.buffer.ByteBuf, boolean)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.capacity()", "public int capacity()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(int, byte)", "public org.bson.ByteBuf put(int, byte)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.remaining()", "public int remaining()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(byte[], int, int)", "public org.bson.ByteBuf put(byte[], int, int)"], ["boolean", "com.mongodb.connection.netty.NettyByteBuf.hasRemaining()", "public boolean hasRemaining()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(byte)", "public org.bson.ByteBuf put(byte)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.flip()", "public org.bson.ByteBuf flip()"], ["byte[]", "com.mongodb.connection.netty.NettyByteBuf.array()", "public byte[] array()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.limit()", "public int limit()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.position(int)", "public org.bson.ByteBuf position(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.clear()", "public org.bson.ByteBuf clear()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.order(java.nio.ByteOrder)", "public org.bson.ByteBuf order(java.nio.ByteOrder)"], ["byte", "com.mongodb.connection.netty.NettyByteBuf.get()", "public byte get()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(byte[])", "public org.bson.ByteBuf get(byte[])"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(byte[], int, int)", "public org.bson.ByteBuf get(byte[], int, int)"], ["long", "com.mongodb.connection.netty.NettyByteBuf.getLong()", "public long getLong()"], ["double", "com.mongodb.connection.netty.NettyByteBuf.getDouble()", "public double getDouble()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getInt()", "public int getInt()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.position()", "public int position()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.limit(int)", "public org.bson.ByteBuf limit(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.asReadOnly()", "public org.bson.ByteBuf asReadOnly()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.duplicate()", "public org.bson.ByteBuf duplicate()"], ["java.nio.ByteBuffer", "com.mongodb.connection.netty.NettyByteBuf.asNIO()", "public java.nio.ByteBuffer asNIO()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getReferenceCount()", "public int getReferenceCount()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.retain()", "public org.bson.ByteBuf retain()"], ["void", "com.mongodb.connection.netty.NettyByteBuf.release()", "public void release()"], ["void", "com.mongodb.connection.netty.NettyStream$1.initChannel(io.netty.channel.socket.SocketChannel)", "public void initChannel(io.netty.channel.socket.SocketChannel) throws java.lang.Exception"], ["void", "com.mongodb.connection.netty.NettyStream$1.initChannel(io.netty.channel.Channel)", "public void initChannel(io.netty.channel.Channel) throws java.lang.Exception"], ["void", "com.mongodb.connection.netty.NettyStream$2.operationComplete(io.netty.channel.ChannelFuture)", "public void operationComplete(io.netty.channel.ChannelFuture) throws java.lang.Exception"], ["void", "com.mongodb.connection.netty.NettyStream$2.operationComplete(io.netty.util.concurrent.Future)", "public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception"], ["void", "com.mongodb.connection.netty.NettyStream$3.operationComplete(io.netty.channel.ChannelFuture)", "public void operationComplete(io.netty.channel.ChannelFuture) throws java.lang.Exception"], ["void", "com.mongodb.connection.netty.NettyStream$3.operationComplete(io.netty.util.concurrent.Future)", "public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception"], ["com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler()", "public com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler()"], ["void", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.completed(T)", "public void completed(T)"], ["void", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["T", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.get()", "public T get() throws java.io.IOException"], ["void", "com.mongodb.connection.netty.NettyStream$InboundBufferHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)", "public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)"], ["com.mongodb.connection.netty.NettyStream", "com.mongodb.connection.netty.NettyStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)", "public com.mongodb.connection.netty.NettyStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyStream.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.connection.netty.NettyStream.open()", "public void open() throws java.io.IOException"], ["void", "com.mongodb.connection.netty.NettyStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.netty.NettyStream.write(java.util.List<org.bson.ByteBuf>)", "public void write(java.util.List<org.bson.ByteBuf>) throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyStream.read(int)", "public org.bson.ByteBuf read(int) throws java.io.IOException"], ["void", "com.mongodb.connection.netty.NettyStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.netty.NettyStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)", "public void readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.netty.NettyStream.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["void", "com.mongodb.connection.netty.NettyStream.close()", "public void close()"], ["boolean", "com.mongodb.connection.netty.NettyStream.isClosed()", "public boolean isClosed()"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.nio.NioEventLoopGroup, io.netty.buffer.ByteBufAllocator)", "public com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.nio.NioEventLoopGroup, io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.netty.NettyStreamFactory.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.Stream create(com.mongodb.ServerAddress)"], ["java.lang.String", "com.mongodb.diagnostics.logging.JULLogger.getName()", "public java.lang.String getName()"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.trace(java.lang.String, java.lang.Throwable)", "public void trace(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isInfoEnabled()", "public boolean isInfoEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isWarnEnabled()", "public boolean isWarnEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isErrorEnabled()", "public boolean isErrorEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)", "public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["com.mongodb.diagnostics.logging.Logger", "com.mongodb.diagnostics.logging.Loggers.getLogger(java.lang.String)", "public static com.mongodb.diagnostics.logging.Logger getLogger(java.lang.String)"], ["java.lang.String", "com.mongodb.diagnostics.logging.SLF4JLogger.getName()", "public java.lang.String getName()"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.trace(java.lang.String, java.lang.Throwable)", "public void trace(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isInfoEnabled()", "public boolean isInfoEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isWarnEnabled()", "public boolean isWarnEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isErrorEnabled()", "public boolean isErrorEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["com.mongodb.event.ClusterDescriptionChangedEvent", "com.mongodb.event.ClusterDescriptionChangedEvent(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterDescription)", "public com.mongodb.event.ClusterDescriptionChangedEvent(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterDescription)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.event.ClusterDescriptionChangedEvent.getClusterDescription()", "public com.mongodb.connection.ClusterDescription getClusterDescription()"], ["boolean", "com.mongodb.event.ClusterDescriptionChangedEvent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.event.ClusterDescriptionChangedEvent.hashCode()", "public int hashCode()"], ["com.mongodb.event.ClusterEvent", "com.mongodb.event.ClusterEvent(com.mongodb.connection.ClusterId)", "public com.mongodb.event.ClusterEvent(com.mongodb.connection.ClusterId)"], ["com.mongodb.connection.ClusterId", "com.mongodb.event.ClusterEvent.getClusterId()", "public com.mongodb.connection.ClusterId getClusterId()"], ["com.mongodb.event.ClusterEventMulticaster", "com.mongodb.event.ClusterEventMulticaster()", "public com.mongodb.event.ClusterEventMulticaster()"], ["void", "com.mongodb.event.ClusterEventMulticaster.add(com.mongodb.event.ClusterListener)", "public void add(com.mongodb.event.ClusterListener)"], ["void", "com.mongodb.event.ClusterEventMulticaster.remove(com.mongodb.event.ClusterListener)", "public void remove(com.mongodb.event.ClusterListener)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterOpened(com.mongodb.event.ClusterEvent)", "public void clusterOpened(com.mongodb.event.ClusterEvent)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterClosed(com.mongodb.event.ClusterEvent)", "public void clusterClosed(com.mongodb.event.ClusterEvent)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)", "public void clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["com.mongodb.event.ClusterListenerAdapter", "com.mongodb.event.ClusterListenerAdapter()", "public com.mongodb.event.ClusterListenerAdapter()"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterOpened(com.mongodb.event.ClusterEvent)", "public void clusterOpened(com.mongodb.event.ClusterEvent)"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterClosed(com.mongodb.event.ClusterEvent)", "public void clusterClosed(com.mongodb.event.ClusterEvent)"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)", "public void clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["com.mongodb.event.ConnectionEvent", "com.mongodb.event.ConnectionEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ConnectionEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["com.mongodb.event.ConnectionEventMulticaster", "com.mongodb.event.ConnectionEventMulticaster()", "public com.mongodb.event.ConnectionEventMulticaster()"], ["void", "com.mongodb.event.ConnectionEventMulticaster.add(com.mongodb.event.ConnectionListener)", "public void add(com.mongodb.event.ConnectionListener)"], ["void", "com.mongodb.event.ConnectionEventMulticaster.remove(com.mongodb.event.ConnectionListener)", "public void remove(com.mongodb.event.ConnectionListener)"], ["void", "com.mongodb.event.ConnectionEventMulticaster.connectionOpened(com.mongodb.event.ConnectionEvent)", "public void connectionOpened(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionEventMulticaster.connectionClosed(com.mongodb.event.ConnectionEvent)", "public void connectionClosed(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionEventMulticaster.messagesSent(com.mongodb.event.ConnectionMessagesSentEvent)", "public void messagesSent(com.mongodb.event.ConnectionMessagesSentEvent)"], ["void", "com.mongodb.event.ConnectionEventMulticaster.messageReceived(com.mongodb.event.ConnectionMessageReceivedEvent)", "public void messageReceived(com.mongodb.event.ConnectionMessageReceivedEvent)"], ["com.mongodb.event.ConnectionListenerAdapter", "com.mongodb.event.ConnectionListenerAdapter()", "public com.mongodb.event.ConnectionListenerAdapter()"], ["void", "com.mongodb.event.ConnectionListenerAdapter.connectionOpened(com.mongodb.event.ConnectionEvent)", "public void connectionOpened(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionListenerAdapter.connectionClosed(com.mongodb.event.ConnectionEvent)", "public void connectionClosed(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionListenerAdapter.messagesSent(com.mongodb.event.ConnectionMessagesSentEvent)", "public void messagesSent(com.mongodb.event.ConnectionMessagesSentEvent)"], ["void", "com.mongodb.event.ConnectionListenerAdapter.messageReceived(com.mongodb.event.ConnectionMessageReceivedEvent)", "public void messageReceived(com.mongodb.event.ConnectionMessageReceivedEvent)"], ["com.mongodb.event.ConnectionMessageReceivedEvent", "com.mongodb.event.ConnectionMessageReceivedEvent(com.mongodb.connection.ConnectionId, int, int)", "public com.mongodb.event.ConnectionMessageReceivedEvent(com.mongodb.connection.ConnectionId, int, int)"], ["int", "com.mongodb.event.ConnectionMessageReceivedEvent.getResponseTo()", "public int getResponseTo()"], ["int", "com.mongodb.event.ConnectionMessageReceivedEvent.getSize()", "public int getSize()"], ["com.mongodb.event.ConnectionMessagesSentEvent", "com.mongodb.event.ConnectionMessagesSentEvent(com.mongodb.connection.ConnectionId, int, int)", "public com.mongodb.event.ConnectionMessagesSentEvent(com.mongodb.connection.ConnectionId, int, int)"], ["int", "com.mongodb.event.ConnectionMessagesSentEvent.getRequestId()", "public int getRequestId()"], ["int", "com.mongodb.event.ConnectionMessagesSentEvent.getSize()", "public int getSize()"], ["com.mongodb.event.ConnectionPoolEvent", "com.mongodb.event.ConnectionPoolEvent(com.mongodb.connection.ServerId)", "public com.mongodb.event.ConnectionPoolEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["com.mongodb.event.ConnectionPoolEventMulticaster", "com.mongodb.event.ConnectionPoolEventMulticaster()", "public com.mongodb.event.ConnectionPoolEventMulticaster()"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.add(com.mongodb.event.ConnectionPoolListener)", "public void add(com.mongodb.event.ConnectionPoolListener)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.remove(com.mongodb.event.ConnectionPoolListener)", "public void remove(com.mongodb.event.ConnectionPoolListener)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)", "public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionPoolClosed(com.mongodb.event.ConnectionPoolEvent)", "public void connectionPoolClosed(com.mongodb.event.ConnectionPoolEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionCheckedOut(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionCheckedIn(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionAdded(com.mongodb.event.ConnectionEvent)", "public void connectionAdded(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionRemoved(com.mongodb.event.ConnectionEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionEvent)"], ["com.mongodb.event.ConnectionPoolListenerAdapter", "com.mongodb.event.ConnectionPoolListenerAdapter()", "public com.mongodb.event.ConnectionPoolListenerAdapter()"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)", "public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionPoolClosed(com.mongodb.event.ConnectionPoolEvent)", "public void connectionPoolClosed(com.mongodb.event.ConnectionPoolEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionCheckedOut(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionCheckedIn(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionAdded(com.mongodb.event.ConnectionEvent)", "public void connectionAdded(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionRemoved(com.mongodb.event.ConnectionEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionEvent)"], ["com.mongodb.event.ConnectionPoolOpenedEvent", "com.mongodb.event.ConnectionPoolOpenedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ConnectionPoolSettings)", "public com.mongodb.event.ConnectionPoolOpenedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ConnectionPoolSettings)"], ["com.mongodb.connection.ConnectionPoolSettings", "com.mongodb.event.ConnectionPoolOpenedEvent.getSettings()", "public com.mongodb.connection.ConnectionPoolSettings getSettings()"], ["com.mongodb.event.ConnectionPoolWaitQueueEvent", "com.mongodb.event.ConnectionPoolWaitQueueEvent(com.mongodb.connection.ServerId, long)", "public com.mongodb.event.ConnectionPoolWaitQueueEvent(com.mongodb.connection.ServerId, long)"], ["long", "com.mongodb.event.ConnectionPoolWaitQueueEvent.getThreadId()", "public long getThreadId()"], ["com.mongodb.gridfs.CLI", "com.mongodb.gridfs.CLI()", "public com.mongodb.gridfs.CLI()"], ["void", "com.mongodb.gridfs.CLI.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["com.mongodb.gridfs.GridFS", "com.mongodb.gridfs.GridFS(com.mongodb.DB)", "public com.mongodb.gridfs.GridFS(com.mongodb.DB)"], ["com.mongodb.gridfs.GridFS", "com.mongodb.gridfs.GridFS(com.mongodb.DB, java.lang.String)", "public com.mongodb.gridfs.GridFS(com.mongodb.DB, java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList()", "public com.mongodb.DBCursor getFileList()"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList(com.mongodb.DBObject)", "public com.mongodb.DBCursor getFileList(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBCursor getFileList(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.find(org.bson.types.ObjectId)", "public com.mongodb.gridfs.GridFSDBFile find(org.bson.types.ObjectId)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(org.bson.types.ObjectId)", "public com.mongodb.gridfs.GridFSDBFile findOne(org.bson.types.ObjectId)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(java.lang.String)", "public com.mongodb.gridfs.GridFSDBFile findOne(java.lang.String)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(com.mongodb.DBObject)", "public com.mongodb.gridfs.GridFSDBFile findOne(com.mongodb.DBObject)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(java.lang.String)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(java.lang.String)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(java.lang.String, com.mongodb.DBObject)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(java.lang.String, com.mongodb.DBObject)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(com.mongodb.DBObject)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(com.mongodb.DBObject)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(com.mongodb.DBObject, com.mongodb.DBObject)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(com.mongodb.DBObject, com.mongodb.DBObject)"], ["void", "com.mongodb.gridfs.GridFS.remove(org.bson.types.ObjectId)", "public void remove(org.bson.types.ObjectId)"], ["void", "com.mongodb.gridfs.GridFS.remove(java.lang.String)", "public void remove(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFS.remove(com.mongodb.DBObject)", "public void remove(com.mongodb.DBObject)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(byte[])", "public com.mongodb.gridfs.GridFSInputFile createFile(byte[])"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.File)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.File) throws java.io.IOException"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, boolean)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream, boolean)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, java.lang.String)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream, java.lang.String)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, java.lang.String, boolean)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream, java.lang.String, boolean)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.lang.String)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.lang.String)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile()", "public com.mongodb.gridfs.GridFSInputFile createFile()"], ["java.lang.String", "com.mongodb.gridfs.GridFS.getBucketName()", "public java.lang.String getBucketName()"], ["com.mongodb.DB", "com.mongodb.gridfs.GridFS.getDB()", "public com.mongodb.DB getDB()"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.available()", "public int available()"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read()", "public int read()"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read(byte[])", "public int read(byte[])"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read(byte[], int, int)", "public int read(byte[], int, int)"], ["long", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFSDBFile()", "public com.mongodb.gridfs.GridFSDBFile()"], ["java.io.InputStream", "com.mongodb.gridfs.GridFSDBFile.getInputStream()", "public java.io.InputStream getInputStream()"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.lang.String)", "public long writeTo(java.lang.String) throws java.io.IOException"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.io.File)", "public long writeTo(java.io.File) throws java.io.IOException"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.io.OutputStream)", "public long writeTo(java.io.OutputStream) throws java.io.IOException"], ["com.mongodb.gridfs.GridFSFile", "com.mongodb.gridfs.GridFSFile()", "public com.mongodb.gridfs.GridFSFile()"], ["void", "com.mongodb.gridfs.GridFSFile.save()", "public void save()"], ["void", "com.mongodb.gridfs.GridFSFile.validate()", "public void validate()"], ["int", "com.mongodb.gridfs.GridFSFile.numChunks()", "public int numChunks()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.getId()", "public java.lang.Object getId()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getFilename()", "public java.lang.String getFilename()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getContentType()", "public java.lang.String getContentType()"], ["long", "com.mongodb.gridfs.GridFSFile.getLength()", "public long getLength()"], ["long", "com.mongodb.gridfs.GridFSFile.getChunkSize()", "public long getChunkSize()"], ["java.util.Date", "com.mongodb.gridfs.GridFSFile.getUploadDate()", "public java.util.Date getUploadDate()"], ["java.util.List<java.lang.String>", "com.mongodb.gridfs.GridFSFile.getAliases()", "public java.util.List<java.lang.String> getAliases()"], ["com.mongodb.DBObject", "com.mongodb.gridfs.GridFSFile.getMetaData()", "public com.mongodb.DBObject getMetaData()"], ["void", "com.mongodb.gridfs.GridFSFile.setMetaData(com.mongodb.DBObject)", "public void setMetaData(com.mongodb.DBObject)"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getMD5()", "public java.lang.String getMD5()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["boolean", "com.mongodb.gridfs.GridFSFile.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "com.mongodb.gridfs.GridFSFile.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.util.Set<java.lang.String>", "com.mongodb.gridfs.GridFSFile.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "com.mongodb.gridfs.GridFSFile.isPartialObject()", "public boolean isPartialObject()"], ["void", "com.mongodb.gridfs.GridFSFile.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.gridfs.GridFSFile.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["void", "com.mongodb.gridfs.GridFSFile.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.util.Map<?, ?>", "com.mongodb.gridfs.GridFSFile.toMap()", "public java.util.Map<?, ?> toMap()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.close()", "public void close()"], ["void", "com.mongodb.gridfs.GridFSInputFile.setId(java.lang.Object)", "public void setId(java.lang.Object)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setFilename(java.lang.String)", "public void setFilename(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setChunkSize(long)", "public void setChunkSize(long)"], ["void", "com.mongodb.gridfs.GridFSInputFile.save()", "public void save()"], ["void", "com.mongodb.gridfs.GridFSInputFile.save(long)", "public void save(long)"], ["int", "com.mongodb.gridfs.GridFSInputFile.saveChunks()", "public int saveChunks() throws java.io.IOException"], ["int", "com.mongodb.gridfs.GridFSInputFile.saveChunks(long)", "public int saveChunks(long) throws java.io.IOException"], ["java.io.OutputStream", "com.mongodb.gridfs.GridFSInputFile.getOutputStream()", "public java.io.OutputStream getOutputStream()"], ["<T> com.mongodb.async.SingleResultCallback<T>", "com.mongodb.internal.async.ErrorHandlingResultCallback.errorHandlingCallback(com.mongodb.async.SingleResultCallback<T>)", "public static <T> com.mongodb.async.SingleResultCallback<T> errorHandlingCallback(com.mongodb.async.SingleResultCallback<T>)"], ["<T> com.mongodb.async.SingleResultCallback<T>", "com.mongodb.internal.async.ErrorHandlingResultCallback.errorHandlingCallback(com.mongodb.async.SingleResultCallback<T>, com.mongodb.diagnostics.logging.Logger)", "public static <T> com.mongodb.async.SingleResultCallback<T> errorHandlingCallback(com.mongodb.async.SingleResultCallback<T>, com.mongodb.diagnostics.logging.Logger)"], ["void", "com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.internal.authentication.NativeAuthenticationHelper.createAuthenticationHash(java.lang.String, char[])", "public static java.lang.String createAuthenticationHash(java.lang.String, char[])"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getAuthCommand(java.lang.String, char[], java.lang.String)", "public static org.bson.BsonDocument getAuthCommand(java.lang.String, char[], java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getAuthCommand(java.lang.String, java.lang.String, java.lang.String)", "public static org.bson.BsonDocument getAuthCommand(java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getNonceCommand()", "public static org.bson.BsonDocument getNonceCommand()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.hasNext()", "public boolean hasNext()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.next()", "public E next()"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.remove()", "public void remove()"], ["com.mongodb.internal.connection.ConcurrentLinkedDeque", "com.mongodb.internal.connection.ConcurrentLinkedDeque()", "public com.mongodb.internal.connection.ConcurrentLinkedDeque()"], ["com.mongodb.internal.connection.ConcurrentLinkedDeque", "com.mongodb.internal.connection.ConcurrentLinkedDeque(java.util.Collection<? extends E>)", "public com.mongodb.internal.connection.ConcurrentLinkedDeque(java.util.Collection<? extends E>)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addFirst(E)", "public void addFirst(E)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addLast(E)", "public void addLast(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offerFirst(E)", "public boolean offerFirst(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offerLast(E)", "public boolean offerLast(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peekFirst()", "public E peekFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peekLast()", "public E peekLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.getFirst()", "public E getFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.getLast()", "public E getLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pollFirst()", "public E pollFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pollLast()", "public E pollLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeFirst()", "public E removeFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeLast()", "public E removeLast()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offer(E)", "public boolean offer(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.add(E)", "public boolean add(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.poll()", "public E poll()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.remove()", "public E remove()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peek()", "public E peek()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.element()", "public E element()"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.push(E)", "public void push(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pop()", "public E pop()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeFirstOccurrence(java.lang.Object)", "public boolean removeFirstOccurrence(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeLastOccurrence(java.lang.Object)", "public boolean removeLastOccurrence(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.isEmpty()", "public boolean isEmpty()"], ["int", "com.mongodb.internal.connection.ConcurrentLinkedDeque.size()", "public int size()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.clear()", "public void clear()"], ["java.lang.Object[]", "com.mongodb.internal.connection.ConcurrentLinkedDeque.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.mongodb.internal.connection.ConcurrentLinkedDeque.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.util.Iterator<E>", "com.mongodb.internal.connection.ConcurrentLinkedDeque.iterator()", "public java.util.Iterator<E> iterator()"], ["java.util.Iterator<E>", "com.mongodb.internal.connection.ConcurrentLinkedDeque.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["com.mongodb.internal.connection.ConcurrentPool", "com.mongodb.internal.connection.ConcurrentPool(int, com.mongodb.internal.connection.ConcurrentPool$ItemFactory<T>)", "public com.mongodb.internal.connection.ConcurrentPool(int, com.mongodb.internal.connection.ConcurrentPool$ItemFactory<T>)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.release(T)", "public void release(T)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.release(T, boolean)", "public void release(T, boolean)"], ["T", "com.mongodb.internal.connection.ConcurrentPool.get()", "public T get()"], ["T", "com.mongodb.internal.connection.ConcurrentPool.get(long, java.util.concurrent.TimeUnit)", "public T get(long, java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.prune()", "public void prune()"], ["void", "com.mongodb.internal.connection.ConcurrentPool.ensureMinSize(int)", "public void ensureMinSize(int)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.close()", "public void close()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getMaxSize()", "public int getMaxSize()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getInUseCount()", "public int getInUseCount()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getAvailableCount()", "public int getAvailableCount()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getCount()", "public int getCount()"], ["java.lang.String", "com.mongodb.internal.connection.ConcurrentPool.toString()", "public java.lang.String toString()"], ["com.mongodb.internal.connection.IndexMap$HashBased", "com.mongodb.internal.connection.IndexMap$HashBased(int, int)", "public com.mongodb.internal.connection.IndexMap$HashBased(int, int)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap$HashBased.add(int, int)", "public com.mongodb.internal.connection.IndexMap add(int, int)"], ["int", "com.mongodb.internal.connection.IndexMap$HashBased.map(int)", "public int map(int)"], ["com.mongodb.internal.connection.IndexMap$RangeBased", "com.mongodb.internal.connection.IndexMap$RangeBased()", "public com.mongodb.internal.connection.IndexMap$RangeBased()"], ["com.mongodb.internal.connection.IndexMap$RangeBased", "com.mongodb.internal.connection.IndexMap$RangeBased(int, int)", "public com.mongodb.internal.connection.IndexMap$RangeBased(int, int)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap$RangeBased.add(int, int)", "public com.mongodb.internal.connection.IndexMap add(int, int)"], ["int", "com.mongodb.internal.connection.IndexMap$RangeBased.map(int)", "public int map(int)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap()", "public com.mongodb.internal.connection.IndexMap()"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap.create()", "public static com.mongodb.internal.connection.IndexMap create()"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap.create(int, int)", "public static com.mongodb.internal.connection.IndexMap create(int, int)"], ["java.nio.ByteBuffer", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.create()", "public java.nio.ByteBuffer create()"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.close(java.nio.ByteBuffer)", "public void close(java.nio.ByteBuffer)"], ["boolean", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.shouldPrune(java.nio.ByteBuffer)", "public boolean shouldPrune(java.nio.ByteBuffer)"], ["boolean", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.shouldPrune(java.lang.Object)", "public boolean shouldPrune(java.lang.Object)"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.close(java.lang.Object)", "public void close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.create()", "public java.lang.Object create()"], ["com.mongodb.internal.connection.PowerOfTwoBufferPool$PooledByteBufNIO", "com.mongodb.internal.connection.PowerOfTwoBufferPool$PooledByteBufNIO(com.mongodb.internal.connection.PowerOfTwoBufferPool, java.nio.ByteBuffer)", "public com.mongodb.internal.connection.PowerOfTwoBufferPool$PooledByteBufNIO(com.mongodb.internal.connection.PowerOfTwoBufferPool, java.nio.ByteBuffer)"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$PooledByteBufNIO.release()", "public void release()"], ["com.mongodb.internal.connection.PowerOfTwoBufferPool", "com.mongodb.internal.connection.PowerOfTwoBufferPool()", "public com.mongodb.internal.connection.PowerOfTwoBufferPool()"], ["com.mongodb.internal.connection.PowerOfTwoBufferPool", "com.mongodb.internal.connection.PowerOfTwoBufferPool(int)", "public com.mongodb.internal.connection.PowerOfTwoBufferPool(int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.PowerOfTwoBufferPool.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["javax.net.ssl.SSLParameters", "com.mongodb.internal.connection.SslHelper.enableHostNameVerification(javax.net.ssl.SSLParameters)", "public static javax.net.ssl.SSLParameters enableHostNameVerification(javax.net.ssl.SSLParameters)"], ["com.mongodb.internal.management.jmx.JMXMBeanServer", "com.mongodb.internal.management.jmx.JMXMBeanServer()", "public com.mongodb.internal.management.jmx.JMXMBeanServer()"], ["void", "com.mongodb.internal.management.jmx.JMXMBeanServer.registerMBean(java.lang.Object, java.lang.String)", "public void registerMBean(java.lang.Object, java.lang.String)"], ["void", "com.mongodb.internal.management.jmx.JMXMBeanServer.unregisterMBean(java.lang.String)", "public void unregisterMBean(java.lang.String)"], ["com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator()", "public com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.MappedFieldNameValidator", "com.mongodb.internal.validator.MappedFieldNameValidator(org.bson.FieldNameValidator, java.util.Map<java.lang.String, org.bson.FieldNameValidator>)", "public com.mongodb.internal.validator.MappedFieldNameValidator(org.bson.FieldNameValidator, java.util.Map<java.lang.String, org.bson.FieldNameValidator>)"], ["boolean", "com.mongodb.internal.validator.MappedFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.MappedFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.NoOpFieldNameValidator", "com.mongodb.internal.validator.NoOpFieldNameValidator()", "public com.mongodb.internal.validator.NoOpFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.NoOpFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.NoOpFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.UpdateFieldNameValidator", "com.mongodb.internal.validator.UpdateFieldNameValidator()", "public com.mongodb.internal.validator.UpdateFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.UpdateFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.UpdateFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.management.ConnectionPoolStatistics", "com.mongodb.management.ConnectionPoolStatistics(com.mongodb.event.ConnectionPoolOpenedEvent)", "public com.mongodb.management.ConnectionPoolStatistics(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["java.lang.String", "com.mongodb.management.ConnectionPoolStatistics.getHost()", "public java.lang.String getHost()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getPort()", "public int getPort()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getMinSize()", "public int getMinSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getMaxSize()", "public int getMaxSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getSize()", "public int getSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getCheckedOutCount()", "public int getCheckedOutCount()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getWaitQueueSize()", "public int getWaitQueueSize()"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionCheckedOut(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionCheckedIn(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionAdded(com.mongodb.event.ConnectionEvent)", "public void connectionAdded(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionRemoved(com.mongodb.event.ConnectionEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["com.mongodb.management.JMXConnectionPoolListener", "com.mongodb.management.JMXConnectionPoolListener()", "public com.mongodb.management.JMXConnectionPoolListener()"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)", "public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionPoolClosed(com.mongodb.event.ConnectionPoolEvent)", "public void connectionPoolClosed(com.mongodb.event.ConnectionPoolEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionCheckedOut(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionCheckedIn(com.mongodb.event.ConnectionEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionAdded(com.mongodb.event.ConnectionEvent)", "public void connectionAdded(com.mongodb.event.ConnectionEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionRemoved(com.mongodb.event.ConnectionEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionEvent)"], ["com.mongodb.management.MBeanServer", "com.mongodb.management.MBeanServerFactory.getMBeanServer()", "public static com.mongodb.management.MBeanServer getMBeanServer()"], ["com.mongodb.management.NullMBeanServer", "com.mongodb.management.NullMBeanServer()", "public com.mongodb.management.NullMBeanServer()"], ["void", "com.mongodb.management.NullMBeanServer.unregisterMBean(java.lang.String)", "public void unregisterMBean(java.lang.String)"], ["void", "com.mongodb.management.NullMBeanServer.registerMBean(java.lang.Object, java.lang.String)", "public void registerMBean(java.lang.Object, java.lang.String)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>)", "public com.mongodb.operation.AggregateExplainOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.allowDiskUse(java.lang.Boolean)", "public com.mongodb.operation.AggregateExplainOperation allowDiskUse(java.lang.Boolean)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.AggregateExplainOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateExplainOperation.execute(com.mongodb.binding.ReadBinding)", "public org.bson.BsonDocument execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AggregateExplainOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.AggregateExplainOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.AggregateOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.AggregateOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.AggregateOperation$3.apply(org.bson.BsonDocument)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.AggregateOperation$4.apply(org.bson.BsonDocument)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.AggregateOperation", "com.mongodb.operation.AggregateOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.AggregateOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.operation.AggregateOperation.getPipeline()", "public java.util.List<org.bson.BsonDocument> getPipeline()"], ["java.lang.Boolean", "com.mongodb.operation.AggregateOperation.getAllowDiskUse()", "public java.lang.Boolean getAllowDiskUse()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.allowDiskUse(java.lang.Boolean)", "public com.mongodb.operation.AggregateOperation<T> allowDiskUse(java.lang.Boolean)"], ["java.lang.Integer", "com.mongodb.operation.AggregateOperation.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.batchSize(java.lang.Integer)", "public com.mongodb.operation.AggregateOperation<T> batchSize(java.lang.Integer)"], ["long", "com.mongodb.operation.AggregateOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.AggregateOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.operation.AggregateOperation.getUseCursor()", "public java.lang.Boolean getUseCursor()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.useCursor(java.lang.Boolean)", "public com.mongodb.operation.AggregateOperation<T> useCursor(java.lang.Boolean)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.AggregateOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AggregateOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.AggregateOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.AggregateOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>)", "public com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.operation.AggregateToCollectionOperation.getPipeline()", "public java.util.List<org.bson.BsonDocument> getPipeline()"], ["java.lang.Boolean", "com.mongodb.operation.AggregateToCollectionOperation.getAllowDiskUse()", "public java.lang.Boolean getAllowDiskUse()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.allowDiskUse(java.lang.Boolean)", "public com.mongodb.operation.AggregateToCollectionOperation allowDiskUse(java.lang.Boolean)"], ["long", "com.mongodb.operation.AggregateToCollectionOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.AggregateToCollectionOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Void", "com.mongodb.operation.AggregateToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.AggregateToCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.AggregateToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback", "com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback(com.mongodb.connection.AsyncConnection, com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback(com.mongodb.connection.AsyncConnection, com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.close()", "public void close()"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.AsyncQueryBatchCursor.getBatchSize()", "public int getBatchSize()"], ["boolean", "com.mongodb.operation.AsyncQueryBatchCursor.isClosed()", "public boolean isClosed()"], ["com.mongodb.WriteConcernResult", "com.mongodb.operation.BaseWriteOperation$1.call(com.mongodb.connection.Connection)", "public com.mongodb.WriteConcernResult call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.BaseWriteOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.BaseWriteOperation$2$1.onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)", "public void onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.BaseWriteOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.BaseWriteOperation$2$2.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.BaseWriteOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.BaseWriteOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BaseWriteOperation", "com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)", "public com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.BaseWriteOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.BaseWriteOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.operation.BaseWriteOperation.isOrdered()", "public boolean isOrdered()"], ["com.mongodb.WriteConcernResult", "com.mongodb.operation.BaseWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public com.mongodb.WriteConcernResult execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.BaseWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.operation.BaseWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.BsonArrayWrapper", "com.mongodb.operation.BsonArrayWrapper(java.util.List<T>)", "public com.mongodb.operation.BsonArrayWrapper(java.util.List<T>)"], ["java.util.List<T>", "com.mongodb.operation.BsonArrayWrapper.getWrappedArray()", "public java.util.List<T> getWrappedArray()"], ["java.util.List<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.getValues()", "public java.util.List<org.bson.BsonValue> getValues()"], ["int", "com.mongodb.operation.BsonArrayWrapper.size()", "public int size()"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.iterator()", "public java.util.Iterator<org.bson.BsonValue> iterator()"], ["java.lang.Object[]", "com.mongodb.operation.BsonArrayWrapper.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.mongodb.operation.BsonArrayWrapper.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.add(org.bson.BsonValue)", "public boolean add(org.bson.BsonValue)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.addAll(java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.addAll(int, java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(int, java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "com.mongodb.operation.BsonArrayWrapper.clear()", "public void clear()"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.get(int)", "public org.bson.BsonValue get(int)"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.set(int, org.bson.BsonValue)", "public org.bson.BsonValue set(int, org.bson.BsonValue)"], ["void", "com.mongodb.operation.BsonArrayWrapper.add(int, org.bson.BsonValue)", "public void add(int, org.bson.BsonValue)"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.remove(int)", "public org.bson.BsonValue remove(int)"], ["int", "com.mongodb.operation.BsonArrayWrapper.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.mongodb.operation.BsonArrayWrapper.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.listIterator()", "public java.util.ListIterator<org.bson.BsonValue> listIterator()"], ["java.util.ListIterator<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.listIterator(int)", "public java.util.ListIterator<org.bson.BsonValue> listIterator(int)"], ["java.util.List<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.subList(int, int)", "public java.util.List<org.bson.BsonValue> subList(int, int)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.operation.BsonArrayWrapper.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.operation.BsonArrayWrapper.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.remove(int)", "public java.lang.Object remove(int)"], ["void", "com.mongodb.operation.BsonArrayWrapper.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.get(int)", "public java.lang.Object get(int)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["com.mongodb.operation.BsonArrayWriter$Context", "com.mongodb.operation.BsonArrayWriter$Context(com.mongodb.operation.BsonArrayWriter, org.bson.BsonValue, org.bson.BsonContextType, com.mongodb.operation.BsonArrayWriter$Context)", "public com.mongodb.operation.BsonArrayWriter$Context(com.mongodb.operation.BsonArrayWriter, org.bson.BsonValue, org.bson.BsonContextType, com.mongodb.operation.BsonArrayWriter$Context)"], ["com.mongodb.operation.BsonArrayWriter$Context", "com.mongodb.operation.BsonArrayWriter$Context(com.mongodb.operation.BsonArrayWriter)", "public com.mongodb.operation.BsonArrayWriter$Context(com.mongodb.operation.BsonArrayWriter)"], ["com.mongodb.operation.BsonArrayWriter", "com.mongodb.operation.BsonArrayWriter(org.bson.BsonArray)", "public com.mongodb.operation.BsonArrayWriter(org.bson.BsonArray)"], ["org.bson.BsonArray", "com.mongodb.operation.BsonArrayWriter.getArray()", "public org.bson.BsonArray getArray()"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteNull()", "public void doWriteNull()"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "com.mongodb.operation.BsonArrayWriter.doWriteUndefined()", "public void doWriteUndefined()"], ["void", "com.mongodb.operation.BsonArrayWriter.flush()", "public void flush()"], ["void", "com.mongodb.operation.CommandOperationHelper$1.onResult(D, java.lang.Throwable)", "public void onResult(D, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1$1.onResult(D, java.lang.Throwable)", "public void onResult(D, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, org.bson.codecs.Decoder<D>, com.mongodb.ReadPreference, com.mongodb.Function<D, R>, com.mongodb.async.SingleResultCallback<R>)", "public com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, org.bson.codecs.Decoder<D>, com.mongodb.ReadPreference, com.mongodb.Function<D, R>, com.mongodb.async.SingleResultCallback<R>)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.CommandReadOperation", "com.mongodb.operation.CommandReadOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.CommandReadOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["T", "com.mongodb.operation.CommandReadOperation.execute(com.mongodb.binding.ReadBinding)", "public T execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CommandReadOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<T>)"], ["org.bson.BsonArray", "com.mongodb.operation.CommandResultArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonArray decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "com.mongodb.operation.CommandResultArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.operation.CommandResultCodecProvider", "com.mongodb.operation.CommandResultCodecProvider(org.bson.codecs.Decoder<P>, java.lang.String)", "public com.mongodb.operation.CommandResultCodecProvider(org.bson.codecs.Decoder<P>, java.lang.String)"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.operation.CommandResultCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.operation.CommandResultCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.operation.CommandResultCodecProvider.hashCode()", "public int hashCode()"], ["com.mongodb.operation.CommandWriteOperation", "com.mongodb.operation.CommandWriteOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.CommandWriteOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["T", "com.mongodb.operation.CommandWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public T execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommandWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["java.lang.Long", "com.mongodb.operation.CountOperation$1.apply(org.bson.BsonDocument)", "public java.lang.Long apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.CountOperation$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation(com.mongodb.MongoNamespace)", "public com.mongodb.operation.CountOperation(com.mongodb.MongoNamespace)"], ["org.bson.BsonDocument", "com.mongodb.operation.CountOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.CountOperation filter(org.bson.BsonDocument)"], ["org.bson.BsonValue", "com.mongodb.operation.CountOperation.getHint()", "public org.bson.BsonValue getHint()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.hint(org.bson.BsonValue)", "public com.mongodb.operation.CountOperation hint(org.bson.BsonValue)"], ["long", "com.mongodb.operation.CountOperation.getLimit()", "public long getLimit()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.limit(long)", "public com.mongodb.operation.CountOperation limit(long)"], ["long", "com.mongodb.operation.CountOperation.getSkip()", "public long getSkip()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.skip(long)", "public com.mongodb.operation.CountOperation skip(long)"], ["long", "com.mongodb.operation.CountOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.CountOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Long", "com.mongodb.operation.CountOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Long execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CountOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Long>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Long>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.CountOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.CountOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.CountOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String)", "public com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String)"], ["java.lang.String", "com.mongodb.operation.CreateCollectionOperation.getCollectionName()", "public java.lang.String getCollectionName()"], ["boolean", "com.mongodb.operation.CreateCollectionOperation.isAutoIndex()", "public boolean isAutoIndex()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.autoIndex(boolean)", "public com.mongodb.operation.CreateCollectionOperation autoIndex(boolean)"], ["long", "com.mongodb.operation.CreateCollectionOperation.getMaxDocuments()", "public long getMaxDocuments()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.maxDocuments(long)", "public com.mongodb.operation.CreateCollectionOperation maxDocuments(long)"], ["boolean", "com.mongodb.operation.CreateCollectionOperation.isCapped()", "public boolean isCapped()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.capped(boolean)", "public com.mongodb.operation.CreateCollectionOperation capped(boolean)"], ["long", "com.mongodb.operation.CreateCollectionOperation.getSizeInBytes()", "public long getSizeInBytes()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.sizeInBytes(long)", "public com.mongodb.operation.CreateCollectionOperation sizeInBytes(long)"], ["java.lang.Boolean", "com.mongodb.operation.CreateCollectionOperation.isUsePowerOf2Sizes()", "public java.lang.Boolean isUsePowerOf2Sizes()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.usePowerOf2Sizes(java.lang.Boolean)", "public com.mongodb.operation.CreateCollectionOperation usePowerOf2Sizes(java.lang.Boolean)"], ["org.bson.BsonDocument", "com.mongodb.operation.CreateCollectionOperation.getStorageEngineOptions()", "public org.bson.BsonDocument getStorageEngineOptions()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.storageEngineOptions(org.bson.BsonDocument)", "public com.mongodb.operation.CreateCollectionOperation storageEngineOptions(org.bson.BsonDocument)"], ["java.lang.Void", "com.mongodb.operation.CreateCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Void", "com.mongodb.operation.CreateIndexesOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateIndexesOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$2.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.CreateIndexesOperation", "com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>)", "public com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>)"], ["java.util.List<com.mongodb.bulk.IndexRequest>", "com.mongodb.operation.CreateIndexesOperation.getRequests()", "public java.util.List<com.mongodb.bulk.IndexRequest> getRequests()"], ["java.util.List<java.lang.String>", "com.mongodb.operation.CreateIndexesOperation.getIndexNames()", "public java.util.List<java.lang.String> getIndexNames()"], ["java.lang.Void", "com.mongodb.operation.CreateIndexesOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateIndexesOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateIndexesOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Void", "com.mongodb.operation.CreateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.CreateUserOperation$2$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateUserOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.CreateUserOperation", "com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean)", "public com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean)"], ["com.mongodb.MongoCredential", "com.mongodb.operation.CreateUserOperation.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["boolean", "com.mongodb.operation.CreateUserOperation.isReadOnly()", "public boolean isReadOnly()"], ["java.lang.Void", "com.mongodb.operation.CreateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.DeleteOperation", "com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)", "public com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["java.util.List<com.mongodb.bulk.DeleteRequest>", "com.mongodb.operation.DeleteOperation.getDeleteRequests()", "public java.util.List<com.mongodb.bulk.DeleteRequest> getDeleteRequests()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.DistinctOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.DistinctOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.DistinctOperation$3.apply(org.bson.BsonDocument)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.DistinctOperation$4.apply(org.bson.BsonDocument)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.DistinctOperation", "com.mongodb.operation.DistinctOperation(com.mongodb.MongoNamespace, java.lang.String, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.DistinctOperation(com.mongodb.MongoNamespace, java.lang.String, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.DistinctOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.DistinctOperation<T>", "com.mongodb.operation.DistinctOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.DistinctOperation<T> filter(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.DistinctOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.DistinctOperation<T>", "com.mongodb.operation.DistinctOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.DistinctOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.DistinctOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.DistinctOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.DropCollectionOperation$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropCollectionOperation$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.DropCollectionOperation", "com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace)", "public com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace)"], ["java.lang.Void", "com.mongodb.operation.DropCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.DropDatabaseOperation", "com.mongodb.operation.DropDatabaseOperation(java.lang.String)", "public com.mongodb.operation.DropDatabaseOperation(java.lang.String)"], ["java.lang.Void", "com.mongodb.operation.DropDatabaseOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropDatabaseOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropDatabaseOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropIndexOperation$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropIndexOperation$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String)", "public com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument)", "public com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument)"], ["java.lang.Void", "com.mongodb.operation.DropIndexOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropIndexOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropIndexOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Void", "com.mongodb.operation.DropUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.DropUserOperation$2$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropUserOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DropUserOperation", "com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String)", "public com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String)"], ["java.lang.Void", "com.mongodb.operation.DropUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.FindAndDeleteOperation", "com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindAndDeleteOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.FindAndDeleteOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndDeleteOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndDeleteOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindAndDeleteOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindAndDeleteOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndDeleteOperation<T> sort(org.bson.BsonDocument)"], ["T", "com.mongodb.operation.FindAndDeleteOperation.execute(com.mongodb.binding.WriteBinding)", "public T execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.FindAndDeleteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["T", "com.mongodb.operation.FindAndModifyHelper$1.apply(org.bson.BsonDocument)", "public T apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.FindAndModifyHelper$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.FindAndReplaceOperation", "com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindAndReplaceOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.FindAndReplaceOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getReplacement()", "public org.bson.BsonDocument getReplacement()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindAndReplaceOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindAndReplaceOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation<T> sort(org.bson.BsonDocument)"], ["boolean", "com.mongodb.operation.FindAndReplaceOperation.isReturnOriginal()", "public boolean isReturnOriginal()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.returnOriginal(boolean)", "public com.mongodb.operation.FindAndReplaceOperation<T> returnOriginal(boolean)"], ["boolean", "com.mongodb.operation.FindAndReplaceOperation.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.upsert(boolean)", "public com.mongodb.operation.FindAndReplaceOperation<T> upsert(boolean)"], ["T", "com.mongodb.operation.FindAndReplaceOperation.execute(com.mongodb.binding.WriteBinding)", "public T execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.FindAndReplaceOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindAndUpdateOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.FindAndUpdateOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getUpdate()", "public org.bson.BsonDocument getUpdate()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindAndUpdateOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindAndUpdateOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation<T> sort(org.bson.BsonDocument)"], ["boolean", "com.mongodb.operation.FindAndUpdateOperation.isReturnOriginal()", "public boolean isReturnOriginal()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.returnOriginal(boolean)", "public com.mongodb.operation.FindAndUpdateOperation<T> returnOriginal(boolean)"], ["boolean", "com.mongodb.operation.FindAndUpdateOperation.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.upsert(boolean)", "public com.mongodb.operation.FindAndUpdateOperation<T> upsert(boolean)"], ["T", "com.mongodb.operation.FindAndUpdateOperation.execute(com.mongodb.binding.WriteBinding)", "public T execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.FindAndUpdateOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.FindOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.FindOperation$2$1.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation$3.execute(com.mongodb.binding.ReadBinding)", "public org.bson.BsonDocument execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$3.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.FindOperation$4$1$1.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$4$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$4$1.onResult(com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$4$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$4.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)"], ["com.mongodb.operation.FindOperation", "com.mongodb.operation.FindOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.FindOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.FindOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> filter(org.bson.BsonDocument)"], ["int", "com.mongodb.operation.FindOperation.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.batchSize(int)", "public com.mongodb.operation.FindOperation<T> batchSize(int)"], ["int", "com.mongodb.operation.FindOperation.getLimit()", "public int getLimit()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.limit(int)", "public com.mongodb.operation.FindOperation<T> limit(int)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getModifiers()", "public org.bson.BsonDocument getModifiers()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.modifiers(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> modifiers(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.operation.FindOperation.getSkip()", "public int getSkip()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.skip(int)", "public com.mongodb.operation.FindOperation<T> skip(int)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> sort(org.bson.BsonDocument)"], ["com.mongodb.CursorType", "com.mongodb.operation.FindOperation.getCursorType()", "public com.mongodb.CursorType getCursorType()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.cursorType(com.mongodb.CursorType)", "public com.mongodb.operation.FindOperation<T> cursorType(com.mongodb.CursorType)"], ["boolean", "com.mongodb.operation.FindOperation.isSlaveOk()", "public boolean isSlaveOk()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.slaveOk(boolean)", "public com.mongodb.operation.FindOperation<T> slaveOk(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.oplogReplay(boolean)", "public com.mongodb.operation.FindOperation<T> oplogReplay(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.noCursorTimeout(boolean)", "public com.mongodb.operation.FindOperation<T> noCursorTimeout(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isPartial()", "public boolean isPartial()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.partial(boolean)", "public com.mongodb.operation.FindOperation<T> partial(boolean)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.FindOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.FindOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.FindOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.FindOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.FindOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.FindOperationHelper$QueryResultToListCallback$1.onResult(java.util.List<T>, java.lang.Throwable)", "public void onResult(java.util.List<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperationHelper$QueryResultToListCallback$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.FindOperationHelper$QueryResultToListCallback", "com.mongodb.operation.FindOperationHelper$QueryResultToListCallback(org.bson.codecs.Decoder<T>, com.mongodb.binding.AsyncConnectionSource, com.mongodb.Function<T, V>, com.mongodb.async.SingleResultCallback<java.util.List<V>>)", "public com.mongodb.operation.FindOperationHelper$QueryResultToListCallback(org.bson.codecs.Decoder<T>, com.mongodb.binding.AsyncConnectionSource, com.mongodb.Function<T, V>, com.mongodb.async.SingleResultCallback<java.util.List<V>>)"], ["void", "com.mongodb.operation.FindOperationHelper$QueryResultToListCallback.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperationHelper$QueryResultToListCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.GroupOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.GroupOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.GroupOperation$3.apply(org.bson.BsonDocument)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.GroupOperation$4.apply(org.bson.BsonDocument)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.GroupOperation", "com.mongodb.operation.GroupOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.GroupOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getKey()", "public org.bson.BsonDocument getKey()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.key(org.bson.BsonDocument)", "public com.mongodb.operation.GroupOperation<T> key(org.bson.BsonDocument)"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getKeyFunction()", "public org.bson.BsonJavaScript getKeyFunction()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.keyFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.GroupOperation<T> keyFunction(org.bson.BsonJavaScript)"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getInitial()", "public org.bson.BsonDocument getInitial()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getReduceFunction()", "public org.bson.BsonJavaScript getReduceFunction()"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.GroupOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getFinalizeFunction()", "public org.bson.BsonJavaScript getFinalizeFunction()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.finalizeFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.GroupOperation<T> finalizeFunction(org.bson.BsonJavaScript)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.GroupOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.GroupOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.InsertOperation", "com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)", "public com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["java.util.List<com.mongodb.bulk.InsertRequest>", "com.mongodb.operation.InsertOperation.getInsertRequests()", "public java.util.List<com.mongodb.bulk.InsertRequest> getInsertRequests()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$1.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$2.onResult(com.mongodb.connection.QueryResult<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation$3.apply(org.bson.BsonDocument)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation$4.apply(org.bson.BsonDocument)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$1.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.getBatchSize()", "public int getBatchSize()"], ["boolean", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.isClosed()", "public boolean isClosed()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.close()", "public void close()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.remove()", "public void remove()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.close()", "public void close()"], ["boolean", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.hasNext()", "public boolean hasNext()"], ["java.util.List<T>", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.next()", "public java.util.List<T> next()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getBatchSize()", "public int getBatchSize()"], ["java.util.List<T>", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.tryNext()", "public java.util.List<T> tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.next()", "public java.lang.Object next()"], ["com.mongodb.operation.ListCollectionsOperation", "com.mongodb.operation.ListCollectionsOperation(java.lang.String, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ListCollectionsOperation(java.lang.String, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListCollectionsOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.ListCollectionsOperation<T> filter(org.bson.BsonDocument)"], ["java.lang.Integer", "com.mongodb.operation.ListCollectionsOperation.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.batchSize(int)", "public com.mongodb.operation.ListCollectionsOperation<T> batchSize(int)"], ["long", "com.mongodb.operation.ListCollectionsOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.ListCollectionsOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListCollectionsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListDatabasesOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ListDatabasesOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListDatabasesOperation$3.apply(org.bson.BsonDocument)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.ListDatabasesOperation$4.apply(org.bson.BsonDocument)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.ListDatabasesOperation", "com.mongodb.operation.ListDatabasesOperation(org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ListDatabasesOperation(org.bson.codecs.Decoder<T>)"], ["long", "com.mongodb.operation.ListDatabasesOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListDatabasesOperation<T>", "com.mongodb.operation.ListDatabasesOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.ListDatabasesOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListDatabasesOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListDatabasesOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListIndexesOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$1.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$2.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListIndexesOperation$3.apply(org.bson.BsonDocument)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.ListIndexesOperation$4.apply(org.bson.BsonDocument)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.ListIndexesOperation", "com.mongodb.operation.ListIndexesOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ListIndexesOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["java.lang.Integer", "com.mongodb.operation.ListIndexesOperation.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.operation.ListIndexesOperation<T>", "com.mongodb.operation.ListIndexesOperation.batchSize(int)", "public com.mongodb.operation.ListIndexesOperation<T> batchSize(int)"], ["long", "com.mongodb.operation.ListIndexesOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListIndexesOperation<T>", "com.mongodb.operation.ListIndexesOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.ListIndexesOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListIndexesOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListIndexesOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceInlineResultsAsyncCursor.getStatistics()", "public com.mongodb.operation.MapReduceStatistics getStatistics()"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceInlineResultsCursor.getStatistics()", "public com.mongodb.operation.MapReduceStatistics getStatistics()"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceStatistics(int, int, int, int)", "public com.mongodb.operation.MapReduceStatistics(int, int, int, int)"], ["int", "com.mongodb.operation.MapReduceStatistics.getInputCount()", "public int getInputCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getOutputCount()", "public int getOutputCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getEmitCount()", "public int getEmitCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getDuration()", "public int getDuration()"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation$1.apply(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceStatistics apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String)", "public com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String)"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getMapFunction()", "public org.bson.BsonJavaScript getMapFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getReduceFunction()", "public org.bson.BsonJavaScript getReduceFunction()"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getCollectionName()", "public java.lang.String getCollectionName()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getFinalizeFunction()", "public org.bson.BsonJavaScript getFinalizeFunction()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.finalizeFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.MapReduceToCollectionOperation finalizeFunction(org.bson.BsonJavaScript)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getScope()", "public org.bson.BsonDocument getScope()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.scope(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceToCollectionOperation scope(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceToCollectionOperation filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceToCollectionOperation sort(org.bson.BsonDocument)"], ["int", "com.mongodb.operation.MapReduceToCollectionOperation.getLimit()", "public int getLimit()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.limit(int)", "public com.mongodb.operation.MapReduceToCollectionOperation limit(int)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isJsMode()", "public boolean isJsMode()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.jsMode(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation jsMode(boolean)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isVerbose()", "public boolean isVerbose()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.verbose(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation verbose(boolean)"], ["long", "com.mongodb.operation.MapReduceToCollectionOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.MapReduceToCollectionOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getAction()", "public java.lang.String getAction()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.action(java.lang.String)", "public com.mongodb.operation.MapReduceToCollectionOperation action(java.lang.String)"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.databaseName(java.lang.String)", "public com.mongodb.operation.MapReduceToCollectionOperation databaseName(java.lang.String)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isSharded()", "public boolean isSharded()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.sharded(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation sharded(boolean)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isNonAtomic()", "public boolean isNonAtomic()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.nonAtomic(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation nonAtomic(boolean)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public com.mongodb.operation.MapReduceStatistics execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.MapReduceToCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceStatistics>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceStatistics>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceToCollectionOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceToCollectionOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.MapReduceBatchCursor<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.MapReduceBatchCursor<T> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.MapReduceWithInlineResultsOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.MapReduceBatchCursor<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation$3.apply(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.MapReduceAsyncBatchCursor<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation$4.apply(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceAsyncBatchCursor<T> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation", "com.mongodb.operation.MapReduceWithInlineResultsOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getMapFunction()", "public org.bson.BsonJavaScript getMapFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getReduceFunction()", "public org.bson.BsonJavaScript getReduceFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getFinalizeFunction()", "public org.bson.BsonJavaScript getFinalizeFunction()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.finalizeFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> finalizeFunction(org.bson.BsonJavaScript)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getScope()", "public org.bson.BsonDocument getScope()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.scope(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> scope(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> sort(org.bson.BsonDocument)"], ["int", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getLimit()", "public int getLimit()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.limit(int)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> limit(int)"], ["boolean", "com.mongodb.operation.MapReduceWithInlineResultsOperation.isJsMode()", "public boolean isJsMode()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.jsMode(boolean)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> jsMode(boolean)"], ["boolean", "com.mongodb.operation.MapReduceWithInlineResultsOperation.isVerbose()", "public boolean isVerbose()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.verbose(boolean)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> verbose(boolean)"], ["long", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.MapReduceBatchCursor<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.MapReduceBatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.MapReduceWithInlineResultsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceAsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceAsyncBatchCursor<T>>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation$1.call(com.mongodb.connection.Connection)", "public com.mongodb.bulk.BulkWriteResult call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$3.onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)", "public void onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["boolean", "com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator$1.hasNext()", "public boolean hasNext()"], ["com.mongodb.operation.MixedBulkWriteOperation$Run", "com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator$1.next()", "public com.mongodb.operation.MixedBulkWriteOperation$Run next()"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator$1.remove()", "public void remove()"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator$1.next()", "public java.lang.Object next()"], ["com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator", "com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator(com.mongodb.operation.MixedBulkWriteOperation, com.mongodb.connection.ConnectionDescription)", "public com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator(com.mongodb.operation.MixedBulkWriteOperation, com.mongodb.connection.ConnectionDescription)"], ["java.util.Iterator<com.mongodb.operation.MixedBulkWriteOperation$Run>", "com.mongodb.operation.MixedBulkWriteOperation$OrderedRunGenerator.iterator()", "public java.util.Iterator<com.mongodb.operation.MixedBulkWriteOperation$Run> iterator()"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$Run$AsyncRunExecutor$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$Run$AsyncRunExecutor$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["int", "com.mongodb.operation.MixedBulkWriteOperation$Run.size()", "public int size()"], ["boolean", "com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator$1.hasNext()", "public boolean hasNext()"], ["com.mongodb.operation.MixedBulkWriteOperation$Run", "com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator$1.next()", "public com.mongodb.operation.MixedBulkWriteOperation$Run next()"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator$1.remove()", "public void remove()"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator$1.next()", "public java.lang.Object next()"], ["com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator", "com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator(com.mongodb.operation.MixedBulkWriteOperation, com.mongodb.connection.ConnectionDescription)", "public com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator(com.mongodb.operation.MixedBulkWriteOperation, com.mongodb.connection.ConnectionDescription)"], ["java.util.Iterator<com.mongodb.operation.MixedBulkWriteOperation$Run>", "com.mongodb.operation.MixedBulkWriteOperation$UnorderedRunGenerator.iterator()", "public java.util.Iterator<com.mongodb.operation.MixedBulkWriteOperation$Run> iterator()"], ["com.mongodb.operation.MixedBulkWriteOperation", "com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern)", "public com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.MixedBulkWriteOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.MixedBulkWriteOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.operation.MixedBulkWriteOperation.isOrdered()", "public boolean isOrdered()"], ["java.util.List<? extends com.mongodb.bulk.WriteRequest>", "com.mongodb.operation.MixedBulkWriteOperation.getWriteRequests()", "public java.util.List<? extends com.mongodb.bulk.WriteRequest> getWriteRequests()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public com.mongodb.bulk.BulkWriteResult execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.OperationHelper$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$2.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback(com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSource)", "public com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback(com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSource)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback(com.mongodb.operation.OperationHelper$AsyncCallableWithConnection)", "public com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback(com.mongodb.operation.OperationHelper$AsyncCallableWithConnection)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$ConnectionReleasingWrappedCallback.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["T", "com.mongodb.operation.OperationHelper$IdentityTransformer.apply(T)", "public T apply(T)"], ["java.lang.Void", "com.mongodb.operation.OperationHelper$VoidTransformer.apply(T)", "public java.lang.Void apply(T)"], ["java.lang.Object", "com.mongodb.operation.OperationHelper$VoidTransformer.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.OrderBy[]", "com.mongodb.operation.OrderBy.values()", "public static com.mongodb.operation.OrderBy[] values()"], ["com.mongodb.operation.OrderBy", "com.mongodb.operation.OrderBy.valueOf(java.lang.String)", "public static com.mongodb.operation.OrderBy valueOf(java.lang.String)"], ["int", "com.mongodb.operation.OrderBy.getIntRepresentation()", "public int getIntRepresentation()"], ["com.mongodb.operation.OrderBy", "com.mongodb.operation.OrderBy.fromInt(int)", "public static com.mongodb.operation.OrderBy fromInt(int)"], ["java.util.List<com.mongodb.operation.BatchCursor<T>>", "com.mongodb.operation.ParallelCollectionScanOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.util.List<com.mongodb.operation.BatchCursor<T>> call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ParallelCollectionScanOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.util.List<com.mongodb.operation.BatchCursor<T>>", "com.mongodb.operation.ParallelCollectionScanOperation$3.apply(org.bson.BsonDocument)", "public java.util.List<com.mongodb.operation.BatchCursor<T>> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.List<com.mongodb.async.AsyncBatchCursor<T>>", "com.mongodb.operation.ParallelCollectionScanOperation$4.apply(org.bson.BsonDocument)", "public java.util.List<com.mongodb.async.AsyncBatchCursor<T>> apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.ParallelCollectionScanOperation", "com.mongodb.operation.ParallelCollectionScanOperation(com.mongodb.MongoNamespace, int, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ParallelCollectionScanOperation(com.mongodb.MongoNamespace, int, org.bson.codecs.Decoder<T>)"], ["int", "com.mongodb.operation.ParallelCollectionScanOperation.getNumCursors()", "public int getNumCursors()"], ["int", "com.mongodb.operation.ParallelCollectionScanOperation.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.operation.ParallelCollectionScanOperation<T>", "com.mongodb.operation.ParallelCollectionScanOperation.batchSize(int)", "public com.mongodb.operation.ParallelCollectionScanOperation<T> batchSize(int)"], ["java.util.List<com.mongodb.operation.BatchCursor<T>>", "com.mongodb.operation.ParallelCollectionScanOperation.execute(com.mongodb.binding.ReadBinding)", "public java.util.List<com.mongodb.operation.BatchCursor<T>> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ParallelCollectionScanOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.util.List<com.mongodb.async.AsyncBatchCursor<T>>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.util.List<com.mongodb.async.AsyncBatchCursor<T>>>)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["boolean", "com.mongodb.operation.QueryBatchCursor.hasNext()", "public boolean hasNext()"], ["java.util.List<T>", "com.mongodb.operation.QueryBatchCursor.next()", "public java.util.List<T> next()"], ["void", "com.mongodb.operation.QueryBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.QueryBatchCursor.getBatchSize()", "public int getBatchSize()"], ["void", "com.mongodb.operation.QueryBatchCursor.remove()", "public void remove()"], ["void", "com.mongodb.operation.QueryBatchCursor.close()", "public void close()"], ["java.util.List<T>", "com.mongodb.operation.QueryBatchCursor.tryNext()", "public java.util.List<T> tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.QueryBatchCursor.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.QueryBatchCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["java.lang.Object", "com.mongodb.operation.QueryBatchCursor.next()", "public java.lang.Object next()"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace)", "public com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace)"], ["boolean", "com.mongodb.operation.RenameCollectionOperation.isDropTarget()", "public boolean isDropTarget()"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation.dropTarget(boolean)", "public com.mongodb.operation.RenameCollectionOperation dropTarget(boolean)"], ["java.lang.Void", "com.mongodb.operation.RenameCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.RenameCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.RenameCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.UpdateOperation", "com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)", "public com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["java.util.List<com.mongodb.bulk.UpdateRequest>", "com.mongodb.operation.UpdateOperation.getUpdateRequests()", "public java.util.List<com.mongodb.bulk.UpdateRequest> getUpdateRequests()"], ["java.lang.Void", "com.mongodb.operation.UpdateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.UpdateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.UpdateUserOperation$2$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.UpdateUserOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.UpdateUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.UpdateUserOperation", "com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean)", "public com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean)"], ["com.mongodb.MongoCredential", "com.mongodb.operation.UpdateUserOperation.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["boolean", "com.mongodb.operation.UpdateUserOperation.isReadOnly()", "public boolean isReadOnly()"], ["java.lang.Void", "com.mongodb.operation.UpdateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.UpdateUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.UpdateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Boolean call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.UserExistsOperation$2$1.onResult(com.mongodb.connection.QueryResult<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.UserExistsOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.UserExistsOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$3.apply(org.bson.BsonDocument)", "public java.lang.Boolean apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$4.apply(com.mongodb.connection.QueryResult<org.bson.BsonDocument>)", "public java.lang.Boolean apply(com.mongodb.connection.QueryResult<org.bson.BsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.UserExistsOperation", "com.mongodb.operation.UserExistsOperation(java.lang.String, java.lang.String)", "public com.mongodb.operation.UserExistsOperation(java.lang.String, java.lang.String)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Boolean execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.UserExistsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Boolean>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Boolean>)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.selector.CompositeServerSelector", "com.mongodb.selector.CompositeServerSelector(java.util.List<? extends com.mongodb.selector.ServerSelector>)", "public com.mongodb.selector.CompositeServerSelector(java.util.List<? extends com.mongodb.selector.ServerSelector>)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.CompositeServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.CompositeServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.LatencyMinimizingServerSelector", "com.mongodb.selector.LatencyMinimizingServerSelector(long, java.util.concurrent.TimeUnit)", "public com.mongodb.selector.LatencyMinimizingServerSelector(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.selector.LatencyMinimizingServerSelector.getAcceptableLatencyDifference(java.util.concurrent.TimeUnit)", "public long getAcceptableLatencyDifference(java.util.concurrent.TimeUnit)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.LatencyMinimizingServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.LatencyMinimizingServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.PrimaryServerSelector", "com.mongodb.selector.PrimaryServerSelector()", "public com.mongodb.selector.PrimaryServerSelector()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.PrimaryServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.PrimaryServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.ReadPreferenceServerSelector", "com.mongodb.selector.ReadPreferenceServerSelector(com.mongodb.ReadPreference)", "public com.mongodb.selector.ReadPreferenceServerSelector(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.selector.ReadPreferenceServerSelector.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.ReadPreferenceServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.ReadPreferenceServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.ServerAddressSelector", "com.mongodb.selector.ServerAddressSelector(com.mongodb.ServerAddress)", "public com.mongodb.selector.ServerAddressSelector(com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.selector.ServerAddressSelector.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.ServerAddressSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.ServerAddressSelector.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.util.AbstractObjectSerializer.serialize(java.lang.Object)", "public java.lang.String serialize(java.lang.Object)"], ["void", "com.mongodb.util.ClassMapBasedObjectSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.JSON", "com.mongodb.util.JSON()", "public com.mongodb.util.JSON()"], ["java.lang.String", "com.mongodb.util.JSON.serialize(java.lang.Object)", "public static java.lang.String serialize(java.lang.Object)"], ["void", "com.mongodb.util.JSON.serialize(java.lang.Object, java.lang.StringBuilder)", "public static void serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.Object", "com.mongodb.util.JSON.parse(java.lang.String)", "public static java.lang.Object parse(java.lang.String)"], ["java.lang.Object", "com.mongodb.util.JSON.parse(java.lang.String, org.bson.BSONCallback)", "public static java.lang.Object parse(java.lang.String, org.bson.BSONCallback)"], ["com.mongodb.util.JSONCallback", "com.mongodb.util.JSONCallback()", "public com.mongodb.util.JSONCallback()"], ["org.bson.BSONObject", "com.mongodb.util.JSONCallback.create()", "public org.bson.BSONObject create()"], ["void", "com.mongodb.util.JSONCallback.arrayStart(java.lang.String)", "public void arrayStart(java.lang.String)"], ["void", "com.mongodb.util.JSONCallback.objectStart(java.lang.String)", "public void objectStart(java.lang.String)"], ["java.lang.Object", "com.mongodb.util.JSONCallback.objectDone()", "public java.lang.Object objectDone()"], ["java.lang.String", "com.mongodb.util.JSONParseException.getMessage()", "public java.lang.String getMessage()"], ["com.mongodb.util.JSONParseException", "com.mongodb.util.JSONParseException(java.lang.String, int)", "public com.mongodb.util.JSONParseException(java.lang.String, int)"], ["com.mongodb.util.JSONParseException", "com.mongodb.util.JSONParseException(java.lang.String, int, java.lang.Throwable)", "public com.mongodb.util.JSONParseException(java.lang.String, int, java.lang.Throwable)"], ["com.mongodb.util.JSONParser", "com.mongodb.util.JSONParser(java.lang.String)", "public com.mongodb.util.JSONParser(java.lang.String)"], ["com.mongodb.util.JSONParser", "com.mongodb.util.JSONParser(java.lang.String, org.bson.BSONCallback)", "public com.mongodb.util.JSONParser(java.lang.String, org.bson.BSONCallback)"], ["java.lang.Object", "com.mongodb.util.JSONParser.parse()", "public java.lang.Object parse()"], ["java.lang.Object", "com.mongodb.util.JSONParser.parseObject()", "public java.lang.Object parseObject()"], ["void", "com.mongodb.util.JSONParser.read(char)", "public void read(char)"], ["char", "com.mongodb.util.JSONParser.read()", "public char read()"], ["void", "com.mongodb.util.JSONParser.readHex()", "public void readHex()"], ["boolean", "com.mongodb.util.JSONParser.check(char)", "public boolean check(char)"], ["void", "com.mongodb.util.JSONParser.skipWS()", "public void skipWS()"], ["char", "com.mongodb.util.JSONParser.get()", "public char get()"], ["java.lang.String", "com.mongodb.util.JSONParser.parseString(boolean)", "public java.lang.String parseString(boolean)"], ["java.lang.Number", "com.mongodb.util.JSONParser.parseNumber()", "public java.lang.Number parseNumber()"], ["void", "com.mongodb.util.JSONParser.parseFraction()", "public void parseFraction()"], ["void", "com.mongodb.util.JSONParser.parseExponent()", "public void parseExponent()"], ["java.lang.Object", "com.mongodb.util.JSONParser.parseArray()", "public java.lang.Object parseArray()"], ["void", "com.mongodb.util.JSONSerializers$BinarySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$BSONTimestampSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ByteArraySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$CodeSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$CodeWScopeSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$DateSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$DBObjectSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$DBRefBaseSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$IterableSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$LegacyBinarySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$LegacyBSONTimestampSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$LegacyDateSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MapSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MaxKeySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MinKeySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ObjectArraySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ObjectIdSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$PatternSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$StringSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ToStringSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$UndefinedSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$UuidSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.ObjectSerializer", "com.mongodb.util.JSONSerializers.getLegacy()", "public static com.mongodb.util.ObjectSerializer getLegacy()"], ["com.mongodb.util.ObjectSerializer", "com.mongodb.util.JSONSerializers.getStrict()", "public static com.mongodb.util.ObjectSerializer getStrict()"], ["com.mongodb.util.Util", "com.mongodb.util.Util()", "public com.mongodb.util.Util()"], ["java.lang.String", "com.mongodb.util.Util.toHex(byte[])", "public static java.lang.String toHex(byte[])"], ["java.lang.String", "com.mongodb.util.Util.hexMD5(byte[])", "public static java.lang.String hexMD5(byte[])"], ["java.lang.String", "com.mongodb.util.Util.hexMD5(java.nio.ByteBuffer, int, int)", "public static java.lang.String hexMD5(java.nio.ByteBuffer, int, int)"], ["org.bson.AbstractBsonReader$State[]", "org.bson.AbstractBsonReader$State.values()", "public static org.bson.AbstractBsonReader$State[] values()"], ["org.bson.AbstractBsonReader$State", "org.bson.AbstractBsonReader$State.valueOf(java.lang.String)", "public static org.bson.AbstractBsonReader$State valueOf(java.lang.String)"], ["org.bson.BsonType", "org.bson.AbstractBsonReader.getCurrentBsonType()", "public org.bson.BsonType getCurrentBsonType()"], ["java.lang.String", "org.bson.AbstractBsonReader.getCurrentName()", "public java.lang.String getCurrentName()"], ["org.bson.AbstractBsonReader$State", "org.bson.AbstractBsonReader.getState()", "public org.bson.AbstractBsonReader$State getState()"], ["void", "org.bson.AbstractBsonReader.close()", "public void close()"], ["org.bson.BsonBinary", "org.bson.AbstractBsonReader.readBinaryData()", "public org.bson.BsonBinary readBinaryData()"], ["byte", "org.bson.AbstractBsonReader.peekBinarySubType()", "public byte peekBinarySubType()"], ["boolean", "org.bson.AbstractBsonReader.readBoolean()", "public boolean readBoolean()"], ["long", "org.bson.AbstractBsonReader.readDateTime()", "public long readDateTime()"], ["double", "org.bson.AbstractBsonReader.readDouble()", "public double readDouble()"], ["void", "org.bson.AbstractBsonReader.readEndArray()", "public void readEndArray()"], ["void", "org.bson.AbstractBsonReader.readEndDocument()", "public void readEndDocument()"], ["int", "org.bson.AbstractBsonReader.readInt32()", "public int readInt32()"], ["long", "org.bson.AbstractBsonReader.readInt64()", "public long readInt64()"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScript()", "public java.lang.String readJavaScript()"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScriptWithScope()", "public java.lang.String readJavaScriptWithScope()"], ["void", "org.bson.AbstractBsonReader.readMaxKey()", "public void readMaxKey()"], ["void", "org.bson.AbstractBsonReader.readMinKey()", "public void readMinKey()"], ["void", "org.bson.AbstractBsonReader.readNull()", "public void readNull()"], ["org.bson.types.ObjectId", "org.bson.AbstractBsonReader.readObjectId()", "public org.bson.types.ObjectId readObjectId()"], ["org.bson.BsonRegularExpression", "org.bson.AbstractBsonReader.readRegularExpression()", "public org.bson.BsonRegularExpression readRegularExpression()"], ["org.bson.BsonDbPointer", "org.bson.AbstractBsonReader.readDBPointer()", "public org.bson.BsonDbPointer readDBPointer()"], ["void", "org.bson.AbstractBsonReader.readStartArray()", "public void readStartArray()"], ["void", "org.bson.AbstractBsonReader.readStartDocument()", "public void readStartDocument()"], ["java.lang.String", "org.bson.AbstractBsonReader.readString()", "public java.lang.String readString()"], ["java.lang.String", "org.bson.AbstractBsonReader.readSymbol()", "public java.lang.String readSymbol()"], ["org.bson.BsonTimestamp", "org.bson.AbstractBsonReader.readTimestamp()", "public org.bson.BsonTimestamp readTimestamp()"], ["void", "org.bson.AbstractBsonReader.readUndefined()", "public void readUndefined()"], ["void", "org.bson.AbstractBsonReader.skipName()", "public void skipName()"], ["void", "org.bson.AbstractBsonReader.skipValue()", "public void skipValue()"], ["org.bson.BsonBinary", "org.bson.AbstractBsonReader.readBinaryData(java.lang.String)", "public org.bson.BsonBinary readBinaryData(java.lang.String)"], ["boolean", "org.bson.AbstractBsonReader.readBoolean(java.lang.String)", "public boolean readBoolean(java.lang.String)"], ["long", "org.bson.AbstractBsonReader.readDateTime(java.lang.String)", "public long readDateTime(java.lang.String)"], ["double", "org.bson.AbstractBsonReader.readDouble(java.lang.String)", "public double readDouble(java.lang.String)"], ["int", "org.bson.AbstractBsonReader.readInt32(java.lang.String)", "public int readInt32(java.lang.String)"], ["long", "org.bson.AbstractBsonReader.readInt64(java.lang.String)", "public long readInt64(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScript(java.lang.String)", "public java.lang.String readJavaScript(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScriptWithScope(java.lang.String)", "public java.lang.String readJavaScriptWithScope(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readMaxKey(java.lang.String)", "public void readMaxKey(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readMinKey(java.lang.String)", "public void readMinKey(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readName()", "public java.lang.String readName()"], ["void", "org.bson.AbstractBsonReader.readName(java.lang.String)", "public void readName(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readNull(java.lang.String)", "public void readNull(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.AbstractBsonReader.readObjectId(java.lang.String)", "public org.bson.types.ObjectId readObjectId(java.lang.String)"], ["org.bson.BsonRegularExpression", "org.bson.AbstractBsonReader.readRegularExpression(java.lang.String)", "public org.bson.BsonRegularExpression readRegularExpression(java.lang.String)"], ["org.bson.BsonDbPointer", "org.bson.AbstractBsonReader.readDBPointer(java.lang.String)", "public org.bson.BsonDbPointer readDBPointer(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readString(java.lang.String)", "public java.lang.String readString(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readSymbol(java.lang.String)", "public java.lang.String readSymbol(java.lang.String)"], ["org.bson.BsonTimestamp", "org.bson.AbstractBsonReader.readTimestamp(java.lang.String)", "public org.bson.BsonTimestamp readTimestamp(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readUndefined(java.lang.String)", "public void readUndefined(java.lang.String)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context)", "public org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context, org.bson.BsonContextType)", "public org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context, org.bson.BsonContextType)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["org.bson.BsonContextType", "org.bson.AbstractBsonWriter$Context.getContextType()", "public org.bson.BsonContextType getContextType()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context.copy()", "public org.bson.AbstractBsonWriter$Context copy()"], ["org.bson.AbstractBsonWriter$State[]", "org.bson.AbstractBsonWriter$State.values()", "public static org.bson.AbstractBsonWriter$State[] values()"], ["org.bson.AbstractBsonWriter$State", "org.bson.AbstractBsonWriter$State.valueOf(java.lang.String)", "public static org.bson.AbstractBsonWriter$State valueOf(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeStartDocument(java.lang.String)", "public void writeStartDocument(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeStartDocument()", "public void writeStartDocument()"], ["void", "org.bson.AbstractBsonWriter.writeEndDocument()", "public void writeEndDocument()"], ["void", "org.bson.AbstractBsonWriter.writeStartArray(java.lang.String)", "public void writeStartArray(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeStartArray()", "public void writeStartArray()"], ["void", "org.bson.AbstractBsonWriter.writeEndArray()", "public void writeEndArray()"], ["void", "org.bson.AbstractBsonWriter.writeBinaryData(java.lang.String, org.bson.BsonBinary)", "public void writeBinaryData(java.lang.String, org.bson.BsonBinary)"], ["void", "org.bson.AbstractBsonWriter.writeBinaryData(org.bson.BsonBinary)", "public void writeBinaryData(org.bson.BsonBinary)"], ["void", "org.bson.AbstractBsonWriter.writeBoolean(java.lang.String, boolean)", "public void writeBoolean(java.lang.String, boolean)"], ["void", "org.bson.AbstractBsonWriter.writeBoolean(boolean)", "public void writeBoolean(boolean)"], ["void", "org.bson.AbstractBsonWriter.writeDateTime(java.lang.String, long)", "public void writeDateTime(java.lang.String, long)"], ["void", "org.bson.AbstractBsonWriter.writeDateTime(long)", "public void writeDateTime(long)"], ["void", "org.bson.AbstractBsonWriter.writeDBPointer(java.lang.String, org.bson.BsonDbPointer)", "public void writeDBPointer(java.lang.String, org.bson.BsonDbPointer)"], ["void", "org.bson.AbstractBsonWriter.writeDBPointer(org.bson.BsonDbPointer)", "public void writeDBPointer(org.bson.BsonDbPointer)"], ["void", "org.bson.AbstractBsonWriter.writeDouble(java.lang.String, double)", "public void writeDouble(java.lang.String, double)"], ["void", "org.bson.AbstractBsonWriter.writeDouble(double)", "public void writeDouble(double)"], ["void", "org.bson.AbstractBsonWriter.writeInt32(java.lang.String, int)", "public void writeInt32(java.lang.String, int)"], ["void", "org.bson.AbstractBsonWriter.writeInt32(int)", "public void writeInt32(int)"], ["void", "org.bson.AbstractBsonWriter.writeInt64(java.lang.String, long)", "public void writeInt64(java.lang.String, long)"], ["void", "org.bson.AbstractBsonWriter.writeInt64(long)", "public void writeInt64(long)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScript(java.lang.String, java.lang.String)", "public void writeJavaScript(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScript(java.lang.String)", "public void writeJavaScript(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScriptWithScope(java.lang.String, java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScriptWithScope(java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMaxKey(java.lang.String)", "public void writeMaxKey(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMaxKey()", "public void writeMaxKey()"], ["void", "org.bson.AbstractBsonWriter.writeMinKey(java.lang.String)", "public void writeMinKey(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMinKey()", "public void writeMinKey()"], ["void", "org.bson.AbstractBsonWriter.writeName(java.lang.String)", "public void writeName(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeNull(java.lang.String)", "public void writeNull(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeNull()", "public void writeNull()"], ["void", "org.bson.AbstractBsonWriter.writeObjectId(java.lang.String, org.bson.types.ObjectId)", "public void writeObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.AbstractBsonWriter.writeObjectId(org.bson.types.ObjectId)", "public void writeObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.AbstractBsonWriter.writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)", "public void writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)"], ["void", "org.bson.AbstractBsonWriter.writeRegularExpression(org.bson.BsonRegularExpression)", "public void writeRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.AbstractBsonWriter.writeString(java.lang.String, java.lang.String)", "public void writeString(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeString(java.lang.String)", "public void writeString(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeSymbol(java.lang.String, java.lang.String)", "public void writeSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeSymbol(java.lang.String)", "public void writeSymbol(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeTimestamp(java.lang.String, org.bson.BsonTimestamp)", "public void writeTimestamp(java.lang.String, org.bson.BsonTimestamp)"], ["void", "org.bson.AbstractBsonWriter.writeTimestamp(org.bson.BsonTimestamp)", "public void writeTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.AbstractBsonWriter.writeUndefined(java.lang.String)", "public void writeUndefined(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeUndefined()", "public void writeUndefined()"], ["void", "org.bson.AbstractBsonWriter.close()", "public void close()"], ["void", "org.bson.AbstractBsonWriter.pipe(org.bson.BsonReader)", "public void pipe(org.bson.BsonReader)"], ["org.bson.BasicBSONCallback", "org.bson.BasicBSONCallback()", "public org.bson.BasicBSONCallback()"], ["java.lang.Object", "org.bson.BasicBSONCallback.get()", "public java.lang.Object get()"], ["org.bson.BSONObject", "org.bson.BasicBSONCallback.create()", "public org.bson.BSONObject create()"], ["org.bson.BSONCallback", "org.bson.BasicBSONCallback.createBSONCallback()", "public org.bson.BSONCallback createBSONCallback()"], ["org.bson.BSONObject", "org.bson.BasicBSONCallback.create(boolean, java.util.List<java.lang.String>)", "public org.bson.BSONObject create(boolean, java.util.List<java.lang.String>)"], ["void", "org.bson.BasicBSONCallback.objectStart()", "public void objectStart()"], ["void", "org.bson.BasicBSONCallback.objectStart(java.lang.String)", "public void objectStart(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONCallback.objectDone()", "public java.lang.Object objectDone()"], ["void", "org.bson.BasicBSONCallback.arrayStart()", "public void arrayStart()"], ["void", "org.bson.BasicBSONCallback.arrayStart(java.lang.String)", "public void arrayStart(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONCallback.arrayDone()", "public java.lang.Object arrayDone()"], ["void", "org.bson.BasicBSONCallback.gotNull(java.lang.String)", "public void gotNull(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotUndefined(java.lang.String)", "public void gotUndefined(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotMinKey(java.lang.String)", "public void gotMinKey(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotMaxKey(java.lang.String)", "public void gotMaxKey(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotBoolean(java.lang.String, boolean)", "public void gotBoolean(java.lang.String, boolean)"], ["void", "org.bson.BasicBSONCallback.gotDouble(java.lang.String, double)", "public void gotDouble(java.lang.String, double)"], ["void", "org.bson.BasicBSONCallback.gotInt(java.lang.String, int)", "public void gotInt(java.lang.String, int)"], ["void", "org.bson.BasicBSONCallback.gotLong(java.lang.String, long)", "public void gotLong(java.lang.String, long)"], ["void", "org.bson.BasicBSONCallback.gotDate(java.lang.String, long)", "public void gotDate(java.lang.String, long)"], ["void", "org.bson.BasicBSONCallback.gotRegex(java.lang.String, java.lang.String, java.lang.String)", "public void gotRegex(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotString(java.lang.String, java.lang.String)", "public void gotString(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotSymbol(java.lang.String, java.lang.String)", "public void gotSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotTimestamp(java.lang.String, int, int)", "public void gotTimestamp(java.lang.String, int, int)"], ["void", "org.bson.BasicBSONCallback.gotObjectId(java.lang.String, org.bson.types.ObjectId)", "public void gotObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.BasicBSONCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)", "public void gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.BasicBSONCallback.gotBinaryArray(java.lang.String, byte[])", "public void gotBinaryArray(java.lang.String, byte[])"], ["void", "org.bson.BasicBSONCallback.gotBinary(java.lang.String, byte, byte[])", "public void gotBinary(java.lang.String, byte, byte[])"], ["void", "org.bson.BasicBSONCallback.gotUUID(java.lang.String, long, long)", "public void gotUUID(java.lang.String, long, long)"], ["void", "org.bson.BasicBSONCallback.gotCode(java.lang.String, java.lang.String)", "public void gotCode(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)", "public void gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)"], ["void", "org.bson.BasicBSONCallback.reset()", "public void reset()"], ["org.bson.BasicBSONDecoder", "org.bson.BasicBSONDecoder()", "public org.bson.BasicBSONDecoder()"], ["org.bson.BSONObject", "org.bson.BasicBSONDecoder.readObject(byte[])", "public org.bson.BSONObject readObject(byte[])"], ["org.bson.BSONObject", "org.bson.BasicBSONDecoder.readObject(java.io.InputStream)", "public org.bson.BSONObject readObject(java.io.InputStream) throws java.io.IOException"], ["int", "org.bson.BasicBSONDecoder.decode(byte[], org.bson.BSONCallback)", "public int decode(byte[], org.bson.BSONCallback)"], ["int", "org.bson.BasicBSONDecoder.decode(java.io.InputStream, org.bson.BSONCallback)", "public int decode(java.io.InputStream, org.bson.BSONCallback) throws java.io.IOException"], ["org.bson.BasicBSONEncoder", "org.bson.BasicBSONEncoder()", "public org.bson.BasicBSONEncoder()"], ["byte[]", "org.bson.BasicBSONEncoder.encode(org.bson.BSONObject)", "public byte[] encode(org.bson.BSONObject)"], ["void", "org.bson.BasicBSONEncoder.done()", "public void done()"], ["void", "org.bson.BasicBSONEncoder.set(org.bson.io.OutputBuffer)", "public void set(org.bson.io.OutputBuffer)"], ["int", "org.bson.BasicBSONEncoder.putObject(org.bson.BSONObject)", "public int putObject(org.bson.BSONObject)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject()", "public org.bson.BasicBSONObject()"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(int)", "public org.bson.BasicBSONObject(int)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(java.lang.String, java.lang.Object)", "public org.bson.BasicBSONObject(java.lang.String, java.lang.Object)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(java.util.Map)", "public org.bson.BasicBSONObject(java.util.Map)"], ["java.util.Map", "org.bson.BasicBSONObject.toMap()", "public java.util.Map toMap()"], ["java.lang.Object", "org.bson.BasicBSONObject.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONObject.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["int", "org.bson.BasicBSONObject.getInt(java.lang.String)", "public int getInt(java.lang.String)"], ["int", "org.bson.BasicBSONObject.getInt(java.lang.String, int)", "public int getInt(java.lang.String, int)"], ["long", "org.bson.BasicBSONObject.getLong(java.lang.String)", "public long getLong(java.lang.String)"], ["long", "org.bson.BasicBSONObject.getLong(java.lang.String, long)", "public long getLong(java.lang.String, long)"], ["double", "org.bson.BasicBSONObject.getDouble(java.lang.String)", "public double getDouble(java.lang.String)"], ["double", "org.bson.BasicBSONObject.getDouble(java.lang.String, double)", "public double getDouble(java.lang.String, double)"], ["java.lang.String", "org.bson.BasicBSONObject.getString(java.lang.String)", "public java.lang.String getString(java.lang.String)"], ["java.lang.String", "org.bson.BasicBSONObject.getString(java.lang.String, java.lang.String)", "public java.lang.String getString(java.lang.String, java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.getBoolean(java.lang.String)", "public boolean getBoolean(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.getBoolean(java.lang.String, boolean)", "public boolean getBoolean(java.lang.String, boolean)"], ["org.bson.types.ObjectId", "org.bson.BasicBSONObject.getObjectId(java.lang.String)", "public org.bson.types.ObjectId getObjectId(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.BasicBSONObject.getObjectId(java.lang.String, org.bson.types.ObjectId)", "public org.bson.types.ObjectId getObjectId(java.lang.String, org.bson.types.ObjectId)"], ["java.util.Date", "org.bson.BasicBSONObject.getDate(java.lang.String)", "public java.util.Date getDate(java.lang.String)"], ["java.util.Date", "org.bson.BasicBSONObject.getDate(java.lang.String, java.util.Date)", "public java.util.Date getDate(java.lang.String, java.util.Date)"], ["void", "org.bson.BasicBSONObject.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["void", "org.bson.BasicBSONObject.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject.append(java.lang.String, java.lang.Object)", "public org.bson.BasicBSONObject append(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.bson.BasicBSONObject.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.BasicBSONObject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BasicBSONObject.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.bson.BasicBSONObject.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["org.bson.BSON", "org.bson.BSON()", "public org.bson.BSON()"], ["boolean", "org.bson.BSON.hasEncodeHooks()", "public static boolean hasEncodeHooks()"], ["boolean", "org.bson.BSON.hasDecodeHooks()", "public static boolean hasDecodeHooks()"], ["void", "org.bson.BSON.addEncodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void addEncodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["void", "org.bson.BSON.addDecodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void addDecodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["java.lang.Object", "org.bson.BSON.applyEncodingHooks(java.lang.Object)", "public static java.lang.Object applyEncodingHooks(java.lang.Object)"], ["java.lang.Object", "org.bson.BSON.applyDecodingHooks(java.lang.Object)", "public static java.lang.Object applyDecodingHooks(java.lang.Object)"], ["java.util.List<org.bson.Transformer>", "org.bson.BSON.getEncodingHooks(java.lang.Class<?>)", "public static java.util.List<org.bson.Transformer> getEncodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.clearEncodingHooks()", "public static void clearEncodingHooks()"], ["void", "org.bson.BSON.removeEncodingHooks(java.lang.Class<?>)", "public static void removeEncodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.removeEncodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void removeEncodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["java.util.List<org.bson.Transformer>", "org.bson.BSON.getDecodingHooks(java.lang.Class<?>)", "public static java.util.List<org.bson.Transformer> getDecodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.clearDecodingHooks()", "public static void clearDecodingHooks()"], ["void", "org.bson.BSON.removeDecodingHooks(java.lang.Class<?>)", "public static void removeDecodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.removeDecodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void removeDecodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["void", "org.bson.BSON.clearAllHooks()", "public static void clearAllHooks()"], ["byte[]", "org.bson.BSON.encode(org.bson.BSONObject)", "public static byte[] encode(org.bson.BSONObject)"], ["org.bson.BSONObject", "org.bson.BSON.decode(byte[])", "public static org.bson.BSONObject decode(byte[])"], ["int", "org.bson.BSON.regexFlags(java.lang.String)", "public static int regexFlags(java.lang.String)"], ["int", "org.bson.BSON.regexFlag(char)", "public static int regexFlag(char)"], ["java.lang.String", "org.bson.BSON.regexFlags(int)", "public static java.lang.String regexFlags(int)"], ["int", "org.bson.BSON.toInt(java.lang.Object)", "public static int toInt(java.lang.Object)"], ["org.bson.BsonArray", "org.bson.BsonArray(java.util.List<? extends org.bson.BsonValue>)", "public org.bson.BsonArray(java.util.List<? extends org.bson.BsonValue>)"], ["org.bson.BsonArray", "org.bson.BsonArray()", "public org.bson.BsonArray()"], ["java.util.List<org.bson.BsonValue>", "org.bson.BsonArray.getValues()", "public java.util.List<org.bson.BsonValue> getValues()"], ["org.bson.BsonType", "org.bson.BsonArray.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonArray.size()", "public int size()"], ["boolean", "org.bson.BsonArray.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.BsonArray.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<org.bson.BsonValue>", "org.bson.BsonArray.iterator()", "public java.util.Iterator<org.bson.BsonValue> iterator()"], ["java.lang.Object[]", "org.bson.BsonArray.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.bson.BsonArray.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.bson.BsonArray.add(org.bson.BsonValue)", "public boolean add(org.bson.BsonValue)"], ["boolean", "org.bson.BsonArray.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.BsonArray.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.BsonArray.addAll(java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.BsonArray.addAll(int, java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(int, java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.BsonArray.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.BsonArray.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "org.bson.BsonArray.clear()", "public void clear()"], ["org.bson.BsonValue", "org.bson.BsonArray.get(int)", "public org.bson.BsonValue get(int)"], ["org.bson.BsonValue", "org.bson.BsonArray.set(int, org.bson.BsonValue)", "public org.bson.BsonValue set(int, org.bson.BsonValue)"], ["void", "org.bson.BsonArray.add(int, org.bson.BsonValue)", "public void add(int, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonArray.remove(int)", "public org.bson.BsonValue remove(int)"], ["int", "org.bson.BsonArray.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.bson.BsonArray.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<org.bson.BsonValue>", "org.bson.BsonArray.listIterator()", "public java.util.ListIterator<org.bson.BsonValue> listIterator()"], ["java.util.ListIterator<org.bson.BsonValue>", "org.bson.BsonArray.listIterator(int)", "public java.util.ListIterator<org.bson.BsonValue> listIterator(int)"], ["java.util.List<org.bson.BsonValue>", "org.bson.BsonArray.subList(int, int)", "public java.util.List<org.bson.BsonValue> subList(int, int)"], ["boolean", "org.bson.BsonArray.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonArray.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonArray.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.bson.BsonArray.remove(int)", "public java.lang.Object remove(int)"], ["void", "org.bson.BsonArray.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonArray.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonArray.get(int)", "public java.lang.Object get(int)"], ["boolean", "org.bson.BsonArray.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["org.bson.BsonBinary", "org.bson.BsonBinary(byte[])", "public org.bson.BsonBinary(byte[])"], ["org.bson.BsonBinary", "org.bson.BsonBinary(org.bson.BsonBinarySubType, byte[])", "public org.bson.BsonBinary(org.bson.BsonBinarySubType, byte[])"], ["org.bson.BsonBinary", "org.bson.BsonBinary(byte, byte[])", "public org.bson.BsonBinary(byte, byte[])"], ["org.bson.BsonType", "org.bson.BsonBinary.getBsonType()", "public org.bson.BsonType getBsonType()"], ["byte", "org.bson.BsonBinary.getType()", "public byte getType()"], ["byte[]", "org.bson.BsonBinary.getData()", "public byte[] getData()"], ["boolean", "org.bson.BsonBinary.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonBinary.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonBinary.toString()", "public java.lang.String toString()"], ["org.bson.BsonBinaryReader", "org.bson.BsonBinaryReader(java.nio.ByteBuffer)", "public org.bson.BsonBinaryReader(java.nio.ByteBuffer)"], ["org.bson.BsonBinaryReader", "org.bson.BsonBinaryReader(org.bson.io.BsonInput)", "public org.bson.BsonBinaryReader(org.bson.io.BsonInput)"], ["void", "org.bson.BsonBinaryReader.close()", "public void close()"], ["org.bson.io.BsonInput", "org.bson.BsonBinaryReader.getBsonInput()", "public org.bson.io.BsonInput getBsonInput()"], ["org.bson.BsonType", "org.bson.BsonBinaryReader.readBsonType()", "public org.bson.BsonType readBsonType()"], ["void", "org.bson.BsonBinaryReader.doReadStartArray()", "public void doReadStartArray()"], ["void", "org.bson.BsonBinaryReader.mark()", "public void mark()"], ["void", "org.bson.BsonBinaryReader.reset()", "public void reset()"], ["org.bson.BsonBinarySubType[]", "org.bson.BsonBinarySubType.values()", "public static org.bson.BsonBinarySubType[] values()"], ["org.bson.BsonBinarySubType", "org.bson.BsonBinarySubType.valueOf(java.lang.String)", "public static org.bson.BsonBinarySubType valueOf(java.lang.String)"], ["byte", "org.bson.BsonBinarySubType.getValue()", "public byte getValue()"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context, org.bson.BsonContextType, int)", "public org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context, org.bson.BsonContextType, int)"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context)", "public org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context)"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context.getParentContext()", "public org.bson.BsonBinaryWriter$Context getParentContext()"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context.copy()", "public org.bson.BsonBinaryWriter$Context copy()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BsonBinaryWriter$Context.copy()", "public org.bson.AbstractBsonWriter$Context copy()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BsonBinaryWriter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.io.BsonOutput, org.bson.FieldNameValidator)", "public org.bson.BsonBinaryWriter(org.bson.io.BsonOutput, org.bson.FieldNameValidator)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.io.BsonOutput)", "public org.bson.BsonBinaryWriter(org.bson.io.BsonOutput)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput)", "public org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput, org.bson.FieldNameValidator)", "public org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput, org.bson.FieldNameValidator)"], ["void", "org.bson.BsonBinaryWriter.close()", "public void close()"], ["org.bson.io.BsonOutput", "org.bson.BsonBinaryWriter.getBsonOutput()", "public org.bson.io.BsonOutput getBsonOutput()"], ["void", "org.bson.BsonBinaryWriter.flush()", "public void flush()"], ["void", "org.bson.BsonBinaryWriter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.BsonBinaryWriter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.BsonBinaryWriter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BsonBinaryWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BsonBinaryWriter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.BsonBinaryWriter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.BsonBinaryWriter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BsonBinaryWriter.doWriteUndefined()", "public void doWriteUndefined()"], ["void", "org.bson.BsonBinaryWriter.pipe(org.bson.BsonReader)", "public void pipe(org.bson.BsonReader)"], ["void", "org.bson.BsonBinaryWriter.pushMaxDocumentSize(int)", "public void pushMaxDocumentSize(int)"], ["void", "org.bson.BsonBinaryWriter.popMaxDocumentSize()", "public void popMaxDocumentSize()"], ["void", "org.bson.BsonBinaryWriter.mark()", "public void mark()"], ["void", "org.bson.BsonBinaryWriter.reset()", "public void reset()"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriterSettings(int)", "public org.bson.BsonBinaryWriterSettings(int)"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriterSettings()", "public org.bson.BsonBinaryWriterSettings()"], ["int", "org.bson.BsonBinaryWriterSettings.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["org.bson.BsonBoolean", "org.bson.BsonBoolean.valueOf(boolean)", "public static org.bson.BsonBoolean valueOf(boolean)"], ["org.bson.BsonBoolean", "org.bson.BsonBoolean(boolean)", "public org.bson.BsonBoolean(boolean)"], ["int", "org.bson.BsonBoolean.compareTo(org.bson.BsonBoolean)", "public int compareTo(org.bson.BsonBoolean)"], ["org.bson.BsonType", "org.bson.BsonBoolean.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonBoolean.getValue()", "public boolean getValue()"], ["boolean", "org.bson.BsonBoolean.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonBoolean.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonBoolean.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonBoolean.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BSONCallbackAdapter$Context", "org.bson.BSONCallbackAdapter$Context(org.bson.BSONCallbackAdapter, org.bson.BSONCallbackAdapter$Context, org.bson.BsonContextType)", "public org.bson.BSONCallbackAdapter$Context(org.bson.BSONCallbackAdapter, org.bson.BSONCallbackAdapter$Context, org.bson.BsonContextType)"], ["org.bson.BSONCallbackAdapter$Context", "org.bson.BSONCallbackAdapter$Context.getParentContext()", "public org.bson.BSONCallbackAdapter$Context getParentContext()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BSONCallbackAdapter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["void", "org.bson.BSONCallbackAdapter.flush()", "public void flush()"], ["void", "org.bson.BSONCallbackAdapter.doWriteStartDocument()", "public void doWriteStartDocument()"], ["void", "org.bson.BSONCallbackAdapter.doWriteStartArray()", "public void doWriteStartArray()"], ["void", "org.bson.BSONCallbackAdapter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.BSONCallbackAdapter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.BSONCallbackAdapter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BSONCallbackAdapter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BSONCallbackAdapter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.BSONCallbackAdapter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.BSONCallbackAdapter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BSONCallbackAdapter.doWriteUndefined()", "public void doWriteUndefined()"], ["org.bson.BsonContextType[]", "org.bson.BsonContextType.values()", "public static org.bson.BsonContextType[] values()"], ["org.bson.BsonContextType", "org.bson.BsonContextType.valueOf(java.lang.String)", "public static org.bson.BsonContextType valueOf(java.lang.String)"], ["org.bson.BsonDateTime", "org.bson.BsonDateTime(long)", "public org.bson.BsonDateTime(long)"], ["int", "org.bson.BsonDateTime.compareTo(org.bson.BsonDateTime)", "public int compareTo(org.bson.BsonDateTime)"], ["org.bson.BsonType", "org.bson.BsonDateTime.getBsonType()", "public org.bson.BsonType getBsonType()"], ["long", "org.bson.BsonDateTime.getValue()", "public long getValue()"], ["boolean", "org.bson.BsonDateTime.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDateTime.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDateTime.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonDateTime.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonDbPointer", "org.bson.BsonDbPointer(java.lang.String, org.bson.types.ObjectId)", "public org.bson.BsonDbPointer(java.lang.String, org.bson.types.ObjectId)"], ["org.bson.BsonType", "org.bson.BsonDbPointer.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonDbPointer.getNamespace()", "public java.lang.String getNamespace()"], ["org.bson.types.ObjectId", "org.bson.BsonDbPointer.getId()", "public org.bson.types.ObjectId getId()"], ["boolean", "org.bson.BsonDbPointer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDbPointer.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDbPointer.toString()", "public java.lang.String toString()"], ["org.bson.BsonDocument", "org.bson.BsonDocument.parse(java.lang.String)", "public static org.bson.BsonDocument parse(java.lang.String)"], ["org.bson.BsonDocument", "org.bson.BsonDocument(java.util.List<org.bson.BsonElement>)", "public org.bson.BsonDocument(java.util.List<org.bson.BsonElement>)"], ["org.bson.BsonDocument", "org.bson.BsonDocument(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonDocument(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.BsonDocument()", "public org.bson.BsonDocument()"], ["<C> org.bson.BsonDocument", "org.bson.BsonDocument.toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)", "public <C> org.bson.BsonDocument toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonType", "org.bson.BsonDocument.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonDocument.size()", "public int size()"], ["boolean", "org.bson.BsonDocument.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.BsonDocument.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocument.get(java.lang.Object)", "public org.bson.BsonValue get(java.lang.Object)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.getDocument(java.lang.Object)", "public org.bson.BsonDocument getDocument(java.lang.Object)"], ["org.bson.BsonArray", "org.bson.BsonDocument.getArray(java.lang.Object)", "public org.bson.BsonArray getArray(java.lang.Object)"], ["org.bson.BsonNumber", "org.bson.BsonDocument.getNumber(java.lang.Object)", "public org.bson.BsonNumber getNumber(java.lang.Object)"], ["org.bson.BsonInt32", "org.bson.BsonDocument.getInt32(java.lang.Object)", "public org.bson.BsonInt32 getInt32(java.lang.Object)"], ["org.bson.BsonInt64", "org.bson.BsonDocument.getInt64(java.lang.Object)", "public org.bson.BsonInt64 getInt64(java.lang.Object)"], ["org.bson.BsonDouble", "org.bson.BsonDocument.getDouble(java.lang.Object)", "public org.bson.BsonDouble getDouble(java.lang.Object)"], ["org.bson.BsonBoolean", "org.bson.BsonDocument.getBoolean(java.lang.Object)", "public org.bson.BsonBoolean getBoolean(java.lang.Object)"], ["org.bson.BsonString", "org.bson.BsonDocument.getString(java.lang.Object)", "public org.bson.BsonString getString(java.lang.Object)"], ["org.bson.BsonDateTime", "org.bson.BsonDocument.getDateTime(java.lang.Object)", "public org.bson.BsonDateTime getDateTime(java.lang.Object)"], ["org.bson.BsonTimestamp", "org.bson.BsonDocument.getTimestamp(java.lang.Object)", "public org.bson.BsonTimestamp getTimestamp(java.lang.Object)"], ["org.bson.BsonObjectId", "org.bson.BsonDocument.getObjectId(java.lang.Object)", "public org.bson.BsonObjectId getObjectId(java.lang.Object)"], ["org.bson.BsonRegularExpression", "org.bson.BsonDocument.getRegularExpression(java.lang.Object)", "public org.bson.BsonRegularExpression getRegularExpression(java.lang.Object)"], ["org.bson.BsonBinary", "org.bson.BsonDocument.getBinary(java.lang.Object)", "public org.bson.BsonBinary getBinary(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isNull(java.lang.Object)", "public boolean isNull(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDocument(java.lang.Object)", "public boolean isDocument(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isArray(java.lang.Object)", "public boolean isArray(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isNumber(java.lang.Object)", "public boolean isNumber(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isInt32(java.lang.Object)", "public boolean isInt32(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isInt64(java.lang.Object)", "public boolean isInt64(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDouble(java.lang.Object)", "public boolean isDouble(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isBoolean(java.lang.Object)", "public boolean isBoolean(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isString(java.lang.Object)", "public boolean isString(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDateTime(java.lang.Object)", "public boolean isDateTime(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isTimestamp(java.lang.Object)", "public boolean isTimestamp(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isObjectId(java.lang.Object)", "public boolean isObjectId(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isBinary(java.lang.Object)", "public boolean isBinary(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocument.get(java.lang.Object, org.bson.BsonValue)", "public org.bson.BsonValue get(java.lang.Object, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.getDocument(java.lang.Object, org.bson.BsonDocument)", "public org.bson.BsonDocument getDocument(java.lang.Object, org.bson.BsonDocument)"], ["org.bson.BsonArray", "org.bson.BsonDocument.getArray(java.lang.Object, org.bson.BsonArray)", "public org.bson.BsonArray getArray(java.lang.Object, org.bson.BsonArray)"], ["org.bson.BsonNumber", "org.bson.BsonDocument.getNumber(java.lang.Object, org.bson.BsonNumber)", "public org.bson.BsonNumber getNumber(java.lang.Object, org.bson.BsonNumber)"], ["org.bson.BsonInt32", "org.bson.BsonDocument.getInt32(java.lang.Object, org.bson.BsonInt32)", "public org.bson.BsonInt32 getInt32(java.lang.Object, org.bson.BsonInt32)"], ["org.bson.BsonInt64", "org.bson.BsonDocument.getInt64(java.lang.Object, org.bson.BsonInt64)", "public org.bson.BsonInt64 getInt64(java.lang.Object, org.bson.BsonInt64)"], ["org.bson.BsonDouble", "org.bson.BsonDocument.getDouble(java.lang.Object, org.bson.BsonDouble)", "public org.bson.BsonDouble getDouble(java.lang.Object, org.bson.BsonDouble)"], ["org.bson.BsonBoolean", "org.bson.BsonDocument.getBoolean(java.lang.Object, org.bson.BsonBoolean)", "public org.bson.BsonBoolean getBoolean(java.lang.Object, org.bson.BsonBoolean)"], ["org.bson.BsonString", "org.bson.BsonDocument.getString(java.lang.Object, org.bson.BsonString)", "public org.bson.BsonString getString(java.lang.Object, org.bson.BsonString)"], ["org.bson.BsonDateTime", "org.bson.BsonDocument.getDateTime(java.lang.Object, org.bson.BsonDateTime)", "public org.bson.BsonDateTime getDateTime(java.lang.Object, org.bson.BsonDateTime)"], ["org.bson.BsonTimestamp", "org.bson.BsonDocument.getTimestamp(java.lang.Object, org.bson.BsonTimestamp)", "public org.bson.BsonTimestamp getTimestamp(java.lang.Object, org.bson.BsonTimestamp)"], ["org.bson.BsonObjectId", "org.bson.BsonDocument.getObjectId(java.lang.Object, org.bson.BsonObjectId)", "public org.bson.BsonObjectId getObjectId(java.lang.Object, org.bson.BsonObjectId)"], ["org.bson.BsonBinary", "org.bson.BsonDocument.getBinary(java.lang.Object, org.bson.BsonBinary)", "public org.bson.BsonBinary getBinary(java.lang.Object, org.bson.BsonBinary)"], ["org.bson.BsonRegularExpression", "org.bson.BsonDocument.getRegularExpression(java.lang.Object, org.bson.BsonRegularExpression)", "public org.bson.BsonRegularExpression getRegularExpression(java.lang.Object, org.bson.BsonRegularExpression)"], ["org.bson.BsonValue", "org.bson.BsonDocument.put(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonValue put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonDocument.remove(java.lang.Object)", "public org.bson.BsonValue remove(java.lang.Object)"], ["void", "org.bson.BsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)", "public void putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["void", "org.bson.BsonDocument.clear()", "public void clear()"], ["java.util.Set<java.lang.String>", "org.bson.BsonDocument.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Collection<org.bson.BsonValue>", "org.bson.BsonDocument.values()", "public java.util.Collection<org.bson.BsonValue> values()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.BsonDocument.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>> entrySet()"], ["org.bson.BsonDocument", "org.bson.BsonDocument.append(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonDocument append(java.lang.String, org.bson.BsonValue)"], ["boolean", "org.bson.BsonDocument.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDocument.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDocument.toJson()", "public java.lang.String toJson()"], ["java.lang.String", "org.bson.BsonDocument.toJson(org.bson.json.JsonWriterSettings)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "org.bson.BsonDocument.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.bson.BsonDocument.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocument.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocument.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["boolean", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.hasNext()", "public boolean hasNext()"], ["T", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.next()", "public T next()"], ["void", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.remove()", "public void remove()"], ["java.util.Map$Entry<java.lang.String, org.bson.BsonValue>", "org.bson.BsonDocumentReader$Context.getNextElement()", "public java.util.Map$Entry<java.lang.String, org.bson.BsonValue> getNextElement()"], ["org.bson.BsonValue", "org.bson.BsonDocumentReader$Context.getNextValue()", "public org.bson.BsonValue getNextValue()"], ["org.bson.BsonDocumentReader", "org.bson.BsonDocumentReader(org.bson.BsonDocument)", "public org.bson.BsonDocumentReader(org.bson.BsonDocument)"], ["org.bson.BsonType", "org.bson.BsonDocumentReader.readBsonType()", "public org.bson.BsonType readBsonType()"], ["void", "org.bson.BsonDocumentReader.mark()", "public void mark()"], ["void", "org.bson.BsonDocumentReader.reset()", "public void reset()"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWrapper.asBsonDocument(java.lang.Object, org.bson.codecs.configuration.CodecRegistry)", "public static org.bson.BsonDocument asBsonDocument(java.lang.Object, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonDocumentWrapper", "org.bson.BsonDocumentWrapper(T, org.bson.codecs.Encoder<T>)", "public org.bson.BsonDocumentWrapper(T, org.bson.codecs.Encoder<T>)"], ["T", "org.bson.BsonDocumentWrapper.getWrappedDocument()", "public T getWrappedDocument()"], ["org.bson.codecs.Encoder<T>", "org.bson.BsonDocumentWrapper.getEncoder()", "public org.bson.codecs.Encoder<T> getEncoder()"], ["boolean", "org.bson.BsonDocumentWrapper.isUnwrapped()", "public boolean isUnwrapped()"], ["int", "org.bson.BsonDocumentWrapper.size()", "public int size()"], ["boolean", "org.bson.BsonDocumentWrapper.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.BsonDocumentWrapper.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.BsonDocumentWrapper.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.get(java.lang.Object)", "public org.bson.BsonValue get(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.put(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonValue put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.remove(java.lang.Object)", "public org.bson.BsonValue remove(java.lang.Object)"], ["void", "org.bson.BsonDocumentWrapper.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)", "public void putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["void", "org.bson.BsonDocumentWrapper.clear()", "public void clear()"], ["java.util.Set<java.lang.String>", "org.bson.BsonDocumentWrapper.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Collection<org.bson.BsonValue>", "org.bson.BsonDocumentWrapper.values()", "public java.util.Collection<org.bson.BsonValue> values()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.BsonDocumentWrapper.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>> entrySet()"], ["boolean", "org.bson.BsonDocumentWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDocumentWrapper.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDocumentWrapper.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["org.bson.BsonDocumentWriter$Context", "org.bson.BsonDocumentWriter$Context(org.bson.BsonDocumentWriter, org.bson.BsonValue, org.bson.BsonContextType, org.bson.BsonDocumentWriter$Context)", "public org.bson.BsonDocumentWriter$Context(org.bson.BsonDocumentWriter, org.bson.BsonValue, org.bson.BsonContextType, org.bson.BsonDocumentWriter$Context)"], ["org.bson.BsonDocumentWriter$Context", "org.bson.BsonDocumentWriter$Context(org.bson.BsonDocumentWriter)", "public org.bson.BsonDocumentWriter$Context(org.bson.BsonDocumentWriter)"], ["org.bson.BsonDocumentWriter", "org.bson.BsonDocumentWriter(org.bson.BsonDocument)", "public org.bson.BsonDocumentWriter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWriter.getDocument()", "public org.bson.BsonDocument getDocument()"], ["void", "org.bson.BsonDocumentWriter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.BsonDocumentWriter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.BsonDocumentWriter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BsonDocumentWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BsonDocumentWriter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.BsonDocumentWriter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.BsonDocumentWriter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BsonDocumentWriter.doWriteUndefined()", "public void doWriteUndefined()"], ["void", "org.bson.BsonDocumentWriter.flush()", "public void flush()"], ["org.bson.BsonDouble", "org.bson.BsonDouble(double)", "public org.bson.BsonDouble(double)"], ["int", "org.bson.BsonDouble.compareTo(org.bson.BsonDouble)", "public int compareTo(org.bson.BsonDouble)"], ["org.bson.BsonType", "org.bson.BsonDouble.getBsonType()", "public org.bson.BsonType getBsonType()"], ["double", "org.bson.BsonDouble.getValue()", "public double getValue()"], ["int", "org.bson.BsonDouble.intValue()", "public int intValue()"], ["long", "org.bson.BsonDouble.longValue()", "public long longValue()"], ["double", "org.bson.BsonDouble.doubleValue()", "public double doubleValue()"], ["boolean", "org.bson.BsonDouble.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDouble.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDouble.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonDouble.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonElement", "org.bson.BsonElement(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonElement(java.lang.String, org.bson.BsonValue)"], ["java.lang.String", "org.bson.BsonElement.getName()", "public java.lang.String getName()"], ["org.bson.BsonValue", "org.bson.BsonElement.getValue()", "public org.bson.BsonValue getValue()"], ["org.bson.BSONException", "org.bson.BSONException(java.lang.String)", "public org.bson.BSONException(java.lang.String)"], ["org.bson.BSONException", "org.bson.BSONException(int, java.lang.String)", "public org.bson.BSONException(int, java.lang.String)"], ["org.bson.BSONException", "org.bson.BSONException(java.lang.String, java.lang.Throwable)", "public org.bson.BSONException(java.lang.String, java.lang.Throwable)"], ["org.bson.BSONException", "org.bson.BSONException(int, java.lang.String, java.lang.Throwable)", "public org.bson.BSONException(int, java.lang.String, java.lang.Throwable)"], ["java.lang.Integer", "org.bson.BSONException.getErrorCode()", "public java.lang.Integer getErrorCode()"], ["boolean", "org.bson.BSONException.hasErrorCode()", "public boolean hasErrorCode()"], ["org.bson.BsonInt32", "org.bson.BsonInt32(int)", "public org.bson.BsonInt32(int)"], ["int", "org.bson.BsonInt32.compareTo(org.bson.BsonInt32)", "public int compareTo(org.bson.BsonInt32)"], ["org.bson.BsonType", "org.bson.BsonInt32.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonInt32.getValue()", "public int getValue()"], ["int", "org.bson.BsonInt32.intValue()", "public int intValue()"], ["long", "org.bson.BsonInt32.longValue()", "public long longValue()"], ["double", "org.bson.BsonInt32.doubleValue()", "public double doubleValue()"], ["boolean", "org.bson.BsonInt32.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonInt32.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonInt32.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonInt32.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonInt64", "org.bson.BsonInt64(long)", "public org.bson.BsonInt64(long)"], ["int", "org.bson.BsonInt64.compareTo(org.bson.BsonInt64)", "public int compareTo(org.bson.BsonInt64)"], ["org.bson.BsonType", "org.bson.BsonInt64.getBsonType()", "public org.bson.BsonType getBsonType()"], ["long", "org.bson.BsonInt64.getValue()", "public long getValue()"], ["int", "org.bson.BsonInt64.intValue()", "public int intValue()"], ["long", "org.bson.BsonInt64.longValue()", "public long longValue()"], ["double", "org.bson.BsonInt64.doubleValue()", "public double doubleValue()"], ["boolean", "org.bson.BsonInt64.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonInt64.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonInt64.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonInt64.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonInvalidOperationException", "org.bson.BsonInvalidOperationException(java.lang.String)", "public org.bson.BsonInvalidOperationException(java.lang.String)"], ["org.bson.BsonJavaScript", "org.bson.BsonJavaScript(java.lang.String)", "public org.bson.BsonJavaScript(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonJavaScript.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonJavaScript.getCode()", "public java.lang.String getCode()"], ["boolean", "org.bson.BsonJavaScript.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonJavaScript.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonJavaScript.toString()", "public java.lang.String toString()"], ["org.bson.BsonJavaScriptWithScope", "org.bson.BsonJavaScriptWithScope(java.lang.String, org.bson.BsonDocument)", "public org.bson.BsonJavaScriptWithScope(java.lang.String, org.bson.BsonDocument)"], ["org.bson.BsonType", "org.bson.BsonJavaScriptWithScope.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonJavaScriptWithScope.getCode()", "public java.lang.String getCode()"], ["org.bson.BsonDocument", "org.bson.BsonJavaScriptWithScope.getScope()", "public org.bson.BsonDocument getScope()"], ["boolean", "org.bson.BsonJavaScriptWithScope.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonJavaScriptWithScope.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonJavaScriptWithScope.toString()", "public java.lang.String toString()"], ["org.bson.BsonMaxKey", "org.bson.BsonMaxKey()", "public org.bson.BsonMaxKey()"], ["org.bson.BsonType", "org.bson.BsonMaxKey.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonMaxKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonMaxKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonMaxKey.toString()", "public java.lang.String toString()"], ["org.bson.BsonMinKey", "org.bson.BsonMinKey()", "public org.bson.BsonMinKey()"], ["org.bson.BsonType", "org.bson.BsonMinKey.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonMinKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonMinKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonMinKey.toString()", "public java.lang.String toString()"], ["org.bson.BsonNull", "org.bson.BsonNull()", "public org.bson.BsonNull()"], ["org.bson.BsonType", "org.bson.BsonNull.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonNull.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonNull.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonNull.toString()", "public java.lang.String toString()"], ["org.bson.BsonNumber", "org.bson.BsonNumber()", "public org.bson.BsonNumber()"], ["org.bson.BsonObjectId", "org.bson.BsonObjectId(org.bson.types.ObjectId)", "public org.bson.BsonObjectId(org.bson.types.ObjectId)"], ["org.bson.types.ObjectId", "org.bson.BsonObjectId.getValue()", "public org.bson.types.ObjectId getValue()"], ["org.bson.BsonType", "org.bson.BsonObjectId.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonObjectId.compareTo(org.bson.BsonObjectId)", "public int compareTo(org.bson.BsonObjectId)"], ["boolean", "org.bson.BsonObjectId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonObjectId.hashCode()", "public int hashCode()"], ["int", "org.bson.BsonObjectId.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonRegularExpression", "org.bson.BsonRegularExpression(java.lang.String, java.lang.String)", "public org.bson.BsonRegularExpression(java.lang.String, java.lang.String)"], ["org.bson.BsonRegularExpression", "org.bson.BsonRegularExpression(java.lang.String)", "public org.bson.BsonRegularExpression(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonRegularExpression.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonRegularExpression.getPattern()", "public java.lang.String getPattern()"], ["java.lang.String", "org.bson.BsonRegularExpression.getOptions()", "public java.lang.String getOptions()"], ["boolean", "org.bson.BsonRegularExpression.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonRegularExpression.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonRegularExpression.toString()", "public java.lang.String toString()"], ["org.bson.BsonSerializationException", "org.bson.BsonSerializationException(java.lang.String)", "public org.bson.BsonSerializationException(java.lang.String)"], ["org.bson.BsonString", "org.bson.BsonString(java.lang.String)", "public org.bson.BsonString(java.lang.String)"], ["int", "org.bson.BsonString.compareTo(org.bson.BsonString)", "public int compareTo(org.bson.BsonString)"], ["org.bson.BsonType", "org.bson.BsonString.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonString.getValue()", "public java.lang.String getValue()"], ["boolean", "org.bson.BsonString.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonString.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonString.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonString.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonSymbol", "org.bson.BsonSymbol(java.lang.String)", "public org.bson.BsonSymbol(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonSymbol.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonSymbol.getSymbol()", "public java.lang.String getSymbol()"], ["boolean", "org.bson.BsonSymbol.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonSymbol.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonSymbol.toString()", "public java.lang.String toString()"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp()", "public org.bson.BsonTimestamp()"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp(int, int)", "public org.bson.BsonTimestamp(int, int)"], ["org.bson.BsonType", "org.bson.BsonTimestamp.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonTimestamp.getTime()", "public int getTime()"], ["int", "org.bson.BsonTimestamp.getInc()", "public int getInc()"], ["java.lang.String", "org.bson.BsonTimestamp.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonTimestamp.compareTo(org.bson.BsonTimestamp)", "public int compareTo(org.bson.BsonTimestamp)"], ["boolean", "org.bson.BsonTimestamp.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonTimestamp.hashCode()", "public int hashCode()"], ["int", "org.bson.BsonTimestamp.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonType[]", "org.bson.BsonType.values()", "public static org.bson.BsonType[] values()"], ["org.bson.BsonType", "org.bson.BsonType.valueOf(java.lang.String)", "public static org.bson.BsonType valueOf(java.lang.String)"], ["int", "org.bson.BsonType.getValue()", "public int getValue()"], ["org.bson.BsonType", "org.bson.BsonType.findByValue(int)", "public static org.bson.BsonType findByValue(int)"], ["boolean", "org.bson.BsonType.isContainer()", "public boolean isContainer()"], ["org.bson.BsonUndefined", "org.bson.BsonUndefined()", "public org.bson.BsonUndefined()"], ["org.bson.BsonType", "org.bson.BsonUndefined.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonUndefined.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonUndefined.hashCode()", "public int hashCode()"], ["org.bson.BsonDocument", "org.bson.BsonValue.asDocument()", "public org.bson.BsonDocument asDocument()"], ["org.bson.BsonArray", "org.bson.BsonValue.asArray()", "public org.bson.BsonArray asArray()"], ["org.bson.BsonString", "org.bson.BsonValue.asString()", "public org.bson.BsonString asString()"], ["org.bson.BsonNumber", "org.bson.BsonValue.asNumber()", "public org.bson.BsonNumber asNumber()"], ["org.bson.BsonInt32", "org.bson.BsonValue.asInt32()", "public org.bson.BsonInt32 asInt32()"], ["org.bson.BsonInt64", "org.bson.BsonValue.asInt64()", "public org.bson.BsonInt64 asInt64()"], ["org.bson.BsonDouble", "org.bson.BsonValue.asDouble()", "public org.bson.BsonDouble asDouble()"], ["org.bson.BsonBoolean", "org.bson.BsonValue.asBoolean()", "public org.bson.BsonBoolean asBoolean()"], ["org.bson.BsonObjectId", "org.bson.BsonValue.asObjectId()", "public org.bson.BsonObjectId asObjectId()"], ["org.bson.BsonDbPointer", "org.bson.BsonValue.asDBPointer()", "public org.bson.BsonDbPointer asDBPointer()"], ["org.bson.BsonTimestamp", "org.bson.BsonValue.asTimestamp()", "public org.bson.BsonTimestamp asTimestamp()"], ["org.bson.BsonBinary", "org.bson.BsonValue.asBinary()", "public org.bson.BsonBinary asBinary()"], ["org.bson.BsonDateTime", "org.bson.BsonValue.asDateTime()", "public org.bson.BsonDateTime asDateTime()"], ["org.bson.BsonSymbol", "org.bson.BsonValue.asSymbol()", "public org.bson.BsonSymbol asSymbol()"], ["org.bson.BsonRegularExpression", "org.bson.BsonValue.asRegularExpression()", "public org.bson.BsonRegularExpression asRegularExpression()"], ["org.bson.BsonJavaScript", "org.bson.BsonValue.asJavaScript()", "public org.bson.BsonJavaScript asJavaScript()"], ["org.bson.BsonJavaScriptWithScope", "org.bson.BsonValue.asJavaScriptWithScope()", "public org.bson.BsonJavaScriptWithScope asJavaScriptWithScope()"], ["boolean", "org.bson.BsonValue.isNull()", "public boolean isNull()"], ["boolean", "org.bson.BsonValue.isDocument()", "public boolean isDocument()"], ["boolean", "org.bson.BsonValue.isArray()", "public boolean isArray()"], ["boolean", "org.bson.BsonValue.isString()", "public boolean isString()"], ["boolean", "org.bson.BsonValue.isNumber()", "public boolean isNumber()"], ["boolean", "org.bson.BsonValue.isInt32()", "public boolean isInt32()"], ["boolean", "org.bson.BsonValue.isInt64()", "public boolean isInt64()"], ["boolean", "org.bson.BsonValue.isDouble()", "public boolean isDouble()"], ["boolean", "org.bson.BsonValue.isBoolean()", "public boolean isBoolean()"], ["boolean", "org.bson.BsonValue.isObjectId()", "public boolean isObjectId()"], ["boolean", "org.bson.BsonValue.isDBPointer()", "public boolean isDBPointer()"], ["boolean", "org.bson.BsonValue.isTimestamp()", "public boolean isTimestamp()"], ["boolean", "org.bson.BsonValue.isBinary()", "public boolean isBinary()"], ["boolean", "org.bson.BsonValue.isDateTime()", "public boolean isDateTime()"], ["boolean", "org.bson.BsonValue.isSymbol()", "public boolean isSymbol()"], ["boolean", "org.bson.BsonValue.isRegularExpression()", "public boolean isRegularExpression()"], ["boolean", "org.bson.BsonValue.isJavaScript()", "public boolean isJavaScript()"], ["boolean", "org.bson.BsonValue.isJavaScriptWithScope()", "public boolean isJavaScriptWithScope()"], ["org.bson.BsonWriterSettings", "org.bson.BsonWriterSettings(int)", "public org.bson.BsonWriterSettings(int)"], ["org.bson.BsonWriterSettings", "org.bson.BsonWriterSettings()", "public org.bson.BsonWriterSettings()"], ["int", "org.bson.BsonWriterSettings.getMaxSerializationDepth()", "public int getMaxSerializationDepth()"], ["org.bson.ByteBufNIO", "org.bson.ByteBufNIO(java.nio.ByteBuffer)", "public org.bson.ByteBufNIO(java.nio.ByteBuffer)"], ["int", "org.bson.ByteBufNIO.getReferenceCount()", "public int getReferenceCount()"], ["org.bson.ByteBufNIO", "org.bson.ByteBufNIO.retain()", "public org.bson.ByteBufNIO retain()"], ["void", "org.bson.ByteBufNIO.release()", "public void release()"], ["int", "org.bson.ByteBufNIO.capacity()", "public int capacity()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(int, byte)", "public org.bson.ByteBuf put(int, byte)"], ["int", "org.bson.ByteBufNIO.remaining()", "public int remaining()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(byte[], int, int)", "public org.bson.ByteBuf put(byte[], int, int)"], ["boolean", "org.bson.ByteBufNIO.hasRemaining()", "public boolean hasRemaining()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(byte)", "public org.bson.ByteBuf put(byte)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.flip()", "public org.bson.ByteBuf flip()"], ["byte[]", "org.bson.ByteBufNIO.array()", "public byte[] array()"], ["int", "org.bson.ByteBufNIO.limit()", "public int limit()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.position(int)", "public org.bson.ByteBuf position(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.clear()", "public org.bson.ByteBuf clear()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.order(java.nio.ByteOrder)", "public org.bson.ByteBuf order(java.nio.ByteOrder)"], ["byte", "org.bson.ByteBufNIO.get()", "public byte get()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(byte[])", "public org.bson.ByteBuf get(byte[])"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(byte[], int, int)", "public org.bson.ByteBuf get(byte[], int, int)"], ["long", "org.bson.ByteBufNIO.getLong()", "public long getLong()"], ["double", "org.bson.ByteBufNIO.getDouble()", "public double getDouble()"], ["int", "org.bson.ByteBufNIO.getInt()", "public int getInt()"], ["int", "org.bson.ByteBufNIO.position()", "public int position()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.limit(int)", "public org.bson.ByteBuf limit(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.asReadOnly()", "public org.bson.ByteBuf asReadOnly()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.duplicate()", "public org.bson.ByteBuf duplicate()"], ["java.nio.ByteBuffer", "org.bson.ByteBufNIO.asNIO()", "public java.nio.ByteBuffer asNIO()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.retain()", "public org.bson.ByteBuf retain()"], ["org.bson.Document", "org.bson.Document()", "public org.bson.Document()"], ["org.bson.Document", "org.bson.Document(java.lang.String, java.lang.Object)", "public org.bson.Document(java.lang.String, java.lang.Object)"], ["org.bson.Document", "org.bson.Document(java.util.Map<java.lang.String, java.lang.Object>)", "public org.bson.Document(java.util.Map<java.lang.String, java.lang.Object>)"], ["org.bson.Document", "org.bson.Document.parse(java.lang.String)", "public static org.bson.Document parse(java.lang.String)"], ["org.bson.Document", "org.bson.Document.parse(java.lang.String, org.bson.codecs.Decoder<org.bson.Document>)", "public static org.bson.Document parse(java.lang.String, org.bson.codecs.Decoder<org.bson.Document>)"], ["<C> org.bson.BsonDocument", "org.bson.Document.toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)", "public <C> org.bson.BsonDocument toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.Document", "org.bson.Document.append(java.lang.String, java.lang.Object)", "public org.bson.Document append(java.lang.String, java.lang.Object)"], ["<T> T", "org.bson.Document.get(java.lang.Object, java.lang.Class<T>)", "public <T> T get(java.lang.Object, java.lang.Class<T>)"], ["java.lang.Integer", "org.bson.Document.getInteger(java.lang.Object)", "public java.lang.Integer getInteger(java.lang.Object)"], ["int", "org.bson.Document.getInteger(java.lang.Object, int)", "public int getInteger(java.lang.Object, int)"], ["java.lang.Long", "org.bson.Document.getLong(java.lang.Object)", "public java.lang.Long getLong(java.lang.Object)"], ["java.lang.Double", "org.bson.Document.getDouble(java.lang.Object)", "public java.lang.Double getDouble(java.lang.Object)"], ["java.lang.String", "org.bson.Document.getString(java.lang.Object)", "public java.lang.String getString(java.lang.Object)"], ["java.lang.Boolean", "org.bson.Document.getBoolean(java.lang.Object)", "public java.lang.Boolean getBoolean(java.lang.Object)"], ["boolean", "org.bson.Document.getBoolean(java.lang.Object, boolean)", "public boolean getBoolean(java.lang.Object, boolean)"], ["org.bson.types.ObjectId", "org.bson.Document.getObjectId(java.lang.Object)", "public org.bson.types.ObjectId getObjectId(java.lang.Object)"], ["java.util.Date", "org.bson.Document.getDate(java.lang.Object)", "public java.util.Date getDate(java.lang.Object)"], ["java.lang.String", "org.bson.Document.toJson()", "public java.lang.String toJson()"], ["java.lang.String", "org.bson.Document.toJson(org.bson.json.JsonWriterSettings)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "org.bson.Document.toJson(org.bson.codecs.Encoder<org.bson.Document>)", "public java.lang.String toJson(org.bson.codecs.Encoder<org.bson.Document>)"], ["java.lang.String", "org.bson.Document.toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<org.bson.Document>)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<org.bson.Document>)"], ["int", "org.bson.Document.size()", "public int size()"], ["boolean", "org.bson.Document.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.Document.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.bson.Document.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.lang.Object", "org.bson.Document.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.lang.Object", "org.bson.Document.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.bson.Document.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["void", "org.bson.Document.putAll(java.util.Map<? extends java.lang.String, ?>)", "public void putAll(java.util.Map<? extends java.lang.String, ?>)"], ["void", "org.bson.Document.clear()", "public void clear()"], ["java.util.Set<java.lang.String>", "org.bson.Document.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Collection<java.lang.Object>", "org.bson.Document.values()", "public java.util.Collection<java.lang.Object> values()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.Document.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet()"], ["boolean", "org.bson.Document.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.Document.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.Document.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.bson.Document.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["org.bson.EmptyBSONCallback", "org.bson.EmptyBSONCallback()", "public org.bson.EmptyBSONCallback()"], ["void", "org.bson.EmptyBSONCallback.objectStart()", "public void objectStart()"], ["void", "org.bson.EmptyBSONCallback.objectStart(java.lang.String)", "public void objectStart(java.lang.String)"], ["java.lang.Object", "org.bson.EmptyBSONCallback.objectDone()", "public java.lang.Object objectDone()"], ["void", "org.bson.EmptyBSONCallback.reset()", "public void reset()"], ["java.lang.Object", "org.bson.EmptyBSONCallback.get()", "public java.lang.Object get()"], ["org.bson.BSONCallback", "org.bson.EmptyBSONCallback.createBSONCallback()", "public org.bson.BSONCallback createBSONCallback()"], ["void", "org.bson.EmptyBSONCallback.arrayStart()", "public void arrayStart()"], ["void", "org.bson.EmptyBSONCallback.arrayStart(java.lang.String)", "public void arrayStart(java.lang.String)"], ["java.lang.Object", "org.bson.EmptyBSONCallback.arrayDone()", "public java.lang.Object arrayDone()"], ["void", "org.bson.EmptyBSONCallback.gotNull(java.lang.String)", "public void gotNull(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotUndefined(java.lang.String)", "public void gotUndefined(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotMinKey(java.lang.String)", "public void gotMinKey(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotMaxKey(java.lang.String)", "public void gotMaxKey(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotBoolean(java.lang.String, boolean)", "public void gotBoolean(java.lang.String, boolean)"], ["void", "org.bson.EmptyBSONCallback.gotDouble(java.lang.String, double)", "public void gotDouble(java.lang.String, double)"], ["void", "org.bson.EmptyBSONCallback.gotInt(java.lang.String, int)", "public void gotInt(java.lang.String, int)"], ["void", "org.bson.EmptyBSONCallback.gotLong(java.lang.String, long)", "public void gotLong(java.lang.String, long)"], ["void", "org.bson.EmptyBSONCallback.gotDate(java.lang.String, long)", "public void gotDate(java.lang.String, long)"], ["void", "org.bson.EmptyBSONCallback.gotString(java.lang.String, java.lang.String)", "public void gotString(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotSymbol(java.lang.String, java.lang.String)", "public void gotSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotRegex(java.lang.String, java.lang.String, java.lang.String)", "public void gotRegex(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotTimestamp(java.lang.String, int, int)", "public void gotTimestamp(java.lang.String, int, int)"], ["void", "org.bson.EmptyBSONCallback.gotObjectId(java.lang.String, org.bson.types.ObjectId)", "public void gotObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.EmptyBSONCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)", "public void gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.EmptyBSONCallback.gotBinaryArray(java.lang.String, byte[])", "public void gotBinaryArray(java.lang.String, byte[])"], ["void", "org.bson.EmptyBSONCallback.gotBinary(java.lang.String, byte, byte[])", "public void gotBinary(java.lang.String, byte, byte[])"], ["void", "org.bson.EmptyBSONCallback.gotUUID(java.lang.String, long, long)", "public void gotUUID(java.lang.String, long, long)"], ["void", "org.bson.EmptyBSONCallback.gotCode(java.lang.String, java.lang.String)", "public void gotCode(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)", "public void gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)"], ["org.bson.LazyBSONCallback", "org.bson.LazyBSONCallback()", "public org.bson.LazyBSONCallback()"], ["void", "org.bson.LazyBSONCallback.reset()", "public void reset()"], ["java.lang.Object", "org.bson.LazyBSONCallback.get()", "public java.lang.Object get()"], ["void", "org.bson.LazyBSONCallback.gotBinary(java.lang.String, byte, byte[])", "public void gotBinary(java.lang.String, byte, byte[])"], ["java.lang.Object", "org.bson.LazyBSONCallback.createObject(byte[], int)", "public java.lang.Object createObject(byte[], int)"], ["java.util.List", "org.bson.LazyBSONCallback.createArray(byte[], int)", "public java.util.List createArray(byte[], int)"], ["java.lang.Object", "org.bson.LazyBSONCallback.createDBRef(java.lang.String, org.bson.types.ObjectId)", "public java.lang.Object createDBRef(java.lang.String, org.bson.types.ObjectId)"], ["org.bson.LazyBSONDecoder", "org.bson.LazyBSONDecoder()", "public org.bson.LazyBSONDecoder()"], ["org.bson.BSONObject", "org.bson.LazyBSONDecoder.readObject(byte[])", "public org.bson.BSONObject readObject(byte[])"], ["org.bson.BSONObject", "org.bson.LazyBSONDecoder.readObject(java.io.InputStream)", "public org.bson.BSONObject readObject(java.io.InputStream) throws java.io.IOException"], ["int", "org.bson.LazyBSONDecoder.decode(byte[], org.bson.BSONCallback)", "public int decode(byte[], org.bson.BSONCallback)"], ["int", "org.bson.LazyBSONDecoder.decode(java.io.InputStream, org.bson.BSONCallback)", "public int decode(java.io.InputStream, org.bson.BSONCallback) throws java.io.IOException"], ["org.bson.LazyBSONList$LazyBSONListIterator", "org.bson.LazyBSONList$LazyBSONListIterator(org.bson.LazyBSONList)", "public org.bson.LazyBSONList$LazyBSONListIterator(org.bson.LazyBSONList)"], ["boolean", "org.bson.LazyBSONList$LazyBSONListIterator.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.bson.LazyBSONList$LazyBSONListIterator.next()", "public java.lang.Object next()"], ["void", "org.bson.LazyBSONList$LazyBSONListIterator.remove()", "public void remove()"], ["org.bson.LazyBSONList", "org.bson.LazyBSONList(byte[], org.bson.LazyBSONCallback)", "public org.bson.LazyBSONList(byte[], org.bson.LazyBSONCallback)"], ["org.bson.LazyBSONList", "org.bson.LazyBSONList(byte[], int, org.bson.LazyBSONCallback)", "public org.bson.LazyBSONList(byte[], int, org.bson.LazyBSONCallback)"], ["int", "org.bson.LazyBSONList.size()", "public int size()"], ["boolean", "org.bson.LazyBSONList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "org.bson.LazyBSONList.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.bson.LazyBSONList.containsAll(java.util.Collection)", "public boolean containsAll(java.util.Collection)"], ["java.lang.Object", "org.bson.LazyBSONList.get(int)", "public java.lang.Object get(int)"], ["int", "org.bson.LazyBSONList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.bson.LazyBSONList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator", "org.bson.LazyBSONList.listIterator()", "public java.util.ListIterator listIterator()"], ["java.util.ListIterator", "org.bson.LazyBSONList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["boolean", "org.bson.LazyBSONList.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.bson.LazyBSONList.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.LazyBSONList.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.addAll(int, java.util.Collection)", "public boolean addAll(int, java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["void", "org.bson.LazyBSONList.clear()", "public void clear()"], ["java.lang.Object", "org.bson.LazyBSONList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["void", "org.bson.LazyBSONList.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "org.bson.LazyBSONList.remove(int)", "public java.lang.Object remove(int)"], ["java.util.List", "org.bson.LazyBSONList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.lang.Object[]", "org.bson.LazyBSONList.toArray()", "public java.lang.Object[] toArray()"], ["java.lang.Object[]", "org.bson.LazyBSONList.toArray(java.lang.Object[])", "public java.lang.Object[] toArray(java.lang.Object[])"], ["org.bson.LazyBSONObject", "org.bson.LazyBSONObject(byte[], org.bson.LazyBSONCallback)", "public org.bson.LazyBSONObject(byte[], org.bson.LazyBSONCallback)"], ["org.bson.LazyBSONObject", "org.bson.LazyBSONObject(byte[], int, org.bson.LazyBSONCallback)", "public org.bson.LazyBSONObject(byte[], int, org.bson.LazyBSONCallback)"], ["java.lang.Object", "org.bson.LazyBSONObject.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["boolean", "org.bson.LazyBSONObject.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "org.bson.LazyBSONObject.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.bson.LazyBSONObject.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "org.bson.LazyBSONObject.isEmpty()", "public boolean isEmpty()"], ["int", "org.bson.LazyBSONObject.getBSONSize()", "public int getBSONSize()"], ["int", "org.bson.LazyBSONObject.pipe(java.io.OutputStream)", "public int pipe(java.io.OutputStream) throws java.io.IOException"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.LazyBSONObject.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet()"], ["int", "org.bson.LazyBSONObject.hashCode()", "public int hashCode()"], ["boolean", "org.bson.LazyBSONObject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.bson.LazyBSONObject.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.bson.LazyBSONObject.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["void", "org.bson.LazyBSONObject.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["void", "org.bson.LazyBSONObject.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.lang.Object", "org.bson.LazyBSONObject.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["java.util.Map", "org.bson.LazyBSONObject.toMap()", "public java.util.Map toMap()"], ["boolean", "org.bson.NoOpFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "org.bson.NoOpFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["org.bson.RawBsonDocument", "org.bson.RawBsonDocument(byte[])", "public org.bson.RawBsonDocument(byte[])"], ["<T>", "org.bson.RawBsonDocument.org.bson.RawBsonDocument(T, org.bson.codecs.Codec<T>)", "public <T> org.bson.RawBsonDocument(T, org.bson.codecs.Codec<T>)"], ["org.bson.ByteBuf", "org.bson.RawBsonDocument.getByteBuffer()", "public org.bson.ByteBuf getByteBuffer()"], ["<T> T", "org.bson.RawBsonDocument.decode(org.bson.codecs.Codec<T>)", "public <T> T decode(org.bson.codecs.Codec<T>)"], ["void", "org.bson.RawBsonDocument.clear()", "public void clear()"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.put(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonValue put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.RawBsonDocument.append(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonDocument append(java.lang.String, org.bson.BsonValue)"], ["void", "org.bson.RawBsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)", "public void putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.remove(java.lang.Object)", "public org.bson.BsonValue remove(java.lang.Object)"], ["boolean", "org.bson.RawBsonDocument.isEmpty()", "public boolean isEmpty()"], ["int", "org.bson.RawBsonDocument.size()", "public int size()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.RawBsonDocument.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>> entrySet()"], ["java.util.Collection<org.bson.BsonValue>", "org.bson.RawBsonDocument.values()", "public java.util.Collection<org.bson.BsonValue> values()"], ["java.util.Set<java.lang.String>", "org.bson.RawBsonDocument.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "org.bson.RawBsonDocument.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.RawBsonDocument.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.get(java.lang.Object)", "public org.bson.BsonValue get(java.lang.Object)"], ["boolean", "org.bson.RawBsonDocument.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.RawBsonDocument.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.bson.RawBsonDocument.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.lang.String", "org.bson.StringUtils.join(java.lang.String, java.util.Collection<?>)", "public static java.lang.String join(java.lang.String, java.util.Collection<?>)"], ["org.bson.UuidRepresentation[]", "org.bson.UuidRepresentation.values()", "public static org.bson.UuidRepresentation[] values()"], ["org.bson.UuidRepresentation", "org.bson.UuidRepresentation.valueOf(java.lang.String)", "public static org.bson.UuidRepresentation valueOf(java.lang.String)"], ["<T> T", "org.bson.assertions.Assertions.notNull(java.lang.String, T)", "public static <T> T notNull(java.lang.String, T)"], ["void", "org.bson.assertions.Assertions.isTrue(java.lang.String, boolean)", "public static void isTrue(java.lang.String, boolean)"], ["void", "org.bson.assertions.Assertions.isTrueArgument(java.lang.String, boolean)", "public static void isTrueArgument(java.lang.String, boolean)"], ["<T> T", "org.bson.assertions.Assertions.convertToType(java.lang.Class<T>, java.lang.Object, java.lang.String)", "public static <T> T convertToType(java.lang.Class<T>, java.lang.Object, java.lang.String)"], ["org.bson.codecs.AtomicBooleanCodec", "org.bson.codecs.AtomicBooleanCodec()", "public org.bson.codecs.AtomicBooleanCodec()"], ["void", "org.bson.codecs.AtomicBooleanCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicBoolean, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicBoolean, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicBoolean", "org.bson.codecs.AtomicBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.concurrent.atomic.AtomicBoolean decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.concurrent.atomic.AtomicBoolean>", "org.bson.codecs.AtomicBooleanCodec.getEncoderClass()", "public java.lang.Class<java.util.concurrent.atomic.AtomicBoolean> getEncoderClass()"], ["void", "org.bson.codecs.AtomicBooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.AtomicIntegerCodec", "org.bson.codecs.AtomicIntegerCodec()", "public org.bson.codecs.AtomicIntegerCodec()"], ["void", "org.bson.codecs.AtomicIntegerCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicInteger, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicInteger, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicInteger", "org.bson.codecs.AtomicIntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.concurrent.atomic.AtomicInteger decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.concurrent.atomic.AtomicInteger>", "org.bson.codecs.AtomicIntegerCodec.getEncoderClass()", "public java.lang.Class<java.util.concurrent.atomic.AtomicInteger> getEncoderClass()"], ["void", "org.bson.codecs.AtomicIntegerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicIntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.AtomicLongCodec", "org.bson.codecs.AtomicLongCodec()", "public org.bson.codecs.AtomicLongCodec()"], ["void", "org.bson.codecs.AtomicLongCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicLong, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicLong, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicLong", "org.bson.codecs.AtomicLongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.concurrent.atomic.AtomicLong decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.concurrent.atomic.AtomicLong>", "org.bson.codecs.AtomicLongCodec.getEncoderClass()", "public java.lang.Class<java.util.concurrent.atomic.AtomicLong> getEncoderClass()"], ["void", "org.bson.codecs.AtomicLongCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicLongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BinaryCodec", "org.bson.codecs.BinaryCodec()", "public org.bson.codecs.BinaryCodec()"], ["void", "org.bson.codecs.BinaryCodec.encode(org.bson.BsonWriter, org.bson.types.Binary, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.Binary, org.bson.codecs.EncoderContext)"], ["org.bson.types.Binary", "org.bson.codecs.BinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.Binary decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.Binary>", "org.bson.codecs.BinaryCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.Binary> getEncoderClass()"], ["void", "org.bson.codecs.BinaryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BooleanCodec", "org.bson.codecs.BooleanCodec()", "public org.bson.codecs.BooleanCodec()"], ["void", "org.bson.codecs.BooleanCodec.encode(org.bson.BsonWriter, java.lang.Boolean, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Boolean, org.bson.codecs.EncoderContext)"], ["java.lang.Boolean", "org.bson.codecs.BooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Boolean decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Boolean>", "org.bson.codecs.BooleanCodec.getEncoderClass()", "public java.lang.Class<java.lang.Boolean> getEncoderClass()"], ["void", "org.bson.codecs.BooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonArrayCodec", "org.bson.codecs.BsonArrayCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonArrayCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonArray", "org.bson.codecs.BsonArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonArray decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonArrayCodec.encode(org.bson.BsonWriter, org.bson.BsonArray, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonArray, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonArray>", "org.bson.codecs.BsonArrayCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonArray> getEncoderClass()"], ["void", "org.bson.codecs.BsonArrayCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonBinaryCodec", "org.bson.codecs.BsonBinaryCodec()", "public org.bson.codecs.BsonBinaryCodec()"], ["void", "org.bson.codecs.BsonBinaryCodec.encode(org.bson.BsonWriter, org.bson.BsonBinary, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonBinary, org.bson.codecs.EncoderContext)"], ["org.bson.BsonBinary", "org.bson.codecs.BsonBinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonBinary decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonBinary>", "org.bson.codecs.BsonBinaryCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonBinary> getEncoderClass()"], ["void", "org.bson.codecs.BsonBinaryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonBinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonBooleanCodec", "org.bson.codecs.BsonBooleanCodec()", "public org.bson.codecs.BsonBooleanCodec()"], ["org.bson.BsonBoolean", "org.bson.codecs.BsonBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonBoolean decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonBooleanCodec.encode(org.bson.BsonWriter, org.bson.BsonBoolean, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonBoolean, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonBoolean>", "org.bson.codecs.BsonBooleanCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonBoolean> getEncoderClass()"], ["void", "org.bson.codecs.BsonBooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDateTimeCodec", "org.bson.codecs.BsonDateTimeCodec()", "public org.bson.codecs.BsonDateTimeCodec()"], ["org.bson.BsonDateTime", "org.bson.codecs.BsonDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDateTime decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDateTimeCodec.encode(org.bson.BsonWriter, org.bson.BsonDateTime, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDateTime, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDateTime>", "org.bson.codecs.BsonDateTimeCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDateTime> getEncoderClass()"], ["void", "org.bson.codecs.BsonDateTimeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDBPointerCodec", "org.bson.codecs.BsonDBPointerCodec()", "public org.bson.codecs.BsonDBPointerCodec()"], ["org.bson.BsonDbPointer", "org.bson.codecs.BsonDBPointerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDbPointer decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDBPointerCodec.encode(org.bson.BsonWriter, org.bson.BsonDbPointer, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDbPointer, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDbPointer>", "org.bson.codecs.BsonDBPointerCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDbPointer> getEncoderClass()"], ["void", "org.bson.codecs.BsonDBPointerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDBPointerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDocumentCodec", "org.bson.codecs.BsonDocumentCodec()", "public org.bson.codecs.BsonDocumentCodec()"], ["org.bson.codecs.BsonDocumentCodec", "org.bson.codecs.BsonDocumentCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonDocumentCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.BsonDocumentCodec.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["org.bson.BsonDocument", "org.bson.codecs.BsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDocument decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDocumentCodec.encode(org.bson.BsonWriter, org.bson.BsonDocument, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDocument, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDocument>", "org.bson.codecs.BsonDocumentCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDocument> getEncoderClass()"], ["org.bson.BsonDocument", "org.bson.codecs.BsonDocumentCodec.generateIdIfAbsentFromDocument(org.bson.BsonDocument)", "public org.bson.BsonDocument generateIdIfAbsentFromDocument(org.bson.BsonDocument)"], ["boolean", "org.bson.codecs.BsonDocumentCodec.documentHasId(org.bson.BsonDocument)", "public boolean documentHasId(org.bson.BsonDocument)"], ["org.bson.BsonValue", "org.bson.codecs.BsonDocumentCodec.getDocumentId(org.bson.BsonDocument)", "public org.bson.BsonValue getDocumentId(org.bson.BsonDocument)"], ["org.bson.BsonValue", "org.bson.codecs.BsonDocumentCodec.getDocumentId(java.lang.Object)", "public org.bson.BsonValue getDocumentId(java.lang.Object)"], ["boolean", "org.bson.codecs.BsonDocumentCodec.documentHasId(java.lang.Object)", "public boolean documentHasId(java.lang.Object)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentCodec.generateIdIfAbsentFromDocument(java.lang.Object)", "public java.lang.Object generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "org.bson.codecs.BsonDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDocumentWrapperCodec", "org.bson.codecs.BsonDocumentWrapperCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)", "public org.bson.codecs.BsonDocumentWrapperCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)"], ["org.bson.BsonDocumentWrapper", "org.bson.codecs.BsonDocumentWrapperCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDocumentWrapper decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDocumentWrapperCodec.encode(org.bson.BsonWriter, org.bson.BsonDocumentWrapper, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDocumentWrapper, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDocumentWrapper>", "org.bson.codecs.BsonDocumentWrapperCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDocumentWrapper> getEncoderClass()"], ["void", "org.bson.codecs.BsonDocumentWrapperCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentWrapperCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDoubleCodec", "org.bson.codecs.BsonDoubleCodec()", "public org.bson.codecs.BsonDoubleCodec()"], ["org.bson.BsonDouble", "org.bson.codecs.BsonDoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDouble decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDoubleCodec.encode(org.bson.BsonWriter, org.bson.BsonDouble, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDouble, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDouble>", "org.bson.codecs.BsonDoubleCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDouble> getEncoderClass()"], ["void", "org.bson.codecs.BsonDoubleCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonInt32Codec", "org.bson.codecs.BsonInt32Codec()", "public org.bson.codecs.BsonInt32Codec()"], ["org.bson.BsonInt32", "org.bson.codecs.BsonInt32Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonInt32 decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonInt32Codec.encode(org.bson.BsonWriter, org.bson.BsonInt32, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonInt32, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonInt32>", "org.bson.codecs.BsonInt32Codec.getEncoderClass()", "public java.lang.Class<org.bson.BsonInt32> getEncoderClass()"], ["void", "org.bson.codecs.BsonInt32Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonInt32Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonInt64Codec", "org.bson.codecs.BsonInt64Codec()", "public org.bson.codecs.BsonInt64Codec()"], ["org.bson.BsonInt64", "org.bson.codecs.BsonInt64Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonInt64 decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonInt64Codec.encode(org.bson.BsonWriter, org.bson.BsonInt64, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonInt64, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonInt64>", "org.bson.codecs.BsonInt64Codec.getEncoderClass()", "public java.lang.Class<org.bson.BsonInt64> getEncoderClass()"], ["void", "org.bson.codecs.BsonInt64Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonInt64Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonJavaScriptCodec", "org.bson.codecs.BsonJavaScriptCodec()", "public org.bson.codecs.BsonJavaScriptCodec()"], ["org.bson.BsonJavaScript", "org.bson.codecs.BsonJavaScriptCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonJavaScript decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptCodec.encode(org.bson.BsonWriter, org.bson.BsonJavaScript, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonJavaScript, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonJavaScript>", "org.bson.codecs.BsonJavaScriptCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonJavaScript> getEncoderClass()"], ["void", "org.bson.codecs.BsonJavaScriptCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonJavaScriptCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonJavaScriptWithScopeCodec", "org.bson.codecs.BsonJavaScriptWithScopeCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)", "public org.bson.codecs.BsonJavaScriptWithScopeCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)"], ["org.bson.BsonJavaScriptWithScope", "org.bson.codecs.BsonJavaScriptWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonJavaScriptWithScope decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptWithScopeCodec.encode(org.bson.BsonWriter, org.bson.BsonJavaScriptWithScope, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonJavaScriptWithScope, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonJavaScriptWithScope>", "org.bson.codecs.BsonJavaScriptWithScopeCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonJavaScriptWithScope> getEncoderClass()"], ["void", "org.bson.codecs.BsonJavaScriptWithScopeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonJavaScriptWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonMaxKeyCodec", "org.bson.codecs.BsonMaxKeyCodec()", "public org.bson.codecs.BsonMaxKeyCodec()"], ["void", "org.bson.codecs.BsonMaxKeyCodec.encode(org.bson.BsonWriter, org.bson.BsonMaxKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonMaxKey, org.bson.codecs.EncoderContext)"], ["org.bson.BsonMaxKey", "org.bson.codecs.BsonMaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonMaxKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonMaxKey>", "org.bson.codecs.BsonMaxKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonMaxKey> getEncoderClass()"], ["void", "org.bson.codecs.BsonMaxKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonMaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonMinKeyCodec", "org.bson.codecs.BsonMinKeyCodec()", "public org.bson.codecs.BsonMinKeyCodec()"], ["void", "org.bson.codecs.BsonMinKeyCodec.encode(org.bson.BsonWriter, org.bson.BsonMinKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonMinKey, org.bson.codecs.EncoderContext)"], ["org.bson.BsonMinKey", "org.bson.codecs.BsonMinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonMinKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonMinKey>", "org.bson.codecs.BsonMinKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonMinKey> getEncoderClass()"], ["void", "org.bson.codecs.BsonMinKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonMinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonNullCodec", "org.bson.codecs.BsonNullCodec()", "public org.bson.codecs.BsonNullCodec()"], ["org.bson.BsonNull", "org.bson.codecs.BsonNullCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonNull decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonNullCodec.encode(org.bson.BsonWriter, org.bson.BsonNull, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonNull, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonNull>", "org.bson.codecs.BsonNullCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonNull> getEncoderClass()"], ["void", "org.bson.codecs.BsonNullCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonNullCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonObjectIdCodec", "org.bson.codecs.BsonObjectIdCodec()", "public org.bson.codecs.BsonObjectIdCodec()"], ["void", "org.bson.codecs.BsonObjectIdCodec.encode(org.bson.BsonWriter, org.bson.BsonObjectId, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonObjectId, org.bson.codecs.EncoderContext)"], ["org.bson.BsonObjectId", "org.bson.codecs.BsonObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonObjectId decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonObjectId>", "org.bson.codecs.BsonObjectIdCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonObjectId> getEncoderClass()"], ["void", "org.bson.codecs.BsonObjectIdCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonRegularExpressionCodec", "org.bson.codecs.BsonRegularExpressionCodec()", "public org.bson.codecs.BsonRegularExpressionCodec()"], ["org.bson.BsonRegularExpression", "org.bson.codecs.BsonRegularExpressionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonRegularExpression decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonRegularExpressionCodec.encode(org.bson.BsonWriter, org.bson.BsonRegularExpression, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonRegularExpression, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonRegularExpression>", "org.bson.codecs.BsonRegularExpressionCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonRegularExpression> getEncoderClass()"], ["void", "org.bson.codecs.BsonRegularExpressionCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonRegularExpressionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonStringCodec", "org.bson.codecs.BsonStringCodec()", "public org.bson.codecs.BsonStringCodec()"], ["org.bson.BsonString", "org.bson.codecs.BsonStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonString decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonStringCodec.encode(org.bson.BsonWriter, org.bson.BsonString, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonString, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonString>", "org.bson.codecs.BsonStringCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonString> getEncoderClass()"], ["void", "org.bson.codecs.BsonStringCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonSymbolCodec", "org.bson.codecs.BsonSymbolCodec()", "public org.bson.codecs.BsonSymbolCodec()"], ["org.bson.BsonSymbol", "org.bson.codecs.BsonSymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonSymbol decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonSymbolCodec.encode(org.bson.BsonWriter, org.bson.BsonSymbol, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonSymbol, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonSymbol>", "org.bson.codecs.BsonSymbolCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonSymbol> getEncoderClass()"], ["void", "org.bson.codecs.BsonSymbolCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonSymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonTimestampCodec", "org.bson.codecs.BsonTimestampCodec()", "public org.bson.codecs.BsonTimestampCodec()"], ["void", "org.bson.codecs.BsonTimestampCodec.encode(org.bson.BsonWriter, org.bson.BsonTimestamp, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonTimestamp, org.bson.codecs.EncoderContext)"], ["org.bson.BsonTimestamp", "org.bson.codecs.BsonTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonTimestamp decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonTimestamp>", "org.bson.codecs.BsonTimestampCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonTimestamp> getEncoderClass()"], ["void", "org.bson.codecs.BsonTimestampCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonTypeClassMap(java.util.Map<org.bson.BsonType, java.lang.Class<?>>)", "public org.bson.codecs.BsonTypeClassMap(java.util.Map<org.bson.BsonType, java.lang.Class<?>>)"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonTypeClassMap()", "public org.bson.codecs.BsonTypeClassMap()"], ["java.lang.Class<?>", "org.bson.codecs.BsonTypeClassMap.get(org.bson.BsonType)", "public java.lang.Class<?> get(org.bson.BsonType)"], ["boolean", "org.bson.codecs.BsonTypeClassMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.BsonTypeClassMap.hashCode()", "public int hashCode()"], ["org.bson.codecs.BsonUndefinedCodec", "org.bson.codecs.BsonUndefinedCodec()", "public org.bson.codecs.BsonUndefinedCodec()"], ["org.bson.BsonUndefined", "org.bson.codecs.BsonUndefinedCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonUndefined decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonUndefinedCodec.encode(org.bson.BsonWriter, org.bson.BsonUndefined, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonUndefined, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonUndefined>", "org.bson.codecs.BsonUndefinedCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonUndefined> getEncoderClass()"], ["void", "org.bson.codecs.BsonUndefinedCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonUndefinedCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonValueCodec", "org.bson.codecs.BsonValueCodec()", "public org.bson.codecs.BsonValueCodec()"], ["org.bson.codecs.BsonValueCodec", "org.bson.codecs.BsonValueCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonValueCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonValue", "org.bson.codecs.BsonValueCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonValue decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonValueCodec.encode(org.bson.BsonWriter, org.bson.BsonValue, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonValue, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonValue>", "org.bson.codecs.BsonValueCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonValue> getEncoderClass()"], ["void", "org.bson.codecs.BsonValueCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonValueCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonValueCodecProvider", "org.bson.codecs.BsonValueCodecProvider()", "public org.bson.codecs.BsonValueCodecProvider()"], ["java.lang.Class<? extends org.bson.BsonValue>", "org.bson.codecs.BsonValueCodecProvider.getClassForBsonType(org.bson.BsonType)", "public static java.lang.Class<? extends org.bson.BsonValue> getClassForBsonType(org.bson.BsonType)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.BsonValueCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.ByteArrayCodec", "org.bson.codecs.ByteArrayCodec()", "public org.bson.codecs.ByteArrayCodec()"], ["void", "org.bson.codecs.ByteArrayCodec.encode(org.bson.BsonWriter, byte[], org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, byte[], org.bson.codecs.EncoderContext)"], ["byte[]", "org.bson.codecs.ByteArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public byte[] decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<byte[]>", "org.bson.codecs.ByteArrayCodec.getEncoderClass()", "public java.lang.Class<byte[]> getEncoderClass()"], ["void", "org.bson.codecs.ByteArrayCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ByteArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ByteCodec", "org.bson.codecs.ByteCodec()", "public org.bson.codecs.ByteCodec()"], ["void", "org.bson.codecs.ByteCodec.encode(org.bson.BsonWriter, java.lang.Byte, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Byte, org.bson.codecs.EncoderContext)"], ["java.lang.Byte", "org.bson.codecs.ByteCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Byte decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Byte>", "org.bson.codecs.ByteCodec.getEncoderClass()", "public java.lang.Class<java.lang.Byte> getEncoderClass()"], ["void", "org.bson.codecs.ByteCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ByteCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.CodeCodec", "org.bson.codecs.CodeCodec()", "public org.bson.codecs.CodeCodec()"], ["void", "org.bson.codecs.CodeCodec.encode(org.bson.BsonWriter, org.bson.types.Code, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.Code, org.bson.codecs.EncoderContext)"], ["org.bson.types.Code", "org.bson.codecs.CodeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.Code decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.Code>", "org.bson.codecs.CodeCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.Code> getEncoderClass()"], ["void", "org.bson.codecs.CodeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CodeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.CodeWithScopeCodec", "org.bson.codecs.CodeWithScopeCodec(org.bson.codecs.Codec<org.bson.Document>)", "public org.bson.codecs.CodeWithScopeCodec(org.bson.codecs.Codec<org.bson.Document>)"], ["org.bson.types.CodeWithScope", "org.bson.codecs.CodeWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.CodeWithScope decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.CodeWithScopeCodec.encode(org.bson.BsonWriter, org.bson.types.CodeWithScope, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.CodeWithScope, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.types.CodeWithScope>", "org.bson.codecs.CodeWithScopeCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.CodeWithScope> getEncoderClass()"], ["void", "org.bson.codecs.CodeWithScopeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CodeWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DateCodec", "org.bson.codecs.DateCodec()", "public org.bson.codecs.DateCodec()"], ["void", "org.bson.codecs.DateCodec.encode(org.bson.BsonWriter, java.util.Date, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.Date, org.bson.codecs.EncoderContext)"], ["java.util.Date", "org.bson.codecs.DateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.Date decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.Date>", "org.bson.codecs.DateCodec.getEncoderClass()", "public java.lang.Class<java.util.Date> getEncoderClass()"], ["void", "org.bson.codecs.DateCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DecoderContext", "org.bson.codecs.DecoderContext$Builder.build()", "public org.bson.codecs.DecoderContext build()"], ["org.bson.codecs.DecoderContext$Builder", "org.bson.codecs.DecoderContext.builder()", "public static org.bson.codecs.DecoderContext$Builder builder()"], ["java.lang.Object", "org.bson.codecs.DocumentCodec$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec()", "public org.bson.codecs.DocumentCodec()"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["boolean", "org.bson.codecs.DocumentCodec.documentHasId(org.bson.Document)", "public boolean documentHasId(org.bson.Document)"], ["org.bson.BsonValue", "org.bson.codecs.DocumentCodec.getDocumentId(org.bson.Document)", "public org.bson.BsonValue getDocumentId(org.bson.Document)"], ["org.bson.Document", "org.bson.codecs.DocumentCodec.generateIdIfAbsentFromDocument(org.bson.Document)", "public org.bson.Document generateIdIfAbsentFromDocument(org.bson.Document)"], ["void", "org.bson.codecs.DocumentCodec.encode(org.bson.BsonWriter, org.bson.Document, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.Document, org.bson.codecs.EncoderContext)"], ["org.bson.Document", "org.bson.codecs.DocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.Document decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.Document>", "org.bson.codecs.DocumentCodec.getEncoderClass()", "public java.lang.Class<org.bson.Document> getEncoderClass()"], ["org.bson.BsonValue", "org.bson.codecs.DocumentCodec.getDocumentId(java.lang.Object)", "public org.bson.BsonValue getDocumentId(java.lang.Object)"], ["boolean", "org.bson.codecs.DocumentCodec.documentHasId(java.lang.Object)", "public boolean documentHasId(java.lang.Object)"], ["java.lang.Object", "org.bson.codecs.DocumentCodec.generateIdIfAbsentFromDocument(java.lang.Object)", "public java.lang.Object generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "org.bson.codecs.DocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider()", "public org.bson.codecs.DocumentCodecProvider()"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.Transformer)", "public org.bson.codecs.DocumentCodecProvider(org.bson.Transformer)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.DocumentCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.DocumentCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.DocumentCodecProvider.hashCode()", "public int hashCode()"], ["org.bson.codecs.DoubleCodec", "org.bson.codecs.DoubleCodec()", "public org.bson.codecs.DoubleCodec()"], ["void", "org.bson.codecs.DoubleCodec.encode(org.bson.BsonWriter, java.lang.Double, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Double, org.bson.codecs.EncoderContext)"], ["java.lang.Double", "org.bson.codecs.DoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Double decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Double>", "org.bson.codecs.DoubleCodec.getEncoderClass()", "public java.lang.Class<java.lang.Double> getEncoderClass()"], ["void", "org.bson.codecs.DoubleCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.EncoderContext$Builder", "org.bson.codecs.EncoderContext$Builder.isEncodingCollectibleDocument(boolean)", "public org.bson.codecs.EncoderContext$Builder isEncodingCollectibleDocument(boolean)"], ["org.bson.codecs.EncoderContext", "org.bson.codecs.EncoderContext$Builder.build()", "public org.bson.codecs.EncoderContext build()"], ["org.bson.codecs.EncoderContext$Builder", "org.bson.codecs.EncoderContext.builder()", "public static org.bson.codecs.EncoderContext$Builder builder()"], ["boolean", "org.bson.codecs.EncoderContext.isEncodingCollectibleDocument()", "public boolean isEncodingCollectibleDocument()"], ["<T> void", "org.bson.codecs.EncoderContext.encodeWithChildContext(org.bson.codecs.Encoder<T>, org.bson.BsonWriter, T)", "public <T> void encodeWithChildContext(org.bson.codecs.Encoder<T>, org.bson.BsonWriter, T)"], ["org.bson.codecs.EncoderContext", "org.bson.codecs.EncoderContext.getChildContext()", "public org.bson.codecs.EncoderContext getChildContext()"], ["org.bson.codecs.FloatCodec", "org.bson.codecs.FloatCodec()", "public org.bson.codecs.FloatCodec()"], ["void", "org.bson.codecs.FloatCodec.encode(org.bson.BsonWriter, java.lang.Float, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Float, org.bson.codecs.EncoderContext)"], ["java.lang.Float", "org.bson.codecs.FloatCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Float decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Float>", "org.bson.codecs.FloatCodec.getEncoderClass()", "public java.lang.Class<java.lang.Float> getEncoderClass()"], ["void", "org.bson.codecs.FloatCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.FloatCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.IntegerCodec", "org.bson.codecs.IntegerCodec()", "public org.bson.codecs.IntegerCodec()"], ["void", "org.bson.codecs.IntegerCodec.encode(org.bson.BsonWriter, java.lang.Integer, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Integer, org.bson.codecs.EncoderContext)"], ["java.lang.Integer", "org.bson.codecs.IntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Integer decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Integer>", "org.bson.codecs.IntegerCodec.getEncoderClass()", "public java.lang.Class<java.lang.Integer> getEncoderClass()"], ["void", "org.bson.codecs.IntegerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.IntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.LongCodec", "org.bson.codecs.LongCodec()", "public org.bson.codecs.LongCodec()"], ["void", "org.bson.codecs.LongCodec.encode(org.bson.BsonWriter, java.lang.Long, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Long, org.bson.codecs.EncoderContext)"], ["java.lang.Long", "org.bson.codecs.LongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Long decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Long>", "org.bson.codecs.LongCodec.getEncoderClass()", "public java.lang.Class<java.lang.Long> getEncoderClass()"], ["void", "org.bson.codecs.LongCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.LongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MaxKeyCodec", "org.bson.codecs.MaxKeyCodec()", "public org.bson.codecs.MaxKeyCodec()"], ["void", "org.bson.codecs.MaxKeyCodec.encode(org.bson.BsonWriter, org.bson.types.MaxKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.MaxKey, org.bson.codecs.EncoderContext)"], ["org.bson.types.MaxKey", "org.bson.codecs.MaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.MaxKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.MaxKey>", "org.bson.codecs.MaxKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.MaxKey> getEncoderClass()"], ["void", "org.bson.codecs.MaxKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MinKeyCodec", "org.bson.codecs.MinKeyCodec()", "public org.bson.codecs.MinKeyCodec()"], ["void", "org.bson.codecs.MinKeyCodec.encode(org.bson.BsonWriter, org.bson.types.MinKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.MinKey, org.bson.codecs.EncoderContext)"], ["org.bson.types.MinKey", "org.bson.codecs.MinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.MinKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.MinKey>", "org.bson.codecs.MinKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.MinKey> getEncoderClass()"], ["void", "org.bson.codecs.MinKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ObjectIdCodec", "org.bson.codecs.ObjectIdCodec()", "public org.bson.codecs.ObjectIdCodec()"], ["void", "org.bson.codecs.ObjectIdCodec.encode(org.bson.BsonWriter, org.bson.types.ObjectId, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.ObjectId, org.bson.codecs.EncoderContext)"], ["org.bson.types.ObjectId", "org.bson.codecs.ObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.ObjectId decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.ObjectId>", "org.bson.codecs.ObjectIdCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.ObjectId> getEncoderClass()"], ["void", "org.bson.codecs.ObjectIdCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ObjectIdGenerator", "org.bson.codecs.ObjectIdGenerator()", "public org.bson.codecs.ObjectIdGenerator()"], ["java.lang.Object", "org.bson.codecs.ObjectIdGenerator.generate()", "public java.lang.Object generate()"], ["org.bson.codecs.PatternCodec$RegexFlag[]", "org.bson.codecs.PatternCodec$RegexFlag.values()", "public static org.bson.codecs.PatternCodec$RegexFlag[] values()"], ["org.bson.codecs.PatternCodec$RegexFlag", "org.bson.codecs.PatternCodec$RegexFlag.valueOf(java.lang.String)", "public static org.bson.codecs.PatternCodec$RegexFlag valueOf(java.lang.String)"], ["org.bson.codecs.PatternCodec$RegexFlag", "org.bson.codecs.PatternCodec$RegexFlag.getByCharacter(char)", "public static org.bson.codecs.PatternCodec$RegexFlag getByCharacter(char)"], ["org.bson.codecs.PatternCodec", "org.bson.codecs.PatternCodec()", "public org.bson.codecs.PatternCodec()"], ["void", "org.bson.codecs.PatternCodec.encode(org.bson.BsonWriter, java.util.regex.Pattern, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.regex.Pattern, org.bson.codecs.EncoderContext)"], ["java.util.regex.Pattern", "org.bson.codecs.PatternCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.regex.Pattern decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.regex.Pattern>", "org.bson.codecs.PatternCodec.getEncoderClass()", "public java.lang.Class<java.util.regex.Pattern> getEncoderClass()"], ["void", "org.bson.codecs.PatternCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.PatternCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.RawBsonDocumentCodec", "org.bson.codecs.RawBsonDocumentCodec()", "public org.bson.codecs.RawBsonDocumentCodec()"], ["void", "org.bson.codecs.RawBsonDocumentCodec.encode(org.bson.BsonWriter, org.bson.RawBsonDocument, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.RawBsonDocument, org.bson.codecs.EncoderContext)"], ["org.bson.RawBsonDocument", "org.bson.codecs.RawBsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.RawBsonDocument decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.RawBsonDocument>", "org.bson.codecs.RawBsonDocumentCodec.getEncoderClass()", "public java.lang.Class<org.bson.RawBsonDocument> getEncoderClass()"], ["void", "org.bson.codecs.RawBsonDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.RawBsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ShortCodec", "org.bson.codecs.ShortCodec()", "public org.bson.codecs.ShortCodec()"], ["void", "org.bson.codecs.ShortCodec.encode(org.bson.BsonWriter, java.lang.Short, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Short, org.bson.codecs.EncoderContext)"], ["java.lang.Short", "org.bson.codecs.ShortCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Short decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Short>", "org.bson.codecs.ShortCodec.getEncoderClass()", "public java.lang.Class<java.lang.Short> getEncoderClass()"], ["void", "org.bson.codecs.ShortCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ShortCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.StringCodec", "org.bson.codecs.StringCodec()", "public org.bson.codecs.StringCodec()"], ["void", "org.bson.codecs.StringCodec.encode(org.bson.BsonWriter, java.lang.String, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.String, org.bson.codecs.EncoderContext)"], ["java.lang.String", "org.bson.codecs.StringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.String decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.String>", "org.bson.codecs.StringCodec.getEncoderClass()", "public java.lang.Class<java.lang.String> getEncoderClass()"], ["void", "org.bson.codecs.StringCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.StringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.SymbolCodec", "org.bson.codecs.SymbolCodec()", "public org.bson.codecs.SymbolCodec()"], ["org.bson.types.Symbol", "org.bson.codecs.SymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.Symbol decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.SymbolCodec.encode(org.bson.BsonWriter, org.bson.types.Symbol, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.Symbol, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.types.Symbol>", "org.bson.codecs.SymbolCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.Symbol> getEncoderClass()"], ["void", "org.bson.codecs.SymbolCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.SymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.UuidCodec", "org.bson.codecs.UuidCodec(org.bson.UuidRepresentation)", "public org.bson.codecs.UuidCodec(org.bson.UuidRepresentation)"], ["org.bson.codecs.UuidCodec", "org.bson.codecs.UuidCodec()", "public org.bson.codecs.UuidCodec()"], ["void", "org.bson.codecs.UuidCodec.encode(org.bson.BsonWriter, java.util.UUID, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.UUID, org.bson.codecs.EncoderContext)"], ["java.util.UUID", "org.bson.codecs.UuidCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.UUID decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.UUID>", "org.bson.codecs.UuidCodec.getEncoderClass()", "public java.lang.Class<java.util.UUID> getEncoderClass()"], ["void", "org.bson.codecs.UuidCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.UuidCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.UuidCodecHelper.reverseByteArray(byte[], int, int)", "public static void reverseByteArray(byte[], int, int)"], ["org.bson.codecs.UuidCodecProvider", "org.bson.codecs.UuidCodecProvider(org.bson.UuidRepresentation)", "public org.bson.codecs.UuidCodecProvider(org.bson.UuidRepresentation)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.UuidCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.ValueCodecProvider", "org.bson.codecs.ValueCodecProvider()", "public org.bson.codecs.ValueCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.ValueCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.ValueCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.ValueCodecProvider.hashCode()", "public int hashCode()"], ["java.lang.Class<T>", "org.bson.codecs.configuration.ChildCodecRegistry.getCodecClass()", "public java.lang.Class<T> getCodecClass()"], ["<U> org.bson.codecs.Codec<U>", "org.bson.codecs.configuration.ChildCodecRegistry.get(java.lang.Class<U>)", "public <U> org.bson.codecs.Codec<U> get(java.lang.Class<U>)"], ["boolean", "org.bson.codecs.configuration.ChildCodecRegistry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.configuration.ChildCodecRegistry.hashCode()", "public int hashCode()"], ["boolean", "org.bson.codecs.configuration.CodecCache.containsKey(java.lang.Class<?>)", "public boolean containsKey(java.lang.Class<?>)"], ["void", "org.bson.codecs.configuration.CodecCache.put(java.lang.Class<?>, org.bson.codecs.Codec<?>)", "public void put(java.lang.Class<?>, org.bson.codecs.Codec<?>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.CodecCache.getOrThrow(java.lang.Class<T>)", "public <T> org.bson.codecs.Codec<T> getOrThrow(java.lang.Class<T>)"], ["org.bson.codecs.configuration.CodecConfigurationException", "org.bson.codecs.configuration.CodecConfigurationException(java.lang.String)", "public org.bson.codecs.configuration.CodecConfigurationException(java.lang.String)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.CodecRegistries$1.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromCodecs(org.bson.codecs.Codec<?>...)", "public static org.bson.codecs.configuration.CodecRegistry fromCodecs(org.bson.codecs.Codec<?>...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromCodecs(java.util.List<? extends org.bson.codecs.Codec<?>>)", "public static org.bson.codecs.configuration.CodecRegistry fromCodecs(java.util.List<? extends org.bson.codecs.Codec<?>>)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromProviders(org.bson.codecs.configuration.CodecProvider...)", "public static org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromProviders(java.util.List<? extends org.bson.codecs.configuration.CodecProvider>)", "public static org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List<? extends org.bson.codecs.configuration.CodecProvider>)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromRegistries(org.bson.codecs.configuration.CodecRegistry...)", "public static org.bson.codecs.configuration.CodecRegistry fromRegistries(org.bson.codecs.configuration.CodecRegistry...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromRegistries(java.util.List<? extends org.bson.codecs.configuration.CodecRegistry>)", "public static org.bson.codecs.configuration.CodecRegistry fromRegistries(java.util.List<? extends org.bson.codecs.configuration.CodecRegistry>)"], ["org.bson.codecs.configuration.LazyCodec", "org.bson.codecs.configuration.LazyCodec(org.bson.codecs.configuration.CodecRegistry, java.lang.Class<T>)", "public org.bson.codecs.configuration.LazyCodec(org.bson.codecs.configuration.CodecRegistry, java.lang.Class<T>)"], ["void", "org.bson.codecs.configuration.LazyCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["java.lang.Class<T>", "org.bson.codecs.configuration.LazyCodec.getEncoderClass()", "public java.lang.Class<T> getEncoderClass()"], ["T", "org.bson.codecs.configuration.LazyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public T decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.configuration.MapOfCodecsProvider", "org.bson.codecs.configuration.MapOfCodecsProvider(java.util.List<? extends org.bson.codecs.Codec<?>>)", "public org.bson.codecs.configuration.MapOfCodecsProvider(java.util.List<? extends org.bson.codecs.Codec<?>>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.MapOfCodecsProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Object", "org.bson.codecs.configuration.Optional$1.get()", "public java.lang.Object get()"], ["boolean", "org.bson.codecs.configuration.Optional$1.isEmpty()", "public boolean isEmpty()"], ["T", "org.bson.codecs.configuration.Optional$Some.get()", "public T get()"], ["boolean", "org.bson.codecs.configuration.Optional$Some.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "org.bson.codecs.configuration.Optional$Some.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.configuration.Optional$Some.isDefined()", "public boolean isDefined()"], ["<T> org.bson.codecs.configuration.Optional<T>", "org.bson.codecs.configuration.Optional.empty()", "public static <T> org.bson.codecs.configuration.Optional<T> empty()"], ["<T> org.bson.codecs.configuration.Optional<T>", "org.bson.codecs.configuration.Optional.of(T)", "public static <T> org.bson.codecs.configuration.Optional<T> of(T)"], ["java.lang.String", "org.bson.codecs.configuration.Optional.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.configuration.Optional.isDefined()", "public boolean isDefined()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.ProvidersCodecRegistry.get(java.lang.Class<T>)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.ProvidersCodecRegistry.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.configuration.ProvidersCodecRegistry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.configuration.ProvidersCodecRegistry.hashCode()", "public int hashCode()"], ["java.util.logging.Logger", "org.bson.diagnostics.Loggers.getLogger(java.lang.String)", "public static java.util.logging.Logger getLogger(java.lang.String)"], ["org.bson.io.BasicOutputBuffer", "org.bson.io.BasicOutputBuffer()", "public org.bson.io.BasicOutputBuffer()"], ["org.bson.io.BasicOutputBuffer", "org.bson.io.BasicOutputBuffer(int)", "public org.bson.io.BasicOutputBuffer(int)"], ["void", "org.bson.io.BasicOutputBuffer.write(byte[])", "public void write(byte[])"], ["void", "org.bson.io.BasicOutputBuffer.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["void", "org.bson.io.BasicOutputBuffer.writeByte(int)", "public void writeByte(int)"], ["int", "org.bson.io.BasicOutputBuffer.getPosition()", "public int getPosition()"], ["int", "org.bson.io.BasicOutputBuffer.getSize()", "public int getSize()"], ["int", "org.bson.io.BasicOutputBuffer.pipe(java.io.OutputStream)", "public int pipe(java.io.OutputStream) throws java.io.IOException"], ["void", "org.bson.io.BasicOutputBuffer.truncateToPosition(int)", "public void truncateToPosition(int)"], ["java.util.List<org.bson.ByteBuf>", "org.bson.io.BasicOutputBuffer.getByteBuffers()", "public java.util.List<org.bson.ByteBuf> getByteBuffers()"], ["void", "org.bson.io.BasicOutputBuffer.close()", "public void close()"], ["org.bson.io.Bits", "org.bson.io.Bits()", "public org.bson.io.Bits()"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[], int)", "public static void readFully(java.io.InputStream, byte[], int) throws java.io.IOException"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["int", "org.bson.io.Bits.readInt(java.io.InputStream)", "public static int readInt(java.io.InputStream) throws java.io.IOException"], ["int", "org.bson.io.Bits.readInt(java.io.InputStream, byte[])", "public static int readInt(java.io.InputStream, byte[]) throws java.io.IOException"], ["int", "org.bson.io.Bits.readInt(byte[])", "public static int readInt(byte[])"], ["int", "org.bson.io.Bits.readInt(byte[], int)", "public static int readInt(byte[], int)"], ["int", "org.bson.io.Bits.readIntBE(byte[], int)", "public static int readIntBE(byte[], int)"], ["long", "org.bson.io.Bits.readLong(java.io.InputStream)", "public static long readLong(java.io.InputStream) throws java.io.IOException"], ["long", "org.bson.io.Bits.readLong(java.io.InputStream, byte[])", "public static long readLong(java.io.InputStream, byte[]) throws java.io.IOException"], ["long", "org.bson.io.Bits.readLong(byte[])", "public static long readLong(byte[])"], ["long", "org.bson.io.Bits.readLong(byte[], int)", "public static long readLong(byte[], int)"], ["org.bson.io.ByteBufferBsonInput", "org.bson.io.ByteBufferBsonInput(org.bson.ByteBuf)", "public org.bson.io.ByteBufferBsonInput(org.bson.ByteBuf)"], ["int", "org.bson.io.ByteBufferBsonInput.getPosition()", "public int getPosition()"], ["byte", "org.bson.io.ByteBufferBsonInput.readByte()", "public byte readByte()"], ["void", "org.bson.io.ByteBufferBsonInput.readBytes(byte[])", "public void readBytes(byte[])"], ["void", "org.bson.io.ByteBufferBsonInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["long", "org.bson.io.ByteBufferBsonInput.readInt64()", "public long readInt64()"], ["double", "org.bson.io.ByteBufferBsonInput.readDouble()", "public double readDouble()"], ["int", "org.bson.io.ByteBufferBsonInput.readInt32()", "public int readInt32()"], ["java.lang.String", "org.bson.io.ByteBufferBsonInput.readString()", "public java.lang.String readString()"], ["org.bson.types.ObjectId", "org.bson.io.ByteBufferBsonInput.readObjectId()", "public org.bson.types.ObjectId readObjectId()"], ["java.lang.String", "org.bson.io.ByteBufferBsonInput.readCString()", "public java.lang.String readCString()"], ["void", "org.bson.io.ByteBufferBsonInput.skipCString()", "public void skipCString()"], ["void", "org.bson.io.ByteBufferBsonInput.skip(int)", "public void skip(int)"], ["void", "org.bson.io.ByteBufferBsonInput.mark(int)", "public void mark(int)"], ["void", "org.bson.io.ByteBufferBsonInput.reset()", "public void reset()"], ["boolean", "org.bson.io.ByteBufferBsonInput.hasRemaining()", "public boolean hasRemaining()"], ["void", "org.bson.io.ByteBufferBsonInput.close()", "public void close()"], ["org.bson.io.OutputBuffer", "org.bson.io.OutputBuffer()", "public org.bson.io.OutputBuffer()"], ["void", "org.bson.io.OutputBuffer.write(byte[])", "public void write(byte[])"], ["void", "org.bson.io.OutputBuffer.close()", "public void close()"], ["void", "org.bson.io.OutputBuffer.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "org.bson.io.OutputBuffer.writeBytes(byte[])", "public void writeBytes(byte[])"], ["void", "org.bson.io.OutputBuffer.writeInt32(int)", "public void writeInt32(int)"], ["void", "org.bson.io.OutputBuffer.writeInt32(int, int)", "public void writeInt32(int, int)"], ["void", "org.bson.io.OutputBuffer.writeInt64(long)", "public void writeInt64(long)"], ["void", "org.bson.io.OutputBuffer.writeDouble(double)", "public void writeDouble(double)"], ["void", "org.bson.io.OutputBuffer.writeString(java.lang.String)", "public void writeString(java.lang.String)"], ["void", "org.bson.io.OutputBuffer.writeCString(java.lang.String)", "public void writeCString(java.lang.String)"], ["void", "org.bson.io.OutputBuffer.writeObjectId(org.bson.types.ObjectId)", "public void writeObjectId(org.bson.types.ObjectId)"], ["int", "org.bson.io.OutputBuffer.size()", "public int size()"], ["byte[]", "org.bson.io.OutputBuffer.toByteArray()", "public byte[] toByteArray()"], ["void", "org.bson.io.OutputBuffer.write(int)", "public void write(int)"], ["void", "org.bson.io.OutputBuffer.writeInt(int)", "public void writeInt(int)"], ["java.lang.String", "org.bson.io.OutputBuffer.toString()", "public java.lang.String toString()"], ["void", "org.bson.io.OutputBuffer.writeLong(long)", "public void writeLong(long)"], ["org.bson.json.JsonBuffer", "org.bson.json.JsonBuffer(java.lang.String)", "public org.bson.json.JsonBuffer(java.lang.String)"], ["int", "org.bson.json.JsonBuffer.getPosition()", "public int getPosition()"], ["void", "org.bson.json.JsonBuffer.setPosition(int)", "public void setPosition(int)"], ["int", "org.bson.json.JsonBuffer.read()", "public int read()"], ["void", "org.bson.json.JsonBuffer.unread(int)", "public void unread(int)"], ["java.lang.String", "org.bson.json.JsonBuffer.substring(int)", "public java.lang.String substring(int)"], ["java.lang.String", "org.bson.json.JsonBuffer.substring(int, int)", "public java.lang.String substring(int, int)"], ["org.bson.json.JsonMode[]", "org.bson.json.JsonMode.values()", "public static org.bson.json.JsonMode[] values()"], ["org.bson.json.JsonMode", "org.bson.json.JsonMode.valueOf(java.lang.String)", "public static org.bson.json.JsonMode valueOf(java.lang.String)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException()", "public org.bson.json.JsonParseException()"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.String)", "public org.bson.json.JsonParseException(java.lang.String)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.String, java.lang.Object...)", "public org.bson.json.JsonParseException(java.lang.String, java.lang.Object...)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.Throwable)", "public org.bson.json.JsonParseException(java.lang.Throwable)"], ["org.bson.json.JsonReader", "org.bson.json.JsonReader(java.lang.String)", "public org.bson.json.JsonReader(java.lang.String)"], ["org.bson.BsonType", "org.bson.json.JsonReader.readBsonType()", "public org.bson.BsonType readBsonType()"], ["void", "org.bson.json.JsonReader.mark()", "public void mark()"], ["void", "org.bson.json.JsonReader.reset()", "public void reset()"], ["org.bson.json.JsonScanner$NumberState[]", "org.bson.json.JsonScanner$NumberState.values()", "public static org.bson.json.JsonScanner$NumberState[] values()"], ["org.bson.json.JsonScanner$NumberState", "org.bson.json.JsonScanner$NumberState.valueOf(java.lang.String)", "public static org.bson.json.JsonScanner$NumberState valueOf(java.lang.String)"], ["org.bson.json.JsonScanner$RegularExpressionState[]", "org.bson.json.JsonScanner$RegularExpressionState.values()", "public static org.bson.json.JsonScanner$RegularExpressionState[] values()"], ["org.bson.json.JsonScanner$RegularExpressionState", "org.bson.json.JsonScanner$RegularExpressionState.valueOf(java.lang.String)", "public static org.bson.json.JsonScanner$RegularExpressionState valueOf(java.lang.String)"], ["void", "org.bson.json.JsonScanner.setBufferPosition(int)", "public void setBufferPosition(int)"], ["int", "org.bson.json.JsonScanner.getBufferPosition()", "public int getBufferPosition()"], ["org.bson.json.JsonScanner", "org.bson.json.JsonScanner(org.bson.json.JsonBuffer)", "public org.bson.json.JsonScanner(org.bson.json.JsonBuffer)"], ["org.bson.json.JsonScanner", "org.bson.json.JsonScanner(java.lang.String)", "public org.bson.json.JsonScanner(java.lang.String)"], ["org.bson.json.JsonToken", "org.bson.json.JsonScanner.nextToken()", "public org.bson.json.JsonToken nextToken()"], ["org.bson.json.JsonToken", "org.bson.json.JsonToken(org.bson.json.JsonTokenType, java.lang.Object)", "public org.bson.json.JsonToken(org.bson.json.JsonTokenType, java.lang.Object)"], ["java.lang.Object", "org.bson.json.JsonToken.getValue()", "public java.lang.Object getValue()"], ["<T> T", "org.bson.json.JsonToken.getValue(java.lang.Class<T>)", "public <T> T getValue(java.lang.Class<T>)"], ["org.bson.json.JsonTokenType", "org.bson.json.JsonToken.getType()", "public org.bson.json.JsonTokenType getType()"], ["org.bson.json.JsonTokenType[]", "org.bson.json.JsonTokenType.values()", "public static org.bson.json.JsonTokenType[] values()"], ["org.bson.json.JsonTokenType", "org.bson.json.JsonTokenType.valueOf(java.lang.String)", "public static org.bson.json.JsonTokenType valueOf(java.lang.String)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType, java.lang.String)", "public org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType, java.lang.String)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context.getParentContext()", "public org.bson.json.JsonWriter$Context getParentContext()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.json.JsonWriter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["org.bson.json.JsonWriter", "org.bson.json.JsonWriter(java.io.Writer)", "public org.bson.json.JsonWriter(java.io.Writer)"], ["org.bson.json.JsonWriter", "org.bson.json.JsonWriter(java.io.Writer, org.bson.json.JsonWriterSettings)", "public org.bson.json.JsonWriter(java.io.Writer, org.bson.json.JsonWriterSettings)"], ["java.io.Writer", "org.bson.json.JsonWriter.getWriter()", "public java.io.Writer getWriter()"], ["void", "org.bson.json.JsonWriter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.json.JsonWriter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.json.JsonWriter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.json.JsonWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.json.JsonWriter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.json.JsonWriter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.json.JsonWriter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.json.JsonWriter.doWriteUndefined()", "public void doWriteUndefined()"], ["void", "org.bson.json.JsonWriter.flush()", "public void flush()"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings()", "public org.bson.json.JsonWriterSettings()"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(boolean)", "public org.bson.json.JsonWriterSettings(boolean)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, boolean)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, boolean)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String, java.lang.String)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String, java.lang.String)"], ["boolean", "org.bson.json.JsonWriterSettings.isIndent()", "public boolean isIndent()"], ["java.lang.String", "org.bson.json.JsonWriterSettings.getNewLineCharacters()", "public java.lang.String getNewLineCharacters()"], ["java.lang.String", "org.bson.json.JsonWriterSettings.getIndentCharacters()", "public java.lang.String getIndentCharacters()"], ["org.bson.json.JsonMode", "org.bson.json.JsonWriterSettings.getOutputMode()", "public org.bson.json.JsonMode getOutputMode()"], ["org.bson.types.BasicBSONList", "org.bson.types.BasicBSONList()", "public org.bson.types.BasicBSONList()"], ["java.lang.Object", "org.bson.types.BasicBSONList.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.bson.types.BasicBSONList.put(int, java.lang.Object)", "public java.lang.Object put(int, java.lang.Object)"], ["void", "org.bson.types.BasicBSONList.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["void", "org.bson.types.BasicBSONList.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["java.lang.Object", "org.bson.types.BasicBSONList.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["java.lang.Object", "org.bson.types.BasicBSONList.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["boolean", "org.bson.types.BasicBSONList.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "org.bson.types.BasicBSONList.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.bson.types.BasicBSONList.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Map", "org.bson.types.BasicBSONList.toMap()", "public java.util.Map toMap()"], ["org.bson.types.Binary", "org.bson.types.Binary(byte[])", "public org.bson.types.Binary(byte[])"], ["org.bson.types.Binary", "org.bson.types.Binary(org.bson.BsonBinarySubType, byte[])", "public org.bson.types.Binary(org.bson.BsonBinarySubType, byte[])"], ["org.bson.types.Binary", "org.bson.types.Binary(byte, byte[])", "public org.bson.types.Binary(byte, byte[])"], ["byte", "org.bson.types.Binary.getType()", "public byte getType()"], ["byte[]", "org.bson.types.Binary.getData()", "public byte[] getData()"], ["int", "org.bson.types.Binary.length()", "public int length()"], ["boolean", "org.bson.types.Binary.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.Binary.hashCode()", "public int hashCode()"], ["org.bson.types.BSONTimestamp", "org.bson.types.BSONTimestamp()", "public org.bson.types.BSONTimestamp()"], ["org.bson.types.BSONTimestamp", "org.bson.types.BSONTimestamp(int, int)", "public org.bson.types.BSONTimestamp(int, int)"], ["int", "org.bson.types.BSONTimestamp.getTime()", "public int getTime()"], ["int", "org.bson.types.BSONTimestamp.getInc()", "public int getInc()"], ["java.lang.String", "org.bson.types.BSONTimestamp.toString()", "public java.lang.String toString()"], ["int", "org.bson.types.BSONTimestamp.compareTo(org.bson.types.BSONTimestamp)", "public int compareTo(org.bson.types.BSONTimestamp)"], ["int", "org.bson.types.BSONTimestamp.hashCode()", "public int hashCode()"], ["boolean", "org.bson.types.BSONTimestamp.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.BSONTimestamp.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.types.Code", "org.bson.types.Code(java.lang.String)", "public org.bson.types.Code(java.lang.String)"], ["java.lang.String", "org.bson.types.Code.getCode()", "public java.lang.String getCode()"], ["boolean", "org.bson.types.Code.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.Code.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.Code.toString()", "public java.lang.String toString()"], ["org.bson.types.CodeWithScope", "org.bson.types.CodeWithScope(java.lang.String, org.bson.Document)", "public org.bson.types.CodeWithScope(java.lang.String, org.bson.Document)"], ["org.bson.Document", "org.bson.types.CodeWithScope.getScope()", "public org.bson.Document getScope()"], ["boolean", "org.bson.types.CodeWithScope.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.CodeWithScope.hashCode()", "public int hashCode()"], ["org.bson.types.CodeWScope", "org.bson.types.CodeWScope(java.lang.String, org.bson.BSONObject)", "public org.bson.types.CodeWScope(java.lang.String, org.bson.BSONObject)"], ["org.bson.BSONObject", "org.bson.types.CodeWScope.getScope()", "public org.bson.BSONObject getScope()"], ["boolean", "org.bson.types.CodeWScope.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.CodeWScope.hashCode()", "public int hashCode()"], ["org.bson.types.MaxKey", "org.bson.types.MaxKey()", "public org.bson.types.MaxKey()"], ["boolean", "org.bson.types.MaxKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.MaxKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.MaxKey.toString()", "public java.lang.String toString()"], ["org.bson.types.MinKey", "org.bson.types.MinKey()", "public org.bson.types.MinKey()"], ["boolean", "org.bson.types.MinKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.MinKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.MinKey.toString()", "public java.lang.String toString()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId.get()", "public static org.bson.types.ObjectId get()"], ["boolean", "org.bson.types.ObjectId.isValid(java.lang.String)", "public static boolean isValid(java.lang.String)"], ["int", "org.bson.types.ObjectId.getGeneratedMachineIdentifier()", "public static int getGeneratedMachineIdentifier()"], ["int", "org.bson.types.ObjectId.getGeneratedProcessIdentifier()", "public static int getGeneratedProcessIdentifier()"], ["int", "org.bson.types.ObjectId.getCurrentCounter()", "public static int getCurrentCounter()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId.createFromLegacyFormat(int, int, int)", "public static org.bson.types.ObjectId createFromLegacyFormat(int, int, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId()", "public org.bson.types.ObjectId()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date)", "public org.bson.types.ObjectId(java.util.Date)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date, int)", "public org.bson.types.ObjectId(java.util.Date, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date, int, short, int)", "public org.bson.types.ObjectId(java.util.Date, int, short, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(int, int, short, int)", "public org.bson.types.ObjectId(int, int, short, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.lang.String)", "public org.bson.types.ObjectId(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(byte[])", "public org.bson.types.ObjectId(byte[])"], ["byte[]", "org.bson.types.ObjectId.toByteArray()", "public byte[] toByteArray()"], ["int", "org.bson.types.ObjectId.getTimestamp()", "public int getTimestamp()"], ["int", "org.bson.types.ObjectId.getMachineIdentifier()", "public int getMachineIdentifier()"], ["short", "org.bson.types.ObjectId.getProcessIdentifier()", "public short getProcessIdentifier()"], ["int", "org.bson.types.ObjectId.getCounter()", "public int getCounter()"], ["java.util.Date", "org.bson.types.ObjectId.getDate()", "public java.util.Date getDate()"], ["java.lang.String", "org.bson.types.ObjectId.toHexString()", "public java.lang.String toHexString()"], ["boolean", "org.bson.types.ObjectId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.ObjectId.hashCode()", "public int hashCode()"], ["int", "org.bson.types.ObjectId.compareTo(org.bson.types.ObjectId)", "public int compareTo(org.bson.types.ObjectId)"], ["java.lang.String", "org.bson.types.ObjectId.toString()", "public java.lang.String toString()"], ["int", "org.bson.types.ObjectId.getTimeSecond()", "public int getTimeSecond()"], ["long", "org.bson.types.ObjectId.getTime()", "public long getTime()"], ["java.lang.String", "org.bson.types.ObjectId.toStringMongod()", "public java.lang.String toStringMongod()"], ["int", "org.bson.types.ObjectId.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.bson.types.StringRangeSet$NumberStringComparator.compare(java.lang.String, java.lang.String)", "public int compare(java.lang.String, java.lang.String)"], ["int", "org.bson.types.StringRangeSet$NumberStringComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.util.Set<java.lang.String>", "org.bson.types.StringRangeSet.getSet()", "public java.util.Set<java.lang.String> getSet()"], ["org.bson.types.Symbol", "org.bson.types.Symbol(java.lang.String)", "public org.bson.types.Symbol(java.lang.String)"], ["java.lang.String", "org.bson.types.Symbol.getSymbol()", "public java.lang.String getSymbol()"], ["boolean", "org.bson.types.Symbol.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.Symbol.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.Symbol.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.contains(java.lang.Object)", "public final boolean contains(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.containsAll(java.util.Collection<?>)", "public final boolean containsAll(java.util.Collection<?>)"], ["java.util.Iterator<E>", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.iterator()", "public final java.util.Iterator<E> iterator()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.isEmpty()", "public final boolean isEmpty()"], ["int", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.size()", "public final int size()"], ["java.lang.Object[]", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toArray()", "public final java.lang.Object[] toArray()"], ["<T> T[]", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toArray(T[])", "public final <T> T[] toArray(T[])"], ["int", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.hashCode()", "public int hashCode()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.add(E)", "public final boolean add(E)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.addAll(java.util.Collection<? extends E>)", "public final boolean addAll(java.util.Collection<? extends E>)"], ["void", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.clear()", "public void clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Set<K>", "org.bson.util.AbstractCopyOnWriteMap$Immutable.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap$Immutable.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Collection<V>", "org.bson.util.AbstractCopyOnWriteMap$Immutable.values()", "public java.util.Collection<V> values()"], ["void", "org.bson.util.AbstractCopyOnWriteMap$KeySet.clear()", "public void clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Set<K>", "org.bson.util.AbstractCopyOnWriteMap$Mutable.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap$Mutable.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Collection<V>", "org.bson.util.AbstractCopyOnWriteMap$Mutable.values()", "public java.util.Collection<V> values()"], ["org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator(java.util.Iterator<T>)", "public org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator(java.util.Iterator<T>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.hasNext()", "public boolean hasNext()"], ["T", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.next()", "public T next()"], ["void", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.remove()", "public void remove()"], ["void", "org.bson.util.AbstractCopyOnWriteMap$Values.clear()", "public void clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["org.bson.util.AbstractCopyOnWriteMap$View$Type[]", "org.bson.util.AbstractCopyOnWriteMap$View$Type.values()", "public static org.bson.util.AbstractCopyOnWriteMap$View$Type[] values()"], ["org.bson.util.AbstractCopyOnWriteMap$View$Type", "org.bson.util.AbstractCopyOnWriteMap$View$Type.valueOf(java.lang.String)", "public static org.bson.util.AbstractCopyOnWriteMap$View$Type valueOf(java.lang.String)"], ["void", "org.bson.util.AbstractCopyOnWriteMap.clear()", "public final void clear()"], ["V", "org.bson.util.AbstractCopyOnWriteMap.remove(java.lang.Object)", "public final V remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.replace(K, V)", "public V replace(K, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.put(K, V)", "public final V put(K, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["void", "org.bson.util.AbstractCopyOnWriteMap.putAll(java.util.Map<? extends K, ? extends V>)", "public final void putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap.entrySet()", "public final java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "org.bson.util.AbstractCopyOnWriteMap.keySet()", "public final java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.bson.util.AbstractCopyOnWriteMap.values()", "public final java.util.Collection<V> values()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.containsKey(java.lang.Object)", "public final boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.containsValue(java.lang.Object)", "public final boolean containsValue(java.lang.Object)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.get(java.lang.Object)", "public final V get(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.isEmpty()", "public final boolean isEmpty()"], ["int", "org.bson.util.AbstractCopyOnWriteMap.size()", "public final int size()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.bson.util.AbstractCopyOnWriteMap.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.bson.util.AbstractCopyOnWriteMap.toString()", "public java.lang.String toString()"], ["<T> java.util.List<java.lang.Class<?>>", "org.bson.util.ClassAncestry.getAncestry(java.lang.Class<T>)", "public static <T> java.util.List<java.lang.Class<?>> getAncestry(java.lang.Class<T>)"], ["T", "org.bson.util.ClassMap$ComputeFunction.apply(java.lang.Class<?>)", "public T apply(java.lang.Class<?>)"], ["java.lang.Object", "org.bson.util.ClassMap$ComputeFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.bson.util.ClassMap", "org.bson.util.ClassMap()", "public org.bson.util.ClassMap()"], ["<T> java.util.List<java.lang.Class<?>>", "org.bson.util.ClassMap.getAncestry(java.lang.Class<T>)", "public static <T> java.util.List<java.lang.Class<?>> getAncestry(java.lang.Class<T>)"], ["T", "org.bson.util.ClassMap.get(java.lang.Object)", "public T get(java.lang.Object)"], ["T", "org.bson.util.ClassMap.put(java.lang.Class<?>, T)", "public T put(java.lang.Class<?>, T)"], ["T", "org.bson.util.ClassMap.remove(java.lang.Object)", "public T remove(java.lang.Object)"], ["void", "org.bson.util.ClassMap.clear()", "public void clear()"], ["int", "org.bson.util.ClassMap.size()", "public int size()"], ["boolean", "org.bson.util.ClassMap.isEmpty()", "public boolean isEmpty()"], ["<K, V> java.util.Map<K, V>", "org.bson.util.ComputingMap.create(org.bson.util.Function<K, V>)", "public static <K, V> java.util.Map<K, V> create(org.bson.util.Function<K, V>)"], ["V", "org.bson.util.ComputingMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.bson.util.ComputingMap.apply(K)", "public V apply(K)"], ["V", "org.bson.util.ComputingMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.bson.util.ComputingMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.bson.util.ComputingMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.bson.util.ComputingMap.replace(K, V)", "public V replace(K, V)"], ["int", "org.bson.util.ComputingMap.size()", "public int size()"], ["boolean", "org.bson.util.ComputingMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.util.ComputingMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.util.ComputingMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.bson.util.ComputingMap.put(K, V)", "public V put(K, V)"], ["V", "org.bson.util.ComputingMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.bson.util.ComputingMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.bson.util.ComputingMap.clear()", "public void clear()"], ["java.util.Set<K>", "org.bson.util.ComputingMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.bson.util.ComputingMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.ComputingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["boolean", "org.bson.util.ComputingMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.util.ComputingMap.hashCode()", "public int hashCode()"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.stableViews()", "public org.bson.util.CopyOnWriteMap$Builder<K, V> stableViews()"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.addAll(java.util.Map<? extends K, ? extends V>)", "public org.bson.util.CopyOnWriteMap$Builder<K, V> addAll(java.util.Map<? extends K, ? extends V>)"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.liveViews()", "public org.bson.util.CopyOnWriteMap$Builder<K, V> liveViews()"], ["org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap$Builder.newHashMap()", "public org.bson.util.CopyOnWriteMap<K, V> newHashMap()"], ["org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap$Builder.newLinkedMap()", "public org.bson.util.CopyOnWriteMap<K, V> newLinkedMap()"], ["<N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V>", "org.bson.util.CopyOnWriteMap$Hash.copy(N)", "public <N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V> copy(N)"], ["<N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V>", "org.bson.util.CopyOnWriteMap$Linked.copy(N)", "public <N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V> copy(N)"], ["<K, V> org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap.builder()", "public static <K, V> org.bson.util.CopyOnWriteMap$Builder<K, V> builder()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newHashMap()", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newHashMap()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newHashMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newLinkedMap()", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newLinkedMap()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newLinkedMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newLinkedMap(java.util.Map<? extends K, ? extends V>)"]]}