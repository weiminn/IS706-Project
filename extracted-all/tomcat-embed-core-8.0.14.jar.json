{"tomcat-embed-core-8.0.14.jar": [["javax.annotation.Resource$AuthenticationType[]", "javax.annotation.Resource$AuthenticationType.values()", "public static javax.annotation.Resource$AuthenticationType[] values()"], ["javax.annotation.Resource$AuthenticationType", "javax.annotation.Resource$AuthenticationType.valueOf(java.lang.String)", "public static javax.annotation.Resource$AuthenticationType valueOf(java.lang.String)"], ["javax.persistence.PersistenceContextType[]", "javax.persistence.PersistenceContextType.values()", "public static javax.persistence.PersistenceContextType[] values()"], ["javax.persistence.PersistenceContextType", "javax.persistence.PersistenceContextType.valueOf(java.lang.String)", "public static javax.persistence.PersistenceContextType valueOf(java.lang.String)"], ["javax.servlet.AsyncEvent", "javax.servlet.AsyncEvent(javax.servlet.AsyncContext)", "public javax.servlet.AsyncEvent(javax.servlet.AsyncContext)"], ["javax.servlet.AsyncEvent", "javax.servlet.AsyncEvent(javax.servlet.AsyncContext, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public javax.servlet.AsyncEvent(javax.servlet.AsyncContext, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["javax.servlet.AsyncEvent", "javax.servlet.AsyncEvent(javax.servlet.AsyncContext, java.lang.Throwable)", "public javax.servlet.AsyncEvent(javax.servlet.AsyncContext, java.lang.Throwable)"], ["javax.servlet.AsyncEvent", "javax.servlet.AsyncEvent(javax.servlet.AsyncContext, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)", "public javax.servlet.AsyncEvent(javax.servlet.AsyncContext, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)"], ["javax.servlet.AsyncContext", "javax.servlet.AsyncEvent.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["javax.servlet.ServletRequest", "javax.servlet.AsyncEvent.getSuppliedRequest()", "public javax.servlet.ServletRequest getSuppliedRequest()"], ["javax.servlet.ServletResponse", "javax.servlet.AsyncEvent.getSuppliedResponse()", "public javax.servlet.ServletResponse getSuppliedResponse()"], ["java.lang.Throwable", "javax.servlet.AsyncEvent.getThrowable()", "public java.lang.Throwable getThrowable()"], ["javax.servlet.DispatcherType[]", "javax.servlet.DispatcherType.values()", "public static javax.servlet.DispatcherType[] values()"], ["javax.servlet.DispatcherType", "javax.servlet.DispatcherType.valueOf(java.lang.String)", "public static javax.servlet.DispatcherType valueOf(java.lang.String)"], ["javax.servlet.GenericServlet", "javax.servlet.GenericServlet()", "public javax.servlet.GenericServlet()"], ["void", "javax.servlet.GenericServlet.destroy()", "public void destroy()"], ["java.lang.String", "javax.servlet.GenericServlet.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "javax.servlet.GenericServlet.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["javax.servlet.ServletConfig", "javax.servlet.GenericServlet.getServletConfig()", "public javax.servlet.ServletConfig getServletConfig()"], ["javax.servlet.ServletContext", "javax.servlet.GenericServlet.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "javax.servlet.GenericServlet.getServletInfo()", "public java.lang.String getServletInfo()"], ["void", "javax.servlet.GenericServlet.init(javax.servlet.ServletConfig)", "public void init(javax.servlet.ServletConfig) throws javax.servlet.ServletException"], ["void", "javax.servlet.GenericServlet.init()", "public void init() throws javax.servlet.ServletException"], ["void", "javax.servlet.GenericServlet.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "javax.servlet.GenericServlet.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "javax.servlet.GenericServlet.getServletName()", "public java.lang.String getServletName()"], ["javax.servlet.HttpConstraintElement", "javax.servlet.HttpConstraintElement()", "public javax.servlet.HttpConstraintElement()"], ["javax.servlet.HttpConstraintElement", "javax.servlet.HttpConstraintElement(javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic)", "public javax.servlet.HttpConstraintElement(javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic)"], ["javax.servlet.HttpConstraintElement", "javax.servlet.HttpConstraintElement(javax.servlet.annotation.ServletSecurity$TransportGuarantee, java.lang.String...)", "public javax.servlet.HttpConstraintElement(javax.servlet.annotation.ServletSecurity$TransportGuarantee, java.lang.String...)"], ["javax.servlet.HttpConstraintElement", "javax.servlet.HttpConstraintElement(javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic, javax.servlet.annotation.ServletSecurity$TransportGuarantee, java.lang.String...)", "public javax.servlet.HttpConstraintElement(javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic, javax.servlet.annotation.ServletSecurity$TransportGuarantee, java.lang.String...)"], ["javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic", "javax.servlet.HttpConstraintElement.getEmptyRoleSemantic()", "public javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic getEmptyRoleSemantic()"], ["javax.servlet.annotation.ServletSecurity$TransportGuarantee", "javax.servlet.HttpConstraintElement.getTransportGuarantee()", "public javax.servlet.annotation.ServletSecurity$TransportGuarantee getTransportGuarantee()"], ["java.lang.String[]", "javax.servlet.HttpConstraintElement.getRolesAllowed()", "public java.lang.String[] getRolesAllowed()"], ["javax.servlet.HttpMethodConstraintElement", "javax.servlet.HttpMethodConstraintElement(java.lang.String)", "public javax.servlet.HttpMethodConstraintElement(java.lang.String)"], ["javax.servlet.HttpMethodConstraintElement", "javax.servlet.HttpMethodConstraintElement(java.lang.String, javax.servlet.HttpConstraintElement)", "public javax.servlet.HttpMethodConstraintElement(java.lang.String, javax.servlet.HttpConstraintElement)"], ["java.lang.String", "javax.servlet.HttpMethodConstraintElement.getMethodName()", "public java.lang.String getMethodName()"], ["javax.servlet.MultipartConfigElement", "javax.servlet.MultipartConfigElement(java.lang.String)", "public javax.servlet.MultipartConfigElement(java.lang.String)"], ["javax.servlet.MultipartConfigElement", "javax.servlet.MultipartConfigElement(java.lang.String, long, long, int)", "public javax.servlet.MultipartConfigElement(java.lang.String, long, long, int)"], ["javax.servlet.MultipartConfigElement", "javax.servlet.MultipartConfigElement(javax.servlet.annotation.MultipartConfig)", "public javax.servlet.MultipartConfigElement(javax.servlet.annotation.MultipartConfig)"], ["java.lang.String", "javax.servlet.MultipartConfigElement.getLocation()", "public java.lang.String getLocation()"], ["long", "javax.servlet.MultipartConfigElement.getMaxFileSize()", "public long getMaxFileSize()"], ["long", "javax.servlet.MultipartConfigElement.getMaxRequestSize()", "public long getMaxRequestSize()"], ["int", "javax.servlet.MultipartConfigElement.getFileSizeThreshold()", "public int getFileSizeThreshold()"], ["javax.servlet.ServletContextAttributeEvent", "javax.servlet.ServletContextAttributeEvent(javax.servlet.ServletContext, java.lang.String, java.lang.Object)", "public javax.servlet.ServletContextAttributeEvent(javax.servlet.ServletContext, java.lang.String, java.lang.Object)"], ["java.lang.String", "javax.servlet.ServletContextAttributeEvent.getName()", "public java.lang.String getName()"], ["java.lang.Object", "javax.servlet.ServletContextAttributeEvent.getValue()", "public java.lang.Object getValue()"], ["javax.servlet.ServletContextEvent", "javax.servlet.ServletContextEvent(javax.servlet.ServletContext)", "public javax.servlet.ServletContextEvent(javax.servlet.ServletContext)"], ["javax.servlet.ServletContext", "javax.servlet.ServletContextEvent.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["javax.servlet.ServletException", "javax.servlet.ServletException()", "public javax.servlet.ServletException()"], ["javax.servlet.ServletException", "javax.servlet.ServletException(java.lang.String)", "public javax.servlet.ServletException(java.lang.String)"], ["javax.servlet.ServletException", "javax.servlet.ServletException(java.lang.String, java.lang.Throwable)", "public javax.servlet.ServletException(java.lang.String, java.lang.Throwable)"], ["javax.servlet.ServletException", "javax.servlet.ServletException(java.lang.Throwable)", "public javax.servlet.ServletException(java.lang.Throwable)"], ["java.lang.Throwable", "javax.servlet.ServletException.getRootCause()", "public java.lang.Throwable getRootCause()"], ["int", "javax.servlet.ServletInputStream.readLine(byte[], int, int)", "public int readLine(byte[], int, int) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.print(java.lang.String)", "public void print(java.lang.String) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.print(boolean)", "public void print(boolean) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.print(char)", "public void print(char) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.print(int)", "public void print(int) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.print(long)", "public void print(long) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.print(float)", "public void print(float) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.print(double)", "public void print(double) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println()", "public void println() throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println(java.lang.String)", "public void println(java.lang.String) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println(boolean)", "public void println(boolean) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println(char)", "public void println(char) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println(int)", "public void println(int) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println(long)", "public void println(long) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println(float)", "public void println(float) throws java.io.IOException"], ["void", "javax.servlet.ServletOutputStream.println(double)", "public void println(double) throws java.io.IOException"], ["javax.servlet.ServletRequestAttributeEvent", "javax.servlet.ServletRequestAttributeEvent(javax.servlet.ServletContext, javax.servlet.ServletRequest, java.lang.String, java.lang.Object)", "public javax.servlet.ServletRequestAttributeEvent(javax.servlet.ServletContext, javax.servlet.ServletRequest, java.lang.String, java.lang.Object)"], ["java.lang.String", "javax.servlet.ServletRequestAttributeEvent.getName()", "public java.lang.String getName()"], ["java.lang.Object", "javax.servlet.ServletRequestAttributeEvent.getValue()", "public java.lang.Object getValue()"], ["javax.servlet.ServletRequestEvent", "javax.servlet.ServletRequestEvent(javax.servlet.ServletContext, javax.servlet.ServletRequest)", "public javax.servlet.ServletRequestEvent(javax.servlet.ServletContext, javax.servlet.ServletRequest)"], ["javax.servlet.ServletRequest", "javax.servlet.ServletRequestEvent.getServletRequest()", "public javax.servlet.ServletRequest getServletRequest()"], ["javax.servlet.ServletContext", "javax.servlet.ServletRequestEvent.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["javax.servlet.ServletRequestWrapper", "javax.servlet.ServletRequestWrapper(javax.servlet.ServletRequest)", "public javax.servlet.ServletRequestWrapper(javax.servlet.ServletRequest)"], ["javax.servlet.ServletRequest", "javax.servlet.ServletRequestWrapper.getRequest()", "public javax.servlet.ServletRequest getRequest()"], ["void", "javax.servlet.ServletRequestWrapper.setRequest(javax.servlet.ServletRequest)", "public void setRequest(javax.servlet.ServletRequest)"], ["java.lang.Object", "javax.servlet.ServletRequestWrapper.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "javax.servlet.ServletRequestWrapper.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["void", "javax.servlet.ServletRequestWrapper.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String) throws java.io.UnsupportedEncodingException"], ["int", "javax.servlet.ServletRequestWrapper.getContentLength()", "public int getContentLength()"], ["long", "javax.servlet.ServletRequestWrapper.getContentLengthLong()", "public long getContentLengthLong()"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getContentType()", "public java.lang.String getContentType()"], ["javax.servlet.ServletInputStream", "javax.servlet.ServletRequestWrapper.getInputStream()", "public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "javax.servlet.ServletRequestWrapper.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"], ["java.util.Enumeration<java.lang.String>", "javax.servlet.ServletRequestWrapper.getParameterNames()", "public java.util.Enumeration<java.lang.String> getParameterNames()"], ["java.lang.String[]", "javax.servlet.ServletRequestWrapper.getParameterValues(java.lang.String)", "public java.lang.String[] getParameterValues(java.lang.String)"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getProtocol()", "public java.lang.String getProtocol()"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getScheme()", "public java.lang.String getScheme()"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getServerName()", "public java.lang.String getServerName()"], ["int", "javax.servlet.ServletRequestWrapper.getServerPort()", "public int getServerPort()"], ["java.io.BufferedReader", "javax.servlet.ServletRequestWrapper.getReader()", "public java.io.BufferedReader getReader() throws java.io.IOException"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getRemoteHost()", "public java.lang.String getRemoteHost()"], ["void", "javax.servlet.ServletRequestWrapper.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "javax.servlet.ServletRequestWrapper.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["java.util.Locale", "javax.servlet.ServletRequestWrapper.getLocale()", "public java.util.Locale getLocale()"], ["java.util.Enumeration<java.util.Locale>", "javax.servlet.ServletRequestWrapper.getLocales()", "public java.util.Enumeration<java.util.Locale> getLocales()"], ["boolean", "javax.servlet.ServletRequestWrapper.isSecure()", "public boolean isSecure()"], ["javax.servlet.RequestDispatcher", "javax.servlet.ServletRequestWrapper.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["int", "javax.servlet.ServletRequestWrapper.getRemotePort()", "public int getRemotePort()"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getLocalName()", "public java.lang.String getLocalName()"], ["java.lang.String", "javax.servlet.ServletRequestWrapper.getLocalAddr()", "public java.lang.String getLocalAddr()"], ["int", "javax.servlet.ServletRequestWrapper.getLocalPort()", "public int getLocalPort()"], ["javax.servlet.ServletContext", "javax.servlet.ServletRequestWrapper.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["javax.servlet.AsyncContext", "javax.servlet.ServletRequestWrapper.startAsync()", "public javax.servlet.AsyncContext startAsync() throws java.lang.IllegalStateException"], ["javax.servlet.AsyncContext", "javax.servlet.ServletRequestWrapper.startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.lang.IllegalStateException"], ["boolean", "javax.servlet.ServletRequestWrapper.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "javax.servlet.ServletRequestWrapper.isAsyncSupported()", "public boolean isAsyncSupported()"], ["javax.servlet.AsyncContext", "javax.servlet.ServletRequestWrapper.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["boolean", "javax.servlet.ServletRequestWrapper.isWrapperFor(javax.servlet.ServletRequest)", "public boolean isWrapperFor(javax.servlet.ServletRequest)"], ["boolean", "javax.servlet.ServletRequestWrapper.isWrapperFor(java.lang.Class<?>)", "public boolean isWrapperFor(java.lang.Class<?>)"], ["javax.servlet.DispatcherType", "javax.servlet.ServletRequestWrapper.getDispatcherType()", "public javax.servlet.DispatcherType getDispatcherType()"], ["javax.servlet.ServletResponseWrapper", "javax.servlet.ServletResponseWrapper(javax.servlet.ServletResponse)", "public javax.servlet.ServletResponseWrapper(javax.servlet.ServletResponse)"], ["javax.servlet.ServletResponse", "javax.servlet.ServletResponseWrapper.getResponse()", "public javax.servlet.ServletResponse getResponse()"], ["void", "javax.servlet.ServletResponseWrapper.setResponse(javax.servlet.ServletResponse)", "public void setResponse(javax.servlet.ServletResponse)"], ["void", "javax.servlet.ServletResponseWrapper.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["java.lang.String", "javax.servlet.ServletResponseWrapper.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["javax.servlet.ServletOutputStream", "javax.servlet.ServletResponseWrapper.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["java.io.PrintWriter", "javax.servlet.ServletResponseWrapper.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.IOException"], ["void", "javax.servlet.ServletResponseWrapper.setContentLength(int)", "public void setContentLength(int)"], ["void", "javax.servlet.ServletResponseWrapper.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "javax.servlet.ServletResponseWrapper.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["java.lang.String", "javax.servlet.ServletResponseWrapper.getContentType()", "public java.lang.String getContentType()"], ["void", "javax.servlet.ServletResponseWrapper.setBufferSize(int)", "public void setBufferSize(int)"], ["int", "javax.servlet.ServletResponseWrapper.getBufferSize()", "public int getBufferSize()"], ["void", "javax.servlet.ServletResponseWrapper.flushBuffer()", "public void flushBuffer() throws java.io.IOException"], ["boolean", "javax.servlet.ServletResponseWrapper.isCommitted()", "public boolean isCommitted()"], ["void", "javax.servlet.ServletResponseWrapper.reset()", "public void reset()"], ["void", "javax.servlet.ServletResponseWrapper.resetBuffer()", "public void resetBuffer()"], ["void", "javax.servlet.ServletResponseWrapper.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["java.util.Locale", "javax.servlet.ServletResponseWrapper.getLocale()", "public java.util.Locale getLocale()"], ["boolean", "javax.servlet.ServletResponseWrapper.isWrapperFor(javax.servlet.ServletResponse)", "public boolean isWrapperFor(javax.servlet.ServletResponse)"], ["boolean", "javax.servlet.ServletResponseWrapper.isWrapperFor(java.lang.Class<?>)", "public boolean isWrapperFor(java.lang.Class<?>)"], ["javax.servlet.ServletSecurityElement", "javax.servlet.ServletSecurityElement()", "public javax.servlet.ServletSecurityElement()"], ["javax.servlet.ServletSecurityElement", "javax.servlet.ServletSecurityElement(javax.servlet.HttpConstraintElement)", "public javax.servlet.ServletSecurityElement(javax.servlet.HttpConstraintElement)"], ["javax.servlet.ServletSecurityElement", "javax.servlet.ServletSecurityElement(java.util.Collection<javax.servlet.HttpMethodConstraintElement>)", "public javax.servlet.ServletSecurityElement(java.util.Collection<javax.servlet.HttpMethodConstraintElement>)"], ["javax.servlet.ServletSecurityElement", "javax.servlet.ServletSecurityElement(javax.servlet.HttpConstraintElement, java.util.Collection<javax.servlet.HttpMethodConstraintElement>)", "public javax.servlet.ServletSecurityElement(javax.servlet.HttpConstraintElement, java.util.Collection<javax.servlet.HttpMethodConstraintElement>)"], ["javax.servlet.ServletSecurityElement", "javax.servlet.ServletSecurityElement(javax.servlet.annotation.ServletSecurity)", "public javax.servlet.ServletSecurityElement(javax.servlet.annotation.ServletSecurity)"], ["java.util.Collection<javax.servlet.HttpMethodConstraintElement>", "javax.servlet.ServletSecurityElement.getHttpMethodConstraints()", "public java.util.Collection<javax.servlet.HttpMethodConstraintElement> getHttpMethodConstraints()"], ["java.util.Collection<java.lang.String>", "javax.servlet.ServletSecurityElement.getMethodNames()", "public java.util.Collection<java.lang.String> getMethodNames()"], ["javax.servlet.SessionTrackingMode[]", "javax.servlet.SessionTrackingMode.values()", "public static javax.servlet.SessionTrackingMode[] values()"], ["javax.servlet.SessionTrackingMode", "javax.servlet.SessionTrackingMode.valueOf(java.lang.String)", "public static javax.servlet.SessionTrackingMode valueOf(java.lang.String)"], ["javax.servlet.UnavailableException", "javax.servlet.UnavailableException(javax.servlet.Servlet, java.lang.String)", "public javax.servlet.UnavailableException(javax.servlet.Servlet, java.lang.String)"], ["javax.servlet.UnavailableException", "javax.servlet.UnavailableException(int, javax.servlet.Servlet, java.lang.String)", "public javax.servlet.UnavailableException(int, javax.servlet.Servlet, java.lang.String)"], ["javax.servlet.UnavailableException", "javax.servlet.UnavailableException(java.lang.String)", "public javax.servlet.UnavailableException(java.lang.String)"], ["javax.servlet.UnavailableException", "javax.servlet.UnavailableException(java.lang.String, int)", "public javax.servlet.UnavailableException(java.lang.String, int)"], ["boolean", "javax.servlet.UnavailableException.isPermanent()", "public boolean isPermanent()"], ["javax.servlet.Servlet", "javax.servlet.UnavailableException.getServlet()", "public javax.servlet.Servlet getServlet()"], ["int", "javax.servlet.UnavailableException.getUnavailableSeconds()", "public int getUnavailableSeconds()"], ["javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic[]", "javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic.values()", "public static javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic[] values()"], ["javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic", "javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic.valueOf(java.lang.String)", "public static javax.servlet.annotation.ServletSecurity$EmptyRoleSemantic valueOf(java.lang.String)"], ["javax.servlet.annotation.ServletSecurity$TransportGuarantee[]", "javax.servlet.annotation.ServletSecurity$TransportGuarantee.values()", "public static javax.servlet.annotation.ServletSecurity$TransportGuarantee[] values()"], ["javax.servlet.annotation.ServletSecurity$TransportGuarantee", "javax.servlet.annotation.ServletSecurity$TransportGuarantee.valueOf(java.lang.String)", "public static javax.servlet.annotation.ServletSecurity$TransportGuarantee valueOf(java.lang.String)"], ["javax.servlet.http.Cookie", "javax.servlet.http.Cookie(java.lang.String, java.lang.String)", "public javax.servlet.http.Cookie(java.lang.String, java.lang.String)"], ["void", "javax.servlet.http.Cookie.setComment(java.lang.String)", "public void setComment(java.lang.String)"], ["java.lang.String", "javax.servlet.http.Cookie.getComment()", "public java.lang.String getComment()"], ["void", "javax.servlet.http.Cookie.setDomain(java.lang.String)", "public void setDomain(java.lang.String)"], ["java.lang.String", "javax.servlet.http.Cookie.getDomain()", "public java.lang.String getDomain()"], ["void", "javax.servlet.http.Cookie.setMaxAge(int)", "public void setMaxAge(int)"], ["int", "javax.servlet.http.Cookie.getMaxAge()", "public int getMaxAge()"], ["void", "javax.servlet.http.Cookie.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "javax.servlet.http.Cookie.getPath()", "public java.lang.String getPath()"], ["void", "javax.servlet.http.Cookie.setSecure(boolean)", "public void setSecure(boolean)"], ["boolean", "javax.servlet.http.Cookie.getSecure()", "public boolean getSecure()"], ["java.lang.String", "javax.servlet.http.Cookie.getName()", "public java.lang.String getName()"], ["void", "javax.servlet.http.Cookie.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["java.lang.String", "javax.servlet.http.Cookie.getValue()", "public java.lang.String getValue()"], ["int", "javax.servlet.http.Cookie.getVersion()", "public int getVersion()"], ["void", "javax.servlet.http.Cookie.setVersion(int)", "public void setVersion(int)"], ["java.lang.Object", "javax.servlet.http.Cookie.clone()", "public java.lang.Object clone()"], ["void", "javax.servlet.http.Cookie.setHttpOnly(boolean)", "public void setHttpOnly(boolean)"], ["boolean", "javax.servlet.http.Cookie.isHttpOnly()", "public boolean isHttpOnly()"], ["javax.servlet.http.HttpServlet", "javax.servlet.http.HttpServlet()", "public javax.servlet.http.HttpServlet()"], ["void", "javax.servlet.http.HttpServlet.service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void service(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["javax.servlet.http.HttpServletRequestWrapper", "javax.servlet.http.HttpServletRequestWrapper(javax.servlet.http.HttpServletRequest)", "public javax.servlet.http.HttpServletRequestWrapper(javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getAuthType()", "public java.lang.String getAuthType()"], ["javax.servlet.http.Cookie[]", "javax.servlet.http.HttpServletRequestWrapper.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["long", "javax.servlet.http.HttpServletRequestWrapper.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "javax.servlet.http.HttpServletRequestWrapper.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "javax.servlet.http.HttpServletRequestWrapper.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["int", "javax.servlet.http.HttpServletRequestWrapper.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getQueryString()", "public java.lang.String getQueryString()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getRemoteUser()", "public java.lang.String getRemoteUser()"], ["boolean", "javax.servlet.http.HttpServletRequestWrapper.isUserInRole(java.lang.String)", "public boolean isUserInRole(java.lang.String)"], ["java.security.Principal", "javax.servlet.http.HttpServletRequestWrapper.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getRequestedSessionId()", "public java.lang.String getRequestedSessionId()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "javax.servlet.http.HttpServletRequestWrapper.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.http.HttpSession", "javax.servlet.http.HttpServletRequestWrapper.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["javax.servlet.http.HttpSession", "javax.servlet.http.HttpServletRequestWrapper.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["java.lang.String", "javax.servlet.http.HttpServletRequestWrapper.changeSessionId()", "public java.lang.String changeSessionId()"], ["boolean", "javax.servlet.http.HttpServletRequestWrapper.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["boolean", "javax.servlet.http.HttpServletRequestWrapper.isRequestedSessionIdFromCookie()", "public boolean isRequestedSessionIdFromCookie()"], ["boolean", "javax.servlet.http.HttpServletRequestWrapper.isRequestedSessionIdFromURL()", "public boolean isRequestedSessionIdFromURL()"], ["boolean", "javax.servlet.http.HttpServletRequestWrapper.isRequestedSessionIdFromUrl()", "public boolean isRequestedSessionIdFromUrl()"], ["boolean", "javax.servlet.http.HttpServletRequestWrapper.authenticate(javax.servlet.http.HttpServletResponse)", "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "javax.servlet.http.HttpServletRequestWrapper.login(java.lang.String, java.lang.String)", "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["void", "javax.servlet.http.HttpServletRequestWrapper.logout()", "public void logout() throws javax.servlet.ServletException"], ["java.util.Collection<javax.servlet.http.Part>", "javax.servlet.http.HttpServletRequestWrapper.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "javax.servlet.http.HttpServletRequestWrapper.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException"], ["<T extends javax.servlet.http.HttpUpgradeHandler> T", "javax.servlet.http.HttpServletRequestWrapper.upgrade(java.lang.Class<T>)", "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.HttpServletResponseWrapper", "javax.servlet.http.HttpServletResponseWrapper(javax.servlet.http.HttpServletResponse)", "public javax.servlet.http.HttpServletResponseWrapper(javax.servlet.http.HttpServletResponse)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["boolean", "javax.servlet.http.HttpServletResponseWrapper.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["java.lang.String", "javax.servlet.http.HttpServletResponseWrapper.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["java.lang.String", "javax.servlet.http.HttpServletResponseWrapper.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "javax.servlet.http.HttpServletResponseWrapper.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["java.lang.String", "javax.servlet.http.HttpServletResponseWrapper.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "javax.servlet.http.HttpServletResponseWrapper.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "javax.servlet.http.HttpServletResponseWrapper.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "javax.servlet.http.HttpServletResponseWrapper.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.setStatus(int)", "public void setStatus(int)"], ["void", "javax.servlet.http.HttpServletResponseWrapper.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["int", "javax.servlet.http.HttpServletResponseWrapper.getStatus()", "public int getStatus()"], ["java.lang.String", "javax.servlet.http.HttpServletResponseWrapper.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "javax.servlet.http.HttpServletResponseWrapper.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["java.util.Collection<java.lang.String>", "javax.servlet.http.HttpServletResponseWrapper.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["javax.servlet.http.HttpSessionBindingEvent", "javax.servlet.http.HttpSessionBindingEvent(javax.servlet.http.HttpSession, java.lang.String)", "public javax.servlet.http.HttpSessionBindingEvent(javax.servlet.http.HttpSession, java.lang.String)"], ["javax.servlet.http.HttpSessionBindingEvent", "javax.servlet.http.HttpSessionBindingEvent(javax.servlet.http.HttpSession, java.lang.String, java.lang.Object)", "public javax.servlet.http.HttpSessionBindingEvent(javax.servlet.http.HttpSession, java.lang.String, java.lang.Object)"], ["javax.servlet.http.HttpSession", "javax.servlet.http.HttpSessionBindingEvent.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["java.lang.String", "javax.servlet.http.HttpSessionBindingEvent.getName()", "public java.lang.String getName()"], ["java.lang.Object", "javax.servlet.http.HttpSessionBindingEvent.getValue()", "public java.lang.Object getValue()"], ["javax.servlet.http.HttpSessionEvent", "javax.servlet.http.HttpSessionEvent(javax.servlet.http.HttpSession)", "public javax.servlet.http.HttpSessionEvent(javax.servlet.http.HttpSession)"], ["javax.servlet.http.HttpSession", "javax.servlet.http.HttpSessionEvent.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["javax.servlet.http.HttpUtils", "javax.servlet.http.HttpUtils()", "public javax.servlet.http.HttpUtils()"], ["java.util.Hashtable<java.lang.String, java.lang.String[]>", "javax.servlet.http.HttpUtils.parseQueryString(java.lang.String)", "public static java.util.Hashtable<java.lang.String, java.lang.String[]> parseQueryString(java.lang.String)"], ["java.util.Hashtable<java.lang.String, java.lang.String[]>", "javax.servlet.http.HttpUtils.parsePostData(int, javax.servlet.ServletInputStream)", "public static java.util.Hashtable<java.lang.String, java.lang.String[]> parsePostData(int, javax.servlet.ServletInputStream)"], ["java.lang.StringBuffer", "javax.servlet.http.HttpUtils.getRequestURL(javax.servlet.http.HttpServletRequest)", "public static java.lang.StringBuffer getRequestURL(javax.servlet.http.HttpServletRequest)"], ["void", "javax.servlet.http.NoBodyOutputStream.write(int)", "public void write(int)"], ["void", "javax.servlet.http.NoBodyOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["boolean", "javax.servlet.http.NoBodyOutputStream.isReady()", "public boolean isReady()"], ["void", "javax.servlet.http.NoBodyOutputStream.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["void", "javax.servlet.http.NoBodyResponse.setContentLength(int)", "public void setContentLength(int)"], ["void", "javax.servlet.http.NoBodyResponse.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "javax.servlet.http.NoBodyResponse.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "javax.servlet.http.NoBodyResponse.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "javax.servlet.http.NoBodyResponse.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "javax.servlet.http.NoBodyResponse.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["javax.servlet.ServletOutputStream", "javax.servlet.http.NoBodyResponse.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["java.io.PrintWriter", "javax.servlet.http.NoBodyResponse.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.UnsupportedEncodingException"], ["org.apache.catalina.ContainerEvent", "org.apache.catalina.ContainerEvent(org.apache.catalina.Container, java.lang.String, java.lang.Object)", "public org.apache.catalina.ContainerEvent(org.apache.catalina.Container, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.ContainerEvent.getData()", "public java.lang.Object getData()"], ["org.apache.catalina.Container", "org.apache.catalina.ContainerEvent.getContainer()", "public org.apache.catalina.Container getContainer()"], ["java.lang.String", "org.apache.catalina.ContainerEvent.getType()", "public java.lang.String getType()"], ["java.lang.String", "org.apache.catalina.ContainerEvent.toString()", "public java.lang.String toString()"], ["org.apache.catalina.Globals", "org.apache.catalina.Globals()", "public org.apache.catalina.Globals()"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String)"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String, java.lang.Throwable)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String, java.lang.Throwable)"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Filter, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String)"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String, java.lang.Throwable)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String, java.lang.Throwable)"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["org.apache.catalina.InstanceEvent", "org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)", "public org.apache.catalina.InstanceEvent(org.apache.catalina.Wrapper, javax.servlet.Servlet, java.lang.String, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.catalina.InstanceEvent.getException()", "public java.lang.Throwable getException()"], ["javax.servlet.Filter", "org.apache.catalina.InstanceEvent.getFilter()", "public javax.servlet.Filter getFilter()"], ["javax.servlet.ServletRequest", "org.apache.catalina.InstanceEvent.getRequest()", "public javax.servlet.ServletRequest getRequest()"], ["javax.servlet.ServletResponse", "org.apache.catalina.InstanceEvent.getResponse()", "public javax.servlet.ServletResponse getResponse()"], ["javax.servlet.Servlet", "org.apache.catalina.InstanceEvent.getServlet()", "public javax.servlet.Servlet getServlet()"], ["java.lang.String", "org.apache.catalina.InstanceEvent.getType()", "public java.lang.String getType()"], ["org.apache.catalina.Wrapper", "org.apache.catalina.InstanceEvent.getWrapper()", "public org.apache.catalina.Wrapper getWrapper()"], ["org.apache.catalina.LifecycleEvent", "org.apache.catalina.LifecycleEvent(org.apache.catalina.Lifecycle, java.lang.String, java.lang.Object)", "public org.apache.catalina.LifecycleEvent(org.apache.catalina.Lifecycle, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.LifecycleEvent.getData()", "public java.lang.Object getData()"], ["org.apache.catalina.Lifecycle", "org.apache.catalina.LifecycleEvent.getLifecycle()", "public org.apache.catalina.Lifecycle getLifecycle()"], ["java.lang.String", "org.apache.catalina.LifecycleEvent.getType()", "public java.lang.String getType()"], ["org.apache.catalina.LifecycleException", "org.apache.catalina.LifecycleException()", "public org.apache.catalina.LifecycleException()"], ["org.apache.catalina.LifecycleException", "org.apache.catalina.LifecycleException(java.lang.String)", "public org.apache.catalina.LifecycleException(java.lang.String)"], ["org.apache.catalina.LifecycleException", "org.apache.catalina.LifecycleException(java.lang.Throwable)", "public org.apache.catalina.LifecycleException(java.lang.Throwable)"], ["org.apache.catalina.LifecycleException", "org.apache.catalina.LifecycleException(java.lang.String, java.lang.Throwable)", "public org.apache.catalina.LifecycleException(java.lang.String, java.lang.Throwable)"], ["org.apache.catalina.LifecycleState[]", "org.apache.catalina.LifecycleState.values()", "public static org.apache.catalina.LifecycleState[] values()"], ["org.apache.catalina.LifecycleState", "org.apache.catalina.LifecycleState.valueOf(java.lang.String)", "public static org.apache.catalina.LifecycleState valueOf(java.lang.String)"], ["boolean", "org.apache.catalina.LifecycleState.isAvailable()", "public boolean isAvailable()"], ["java.lang.String", "org.apache.catalina.LifecycleState.getLifecycleEvent()", "public java.lang.String getLifecycleEvent()"], ["org.apache.catalina.SessionEvent", "org.apache.catalina.SessionEvent(org.apache.catalina.Session, java.lang.String, java.lang.Object)", "public org.apache.catalina.SessionEvent(org.apache.catalina.Session, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.SessionEvent.getData()", "public java.lang.Object getData()"], ["org.apache.catalina.Session", "org.apache.catalina.SessionEvent.getSession()", "public org.apache.catalina.Session getSession()"], ["java.lang.String", "org.apache.catalina.SessionEvent.getType()", "public java.lang.String getType()"], ["java.lang.String", "org.apache.catalina.SessionEvent.toString()", "public java.lang.String toString()"], ["org.apache.catalina.WebResourceRoot$ResourceSetType[]", "org.apache.catalina.WebResourceRoot$ResourceSetType.values()", "public static org.apache.catalina.WebResourceRoot$ResourceSetType[] values()"], ["org.apache.catalina.WebResourceRoot$ResourceSetType", "org.apache.catalina.WebResourceRoot$ResourceSetType.valueOf(java.lang.String)", "public static org.apache.catalina.WebResourceRoot$ResourceSetType valueOf(java.lang.String)"], ["org.apache.catalina.authenticator.AuthenticatorBase", "org.apache.catalina.authenticator.AuthenticatorBase()", "public org.apache.catalina.authenticator.AuthenticatorBase()"], ["boolean", "org.apache.catalina.authenticator.AuthenticatorBase.getAlwaysUseSession()", "public boolean getAlwaysUseSession()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setAlwaysUseSession(boolean)", "public void setAlwaysUseSession(boolean)"], ["boolean", "org.apache.catalina.authenticator.AuthenticatorBase.getCache()", "public boolean getCache()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setCache(boolean)", "public void setCache(boolean)"], ["org.apache.catalina.Container", "org.apache.catalina.authenticator.AuthenticatorBase.getContainer()", "public org.apache.catalina.Container getContainer()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["boolean", "org.apache.catalina.authenticator.AuthenticatorBase.getDisableProxyCaching()", "public boolean getDisableProxyCaching()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setDisableProxyCaching(boolean)", "public void setDisableProxyCaching(boolean)"], ["boolean", "org.apache.catalina.authenticator.AuthenticatorBase.getSecurePagesWithPragma()", "public boolean getSecurePagesWithPragma()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setSecurePagesWithPragma(boolean)", "public void setSecurePagesWithPragma(boolean)"], ["boolean", "org.apache.catalina.authenticator.AuthenticatorBase.getChangeSessionIdOnAuthentication()", "public boolean getChangeSessionIdOnAuthentication()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setChangeSessionIdOnAuthentication(boolean)", "public void setChangeSessionIdOnAuthentication(boolean)"], ["java.lang.String", "org.apache.catalina.authenticator.AuthenticatorBase.getSecureRandomClass()", "public java.lang.String getSecureRandomClass()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setSecureRandomClass(java.lang.String)", "public void setSecureRandomClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.authenticator.AuthenticatorBase.getSecureRandomAlgorithm()", "public java.lang.String getSecureRandomAlgorithm()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setSecureRandomAlgorithm(java.lang.String)", "public void setSecureRandomAlgorithm(java.lang.String)"], ["java.lang.String", "org.apache.catalina.authenticator.AuthenticatorBase.getSecureRandomProvider()", "public java.lang.String getSecureRandomProvider()"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.setSecureRandomProvider(java.lang.String)", "public void setSecureRandomProvider(java.lang.String)"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.register(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse, java.security.Principal, java.lang.String, java.lang.String, java.lang.String)", "public void register(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse, java.security.Principal, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.login(java.lang.String, java.lang.String, org.apache.catalina.connector.Request)", "public void login(java.lang.String, java.lang.String, org.apache.catalina.connector.Request) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.authenticator.AuthenticatorBase.logout(org.apache.catalina.connector.Request)", "public void logout(org.apache.catalina.connector.Request)"], ["org.apache.catalina.authenticator.BasicAuthenticator$BasicCredentials", "org.apache.catalina.authenticator.BasicAuthenticator$BasicCredentials(org.apache.tomcat.util.buf.ByteChunk)", "public org.apache.catalina.authenticator.BasicAuthenticator$BasicCredentials(org.apache.tomcat.util.buf.ByteChunk) throws java.lang.IllegalArgumentException"], ["java.lang.String", "org.apache.catalina.authenticator.BasicAuthenticator$BasicCredentials.getUsername()", "public java.lang.String getUsername()"], ["java.lang.String", "org.apache.catalina.authenticator.BasicAuthenticator$BasicCredentials.getPassword()", "public java.lang.String getPassword()"], ["org.apache.catalina.authenticator.BasicAuthenticator", "org.apache.catalina.authenticator.BasicAuthenticator()", "public org.apache.catalina.authenticator.BasicAuthenticator()"], ["boolean", "org.apache.catalina.authenticator.BasicAuthenticator.authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse)", "public boolean authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["org.apache.catalina.authenticator.Constants", "org.apache.catalina.authenticator.Constants()", "public org.apache.catalina.authenticator.Constants()"], ["org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo", "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo(java.lang.String, long, java.lang.String, java.util.Map<java.lang.String, org.apache.catalina.authenticator.DigestAuthenticator$NonceInfo>, boolean)", "public org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo(java.lang.String, long, java.lang.String, java.util.Map<java.lang.String, org.apache.catalina.authenticator.DigestAuthenticator$NonceInfo>, boolean)"], ["java.lang.String", "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo.getUsername()", "public java.lang.String getUsername()"], ["boolean", "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo.parse(org.apache.catalina.connector.Request, java.lang.String)", "public boolean parse(org.apache.catalina.connector.Request, java.lang.String)"], ["boolean", "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo.validate(org.apache.catalina.connector.Request)", "public boolean validate(org.apache.catalina.connector.Request)"], ["boolean", "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo.isNonceStale()", "public boolean isNonceStale()"], ["java.security.Principal", "org.apache.catalina.authenticator.DigestAuthenticator$DigestInfo.authenticate(org.apache.catalina.Realm)", "public java.security.Principal authenticate(org.apache.catalina.Realm)"], ["org.apache.catalina.authenticator.DigestAuthenticator$NonceInfo", "org.apache.catalina.authenticator.DigestAuthenticator$NonceInfo(long, int)", "public org.apache.catalina.authenticator.DigestAuthenticator$NonceInfo(long, int)"], ["synchronized", "org.apache.catalina.authenticator.DigestAuthenticator$NonceInfo.boolean nonceCountValid(long)", "public synchronized boolean nonceCountValid(long)"], ["long", "org.apache.catalina.authenticator.DigestAuthenticator$NonceInfo.getTimestamp()", "public long getTimestamp()"], ["org.apache.catalina.authenticator.DigestAuthenticator", "org.apache.catalina.authenticator.DigestAuthenticator()", "public org.apache.catalina.authenticator.DigestAuthenticator()"], ["int", "org.apache.catalina.authenticator.DigestAuthenticator.getNonceCountWindowSize()", "public int getNonceCountWindowSize()"], ["void", "org.apache.catalina.authenticator.DigestAuthenticator.setNonceCountWindowSize(int)", "public void setNonceCountWindowSize(int)"], ["int", "org.apache.catalina.authenticator.DigestAuthenticator.getNonceCacheSize()", "public int getNonceCacheSize()"], ["void", "org.apache.catalina.authenticator.DigestAuthenticator.setNonceCacheSize(int)", "public void setNonceCacheSize(int)"], ["java.lang.String", "org.apache.catalina.authenticator.DigestAuthenticator.getKey()", "public java.lang.String getKey()"], ["void", "org.apache.catalina.authenticator.DigestAuthenticator.setKey(java.lang.String)", "public void setKey(java.lang.String)"], ["long", "org.apache.catalina.authenticator.DigestAuthenticator.getNonceValidity()", "public long getNonceValidity()"], ["void", "org.apache.catalina.authenticator.DigestAuthenticator.setNonceValidity(long)", "public void setNonceValidity(long)"], ["java.lang.String", "org.apache.catalina.authenticator.DigestAuthenticator.getOpaque()", "public java.lang.String getOpaque()"], ["void", "org.apache.catalina.authenticator.DigestAuthenticator.setOpaque(java.lang.String)", "public void setOpaque(java.lang.String)"], ["boolean", "org.apache.catalina.authenticator.DigestAuthenticator.isValidateUri()", "public boolean isValidateUri()"], ["void", "org.apache.catalina.authenticator.DigestAuthenticator.setValidateUri(boolean)", "public void setValidateUri(boolean)"], ["boolean", "org.apache.catalina.authenticator.DigestAuthenticator.authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse)", "public boolean authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["org.apache.catalina.authenticator.FormAuthenticator", "org.apache.catalina.authenticator.FormAuthenticator()", "public org.apache.catalina.authenticator.FormAuthenticator()"], ["java.lang.String", "org.apache.catalina.authenticator.FormAuthenticator.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["void", "org.apache.catalina.authenticator.FormAuthenticator.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["java.lang.String", "org.apache.catalina.authenticator.FormAuthenticator.getLandingPage()", "public java.lang.String getLandingPage()"], ["void", "org.apache.catalina.authenticator.FormAuthenticator.setLandingPage(java.lang.String)", "public void setLandingPage(java.lang.String)"], ["boolean", "org.apache.catalina.authenticator.FormAuthenticator.authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse)", "public boolean authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["org.apache.catalina.authenticator.NonLoginAuthenticator", "org.apache.catalina.authenticator.NonLoginAuthenticator()", "public org.apache.catalina.authenticator.NonLoginAuthenticator()"], ["boolean", "org.apache.catalina.authenticator.NonLoginAuthenticator.authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse)", "public boolean authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["org.apache.catalina.authenticator.SSLAuthenticator", "org.apache.catalina.authenticator.SSLAuthenticator()", "public org.apache.catalina.authenticator.SSLAuthenticator()"], ["boolean", "org.apache.catalina.authenticator.SSLAuthenticator.authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse)", "public boolean authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["org.apache.catalina.authenticator.SavedRequest", "org.apache.catalina.authenticator.SavedRequest()", "public org.apache.catalina.authenticator.SavedRequest()"], ["void", "org.apache.catalina.authenticator.SavedRequest.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["java.util.Iterator<javax.servlet.http.Cookie>", "org.apache.catalina.authenticator.SavedRequest.getCookies()", "public java.util.Iterator<javax.servlet.http.Cookie> getCookies()"], ["void", "org.apache.catalina.authenticator.SavedRequest.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.catalina.authenticator.SavedRequest.getHeaderNames()", "public java.util.Iterator<java.lang.String> getHeaderNames()"], ["java.util.Iterator<java.lang.String>", "org.apache.catalina.authenticator.SavedRequest.getHeaderValues(java.lang.String)", "public java.util.Iterator<java.lang.String> getHeaderValues(java.lang.String)"], ["void", "org.apache.catalina.authenticator.SavedRequest.addLocale(java.util.Locale)", "public void addLocale(java.util.Locale)"], ["java.util.Iterator<java.util.Locale>", "org.apache.catalina.authenticator.SavedRequest.getLocales()", "public java.util.Iterator<java.util.Locale> getLocales()"], ["java.lang.String", "org.apache.catalina.authenticator.SavedRequest.getMethod()", "public java.lang.String getMethod()"], ["void", "org.apache.catalina.authenticator.SavedRequest.setMethod(java.lang.String)", "public void setMethod(java.lang.String)"], ["java.lang.String", "org.apache.catalina.authenticator.SavedRequest.getQueryString()", "public java.lang.String getQueryString()"], ["void", "org.apache.catalina.authenticator.SavedRequest.setQueryString(java.lang.String)", "public void setQueryString(java.lang.String)"], ["java.lang.String", "org.apache.catalina.authenticator.SavedRequest.getRequestURI()", "public java.lang.String getRequestURI()"], ["void", "org.apache.catalina.authenticator.SavedRequest.setRequestURI(java.lang.String)", "public void setRequestURI(java.lang.String)"], ["java.lang.String", "org.apache.catalina.authenticator.SavedRequest.getDecodedRequestURI()", "public java.lang.String getDecodedRequestURI()"], ["void", "org.apache.catalina.authenticator.SavedRequest.setDecodedRequestURI(java.lang.String)", "public void setDecodedRequestURI(java.lang.String)"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.catalina.authenticator.SavedRequest.getBody()", "public org.apache.tomcat.util.buf.ByteChunk getBody()"], ["void", "org.apache.catalina.authenticator.SavedRequest.setBody(org.apache.tomcat.util.buf.ByteChunk)", "public void setBody(org.apache.tomcat.util.buf.ByteChunk)"], ["java.lang.String", "org.apache.catalina.authenticator.SavedRequest.getContentType()", "public java.lang.String getContentType()"], ["void", "org.apache.catalina.authenticator.SavedRequest.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["org.apache.catalina.authenticator.SingleSignOn", "org.apache.catalina.authenticator.SingleSignOn()", "public org.apache.catalina.authenticator.SingleSignOn()"], ["java.lang.String", "org.apache.catalina.authenticator.SingleSignOn.getCookieDomain()", "public java.lang.String getCookieDomain()"], ["void", "org.apache.catalina.authenticator.SingleSignOn.setCookieDomain(java.lang.String)", "public void setCookieDomain(java.lang.String)"], ["boolean", "org.apache.catalina.authenticator.SingleSignOn.getRequireReauthentication()", "public boolean getRequireReauthentication()"], ["void", "org.apache.catalina.authenticator.SingleSignOn.setRequireReauthentication(boolean)", "public void setRequireReauthentication(boolean)"], ["void", "org.apache.catalina.authenticator.SingleSignOn.sessionEvent(org.apache.catalina.SessionEvent)", "public void sessionEvent(org.apache.catalina.SessionEvent)"], ["void", "org.apache.catalina.authenticator.SingleSignOn.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.authenticator.SingleSignOnEntry", "org.apache.catalina.authenticator.SingleSignOnEntry(java.security.Principal, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.authenticator.SingleSignOnEntry(java.security.Principal, java.lang.String, java.lang.String, java.lang.String)"], ["synchronized", "org.apache.catalina.authenticator.SingleSignOnEntry.void addSession(org.apache.catalina.authenticator.SingleSignOn, org.apache.catalina.Session)", "public synchronized void addSession(org.apache.catalina.authenticator.SingleSignOn, org.apache.catalina.Session)"], ["synchronized", "org.apache.catalina.authenticator.SingleSignOnEntry.void removeSession(org.apache.catalina.Session)", "public synchronized void removeSession(org.apache.catalina.Session)"], ["synchronized", "org.apache.catalina.authenticator.SingleSignOnEntry.org.apache.catalina.Session[] findSessions()", "public synchronized org.apache.catalina.Session[] findSessions()"], ["java.lang.String", "org.apache.catalina.authenticator.SingleSignOnEntry.getAuthType()", "public java.lang.String getAuthType()"], ["boolean", "org.apache.catalina.authenticator.SingleSignOnEntry.getCanReauthenticate()", "public boolean getCanReauthenticate()"], ["java.lang.String", "org.apache.catalina.authenticator.SingleSignOnEntry.getPassword()", "public java.lang.String getPassword()"], ["java.security.Principal", "org.apache.catalina.authenticator.SingleSignOnEntry.getPrincipal()", "public java.security.Principal getPrincipal()"], ["java.lang.String", "org.apache.catalina.authenticator.SingleSignOnEntry.getUsername()", "public java.lang.String getUsername()"], ["void", "org.apache.catalina.authenticator.SingleSignOnEntry.updateCredentials(java.security.Principal, java.lang.String, java.lang.String, java.lang.String)", "public void updateCredentials(java.security.Principal, java.lang.String, java.lang.String, java.lang.String)"], ["org.ietf.jgss.GSSCredential", "org.apache.catalina.authenticator.SpnegoAuthenticator$1.run()", "public org.ietf.jgss.GSSCredential run() throws org.ietf.jgss.GSSException"], ["java.lang.Object", "org.apache.catalina.authenticator.SpnegoAuthenticator$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["byte[]", "org.apache.catalina.authenticator.SpnegoAuthenticator$AcceptAction.run()", "public byte[] run() throws org.ietf.jgss.GSSException"], ["java.lang.Object", "org.apache.catalina.authenticator.SpnegoAuthenticator$AcceptAction.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.authenticator.SpnegoAuthenticator", "org.apache.catalina.authenticator.SpnegoAuthenticator()", "public org.apache.catalina.authenticator.SpnegoAuthenticator()"], ["java.lang.String", "org.apache.catalina.authenticator.SpnegoAuthenticator.getLoginConfigName()", "public java.lang.String getLoginConfigName()"], ["void", "org.apache.catalina.authenticator.SpnegoAuthenticator.setLoginConfigName(java.lang.String)", "public void setLoginConfigName(java.lang.String)"], ["boolean", "org.apache.catalina.authenticator.SpnegoAuthenticator.isStoreDelegatedCredential()", "public boolean isStoreDelegatedCredential()"], ["void", "org.apache.catalina.authenticator.SpnegoAuthenticator.setStoreDelegatedCredential(boolean)", "public void setStoreDelegatedCredential(boolean)"], ["java.lang.String", "org.apache.catalina.authenticator.SpnegoAuthenticator.getNoKeepAliveUserAgents()", "public java.lang.String getNoKeepAliveUserAgents()"], ["void", "org.apache.catalina.authenticator.SpnegoAuthenticator.setNoKeepAliveUserAgents(java.lang.String)", "public void setNoKeepAliveUserAgents(java.lang.String)"], ["boolean", "org.apache.catalina.authenticator.SpnegoAuthenticator.authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse)", "public boolean authenticate(org.apache.catalina.connector.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["org.apache.catalina.comet.CometEvent$EventSubType[]", "org.apache.catalina.comet.CometEvent$EventSubType.values()", "public static org.apache.catalina.comet.CometEvent$EventSubType[] values()"], ["org.apache.catalina.comet.CometEvent$EventSubType", "org.apache.catalina.comet.CometEvent$EventSubType.valueOf(java.lang.String)", "public static org.apache.catalina.comet.CometEvent$EventSubType valueOf(java.lang.String)"], ["org.apache.catalina.comet.CometEvent$EventType[]", "org.apache.catalina.comet.CometEvent$EventType.values()", "public static org.apache.catalina.comet.CometEvent$EventType[] values()"], ["org.apache.catalina.comet.CometEvent$EventType", "org.apache.catalina.comet.CometEvent$EventType.valueOf(java.lang.String)", "public static org.apache.catalina.comet.CometEvent$EventType valueOf(java.lang.String)"], ["org.apache.catalina.connector.ClientAbortException", "org.apache.catalina.connector.ClientAbortException()", "public org.apache.catalina.connector.ClientAbortException()"], ["org.apache.catalina.connector.ClientAbortException", "org.apache.catalina.connector.ClientAbortException(java.lang.String)", "public org.apache.catalina.connector.ClientAbortException(java.lang.String)"], ["org.apache.catalina.connector.ClientAbortException", "org.apache.catalina.connector.ClientAbortException(java.lang.Throwable)", "public org.apache.catalina.connector.ClientAbortException(java.lang.Throwable)"], ["org.apache.catalina.connector.ClientAbortException", "org.apache.catalina.connector.ClientAbortException(java.lang.String, java.lang.Throwable)", "public org.apache.catalina.connector.ClientAbortException(java.lang.String, java.lang.Throwable)"], ["org.apache.catalina.connector.CometEventImpl", "org.apache.catalina.connector.CometEventImpl(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public org.apache.catalina.connector.CometEventImpl(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)"], ["void", "org.apache.catalina.connector.CometEventImpl.clear()", "public void clear()"], ["void", "org.apache.catalina.connector.CometEventImpl.setEventType(org.apache.catalina.comet.CometEvent$EventType)", "public void setEventType(org.apache.catalina.comet.CometEvent$EventType)"], ["void", "org.apache.catalina.connector.CometEventImpl.setEventSubType(org.apache.catalina.comet.CometEvent$EventSubType)", "public void setEventSubType(org.apache.catalina.comet.CometEvent$EventSubType)"], ["void", "org.apache.catalina.connector.CometEventImpl.close()", "public void close() throws java.io.IOException"], ["org.apache.catalina.comet.CometEvent$EventSubType", "org.apache.catalina.connector.CometEventImpl.getEventSubType()", "public org.apache.catalina.comet.CometEvent$EventSubType getEventSubType()"], ["org.apache.catalina.comet.CometEvent$EventType", "org.apache.catalina.connector.CometEventImpl.getEventType()", "public org.apache.catalina.comet.CometEvent$EventType getEventType()"], ["javax.servlet.http.HttpServletRequest", "org.apache.catalina.connector.CometEventImpl.getHttpServletRequest()", "public javax.servlet.http.HttpServletRequest getHttpServletRequest()"], ["javax.servlet.http.HttpServletResponse", "org.apache.catalina.connector.CometEventImpl.getHttpServletResponse()", "public javax.servlet.http.HttpServletResponse getHttpServletResponse()"], ["void", "org.apache.catalina.connector.CometEventImpl.setTimeout(int)", "public void setTimeout(int) throws java.io.IOException, javax.servlet.ServletException, java.lang.UnsupportedOperationException"], ["java.lang.String", "org.apache.catalina.connector.CometEventImpl.toString()", "public java.lang.String toString()"], ["org.apache.catalina.connector.Connector", "org.apache.catalina.connector.Connector()", "public org.apache.catalina.connector.Connector()"], ["org.apache.catalina.connector.Connector", "org.apache.catalina.connector.Connector(java.lang.String)", "public org.apache.catalina.connector.Connector(java.lang.String)"], ["java.lang.Object", "org.apache.catalina.connector.Connector.getProperty(java.lang.String)", "public java.lang.Object getProperty(java.lang.String)"], ["boolean", "org.apache.catalina.connector.Connector.setProperty(java.lang.String, java.lang.String)", "public boolean setProperty(java.lang.String, java.lang.String)"], ["java.lang.Object", "org.apache.catalina.connector.Connector.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["void", "org.apache.catalina.connector.Connector.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["org.apache.catalina.Service", "org.apache.catalina.connector.Connector.getService()", "public org.apache.catalina.Service getService()"], ["void", "org.apache.catalina.connector.Connector.setService(org.apache.catalina.Service)", "public void setService(org.apache.catalina.Service)"], ["boolean", "org.apache.catalina.connector.Connector.getAllowTrace()", "public boolean getAllowTrace()"], ["void", "org.apache.catalina.connector.Connector.setAllowTrace(boolean)", "public void setAllowTrace(boolean)"], ["long", "org.apache.catalina.connector.Connector.getAsyncTimeout()", "public long getAsyncTimeout()"], ["void", "org.apache.catalina.connector.Connector.setAsyncTimeout(long)", "public void setAsyncTimeout(long)"], ["boolean", "org.apache.catalina.connector.Connector.getEnableLookups()", "public boolean getEnableLookups()"], ["void", "org.apache.catalina.connector.Connector.setEnableLookups(boolean)", "public void setEnableLookups(boolean)"], ["int", "org.apache.catalina.connector.Connector.getMaxHeaderCount()", "public int getMaxHeaderCount()"], ["void", "org.apache.catalina.connector.Connector.setMaxHeaderCount(int)", "public void setMaxHeaderCount(int)"], ["int", "org.apache.catalina.connector.Connector.getMaxParameterCount()", "public int getMaxParameterCount()"], ["void", "org.apache.catalina.connector.Connector.setMaxParameterCount(int)", "public void setMaxParameterCount(int)"], ["int", "org.apache.catalina.connector.Connector.getMaxPostSize()", "public int getMaxPostSize()"], ["void", "org.apache.catalina.connector.Connector.setMaxPostSize(int)", "public void setMaxPostSize(int)"], ["int", "org.apache.catalina.connector.Connector.getMaxSavePostSize()", "public int getMaxSavePostSize()"], ["void", "org.apache.catalina.connector.Connector.setMaxSavePostSize(int)", "public void setMaxSavePostSize(int)"], ["java.lang.String", "org.apache.catalina.connector.Connector.getParseBodyMethods()", "public java.lang.String getParseBodyMethods()"], ["void", "org.apache.catalina.connector.Connector.setParseBodyMethods(java.lang.String)", "public void setParseBodyMethods(java.lang.String)"], ["int", "org.apache.catalina.connector.Connector.getPort()", "public int getPort()"], ["void", "org.apache.catalina.connector.Connector.setPort(int)", "public void setPort(int)"], ["int", "org.apache.catalina.connector.Connector.getLocalPort()", "public int getLocalPort()"], ["java.lang.String", "org.apache.catalina.connector.Connector.getProtocol()", "public java.lang.String getProtocol()"], ["void", "org.apache.catalina.connector.Connector.setProtocol(java.lang.String)", "public void setProtocol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Connector.getProtocolHandlerClassName()", "public java.lang.String getProtocolHandlerClassName()"], ["void", "org.apache.catalina.connector.Connector.setProtocolHandlerClassName(java.lang.String)", "public void setProtocolHandlerClassName(java.lang.String)"], ["org.apache.coyote.ProtocolHandler", "org.apache.catalina.connector.Connector.getProtocolHandler()", "public org.apache.coyote.ProtocolHandler getProtocolHandler()"], ["java.lang.String", "org.apache.catalina.connector.Connector.getProxyName()", "public java.lang.String getProxyName()"], ["void", "org.apache.catalina.connector.Connector.setProxyName(java.lang.String)", "public void setProxyName(java.lang.String)"], ["int", "org.apache.catalina.connector.Connector.getProxyPort()", "public int getProxyPort()"], ["void", "org.apache.catalina.connector.Connector.setProxyPort(int)", "public void setProxyPort(int)"], ["int", "org.apache.catalina.connector.Connector.getRedirectPort()", "public int getRedirectPort()"], ["void", "org.apache.catalina.connector.Connector.setRedirectPort(int)", "public void setRedirectPort(int)"], ["java.lang.String", "org.apache.catalina.connector.Connector.getScheme()", "public java.lang.String getScheme()"], ["void", "org.apache.catalina.connector.Connector.setScheme(java.lang.String)", "public void setScheme(java.lang.String)"], ["boolean", "org.apache.catalina.connector.Connector.getSecure()", "public boolean getSecure()"], ["void", "org.apache.catalina.connector.Connector.setSecure(boolean)", "public void setSecure(boolean)"], ["java.lang.String", "org.apache.catalina.connector.Connector.getURIEncoding()", "public java.lang.String getURIEncoding()"], ["java.lang.String", "org.apache.catalina.connector.Connector.getURIEncodingLower()", "public java.lang.String getURIEncodingLower()"], ["void", "org.apache.catalina.connector.Connector.setURIEncoding(java.lang.String)", "public void setURIEncoding(java.lang.String)"], ["boolean", "org.apache.catalina.connector.Connector.getUseBodyEncodingForURI()", "public boolean getUseBodyEncodingForURI()"], ["void", "org.apache.catalina.connector.Connector.setUseBodyEncodingForURI(boolean)", "public void setUseBodyEncodingForURI(boolean)"], ["boolean", "org.apache.catalina.connector.Connector.getXpoweredBy()", "public boolean getXpoweredBy()"], ["void", "org.apache.catalina.connector.Connector.setXpoweredBy(boolean)", "public void setXpoweredBy(boolean)"], ["void", "org.apache.catalina.connector.Connector.setUseIPVHosts(boolean)", "public void setUseIPVHosts(boolean)"], ["boolean", "org.apache.catalina.connector.Connector.getUseIPVHosts()", "public boolean getUseIPVHosts()"], ["java.lang.String", "org.apache.catalina.connector.Connector.getExecutorName()", "public java.lang.String getExecutorName()"], ["org.apache.catalina.connector.Request", "org.apache.catalina.connector.Connector.createRequest()", "public org.apache.catalina.connector.Request createRequest()"], ["org.apache.catalina.connector.Response", "org.apache.catalina.connector.Connector.createResponse()", "public org.apache.catalina.connector.Response createResponse()"], ["void", "org.apache.catalina.connector.Connector.pause()", "public void pause()"], ["void", "org.apache.catalina.connector.Connector.resume()", "public void resume()"], ["java.lang.String", "org.apache.catalina.connector.Connector.toString()", "public java.lang.String toString()"], ["org.apache.catalina.connector.Constants", "org.apache.catalina.connector.Constants()", "public org.apache.catalina.connector.Constants()"], ["org.apache.catalina.connector.CoyoteAdapter", "org.apache.catalina.connector.CoyoteAdapter(org.apache.catalina.connector.Connector)", "public org.apache.catalina.connector.CoyoteAdapter(org.apache.catalina.connector.Connector)"], ["boolean", "org.apache.catalina.connector.CoyoteAdapter.event(org.apache.coyote.Request, org.apache.coyote.Response, org.apache.tomcat.util.net.SocketStatus)", "public boolean event(org.apache.coyote.Request, org.apache.coyote.Response, org.apache.tomcat.util.net.SocketStatus)"], ["boolean", "org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(org.apache.coyote.Request, org.apache.coyote.Response, org.apache.tomcat.util.net.SocketStatus)", "public boolean asyncDispatch(org.apache.coyote.Request, org.apache.coyote.Response, org.apache.tomcat.util.net.SocketStatus) throws java.lang.Exception"], ["void", "org.apache.catalina.connector.CoyoteAdapter.service(org.apache.coyote.Request, org.apache.coyote.Response)", "public void service(org.apache.coyote.Request, org.apache.coyote.Response) throws java.lang.Exception"], ["void", "org.apache.catalina.connector.CoyoteAdapter.errorDispatch(org.apache.coyote.Request, org.apache.coyote.Response)", "public void errorDispatch(org.apache.coyote.Request, org.apache.coyote.Response)"], ["void", "org.apache.catalina.connector.CoyoteAdapter.log(org.apache.coyote.Request, org.apache.coyote.Response, long)", "public void log(org.apache.coyote.Request, org.apache.coyote.Response, long)"], ["void", "org.apache.catalina.connector.CoyoteAdapter.checkRecycled(org.apache.coyote.Request, org.apache.coyote.Response)", "public void checkRecycled(org.apache.coyote.Request, org.apache.coyote.Response)"], ["java.lang.String", "org.apache.catalina.connector.CoyoteAdapter.getDomain()", "public java.lang.String getDomain()"], ["boolean", "org.apache.catalina.connector.CoyoteAdapter.normalize(org.apache.tomcat.util.buf.MessageBytes)", "public static boolean normalize(org.apache.tomcat.util.buf.MessageBytes)"], ["boolean", "org.apache.catalina.connector.CoyoteAdapter.checkNormalize(org.apache.tomcat.util.buf.MessageBytes)", "public static boolean checkNormalize(org.apache.tomcat.util.buf.MessageBytes)"], ["java.lang.Integer", "org.apache.catalina.connector.CoyoteInputStream$1.run()", "public java.lang.Integer run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.CoyoteInputStream$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Integer", "org.apache.catalina.connector.CoyoteInputStream$2.run()", "public java.lang.Integer run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.CoyoteInputStream$2.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Integer", "org.apache.catalina.connector.CoyoteInputStream$3.run()", "public java.lang.Integer run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.CoyoteInputStream$3.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Integer", "org.apache.catalina.connector.CoyoteInputStream$4.run()", "public java.lang.Integer run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.CoyoteInputStream$4.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.connector.CoyoteInputStream$5.run()", "public java.lang.Void run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.CoyoteInputStream$5.run()", "public java.lang.Object run() throws java.lang.Exception"], ["int", "org.apache.catalina.connector.CoyoteInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.catalina.connector.CoyoteInputStream.available()", "public int available() throws java.io.IOException"], ["int", "org.apache.catalina.connector.CoyoteInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.apache.catalina.connector.CoyoteInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["int", "org.apache.catalina.connector.CoyoteInputStream.readLine(byte[], int, int)", "public int readLine(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.CoyoteInputStream.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.catalina.connector.CoyoteInputStream.isFinished()", "public boolean isFinished()"], ["boolean", "org.apache.catalina.connector.CoyoteInputStream.isReady()", "public boolean isReady()"], ["void", "org.apache.catalina.connector.CoyoteInputStream.setReadListener(javax.servlet.ReadListener)", "public void setReadListener(javax.servlet.ReadListener)"], ["void", "org.apache.catalina.connector.CoyoteOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.CoyoteOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.apache.catalina.connector.CoyoteOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.CoyoteOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.catalina.connector.CoyoteOutputStream.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.catalina.connector.CoyoteOutputStream.isReady()", "public boolean isReady()"], ["void", "org.apache.catalina.connector.CoyoteOutputStream.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["org.apache.catalina.connector.CoyotePrincipal", "org.apache.catalina.connector.CoyotePrincipal(java.lang.String)", "public org.apache.catalina.connector.CoyotePrincipal(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.CoyotePrincipal.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.catalina.connector.CoyotePrincipal.toString()", "public java.lang.String toString()"], ["org.apache.catalina.connector.CoyoteReader", "org.apache.catalina.connector.CoyoteReader(org.apache.catalina.connector.InputBuffer)", "public org.apache.catalina.connector.CoyoteReader(org.apache.catalina.connector.InputBuffer)"], ["void", "org.apache.catalina.connector.CoyoteReader.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.catalina.connector.CoyoteReader.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.catalina.connector.CoyoteReader.read(char[])", "public int read(char[]) throws java.io.IOException"], ["int", "org.apache.catalina.connector.CoyoteReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["long", "org.apache.catalina.connector.CoyoteReader.skip(long)", "public long skip(long) throws java.io.IOException"], ["boolean", "org.apache.catalina.connector.CoyoteReader.ready()", "public boolean ready() throws java.io.IOException"], ["boolean", "org.apache.catalina.connector.CoyoteReader.markSupported()", "public boolean markSupported()"], ["void", "org.apache.catalina.connector.CoyoteReader.mark(int)", "public void mark(int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.CoyoteReader.reset()", "public void reset() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.connector.CoyoteReader.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["org.apache.catalina.connector.CoyoteWriter", "org.apache.catalina.connector.CoyoteWriter(org.apache.catalina.connector.OutputBuffer)", "public org.apache.catalina.connector.CoyoteWriter(org.apache.catalina.connector.OutputBuffer)"], ["void", "org.apache.catalina.connector.CoyoteWriter.flush()", "public void flush()"], ["void", "org.apache.catalina.connector.CoyoteWriter.close()", "public void close()"], ["boolean", "org.apache.catalina.connector.CoyoteWriter.checkError()", "public boolean checkError()"], ["void", "org.apache.catalina.connector.CoyoteWriter.write(int)", "public void write(int)"], ["void", "org.apache.catalina.connector.CoyoteWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.apache.catalina.connector.CoyoteWriter.write(char[])", "public void write(char[])"], ["void", "org.apache.catalina.connector.CoyoteWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["void", "org.apache.catalina.connector.CoyoteWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(boolean)", "public void print(boolean)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(char)", "public void print(char)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(int)", "public void print(int)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(long)", "public void print(long)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(float)", "public void print(float)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(double)", "public void print(double)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(char[])", "public void print(char[])"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(java.lang.String)", "public void print(java.lang.String)"], ["void", "org.apache.catalina.connector.CoyoteWriter.print(java.lang.Object)", "public void print(java.lang.Object)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println()", "public void println()"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(boolean)", "public void println(boolean)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(char)", "public void println(char)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(int)", "public void println(int)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(long)", "public void println(long)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(float)", "public void println(float)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(double)", "public void println(double)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(char[])", "public void println(char[])"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(java.lang.String)", "public void println(java.lang.String)"], ["void", "org.apache.catalina.connector.CoyoteWriter.println(java.lang.Object)", "public void println(java.lang.Object)"], ["org.apache.tomcat.util.buf.B2CConverter", "org.apache.catalina.connector.InputBuffer$1.run()", "public org.apache.tomcat.util.buf.B2CConverter run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.InputBuffer$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.connector.InputBuffer", "org.apache.catalina.connector.InputBuffer()", "public org.apache.catalina.connector.InputBuffer()"], ["org.apache.catalina.connector.InputBuffer", "org.apache.catalina.connector.InputBuffer(int)", "public org.apache.catalina.connector.InputBuffer(int)"], ["void", "org.apache.catalina.connector.InputBuffer.setRequest(org.apache.coyote.Request)", "public void setRequest(org.apache.coyote.Request)"], ["void", "org.apache.catalina.connector.InputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.catalina.connector.InputBuffer.clearEncoders()", "public void clearEncoders()"], ["void", "org.apache.catalina.connector.InputBuffer.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.catalina.connector.InputBuffer.available()", "public int available()"], ["void", "org.apache.catalina.connector.InputBuffer.setReadListener(javax.servlet.ReadListener)", "public void setReadListener(javax.servlet.ReadListener)"], ["boolean", "org.apache.catalina.connector.InputBuffer.isFinished()", "public boolean isFinished()"], ["boolean", "org.apache.catalina.connector.InputBuffer.isReady()", "public boolean isReady()"], ["int", "org.apache.catalina.connector.InputBuffer.realReadBytes(byte[], int, int)", "public int realReadBytes(byte[], int, int) throws java.io.IOException"], ["int", "org.apache.catalina.connector.InputBuffer.readByte()", "public int readByte() throws java.io.IOException"], ["int", "org.apache.catalina.connector.InputBuffer.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.InputBuffer.realWriteChars(char[], int, int)", "public void realWriteChars(char[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.InputBuffer.setEncoding(java.lang.String)", "public void setEncoding(java.lang.String)"], ["int", "org.apache.catalina.connector.InputBuffer.realReadChars(char[], int, int)", "public int realReadChars(char[], int, int) throws java.io.IOException"], ["int", "org.apache.catalina.connector.InputBuffer.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.catalina.connector.InputBuffer.read(char[])", "public int read(char[]) throws java.io.IOException"], ["int", "org.apache.catalina.connector.InputBuffer.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["long", "org.apache.catalina.connector.InputBuffer.skip(long)", "public long skip(long) throws java.io.IOException"], ["boolean", "org.apache.catalina.connector.InputBuffer.ready()", "public boolean ready() throws java.io.IOException"], ["boolean", "org.apache.catalina.connector.InputBuffer.markSupported()", "public boolean markSupported()"], ["void", "org.apache.catalina.connector.InputBuffer.mark(int)", "public void mark(int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.InputBuffer.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.catalina.connector.InputBuffer.checkConverter()", "public void checkConverter() throws java.io.IOException"], ["org.apache.tomcat.util.buf.C2BConverter", "org.apache.catalina.connector.OutputBuffer$1.run()", "public org.apache.tomcat.util.buf.C2BConverter run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.OutputBuffer$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.connector.OutputBuffer", "org.apache.catalina.connector.OutputBuffer()", "public org.apache.catalina.connector.OutputBuffer()"], ["org.apache.catalina.connector.OutputBuffer", "org.apache.catalina.connector.OutputBuffer(int)", "public org.apache.catalina.connector.OutputBuffer(int)"], ["void", "org.apache.catalina.connector.OutputBuffer.setResponse(org.apache.coyote.Response)", "public void setResponse(org.apache.coyote.Response)"], ["boolean", "org.apache.catalina.connector.OutputBuffer.isSuspended()", "public boolean isSuspended()"], ["void", "org.apache.catalina.connector.OutputBuffer.setSuspended(boolean)", "public void setSuspended(boolean)"], ["boolean", "org.apache.catalina.connector.OutputBuffer.isClosed()", "public boolean isClosed()"], ["void", "org.apache.catalina.connector.OutputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.catalina.connector.OutputBuffer.clearEncoders()", "public void clearEncoders()"], ["void", "org.apache.catalina.connector.OutputBuffer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.realWriteBytes(byte[], int, int)", "public void realWriteBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.writeByte(int)", "public void writeByte(int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.realWriteChars(char[], int, int)", "public void realWriteChars(char[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.write(char[])", "public void write(char[]) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.connector.OutputBuffer.setEncoding(java.lang.String)", "public void setEncoding(java.lang.String)"], ["void", "org.apache.catalina.connector.OutputBuffer.checkConverter()", "public void checkConverter() throws java.io.IOException"], ["long", "org.apache.catalina.connector.OutputBuffer.getContentWritten()", "public long getContentWritten()"], ["boolean", "org.apache.catalina.connector.OutputBuffer.isNew()", "public boolean isNew()"], ["void", "org.apache.catalina.connector.OutputBuffer.setBufferSize(int)", "public void setBufferSize(int)"], ["void", "org.apache.catalina.connector.OutputBuffer.reset()", "public void reset()"], ["void", "org.apache.catalina.connector.OutputBuffer.reset(boolean)", "public void reset(boolean)"], ["int", "org.apache.catalina.connector.OutputBuffer.getBufferSize()", "public int getBufferSize()"], ["boolean", "org.apache.catalina.connector.OutputBuffer.isReady()", "public boolean isReady()"], ["void", "org.apache.catalina.connector.OutputBuffer.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["boolean", "org.apache.catalina.connector.OutputBuffer.isBlocking()", "public boolean isBlocking()"], ["void", "org.apache.catalina.connector.OutputBuffer.checkRegisterForWrite()", "public void checkRegisterForWrite()"], ["java.lang.Object", "org.apache.catalina.connector.Request$1.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$1.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.connector.Request$2.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$2.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.connector.Request$3.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$3.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.connector.Request$4.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$4.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.connector.Request$5.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$5.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.connector.Request$6.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$6.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.connector.Request$7.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$7.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.catalina.connector.Request$8.get(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.Object get(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.connector.Request$8.set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)", "public void set(org.apache.catalina.connector.Request, java.lang.String, java.lang.Object)"], ["org.apache.catalina.connector.Request", "org.apache.catalina.connector.Request()", "public org.apache.catalina.connector.Request()"], ["void", "org.apache.catalina.connector.Request.setCoyoteRequest(org.apache.coyote.Request)", "public void setCoyoteRequest(org.apache.coyote.Request)"], ["org.apache.coyote.Request", "org.apache.catalina.connector.Request.getCoyoteRequest()", "public org.apache.coyote.Request getCoyoteRequest()"], ["void", "org.apache.catalina.connector.Request.setAsyncSupported(boolean)", "public void setAsyncSupported(boolean)"], ["void", "org.apache.catalina.connector.Request.recycle()", "public void recycle()"], ["void", "org.apache.catalina.connector.Request.clearEncoders()", "public void clearEncoders()"], ["boolean", "org.apache.catalina.connector.Request.read()", "public boolean read() throws java.io.IOException"], ["org.apache.catalina.connector.Connector", "org.apache.catalina.connector.Request.getConnector()", "public org.apache.catalina.connector.Connector getConnector()"], ["void", "org.apache.catalina.connector.Request.setConnector(org.apache.catalina.connector.Connector)", "public void setConnector(org.apache.catalina.connector.Connector)"], ["org.apache.catalina.Context", "org.apache.catalina.connector.Request.getContext()", "public org.apache.catalina.Context getContext()"], ["void", "org.apache.catalina.connector.Request.setContext(org.apache.catalina.Context)", "public void setContext(org.apache.catalina.Context)"], ["javax.servlet.FilterChain", "org.apache.catalina.connector.Request.getFilterChain()", "public javax.servlet.FilterChain getFilterChain()"], ["void", "org.apache.catalina.connector.Request.setFilterChain(javax.servlet.FilterChain)", "public void setFilterChain(javax.servlet.FilterChain)"], ["org.apache.catalina.Host", "org.apache.catalina.connector.Request.getHost()", "public org.apache.catalina.Host getHost()"], ["org.apache.catalina.mapper.MappingData", "org.apache.catalina.connector.Request.getMappingData()", "public org.apache.catalina.mapper.MappingData getMappingData()"], ["javax.servlet.http.HttpServletRequest", "org.apache.catalina.connector.Request.getRequest()", "public javax.servlet.http.HttpServletRequest getRequest()"], ["org.apache.catalina.connector.Response", "org.apache.catalina.connector.Request.getResponse()", "public org.apache.catalina.connector.Response getResponse()"], ["void", "org.apache.catalina.connector.Request.setResponse(org.apache.catalina.connector.Response)", "public void setResponse(org.apache.catalina.connector.Response)"], ["java.io.InputStream", "org.apache.catalina.connector.Request.getStream()", "public java.io.InputStream getStream()"], ["org.apache.catalina.Wrapper", "org.apache.catalina.connector.Request.getWrapper()", "public org.apache.catalina.Wrapper getWrapper()"], ["void", "org.apache.catalina.connector.Request.setWrapper(org.apache.catalina.Wrapper)", "public void setWrapper(org.apache.catalina.Wrapper)"], ["javax.servlet.ServletInputStream", "org.apache.catalina.connector.Request.createInputStream()", "public javax.servlet.ServletInputStream createInputStream() throws java.io.IOException"], ["void", "org.apache.catalina.connector.Request.finishRequest()", "public void finishRequest() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.Request.getNote(java.lang.String)", "public java.lang.Object getNote(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.removeNote(java.lang.String)", "public void removeNote(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.setLocalPort(int)", "public void setLocalPort(int)"], ["void", "org.apache.catalina.connector.Request.setNote(java.lang.String, java.lang.Object)", "public void setNote(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.connector.Request.setRemoteAddr(java.lang.String)", "public void setRemoteAddr(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.setRemoteHost(java.lang.String)", "public void setRemoteHost(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.setSecure(boolean)", "public void setSecure(boolean)"], ["void", "org.apache.catalina.connector.Request.setServerPort(int)", "public void setServerPort(int)"], ["java.lang.Object", "org.apache.catalina.connector.Request.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["long", "org.apache.catalina.connector.Request.getContentLengthLong()", "public long getContentLengthLong()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.Request.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["java.lang.String", "org.apache.catalina.connector.Request.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["int", "org.apache.catalina.connector.Request.getContentLength()", "public int getContentLength()"], ["java.lang.String", "org.apache.catalina.connector.Request.getContentType()", "public java.lang.String getContentType()"], ["void", "org.apache.catalina.connector.Request.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["javax.servlet.ServletInputStream", "org.apache.catalina.connector.Request.getInputStream()", "public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException"], ["java.util.Locale", "org.apache.catalina.connector.Request.getLocale()", "public java.util.Locale getLocale()"], ["java.util.Enumeration<java.util.Locale>", "org.apache.catalina.connector.Request.getLocales()", "public java.util.Enumeration<java.util.Locale> getLocales()"], ["java.lang.String", "org.apache.catalina.connector.Request.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.apache.catalina.connector.Request.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.Request.getParameterNames()", "public java.util.Enumeration<java.lang.String> getParameterNames()"], ["java.lang.String[]", "org.apache.catalina.connector.Request.getParameterValues(java.lang.String)", "public java.lang.String[] getParameterValues(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Request.getProtocol()", "public java.lang.String getProtocol()"], ["java.io.BufferedReader", "org.apache.catalina.connector.Request.getReader()", "public java.io.BufferedReader getReader() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.connector.Request.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Request.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["java.lang.String", "org.apache.catalina.connector.Request.getRemoteHost()", "public java.lang.String getRemoteHost()"], ["int", "org.apache.catalina.connector.Request.getRemotePort()", "public int getRemotePort()"], ["java.lang.String", "org.apache.catalina.connector.Request.getLocalName()", "public java.lang.String getLocalName()"], ["java.lang.String", "org.apache.catalina.connector.Request.getLocalAddr()", "public java.lang.String getLocalAddr()"], ["int", "org.apache.catalina.connector.Request.getLocalPort()", "public int getLocalPort()"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.connector.Request.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Request.getScheme()", "public java.lang.String getScheme()"], ["java.lang.String", "org.apache.catalina.connector.Request.getServerName()", "public java.lang.String getServerName()"], ["int", "org.apache.catalina.connector.Request.getServerPort()", "public int getServerPort()"], ["boolean", "org.apache.catalina.connector.Request.isSecure()", "public boolean isSecure()"], ["void", "org.apache.catalina.connector.Request.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.connector.Request.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String) throws java.io.UnsupportedEncodingException"], ["javax.servlet.ServletContext", "org.apache.catalina.connector.Request.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["javax.servlet.AsyncContext", "org.apache.catalina.connector.Request.startAsync()", "public javax.servlet.AsyncContext startAsync()"], ["javax.servlet.AsyncContext", "org.apache.catalina.connector.Request.startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["boolean", "org.apache.catalina.connector.Request.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "org.apache.catalina.connector.Request.isAsyncDispatching()", "public boolean isAsyncDispatching()"], ["boolean", "org.apache.catalina.connector.Request.isAsync()", "public boolean isAsync()"], ["boolean", "org.apache.catalina.connector.Request.isAsyncSupported()", "public boolean isAsyncSupported()"], ["javax.servlet.AsyncContext", "org.apache.catalina.connector.Request.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["javax.servlet.DispatcherType", "org.apache.catalina.connector.Request.getDispatcherType()", "public javax.servlet.DispatcherType getDispatcherType()"], ["void", "org.apache.catalina.connector.Request.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["void", "org.apache.catalina.connector.Request.addLocale(java.util.Locale)", "public void addLocale(java.util.Locale)"], ["void", "org.apache.catalina.connector.Request.clearCookies()", "public void clearCookies()"], ["void", "org.apache.catalina.connector.Request.clearLocales()", "public void clearLocales()"], ["void", "org.apache.catalina.connector.Request.setAuthType(java.lang.String)", "public void setAuthType(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.setPathInfo(java.lang.String)", "public void setPathInfo(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.setRequestedSessionCookie(boolean)", "public void setRequestedSessionCookie(boolean)"], ["void", "org.apache.catalina.connector.Request.setRequestedSessionId(java.lang.String)", "public void setRequestedSessionId(java.lang.String)"], ["void", "org.apache.catalina.connector.Request.setRequestedSessionURL(boolean)", "public void setRequestedSessionURL(boolean)"], ["void", "org.apache.catalina.connector.Request.setRequestedSessionSSL(boolean)", "public void setRequestedSessionSSL(boolean)"], ["java.lang.String", "org.apache.catalina.connector.Request.getDecodedRequestURI()", "public java.lang.String getDecodedRequestURI()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.catalina.connector.Request.getDecodedRequestURIMB()", "public org.apache.tomcat.util.buf.MessageBytes getDecodedRequestURIMB()"], ["void", "org.apache.catalina.connector.Request.setUserPrincipal(java.security.Principal)", "public void setUserPrincipal(java.security.Principal)"], ["<T extends javax.servlet.http.HttpUpgradeHandler> T", "org.apache.catalina.connector.Request.upgrade(java.lang.Class<T>)", "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.apache.catalina.connector.Request.getAuthType()", "public java.lang.String getAuthType()"], ["java.lang.String", "org.apache.catalina.connector.Request.getContextPath()", "public java.lang.String getContextPath()"], ["javax.servlet.http.Cookie[]", "org.apache.catalina.connector.Request.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["long", "org.apache.catalina.connector.Request.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Request.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.Request.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.Request.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["int", "org.apache.catalina.connector.Request.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Request.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "org.apache.catalina.connector.Request.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "org.apache.catalina.connector.Request.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "org.apache.catalina.connector.Request.getQueryString()", "public java.lang.String getQueryString()"], ["java.lang.String", "org.apache.catalina.connector.Request.getRemoteUser()", "public java.lang.String getRemoteUser()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.catalina.connector.Request.getRequestPathMB()", "public org.apache.tomcat.util.buf.MessageBytes getRequestPathMB()"], ["java.lang.String", "org.apache.catalina.connector.Request.getRequestedSessionId()", "public java.lang.String getRequestedSessionId()"], ["java.lang.String", "org.apache.catalina.connector.Request.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "org.apache.catalina.connector.Request.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["java.lang.String", "org.apache.catalina.connector.Request.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.http.HttpSession", "org.apache.catalina.connector.Request.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["javax.servlet.http.HttpSession", "org.apache.catalina.connector.Request.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["boolean", "org.apache.catalina.connector.Request.isRequestedSessionIdFromCookie()", "public boolean isRequestedSessionIdFromCookie()"], ["boolean", "org.apache.catalina.connector.Request.isRequestedSessionIdFromURL()", "public boolean isRequestedSessionIdFromURL()"], ["boolean", "org.apache.catalina.connector.Request.isRequestedSessionIdFromUrl()", "public boolean isRequestedSessionIdFromUrl()"], ["boolean", "org.apache.catalina.connector.Request.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["boolean", "org.apache.catalina.connector.Request.isUserInRole(java.lang.String)", "public boolean isUserInRole(java.lang.String)"], ["java.security.Principal", "org.apache.catalina.connector.Request.getPrincipal()", "public java.security.Principal getPrincipal()"], ["java.security.Principal", "org.apache.catalina.connector.Request.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["org.apache.catalina.Session", "org.apache.catalina.connector.Request.getSessionInternal()", "public org.apache.catalina.Session getSessionInternal()"], ["void", "org.apache.catalina.connector.Request.changeSessionId(java.lang.String)", "public void changeSessionId(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Request.changeSessionId()", "public java.lang.String changeSessionId()"], ["org.apache.catalina.Session", "org.apache.catalina.connector.Request.getSessionInternal(boolean)", "public org.apache.catalina.Session getSessionInternal(boolean)"], ["org.apache.catalina.connector.CometEventImpl", "org.apache.catalina.connector.Request.getEvent()", "public org.apache.catalina.connector.CometEventImpl getEvent()"], ["boolean", "org.apache.catalina.connector.Request.isComet()", "public boolean isComet()"], ["void", "org.apache.catalina.connector.Request.setComet(boolean)", "public void setComet(boolean)"], ["boolean", "org.apache.catalina.connector.Request.isParametersParsed()", "public boolean isParametersParsed()"], ["boolean", "org.apache.catalina.connector.Request.getAvailable()", "public boolean getAvailable()"], ["boolean", "org.apache.catalina.connector.Request.isFinished()", "public boolean isFinished()"], ["void", "org.apache.catalina.connector.Request.cometClose()", "public void cometClose()"], ["void", "org.apache.catalina.connector.Request.setCometTimeout(long)", "public void setCometTimeout(long)"], ["boolean", "org.apache.catalina.connector.Request.authenticate(javax.servlet.http.HttpServletResponse)", "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.connector.Request.login(java.lang.String, java.lang.String)", "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.connector.Request.logout()", "public void logout() throws javax.servlet.ServletException"], ["java.util.Collection<javax.servlet.http.Part>", "org.apache.catalina.connector.Request.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, java.lang.IllegalStateException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "org.apache.catalina.connector.Request.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, java.lang.IllegalStateException, javax.servlet.ServletException"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade$GetAttributePrivilegedAction.run()", "public java.util.Enumeration<java.lang.String> run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetAttributePrivilegedAction.run()", "public java.lang.Object run()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade$GetCharacterEncodingPrivilegedAction.run()", "public java.lang.String run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetCharacterEncodingPrivilegedAction.run()", "public java.lang.Object run()"], ["javax.servlet.http.Cookie[]", "org.apache.catalina.connector.RequestFacade$GetCookiesPrivilegedAction.run()", "public javax.servlet.http.Cookie[] run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetCookiesPrivilegedAction.run()", "public java.lang.Object run()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade$GetHeaderNamesPrivilegedAction.run()", "public java.util.Enumeration<java.lang.String> run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetHeaderNamesPrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.RequestFacade$GetHeadersPrivilegedAction", "org.apache.catalina.connector.RequestFacade$GetHeadersPrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)", "public org.apache.catalina.connector.RequestFacade$GetHeadersPrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade$GetHeadersPrivilegedAction.run()", "public java.util.Enumeration<java.lang.String> run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetHeadersPrivilegedAction.run()", "public java.lang.Object run()"], ["java.util.Locale", "org.apache.catalina.connector.RequestFacade$GetLocalePrivilegedAction.run()", "public java.util.Locale run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetLocalePrivilegedAction.run()", "public java.lang.Object run()"], ["java.util.Enumeration<java.util.Locale>", "org.apache.catalina.connector.RequestFacade$GetLocalesPrivilegedAction.run()", "public java.util.Enumeration<java.util.Locale> run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetLocalesPrivilegedAction.run()", "public java.lang.Object run()"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.apache.catalina.connector.RequestFacade$GetParameterMapPrivilegedAction.run()", "public java.util.Map<java.lang.String, java.lang.String[]> run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetParameterMapPrivilegedAction.run()", "public java.lang.Object run()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade$GetParameterNamesPrivilegedAction.run()", "public java.util.Enumeration<java.lang.String> run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetParameterNamesPrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction", "org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)", "public org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction.run()", "public java.lang.String run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetParameterPrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction", "org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)", "public org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction.run()", "public java.lang.String[] run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetParameterValuePrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction", "org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)", "public org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction(org.apache.catalina.connector.RequestFacade, java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction.run()", "public javax.servlet.RequestDispatcher run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetRequestDispatcherPrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction", "org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction(org.apache.catalina.connector.RequestFacade, boolean)", "public org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction(org.apache.catalina.connector.RequestFacade, boolean)"], ["javax.servlet.http.HttpSession", "org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction.run()", "public javax.servlet.http.HttpSession run()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade$GetSessionPrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.RequestFacade", "org.apache.catalina.connector.RequestFacade(org.apache.catalina.connector.Request)", "public org.apache.catalina.connector.RequestFacade(org.apache.catalina.connector.Request)"], ["void", "org.apache.catalina.connector.RequestFacade.clear()", "public void clear()"], ["java.lang.Object", "org.apache.catalina.connector.RequestFacade.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["void", "org.apache.catalina.connector.RequestFacade.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String) throws java.io.UnsupportedEncodingException"], ["int", "org.apache.catalina.connector.RequestFacade.getContentLength()", "public int getContentLength()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getContentType()", "public java.lang.String getContentType()"], ["javax.servlet.ServletInputStream", "org.apache.catalina.connector.RequestFacade.getInputStream()", "public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade.getParameterNames()", "public java.util.Enumeration<java.lang.String> getParameterNames()"], ["java.lang.String[]", "org.apache.catalina.connector.RequestFacade.getParameterValues(java.lang.String)", "public java.lang.String[] getParameterValues(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.apache.catalina.connector.RequestFacade.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getProtocol()", "public java.lang.String getProtocol()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getScheme()", "public java.lang.String getScheme()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getServerName()", "public java.lang.String getServerName()"], ["int", "org.apache.catalina.connector.RequestFacade.getServerPort()", "public int getServerPort()"], ["java.io.BufferedReader", "org.apache.catalina.connector.RequestFacade.getReader()", "public java.io.BufferedReader getReader() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getRemoteHost()", "public java.lang.String getRemoteHost()"], ["void", "org.apache.catalina.connector.RequestFacade.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.connector.RequestFacade.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["java.util.Locale", "org.apache.catalina.connector.RequestFacade.getLocale()", "public java.util.Locale getLocale()"], ["java.util.Enumeration<java.util.Locale>", "org.apache.catalina.connector.RequestFacade.getLocales()", "public java.util.Enumeration<java.util.Locale> getLocales()"], ["boolean", "org.apache.catalina.connector.RequestFacade.isSecure()", "public boolean isSecure()"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.connector.RequestFacade.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getAuthType()", "public java.lang.String getAuthType()"], ["javax.servlet.http.Cookie[]", "org.apache.catalina.connector.RequestFacade.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["long", "org.apache.catalina.connector.RequestFacade.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.connector.RequestFacade.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["int", "org.apache.catalina.connector.RequestFacade.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getQueryString()", "public java.lang.String getQueryString()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getRemoteUser()", "public java.lang.String getRemoteUser()"], ["boolean", "org.apache.catalina.connector.RequestFacade.isUserInRole(java.lang.String)", "public boolean isUserInRole(java.lang.String)"], ["java.security.Principal", "org.apache.catalina.connector.RequestFacade.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getRequestedSessionId()", "public java.lang.String getRequestedSessionId()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "org.apache.catalina.connector.RequestFacade.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.http.HttpSession", "org.apache.catalina.connector.RequestFacade.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["javax.servlet.http.HttpSession", "org.apache.catalina.connector.RequestFacade.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.changeSessionId()", "public java.lang.String changeSessionId()"], ["boolean", "org.apache.catalina.connector.RequestFacade.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["boolean", "org.apache.catalina.connector.RequestFacade.isRequestedSessionIdFromCookie()", "public boolean isRequestedSessionIdFromCookie()"], ["boolean", "org.apache.catalina.connector.RequestFacade.isRequestedSessionIdFromURL()", "public boolean isRequestedSessionIdFromURL()"], ["boolean", "org.apache.catalina.connector.RequestFacade.isRequestedSessionIdFromUrl()", "public boolean isRequestedSessionIdFromUrl()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getLocalAddr()", "public java.lang.String getLocalAddr()"], ["java.lang.String", "org.apache.catalina.connector.RequestFacade.getLocalName()", "public java.lang.String getLocalName()"], ["int", "org.apache.catalina.connector.RequestFacade.getLocalPort()", "public int getLocalPort()"], ["int", "org.apache.catalina.connector.RequestFacade.getRemotePort()", "public int getRemotePort()"], ["javax.servlet.ServletContext", "org.apache.catalina.connector.RequestFacade.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["javax.servlet.AsyncContext", "org.apache.catalina.connector.RequestFacade.startAsync()", "public javax.servlet.AsyncContext startAsync() throws java.lang.IllegalStateException"], ["javax.servlet.AsyncContext", "org.apache.catalina.connector.RequestFacade.startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.lang.IllegalStateException"], ["boolean", "org.apache.catalina.connector.RequestFacade.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "org.apache.catalina.connector.RequestFacade.isAsyncSupported()", "public boolean isAsyncSupported()"], ["javax.servlet.AsyncContext", "org.apache.catalina.connector.RequestFacade.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["javax.servlet.DispatcherType", "org.apache.catalina.connector.RequestFacade.getDispatcherType()", "public javax.servlet.DispatcherType getDispatcherType()"], ["boolean", "org.apache.catalina.connector.RequestFacade.authenticate(javax.servlet.http.HttpServletResponse)", "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.connector.RequestFacade.login(java.lang.String, java.lang.String)", "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.connector.RequestFacade.logout()", "public void logout() throws javax.servlet.ServletException"], ["java.util.Collection<javax.servlet.http.Part>", "org.apache.catalina.connector.RequestFacade.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.lang.IllegalStateException, java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "org.apache.catalina.connector.RequestFacade.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.lang.IllegalStateException, java.io.IOException, javax.servlet.ServletException"], ["boolean", "org.apache.catalina.connector.RequestFacade.getAllowTrace()", "public boolean getAllowTrace()"], ["long", "org.apache.catalina.connector.RequestFacade.getContentLengthLong()", "public long getContentLengthLong()"], ["<T extends javax.servlet.http.HttpUpgradeHandler> T", "org.apache.catalina.connector.RequestFacade.upgrade(java.lang.Class<T>)", "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.apache.catalina.connector.Response$1.run()", "public java.lang.String run()"], ["java.lang.Object", "org.apache.catalina.connector.Response$1.run()", "public java.lang.Object run()"], ["java.lang.Boolean", "org.apache.catalina.connector.Response$2.run()", "public java.lang.Boolean run()"], ["java.lang.Object", "org.apache.catalina.connector.Response$2.run()", "public java.lang.Object run()"], ["org.apache.tomcat.util.buf.CharChunk", "org.apache.catalina.connector.Response$3.run()", "public org.apache.tomcat.util.buf.CharChunk run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.Response$3.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.connector.Response", "org.apache.catalina.connector.Response()", "public org.apache.catalina.connector.Response()"], ["void", "org.apache.catalina.connector.Response.setConnector(org.apache.catalina.connector.Connector)", "public void setConnector(org.apache.catalina.connector.Connector)"], ["void", "org.apache.catalina.connector.Response.setCoyoteResponse(org.apache.coyote.Response)", "public void setCoyoteResponse(org.apache.coyote.Response)"], ["org.apache.coyote.Response", "org.apache.catalina.connector.Response.getCoyoteResponse()", "public org.apache.coyote.Response getCoyoteResponse()"], ["org.apache.catalina.Context", "org.apache.catalina.connector.Response.getContext()", "public org.apache.catalina.Context getContext()"], ["void", "org.apache.catalina.connector.Response.recycle()", "public void recycle()"], ["void", "org.apache.catalina.connector.Response.clearEncoders()", "public void clearEncoders()"], ["long", "org.apache.catalina.connector.Response.getContentWritten()", "public long getContentWritten()"], ["long", "org.apache.catalina.connector.Response.getBytesWritten(boolean)", "public long getBytesWritten(boolean)"], ["void", "org.apache.catalina.connector.Response.setAppCommitted(boolean)", "public void setAppCommitted(boolean)"], ["boolean", "org.apache.catalina.connector.Response.isAppCommitted()", "public boolean isAppCommitted()"], ["org.apache.catalina.connector.Request", "org.apache.catalina.connector.Response.getRequest()", "public org.apache.catalina.connector.Request getRequest()"], ["void", "org.apache.catalina.connector.Response.setRequest(org.apache.catalina.connector.Request)", "public void setRequest(org.apache.catalina.connector.Request)"], ["javax.servlet.http.HttpServletResponse", "org.apache.catalina.connector.Response.getResponse()", "public javax.servlet.http.HttpServletResponse getResponse()"], ["void", "org.apache.catalina.connector.Response.setSuspended(boolean)", "public void setSuspended(boolean)"], ["boolean", "org.apache.catalina.connector.Response.isSuspended()", "public boolean isSuspended()"], ["boolean", "org.apache.catalina.connector.Response.isClosed()", "public boolean isClosed()"], ["boolean", "org.apache.catalina.connector.Response.setError()", "public boolean setError()"], ["boolean", "org.apache.catalina.connector.Response.isError()", "public boolean isError()"], ["boolean", "org.apache.catalina.connector.Response.isErrorReportRequired()", "public boolean isErrorReportRequired()"], ["boolean", "org.apache.catalina.connector.Response.setErrorReported()", "public boolean setErrorReported()"], ["void", "org.apache.catalina.connector.Response.finishResponse()", "public void finishResponse() throws java.io.IOException"], ["int", "org.apache.catalina.connector.Response.getContentLength()", "public int getContentLength()"], ["java.lang.String", "org.apache.catalina.connector.Response.getContentType()", "public java.lang.String getContentType()"], ["java.io.PrintWriter", "org.apache.catalina.connector.Response.getReporter()", "public java.io.PrintWriter getReporter() throws java.io.IOException"], ["void", "org.apache.catalina.connector.Response.flushBuffer()", "public void flushBuffer() throws java.io.IOException"], ["int", "org.apache.catalina.connector.Response.getBufferSize()", "public int getBufferSize()"], ["java.lang.String", "org.apache.catalina.connector.Response.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["javax.servlet.ServletOutputStream", "org.apache.catalina.connector.Response.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["java.util.Locale", "org.apache.catalina.connector.Response.getLocale()", "public java.util.Locale getLocale()"], ["java.io.PrintWriter", "org.apache.catalina.connector.Response.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.IOException"], ["boolean", "org.apache.catalina.connector.Response.isCommitted()", "public boolean isCommitted()"], ["void", "org.apache.catalina.connector.Response.reset()", "public void reset()"], ["void", "org.apache.catalina.connector.Response.resetBuffer()", "public void resetBuffer()"], ["void", "org.apache.catalina.connector.Response.resetBuffer(boolean)", "public void resetBuffer(boolean)"], ["void", "org.apache.catalina.connector.Response.setBufferSize(int)", "public void setBufferSize(int)"], ["void", "org.apache.catalina.connector.Response.setContentLength(int)", "public void setContentLength(int)"], ["void", "org.apache.catalina.connector.Response.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "org.apache.catalina.connector.Response.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.apache.catalina.connector.Response.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["void", "org.apache.catalina.connector.Response.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["java.lang.String", "org.apache.catalina.connector.Response.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.connector.Response.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.connector.Response.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Response.getMessage()", "public java.lang.String getMessage()"], ["int", "org.apache.catalina.connector.Response.getStatus()", "public int getStatus()"], ["void", "org.apache.catalina.connector.Response.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["void", "org.apache.catalina.connector.Response.addSessionCookieInternal(javax.servlet.http.Cookie)", "public void addSessionCookieInternal(javax.servlet.http.Cookie)"], ["java.lang.String", "org.apache.catalina.connector.Response.generateCookieString(javax.servlet.http.Cookie)", "public java.lang.String generateCookieString(javax.servlet.http.Cookie)"], ["void", "org.apache.catalina.connector.Response.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.connector.Response.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.connector.Response.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["boolean", "org.apache.catalina.connector.Response.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Response.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Response.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Response.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.Response.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["void", "org.apache.catalina.connector.Response.sendAcknowledgement()", "public void sendAcknowledgement() throws java.io.IOException"], ["void", "org.apache.catalina.connector.Response.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.Response.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.connector.Response.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.connector.Response.sendRedirect(java.lang.String, int)", "public void sendRedirect(java.lang.String, int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.Response.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.connector.Response.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.connector.Response.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "org.apache.catalina.connector.Response.setStatus(int)", "public void setStatus(int)"], ["void", "org.apache.catalina.connector.Response.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["java.lang.Void", "org.apache.catalina.connector.ResponseFacade$1.run()", "public java.lang.Void run() throws java.io.IOException"], ["java.lang.Object", "org.apache.catalina.connector.ResponseFacade$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction.run()", "public java.lang.Void run()"], ["java.lang.Object", "org.apache.catalina.connector.ResponseFacade$DateHeaderPrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction", "org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction(org.apache.catalina.connector.ResponseFacade, java.lang.String)", "public org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction(org.apache.catalina.connector.ResponseFacade, java.lang.String)"], ["java.lang.Void", "org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction.run()", "public java.lang.Void run()"], ["java.lang.Object", "org.apache.catalina.connector.ResponseFacade$SetContentTypePrivilegedAction.run()", "public java.lang.Object run()"], ["org.apache.catalina.connector.ResponseFacade", "org.apache.catalina.connector.ResponseFacade(org.apache.catalina.connector.Response)", "public org.apache.catalina.connector.ResponseFacade(org.apache.catalina.connector.Response)"], ["void", "org.apache.catalina.connector.ResponseFacade.clear()", "public void clear()"], ["void", "org.apache.catalina.connector.ResponseFacade.finish()", "public void finish()"], ["boolean", "org.apache.catalina.connector.ResponseFacade.isFinished()", "public boolean isFinished()"], ["long", "org.apache.catalina.connector.ResponseFacade.getContentWritten()", "public long getContentWritten()"], ["java.lang.String", "org.apache.catalina.connector.ResponseFacade.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["javax.servlet.ServletOutputStream", "org.apache.catalina.connector.ResponseFacade.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["java.io.PrintWriter", "org.apache.catalina.connector.ResponseFacade.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.IOException"], ["void", "org.apache.catalina.connector.ResponseFacade.setContentLength(int)", "public void setContentLength(int)"], ["void", "org.apache.catalina.connector.ResponseFacade.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "org.apache.catalina.connector.ResponseFacade.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.apache.catalina.connector.ResponseFacade.setBufferSize(int)", "public void setBufferSize(int)"], ["int", "org.apache.catalina.connector.ResponseFacade.getBufferSize()", "public int getBufferSize()"], ["void", "org.apache.catalina.connector.ResponseFacade.flushBuffer()", "public void flushBuffer() throws java.io.IOException"], ["void", "org.apache.catalina.connector.ResponseFacade.resetBuffer()", "public void resetBuffer()"], ["boolean", "org.apache.catalina.connector.ResponseFacade.isCommitted()", "public boolean isCommitted()"], ["void", "org.apache.catalina.connector.ResponseFacade.reset()", "public void reset()"], ["void", "org.apache.catalina.connector.ResponseFacade.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["java.util.Locale", "org.apache.catalina.connector.ResponseFacade.getLocale()", "public java.util.Locale getLocale()"], ["void", "org.apache.catalina.connector.ResponseFacade.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["boolean", "org.apache.catalina.connector.ResponseFacade.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.ResponseFacade.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.ResponseFacade.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.ResponseFacade.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.ResponseFacade.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["void", "org.apache.catalina.connector.ResponseFacade.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.connector.ResponseFacade.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "org.apache.catalina.connector.ResponseFacade.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.connector.ResponseFacade.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.connector.ResponseFacade.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.connector.ResponseFacade.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.connector.ResponseFacade.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.connector.ResponseFacade.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "org.apache.catalina.connector.ResponseFacade.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["void", "org.apache.catalina.connector.ResponseFacade.setStatus(int)", "public void setStatus(int)"], ["void", "org.apache.catalina.connector.ResponseFacade.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["java.lang.String", "org.apache.catalina.connector.ResponseFacade.getContentType()", "public java.lang.String getContentType()"], ["void", "org.apache.catalina.connector.ResponseFacade.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["int", "org.apache.catalina.connector.ResponseFacade.getStatus()", "public int getStatus()"], ["java.lang.String", "org.apache.catalina.connector.ResponseFacade.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.connector.ResponseFacade.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.connector.ResponseFacade.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["org.apache.catalina.core.AccessLogAdapter", "org.apache.catalina.core.AccessLogAdapter(org.apache.catalina.AccessLog)", "public org.apache.catalina.core.AccessLogAdapter(org.apache.catalina.AccessLog)"], ["void", "org.apache.catalina.core.AccessLogAdapter.add(org.apache.catalina.AccessLog)", "public void add(org.apache.catalina.AccessLog)"], ["void", "org.apache.catalina.core.AccessLogAdapter.log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.core.AccessLogAdapter.setRequestAttributesEnabled(boolean)", "public void setRequestAttributesEnabled(boolean)"], ["boolean", "org.apache.catalina.core.AccessLogAdapter.getRequestAttributesEnabled()", "public boolean getRequestAttributesEnabled()"], ["org.apache.catalina.core.ApplicationContext$DispatchData", "org.apache.catalina.core.ApplicationContext$DispatchData()", "public org.apache.catalina.core.ApplicationContext$DispatchData()"], ["org.apache.catalina.core.ApplicationContext", "org.apache.catalina.core.ApplicationContext(org.apache.catalina.core.StandardContext)", "public org.apache.catalina.core.ApplicationContext(org.apache.catalina.core.StandardContext)"], ["java.lang.Object", "org.apache.catalina.core.ApplicationContext.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationContext.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["javax.servlet.ServletContext", "org.apache.catalina.core.ApplicationContext.getContext(java.lang.String)", "public javax.servlet.ServletContext getContext(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.ApplicationContext.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.apache.catalina.core.ApplicationContext.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationContext.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["int", "org.apache.catalina.core.ApplicationContext.getMajorVersion()", "public int getMajorVersion()"], ["int", "org.apache.catalina.core.ApplicationContext.getMinorVersion()", "public int getMinorVersion()"], ["java.lang.String", "org.apache.catalina.core.ApplicationContext.getMimeType(java.lang.String)", "public java.lang.String getMimeType(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.core.ApplicationContext.getNamedDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.ApplicationContext.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.core.ApplicationContext.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.net.URL", "org.apache.catalina.core.ApplicationContext.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.io.InputStream", "org.apache.catalina.core.ApplicationContext.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.ApplicationContext.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.ApplicationContext.getServerInfo()", "public java.lang.String getServerInfo()"], ["javax.servlet.Servlet", "org.apache.catalina.core.ApplicationContext.getServlet(java.lang.String)", "public javax.servlet.Servlet getServlet(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.ApplicationContext.getServletContextName()", "public java.lang.String getServletContextName()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationContext.getServletNames()", "public java.util.Enumeration<java.lang.String> getServletNames()"], ["java.util.Enumeration<javax.servlet.Servlet>", "org.apache.catalina.core.ApplicationContext.getServlets()", "public java.util.Enumeration<javax.servlet.Servlet> getServlets()"], ["void", "org.apache.catalina.core.ApplicationContext.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationContext.log(java.lang.Exception, java.lang.String)", "public void log(java.lang.Exception, java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationContext.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["void", "org.apache.catalina.core.ApplicationContext.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationContext.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.ApplicationContext.addFilter(java.lang.String, java.lang.String)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.String) throws java.lang.IllegalStateException"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.ApplicationContext.addFilter(java.lang.String, javax.servlet.Filter)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, javax.servlet.Filter) throws java.lang.IllegalStateException"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.ApplicationContext.addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>) throws java.lang.IllegalStateException"], ["<T extends javax.servlet.Filter> T", "org.apache.catalina.core.ApplicationContext.createFilter(java.lang.Class<T>)", "public <T extends javax.servlet.Filter> T createFilter(java.lang.Class<T>) throws javax.servlet.ServletException"], ["javax.servlet.FilterRegistration", "org.apache.catalina.core.ApplicationContext.getFilterRegistration(java.lang.String)", "public javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.ApplicationContext.addServlet(java.lang.String, java.lang.String)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.String) throws java.lang.IllegalStateException"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.ApplicationContext.addServlet(java.lang.String, javax.servlet.Servlet)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, javax.servlet.Servlet) throws java.lang.IllegalStateException"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.ApplicationContext.addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>) throws java.lang.IllegalStateException"], ["<T extends javax.servlet.Servlet> T", "org.apache.catalina.core.ApplicationContext.createServlet(java.lang.Class<T>)", "public <T extends javax.servlet.Servlet> T createServlet(java.lang.Class<T>) throws javax.servlet.ServletException"], ["javax.servlet.ServletRegistration", "org.apache.catalina.core.ApplicationContext.getServletRegistration(java.lang.String)", "public javax.servlet.ServletRegistration getServletRegistration(java.lang.String)"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.apache.catalina.core.ApplicationContext.getDefaultSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.apache.catalina.core.ApplicationContext.getEffectiveSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"], ["javax.servlet.SessionCookieConfig", "org.apache.catalina.core.ApplicationContext.getSessionCookieConfig()", "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"], ["void", "org.apache.catalina.core.ApplicationContext.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)", "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)"], ["boolean", "org.apache.catalina.core.ApplicationContext.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationContext.addListener(java.lang.Class<? extends java.util.EventListener>)", "public void addListener(java.lang.Class<? extends java.util.EventListener>)"], ["void", "org.apache.catalina.core.ApplicationContext.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["<T extends java.util.EventListener> void", "org.apache.catalina.core.ApplicationContext.addListener(T)", "public <T extends java.util.EventListener> void addListener(T)"], ["<T extends java.util.EventListener> T", "org.apache.catalina.core.ApplicationContext.createListener(java.lang.Class<T>)", "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.core.ApplicationContext.declareRoles(java.lang.String...)", "public void declareRoles(java.lang.String...)"], ["java.lang.ClassLoader", "org.apache.catalina.core.ApplicationContext.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["int", "org.apache.catalina.core.ApplicationContext.getEffectiveMajorVersion()", "public int getEffectiveMajorVersion()"], ["int", "org.apache.catalina.core.ApplicationContext.getEffectiveMinorVersion()", "public int getEffectiveMinorVersion()"], ["java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration>", "org.apache.catalina.core.ApplicationContext.getFilterRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration> getFilterRegistrations()"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.apache.catalina.core.ApplicationContext.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration>", "org.apache.catalina.core.ApplicationContext.getServletRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration> getServletRegistrations()"], ["java.lang.String", "org.apache.catalina.core.ApplicationContext.getVirtualServerName()", "public java.lang.String getVirtualServerName()"], ["java.lang.Object", "org.apache.catalina.core.ApplicationContextFacade$1.run()", "public java.lang.Object run() throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["org.apache.catalina.core.ApplicationContextFacade", "org.apache.catalina.core.ApplicationContextFacade(org.apache.catalina.core.ApplicationContext)", "public org.apache.catalina.core.ApplicationContextFacade(org.apache.catalina.core.ApplicationContext)"], ["javax.servlet.ServletContext", "org.apache.catalina.core.ApplicationContextFacade.getContext(java.lang.String)", "public javax.servlet.ServletContext getContext(java.lang.String)"], ["int", "org.apache.catalina.core.ApplicationContextFacade.getMajorVersion()", "public int getMajorVersion()"], ["int", "org.apache.catalina.core.ApplicationContextFacade.getMinorVersion()", "public int getMinorVersion()"], ["java.lang.String", "org.apache.catalina.core.ApplicationContextFacade.getMimeType(java.lang.String)", "public java.lang.String getMimeType(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.ApplicationContextFacade.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["java.net.URL", "org.apache.catalina.core.ApplicationContextFacade.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.io.InputStream", "org.apache.catalina.core.ApplicationContextFacade.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.core.ApplicationContextFacade.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.core.ApplicationContextFacade.getNamedDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)"], ["javax.servlet.Servlet", "org.apache.catalina.core.ApplicationContextFacade.getServlet(java.lang.String)", "public javax.servlet.Servlet getServlet(java.lang.String) throws javax.servlet.ServletException"], ["java.util.Enumeration<javax.servlet.Servlet>", "org.apache.catalina.core.ApplicationContextFacade.getServlets()", "public java.util.Enumeration<javax.servlet.Servlet> getServlets()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationContextFacade.getServletNames()", "public java.util.Enumeration<java.lang.String> getServletNames()"], ["void", "org.apache.catalina.core.ApplicationContextFacade.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationContextFacade.log(java.lang.Exception, java.lang.String)", "public void log(java.lang.Exception, java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationContextFacade.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.apache.catalina.core.ApplicationContextFacade.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.ApplicationContextFacade.getServerInfo()", "public java.lang.String getServerInfo()"], ["java.lang.String", "org.apache.catalina.core.ApplicationContextFacade.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationContextFacade.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["java.lang.Object", "org.apache.catalina.core.ApplicationContextFacade.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationContextFacade.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.apache.catalina.core.ApplicationContextFacade.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.core.ApplicationContextFacade.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.ApplicationContextFacade.getServletContextName()", "public java.lang.String getServletContextName()"], ["java.lang.String", "org.apache.catalina.core.ApplicationContextFacade.getContextPath()", "public java.lang.String getContextPath()"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.ApplicationContextFacade.addFilter(java.lang.String, java.lang.String)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.String)"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.ApplicationContextFacade.addFilter(java.lang.String, javax.servlet.Filter)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, javax.servlet.Filter)"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.ApplicationContextFacade.addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)"], ["<T extends javax.servlet.Filter> T", "org.apache.catalina.core.ApplicationContextFacade.createFilter(java.lang.Class<T>)", "public <T extends javax.servlet.Filter> T createFilter(java.lang.Class<T>) throws javax.servlet.ServletException"], ["javax.servlet.FilterRegistration", "org.apache.catalina.core.ApplicationContextFacade.getFilterRegistration(java.lang.String)", "public javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.ApplicationContextFacade.addServlet(java.lang.String, java.lang.String)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.String)"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.ApplicationContextFacade.addServlet(java.lang.String, javax.servlet.Servlet)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, javax.servlet.Servlet)"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.ApplicationContextFacade.addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)"], ["<T extends javax.servlet.Servlet> T", "org.apache.catalina.core.ApplicationContextFacade.createServlet(java.lang.Class<T>)", "public <T extends javax.servlet.Servlet> T createServlet(java.lang.Class<T>) throws javax.servlet.ServletException"], ["javax.servlet.ServletRegistration", "org.apache.catalina.core.ApplicationContextFacade.getServletRegistration(java.lang.String)", "public javax.servlet.ServletRegistration getServletRegistration(java.lang.String)"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.apache.catalina.core.ApplicationContextFacade.getDefaultSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.apache.catalina.core.ApplicationContextFacade.getEffectiveSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"], ["javax.servlet.SessionCookieConfig", "org.apache.catalina.core.ApplicationContextFacade.getSessionCookieConfig()", "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"], ["void", "org.apache.catalina.core.ApplicationContextFacade.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)", "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)"], ["boolean", "org.apache.catalina.core.ApplicationContextFacade.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationContextFacade.addListener(java.lang.Class<? extends java.util.EventListener>)", "public void addListener(java.lang.Class<? extends java.util.EventListener>)"], ["void", "org.apache.catalina.core.ApplicationContextFacade.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["<T extends java.util.EventListener> void", "org.apache.catalina.core.ApplicationContextFacade.addListener(T)", "public <T extends java.util.EventListener> void addListener(T)"], ["<T extends java.util.EventListener> T", "org.apache.catalina.core.ApplicationContextFacade.createListener(java.lang.Class<T>)", "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.core.ApplicationContextFacade.declareRoles(java.lang.String...)", "public void declareRoles(java.lang.String...)"], ["java.lang.ClassLoader", "org.apache.catalina.core.ApplicationContextFacade.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["int", "org.apache.catalina.core.ApplicationContextFacade.getEffectiveMajorVersion()", "public int getEffectiveMajorVersion()"], ["int", "org.apache.catalina.core.ApplicationContextFacade.getEffectiveMinorVersion()", "public int getEffectiveMinorVersion()"], ["java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration>", "org.apache.catalina.core.ApplicationContextFacade.getFilterRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration> getFilterRegistrations()"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.apache.catalina.core.ApplicationContextFacade.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration>", "org.apache.catalina.core.ApplicationContextFacade.getServletRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration> getServletRegistrations()"], ["java.lang.String", "org.apache.catalina.core.ApplicationContextFacade.getVirtualServerName()", "public java.lang.String getVirtualServerName()"], ["java.lang.Void", "org.apache.catalina.core.ApplicationDispatcher$PrivilegedDispatch.run()", "public java.lang.Void run() throws javax.servlet.ServletException, java.io.IOException"], ["java.lang.Object", "org.apache.catalina.core.ApplicationDispatcher$PrivilegedDispatch.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.core.ApplicationDispatcher$PrivilegedForward.run()", "public java.lang.Void run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.core.ApplicationDispatcher$PrivilegedForward.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.core.ApplicationDispatcher$PrivilegedInclude.run()", "public java.lang.Void run() throws javax.servlet.ServletException, java.io.IOException"], ["java.lang.Object", "org.apache.catalina.core.ApplicationDispatcher$PrivilegedInclude.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.core.ApplicationDispatcher", "org.apache.catalina.core.ApplicationDispatcher(org.apache.catalina.Wrapper, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.core.ApplicationDispatcher(org.apache.catalina.Wrapper, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationDispatcher.forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["void", "org.apache.catalina.core.ApplicationDispatcher.include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void include(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["void", "org.apache.catalina.core.ApplicationDispatcher.dispatch(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void dispatch(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["java.lang.Void", "org.apache.catalina.core.ApplicationFilterChain$1.run()", "public java.lang.Void run() throws javax.servlet.ServletException, java.io.IOException"], ["java.lang.Object", "org.apache.catalina.core.ApplicationFilterChain$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.core.ApplicationFilterChain$2.run()", "public java.lang.Void run() throws javax.servlet.ServletException, java.io.IOException"], ["java.lang.Object", "org.apache.catalina.core.ApplicationFilterChain$2.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.core.ApplicationFilterChain", "org.apache.catalina.core.ApplicationFilterChain()", "public org.apache.catalina.core.ApplicationFilterChain()"], ["void", "org.apache.catalina.core.ApplicationFilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.core.ApplicationFilterChain.doFilterEvent(org.apache.catalina.comet.CometEvent)", "public void doFilterEvent(org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.ServletRequest", "org.apache.catalina.core.ApplicationFilterChain.getLastServicedRequest()", "public static javax.servlet.ServletRequest getLastServicedRequest()"], ["javax.servlet.ServletResponse", "org.apache.catalina.core.ApplicationFilterChain.getLastServicedResponse()", "public static javax.servlet.ServletResponse getLastServicedResponse()"], ["java.lang.String", "org.apache.catalina.core.ApplicationFilterConfig.getFilterName()", "public java.lang.String getFilterName()"], ["java.lang.String", "org.apache.catalina.core.ApplicationFilterConfig.getFilterClass()", "public java.lang.String getFilterClass()"], ["java.lang.String", "org.apache.catalina.core.ApplicationFilterConfig.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationFilterConfig.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["javax.servlet.ServletContext", "org.apache.catalina.core.ApplicationFilterConfig.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.apache.catalina.core.ApplicationFilterConfig.toString()", "public java.lang.String toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.core.ApplicationFilterConfig.getFilterInitParameterMap()", "public java.util.Map<java.lang.String, java.lang.String> getFilterInitParameterMap()"], ["org.apache.catalina.core.ApplicationFilterFactory", "org.apache.catalina.core.ApplicationFilterFactory.getInstance()", "public static org.apache.catalina.core.ApplicationFilterFactory getInstance()"], ["org.apache.catalina.core.ApplicationFilterChain", "org.apache.catalina.core.ApplicationFilterFactory.createFilterChain(javax.servlet.ServletRequest, org.apache.catalina.Wrapper, javax.servlet.Servlet)", "public org.apache.catalina.core.ApplicationFilterChain createFilterChain(javax.servlet.ServletRequest, org.apache.catalina.Wrapper, javax.servlet.Servlet)"], ["org.apache.catalina.core.ApplicationFilterRegistration", "org.apache.catalina.core.ApplicationFilterRegistration(org.apache.tomcat.util.descriptor.web.FilterDef, org.apache.catalina.Context)", "public org.apache.catalina.core.ApplicationFilterRegistration(org.apache.tomcat.util.descriptor.web.FilterDef, org.apache.catalina.Context)"], ["void", "org.apache.catalina.core.ApplicationFilterRegistration.addMappingForServletNames(java.util.EnumSet<javax.servlet.DispatcherType>, boolean, java.lang.String...)", "public void addMappingForServletNames(java.util.EnumSet<javax.servlet.DispatcherType>, boolean, java.lang.String...)"], ["void", "org.apache.catalina.core.ApplicationFilterRegistration.addMappingForUrlPatterns(java.util.EnumSet<javax.servlet.DispatcherType>, boolean, java.lang.String...)", "public void addMappingForUrlPatterns(java.util.EnumSet<javax.servlet.DispatcherType>, boolean, java.lang.String...)"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.core.ApplicationFilterRegistration.getServletNameMappings()", "public java.util.Collection<java.lang.String> getServletNameMappings()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.core.ApplicationFilterRegistration.getUrlPatternMappings()", "public java.util.Collection<java.lang.String> getUrlPatternMappings()"], ["java.lang.String", "org.apache.catalina.core.ApplicationFilterRegistration.getClassName()", "public java.lang.String getClassName()"], ["java.lang.String", "org.apache.catalina.core.ApplicationFilterRegistration.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.core.ApplicationFilterRegistration.getInitParameters()", "public java.util.Map<java.lang.String, java.lang.String> getInitParameters()"], ["java.lang.String", "org.apache.catalina.core.ApplicationFilterRegistration.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.catalina.core.ApplicationFilterRegistration.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.ApplicationFilterRegistration.setInitParameters(java.util.Map<java.lang.String, java.lang.String>)", "public java.util.Set<java.lang.String> setInitParameters(java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.catalina.core.ApplicationFilterRegistration.setAsyncSupported(boolean)", "public void setAsyncSupported(boolean)"], ["org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator", "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator(org.apache.catalina.core.ApplicationHttpRequest)", "public org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator(org.apache.catalina.core.ApplicationHttpRequest)"], ["boolean", "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator.hasMoreElements()", "public boolean hasMoreElements()"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator.nextElement()", "public java.lang.String nextElement()"], ["java.lang.Object", "org.apache.catalina.core.ApplicationHttpRequest$AttributeNamesEnumerator.nextElement()", "public java.lang.Object nextElement()"], ["org.apache.catalina.core.ApplicationHttpRequest", "org.apache.catalina.core.ApplicationHttpRequest(javax.servlet.http.HttpServletRequest, org.apache.catalina.Context, boolean)", "public org.apache.catalina.core.ApplicationHttpRequest(javax.servlet.http.HttpServletRequest, org.apache.catalina.Context, boolean)"], ["javax.servlet.ServletContext", "org.apache.catalina.core.ApplicationHttpRequest.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.Object", "org.apache.catalina.core.ApplicationHttpRequest.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationHttpRequest.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.apache.catalina.core.ApplicationHttpRequest.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationHttpRequest.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.core.ApplicationHttpRequest.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["javax.servlet.DispatcherType", "org.apache.catalina.core.ApplicationHttpRequest.getDispatcherType()", "public javax.servlet.DispatcherType getDispatcherType()"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.apache.catalina.core.ApplicationHttpRequest.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationHttpRequest.getParameterNames()", "public java.util.Enumeration<java.lang.String> getParameterNames()"], ["java.lang.String[]", "org.apache.catalina.core.ApplicationHttpRequest.getParameterValues(java.lang.String)", "public java.lang.String[] getParameterValues(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest.getQueryString()", "public java.lang.String getQueryString()"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "org.apache.catalina.core.ApplicationHttpRequest.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["java.lang.String", "org.apache.catalina.core.ApplicationHttpRequest.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.http.HttpSession", "org.apache.catalina.core.ApplicationHttpRequest.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["javax.servlet.http.HttpSession", "org.apache.catalina.core.ApplicationHttpRequest.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["boolean", "org.apache.catalina.core.ApplicationHttpRequest.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["void", "org.apache.catalina.core.ApplicationHttpRequest.recycle()", "public void recycle()"], ["org.apache.catalina.core.ApplicationHttpResponse", "org.apache.catalina.core.ApplicationHttpResponse(javax.servlet.http.HttpServletResponse, boolean)", "public org.apache.catalina.core.ApplicationHttpResponse(javax.servlet.http.HttpServletResponse, boolean)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.reset()", "public void reset()"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setContentLength(int)", "public void setContentLength(int)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setBufferSize(int)", "public void setBufferSize(int)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setStatus(int)", "public void setStatus(int)"], ["void", "org.apache.catalina.core.ApplicationHttpResponse.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["org.apache.catalina.core.ApplicationPart", "org.apache.catalina.core.ApplicationPart(org.apache.tomcat.util.http.fileupload.FileItem, java.io.File)", "public org.apache.catalina.core.ApplicationPart(org.apache.tomcat.util.http.fileupload.FileItem, java.io.File)"], ["void", "org.apache.catalina.core.ApplicationPart.delete()", "public void delete() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.core.ApplicationPart.getContentType()", "public java.lang.String getContentType()"], ["java.lang.String", "org.apache.catalina.core.ApplicationPart.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.core.ApplicationPart.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.core.ApplicationPart.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["java.io.InputStream", "org.apache.catalina.core.ApplicationPart.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.core.ApplicationPart.getName()", "public java.lang.String getName()"], ["long", "org.apache.catalina.core.ApplicationPart.getSize()", "public long getSize()"], ["void", "org.apache.catalina.core.ApplicationPart.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.core.ApplicationPart.getString(java.lang.String)", "public java.lang.String getString(java.lang.String) throws java.io.UnsupportedEncodingException"], ["java.lang.String", "org.apache.catalina.core.ApplicationPart.getSubmittedFileName()", "public java.lang.String getSubmittedFileName()"], ["org.apache.catalina.core.ApplicationRequest", "org.apache.catalina.core.ApplicationRequest(javax.servlet.ServletRequest)", "public org.apache.catalina.core.ApplicationRequest(javax.servlet.ServletRequest)"], ["java.lang.Object", "org.apache.catalina.core.ApplicationRequest.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.ApplicationRequest.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.apache.catalina.core.ApplicationRequest.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationRequest.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.core.ApplicationRequest.setRequest(javax.servlet.ServletRequest)", "public void setRequest(javax.servlet.ServletRequest)"], ["org.apache.catalina.core.ApplicationResponse", "org.apache.catalina.core.ApplicationResponse(javax.servlet.ServletResponse, boolean)", "public org.apache.catalina.core.ApplicationResponse(javax.servlet.ServletResponse, boolean)"], ["void", "org.apache.catalina.core.ApplicationResponse.reset()", "public void reset()"], ["void", "org.apache.catalina.core.ApplicationResponse.setContentLength(int)", "public void setContentLength(int)"], ["void", "org.apache.catalina.core.ApplicationResponse.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "org.apache.catalina.core.ApplicationResponse.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationResponse.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["void", "org.apache.catalina.core.ApplicationResponse.setBufferSize(int)", "public void setBufferSize(int)"], ["void", "org.apache.catalina.core.ApplicationResponse.setResponse(javax.servlet.ServletResponse)", "public void setResponse(javax.servlet.ServletResponse)"], ["org.apache.catalina.core.ApplicationServletRegistration", "org.apache.catalina.core.ApplicationServletRegistration(org.apache.catalina.Wrapper, org.apache.catalina.Context)", "public org.apache.catalina.core.ApplicationServletRegistration(org.apache.catalina.Wrapper, org.apache.catalina.Context)"], ["java.lang.String", "org.apache.catalina.core.ApplicationServletRegistration.getClassName()", "public java.lang.String getClassName()"], ["java.lang.String", "org.apache.catalina.core.ApplicationServletRegistration.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.core.ApplicationServletRegistration.getInitParameters()", "public java.util.Map<java.lang.String, java.lang.String> getInitParameters()"], ["java.lang.String", "org.apache.catalina.core.ApplicationServletRegistration.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.catalina.core.ApplicationServletRegistration.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.ApplicationServletRegistration.setInitParameters(java.util.Map<java.lang.String, java.lang.String>)", "public java.util.Set<java.lang.String> setInitParameters(java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.catalina.core.ApplicationServletRegistration.setAsyncSupported(boolean)", "public void setAsyncSupported(boolean)"], ["void", "org.apache.catalina.core.ApplicationServletRegistration.setLoadOnStartup(int)", "public void setLoadOnStartup(int)"], ["void", "org.apache.catalina.core.ApplicationServletRegistration.setMultipartConfig(javax.servlet.MultipartConfigElement)", "public void setMultipartConfig(javax.servlet.MultipartConfigElement)"], ["void", "org.apache.catalina.core.ApplicationServletRegistration.setRunAsRole(java.lang.String)", "public void setRunAsRole(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.ApplicationServletRegistration.setServletSecurity(javax.servlet.ServletSecurityElement)", "public java.util.Set<java.lang.String> setServletSecurity(javax.servlet.ServletSecurityElement)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.ApplicationServletRegistration.addMapping(java.lang.String...)", "public java.util.Set<java.lang.String> addMapping(java.lang.String...)"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.core.ApplicationServletRegistration.getMappings()", "public java.util.Collection<java.lang.String> getMappings()"], ["java.lang.String", "org.apache.catalina.core.ApplicationServletRegistration.getRunAsRole()", "public java.lang.String getRunAsRole()"], ["org.apache.catalina.core.ApplicationSessionCookieConfig", "org.apache.catalina.core.ApplicationSessionCookieConfig(org.apache.catalina.core.StandardContext)", "public org.apache.catalina.core.ApplicationSessionCookieConfig(org.apache.catalina.core.StandardContext)"], ["java.lang.String", "org.apache.catalina.core.ApplicationSessionCookieConfig.getComment()", "public java.lang.String getComment()"], ["java.lang.String", "org.apache.catalina.core.ApplicationSessionCookieConfig.getDomain()", "public java.lang.String getDomain()"], ["int", "org.apache.catalina.core.ApplicationSessionCookieConfig.getMaxAge()", "public int getMaxAge()"], ["java.lang.String", "org.apache.catalina.core.ApplicationSessionCookieConfig.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.catalina.core.ApplicationSessionCookieConfig.getPath()", "public java.lang.String getPath()"], ["boolean", "org.apache.catalina.core.ApplicationSessionCookieConfig.isHttpOnly()", "public boolean isHttpOnly()"], ["boolean", "org.apache.catalina.core.ApplicationSessionCookieConfig.isSecure()", "public boolean isSecure()"], ["void", "org.apache.catalina.core.ApplicationSessionCookieConfig.setComment(java.lang.String)", "public void setComment(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationSessionCookieConfig.setDomain(java.lang.String)", "public void setDomain(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationSessionCookieConfig.setHttpOnly(boolean)", "public void setHttpOnly(boolean)"], ["void", "org.apache.catalina.core.ApplicationSessionCookieConfig.setMaxAge(int)", "public void setMaxAge(int)"], ["void", "org.apache.catalina.core.ApplicationSessionCookieConfig.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationSessionCookieConfig.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["void", "org.apache.catalina.core.ApplicationSessionCookieConfig.setSecure(boolean)", "public void setSecure(boolean)"], ["javax.servlet.http.Cookie", "org.apache.catalina.core.ApplicationSessionCookieConfig.createSessionCookie(org.apache.catalina.Context, java.lang.String, boolean)", "public static javax.servlet.http.Cookie createSessionCookie(org.apache.catalina.Context, java.lang.String, boolean)"], ["boolean", "org.apache.catalina.core.AprLifecycleListener.isAprAvailable()", "public static boolean isAprAvailable()"], ["org.apache.catalina.core.AprLifecycleListener", "org.apache.catalina.core.AprLifecycleListener()", "public org.apache.catalina.core.AprLifecycleListener()"], ["void", "org.apache.catalina.core.AprLifecycleListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["java.lang.String", "org.apache.catalina.core.AprLifecycleListener.getSSLEngine()", "public java.lang.String getSSLEngine()"], ["void", "org.apache.catalina.core.AprLifecycleListener.setSSLEngine(java.lang.String)", "public void setSSLEngine(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.AprLifecycleListener.getSSLRandomSeed()", "public java.lang.String getSSLRandomSeed()"], ["void", "org.apache.catalina.core.AprLifecycleListener.setSSLRandomSeed(java.lang.String)", "public void setSSLRandomSeed(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.AprLifecycleListener.getFIPSMode()", "public java.lang.String getFIPSMode()"], ["void", "org.apache.catalina.core.AprLifecycleListener.setFIPSMode(java.lang.String)", "public void setFIPSMode(java.lang.String)"], ["boolean", "org.apache.catalina.core.AprLifecycleListener.isFIPSModeActive()", "public boolean isFIPSModeActive()"], ["void", "org.apache.catalina.core.AsyncContextImpl$1.run()", "public void run()"], ["org.apache.catalina.core.AsyncContextImpl$RunnableWrapper", "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper(java.lang.Runnable, org.apache.catalina.Context, org.apache.coyote.Request)", "public org.apache.catalina.core.AsyncContextImpl$RunnableWrapper(java.lang.Runnable, org.apache.catalina.Context, org.apache.coyote.Request)"], ["void", "org.apache.catalina.core.AsyncContextImpl$RunnableWrapper.run()", "public void run()"], ["org.apache.catalina.core.AsyncContextImpl", "org.apache.catalina.core.AsyncContextImpl(org.apache.catalina.connector.Request)", "public org.apache.catalina.core.AsyncContextImpl(org.apache.catalina.connector.Request)"], ["void", "org.apache.catalina.core.AsyncContextImpl.complete()", "public void complete()"], ["void", "org.apache.catalina.core.AsyncContextImpl.fireOnComplete()", "public void fireOnComplete()"], ["boolean", "org.apache.catalina.core.AsyncContextImpl.timeout()", "public boolean timeout()"], ["void", "org.apache.catalina.core.AsyncContextImpl.dispatch()", "public void dispatch()"], ["void", "org.apache.catalina.core.AsyncContextImpl.dispatch(java.lang.String)", "public void dispatch(java.lang.String)"], ["void", "org.apache.catalina.core.AsyncContextImpl.dispatch(javax.servlet.ServletContext, java.lang.String)", "public void dispatch(javax.servlet.ServletContext, java.lang.String)"], ["javax.servlet.ServletRequest", "org.apache.catalina.core.AsyncContextImpl.getRequest()", "public javax.servlet.ServletRequest getRequest()"], ["javax.servlet.ServletResponse", "org.apache.catalina.core.AsyncContextImpl.getResponse()", "public javax.servlet.ServletResponse getResponse()"], ["void", "org.apache.catalina.core.AsyncContextImpl.start(java.lang.Runnable)", "public void start(java.lang.Runnable)"], ["void", "org.apache.catalina.core.AsyncContextImpl.addListener(javax.servlet.AsyncListener)", "public void addListener(javax.servlet.AsyncListener)"], ["void", "org.apache.catalina.core.AsyncContextImpl.addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["<T extends javax.servlet.AsyncListener> T", "org.apache.catalina.core.AsyncContextImpl.createListener(java.lang.Class<T>)", "public <T extends javax.servlet.AsyncListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.core.AsyncContextImpl.recycle()", "public void recycle()"], ["boolean", "org.apache.catalina.core.AsyncContextImpl.isStarted()", "public boolean isStarted()"], ["void", "org.apache.catalina.core.AsyncContextImpl.setStarted(org.apache.catalina.Context, javax.servlet.ServletRequest, javax.servlet.ServletResponse, boolean)", "public void setStarted(org.apache.catalina.Context, javax.servlet.ServletRequest, javax.servlet.ServletResponse, boolean)"], ["boolean", "org.apache.catalina.core.AsyncContextImpl.hasOriginalRequestAndResponse()", "public boolean hasOriginalRequestAndResponse()"], ["long", "org.apache.catalina.core.AsyncContextImpl.getTimeout()", "public long getTimeout()"], ["void", "org.apache.catalina.core.AsyncContextImpl.setTimeout(long)", "public void setTimeout(long)"], ["void", "org.apache.catalina.core.AsyncContextImpl.setErrorState(java.lang.Throwable, boolean)", "public void setErrorState(java.lang.Throwable, boolean)"], ["org.apache.catalina.core.AsyncListenerWrapper", "org.apache.catalina.core.AsyncListenerWrapper()", "public org.apache.catalina.core.AsyncListenerWrapper()"], ["void", "org.apache.catalina.core.AsyncListenerWrapper.fireOnStartAsync(javax.servlet.AsyncEvent)", "public void fireOnStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.apache.catalina.core.AsyncListenerWrapper.fireOnComplete(javax.servlet.AsyncEvent)", "public void fireOnComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(javax.servlet.AsyncEvent)", "public void fireOnTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.apache.catalina.core.AsyncListenerWrapper.fireOnError(javax.servlet.AsyncEvent)", "public void fireOnError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["javax.servlet.AsyncListener", "org.apache.catalina.core.AsyncListenerWrapper.getListener()", "public javax.servlet.AsyncListener getListener()"], ["void", "org.apache.catalina.core.AsyncListenerWrapper.setListener(javax.servlet.AsyncListener)", "public void setListener(javax.servlet.AsyncListener)"], ["org.apache.catalina.core.Constants", "org.apache.catalina.core.Constants()", "public org.apache.catalina.core.Constants()"], ["void", "org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run()", "public void run()"], ["java.lang.Void", "org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run()", "public java.lang.Void run()"], ["java.lang.Object", "org.apache.catalina.core.ContainerBase$PrivilegedAddChild.run()", "public java.lang.Object run()"], ["org.apache.catalina.core.ContainerBase$StartChild", "org.apache.catalina.core.ContainerBase$StartChild(org.apache.catalina.Container)", "public org.apache.catalina.core.ContainerBase$StartChild(org.apache.catalina.Container)"], ["java.lang.Void", "org.apache.catalina.core.ContainerBase$StartChild.call()", "public java.lang.Void call() throws org.apache.catalina.LifecycleException"], ["java.lang.Object", "org.apache.catalina.core.ContainerBase$StartChild.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.catalina.core.ContainerBase$StartStopThreadFactory", "org.apache.catalina.core.ContainerBase$StartStopThreadFactory(java.lang.String)", "public org.apache.catalina.core.ContainerBase$StartStopThreadFactory(java.lang.String)"], ["java.lang.Thread", "org.apache.catalina.core.ContainerBase$StartStopThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["org.apache.catalina.core.ContainerBase$StopChild", "org.apache.catalina.core.ContainerBase$StopChild(org.apache.catalina.Container)", "public org.apache.catalina.core.ContainerBase$StopChild(org.apache.catalina.Container)"], ["java.lang.Void", "org.apache.catalina.core.ContainerBase$StopChild.call()", "public java.lang.Void call() throws org.apache.catalina.LifecycleException"], ["java.lang.Object", "org.apache.catalina.core.ContainerBase$StopChild.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.catalina.core.ContainerBase", "org.apache.catalina.core.ContainerBase()", "public org.apache.catalina.core.ContainerBase()"], ["int", "org.apache.catalina.core.ContainerBase.getStartStopThreads()", "public int getStartStopThreads()"], ["void", "org.apache.catalina.core.ContainerBase.setStartStopThreads(int)", "public void setStartStopThreads(int)"], ["int", "org.apache.catalina.core.ContainerBase.getBackgroundProcessorDelay()", "public int getBackgroundProcessorDelay()"], ["void", "org.apache.catalina.core.ContainerBase.setBackgroundProcessorDelay(int)", "public void setBackgroundProcessorDelay(int)"], ["org.apache.juli.logging.Log", "org.apache.catalina.core.ContainerBase.getLogger()", "public org.apache.juli.logging.Log getLogger()"], ["org.apache.catalina.Cluster", "org.apache.catalina.core.ContainerBase.getCluster()", "public org.apache.catalina.Cluster getCluster()"], ["void", "org.apache.catalina.core.ContainerBase.setCluster(org.apache.catalina.Cluster)", "public void setCluster(org.apache.catalina.Cluster)"], ["java.lang.String", "org.apache.catalina.core.ContainerBase.getName()", "public java.lang.String getName()"], ["void", "org.apache.catalina.core.ContainerBase.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "org.apache.catalina.core.ContainerBase.getStartChildren()", "public boolean getStartChildren()"], ["void", "org.apache.catalina.core.ContainerBase.setStartChildren(boolean)", "public void setStartChildren(boolean)"], ["org.apache.catalina.Container", "org.apache.catalina.core.ContainerBase.getParent()", "public org.apache.catalina.Container getParent()"], ["void", "org.apache.catalina.core.ContainerBase.setParent(org.apache.catalina.Container)", "public void setParent(org.apache.catalina.Container)"], ["java.lang.ClassLoader", "org.apache.catalina.core.ContainerBase.getParentClassLoader()", "public java.lang.ClassLoader getParentClassLoader()"], ["void", "org.apache.catalina.core.ContainerBase.setParentClassLoader(java.lang.ClassLoader)", "public void setParentClassLoader(java.lang.ClassLoader)"], ["org.apache.catalina.Pipeline", "org.apache.catalina.core.ContainerBase.getPipeline()", "public org.apache.catalina.Pipeline getPipeline()"], ["org.apache.catalina.Realm", "org.apache.catalina.core.ContainerBase.getRealm()", "public org.apache.catalina.Realm getRealm()"], ["void", "org.apache.catalina.core.ContainerBase.setRealm(org.apache.catalina.Realm)", "public void setRealm(org.apache.catalina.Realm)"], ["void", "org.apache.catalina.core.ContainerBase.addChild(org.apache.catalina.Container)", "public void addChild(org.apache.catalina.Container)"], ["void", "org.apache.catalina.core.ContainerBase.addContainerListener(org.apache.catalina.ContainerListener)", "public void addContainerListener(org.apache.catalina.ContainerListener)"], ["void", "org.apache.catalina.core.ContainerBase.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["org.apache.catalina.Container", "org.apache.catalina.core.ContainerBase.findChild(java.lang.String)", "public org.apache.catalina.Container findChild(java.lang.String)"], ["org.apache.catalina.Container[]", "org.apache.catalina.core.ContainerBase.findChildren()", "public org.apache.catalina.Container[] findChildren()"], ["org.apache.catalina.ContainerListener[]", "org.apache.catalina.core.ContainerBase.findContainerListeners()", "public org.apache.catalina.ContainerListener[] findContainerListeners()"], ["void", "org.apache.catalina.core.ContainerBase.removeChild(org.apache.catalina.Container)", "public void removeChild(org.apache.catalina.Container)"], ["void", "org.apache.catalina.core.ContainerBase.removeContainerListener(org.apache.catalina.ContainerListener)", "public void removeContainerListener(org.apache.catalina.ContainerListener)"], ["void", "org.apache.catalina.core.ContainerBase.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.core.ContainerBase.logAccess(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long, boolean)", "public void logAccess(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long, boolean)"], ["org.apache.catalina.AccessLog", "org.apache.catalina.core.ContainerBase.getAccessLog()", "public org.apache.catalina.AccessLog getAccessLog()"], ["synchronized", "org.apache.catalina.core.ContainerBase.void addValve(org.apache.catalina.Valve)", "public synchronized void addValve(org.apache.catalina.Valve)"], ["void", "org.apache.catalina.core.ContainerBase.backgroundProcess()", "public void backgroundProcess()"], ["java.io.File", "org.apache.catalina.core.ContainerBase.getCatalinaBase()", "public java.io.File getCatalinaBase()"], ["java.io.File", "org.apache.catalina.core.ContainerBase.getCatalinaHome()", "public java.io.File getCatalinaHome()"], ["void", "org.apache.catalina.core.ContainerBase.fireContainerEvent(java.lang.String, java.lang.Object)", "public void fireContainerEvent(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.apache.catalina.core.ContainerBase.getMBeanKeyProperties()", "public java.lang.String getMBeanKeyProperties()"], ["javax.management.ObjectName[]", "org.apache.catalina.core.ContainerBase.getChildren()", "public javax.management.ObjectName[] getChildren()"], ["java.lang.Class<?>", "org.apache.catalina.core.DefaultInstanceManager$1.run()", "public java.lang.Class<?> run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.core.DefaultInstanceManager$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.reflect.Method", "org.apache.catalina.core.DefaultInstanceManager$2.run()", "public java.lang.reflect.Method run()"], ["java.lang.Object", "org.apache.catalina.core.DefaultInstanceManager$2.run()", "public java.lang.Object run()"], ["java.lang.reflect.Field", "org.apache.catalina.core.DefaultInstanceManager$3.run()", "public java.lang.reflect.Field run()"], ["java.lang.Object", "org.apache.catalina.core.DefaultInstanceManager$3.run()", "public java.lang.Object run()"], ["org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntry", "org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntry(java.lang.String, java.lang.Class<?>[], java.lang.String, org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType)", "public org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntry(java.lang.String, java.lang.Class<?>[], java.lang.String, org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType)"], ["java.lang.String", "org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntry.getAccessibleObjectName()", "public java.lang.String getAccessibleObjectName()"], ["java.lang.Class<?>[]", "org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntry.getParamTypes()", "public java.lang.Class<?>[] getParamTypes()"], ["java.lang.String", "org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntry.getName()", "public java.lang.String getName()"], ["org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType", "org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntry.getType()", "public org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType getType()"], ["org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType[]", "org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType.values()", "public static org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType[] values()"], ["org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType", "org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType.valueOf(java.lang.String)", "public static org.apache.catalina.core.DefaultInstanceManager$AnnotationCacheEntryType valueOf(java.lang.String)"], ["org.apache.catalina.core.DefaultInstanceManager", "org.apache.catalina.core.DefaultInstanceManager(javax.naming.Context, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>, org.apache.catalina.Context, java.lang.ClassLoader)", "public org.apache.catalina.core.DefaultInstanceManager(javax.naming.Context, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>, org.apache.catalina.Context, java.lang.ClassLoader)"], ["java.lang.Object", "org.apache.catalina.core.DefaultInstanceManager.newInstance(java.lang.Class<?>)", "public java.lang.Object newInstance(java.lang.Class<?>) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException, java.lang.InstantiationException"], ["java.lang.Object", "org.apache.catalina.core.DefaultInstanceManager.newInstance(java.lang.String)", "public java.lang.Object newInstance(java.lang.String) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException, java.lang.InstantiationException, java.lang.ClassNotFoundException"], ["java.lang.Object", "org.apache.catalina.core.DefaultInstanceManager.newInstance(java.lang.String, java.lang.ClassLoader)", "public java.lang.Object newInstance(java.lang.String, java.lang.ClassLoader) throws java.lang.IllegalAccessException, javax.naming.NamingException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException, java.lang.ClassNotFoundException"], ["void", "org.apache.catalina.core.DefaultInstanceManager.newInstance(java.lang.Object)", "public void newInstance(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException"], ["void", "org.apache.catalina.core.DefaultInstanceManager.destroyInstance(java.lang.Object)", "public void destroyInstance(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["org.apache.catalina.core.JreMemoryLeakPreventionListener", "org.apache.catalina.core.JreMemoryLeakPreventionListener()", "public org.apache.catalina.core.JreMemoryLeakPreventionListener()"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isAppContextProtection()", "public boolean isAppContextProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setAppContextProtection(boolean)", "public void setAppContextProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isAWTThreadProtection()", "public boolean isAWTThreadProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setAWTThreadProtection(boolean)", "public void setAWTThreadProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isJava2DDisposerProtection()", "public boolean isJava2DDisposerProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setJava2DDisposerProtection(boolean)", "public void setJava2DDisposerProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isGcDaemonProtection()", "public boolean isGcDaemonProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setGcDaemonProtection(boolean)", "public void setGcDaemonProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isSecurityPolicyProtection()", "public boolean isSecurityPolicyProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setSecurityPolicyProtection(boolean)", "public void setSecurityPolicyProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isSecurityLoginConfigurationProtection()", "public boolean isSecurityLoginConfigurationProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setSecurityLoginConfigurationProtection(boolean)", "public void setSecurityLoginConfigurationProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isTokenPollerProtection()", "public boolean isTokenPollerProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setTokenPollerProtection(boolean)", "public void setTokenPollerProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isUrlCacheProtection()", "public boolean isUrlCacheProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setUrlCacheProtection(boolean)", "public void setUrlCacheProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isXmlParsingProtection()", "public boolean isXmlParsingProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setXmlParsingProtection(boolean)", "public void setXmlParsingProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isLdapPoolProtection()", "public boolean isLdapPoolProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setLdapPoolProtection(boolean)", "public void setLdapPoolProtection(boolean)"], ["boolean", "org.apache.catalina.core.JreMemoryLeakPreventionListener.isDriverManagerProtection()", "public boolean isDriverManagerProtection()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setDriverManagerProtection(boolean)", "public void setDriverManagerProtection(boolean)"], ["java.lang.String", "org.apache.catalina.core.JreMemoryLeakPreventionListener.getClassesToInitialize()", "public java.lang.String getClassesToInitialize()"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.setClassesToInitialize(java.lang.String)", "public void setClassesToInitialize(java.lang.String)"], ["void", "org.apache.catalina.core.JreMemoryLeakPreventionListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.core.NamingContextListener", "org.apache.catalina.core.NamingContextListener()", "public org.apache.catalina.core.NamingContextListener()"], ["boolean", "org.apache.catalina.core.NamingContextListener.getExceptionOnFailedWrite()", "public boolean getExceptionOnFailedWrite()"], ["void", "org.apache.catalina.core.NamingContextListener.setExceptionOnFailedWrite(boolean)", "public void setExceptionOnFailedWrite(boolean)"], ["java.lang.String", "org.apache.catalina.core.NamingContextListener.getName()", "public java.lang.String getName()"], ["void", "org.apache.catalina.core.NamingContextListener.setName(java.lang.String)", "public void setName(java.lang.String)"], ["javax.naming.Context", "org.apache.catalina.core.NamingContextListener.getEnvContext()", "public javax.naming.Context getEnvContext()"], ["void", "org.apache.catalina.core.NamingContextListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["void", "org.apache.catalina.core.NamingContextListener.containerEvent(org.apache.catalina.ContainerEvent)", "public void containerEvent(org.apache.catalina.ContainerEvent)"], ["void", "org.apache.catalina.core.NamingContextListener.propertyChange(java.beans.PropertyChangeEvent)", "public void propertyChange(java.beans.PropertyChangeEvent)"], ["void", "org.apache.catalina.core.NamingContextListener.addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)", "public void addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)"], ["void", "org.apache.catalina.core.NamingContextListener.addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)", "public void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)"], ["void", "org.apache.catalina.core.NamingContextListener.addLocalEjb(org.apache.tomcat.util.descriptor.web.ContextLocalEjb)", "public void addLocalEjb(org.apache.tomcat.util.descriptor.web.ContextLocalEjb)"], ["void", "org.apache.catalina.core.NamingContextListener.addService(org.apache.tomcat.util.descriptor.web.ContextService)", "public void addService(org.apache.tomcat.util.descriptor.web.ContextService)"], ["void", "org.apache.catalina.core.NamingContextListener.addResource(org.apache.tomcat.util.descriptor.web.ContextResource)", "public void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)"], ["void", "org.apache.catalina.core.NamingContextListener.addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)", "public void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)"], ["void", "org.apache.catalina.core.NamingContextListener.addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)", "public void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)"], ["void", "org.apache.catalina.core.NamingContextListener.removeEjb(java.lang.String)", "public void removeEjb(java.lang.String)"], ["void", "org.apache.catalina.core.NamingContextListener.removeEnvironment(java.lang.String)", "public void removeEnvironment(java.lang.String)"], ["void", "org.apache.catalina.core.NamingContextListener.removeLocalEjb(java.lang.String)", "public void removeLocalEjb(java.lang.String)"], ["void", "org.apache.catalina.core.NamingContextListener.removeService(java.lang.String)", "public void removeService(java.lang.String)"], ["void", "org.apache.catalina.core.NamingContextListener.removeResource(java.lang.String)", "public void removeResource(java.lang.String)"], ["void", "org.apache.catalina.core.NamingContextListener.removeResourceEnvRef(java.lang.String)", "public void removeResourceEnvRef(java.lang.String)"], ["void", "org.apache.catalina.core.NamingContextListener.removeResourceLink(java.lang.String)", "public void removeResourceLink(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext$1.bind()", "public void bind()"], ["void", "org.apache.catalina.core.StandardContext$1.unbind()", "public void unbind()"], ["org.apache.tomcat.util.descriptor.web.FilterMap[]", "org.apache.catalina.core.StandardContext$ContextFilterMaps.asArray()", "public org.apache.tomcat.util.descriptor.web.FilterMap[] asArray()"], ["void", "org.apache.catalina.core.StandardContext$ContextFilterMaps.add(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void add(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["void", "org.apache.catalina.core.StandardContext$ContextFilterMaps.addBefore(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void addBefore(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["void", "org.apache.catalina.core.StandardContext$ContextFilterMaps.remove(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void remove(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["org.apache.catalina.core.StandardContext$NoPluggabilityServletContext", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext(javax.servlet.ServletContext)", "public org.apache.catalina.core.StandardContext$NoPluggabilityServletContext(javax.servlet.ServletContext)"], ["java.lang.String", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getContextPath()", "public java.lang.String getContextPath()"], ["javax.servlet.ServletContext", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getContext(java.lang.String)", "public javax.servlet.ServletContext getContext(java.lang.String)"], ["int", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getMajorVersion()", "public int getMajorVersion()"], ["int", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getMinorVersion()", "public int getMinorVersion()"], ["int", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getEffectiveMajorVersion()", "public int getEffectiveMajorVersion()"], ["int", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getEffectiveMinorVersion()", "public int getEffectiveMinorVersion()"], ["java.lang.String", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getMimeType(java.lang.String)", "public java.lang.String getMimeType(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["java.net.URL", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.io.InputStream", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getNamedDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)"], ["javax.servlet.Servlet", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getServlet(java.lang.String)", "public javax.servlet.Servlet getServlet(java.lang.String) throws javax.servlet.ServletException"], ["java.util.Enumeration<javax.servlet.Servlet>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getServlets()", "public java.util.Enumeration<javax.servlet.Servlet> getServlets()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getServletNames()", "public java.util.Enumeration<java.lang.String> getServletNames()"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.log(java.lang.Exception, java.lang.String)", "public void log(java.lang.Exception, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getServerInfo()", "public java.lang.String getServerInfo()"], ["java.lang.String", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["boolean", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["java.lang.Object", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getServletContextName()", "public java.lang.String getServletContextName()"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addServlet(java.lang.String, java.lang.String)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.String)"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addServlet(java.lang.String, javax.servlet.Servlet)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, javax.servlet.Servlet)"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)"], ["<T extends javax.servlet.Servlet> T", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.createServlet(java.lang.Class<T>)", "public <T extends javax.servlet.Servlet> T createServlet(java.lang.Class<T>) throws javax.servlet.ServletException"], ["javax.servlet.ServletRegistration", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getServletRegistration(java.lang.String)", "public javax.servlet.ServletRegistration getServletRegistration(java.lang.String)"], ["java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getServletRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration> getServletRegistrations()"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addFilter(java.lang.String, java.lang.String)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.String)"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addFilter(java.lang.String, javax.servlet.Filter)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, javax.servlet.Filter)"], ["javax.servlet.FilterRegistration$Dynamic", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)"], ["<T extends javax.servlet.Filter> T", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.createFilter(java.lang.Class<T>)", "public <T extends javax.servlet.Filter> T createFilter(java.lang.Class<T>) throws javax.servlet.ServletException"], ["javax.servlet.FilterRegistration", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getFilterRegistration(java.lang.String)", "public javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)"], ["java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getFilterRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration> getFilterRegistrations()"], ["javax.servlet.SessionCookieConfig", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getSessionCookieConfig()", "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)", "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getDefaultSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getEffectiveSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["<T extends java.util.EventListener> void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addListener(T)", "public <T extends java.util.EventListener> void addListener(T)"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.addListener(java.lang.Class<? extends java.util.EventListener>)", "public void addListener(java.lang.Class<? extends java.util.EventListener>)"], ["<T extends java.util.EventListener> T", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.createListener(java.lang.Class<T>)", "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["java.lang.ClassLoader", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["void", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.declareRoles(java.lang.String...)", "public void declareRoles(java.lang.String...)"], ["java.lang.String", "org.apache.catalina.core.StandardContext$NoPluggabilityServletContext.getVirtualServerName()", "public java.lang.String getVirtualServerName()"], ["org.apache.catalina.core.StandardContext", "org.apache.catalina.core.StandardContext()", "public org.apache.catalina.core.StandardContext()"], ["void", "org.apache.catalina.core.StandardContext.setUseRfc6265(boolean)", "public void setUseRfc6265(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getUseRfc6265()", "public boolean getUseRfc6265()"], ["void", "org.apache.catalina.core.StandardContext.setCookieEncoding(java.lang.String)", "public void setCookieEncoding(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getCookieEncoding()", "public java.lang.String getCookieEncoding()"], ["java.nio.charset.Charset", "org.apache.catalina.core.StandardContext.getCookieEncodingCharset()", "public java.nio.charset.Charset getCookieEncodingCharset()"], ["java.lang.Object", "org.apache.catalina.core.StandardContext.getNamingToken()", "public java.lang.Object getNamingToken()"], ["void", "org.apache.catalina.core.StandardContext.setContainerSciFilter(java.lang.String)", "public void setContainerSciFilter(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getContainerSciFilter()", "public java.lang.String getContainerSciFilter()"], ["boolean", "org.apache.catalina.core.StandardContext.getSendRedirectBody()", "public boolean getSendRedirectBody()"], ["void", "org.apache.catalina.core.StandardContext.setSendRedirectBody(boolean)", "public void setSendRedirectBody(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getPreemptiveAuthentication()", "public boolean getPreemptiveAuthentication()"], ["void", "org.apache.catalina.core.StandardContext.setPreemptiveAuthentication(boolean)", "public void setPreemptiveAuthentication(boolean)"], ["void", "org.apache.catalina.core.StandardContext.setFireRequestListenersOnForwards(boolean)", "public void setFireRequestListenersOnForwards(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getFireRequestListenersOnForwards()", "public boolean getFireRequestListenersOnForwards()"], ["void", "org.apache.catalina.core.StandardContext.setAddWebinfClassesResources(boolean)", "public void setAddWebinfClassesResources(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getAddWebinfClassesResources()", "public boolean getAddWebinfClassesResources()"], ["void", "org.apache.catalina.core.StandardContext.setWebappVersion(java.lang.String)", "public void setWebappVersion(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getWebappVersion()", "public java.lang.String getWebappVersion()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getBaseName()", "public java.lang.String getBaseName()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getResourceOnlyServlets()", "public java.lang.String getResourceOnlyServlets()"], ["void", "org.apache.catalina.core.StandardContext.setResourceOnlyServlets(java.lang.String)", "public void setResourceOnlyServlets(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.isResourceOnlyServlet(java.lang.String)", "public boolean isResourceOnlyServlet(java.lang.String)"], ["int", "org.apache.catalina.core.StandardContext.getEffectiveMajorVersion()", "public int getEffectiveMajorVersion()"], ["void", "org.apache.catalina.core.StandardContext.setEffectiveMajorVersion(int)", "public void setEffectiveMajorVersion(int)"], ["int", "org.apache.catalina.core.StandardContext.getEffectiveMinorVersion()", "public int getEffectiveMinorVersion()"], ["void", "org.apache.catalina.core.StandardContext.setEffectiveMinorVersion(int)", "public void setEffectiveMinorVersion(int)"], ["void", "org.apache.catalina.core.StandardContext.setLogEffectiveWebXml(boolean)", "public void setLogEffectiveWebXml(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getLogEffectiveWebXml()", "public boolean getLogEffectiveWebXml()"], ["org.apache.catalina.Authenticator", "org.apache.catalina.core.StandardContext.getAuthenticator()", "public org.apache.catalina.Authenticator getAuthenticator()"], ["org.apache.tomcat.JarScanner", "org.apache.catalina.core.StandardContext.getJarScanner()", "public org.apache.tomcat.JarScanner getJarScanner()"], ["void", "org.apache.catalina.core.StandardContext.setJarScanner(org.apache.tomcat.JarScanner)", "public void setJarScanner(org.apache.tomcat.JarScanner)"], ["org.apache.tomcat.InstanceManager", "org.apache.catalina.core.StandardContext.getInstanceManager()", "public org.apache.tomcat.InstanceManager getInstanceManager()"], ["void", "org.apache.catalina.core.StandardContext.setInstanceManager(org.apache.tomcat.InstanceManager)", "public void setInstanceManager(org.apache.tomcat.InstanceManager)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getEncodedPath()", "public java.lang.String getEncodedPath()"], ["void", "org.apache.catalina.core.StandardContext.setAllowCasualMultipartParsing(boolean)", "public void setAllowCasualMultipartParsing(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getAllowCasualMultipartParsing()", "public boolean getAllowCasualMultipartParsing()"], ["void", "org.apache.catalina.core.StandardContext.setSwallowAbortedUploads(boolean)", "public void setSwallowAbortedUploads(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getSwallowAbortedUploads()", "public boolean getSwallowAbortedUploads()"], ["void", "org.apache.catalina.core.StandardContext.addServletContainerInitializer(javax.servlet.ServletContainerInitializer, java.util.Set<java.lang.Class<?>>)", "public void addServletContainerInitializer(javax.servlet.ServletContainerInitializer, java.util.Set<java.lang.Class<?>>)"], ["boolean", "org.apache.catalina.core.StandardContext.getDelegate()", "public boolean getDelegate()"], ["void", "org.apache.catalina.core.StandardContext.setDelegate(boolean)", "public void setDelegate(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.isUseNaming()", "public boolean isUseNaming()"], ["void", "org.apache.catalina.core.StandardContext.setUseNaming(boolean)", "public void setUseNaming(boolean)"], ["java.lang.Object[]", "org.apache.catalina.core.StandardContext.getApplicationEventListeners()", "public java.lang.Object[] getApplicationEventListeners()"], ["void", "org.apache.catalina.core.StandardContext.setApplicationEventListeners(java.lang.Object[])", "public void setApplicationEventListeners(java.lang.Object[])"], ["void", "org.apache.catalina.core.StandardContext.addApplicationEventListener(java.lang.Object)", "public void addApplicationEventListener(java.lang.Object)"], ["java.lang.Object[]", "org.apache.catalina.core.StandardContext.getApplicationLifecycleListeners()", "public java.lang.Object[] getApplicationLifecycleListeners()"], ["void", "org.apache.catalina.core.StandardContext.setApplicationLifecycleListeners(java.lang.Object[])", "public void setApplicationLifecycleListeners(java.lang.Object[])"], ["void", "org.apache.catalina.core.StandardContext.addApplicationLifecycleListener(java.lang.Object)", "public void addApplicationLifecycleListener(java.lang.Object)"], ["boolean", "org.apache.catalina.core.StandardContext.getAntiResourceLocking()", "public boolean getAntiResourceLocking()"], ["void", "org.apache.catalina.core.StandardContext.setAntiResourceLocking(boolean)", "public void setAntiResourceLocking(boolean)"], ["org.apache.catalina.util.CharsetMapper", "org.apache.catalina.core.StandardContext.getCharsetMapper()", "public org.apache.catalina.util.CharsetMapper getCharsetMapper()"], ["void", "org.apache.catalina.core.StandardContext.setCharsetMapper(org.apache.catalina.util.CharsetMapper)", "public void setCharsetMapper(org.apache.catalina.util.CharsetMapper)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getCharset(java.util.Locale)", "public java.lang.String getCharset(java.util.Locale)"], ["java.net.URL", "org.apache.catalina.core.StandardContext.getConfigFile()", "public java.net.URL getConfigFile()"], ["void", "org.apache.catalina.core.StandardContext.setConfigFile(java.net.URL)", "public void setConfigFile(java.net.URL)"], ["boolean", "org.apache.catalina.core.StandardContext.getConfigured()", "public boolean getConfigured()"], ["void", "org.apache.catalina.core.StandardContext.setConfigured(boolean)", "public void setConfigured(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getCookies()", "public boolean getCookies()"], ["void", "org.apache.catalina.core.StandardContext.setCookies(boolean)", "public void setCookies(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getSessionCookieName()", "public java.lang.String getSessionCookieName()"], ["void", "org.apache.catalina.core.StandardContext.setSessionCookieName(java.lang.String)", "public void setSessionCookieName(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.getUseHttpOnly()", "public boolean getUseHttpOnly()"], ["void", "org.apache.catalina.core.StandardContext.setUseHttpOnly(boolean)", "public void setUseHttpOnly(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getSessionCookieDomain()", "public java.lang.String getSessionCookieDomain()"], ["void", "org.apache.catalina.core.StandardContext.setSessionCookieDomain(java.lang.String)", "public void setSessionCookieDomain(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getSessionCookiePath()", "public java.lang.String getSessionCookiePath()"], ["void", "org.apache.catalina.core.StandardContext.setSessionCookiePath(java.lang.String)", "public void setSessionCookiePath(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.getSessionCookiePathUsesTrailingSlash()", "public boolean getSessionCookiePathUsesTrailingSlash()"], ["void", "org.apache.catalina.core.StandardContext.setSessionCookiePathUsesTrailingSlash(boolean)", "public void setSessionCookiePathUsesTrailingSlash(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getCrossContext()", "public boolean getCrossContext()"], ["void", "org.apache.catalina.core.StandardContext.setCrossContext(boolean)", "public void setCrossContext(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getDefaultContextXml()", "public java.lang.String getDefaultContextXml()"], ["void", "org.apache.catalina.core.StandardContext.setDefaultContextXml(java.lang.String)", "public void setDefaultContextXml(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getDefaultWebXml()", "public java.lang.String getDefaultWebXml()"], ["void", "org.apache.catalina.core.StandardContext.setDefaultWebXml(java.lang.String)", "public void setDefaultWebXml(java.lang.String)"], ["long", "org.apache.catalina.core.StandardContext.getStartupTime()", "public long getStartupTime()"], ["void", "org.apache.catalina.core.StandardContext.setStartupTime(long)", "public void setStartupTime(long)"], ["long", "org.apache.catalina.core.StandardContext.getTldScanTime()", "public long getTldScanTime()"], ["void", "org.apache.catalina.core.StandardContext.setTldScanTime(long)", "public void setTldScanTime(long)"], ["boolean", "org.apache.catalina.core.StandardContext.getDenyUncoveredHttpMethods()", "public boolean getDenyUncoveredHttpMethods()"], ["void", "org.apache.catalina.core.StandardContext.setDenyUncoveredHttpMethods(boolean)", "public void setDenyUncoveredHttpMethods(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getDisplayName()", "public java.lang.String getDisplayName()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getAltDDName()", "public java.lang.String getAltDDName()"], ["void", "org.apache.catalina.core.StandardContext.setAltDDName(java.lang.String)", "public void setAltDDName(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.getDistributable()", "public boolean getDistributable()"], ["void", "org.apache.catalina.core.StandardContext.setDistributable(boolean)", "public void setDistributable(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getDocBase()", "public java.lang.String getDocBase()"], ["void", "org.apache.catalina.core.StandardContext.setDocBase(java.lang.String)", "public void setDocBase(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getJ2EEApplication()", "public java.lang.String getJ2EEApplication()"], ["void", "org.apache.catalina.core.StandardContext.setJ2EEApplication(java.lang.String)", "public void setJ2EEApplication(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getJ2EEServer()", "public java.lang.String getJ2EEServer()"], ["void", "org.apache.catalina.core.StandardContext.setJ2EEServer(java.lang.String)", "public void setJ2EEServer(java.lang.String)"], ["org.apache.catalina.Loader", "org.apache.catalina.core.StandardContext.getLoader()", "public org.apache.catalina.Loader getLoader()"], ["void", "org.apache.catalina.core.StandardContext.setLoader(org.apache.catalina.Loader)", "public void setLoader(org.apache.catalina.Loader)"], ["org.apache.catalina.Manager", "org.apache.catalina.core.StandardContext.getManager()", "public org.apache.catalina.Manager getManager()"], ["void", "org.apache.catalina.core.StandardContext.setManager(org.apache.catalina.Manager)", "public void setManager(org.apache.catalina.Manager)"], ["boolean", "org.apache.catalina.core.StandardContext.getIgnoreAnnotations()", "public boolean getIgnoreAnnotations()"], ["void", "org.apache.catalina.core.StandardContext.setIgnoreAnnotations(boolean)", "public void setIgnoreAnnotations(boolean)"], ["org.apache.tomcat.util.descriptor.web.LoginConfig", "org.apache.catalina.core.StandardContext.getLoginConfig()", "public org.apache.tomcat.util.descriptor.web.LoginConfig getLoginConfig()"], ["void", "org.apache.catalina.core.StandardContext.setLoginConfig(org.apache.tomcat.util.descriptor.web.LoginConfig)", "public void setLoginConfig(org.apache.tomcat.util.descriptor.web.LoginConfig)"], ["org.apache.catalina.deploy.NamingResourcesImpl", "org.apache.catalina.core.StandardContext.getNamingResources()", "public org.apache.catalina.deploy.NamingResourcesImpl getNamingResources()"], ["void", "org.apache.catalina.core.StandardContext.setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)", "public void setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getPath()", "public java.lang.String getPath()"], ["void", "org.apache.catalina.core.StandardContext.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getPublicId()", "public java.lang.String getPublicId()"], ["void", "org.apache.catalina.core.StandardContext.setPublicId(java.lang.String)", "public void setPublicId(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.getReloadable()", "public boolean getReloadable()"], ["boolean", "org.apache.catalina.core.StandardContext.getOverride()", "public boolean getOverride()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getOriginalDocBase()", "public java.lang.String getOriginalDocBase()"], ["void", "org.apache.catalina.core.StandardContext.setOriginalDocBase(java.lang.String)", "public void setOriginalDocBase(java.lang.String)"], ["java.lang.ClassLoader", "org.apache.catalina.core.StandardContext.getParentClassLoader()", "public java.lang.ClassLoader getParentClassLoader()"], ["boolean", "org.apache.catalina.core.StandardContext.getPrivileged()", "public boolean getPrivileged()"], ["void", "org.apache.catalina.core.StandardContext.setPrivileged(boolean)", "public void setPrivileged(boolean)"], ["void", "org.apache.catalina.core.StandardContext.setReloadable(boolean)", "public void setReloadable(boolean)"], ["void", "org.apache.catalina.core.StandardContext.setOverride(boolean)", "public void setOverride(boolean)"], ["void", "org.apache.catalina.core.StandardContext.setReplaceWelcomeFiles(boolean)", "public void setReplaceWelcomeFiles(boolean)"], ["javax.servlet.ServletContext", "org.apache.catalina.core.StandardContext.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["int", "org.apache.catalina.core.StandardContext.getSessionTimeout()", "public int getSessionTimeout()"], ["void", "org.apache.catalina.core.StandardContext.setSessionTimeout(int)", "public void setSessionTimeout(int)"], ["boolean", "org.apache.catalina.core.StandardContext.getSwallowOutput()", "public boolean getSwallowOutput()"], ["void", "org.apache.catalina.core.StandardContext.setSwallowOutput(boolean)", "public void setSwallowOutput(boolean)"], ["long", "org.apache.catalina.core.StandardContext.getUnloadDelay()", "public long getUnloadDelay()"], ["void", "org.apache.catalina.core.StandardContext.setUnloadDelay(long)", "public void setUnloadDelay(long)"], ["boolean", "org.apache.catalina.core.StandardContext.getUnpackWAR()", "public boolean getUnpackWAR()"], ["void", "org.apache.catalina.core.StandardContext.setUnpackWAR(boolean)", "public void setUnpackWAR(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getCopyXML()", "public boolean getCopyXML()"], ["void", "org.apache.catalina.core.StandardContext.setCopyXML(boolean)", "public void setCopyXML(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getWrapperClass()", "public java.lang.String getWrapperClass()"], ["void", "org.apache.catalina.core.StandardContext.setWrapperClass(java.lang.String)", "public void setWrapperClass(java.lang.String)"], ["org.apache.catalina.WebResourceRoot", "org.apache.catalina.core.StandardContext.getResources()", "public org.apache.catalina.WebResourceRoot getResources()"], ["void", "org.apache.catalina.core.StandardContext.setResources(org.apache.catalina.WebResourceRoot)", "public void setResources(org.apache.catalina.WebResourceRoot)"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.apache.catalina.core.StandardContext.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["void", "org.apache.catalina.core.StandardContext.setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)", "public void setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)"], ["org.apache.catalina.ThreadBindingListener", "org.apache.catalina.core.StandardContext.getThreadBindingListener()", "public org.apache.catalina.ThreadBindingListener getThreadBindingListener()"], ["void", "org.apache.catalina.core.StandardContext.setThreadBindingListener(org.apache.catalina.ThreadBindingListener)", "public void setThreadBindingListener(org.apache.catalina.ThreadBindingListener)"], ["boolean", "org.apache.catalina.core.StandardContext.getJndiExceptionOnFailedWrite()", "public boolean getJndiExceptionOnFailedWrite()"], ["void", "org.apache.catalina.core.StandardContext.setJndiExceptionOnFailedWrite(boolean)", "public void setJndiExceptionOnFailedWrite(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getCharsetMapperClass()", "public java.lang.String getCharsetMapperClass()"], ["void", "org.apache.catalina.core.StandardContext.setCharsetMapperClass(java.lang.String)", "public void setCharsetMapperClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getWorkPath()", "public java.lang.String getWorkPath()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getWorkDir()", "public java.lang.String getWorkDir()"], ["void", "org.apache.catalina.core.StandardContext.setWorkDir(java.lang.String)", "public void setWorkDir(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.getClearReferencesStatic()", "public boolean getClearReferencesStatic()"], ["void", "org.apache.catalina.core.StandardContext.setClearReferencesStatic(boolean)", "public void setClearReferencesStatic(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getClearReferencesStopThreads()", "public boolean getClearReferencesStopThreads()"], ["void", "org.apache.catalina.core.StandardContext.setClearReferencesStopThreads(boolean)", "public void setClearReferencesStopThreads(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getClearReferencesStopTimerThreads()", "public boolean getClearReferencesStopTimerThreads()"], ["void", "org.apache.catalina.core.StandardContext.setClearReferencesStopTimerThreads(boolean)", "public void setClearReferencesStopTimerThreads(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getClearReferencesHttpClientKeepAliveThread()", "public boolean getClearReferencesHttpClientKeepAliveThread()"], ["void", "org.apache.catalina.core.StandardContext.setClearReferencesHttpClientKeepAliveThread(boolean)", "public void setClearReferencesHttpClientKeepAliveThread(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getRenewThreadsWhenStoppingContext()", "public boolean getRenewThreadsWhenStoppingContext()"], ["void", "org.apache.catalina.core.StandardContext.setRenewThreadsWhenStoppingContext(boolean)", "public void setRenewThreadsWhenStoppingContext(boolean)"], ["java.lang.Boolean", "org.apache.catalina.core.StandardContext.getFailCtxIfServletStartFails()", "public java.lang.Boolean getFailCtxIfServletStartFails()"], ["void", "org.apache.catalina.core.StandardContext.setFailCtxIfServletStartFails(java.lang.Boolean)", "public void setFailCtxIfServletStartFails(java.lang.Boolean)"], ["void", "org.apache.catalina.core.StandardContext.addApplicationListener(java.lang.String)", "public void addApplicationListener(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addApplicationParameter(org.apache.tomcat.util.descriptor.web.ApplicationParameter)", "public void addApplicationParameter(org.apache.tomcat.util.descriptor.web.ApplicationParameter)"], ["void", "org.apache.catalina.core.StandardContext.addChild(org.apache.catalina.Container)", "public void addChild(org.apache.catalina.Container)"], ["void", "org.apache.catalina.core.StandardContext.addConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)", "public void addConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)"], ["void", "org.apache.catalina.core.StandardContext.addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)", "public void addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)"], ["void", "org.apache.catalina.core.StandardContext.addFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)", "public void addFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)"], ["void", "org.apache.catalina.core.StandardContext.addFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void addFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["void", "org.apache.catalina.core.StandardContext.addFilterMapBefore(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void addFilterMapBefore(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["void", "org.apache.catalina.core.StandardContext.addInstanceListener(java.lang.String)", "public void addInstanceListener(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addLocaleEncodingMappingParameter(java.lang.String, java.lang.String)", "public void addLocaleEncodingMappingParameter(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addMessageDestination(org.apache.tomcat.util.descriptor.web.MessageDestination)", "public void addMessageDestination(org.apache.tomcat.util.descriptor.web.MessageDestination)"], ["void", "org.apache.catalina.core.StandardContext.addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)", "public void addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)"], ["void", "org.apache.catalina.core.StandardContext.addMimeMapping(java.lang.String, java.lang.String)", "public void addMimeMapping(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addParameter(java.lang.String, java.lang.String)", "public void addParameter(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addRoleMapping(java.lang.String, java.lang.String)", "public void addRoleMapping(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addSecurityRole(java.lang.String)", "public void addSecurityRole(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addServletMapping(java.lang.String, java.lang.String)", "public void addServletMapping(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addServletMapping(java.lang.String, java.lang.String, boolean)", "public void addServletMapping(java.lang.String, java.lang.String, boolean)"], ["void", "org.apache.catalina.core.StandardContext.addWatchedResource(java.lang.String)", "public void addWatchedResource(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addWelcomeFile(java.lang.String)", "public void addWelcomeFile(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addWrapperLifecycle(java.lang.String)", "public void addWrapperLifecycle(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addWrapperListener(java.lang.String)", "public void addWrapperListener(java.lang.String)"], ["org.apache.catalina.Wrapper", "org.apache.catalina.core.StandardContext.createWrapper()", "public org.apache.catalina.Wrapper createWrapper()"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findApplicationListeners()", "public java.lang.String[] findApplicationListeners()"], ["org.apache.tomcat.util.descriptor.web.ApplicationParameter[]", "org.apache.catalina.core.StandardContext.findApplicationParameters()", "public org.apache.tomcat.util.descriptor.web.ApplicationParameter[] findApplicationParameters()"], ["org.apache.tomcat.util.descriptor.web.SecurityConstraint[]", "org.apache.catalina.core.StandardContext.findConstraints()", "public org.apache.tomcat.util.descriptor.web.SecurityConstraint[] findConstraints()"], ["org.apache.tomcat.util.descriptor.web.ErrorPage", "org.apache.catalina.core.StandardContext.findErrorPage(int)", "public org.apache.tomcat.util.descriptor.web.ErrorPage findErrorPage(int)"], ["org.apache.tomcat.util.descriptor.web.ErrorPage", "org.apache.catalina.core.StandardContext.findErrorPage(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ErrorPage findErrorPage(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ErrorPage[]", "org.apache.catalina.core.StandardContext.findErrorPages()", "public org.apache.tomcat.util.descriptor.web.ErrorPage[] findErrorPages()"], ["org.apache.tomcat.util.descriptor.web.FilterDef", "org.apache.catalina.core.StandardContext.findFilterDef(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.FilterDef findFilterDef(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.FilterDef[]", "org.apache.catalina.core.StandardContext.findFilterDefs()", "public org.apache.tomcat.util.descriptor.web.FilterDef[] findFilterDefs()"], ["org.apache.tomcat.util.descriptor.web.FilterMap[]", "org.apache.catalina.core.StandardContext.findFilterMaps()", "public org.apache.tomcat.util.descriptor.web.FilterMap[] findFilterMaps()"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findInstanceListeners()", "public java.lang.String[] findInstanceListeners()"], ["org.apache.tomcat.util.descriptor.web.MessageDestination", "org.apache.catalina.core.StandardContext.findMessageDestination(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.MessageDestination findMessageDestination(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.MessageDestination[]", "org.apache.catalina.core.StandardContext.findMessageDestinations()", "public org.apache.tomcat.util.descriptor.web.MessageDestination[] findMessageDestinations()"], ["org.apache.tomcat.util.descriptor.web.MessageDestinationRef", "org.apache.catalina.core.StandardContext.findMessageDestinationRef(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.MessageDestinationRef findMessageDestinationRef(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.MessageDestinationRef[]", "org.apache.catalina.core.StandardContext.findMessageDestinationRefs()", "public org.apache.tomcat.util.descriptor.web.MessageDestinationRef[] findMessageDestinationRefs()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.findMimeMapping(java.lang.String)", "public java.lang.String findMimeMapping(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findMimeMappings()", "public java.lang.String[] findMimeMappings()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.findParameter(java.lang.String)", "public java.lang.String findParameter(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findParameters()", "public java.lang.String[] findParameters()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.findRoleMapping(java.lang.String)", "public java.lang.String findRoleMapping(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.findSecurityRole(java.lang.String)", "public boolean findSecurityRole(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findSecurityRoles()", "public java.lang.String[] findSecurityRoles()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.findServletMapping(java.lang.String)", "public java.lang.String findServletMapping(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findServletMappings()", "public java.lang.String[] findServletMappings()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.findStatusPage(int)", "public java.lang.String findStatusPage(int)"], ["int[]", "org.apache.catalina.core.StandardContext.findStatusPages()", "public int[] findStatusPages()"], ["boolean", "org.apache.catalina.core.StandardContext.findWelcomeFile(java.lang.String)", "public boolean findWelcomeFile(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findWatchedResources()", "public java.lang.String[] findWatchedResources()"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findWelcomeFiles()", "public java.lang.String[] findWelcomeFiles()"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findWrapperLifecycles()", "public java.lang.String[] findWrapperLifecycles()"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.findWrapperListeners()", "public java.lang.String[] findWrapperListeners()"], ["synchronized", "org.apache.catalina.core.StandardContext.void reload()", "public synchronized void reload()"], ["void", "org.apache.catalina.core.StandardContext.removeApplicationListener(java.lang.String)", "public void removeApplicationListener(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeApplicationParameter(java.lang.String)", "public void removeApplicationParameter(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeChild(org.apache.catalina.Container)", "public void removeChild(org.apache.catalina.Container)"], ["void", "org.apache.catalina.core.StandardContext.removeConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)", "public void removeConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)"], ["void", "org.apache.catalina.core.StandardContext.removeErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)", "public void removeErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)"], ["void", "org.apache.catalina.core.StandardContext.removeFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)", "public void removeFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)"], ["void", "org.apache.catalina.core.StandardContext.removeFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void removeFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["void", "org.apache.catalina.core.StandardContext.removeInstanceListener(java.lang.String)", "public void removeInstanceListener(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeMessageDestination(java.lang.String)", "public void removeMessageDestination(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeMessageDestinationRef(java.lang.String)", "public void removeMessageDestinationRef(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeMimeMapping(java.lang.String)", "public void removeMimeMapping(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeParameter(java.lang.String)", "public void removeParameter(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeRoleMapping(java.lang.String)", "public void removeRoleMapping(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeSecurityRole(java.lang.String)", "public void removeSecurityRole(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeServletMapping(java.lang.String)", "public void removeServletMapping(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeWatchedResource(java.lang.String)", "public void removeWatchedResource(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeWelcomeFile(java.lang.String)", "public void removeWelcomeFile(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeWrapperLifecycle(java.lang.String)", "public void removeWrapperLifecycle(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removeWrapperListener(java.lang.String)", "public void removeWrapperListener(java.lang.String)"], ["long", "org.apache.catalina.core.StandardContext.getProcessingTime()", "public long getProcessingTime()"], ["long", "org.apache.catalina.core.StandardContext.getMaxTime()", "public long getMaxTime()"], ["long", "org.apache.catalina.core.StandardContext.getMinTime()", "public long getMinTime()"], ["int", "org.apache.catalina.core.StandardContext.getRequestCount()", "public int getRequestCount()"], ["int", "org.apache.catalina.core.StandardContext.getErrorCount()", "public int getErrorCount()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["javax.servlet.ServletRegistration$Dynamic", "org.apache.catalina.core.StandardContext.dynamicServletAdded(org.apache.catalina.Wrapper)", "public javax.servlet.ServletRegistration$Dynamic dynamicServletAdded(org.apache.catalina.Wrapper)"], ["void", "org.apache.catalina.core.StandardContext.dynamicServletCreated(javax.servlet.Servlet)", "public void dynamicServletCreated(javax.servlet.Servlet)"], ["boolean", "org.apache.catalina.core.StandardContext.filterStart()", "public boolean filterStart()"], ["boolean", "org.apache.catalina.core.StandardContext.filterStop()", "public boolean filterStop()"], ["javax.servlet.FilterConfig", "org.apache.catalina.core.StandardContext.findFilterConfig(java.lang.String)", "public javax.servlet.FilterConfig findFilterConfig(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardContext.listenerStart()", "public boolean listenerStart()"], ["boolean", "org.apache.catalina.core.StandardContext.listenerStop()", "public boolean listenerStop()"], ["void", "org.apache.catalina.core.StandardContext.resourcesStart()", "public void resourcesStart() throws org.apache.catalina.LifecycleException"], ["boolean", "org.apache.catalina.core.StandardContext.resourcesStop()", "public boolean resourcesStop()"], ["boolean", "org.apache.catalina.core.StandardContext.loadOnStartup(org.apache.catalina.Container[])", "public boolean loadOnStartup(org.apache.catalina.Container[])"], ["void", "org.apache.catalina.core.StandardContext.backgroundProcess()", "public void backgroundProcess()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.core.StandardContext.isServlet22()", "public boolean isServlet22()"], ["java.util.Set<java.lang.String>", "org.apache.catalina.core.StandardContext.addServletSecurity(javax.servlet.ServletRegistration$Dynamic, javax.servlet.ServletSecurityElement)", "public java.util.Set<java.lang.String> addServletSecurity(javax.servlet.ServletRegistration$Dynamic, javax.servlet.ServletSecurityElement)"], ["java.lang.ClassLoader", "org.apache.catalina.core.StandardContext.bind(boolean, java.lang.ClassLoader)", "public java.lang.ClassLoader bind(boolean, java.lang.ClassLoader)"], ["void", "org.apache.catalina.core.StandardContext.unbind(boolean, java.lang.ClassLoader)", "public void unbind(boolean, java.lang.ClassLoader)"], ["org.apache.catalina.core.NamingContextListener", "org.apache.catalina.core.StandardContext.getNamingContextListener()", "public org.apache.catalina.core.NamingContextListener getNamingContextListener()"], ["void", "org.apache.catalina.core.StandardContext.setNamingContextListener(org.apache.catalina.core.NamingContextListener)", "public void setNamingContextListener(org.apache.catalina.core.NamingContextListener)"], ["boolean", "org.apache.catalina.core.StandardContext.getPaused()", "public boolean getPaused()"], ["boolean", "org.apache.catalina.core.StandardContext.fireRequestInitEvent(javax.servlet.ServletRequest)", "public boolean fireRequestInitEvent(javax.servlet.ServletRequest)"], ["boolean", "org.apache.catalina.core.StandardContext.fireRequestDestroyEvent(javax.servlet.ServletRequest)", "public boolean fireRequestDestroyEvent(javax.servlet.ServletRequest)"], ["void", "org.apache.catalina.core.StandardContext.addPostConstructMethod(java.lang.String, java.lang.String)", "public void addPostConstructMethod(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removePostConstructMethod(java.lang.String)", "public void removePostConstructMethod(java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.addPreDestroyMethod(java.lang.String, java.lang.String)", "public void addPreDestroyMethod(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardContext.removePreDestroyMethod(java.lang.String)", "public void removePreDestroyMethod(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.findPostConstructMethod(java.lang.String)", "public java.lang.String findPostConstructMethod(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardContext.findPreDestroyMethod(java.lang.String)", "public java.lang.String findPreDestroyMethod(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.core.StandardContext.findPostConstructMethods()", "public java.util.Map<java.lang.String, java.lang.String> findPostConstructMethods()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.core.StandardContext.findPreDestroyMethods()", "public java.util.Map<java.lang.String, java.lang.String> findPreDestroyMethods()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getDeploymentDescriptor()", "public java.lang.String getDeploymentDescriptor()"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.getServlets()", "public java.lang.String[] getServlets()"], ["void", "org.apache.catalina.core.StandardContext.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)", "public void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws javax.management.ListenerNotFoundException"], ["javax.management.MBeanNotificationInfo[]", "org.apache.catalina.core.StandardContext.getNotificationInfo()", "public javax.management.MBeanNotificationInfo[] getNotificationInfo()"], ["void", "org.apache.catalina.core.StandardContext.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)", "public void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws java.lang.IllegalArgumentException"], ["void", "org.apache.catalina.core.StandardContext.removeNotificationListener(javax.management.NotificationListener)", "public void removeNotificationListener(javax.management.NotificationListener) throws javax.management.ListenerNotFoundException"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.getWelcomeFiles()", "public java.lang.String[] getWelcomeFiles()"], ["boolean", "org.apache.catalina.core.StandardContext.getXmlNamespaceAware()", "public boolean getXmlNamespaceAware()"], ["void", "org.apache.catalina.core.StandardContext.setXmlNamespaceAware(boolean)", "public void setXmlNamespaceAware(boolean)"], ["void", "org.apache.catalina.core.StandardContext.setXmlValidation(boolean)", "public void setXmlValidation(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getXmlValidation()", "public boolean getXmlValidation()"], ["void", "org.apache.catalina.core.StandardContext.setXmlBlockExternal(boolean)", "public void setXmlBlockExternal(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getXmlBlockExternal()", "public boolean getXmlBlockExternal()"], ["void", "org.apache.catalina.core.StandardContext.setTldValidation(boolean)", "public void setTldValidation(boolean)"], ["boolean", "org.apache.catalina.core.StandardContext.getTldValidation()", "public boolean getTldValidation()"], ["boolean", "org.apache.catalina.core.StandardContext.isStateManageable()", "public boolean isStateManageable()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.getServer()", "public java.lang.String getServer()"], ["java.lang.String", "org.apache.catalina.core.StandardContext.setServer(java.lang.String)", "public java.lang.String setServer(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.getJavaVMs()", "public java.lang.String[] getJavaVMs()"], ["java.lang.String[]", "org.apache.catalina.core.StandardContext.setJavaVMs(java.lang.String[])", "public java.lang.String[] setJavaVMs(java.lang.String[])"], ["long", "org.apache.catalina.core.StandardContext.getStartTime()", "public long getStartTime()"], ["org.apache.catalina.core.StandardContextValve", "org.apache.catalina.core.StandardContextValve()", "public org.apache.catalina.core.StandardContextValve()"], ["void", "org.apache.catalina.core.StandardContextValve.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["void", "org.apache.catalina.core.StandardContextValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public final void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardContextValve.event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent)", "public final void event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.core.StandardEngine$AccessLogListener", "org.apache.catalina.core.StandardEngine$AccessLogListener(org.apache.catalina.core.StandardEngine, org.apache.catalina.Host, org.apache.catalina.Context)", "public org.apache.catalina.core.StandardEngine$AccessLogListener(org.apache.catalina.core.StandardEngine, org.apache.catalina.Host, org.apache.catalina.Context)"], ["void", "org.apache.catalina.core.StandardEngine$AccessLogListener.install()", "public void install()"], ["void", "org.apache.catalina.core.StandardEngine$AccessLogListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["void", "org.apache.catalina.core.StandardEngine$AccessLogListener.propertyChange(java.beans.PropertyChangeEvent)", "public void propertyChange(java.beans.PropertyChangeEvent)"], ["void", "org.apache.catalina.core.StandardEngine$AccessLogListener.containerEvent(org.apache.catalina.ContainerEvent)", "public void containerEvent(org.apache.catalina.ContainerEvent)"], ["void", "org.apache.catalina.core.StandardEngine$NoopAccessLog.log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.core.StandardEngine$NoopAccessLog.setRequestAttributesEnabled(boolean)", "public void setRequestAttributesEnabled(boolean)"], ["boolean", "org.apache.catalina.core.StandardEngine$NoopAccessLog.getRequestAttributesEnabled()", "public boolean getRequestAttributesEnabled()"], ["org.apache.catalina.core.StandardEngine", "org.apache.catalina.core.StandardEngine()", "public org.apache.catalina.core.StandardEngine()"], ["org.apache.catalina.Realm", "org.apache.catalina.core.StandardEngine.getRealm()", "public org.apache.catalina.Realm getRealm()"], ["java.lang.String", "org.apache.catalina.core.StandardEngine.getDefaultHost()", "public java.lang.String getDefaultHost()"], ["void", "org.apache.catalina.core.StandardEngine.setDefaultHost(java.lang.String)", "public void setDefaultHost(java.lang.String)"], ["void", "org.apache.catalina.core.StandardEngine.setJvmRoute(java.lang.String)", "public void setJvmRoute(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardEngine.getJvmRoute()", "public java.lang.String getJvmRoute()"], ["org.apache.catalina.Service", "org.apache.catalina.core.StandardEngine.getService()", "public org.apache.catalina.Service getService()"], ["void", "org.apache.catalina.core.StandardEngine.setService(org.apache.catalina.Service)", "public void setService(org.apache.catalina.Service)"], ["void", "org.apache.catalina.core.StandardEngine.addChild(org.apache.catalina.Container)", "public void addChild(org.apache.catalina.Container)"], ["void", "org.apache.catalina.core.StandardEngine.setParent(org.apache.catalina.Container)", "public void setParent(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.core.StandardEngine.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.core.StandardEngine.logAccess(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long, boolean)", "public void logAccess(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long, boolean)"], ["java.lang.ClassLoader", "org.apache.catalina.core.StandardEngine.getParentClassLoader()", "public java.lang.ClassLoader getParentClassLoader()"], ["java.io.File", "org.apache.catalina.core.StandardEngine.getCatalinaBase()", "public java.io.File getCatalinaBase()"], ["java.io.File", "org.apache.catalina.core.StandardEngine.getCatalinaHome()", "public java.io.File getCatalinaHome()"], ["org.apache.catalina.core.StandardEngineValve", "org.apache.catalina.core.StandardEngineValve()", "public org.apache.catalina.core.StandardEngineValve()"], ["void", "org.apache.catalina.core.StandardEngineValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public final void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardEngineValve.event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent)", "public final void event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardHost$MemoryLeakTrackingListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.core.StandardHost", "org.apache.catalina.core.StandardHost()", "public org.apache.catalina.core.StandardHost()"], ["boolean", "org.apache.catalina.core.StandardHost.getUndeployOldVersions()", "public boolean getUndeployOldVersions()"], ["void", "org.apache.catalina.core.StandardHost.setUndeployOldVersions(boolean)", "public void setUndeployOldVersions(boolean)"], ["java.util.concurrent.ExecutorService", "org.apache.catalina.core.StandardHost.getStartStopExecutor()", "public java.util.concurrent.ExecutorService getStartStopExecutor()"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getAppBase()", "public java.lang.String getAppBase()"], ["java.io.File", "org.apache.catalina.core.StandardHost.getAppBaseFile()", "public java.io.File getAppBaseFile()"], ["void", "org.apache.catalina.core.StandardHost.setAppBase(java.lang.String)", "public void setAppBase(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getXmlBase()", "public java.lang.String getXmlBase()"], ["void", "org.apache.catalina.core.StandardHost.setXmlBase(java.lang.String)", "public void setXmlBase(java.lang.String)"], ["java.io.File", "org.apache.catalina.core.StandardHost.getConfigBaseFile()", "public java.io.File getConfigBaseFile()"], ["boolean", "org.apache.catalina.core.StandardHost.getCreateDirs()", "public boolean getCreateDirs()"], ["void", "org.apache.catalina.core.StandardHost.setCreateDirs(boolean)", "public void setCreateDirs(boolean)"], ["boolean", "org.apache.catalina.core.StandardHost.getAutoDeploy()", "public boolean getAutoDeploy()"], ["void", "org.apache.catalina.core.StandardHost.setAutoDeploy(boolean)", "public void setAutoDeploy(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getConfigClass()", "public java.lang.String getConfigClass()"], ["void", "org.apache.catalina.core.StandardHost.setConfigClass(java.lang.String)", "public void setConfigClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getContextClass()", "public java.lang.String getContextClass()"], ["void", "org.apache.catalina.core.StandardHost.setContextClass(java.lang.String)", "public void setContextClass(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardHost.getDeployOnStartup()", "public boolean getDeployOnStartup()"], ["void", "org.apache.catalina.core.StandardHost.setDeployOnStartup(boolean)", "public void setDeployOnStartup(boolean)"], ["boolean", "org.apache.catalina.core.StandardHost.isDeployXML()", "public boolean isDeployXML()"], ["void", "org.apache.catalina.core.StandardHost.setDeployXML(boolean)", "public void setDeployXML(boolean)"], ["boolean", "org.apache.catalina.core.StandardHost.isCopyXML()", "public boolean isCopyXML()"], ["void", "org.apache.catalina.core.StandardHost.setCopyXML(boolean)", "public void setCopyXML(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getErrorReportValveClass()", "public java.lang.String getErrorReportValveClass()"], ["void", "org.apache.catalina.core.StandardHost.setErrorReportValveClass(java.lang.String)", "public void setErrorReportValveClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getName()", "public java.lang.String getName()"], ["void", "org.apache.catalina.core.StandardHost.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardHost.isUnpackWARs()", "public boolean isUnpackWARs()"], ["void", "org.apache.catalina.core.StandardHost.setUnpackWARs(boolean)", "public void setUnpackWARs(boolean)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getWorkDir()", "public java.lang.String getWorkDir()"], ["void", "org.apache.catalina.core.StandardHost.setWorkDir(java.lang.String)", "public void setWorkDir(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.getDeployIgnore()", "public java.lang.String getDeployIgnore()"], ["java.util.regex.Pattern", "org.apache.catalina.core.StandardHost.getDeployIgnorePattern()", "public java.util.regex.Pattern getDeployIgnorePattern()"], ["void", "org.apache.catalina.core.StandardHost.setDeployIgnore(java.lang.String)", "public void setDeployIgnore(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardHost.isFailCtxIfServletStartFails()", "public boolean isFailCtxIfServletStartFails()"], ["void", "org.apache.catalina.core.StandardHost.setFailCtxIfServletStartFails(boolean)", "public void setFailCtxIfServletStartFails(boolean)"], ["void", "org.apache.catalina.core.StandardHost.addAlias(java.lang.String)", "public void addAlias(java.lang.String)"], ["void", "org.apache.catalina.core.StandardHost.addChild(org.apache.catalina.Container)", "public void addChild(org.apache.catalina.Container)"], ["java.lang.String[]", "org.apache.catalina.core.StandardHost.findReloadedContextMemoryLeaks()", "public java.lang.String[] findReloadedContextMemoryLeaks()"], ["java.lang.String[]", "org.apache.catalina.core.StandardHost.findAliases()", "public java.lang.String[] findAliases()"], ["void", "org.apache.catalina.core.StandardHost.removeAlias(java.lang.String)", "public void removeAlias(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardHost.toString()", "public java.lang.String toString()"], ["java.lang.String[]", "org.apache.catalina.core.StandardHost.getValveNames()", "public java.lang.String[] getValveNames() throws java.lang.Exception"], ["java.lang.String[]", "org.apache.catalina.core.StandardHost.getAliases()", "public java.lang.String[] getAliases()"], ["org.apache.catalina.core.StandardHostValve", "org.apache.catalina.core.StandardHostValve()", "public org.apache.catalina.core.StandardHostValve()"], ["void", "org.apache.catalina.core.StandardHostValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public final void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardHostValve.event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent)", "public final void event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.core.StandardPipeline", "org.apache.catalina.core.StandardPipeline()", "public org.apache.catalina.core.StandardPipeline()"], ["org.apache.catalina.core.StandardPipeline", "org.apache.catalina.core.StandardPipeline(org.apache.catalina.Container)", "public org.apache.catalina.core.StandardPipeline(org.apache.catalina.Container)"], ["boolean", "org.apache.catalina.core.StandardPipeline.isAsyncSupported()", "public boolean isAsyncSupported()"], ["org.apache.catalina.Container", "org.apache.catalina.core.StandardPipeline.getContainer()", "public org.apache.catalina.Container getContainer()"], ["void", "org.apache.catalina.core.StandardPipeline.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.core.StandardPipeline.toString()", "public java.lang.String toString()"], ["org.apache.catalina.Valve", "org.apache.catalina.core.StandardPipeline.getBasic()", "public org.apache.catalina.Valve getBasic()"], ["void", "org.apache.catalina.core.StandardPipeline.setBasic(org.apache.catalina.Valve)", "public void setBasic(org.apache.catalina.Valve)"], ["void", "org.apache.catalina.core.StandardPipeline.addValve(org.apache.catalina.Valve)", "public void addValve(org.apache.catalina.Valve)"], ["org.apache.catalina.Valve[]", "org.apache.catalina.core.StandardPipeline.getValves()", "public org.apache.catalina.Valve[] getValves()"], ["javax.management.ObjectName[]", "org.apache.catalina.core.StandardPipeline.getValveObjectNames()", "public javax.management.ObjectName[] getValveObjectNames()"], ["void", "org.apache.catalina.core.StandardPipeline.removeValve(org.apache.catalina.Valve)", "public void removeValve(org.apache.catalina.Valve)"], ["org.apache.catalina.Valve", "org.apache.catalina.core.StandardPipeline.getFirst()", "public org.apache.catalina.Valve getFirst()"], ["org.apache.catalina.core.StandardServer", "org.apache.catalina.core.StandardServer()", "public org.apache.catalina.core.StandardServer()"], ["java.lang.Object", "org.apache.catalina.core.StandardServer.getNamingToken()", "public java.lang.Object getNamingToken()"], ["javax.naming.Context", "org.apache.catalina.core.StandardServer.getGlobalNamingContext()", "public javax.naming.Context getGlobalNamingContext()"], ["void", "org.apache.catalina.core.StandardServer.setGlobalNamingContext(javax.naming.Context)", "public void setGlobalNamingContext(javax.naming.Context)"], ["org.apache.catalina.deploy.NamingResourcesImpl", "org.apache.catalina.core.StandardServer.getGlobalNamingResources()", "public org.apache.catalina.deploy.NamingResourcesImpl getGlobalNamingResources()"], ["void", "org.apache.catalina.core.StandardServer.setGlobalNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)", "public void setGlobalNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)"], ["java.lang.String", "org.apache.catalina.core.StandardServer.getServerInfo()", "public java.lang.String getServerInfo()"], ["int", "org.apache.catalina.core.StandardServer.getPort()", "public int getPort()"], ["void", "org.apache.catalina.core.StandardServer.setPort(int)", "public void setPort(int)"], ["java.lang.String", "org.apache.catalina.core.StandardServer.getAddress()", "public java.lang.String getAddress()"], ["void", "org.apache.catalina.core.StandardServer.setAddress(java.lang.String)", "public void setAddress(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardServer.getShutdown()", "public java.lang.String getShutdown()"], ["void", "org.apache.catalina.core.StandardServer.setShutdown(java.lang.String)", "public void setShutdown(java.lang.String)"], ["org.apache.catalina.startup.Catalina", "org.apache.catalina.core.StandardServer.getCatalina()", "public org.apache.catalina.startup.Catalina getCatalina()"], ["void", "org.apache.catalina.core.StandardServer.setCatalina(org.apache.catalina.startup.Catalina)", "public void setCatalina(org.apache.catalina.startup.Catalina)"], ["void", "org.apache.catalina.core.StandardServer.addService(org.apache.catalina.Service)", "public void addService(org.apache.catalina.Service)"], ["void", "org.apache.catalina.core.StandardServer.stopAwait()", "public void stopAwait()"], ["void", "org.apache.catalina.core.StandardServer.await()", "public void await()"], ["org.apache.catalina.Service", "org.apache.catalina.core.StandardServer.findService(java.lang.String)", "public org.apache.catalina.Service findService(java.lang.String)"], ["org.apache.catalina.Service[]", "org.apache.catalina.core.StandardServer.findServices()", "public org.apache.catalina.Service[] findServices()"], ["javax.management.ObjectName[]", "org.apache.catalina.core.StandardServer.getServiceNames()", "public javax.management.ObjectName[] getServiceNames()"], ["void", "org.apache.catalina.core.StandardServer.removeService(org.apache.catalina.Service)", "public void removeService(org.apache.catalina.Service)"], ["java.io.File", "org.apache.catalina.core.StandardServer.getCatalinaBase()", "public java.io.File getCatalinaBase()"], ["void", "org.apache.catalina.core.StandardServer.setCatalinaBase(java.io.File)", "public void setCatalinaBase(java.io.File)"], ["java.io.File", "org.apache.catalina.core.StandardServer.getCatalinaHome()", "public java.io.File getCatalinaHome()"], ["void", "org.apache.catalina.core.StandardServer.setCatalinaHome(java.io.File)", "public void setCatalinaHome(java.io.File)"], ["void", "org.apache.catalina.core.StandardServer.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.core.StandardServer.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["java.lang.String", "org.apache.catalina.core.StandardServer.toString()", "public java.lang.String toString()"], ["synchronized", "org.apache.catalina.core.StandardServer.void storeConfig()", "public synchronized void storeConfig() throws java.lang.Exception"], ["synchronized", "org.apache.catalina.core.StandardServer.void storeContext(org.apache.catalina.Context)", "public synchronized void storeContext(org.apache.catalina.Context) throws java.lang.Exception"], ["java.lang.ClassLoader", "org.apache.catalina.core.StandardServer.getParentClassLoader()", "public java.lang.ClassLoader getParentClassLoader()"], ["void", "org.apache.catalina.core.StandardServer.setParentClassLoader(java.lang.ClassLoader)", "public void setParentClassLoader(java.lang.ClassLoader)"], ["org.apache.catalina.core.StandardService", "org.apache.catalina.core.StandardService()", "public org.apache.catalina.core.StandardService()"], ["org.apache.catalina.mapper.Mapper", "org.apache.catalina.core.StandardService.getMapper()", "public org.apache.catalina.mapper.Mapper getMapper()"], ["org.apache.catalina.Container", "org.apache.catalina.core.StandardService.getContainer()", "public org.apache.catalina.Container getContainer()"], ["void", "org.apache.catalina.core.StandardService.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.core.StandardService.getName()", "public java.lang.String getName()"], ["void", "org.apache.catalina.core.StandardService.setName(java.lang.String)", "public void setName(java.lang.String)"], ["org.apache.catalina.Server", "org.apache.catalina.core.StandardService.getServer()", "public org.apache.catalina.Server getServer()"], ["void", "org.apache.catalina.core.StandardService.setServer(org.apache.catalina.Server)", "public void setServer(org.apache.catalina.Server)"], ["void", "org.apache.catalina.core.StandardService.addConnector(org.apache.catalina.connector.Connector)", "public void addConnector(org.apache.catalina.connector.Connector)"], ["javax.management.ObjectName[]", "org.apache.catalina.core.StandardService.getConnectorNames()", "public javax.management.ObjectName[] getConnectorNames()"], ["void", "org.apache.catalina.core.StandardService.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["org.apache.catalina.connector.Connector[]", "org.apache.catalina.core.StandardService.findConnectors()", "public org.apache.catalina.connector.Connector[] findConnectors()"], ["void", "org.apache.catalina.core.StandardService.removeConnector(org.apache.catalina.connector.Connector)", "public void removeConnector(org.apache.catalina.connector.Connector)"], ["void", "org.apache.catalina.core.StandardService.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["java.lang.String", "org.apache.catalina.core.StandardService.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.core.StandardService.addExecutor(org.apache.catalina.Executor)", "public void addExecutor(org.apache.catalina.Executor)"], ["org.apache.catalina.Executor[]", "org.apache.catalina.core.StandardService.findExecutors()", "public org.apache.catalina.Executor[] findExecutors()"], ["org.apache.catalina.Executor", "org.apache.catalina.core.StandardService.getExecutor(java.lang.String)", "public org.apache.catalina.Executor getExecutor(java.lang.String)"], ["void", "org.apache.catalina.core.StandardService.removeExecutor(org.apache.catalina.Executor)", "public void removeExecutor(org.apache.catalina.Executor)"], ["java.lang.ClassLoader", "org.apache.catalina.core.StandardService.getParentClassLoader()", "public java.lang.ClassLoader getParentClassLoader()"], ["void", "org.apache.catalina.core.StandardService.setParentClassLoader(java.lang.ClassLoader)", "public void setParentClassLoader(java.lang.ClassLoader)"], ["java.lang.String", "org.apache.catalina.core.StandardService.getObjectNameKeyProperties()", "public final java.lang.String getObjectNameKeyProperties()"], ["org.apache.catalina.core.StandardThreadExecutor", "org.apache.catalina.core.StandardThreadExecutor()", "public org.apache.catalina.core.StandardThreadExecutor()"], ["void", "org.apache.catalina.core.StandardThreadExecutor.execute(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public void execute(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.contextStopping()", "public void contextStopping()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getThreadPriority()", "public int getThreadPriority()"], ["boolean", "org.apache.catalina.core.StandardThreadExecutor.isDaemon()", "public boolean isDaemon()"], ["java.lang.String", "org.apache.catalina.core.StandardThreadExecutor.getNamePrefix()", "public java.lang.String getNamePrefix()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getMaxIdleTime()", "public int getMaxIdleTime()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getMaxThreads()", "public int getMaxThreads()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getMinSpareThreads()", "public int getMinSpareThreads()"], ["java.lang.String", "org.apache.catalina.core.StandardThreadExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.catalina.core.StandardThreadExecutor.isPrestartminSpareThreads()", "public boolean isPrestartminSpareThreads()"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setThreadPriority(int)", "public void setThreadPriority(int)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setDaemon(boolean)", "public void setDaemon(boolean)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setNamePrefix(java.lang.String)", "public void setNamePrefix(java.lang.String)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setMaxIdleTime(int)", "public void setMaxIdleTime(int)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setMaxThreads(int)", "public void setMaxThreads(int)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setMinSpareThreads(int)", "public void setMinSpareThreads(int)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setPrestartminSpareThreads(boolean)", "public void setPrestartminSpareThreads(boolean)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setMaxQueueSize(int)", "public void setMaxQueueSize(int)"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getMaxQueueSize()", "public int getMaxQueueSize()"], ["long", "org.apache.catalina.core.StandardThreadExecutor.getThreadRenewalDelay()", "public long getThreadRenewalDelay()"], ["void", "org.apache.catalina.core.StandardThreadExecutor.setThreadRenewalDelay(long)", "public void setThreadRenewalDelay(long)"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getActiveCount()", "public int getActiveCount()"], ["long", "org.apache.catalina.core.StandardThreadExecutor.getCompletedTaskCount()", "public long getCompletedTaskCount()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getCorePoolSize()", "public int getCorePoolSize()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getLargestPoolSize()", "public int getLargestPoolSize()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getPoolSize()", "public int getPoolSize()"], ["int", "org.apache.catalina.core.StandardThreadExecutor.getQueueSize()", "public int getQueueSize()"], ["boolean", "org.apache.catalina.core.StandardThreadExecutor.resizePool(int, int)", "public boolean resizePool(int, int)"], ["boolean", "org.apache.catalina.core.StandardThreadExecutor.resizeQueue(int)", "public boolean resizeQueue(int)"], ["org.apache.catalina.core.StandardWrapper", "org.apache.catalina.core.StandardWrapper()", "public org.apache.catalina.core.StandardWrapper()"], ["boolean", "org.apache.catalina.core.StandardWrapper.isOverridable()", "public boolean isOverridable()"], ["void", "org.apache.catalina.core.StandardWrapper.setOverridable(boolean)", "public void setOverridable(boolean)"], ["long", "org.apache.catalina.core.StandardWrapper.getAvailable()", "public long getAvailable()"], ["void", "org.apache.catalina.core.StandardWrapper.setAvailable(long)", "public void setAvailable(long)"], ["int", "org.apache.catalina.core.StandardWrapper.getCountAllocated()", "public int getCountAllocated()"], ["org.apache.catalina.util.InstanceSupport", "org.apache.catalina.core.StandardWrapper.getInstanceSupport()", "public org.apache.catalina.util.InstanceSupport getInstanceSupport()"], ["int", "org.apache.catalina.core.StandardWrapper.getLoadOnStartup()", "public int getLoadOnStartup()"], ["void", "org.apache.catalina.core.StandardWrapper.setLoadOnStartup(int)", "public void setLoadOnStartup(int)"], ["void", "org.apache.catalina.core.StandardWrapper.setLoadOnStartupString(java.lang.String)", "public void setLoadOnStartupString(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.getLoadOnStartupString()", "public java.lang.String getLoadOnStartupString()"], ["int", "org.apache.catalina.core.StandardWrapper.getMaxInstances()", "public int getMaxInstances()"], ["void", "org.apache.catalina.core.StandardWrapper.setMaxInstances(int)", "public void setMaxInstances(int)"], ["void", "org.apache.catalina.core.StandardWrapper.setParent(org.apache.catalina.Container)", "public void setParent(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.getRunAs()", "public java.lang.String getRunAs()"], ["void", "org.apache.catalina.core.StandardWrapper.setRunAs(java.lang.String)", "public void setRunAs(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.getServletClass()", "public java.lang.String getServletClass()"], ["void", "org.apache.catalina.core.StandardWrapper.setServletClass(java.lang.String)", "public void setServletClass(java.lang.String)"], ["void", "org.apache.catalina.core.StandardWrapper.setServletName(java.lang.String)", "public void setServletName(java.lang.String)"], ["boolean", "org.apache.catalina.core.StandardWrapper.isSingleThreadModel()", "public boolean isSingleThreadModel()"], ["boolean", "org.apache.catalina.core.StandardWrapper.isUnavailable()", "public boolean isUnavailable()"], ["java.lang.String[]", "org.apache.catalina.core.StandardWrapper.getServletMethods()", "public java.lang.String[] getServletMethods() throws javax.servlet.ServletException"], ["javax.servlet.Servlet", "org.apache.catalina.core.StandardWrapper.getServlet()", "public javax.servlet.Servlet getServlet()"], ["void", "org.apache.catalina.core.StandardWrapper.setServlet(javax.servlet.Servlet)", "public void setServlet(javax.servlet.Servlet)"], ["void", "org.apache.catalina.core.StandardWrapper.setServletSecurityAnnotationScanRequired(boolean)", "public void setServletSecurityAnnotationScanRequired(boolean)"], ["void", "org.apache.catalina.core.StandardWrapper.backgroundProcess()", "public void backgroundProcess()"], ["java.lang.Throwable", "org.apache.catalina.core.StandardWrapper.getRootCause(javax.servlet.ServletException)", "public static java.lang.Throwable getRootCause(javax.servlet.ServletException)"], ["void", "org.apache.catalina.core.StandardWrapper.addChild(org.apache.catalina.Container)", "public void addChild(org.apache.catalina.Container)"], ["void", "org.apache.catalina.core.StandardWrapper.addInitParameter(java.lang.String, java.lang.String)", "public void addInitParameter(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.core.StandardWrapper.addInstanceListener(org.apache.catalina.InstanceListener)", "public void addInstanceListener(org.apache.catalina.InstanceListener)"], ["void", "org.apache.catalina.core.StandardWrapper.addMapping(java.lang.String)", "public void addMapping(java.lang.String)"], ["void", "org.apache.catalina.core.StandardWrapper.addSecurityReference(java.lang.String, java.lang.String)", "public void addSecurityReference(java.lang.String, java.lang.String)"], ["javax.servlet.Servlet", "org.apache.catalina.core.StandardWrapper.allocate()", "public javax.servlet.Servlet allocate() throws javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardWrapper.deallocate(javax.servlet.Servlet)", "public void deallocate(javax.servlet.Servlet) throws javax.servlet.ServletException"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.findInitParameter(java.lang.String)", "public java.lang.String findInitParameter(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardWrapper.findInitParameters()", "public java.lang.String[] findInitParameters()"], ["java.lang.String[]", "org.apache.catalina.core.StandardWrapper.findMappings()", "public java.lang.String[] findMappings()"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.findSecurityReference(java.lang.String)", "public java.lang.String findSecurityReference(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.core.StandardWrapper.findSecurityReferences()", "public java.lang.String[] findSecurityReferences()"], ["synchronized", "org.apache.catalina.core.StandardWrapper.void load()", "public synchronized void load() throws javax.servlet.ServletException"], ["synchronized", "org.apache.catalina.core.StandardWrapper.javax.servlet.Servlet loadServlet()", "public synchronized javax.servlet.Servlet loadServlet() throws javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardWrapper.servletSecurityAnnotationScan()", "public void servletSecurityAnnotationScan() throws javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardWrapper.removeInitParameter(java.lang.String)", "public void removeInitParameter(java.lang.String)"], ["void", "org.apache.catalina.core.StandardWrapper.removeInstanceListener(org.apache.catalina.InstanceListener)", "public void removeInstanceListener(org.apache.catalina.InstanceListener)"], ["void", "org.apache.catalina.core.StandardWrapper.removeMapping(java.lang.String)", "public void removeMapping(java.lang.String)"], ["void", "org.apache.catalina.core.StandardWrapper.removeSecurityReference(java.lang.String)", "public void removeSecurityReference(java.lang.String)"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.core.StandardWrapper.unavailable(javax.servlet.UnavailableException)", "public void unavailable(javax.servlet.UnavailableException)"], ["synchronized", "org.apache.catalina.core.StandardWrapper.void unload()", "public synchronized void unload() throws javax.servlet.ServletException"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.StandardWrapper.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["javax.servlet.ServletContext", "org.apache.catalina.core.StandardWrapper.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.apache.catalina.core.StandardWrapper.getServletName()", "public java.lang.String getServletName()"], ["long", "org.apache.catalina.core.StandardWrapper.getProcessingTime()", "public long getProcessingTime()"], ["long", "org.apache.catalina.core.StandardWrapper.getMaxTime()", "public long getMaxTime()"], ["long", "org.apache.catalina.core.StandardWrapper.getMinTime()", "public long getMinTime()"], ["int", "org.apache.catalina.core.StandardWrapper.getRequestCount()", "public int getRequestCount()"], ["int", "org.apache.catalina.core.StandardWrapper.getErrorCount()", "public int getErrorCount()"], ["void", "org.apache.catalina.core.StandardWrapper.incrementErrorCount()", "public void incrementErrorCount()"], ["long", "org.apache.catalina.core.StandardWrapper.getLoadTime()", "public long getLoadTime()"], ["int", "org.apache.catalina.core.StandardWrapper.getClassLoadTime()", "public int getClassLoadTime()"], ["javax.servlet.MultipartConfigElement", "org.apache.catalina.core.StandardWrapper.getMultipartConfigElement()", "public javax.servlet.MultipartConfigElement getMultipartConfigElement()"], ["void", "org.apache.catalina.core.StandardWrapper.setMultipartConfigElement(javax.servlet.MultipartConfigElement)", "public void setMultipartConfigElement(javax.servlet.MultipartConfigElement)"], ["boolean", "org.apache.catalina.core.StandardWrapper.isAsyncSupported()", "public boolean isAsyncSupported()"], ["void", "org.apache.catalina.core.StandardWrapper.setAsyncSupported(boolean)", "public void setAsyncSupported(boolean)"], ["boolean", "org.apache.catalina.core.StandardWrapper.isEnabled()", "public boolean isEnabled()"], ["void", "org.apache.catalina.core.StandardWrapper.setEnabled(boolean)", "public void setEnabled(boolean)"], ["boolean", "org.apache.catalina.core.StandardWrapper.isStateManageable()", "public boolean isStateManageable()"], ["void", "org.apache.catalina.core.StandardWrapper.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)", "public void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws javax.management.ListenerNotFoundException"], ["javax.management.MBeanNotificationInfo[]", "org.apache.catalina.core.StandardWrapper.getNotificationInfo()", "public javax.management.MBeanNotificationInfo[] getNotificationInfo()"], ["void", "org.apache.catalina.core.StandardWrapper.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)", "public void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws java.lang.IllegalArgumentException"], ["void", "org.apache.catalina.core.StandardWrapper.removeNotificationListener(javax.management.NotificationListener)", "public void removeNotificationListener(javax.management.NotificationListener) throws javax.management.ListenerNotFoundException"], ["org.apache.catalina.core.StandardWrapperFacade", "org.apache.catalina.core.StandardWrapperFacade(org.apache.catalina.core.StandardWrapper)", "public org.apache.catalina.core.StandardWrapperFacade(org.apache.catalina.core.StandardWrapper)"], ["java.lang.String", "org.apache.catalina.core.StandardWrapperFacade.getServletName()", "public java.lang.String getServletName()"], ["javax.servlet.ServletContext", "org.apache.catalina.core.StandardWrapperFacade.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.apache.catalina.core.StandardWrapperFacade.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.core.StandardWrapperFacade.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["org.apache.catalina.core.StandardWrapperValve", "org.apache.catalina.core.StandardWrapperValve()", "public org.apache.catalina.core.StandardWrapperValve()"], ["void", "org.apache.catalina.core.StandardWrapperValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public final void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.core.StandardWrapperValve.event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent)", "public void event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException"], ["long", "org.apache.catalina.core.StandardWrapperValve.getProcessingTime()", "public long getProcessingTime()"], ["long", "org.apache.catalina.core.StandardWrapperValve.getMaxTime()", "public long getMaxTime()"], ["long", "org.apache.catalina.core.StandardWrapperValve.getMinTime()", "public long getMinTime()"], ["int", "org.apache.catalina.core.StandardWrapperValve.getRequestCount()", "public int getRequestCount()"], ["int", "org.apache.catalina.core.StandardWrapperValve.getErrorCount()", "public int getErrorCount()"], ["void", "org.apache.catalina.core.StandardWrapperValve.incrementErrorCount()", "public void incrementErrorCount()"], ["org.apache.catalina.core.ThreadLocalLeakPreventionListener", "org.apache.catalina.core.ThreadLocalLeakPreventionListener()", "public org.apache.catalina.core.ThreadLocalLeakPreventionListener()"], ["void", "org.apache.catalina.core.ThreadLocalLeakPreventionListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["void", "org.apache.catalina.core.ThreadLocalLeakPreventionListener.containerEvent(org.apache.catalina.ContainerEvent)", "public void containerEvent(org.apache.catalina.ContainerEvent)"], ["org.apache.catalina.deploy.Constants", "org.apache.catalina.deploy.Constants()", "public org.apache.catalina.deploy.Constants()"], ["org.apache.catalina.deploy.NamingResourcesImpl", "org.apache.catalina.deploy.NamingResourcesImpl()", "public org.apache.catalina.deploy.NamingResourcesImpl()"], ["java.lang.Object", "org.apache.catalina.deploy.NamingResourcesImpl.getContainer()", "public java.lang.Object getContainer()"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.setContainer(java.lang.Object)", "public void setContainer(java.lang.Object)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.setTransaction(org.apache.tomcat.util.descriptor.web.ContextTransaction)", "public void setTransaction(org.apache.tomcat.util.descriptor.web.ContextTransaction)"], ["org.apache.tomcat.util.descriptor.web.ContextTransaction", "org.apache.catalina.deploy.NamingResourcesImpl.getTransaction()", "public org.apache.tomcat.util.descriptor.web.ContextTransaction getTransaction()"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)", "public void addEjb(org.apache.tomcat.util.descriptor.web.ContextEjb)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)", "public void addEnvironment(org.apache.tomcat.util.descriptor.web.ContextEnvironment)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addLocalEjb(org.apache.tomcat.util.descriptor.web.ContextLocalEjb)", "public void addLocalEjb(org.apache.tomcat.util.descriptor.web.ContextLocalEjb)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)", "public void addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addResource(org.apache.tomcat.util.descriptor.web.ContextResource)", "public void addResource(org.apache.tomcat.util.descriptor.web.ContextResource)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)", "public void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)", "public void addResourceLink(org.apache.tomcat.util.descriptor.web.ContextResourceLink)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.addService(org.apache.tomcat.util.descriptor.web.ContextService)", "public void addService(org.apache.tomcat.util.descriptor.web.ContextService)"], ["org.apache.tomcat.util.descriptor.web.ContextEjb", "org.apache.catalina.deploy.NamingResourcesImpl.findEjb(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextEjb findEjb(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ContextEjb[]", "org.apache.catalina.deploy.NamingResourcesImpl.findEjbs()", "public org.apache.tomcat.util.descriptor.web.ContextEjb[] findEjbs()"], ["org.apache.tomcat.util.descriptor.web.ContextEnvironment", "org.apache.catalina.deploy.NamingResourcesImpl.findEnvironment(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextEnvironment findEnvironment(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ContextEnvironment[]", "org.apache.catalina.deploy.NamingResourcesImpl.findEnvironments()", "public org.apache.tomcat.util.descriptor.web.ContextEnvironment[] findEnvironments()"], ["org.apache.tomcat.util.descriptor.web.ContextLocalEjb", "org.apache.catalina.deploy.NamingResourcesImpl.findLocalEjb(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextLocalEjb findLocalEjb(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ContextLocalEjb[]", "org.apache.catalina.deploy.NamingResourcesImpl.findLocalEjbs()", "public org.apache.tomcat.util.descriptor.web.ContextLocalEjb[] findLocalEjbs()"], ["org.apache.tomcat.util.descriptor.web.MessageDestinationRef", "org.apache.catalina.deploy.NamingResourcesImpl.findMessageDestinationRef(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.MessageDestinationRef findMessageDestinationRef(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.MessageDestinationRef[]", "org.apache.catalina.deploy.NamingResourcesImpl.findMessageDestinationRefs()", "public org.apache.tomcat.util.descriptor.web.MessageDestinationRef[] findMessageDestinationRefs()"], ["org.apache.tomcat.util.descriptor.web.ContextResource", "org.apache.catalina.deploy.NamingResourcesImpl.findResource(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextResource findResource(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ContextResourceLink", "org.apache.catalina.deploy.NamingResourcesImpl.findResourceLink(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextResourceLink findResourceLink(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ContextResourceLink[]", "org.apache.catalina.deploy.NamingResourcesImpl.findResourceLinks()", "public org.apache.tomcat.util.descriptor.web.ContextResourceLink[] findResourceLinks()"], ["org.apache.tomcat.util.descriptor.web.ContextResource[]", "org.apache.catalina.deploy.NamingResourcesImpl.findResources()", "public org.apache.tomcat.util.descriptor.web.ContextResource[] findResources()"], ["org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef", "org.apache.catalina.deploy.NamingResourcesImpl.findResourceEnvRef(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef findResourceEnvRef(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef[]", "org.apache.catalina.deploy.NamingResourcesImpl.findResourceEnvRefs()", "public org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef[] findResourceEnvRefs()"], ["org.apache.tomcat.util.descriptor.web.ContextService", "org.apache.catalina.deploy.NamingResourcesImpl.findService(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextService findService(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ContextService[]", "org.apache.catalina.deploy.NamingResourcesImpl.findServices()", "public org.apache.tomcat.util.descriptor.web.ContextService[] findServices()"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeEjb(java.lang.String)", "public void removeEjb(java.lang.String)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeEnvironment(java.lang.String)", "public void removeEnvironment(java.lang.String)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeLocalEjb(java.lang.String)", "public void removeLocalEjb(java.lang.String)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeMessageDestinationRef(java.lang.String)", "public void removeMessageDestinationRef(java.lang.String)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeResource(java.lang.String)", "public void removeResource(java.lang.String)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeResourceEnvRef(java.lang.String)", "public void removeResourceEnvRef(java.lang.String)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeResourceLink(java.lang.String)", "public void removeResourceLink(java.lang.String)"], ["void", "org.apache.catalina.deploy.NamingResourcesImpl.removeService(java.lang.String)", "public void removeService(java.lang.String)"], ["org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper", "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper(javax.servlet.http.HttpServletResponse, java.lang.String)", "public org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper(javax.servlet.http.HttpServletResponse, java.lang.String)"], ["void", "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.apache.catalina.filters.AddDefaultCharsetFilter$ResponseWrapper.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["org.apache.catalina.filters.AddDefaultCharsetFilter", "org.apache.catalina.filters.AddDefaultCharsetFilter()", "public org.apache.catalina.filters.AddDefaultCharsetFilter()"], ["void", "org.apache.catalina.filters.AddDefaultCharsetFilter.setEncoding(java.lang.String)", "public void setEncoding(java.lang.String)"], ["void", "org.apache.catalina.filters.AddDefaultCharsetFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.AddDefaultCharsetFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.filters.Constants", "org.apache.catalina.filters.Constants()", "public org.apache.catalina.filters.Constants()"], ["org.apache.catalina.filters.CorsFilter$CORSRequestType[]", "org.apache.catalina.filters.CorsFilter$CORSRequestType.values()", "public static org.apache.catalina.filters.CorsFilter$CORSRequestType[] values()"], ["org.apache.catalina.filters.CorsFilter$CORSRequestType", "org.apache.catalina.filters.CorsFilter$CORSRequestType.valueOf(java.lang.String)", "public static org.apache.catalina.filters.CorsFilter$CORSRequestType valueOf(java.lang.String)"], ["org.apache.catalina.filters.CorsFilter", "org.apache.catalina.filters.CorsFilter()", "public org.apache.catalina.filters.CorsFilter()"], ["void", "org.apache.catalina.filters.CorsFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.CorsFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.CorsFilter.destroy()", "public void destroy()"], ["boolean", "org.apache.catalina.filters.CorsFilter.isAnyOriginAllowed()", "public boolean isAnyOriginAllowed()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.filters.CorsFilter.getExposedHeaders()", "public java.util.Collection<java.lang.String> getExposedHeaders()"], ["boolean", "org.apache.catalina.filters.CorsFilter.isSupportsCredentials()", "public boolean isSupportsCredentials()"], ["long", "org.apache.catalina.filters.CorsFilter.getPreflightMaxAge()", "public long getPreflightMaxAge()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.filters.CorsFilter.getAllowedOrigins()", "public java.util.Collection<java.lang.String> getAllowedOrigins()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.filters.CorsFilter.getAllowedHttpMethods()", "public java.util.Collection<java.lang.String> getAllowedHttpMethods()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.filters.CorsFilter.getAllowedHttpHeaders()", "public java.util.Collection<java.lang.String> getAllowedHttpHeaders()"], ["org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper", "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper(javax.servlet.http.HttpServletResponse, java.lang.String)", "public org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper(javax.servlet.http.HttpServletResponse, java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.CsrfPreventionFilter$CsrfResponseWrapper.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["org.apache.catalina.filters.CsrfPreventionFilter$LruCache", "org.apache.catalina.filters.CsrfPreventionFilter$LruCache(int)", "public org.apache.catalina.filters.CsrfPreventionFilter$LruCache(int)"], ["void", "org.apache.catalina.filters.CsrfPreventionFilter$LruCache.add(T)", "public void add(T)"], ["boolean", "org.apache.catalina.filters.CsrfPreventionFilter$LruCache.contains(T)", "public boolean contains(T)"], ["org.apache.catalina.filters.CsrfPreventionFilter", "org.apache.catalina.filters.CsrfPreventionFilter()", "public org.apache.catalina.filters.CsrfPreventionFilter()"], ["int", "org.apache.catalina.filters.CsrfPreventionFilter.getDenyStatus()", "public int getDenyStatus()"], ["void", "org.apache.catalina.filters.CsrfPreventionFilter.setDenyStatus(int)", "public void setDenyStatus(int)"], ["void", "org.apache.catalina.filters.CsrfPreventionFilter.setEntryPoints(java.lang.String)", "public void setEntryPoints(java.lang.String)"], ["void", "org.apache.catalina.filters.CsrfPreventionFilter.setNonceCacheSize(int)", "public void setNonceCacheSize(int)"], ["void", "org.apache.catalina.filters.CsrfPreventionFilter.setRandomClass(java.lang.String)", "public void setRandomClass(java.lang.String)"], ["void", "org.apache.catalina.filters.CsrfPreventionFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.CsrfPreventionFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.filters.ExpiresFilter$Duration", "org.apache.catalina.filters.ExpiresFilter$Duration(int, org.apache.catalina.filters.ExpiresFilter$DurationUnit)", "public org.apache.catalina.filters.ExpiresFilter$Duration(int, org.apache.catalina.filters.ExpiresFilter$DurationUnit)"], ["int", "org.apache.catalina.filters.ExpiresFilter$Duration.getAmount()", "public int getAmount()"], ["org.apache.catalina.filters.ExpiresFilter$DurationUnit", "org.apache.catalina.filters.ExpiresFilter$Duration.getUnit()", "public org.apache.catalina.filters.ExpiresFilter$DurationUnit getUnit()"], ["java.lang.String", "org.apache.catalina.filters.ExpiresFilter$Duration.toString()", "public java.lang.String toString()"], ["org.apache.catalina.filters.ExpiresFilter$DurationUnit[]", "org.apache.catalina.filters.ExpiresFilter$DurationUnit.values()", "public static org.apache.catalina.filters.ExpiresFilter$DurationUnit[] values()"], ["org.apache.catalina.filters.ExpiresFilter$DurationUnit", "org.apache.catalina.filters.ExpiresFilter$DurationUnit.valueOf(java.lang.String)", "public static org.apache.catalina.filters.ExpiresFilter$DurationUnit valueOf(java.lang.String)"], ["int", "org.apache.catalina.filters.ExpiresFilter$DurationUnit.getCalendardField()", "public int getCalendardField()"], ["org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration", "org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration(org.apache.catalina.filters.ExpiresFilter$StartingPoint, java.util.List<org.apache.catalina.filters.ExpiresFilter$Duration>)", "public org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration(org.apache.catalina.filters.ExpiresFilter$StartingPoint, java.util.List<org.apache.catalina.filters.ExpiresFilter$Duration>)"], ["java.util.List<org.apache.catalina.filters.ExpiresFilter$Duration>", "org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration.getDurations()", "public java.util.List<org.apache.catalina.filters.ExpiresFilter$Duration> getDurations()"], ["org.apache.catalina.filters.ExpiresFilter$StartingPoint", "org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration.getStartingPoint()", "public org.apache.catalina.filters.ExpiresFilter$StartingPoint getStartingPoint()"], ["java.lang.String", "org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration.toString()", "public java.lang.String toString()"], ["org.apache.catalina.filters.ExpiresFilter$StartingPoint[]", "org.apache.catalina.filters.ExpiresFilter$StartingPoint.values()", "public static org.apache.catalina.filters.ExpiresFilter$StartingPoint[] values()"], ["org.apache.catalina.filters.ExpiresFilter$StartingPoint", "org.apache.catalina.filters.ExpiresFilter$StartingPoint.valueOf(java.lang.String)", "public static org.apache.catalina.filters.ExpiresFilter$StartingPoint valueOf(java.lang.String)"], ["org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse(org.apache.catalina.filters.ExpiresFilter, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse(org.apache.catalina.filters.ExpiresFilter, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.getCacheControlHeader()", "public java.lang.String getCacheControlHeader()"], ["long", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.getLastModifiedHeader()", "public long getLastModifiedHeader()"], ["javax.servlet.ServletOutputStream", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["java.io.PrintWriter", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.IOException"], ["boolean", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.isLastModifiedHeaderSet()", "public boolean isLastModifiedHeaderSet()"], ["boolean", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.isWriteResponseBodyStarted()", "public boolean isWriteResponseBodyStarted()"], ["void", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.reset()", "public void reset()"], ["void", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse.setWriteResponseBodyStarted(boolean)", "public void setWriteResponseBodyStarted(boolean)"], ["org.apache.catalina.filters.ExpiresFilter$XPrintWriter", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter(org.apache.catalina.filters.ExpiresFilter, java.io.PrintWriter, javax.servlet.http.HttpServletRequest, org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)", "public org.apache.catalina.filters.ExpiresFilter$XPrintWriter(org.apache.catalina.filters.ExpiresFilter, java.io.PrintWriter, javax.servlet.http.HttpServletRequest, org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)"], ["java.io.PrintWriter", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(char)", "public java.io.PrintWriter append(char)"], ["java.io.PrintWriter", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(java.lang.CharSequence)", "public java.io.PrintWriter append(java.lang.CharSequence)"], ["java.io.PrintWriter", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(java.lang.CharSequence, int, int)", "public java.io.PrintWriter append(java.lang.CharSequence, int, int)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.close()", "public void close()"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.flush()", "public void flush()"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(boolean)", "public void print(boolean)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(char)", "public void print(char)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(char[])", "public void print(char[])"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(double)", "public void print(double)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(float)", "public void print(float)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(int)", "public void print(int)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(long)", "public void print(long)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(java.lang.Object)", "public void print(java.lang.Object)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.print(java.lang.String)", "public void print(java.lang.String)"], ["java.io.PrintWriter", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.printf(java.util.Locale, java.lang.String, java.lang.Object...)", "public java.io.PrintWriter printf(java.util.Locale, java.lang.String, java.lang.Object...)"], ["java.io.PrintWriter", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.printf(java.lang.String, java.lang.Object...)", "public java.io.PrintWriter printf(java.lang.String, java.lang.Object...)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println()", "public void println()"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(boolean)", "public void println(boolean)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(char)", "public void println(char)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(char[])", "public void println(char[])"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(double)", "public void println(double)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(float)", "public void println(float)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(int)", "public void println(int)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(long)", "public void println(long)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(java.lang.Object)", "public void println(java.lang.Object)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.println(java.lang.String)", "public void println(java.lang.String)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.write(char[])", "public void write(char[])"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.write(int)", "public void write(int)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["java.io.Writer", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(char)", "public java.io.Writer append(char) throws java.io.IOException"], ["java.io.Writer", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.io.Writer", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.catalina.filters.ExpiresFilter$XPrintWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["org.apache.catalina.filters.ExpiresFilter$XServletOutputStream", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream(org.apache.catalina.filters.ExpiresFilter, javax.servlet.ServletOutputStream, javax.servlet.http.HttpServletRequest, org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)", "public org.apache.catalina.filters.ExpiresFilter$XServletOutputStream(org.apache.catalina.filters.ExpiresFilter, javax.servlet.ServletOutputStream, javax.servlet.http.HttpServletRequest, org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.print(boolean)", "public void print(boolean) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.print(char)", "public void print(char) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.print(double)", "public void print(double) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.print(float)", "public void print(float) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.print(int)", "public void print(int) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.print(long)", "public void print(long) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.print(java.lang.String)", "public void print(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println()", "public void println() throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println(boolean)", "public void println(boolean) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println(char)", "public void println(char) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println(double)", "public void println(double) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println(float)", "public void println(float) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println(int)", "public void println(int) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println(long)", "public void println(long) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.println(java.lang.String)", "public void println(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["boolean", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.isReady()", "public boolean isReady()"], ["void", "org.apache.catalina.filters.ExpiresFilter$XServletOutputStream.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["org.apache.catalina.filters.ExpiresFilter", "org.apache.catalina.filters.ExpiresFilter()", "public org.apache.catalina.filters.ExpiresFilter()"], ["void", "org.apache.catalina.filters.ExpiresFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration", "org.apache.catalina.filters.ExpiresFilter.getDefaultExpiresConfiguration()", "public org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration getDefaultExpiresConfiguration()"], ["java.lang.String", "org.apache.catalina.filters.ExpiresFilter.getExcludedResponseStatusCodes()", "public java.lang.String getExcludedResponseStatusCodes()"], ["int[]", "org.apache.catalina.filters.ExpiresFilter.getExcludedResponseStatusCodesAsInts()", "public int[] getExcludedResponseStatusCodesAsInts()"], ["java.util.Map<java.lang.String, org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration>", "org.apache.catalina.filters.ExpiresFilter.getExpiresConfigurationByContentType()", "public java.util.Map<java.lang.String, org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration> getExpiresConfigurationByContentType()"], ["void", "org.apache.catalina.filters.ExpiresFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.ExpiresFilter.onBeforeWriteResponseBody(javax.servlet.http.HttpServletRequest, org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)", "public void onBeforeWriteResponseBody(javax.servlet.http.HttpServletRequest, org.apache.catalina.filters.ExpiresFilter$XHttpServletResponse)"], ["void", "org.apache.catalina.filters.ExpiresFilter.setDefaultExpiresConfiguration(org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration)", "public void setDefaultExpiresConfiguration(org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration)"], ["void", "org.apache.catalina.filters.ExpiresFilter.setExcludedResponseStatusCodes(int[])", "public void setExcludedResponseStatusCodes(int[])"], ["void", "org.apache.catalina.filters.ExpiresFilter.setExpiresConfigurationByContentType(java.util.Map<java.lang.String, org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration>)", "public void setExpiresConfigurationByContentType(java.util.Map<java.lang.String, org.apache.catalina.filters.ExpiresFilter$ExpiresConfiguration>)"], ["java.lang.String", "org.apache.catalina.filters.ExpiresFilter.toString()", "public java.lang.String toString()"], ["org.apache.catalina.filters.FailedRequestFilter", "org.apache.catalina.filters.FailedRequestFilter()", "public org.apache.catalina.filters.FailedRequestFilter()"], ["void", "org.apache.catalina.filters.FailedRequestFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.FailedRequestFilter.doFilterEvent(org.apache.catalina.comet.CometEvent, org.apache.catalina.comet.CometFilterChain)", "public void doFilterEvent(org.apache.catalina.comet.CometEvent, org.apache.catalina.comet.CometFilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.filters.FilterBase", "org.apache.catalina.filters.FilterBase()", "public org.apache.catalina.filters.FilterBase()"], ["void", "org.apache.catalina.filters.FilterBase.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.FilterBase.destroy()", "public void destroy()"], ["org.apache.catalina.filters.RemoteAddrFilter", "org.apache.catalina.filters.RemoteAddrFilter()", "public org.apache.catalina.filters.RemoteAddrFilter()"], ["void", "org.apache.catalina.filters.RemoteAddrFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.RemoteAddrFilter.doFilterEvent(org.apache.catalina.comet.CometEvent, org.apache.catalina.comet.CometFilterChain)", "public void doFilterEvent(org.apache.catalina.comet.CometEvent, org.apache.catalina.comet.CometFilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.filters.RemoteHostFilter", "org.apache.catalina.filters.RemoteHostFilter()", "public org.apache.catalina.filters.RemoteHostFilter()"], ["void", "org.apache.catalina.filters.RemoteHostFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.RemoteHostFilter.doFilterEvent(org.apache.catalina.comet.CometEvent, org.apache.catalina.comet.CometFilterChain)", "public void doFilterEvent(org.apache.catalina.comet.CometEvent, org.apache.catalina.comet.CometFilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest(javax.servlet.http.HttpServletRequest)", "public org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest(javax.servlet.http.HttpServletRequest)"], ["long", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["int", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["int", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getLocalPort()", "public int getLocalPort()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getRemoteHost()", "public java.lang.String getRemoteHost()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getScheme()", "public java.lang.String getScheme()"], ["int", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.getServerPort()", "public int getServerPort()"], ["boolean", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.isSecure()", "public boolean isSecure()"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.removeHeader(java.lang.String)", "public void removeHeader(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setLocalPort(int)", "public void setLocalPort(int)"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setRemoteAddr(java.lang.String)", "public void setRemoteAddr(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setRemoteHost(java.lang.String)", "public void setRemoteHost(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setScheme(java.lang.String)", "public void setScheme(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setSecure(boolean)", "public void setSecure(boolean)"], ["void", "org.apache.catalina.filters.RemoteIpFilter$XForwardedRequest.setServerPort(int)", "public void setServerPort(int)"], ["org.apache.catalina.filters.RemoteIpFilter", "org.apache.catalina.filters.RemoteIpFilter()", "public org.apache.catalina.filters.RemoteIpFilter()"], ["void", "org.apache.catalina.filters.RemoteIpFilter.destroy()", "public void destroy()"], ["void", "org.apache.catalina.filters.RemoteIpFilter.doFilter(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.RemoteIpFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["boolean", "org.apache.catalina.filters.RemoteIpFilter.isChangeLocalPort()", "public boolean isChangeLocalPort()"], ["int", "org.apache.catalina.filters.RemoteIpFilter.getHttpsServerPort()", "public int getHttpsServerPort()"], ["java.util.regex.Pattern", "org.apache.catalina.filters.RemoteIpFilter.getInternalProxies()", "public java.util.regex.Pattern getInternalProxies()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter.getProtocolHeader()", "public java.lang.String getProtocolHeader()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter.getPortHeader()", "public java.lang.String getPortHeader()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter.getProtocolHeaderHttpsValue()", "public java.lang.String getProtocolHeaderHttpsValue()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter.getProxiesHeader()", "public java.lang.String getProxiesHeader()"], ["java.lang.String", "org.apache.catalina.filters.RemoteIpFilter.getRemoteIpHeader()", "public java.lang.String getRemoteIpHeader()"], ["boolean", "org.apache.catalina.filters.RemoteIpFilter.getRequestAttributesEnabled()", "public boolean getRequestAttributesEnabled()"], ["java.util.regex.Pattern", "org.apache.catalina.filters.RemoteIpFilter.getTrustedProxies()", "public java.util.regex.Pattern getTrustedProxies()"], ["void", "org.apache.catalina.filters.RemoteIpFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setChangeLocalPort(boolean)", "public void setChangeLocalPort(boolean)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setHttpServerPort(int)", "public void setHttpServerPort(int)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setHttpsServerPort(int)", "public void setHttpsServerPort(int)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setInternalProxies(java.lang.String)", "public void setInternalProxies(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setPortHeader(java.lang.String)", "public void setPortHeader(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setProtocolHeader(java.lang.String)", "public void setProtocolHeader(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setProtocolHeaderHttpsValue(java.lang.String)", "public void setProtocolHeaderHttpsValue(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setProxiesHeader(java.lang.String)", "public void setProxiesHeader(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setRemoteIpHeader(java.lang.String)", "public void setRemoteIpHeader(java.lang.String)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setRequestAttributesEnabled(boolean)", "public void setRequestAttributesEnabled(boolean)"], ["void", "org.apache.catalina.filters.RemoteIpFilter.setTrustedProxies(java.lang.String)", "public void setTrustedProxies(java.lang.String)"], ["org.apache.catalina.filters.RequestDumperFilter", "org.apache.catalina.filters.RequestDumperFilter()", "public org.apache.catalina.filters.RequestDumperFilter()"], ["void", "org.apache.catalina.filters.RequestDumperFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.RequestDumperFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.RequestDumperFilter.destroy()", "public void destroy()"], ["org.apache.catalina.filters.RequestFilter", "org.apache.catalina.filters.RequestFilter()", "public org.apache.catalina.filters.RequestFilter()"], ["java.lang.String", "org.apache.catalina.filters.RequestFilter.getAllow()", "public java.lang.String getAllow()"], ["void", "org.apache.catalina.filters.RequestFilter.setAllow(java.lang.String)", "public void setAllow(java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.RequestFilter.getDeny()", "public java.lang.String getDeny()"], ["void", "org.apache.catalina.filters.RequestFilter.setDeny(java.lang.String)", "public void setDeny(java.lang.String)"], ["int", "org.apache.catalina.filters.RequestFilter.getDenyStatus()", "public int getDenyStatus()"], ["void", "org.apache.catalina.filters.RequestFilter.setDenyStatus(int)", "public void setDenyStatus(int)"], ["org.apache.catalina.filters.SetCharacterEncodingFilter", "org.apache.catalina.filters.SetCharacterEncodingFilter()", "public org.apache.catalina.filters.SetCharacterEncodingFilter()"], ["void", "org.apache.catalina.filters.SetCharacterEncodingFilter.setEncoding(java.lang.String)", "public void setEncoding(java.lang.String)"], ["java.lang.String", "org.apache.catalina.filters.SetCharacterEncodingFilter.getEncoding()", "public java.lang.String getEncoding()"], ["void", "org.apache.catalina.filters.SetCharacterEncodingFilter.setIgnore(boolean)", "public void setIgnore(boolean)"], ["boolean", "org.apache.catalina.filters.SetCharacterEncodingFilter.isIgnore()", "public boolean isIgnore()"], ["void", "org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.filters.WebdavFixFilter", "org.apache.catalina.filters.WebdavFixFilter()", "public org.apache.catalina.filters.WebdavFixFilter()"], ["void", "org.apache.catalina.filters.WebdavFixFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.filters.WebdavFixFilter.destroy()", "public void destroy()"], ["void", "org.apache.catalina.filters.WebdavFixFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.loader.Constants", "org.apache.catalina.loader.Constants()", "public org.apache.catalina.loader.Constants()"], ["org.apache.catalina.loader.JdbcLeakPrevention", "org.apache.catalina.loader.JdbcLeakPrevention()", "public org.apache.catalina.loader.JdbcLeakPrevention()"], ["java.util.List<java.lang.String>", "org.apache.catalina.loader.JdbcLeakPrevention.clearJdbcDriverRegistrations()", "public java.util.List<java.lang.String> clearJdbcDriverRegistrations() throws java.sql.SQLException"], ["org.apache.catalina.loader.ParallelWebappClassLoader", "org.apache.catalina.loader.ParallelWebappClassLoader()", "public org.apache.catalina.loader.ParallelWebappClassLoader()"], ["org.apache.catalina.loader.ParallelWebappClassLoader", "org.apache.catalina.loader.ParallelWebappClassLoader(java.lang.ClassLoader)", "public org.apache.catalina.loader.ParallelWebappClassLoader(java.lang.ClassLoader)"], ["org.apache.catalina.loader.ParallelWebappClassLoader", "org.apache.catalina.loader.ParallelWebappClassLoader.copyWithoutTransformers()", "public org.apache.catalina.loader.ParallelWebappClassLoader copyWithoutTransformers()"], ["java.lang.ClassLoader", "org.apache.catalina.loader.ParallelWebappClassLoader.copyWithoutTransformers()", "public java.lang.ClassLoader copyWithoutTransformers()"], ["org.apache.catalina.loader.ResourceEntry", "org.apache.catalina.loader.ResourceEntry()", "public org.apache.catalina.loader.ResourceEntry()"], ["org.apache.catalina.loader.WebappClassLoader", "org.apache.catalina.loader.WebappClassLoader()", "public org.apache.catalina.loader.WebappClassLoader()"], ["org.apache.catalina.loader.WebappClassLoader", "org.apache.catalina.loader.WebappClassLoader(java.lang.ClassLoader)", "public org.apache.catalina.loader.WebappClassLoader(java.lang.ClassLoader)"], ["org.apache.catalina.loader.WebappClassLoader", "org.apache.catalina.loader.WebappClassLoader.copyWithoutTransformers()", "public org.apache.catalina.loader.WebappClassLoader copyWithoutTransformers()"], ["java.lang.ClassLoader", "org.apache.catalina.loader.WebappClassLoader.copyWithoutTransformers()", "public java.lang.ClassLoader copyWithoutTransformers()"], ["org.apache.catalina.loader.ResourceEntry", "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedFindResourceByName.run()", "public org.apache.catalina.loader.ResourceEntry run()"], ["java.lang.Object", "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedFindResourceByName.run()", "public java.lang.Object run()"], ["org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedGetClassLoader", "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedGetClassLoader(java.lang.Class<?>)", "public org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedGetClassLoader(java.lang.Class<?>)"], ["java.lang.ClassLoader", "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedGetClassLoader.run()", "public java.lang.ClassLoader run()"], ["java.lang.Object", "org.apache.catalina.loader.WebappClassLoaderBase$PrivilegedGetClassLoader.run()", "public java.lang.Object run()"], ["org.apache.catalina.WebResourceRoot", "org.apache.catalina.loader.WebappClassLoaderBase.getResources()", "public org.apache.catalina.WebResourceRoot getResources()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.setResources(org.apache.catalina.WebResourceRoot)", "public void setResources(org.apache.catalina.WebResourceRoot)"], ["java.lang.String", "org.apache.catalina.loader.WebappClassLoaderBase.getContextName()", "public java.lang.String getContextName()"], ["boolean", "org.apache.catalina.loader.WebappClassLoaderBase.getDelegate()", "public boolean getDelegate()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.setDelegate(boolean)", "public void setDelegate(boolean)"], ["boolean", "org.apache.catalina.loader.WebappClassLoaderBase.getClearReferencesStatic()", "public boolean getClearReferencesStatic()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.setClearReferencesStatic(boolean)", "public void setClearReferencesStatic(boolean)"], ["boolean", "org.apache.catalina.loader.WebappClassLoaderBase.getClearReferencesStopThreads()", "public boolean getClearReferencesStopThreads()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.setClearReferencesStopThreads(boolean)", "public void setClearReferencesStopThreads(boolean)"], ["boolean", "org.apache.catalina.loader.WebappClassLoaderBase.getClearReferencesStopTimerThreads()", "public boolean getClearReferencesStopTimerThreads()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.setClearReferencesStopTimerThreads(boolean)", "public void setClearReferencesStopTimerThreads(boolean)"], ["boolean", "org.apache.catalina.loader.WebappClassLoaderBase.getClearReferencesLogFactoryRelease()", "public boolean getClearReferencesLogFactoryRelease()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.setClearReferencesLogFactoryRelease(boolean)", "public void setClearReferencesLogFactoryRelease(boolean)"], ["boolean", "org.apache.catalina.loader.WebappClassLoaderBase.getClearReferencesHttpClientKeepAliveThread()", "public boolean getClearReferencesHttpClientKeepAliveThread()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.setClearReferencesHttpClientKeepAliveThread(boolean)", "public void setClearReferencesHttpClientKeepAliveThread(boolean)"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.addTransformer(java.lang.instrument.ClassFileTransformer)", "public void addTransformer(java.lang.instrument.ClassFileTransformer)"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.removeTransformer(java.lang.instrument.ClassFileTransformer)", "public void removeTransformer(java.lang.instrument.ClassFileTransformer)"], ["boolean", "org.apache.catalina.loader.WebappClassLoaderBase.modified()", "public boolean modified()"], ["java.lang.String", "org.apache.catalina.loader.WebappClassLoaderBase.toString()", "public java.lang.String toString()"], ["java.lang.Class<?>", "org.apache.catalina.loader.WebappClassLoaderBase.findClass(java.lang.String)", "public java.lang.Class<?> findClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["java.net.URL", "org.apache.catalina.loader.WebappClassLoaderBase.findResource(java.lang.String)", "public java.net.URL findResource(java.lang.String)"], ["java.util.Enumeration<java.net.URL>", "org.apache.catalina.loader.WebappClassLoaderBase.findResources(java.lang.String)", "public java.util.Enumeration<java.net.URL> findResources(java.lang.String) throws java.io.IOException"], ["java.net.URL", "org.apache.catalina.loader.WebappClassLoaderBase.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String)"], ["java.io.InputStream", "org.apache.catalina.loader.WebappClassLoaderBase.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["java.lang.Class<?>", "org.apache.catalina.loader.WebappClassLoaderBase.loadClass(java.lang.String)", "public java.lang.Class<?> loadClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["java.lang.Class<?>", "org.apache.catalina.loader.WebappClassLoaderBase.loadClass(java.lang.String, boolean)", "public java.lang.Class<?> loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException"], ["java.net.URL[]", "org.apache.catalina.loader.WebappClassLoaderBase.getURLs()", "public java.net.URL[] getURLs()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.addLifecycleListener(org.apache.catalina.LifecycleListener)", "public void addLifecycleListener(org.apache.catalina.LifecycleListener)"], ["org.apache.catalina.LifecycleListener[]", "org.apache.catalina.loader.WebappClassLoaderBase.findLifecycleListeners()", "public org.apache.catalina.LifecycleListener[] findLifecycleListeners()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.removeLifecycleListener(org.apache.catalina.LifecycleListener)", "public void removeLifecycleListener(org.apache.catalina.LifecycleListener)"], ["org.apache.catalina.LifecycleState", "org.apache.catalina.loader.WebappClassLoaderBase.getState()", "public org.apache.catalina.LifecycleState getState()"], ["java.lang.String", "org.apache.catalina.loader.WebappClassLoaderBase.getStateName()", "public java.lang.String getStateName()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.init()", "public void init()"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.start()", "public void start() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.stop()", "public void stop() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.loader.WebappClassLoaderBase.destroy()", "public void destroy()"], ["org.apache.catalina.loader.WebappLoader", "org.apache.catalina.loader.WebappLoader()", "public org.apache.catalina.loader.WebappLoader()"], ["org.apache.catalina.loader.WebappLoader", "org.apache.catalina.loader.WebappLoader(java.lang.ClassLoader)", "public org.apache.catalina.loader.WebappLoader(java.lang.ClassLoader)"], ["java.lang.ClassLoader", "org.apache.catalina.loader.WebappLoader.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["org.apache.catalina.Context", "org.apache.catalina.loader.WebappLoader.getContext()", "public org.apache.catalina.Context getContext()"], ["void", "org.apache.catalina.loader.WebappLoader.setContext(org.apache.catalina.Context)", "public void setContext(org.apache.catalina.Context)"], ["boolean", "org.apache.catalina.loader.WebappLoader.getDelegate()", "public boolean getDelegate()"], ["void", "org.apache.catalina.loader.WebappLoader.setDelegate(boolean)", "public void setDelegate(boolean)"], ["java.lang.String", "org.apache.catalina.loader.WebappLoader.getLoaderClass()", "public java.lang.String getLoaderClass()"], ["void", "org.apache.catalina.loader.WebappLoader.setLoaderClass(java.lang.String)", "public void setLoaderClass(java.lang.String)"], ["boolean", "org.apache.catalina.loader.WebappLoader.getReloadable()", "public boolean getReloadable()"], ["void", "org.apache.catalina.loader.WebappLoader.setReloadable(boolean)", "public void setReloadable(boolean)"], ["void", "org.apache.catalina.loader.WebappLoader.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.loader.WebappLoader.backgroundProcess()", "public void backgroundProcess()"], ["java.lang.String[]", "org.apache.catalina.loader.WebappLoader.getLoaderRepositories()", "public java.lang.String[] getLoaderRepositories()"], ["java.lang.String", "org.apache.catalina.loader.WebappLoader.getLoaderRepositoriesString()", "public java.lang.String getLoaderRepositoriesString()"], ["java.lang.String", "org.apache.catalina.loader.WebappLoader.getClasspath()", "public java.lang.String getClasspath()"], ["boolean", "org.apache.catalina.loader.WebappLoader.modified()", "public boolean modified()"], ["void", "org.apache.catalina.loader.WebappLoader.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["java.lang.String", "org.apache.catalina.loader.WebappLoader.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.loader.WebappLoader.propertyChange(java.beans.PropertyChangeEvent)", "public void propertyChange(java.beans.PropertyChangeEvent)"], ["org.apache.catalina.manager.Constants", "org.apache.catalina.manager.Constants()", "public org.apache.catalina.manager.Constants()"], ["org.apache.catalina.manager.DummyProxySession", "org.apache.catalina.manager.DummyProxySession(java.lang.String)", "public org.apache.catalina.manager.DummyProxySession(java.lang.String)"], ["void", "org.apache.catalina.manager.DummyProxySession.access()", "public void access()"], ["void", "org.apache.catalina.manager.DummyProxySession.addSessionListener(org.apache.catalina.SessionListener)", "public void addSessionListener(org.apache.catalina.SessionListener)"], ["void", "org.apache.catalina.manager.DummyProxySession.endAccess()", "public void endAccess()"], ["void", "org.apache.catalina.manager.DummyProxySession.expire()", "public void expire()"], ["java.lang.String", "org.apache.catalina.manager.DummyProxySession.getAuthType()", "public java.lang.String getAuthType()"], ["long", "org.apache.catalina.manager.DummyProxySession.getCreationTime()", "public long getCreationTime()"], ["long", "org.apache.catalina.manager.DummyProxySession.getCreationTimeInternal()", "public long getCreationTimeInternal()"], ["java.lang.String", "org.apache.catalina.manager.DummyProxySession.getId()", "public java.lang.String getId()"], ["java.lang.String", "org.apache.catalina.manager.DummyProxySession.getIdInternal()", "public java.lang.String getIdInternal()"], ["long", "org.apache.catalina.manager.DummyProxySession.getLastAccessedTime()", "public long getLastAccessedTime()"], ["long", "org.apache.catalina.manager.DummyProxySession.getLastAccessedTimeInternal()", "public long getLastAccessedTimeInternal()"], ["long", "org.apache.catalina.manager.DummyProxySession.getIdleTime()", "public long getIdleTime()"], ["long", "org.apache.catalina.manager.DummyProxySession.getIdleTimeInternal()", "public long getIdleTimeInternal()"], ["org.apache.catalina.Manager", "org.apache.catalina.manager.DummyProxySession.getManager()", "public org.apache.catalina.Manager getManager()"], ["int", "org.apache.catalina.manager.DummyProxySession.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["java.lang.Object", "org.apache.catalina.manager.DummyProxySession.getNote(java.lang.String)", "public java.lang.Object getNote(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.catalina.manager.DummyProxySession.getNoteNames()", "public java.util.Iterator<java.lang.String> getNoteNames()"], ["java.security.Principal", "org.apache.catalina.manager.DummyProxySession.getPrincipal()", "public java.security.Principal getPrincipal()"], ["javax.servlet.http.HttpSession", "org.apache.catalina.manager.DummyProxySession.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["long", "org.apache.catalina.manager.DummyProxySession.getThisAccessedTime()", "public long getThisAccessedTime()"], ["long", "org.apache.catalina.manager.DummyProxySession.getThisAccessedTimeInternal()", "public long getThisAccessedTimeInternal()"], ["boolean", "org.apache.catalina.manager.DummyProxySession.isValid()", "public boolean isValid()"], ["void", "org.apache.catalina.manager.DummyProxySession.recycle()", "public void recycle()"], ["void", "org.apache.catalina.manager.DummyProxySession.removeNote(java.lang.String)", "public void removeNote(java.lang.String)"], ["void", "org.apache.catalina.manager.DummyProxySession.removeSessionListener(org.apache.catalina.SessionListener)", "public void removeSessionListener(org.apache.catalina.SessionListener)"], ["void", "org.apache.catalina.manager.DummyProxySession.setAuthType(java.lang.String)", "public void setAuthType(java.lang.String)"], ["void", "org.apache.catalina.manager.DummyProxySession.setCreationTime(long)", "public void setCreationTime(long)"], ["void", "org.apache.catalina.manager.DummyProxySession.setId(java.lang.String)", "public void setId(java.lang.String)"], ["void", "org.apache.catalina.manager.DummyProxySession.setId(java.lang.String, boolean)", "public void setId(java.lang.String, boolean)"], ["void", "org.apache.catalina.manager.DummyProxySession.setManager(org.apache.catalina.Manager)", "public void setManager(org.apache.catalina.Manager)"], ["void", "org.apache.catalina.manager.DummyProxySession.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["void", "org.apache.catalina.manager.DummyProxySession.setNew(boolean)", "public void setNew(boolean)"], ["void", "org.apache.catalina.manager.DummyProxySession.setNote(java.lang.String, java.lang.Object)", "public void setNote(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.manager.DummyProxySession.setPrincipal(java.security.Principal)", "public void setPrincipal(java.security.Principal)"], ["void", "org.apache.catalina.manager.DummyProxySession.setValid(boolean)", "public void setValid(boolean)"], ["void", "org.apache.catalina.manager.DummyProxySession.tellChangedSessionId(java.lang.String, java.lang.String, boolean, boolean)", "public void tellChangedSessionId(java.lang.String, java.lang.String, boolean, boolean)"], ["java.lang.Comparable<java.util.Date>", "org.apache.catalina.manager.HTMLManagerServlet$1.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.util.Date> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.util.Date>", "org.apache.catalina.manager.HTMLManagerServlet$10.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.util.Date> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.lang.String>", "org.apache.catalina.manager.HTMLManagerServlet$2.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.lang.String> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.util.Date>", "org.apache.catalina.manager.HTMLManagerServlet$3.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.util.Date> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.lang.Integer>", "org.apache.catalina.manager.HTMLManagerServlet$4.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.lang.Integer> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.lang.Boolean>", "org.apache.catalina.manager.HTMLManagerServlet$5.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.lang.Boolean> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.lang.String>", "org.apache.catalina.manager.HTMLManagerServlet$6.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.lang.String> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.lang.String>", "org.apache.catalina.manager.HTMLManagerServlet$7.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.lang.String> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.util.Date>", "org.apache.catalina.manager.HTMLManagerServlet$8.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.util.Date> getComparableObject(org.apache.catalina.Session)"], ["java.lang.Comparable<java.util.Date>", "org.apache.catalina.manager.HTMLManagerServlet$9.getComparableObject(org.apache.catalina.Session)", "public java.lang.Comparable<java.util.Date> getComparableObject(org.apache.catalina.Session)"], ["org.apache.catalina.manager.HTMLManagerServlet", "org.apache.catalina.manager.HTMLManagerServlet()", "public org.apache.catalina.manager.HTMLManagerServlet()"], ["void", "org.apache.catalina.manager.HTMLManagerServlet.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.HTMLManagerServlet.doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.apache.catalina.manager.HTMLManagerServlet.getServletInfo()", "public java.lang.String getServletInfo()"], ["void", "org.apache.catalina.manager.HTMLManagerServlet.init()", "public void init() throws javax.servlet.ServletException"], ["org.apache.catalina.manager.JMXProxyServlet", "org.apache.catalina.manager.JMXProxyServlet()", "public org.apache.catalina.manager.JMXProxyServlet()"], ["void", "org.apache.catalina.manager.JMXProxyServlet.init()", "public void init() throws javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.JMXProxyServlet.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.JMXProxyServlet.getAttribute(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String)", "public void getAttribute(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.manager.JMXProxyServlet.setAttribute(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String)", "public void setAttribute(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.manager.JMXProxyServlet.listBeans(java.io.PrintWriter, java.lang.String)", "public void listBeans(java.io.PrintWriter, java.lang.String)"], ["boolean", "org.apache.catalina.manager.JMXProxyServlet.isSupported(java.lang.String)", "public boolean isSupported(java.lang.String)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.guessDisplayLocaleFromSession(org.apache.catalina.Session)", "public static java.lang.String guessDisplayLocaleFromSession(org.apache.catalina.Session)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.guessDisplayUserFromSession(org.apache.catalina.Session)", "public static java.lang.String guessDisplayUserFromSession(org.apache.catalina.Session)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.getDisplayCreationTimeForSession(org.apache.catalina.Session)", "public static java.lang.String getDisplayCreationTimeForSession(org.apache.catalina.Session)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.getDisplayLastAccessedTimeForSession(org.apache.catalina.Session)", "public static java.lang.String getDisplayLastAccessedTimeForSession(org.apache.catalina.Session)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.getDisplayUsedTimeForSession(org.apache.catalina.Session)", "public static java.lang.String getDisplayUsedTimeForSession(org.apache.catalina.Session)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.getDisplayTTLForSession(org.apache.catalina.Session)", "public static java.lang.String getDisplayTTLForSession(org.apache.catalina.Session)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.getDisplayInactiveTimeForSession(org.apache.catalina.Session)", "public static java.lang.String getDisplayInactiveTimeForSession(org.apache.catalina.Session)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.secondsToTimeString(long)", "public static java.lang.String secondsToTimeString(long)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.escapeXml(java.lang.Object)", "public static java.lang.String escapeXml(java.lang.Object)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.escapeXml(java.lang.String)", "public static java.lang.String escapeXml(java.lang.String)"], ["java.lang.String", "org.apache.catalina.manager.JspHelper.formatNumber(long)", "public static java.lang.String formatNumber(long)"], ["org.apache.catalina.manager.ManagerServlet", "org.apache.catalina.manager.ManagerServlet()", "public org.apache.catalina.manager.ManagerServlet()"], ["org.apache.catalina.Wrapper", "org.apache.catalina.manager.ManagerServlet.getWrapper()", "public org.apache.catalina.Wrapper getWrapper()"], ["void", "org.apache.catalina.manager.ManagerServlet.setWrapper(org.apache.catalina.Wrapper)", "public void setWrapper(org.apache.catalina.Wrapper)"], ["void", "org.apache.catalina.manager.ManagerServlet.destroy()", "public void destroy()"], ["void", "org.apache.catalina.manager.ManagerServlet.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.ManagerServlet.doPut(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doPut(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.ManagerServlet.init()", "public void init() throws javax.servlet.ServletException"], ["boolean", "org.apache.catalina.manager.ManagerServlet.copy(java.io.File, java.io.File)", "public static boolean copy(java.io.File, java.io.File)"], ["boolean", "org.apache.catalina.manager.ManagerServlet.copyInternal(java.io.File, java.io.File, byte[])", "public static boolean copyInternal(java.io.File, java.io.File, byte[])"], ["org.apache.catalina.manager.StatusManagerServlet", "org.apache.catalina.manager.StatusManagerServlet()", "public org.apache.catalina.manager.StatusManagerServlet()"], ["void", "org.apache.catalina.manager.StatusManagerServlet.init()", "public void init() throws javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.StatusManagerServlet.destroy()", "public void destroy()"], ["void", "org.apache.catalina.manager.StatusManagerServlet.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.StatusManagerServlet.handleNotification(javax.management.Notification, java.lang.Object)", "public void handleNotification(javax.management.Notification, java.lang.Object)"], ["org.apache.catalina.manager.StatusTransformer", "org.apache.catalina.manager.StatusTransformer()", "public org.apache.catalina.manager.StatusTransformer()"], ["void", "org.apache.catalina.manager.StatusTransformer.setContentType(javax.servlet.http.HttpServletResponse, int)", "public static void setContentType(javax.servlet.http.HttpServletResponse, int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writeHeader(java.io.PrintWriter, java.lang.Object[], int)", "public static void writeHeader(java.io.PrintWriter, java.lang.Object[], int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writeBody(java.io.PrintWriter, java.lang.Object[], int)", "public static void writeBody(java.io.PrintWriter, java.lang.Object[], int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writeManager(java.io.PrintWriter, java.lang.Object[], int)", "public static void writeManager(java.io.PrintWriter, java.lang.Object[], int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writePageHeading(java.io.PrintWriter, java.lang.Object[], int)", "public static void writePageHeading(java.io.PrintWriter, java.lang.Object[], int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writeServerInfo(java.io.PrintWriter, java.lang.Object[], int)", "public static void writeServerInfo(java.io.PrintWriter, java.lang.Object[], int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writeFooter(java.io.PrintWriter, int)", "public static void writeFooter(java.io.PrintWriter, int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writeOSState(java.io.PrintWriter, int)", "public static void writeOSState(java.io.PrintWriter, int)"], ["void", "org.apache.catalina.manager.StatusTransformer.writeVMState(java.io.PrintWriter, int)", "public static void writeVMState(java.io.PrintWriter, int) throws java.lang.Exception"], ["void", "org.apache.catalina.manager.StatusTransformer.writeConnectorState(java.io.PrintWriter, javax.management.ObjectName, java.lang.String, javax.management.MBeanServer, java.util.Vector<javax.management.ObjectName>, java.util.Vector<javax.management.ObjectName>, int)", "public static void writeConnectorState(java.io.PrintWriter, javax.management.ObjectName, java.lang.String, javax.management.MBeanServer, java.util.Vector<javax.management.ObjectName>, java.util.Vector<javax.management.ObjectName>, int) throws java.lang.Exception"], ["void", "org.apache.catalina.manager.StatusTransformer.writeDetailedState(java.io.PrintWriter, javax.management.MBeanServer, int)", "public static void writeDetailedState(java.io.PrintWriter, javax.management.MBeanServer, int) throws java.lang.Exception"], ["void", "org.apache.catalina.manager.StatusTransformer.writeManager(java.io.PrintWriter, javax.management.ObjectName, javax.management.MBeanServer, int)", "public static void writeManager(java.io.PrintWriter, javax.management.ObjectName, javax.management.MBeanServer, int) throws java.lang.Exception"], ["void", "org.apache.catalina.manager.StatusTransformer.writeJspMonitor(java.io.PrintWriter, java.util.Set<javax.management.ObjectName>, javax.management.MBeanServer, int)", "public static void writeJspMonitor(java.io.PrintWriter, java.util.Set<javax.management.ObjectName>, javax.management.MBeanServer, int) throws java.lang.Exception"], ["void", "org.apache.catalina.manager.StatusTransformer.writeWrapper(java.io.PrintWriter, javax.management.ObjectName, javax.management.MBeanServer, int)", "public static void writeWrapper(java.io.PrintWriter, javax.management.ObjectName, javax.management.MBeanServer, int) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.manager.StatusTransformer.filter(java.lang.Object)", "public static java.lang.String filter(java.lang.Object)"], ["java.lang.String", "org.apache.catalina.manager.StatusTransformer.formatSize(java.lang.Object, boolean)", "public static java.lang.String formatSize(java.lang.Object, boolean)"], ["java.lang.String", "org.apache.catalina.manager.StatusTransformer.formatTime(java.lang.Object, boolean)", "public static java.lang.String formatTime(java.lang.Object, boolean)"], ["java.lang.String", "org.apache.catalina.manager.StatusTransformer.formatSeconds(java.lang.Object)", "public static java.lang.String formatSeconds(java.lang.Object)"], ["org.apache.catalina.manager.host.Constants", "org.apache.catalina.manager.host.Constants()", "public org.apache.catalina.manager.host.Constants()"], ["org.apache.catalina.manager.host.HTMLHostManagerServlet", "org.apache.catalina.manager.host.HTMLHostManagerServlet()", "public org.apache.catalina.manager.host.HTMLHostManagerServlet()"], ["void", "org.apache.catalina.manager.host.HTMLHostManagerServlet.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.host.HTMLHostManagerServlet.doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["void", "org.apache.catalina.manager.host.HTMLHostManagerServlet.list(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String, org.apache.tomcat.util.res.StringManager)", "public void list(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String, org.apache.tomcat.util.res.StringManager) throws java.io.IOException"], ["org.apache.catalina.manager.host.HostManagerServlet", "org.apache.catalina.manager.host.HostManagerServlet()", "public org.apache.catalina.manager.host.HostManagerServlet()"], ["org.apache.catalina.Wrapper", "org.apache.catalina.manager.host.HostManagerServlet.getWrapper()", "public org.apache.catalina.Wrapper getWrapper()"], ["void", "org.apache.catalina.manager.host.HostManagerServlet.setWrapper(org.apache.catalina.Wrapper)", "public void setWrapper(org.apache.catalina.Wrapper)"], ["void", "org.apache.catalina.manager.host.HostManagerServlet.destroy()", "public void destroy()"], ["void", "org.apache.catalina.manager.host.HostManagerServlet.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.manager.host.HostManagerServlet.init()", "public void init() throws javax.servlet.ServletException"], ["org.apache.catalina.manager.util.BaseSessionComparator", "org.apache.catalina.manager.util.BaseSessionComparator()", "public org.apache.catalina.manager.util.BaseSessionComparator()"], ["int", "org.apache.catalina.manager.util.BaseSessionComparator.compare(org.apache.catalina.Session, org.apache.catalina.Session)", "public final int compare(org.apache.catalina.Session, org.apache.catalina.Session)"], ["int", "org.apache.catalina.manager.util.BaseSessionComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.catalina.manager.util.ReverseComparator", "org.apache.catalina.manager.util.ReverseComparator(java.util.Comparator<org.apache.catalina.Session>)", "public org.apache.catalina.manager.util.ReverseComparator(java.util.Comparator<org.apache.catalina.Session>)"], ["int", "org.apache.catalina.manager.util.ReverseComparator.compare(org.apache.catalina.Session, org.apache.catalina.Session)", "public int compare(org.apache.catalina.Session, org.apache.catalina.Session)"], ["int", "org.apache.catalina.manager.util.ReverseComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.util.Locale", "org.apache.catalina.manager.util.SessionUtils.guessLocaleFromSession(org.apache.catalina.Session)", "public static java.util.Locale guessLocaleFromSession(org.apache.catalina.Session)"], ["java.util.Locale", "org.apache.catalina.manager.util.SessionUtils.guessLocaleFromSession(javax.servlet.http.HttpSession)", "public static java.util.Locale guessLocaleFromSession(javax.servlet.http.HttpSession)"], ["java.lang.Object", "org.apache.catalina.manager.util.SessionUtils.guessUserFromSession(org.apache.catalina.Session)", "public static java.lang.Object guessUserFromSession(org.apache.catalina.Session)"], ["long", "org.apache.catalina.manager.util.SessionUtils.getUsedTimeForSession(org.apache.catalina.Session)", "public static long getUsedTimeForSession(org.apache.catalina.Session)"], ["long", "org.apache.catalina.manager.util.SessionUtils.getTTLForSession(org.apache.catalina.Session)", "public static long getTTLForSession(org.apache.catalina.Session)"], ["long", "org.apache.catalina.manager.util.SessionUtils.getInactiveTimeForSession(org.apache.catalina.Session)", "public static long getInactiveTimeForSession(org.apache.catalina.Session)"], ["org.apache.catalina.mapper.Constants", "org.apache.catalina.mapper.Constants()", "public org.apache.catalina.mapper.Constants()"], ["org.apache.catalina.mapper.Mapper$ContextList", "org.apache.catalina.mapper.Mapper$ContextList()", "public org.apache.catalina.mapper.Mapper$ContextList()"], ["org.apache.catalina.mapper.Mapper$ContextList", "org.apache.catalina.mapper.Mapper$ContextList.addContext(org.apache.catalina.mapper.Mapper$MappedContext, int)", "public org.apache.catalina.mapper.Mapper$ContextList addContext(org.apache.catalina.mapper.Mapper$MappedContext, int)"], ["org.apache.catalina.mapper.Mapper$ContextList", "org.apache.catalina.mapper.Mapper$ContextList.removeContext(java.lang.String)", "public org.apache.catalina.mapper.Mapper$ContextList removeContext(java.lang.String)"], ["org.apache.catalina.mapper.Mapper$ContextVersion", "org.apache.catalina.mapper.Mapper$ContextVersion(java.lang.String, java.lang.String, int, org.apache.catalina.Context, org.apache.catalina.WebResourceRoot, java.lang.String[])", "public org.apache.catalina.mapper.Mapper$ContextVersion(java.lang.String, java.lang.String, int, org.apache.catalina.Context, org.apache.catalina.WebResourceRoot, java.lang.String[])"], ["boolean", "org.apache.catalina.mapper.Mapper$ContextVersion.isPaused()", "public boolean isPaused()"], ["void", "org.apache.catalina.mapper.Mapper$ContextVersion.markPaused()", "public void markPaused()"], ["org.apache.catalina.mapper.Mapper$MapElement", "org.apache.catalina.mapper.Mapper$MapElement(java.lang.String, T)", "public org.apache.catalina.mapper.Mapper$MapElement(java.lang.String, T)"], ["org.apache.catalina.mapper.Mapper$MappedContext", "org.apache.catalina.mapper.Mapper$MappedContext(java.lang.String, org.apache.catalina.mapper.Mapper$ContextVersion)", "public org.apache.catalina.mapper.Mapper$MappedContext(java.lang.String, org.apache.catalina.mapper.Mapper$ContextVersion)"], ["org.apache.catalina.mapper.Mapper$MappedHost", "org.apache.catalina.mapper.Mapper$MappedHost(java.lang.String, org.apache.catalina.Host)", "public org.apache.catalina.mapper.Mapper$MappedHost(java.lang.String, org.apache.catalina.Host)"], ["org.apache.catalina.mapper.Mapper$MappedHost", "org.apache.catalina.mapper.Mapper$MappedHost(java.lang.String, org.apache.catalina.mapper.Mapper$MappedHost)", "public org.apache.catalina.mapper.Mapper$MappedHost(java.lang.String, org.apache.catalina.mapper.Mapper$MappedHost)"], ["boolean", "org.apache.catalina.mapper.Mapper$MappedHost.isAlias()", "public boolean isAlias()"], ["org.apache.catalina.mapper.Mapper$MappedHost", "org.apache.catalina.mapper.Mapper$MappedHost.getRealHost()", "public org.apache.catalina.mapper.Mapper$MappedHost getRealHost()"], ["java.lang.String", "org.apache.catalina.mapper.Mapper$MappedHost.getRealHostName()", "public java.lang.String getRealHostName()"], ["java.util.Collection<org.apache.catalina.mapper.Mapper$MappedHost>", "org.apache.catalina.mapper.Mapper$MappedHost.getAliases()", "public java.util.Collection<org.apache.catalina.mapper.Mapper$MappedHost> getAliases()"], ["void", "org.apache.catalina.mapper.Mapper$MappedHost.addAlias(org.apache.catalina.mapper.Mapper$MappedHost)", "public void addAlias(org.apache.catalina.mapper.Mapper$MappedHost)"], ["void", "org.apache.catalina.mapper.Mapper$MappedHost.addAliases(java.util.Collection<? extends org.apache.catalina.mapper.Mapper$MappedHost>)", "public void addAliases(java.util.Collection<? extends org.apache.catalina.mapper.Mapper$MappedHost>)"], ["void", "org.apache.catalina.mapper.Mapper$MappedHost.removeAlias(org.apache.catalina.mapper.Mapper$MappedHost)", "public void removeAlias(org.apache.catalina.mapper.Mapper$MappedHost)"], ["org.apache.catalina.mapper.Mapper$MappedWrapper", "org.apache.catalina.mapper.Mapper$MappedWrapper(java.lang.String, org.apache.catalina.Wrapper, boolean, boolean)", "public org.apache.catalina.mapper.Mapper$MappedWrapper(java.lang.String, org.apache.catalina.Wrapper, boolean, boolean)"], ["org.apache.catalina.mapper.Mapper", "org.apache.catalina.mapper.Mapper()", "public org.apache.catalina.mapper.Mapper()"], ["void", "org.apache.catalina.mapper.Mapper.setDefaultHostName(java.lang.String)", "public void setDefaultHostName(java.lang.String)"], ["synchronized", "org.apache.catalina.mapper.Mapper.void addHost(java.lang.String, java.lang.String[], org.apache.catalina.Host)", "public synchronized void addHost(java.lang.String, java.lang.String[], org.apache.catalina.Host)"], ["synchronized", "org.apache.catalina.mapper.Mapper.void removeHost(java.lang.String)", "public synchronized void removeHost(java.lang.String)"], ["synchronized", "org.apache.catalina.mapper.Mapper.void addHostAlias(java.lang.String, java.lang.String)", "public synchronized void addHostAlias(java.lang.String, java.lang.String)"], ["synchronized", "org.apache.catalina.mapper.Mapper.void removeHostAlias(java.lang.String)", "public synchronized void removeHostAlias(java.lang.String)"], ["void", "org.apache.catalina.mapper.Mapper.addContextVersion(java.lang.String, org.apache.catalina.Host, java.lang.String, java.lang.String, org.apache.catalina.Context, java.lang.String[], org.apache.catalina.WebResourceRoot)", "public void addContextVersion(java.lang.String, org.apache.catalina.Host, java.lang.String, java.lang.String, org.apache.catalina.Context, java.lang.String[], org.apache.catalina.WebResourceRoot)"], ["void", "org.apache.catalina.mapper.Mapper.addContextVersion(java.lang.String, org.apache.catalina.Host, java.lang.String, java.lang.String, org.apache.catalina.Context, java.lang.String[], org.apache.catalina.WebResourceRoot, java.util.Collection<org.apache.catalina.mapper.WrapperMappingInfo>)", "public void addContextVersion(java.lang.String, org.apache.catalina.Host, java.lang.String, java.lang.String, org.apache.catalina.Context, java.lang.String[], org.apache.catalina.WebResourceRoot, java.util.Collection<org.apache.catalina.mapper.WrapperMappingInfo>)"], ["void", "org.apache.catalina.mapper.Mapper.removeContextVersion(org.apache.catalina.Context, java.lang.String, java.lang.String, java.lang.String)", "public void removeContextVersion(org.apache.catalina.Context, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.mapper.Mapper.pauseContextVersion(org.apache.catalina.Context, java.lang.String, java.lang.String, java.lang.String)", "public void pauseContextVersion(org.apache.catalina.Context, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.mapper.Mapper.addWrapper(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.apache.catalina.Wrapper, boolean, boolean)", "public void addWrapper(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.apache.catalina.Wrapper, boolean, boolean)"], ["void", "org.apache.catalina.mapper.Mapper.addWrappers(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<org.apache.catalina.mapper.WrapperMappingInfo>)", "public void addWrappers(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<org.apache.catalina.mapper.WrapperMappingInfo>)"], ["void", "org.apache.catalina.mapper.Mapper.removeWrapper(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void removeWrapper(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.mapper.Mapper.addWelcomeFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void addWelcomeFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.mapper.Mapper.removeWelcomeFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void removeWelcomeFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.mapper.Mapper.clearWelcomeFiles(java.lang.String, java.lang.String, java.lang.String)", "public void clearWelcomeFiles(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.mapper.Mapper.map(org.apache.tomcat.util.buf.MessageBytes, org.apache.tomcat.util.buf.MessageBytes, java.lang.String, org.apache.catalina.mapper.MappingData)", "public void map(org.apache.tomcat.util.buf.MessageBytes, org.apache.tomcat.util.buf.MessageBytes, java.lang.String, org.apache.catalina.mapper.MappingData) throws java.lang.Exception"], ["void", "org.apache.catalina.mapper.Mapper.map(org.apache.catalina.Context, org.apache.tomcat.util.buf.MessageBytes, org.apache.catalina.mapper.MappingData)", "public void map(org.apache.catalina.Context, org.apache.tomcat.util.buf.MessageBytes, org.apache.catalina.mapper.MappingData) throws java.lang.Exception"], ["org.apache.catalina.mapper.MapperListener", "org.apache.catalina.mapper.MapperListener(org.apache.catalina.mapper.Mapper, org.apache.catalina.Service)", "public org.apache.catalina.mapper.MapperListener(org.apache.catalina.mapper.Mapper, org.apache.catalina.Service)"], ["void", "org.apache.catalina.mapper.MapperListener.startInternal()", "public void startInternal() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.mapper.MapperListener.stopInternal()", "public void stopInternal() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.mapper.MapperListener.containerEvent(org.apache.catalina.ContainerEvent)", "public void containerEvent(org.apache.catalina.ContainerEvent)"], ["void", "org.apache.catalina.mapper.MapperListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.mapper.MappingData", "org.apache.catalina.mapper.MappingData()", "public org.apache.catalina.mapper.MappingData()"], ["void", "org.apache.catalina.mapper.MappingData.recycle()", "public void recycle()"], ["org.apache.catalina.mapper.WrapperMappingInfo", "org.apache.catalina.mapper.WrapperMappingInfo(java.lang.String, org.apache.catalina.Wrapper, boolean, boolean)", "public org.apache.catalina.mapper.WrapperMappingInfo(java.lang.String, org.apache.catalina.Wrapper, boolean, boolean)"], ["java.lang.String", "org.apache.catalina.mapper.WrapperMappingInfo.getMapping()", "public java.lang.String getMapping()"], ["org.apache.catalina.Wrapper", "org.apache.catalina.mapper.WrapperMappingInfo.getWrapper()", "public org.apache.catalina.Wrapper getWrapper()"], ["boolean", "org.apache.catalina.mapper.WrapperMappingInfo.isJspWildCard()", "public boolean isJspWildCard()"], ["boolean", "org.apache.catalina.mapper.WrapperMappingInfo.isResourceOnly()", "public boolean isResourceOnly()"], ["org.apache.catalina.mbeans.ClassNameMBean", "org.apache.catalina.mbeans.ClassNameMBean()", "public org.apache.catalina.mbeans.ClassNameMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.String", "org.apache.catalina.mbeans.ClassNameMBean.getClassName()", "public java.lang.String getClassName()"], ["org.apache.catalina.mbeans.ConnectorMBean", "org.apache.catalina.mbeans.ConnectorMBean()", "public org.apache.catalina.mbeans.ConnectorMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.Object", "org.apache.catalina.mbeans.ConnectorMBean.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["void", "org.apache.catalina.mbeans.ConnectorMBean.setAttribute(javax.management.Attribute)", "public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["org.apache.catalina.mbeans.Constants", "org.apache.catalina.mbeans.Constants()", "public org.apache.catalina.mbeans.Constants()"], ["org.apache.catalina.mbeans.ContainerMBean", "org.apache.catalina.mbeans.ContainerMBean()", "public org.apache.catalina.mbeans.ContainerMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.catalina.mbeans.ContainerMBean.addChild(java.lang.String, java.lang.String)", "public void addChild(java.lang.String, java.lang.String) throws javax.management.MBeanException"], ["void", "org.apache.catalina.mbeans.ContainerMBean.removeChild(java.lang.String)", "public void removeChild(java.lang.String) throws javax.management.MBeanException"], ["java.lang.String", "org.apache.catalina.mbeans.ContainerMBean.addValve(java.lang.String)", "public java.lang.String addValve(java.lang.String) throws javax.management.MBeanException"], ["void", "org.apache.catalina.mbeans.ContainerMBean.removeValve(java.lang.String)", "public void removeValve(java.lang.String) throws javax.management.MBeanException"], ["void", "org.apache.catalina.mbeans.ContainerMBean.addLifecycleListener(java.lang.String)", "public void addLifecycleListener(java.lang.String) throws javax.management.MBeanException"], ["void", "org.apache.catalina.mbeans.ContainerMBean.removeLifecycleListeners(java.lang.String)", "public void removeLifecycleListeners(java.lang.String) throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ContainerMBean.findLifecycleListenerNames()", "public java.lang.String[] findLifecycleListenerNames() throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ContainerMBean.findContainerListenerNames()", "public java.lang.String[] findContainerListenerNames() throws javax.management.MBeanException"], ["org.apache.catalina.mbeans.ContextEnvironmentMBean", "org.apache.catalina.mbeans.ContextEnvironmentMBean()", "public org.apache.catalina.mbeans.ContextEnvironmentMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.catalina.mbeans.ContextEnvironmentMBean.setAttribute(javax.management.Attribute)", "public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["org.apache.catalina.mbeans.ContextMBean", "org.apache.catalina.mbeans.ContextMBean()", "public org.apache.catalina.mbeans.ContextMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ContextMBean.findApplicationParameters()", "public java.lang.String[] findApplicationParameters() throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ContextMBean.findConstraints()", "public java.lang.String[] findConstraints() throws javax.management.MBeanException"], ["java.lang.String", "org.apache.catalina.mbeans.ContextMBean.findErrorPage(int)", "public java.lang.String findErrorPage(int) throws javax.management.MBeanException"], ["java.lang.String", "org.apache.catalina.mbeans.ContextMBean.findErrorPage(java.lang.String)", "public java.lang.String findErrorPage(java.lang.String) throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ContextMBean.findErrorPages()", "public java.lang.String[] findErrorPages() throws javax.management.MBeanException"], ["java.lang.String", "org.apache.catalina.mbeans.ContextMBean.findFilterDef(java.lang.String)", "public java.lang.String findFilterDef(java.lang.String) throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ContextMBean.findFilterDefs()", "public java.lang.String[] findFilterDefs() throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ContextMBean.findFilterMaps()", "public java.lang.String[] findFilterMaps() throws javax.management.MBeanException"], ["org.apache.catalina.mbeans.ContextResourceLinkMBean", "org.apache.catalina.mbeans.ContextResourceLinkMBean()", "public org.apache.catalina.mbeans.ContextResourceLinkMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.Object", "org.apache.catalina.mbeans.ContextResourceLinkMBean.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["void", "org.apache.catalina.mbeans.ContextResourceLinkMBean.setAttribute(javax.management.Attribute)", "public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["org.apache.catalina.mbeans.ContextResourceMBean", "org.apache.catalina.mbeans.ContextResourceMBean()", "public org.apache.catalina.mbeans.ContextResourceMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.Object", "org.apache.catalina.mbeans.ContextResourceMBean.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["void", "org.apache.catalina.mbeans.ContextResourceMBean.setAttribute(javax.management.Attribute)", "public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["org.apache.catalina.mbeans.GlobalResourcesLifecycleListener", "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener()", "public org.apache.catalina.mbeans.GlobalResourcesLifecycleListener()"], ["void", "org.apache.catalina.mbeans.GlobalResourcesLifecycleListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.mbeans.GroupMBean", "org.apache.catalina.mbeans.GroupMBean()", "public org.apache.catalina.mbeans.GroupMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.String[]", "org.apache.catalina.mbeans.GroupMBean.getRoles()", "public java.lang.String[] getRoles()"], ["java.lang.String[]", "org.apache.catalina.mbeans.GroupMBean.getUsers()", "public java.lang.String[] getUsers()"], ["void", "org.apache.catalina.mbeans.GroupMBean.addRole(java.lang.String)", "public void addRole(java.lang.String)"], ["void", "org.apache.catalina.mbeans.GroupMBean.removeRole(java.lang.String)", "public void removeRole(java.lang.String)"], ["org.apache.catalina.mbeans.MBeanDumper", "org.apache.catalina.mbeans.MBeanDumper()", "public org.apache.catalina.mbeans.MBeanDumper()"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanDumper.dumpBeans(javax.management.MBeanServer, java.util.Set<javax.management.ObjectName>)", "public static java.lang.String dumpBeans(javax.management.MBeanServer, java.util.Set<javax.management.ObjectName>)"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanDumper.escape(java.lang.String)", "public static java.lang.String escape(java.lang.String)"], ["org.apache.catalina.mbeans.MBeanFactory", "org.apache.catalina.mbeans.MBeanFactory()", "public org.apache.catalina.mbeans.MBeanFactory()"], ["void", "org.apache.catalina.mbeans.MBeanFactory.setContainer(java.lang.Object)", "public void setContainer(java.lang.Object)"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createAjpConnector(java.lang.String, java.lang.String, int)", "public java.lang.String createAjpConnector(java.lang.String, java.lang.String, int) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createDataSourceRealm(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public java.lang.String createDataSourceRealm(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createHttpConnector(java.lang.String, java.lang.String, int)", "public java.lang.String createHttpConnector(java.lang.String, java.lang.String, int) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createHttpsConnector(java.lang.String, java.lang.String, int)", "public java.lang.String createHttpsConnector(java.lang.String, java.lang.String, int) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createJDBCRealm(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public java.lang.String createJDBCRealm(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createJNDIRealm(java.lang.String)", "public java.lang.String createJNDIRealm(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createMemoryRealm(java.lang.String)", "public java.lang.String createMemoryRealm(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createStandardContext(java.lang.String, java.lang.String, java.lang.String)", "public java.lang.String createStandardContext(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createStandardContext(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public java.lang.String createStandardContext(java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createStandardHost(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, boolean)", "public java.lang.String createStandardHost(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, boolean) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createStandardServiceEngine(java.lang.String, java.lang.String, java.lang.String)", "public java.lang.String createStandardServiceEngine(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createStandardManager(java.lang.String)", "public java.lang.String createStandardManager(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createUserDatabaseRealm(java.lang.String, java.lang.String)", "public java.lang.String createUserDatabaseRealm(java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createValve(java.lang.String, java.lang.String)", "public java.lang.String createValve(java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.mbeans.MBeanFactory.createWebappLoader(java.lang.String)", "public java.lang.String createWebappLoader(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeConnector(java.lang.String)", "public void removeConnector(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeContext(java.lang.String)", "public void removeContext(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeHost(java.lang.String)", "public void removeHost(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeLoader(java.lang.String)", "public void removeLoader(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeManager(java.lang.String)", "public void removeManager(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeRealm(java.lang.String)", "public void removeRealm(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeService(java.lang.String)", "public void removeService(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanFactory.removeValve(java.lang.String)", "public void removeValve(java.lang.String) throws java.lang.Exception"], ["org.apache.catalina.mbeans.MBeanUtils", "org.apache.catalina.mbeans.MBeanUtils()", "public org.apache.catalina.mbeans.MBeanUtils()"], ["javax.management.DynamicMBean", "org.apache.catalina.mbeans.MBeanUtils.createMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)", "public static javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment) throws java.lang.Exception"], ["javax.management.DynamicMBean", "org.apache.catalina.mbeans.MBeanUtils.createMBean(org.apache.tomcat.util.descriptor.web.ContextResource)", "public static javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResource) throws java.lang.Exception"], ["javax.management.DynamicMBean", "org.apache.catalina.mbeans.MBeanUtils.createMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)", "public static javax.management.DynamicMBean createMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink) throws java.lang.Exception"], ["javax.management.ObjectName", "org.apache.catalina.mbeans.MBeanUtils.createObjectName(java.lang.String, org.apache.tomcat.util.descriptor.web.ContextEnvironment)", "public static javax.management.ObjectName createObjectName(java.lang.String, org.apache.tomcat.util.descriptor.web.ContextEnvironment) throws javax.management.MalformedObjectNameException"], ["javax.management.ObjectName", "org.apache.catalina.mbeans.MBeanUtils.createObjectName(java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResource)", "public static javax.management.ObjectName createObjectName(java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResource) throws javax.management.MalformedObjectNameException"], ["javax.management.ObjectName", "org.apache.catalina.mbeans.MBeanUtils.createObjectName(java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResourceLink)", "public static javax.management.ObjectName createObjectName(java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResourceLink) throws javax.management.MalformedObjectNameException"], ["synchronized", "org.apache.catalina.mbeans.MBeanUtils.org.apache.tomcat.util.modeler.Registry createRegistry()", "public static synchronized org.apache.tomcat.util.modeler.Registry createRegistry()"], ["synchronized", "org.apache.catalina.mbeans.MBeanUtils.javax.management.MBeanServer createServer()", "public static synchronized javax.management.MBeanServer createServer()"], ["void", "org.apache.catalina.mbeans.MBeanUtils.destroyMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment)", "public static void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextEnvironment) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanUtils.destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResource)", "public static void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResource) throws java.lang.Exception"], ["void", "org.apache.catalina.mbeans.MBeanUtils.destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink)", "public static void destroyMBean(org.apache.tomcat.util.descriptor.web.ContextResourceLink) throws java.lang.Exception"], ["org.apache.catalina.mbeans.MemoryUserDatabaseMBean", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean()", "public org.apache.catalina.mbeans.MemoryUserDatabaseMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.String[]", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.getGroups()", "public java.lang.String[] getGroups()"], ["java.lang.String[]", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.getRoles()", "public java.lang.String[] getRoles()"], ["java.lang.String[]", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.getUsers()", "public java.lang.String[] getUsers()"], ["java.lang.String", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.createGroup(java.lang.String, java.lang.String)", "public java.lang.String createGroup(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.createRole(java.lang.String, java.lang.String)", "public java.lang.String createRole(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.createUser(java.lang.String, java.lang.String, java.lang.String)", "public java.lang.String createUser(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.findGroup(java.lang.String)", "public java.lang.String findGroup(java.lang.String)"], ["java.lang.String", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.findRole(java.lang.String)", "public java.lang.String findRole(java.lang.String)"], ["java.lang.String", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.findUser(java.lang.String)", "public java.lang.String findUser(java.lang.String)"], ["void", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.removeGroup(java.lang.String)", "public void removeGroup(java.lang.String)"], ["void", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.removeRole(java.lang.String)", "public void removeRole(java.lang.String)"], ["void", "org.apache.catalina.mbeans.MemoryUserDatabaseMBean.removeUser(java.lang.String)", "public void removeUser(java.lang.String)"], ["org.apache.catalina.mbeans.NamingResourcesMBean", "org.apache.catalina.mbeans.NamingResourcesMBean()", "public org.apache.catalina.mbeans.NamingResourcesMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.String[]", "org.apache.catalina.mbeans.NamingResourcesMBean.getEnvironments()", "public java.lang.String[] getEnvironments()"], ["java.lang.String[]", "org.apache.catalina.mbeans.NamingResourcesMBean.getResources()", "public java.lang.String[] getResources()"], ["java.lang.String[]", "org.apache.catalina.mbeans.NamingResourcesMBean.getResourceLinks()", "public java.lang.String[] getResourceLinks()"], ["java.lang.String", "org.apache.catalina.mbeans.NamingResourcesMBean.addEnvironment(java.lang.String, java.lang.String, java.lang.String)", "public java.lang.String addEnvironment(java.lang.String, java.lang.String, java.lang.String) throws javax.management.MalformedObjectNameException"], ["java.lang.String", "org.apache.catalina.mbeans.NamingResourcesMBean.addResource(java.lang.String, java.lang.String)", "public java.lang.String addResource(java.lang.String, java.lang.String) throws javax.management.MalformedObjectNameException"], ["java.lang.String", "org.apache.catalina.mbeans.NamingResourcesMBean.addResourceLink(java.lang.String, java.lang.String)", "public java.lang.String addResourceLink(java.lang.String, java.lang.String) throws javax.management.MalformedObjectNameException"], ["void", "org.apache.catalina.mbeans.NamingResourcesMBean.removeEnvironment(java.lang.String)", "public void removeEnvironment(java.lang.String)"], ["void", "org.apache.catalina.mbeans.NamingResourcesMBean.removeResource(java.lang.String)", "public void removeResource(java.lang.String)"], ["void", "org.apache.catalina.mbeans.NamingResourcesMBean.removeResourceLink(java.lang.String)", "public void removeResourceLink(java.lang.String)"], ["org.apache.catalina.mbeans.RoleMBean", "org.apache.catalina.mbeans.RoleMBean()", "public org.apache.catalina.mbeans.RoleMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["org.apache.catalina.mbeans.ServiceMBean", "org.apache.catalina.mbeans.ServiceMBean()", "public org.apache.catalina.mbeans.ServiceMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.catalina.mbeans.ServiceMBean.addConnector(java.lang.String, int, boolean, boolean)", "public void addConnector(java.lang.String, int, boolean, boolean) throws javax.management.MBeanException"], ["void", "org.apache.catalina.mbeans.ServiceMBean.addExecutor(java.lang.String)", "public void addExecutor(java.lang.String) throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ServiceMBean.findConnectors()", "public java.lang.String[] findConnectors() throws javax.management.MBeanException"], ["java.lang.String[]", "org.apache.catalina.mbeans.ServiceMBean.findExecutors()", "public java.lang.String[] findExecutors() throws javax.management.MBeanException"], ["java.lang.String", "org.apache.catalina.mbeans.ServiceMBean.getExecutor(java.lang.String)", "public java.lang.String getExecutor(java.lang.String) throws javax.management.MBeanException"], ["org.apache.catalina.mbeans.UserMBean", "org.apache.catalina.mbeans.UserMBean()", "public org.apache.catalina.mbeans.UserMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.String[]", "org.apache.catalina.mbeans.UserMBean.getGroups()", "public java.lang.String[] getGroups()"], ["java.lang.String[]", "org.apache.catalina.mbeans.UserMBean.getRoles()", "public java.lang.String[] getRoles()"], ["void", "org.apache.catalina.mbeans.UserMBean.addGroup(java.lang.String)", "public void addGroup(java.lang.String)"], ["void", "org.apache.catalina.mbeans.UserMBean.addRole(java.lang.String)", "public void addRole(java.lang.String)"], ["void", "org.apache.catalina.mbeans.UserMBean.removeGroup(java.lang.String)", "public void removeGroup(java.lang.String)"], ["void", "org.apache.catalina.mbeans.UserMBean.removeRole(java.lang.String)", "public void removeRole(java.lang.String)"], ["org.apache.catalina.realm.CombinedRealm", "org.apache.catalina.realm.CombinedRealm()", "public org.apache.catalina.realm.CombinedRealm()"], ["void", "org.apache.catalina.realm.CombinedRealm.addRealm(org.apache.catalina.Realm)", "public void addRealm(org.apache.catalina.Realm)"], ["javax.management.ObjectName[]", "org.apache.catalina.realm.CombinedRealm.getRealms()", "public javax.management.ObjectName[] getRealms()"], ["org.apache.catalina.Realm[]", "org.apache.catalina.realm.CombinedRealm.getNestedRealms()", "public org.apache.catalina.Realm[] getNestedRealms()"], ["java.security.Principal", "org.apache.catalina.realm.CombinedRealm.authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.CombinedRealm.authenticate(java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.realm.CombinedRealm.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["java.security.Principal", "org.apache.catalina.realm.CombinedRealm.authenticate(java.security.cert.X509Certificate[])", "public java.security.Principal authenticate(java.security.cert.X509Certificate[])"], ["java.security.Principal", "org.apache.catalina.realm.CombinedRealm.authenticate(org.ietf.jgss.GSSContext, boolean)", "public java.security.Principal authenticate(org.ietf.jgss.GSSContext, boolean)"], ["org.apache.catalina.realm.Constants", "org.apache.catalina.realm.Constants()", "public org.apache.catalina.realm.Constants()"], ["org.apache.catalina.realm.DataSourceRealm", "org.apache.catalina.realm.DataSourceRealm()", "public org.apache.catalina.realm.DataSourceRealm()"], ["java.lang.String", "org.apache.catalina.realm.DataSourceRealm.getDataSourceName()", "public java.lang.String getDataSourceName()"], ["void", "org.apache.catalina.realm.DataSourceRealm.setDataSourceName(java.lang.String)", "public void setDataSourceName(java.lang.String)"], ["boolean", "org.apache.catalina.realm.DataSourceRealm.getLocalDataSource()", "public boolean getLocalDataSource()"], ["void", "org.apache.catalina.realm.DataSourceRealm.setLocalDataSource(boolean)", "public void setLocalDataSource(boolean)"], ["java.lang.String", "org.apache.catalina.realm.DataSourceRealm.getRoleNameCol()", "public java.lang.String getRoleNameCol()"], ["void", "org.apache.catalina.realm.DataSourceRealm.setRoleNameCol(java.lang.String)", "public void setRoleNameCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.DataSourceRealm.getUserCredCol()", "public java.lang.String getUserCredCol()"], ["void", "org.apache.catalina.realm.DataSourceRealm.setUserCredCol(java.lang.String)", "public void setUserCredCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.DataSourceRealm.getUserNameCol()", "public java.lang.String getUserNameCol()"], ["void", "org.apache.catalina.realm.DataSourceRealm.setUserNameCol(java.lang.String)", "public void setUserNameCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.DataSourceRealm.getUserRoleTable()", "public java.lang.String getUserRoleTable()"], ["void", "org.apache.catalina.realm.DataSourceRealm.setUserRoleTable(java.lang.String)", "public void setUserRoleTable(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.DataSourceRealm.getUserTable()", "public java.lang.String getUserTable()"], ["void", "org.apache.catalina.realm.DataSourceRealm.setUserTable(java.lang.String)", "public void setUserTable(java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.DataSourceRealm.authenticate(java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["org.apache.catalina.realm.GenericPrincipal", "org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>)", "public org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>)"], ["org.apache.catalina.realm.GenericPrincipal", "org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.security.Principal)", "public org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.security.Principal)"], ["org.apache.catalina.realm.GenericPrincipal", "org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.security.Principal, javax.security.auth.login.LoginContext)", "public org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.security.Principal, javax.security.auth.login.LoginContext)"], ["org.apache.catalina.realm.GenericPrincipal", "org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.security.Principal, javax.security.auth.login.LoginContext, org.ietf.jgss.GSSCredential)", "public org.apache.catalina.realm.GenericPrincipal(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.security.Principal, javax.security.auth.login.LoginContext, org.ietf.jgss.GSSCredential)"], ["java.lang.String", "org.apache.catalina.realm.GenericPrincipal.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.catalina.realm.GenericPrincipal.getPassword()", "public java.lang.String getPassword()"], ["java.lang.String[]", "org.apache.catalina.realm.GenericPrincipal.getRoles()", "public java.lang.String[] getRoles()"], ["java.security.Principal", "org.apache.catalina.realm.GenericPrincipal.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["org.ietf.jgss.GSSCredential", "org.apache.catalina.realm.GenericPrincipal.getGssCredential()", "public org.ietf.jgss.GSSCredential getGssCredential()"], ["boolean", "org.apache.catalina.realm.GenericPrincipal.hasRole(java.lang.String)", "public boolean hasRole(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.GenericPrincipal.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.realm.GenericPrincipal.logout()", "public void logout() throws java.lang.Exception"], ["org.apache.catalina.realm.JAASCallbackHandler", "org.apache.catalina.realm.JAASCallbackHandler(org.apache.catalina.realm.JAASRealm, java.lang.String, java.lang.String)", "public org.apache.catalina.realm.JAASCallbackHandler(org.apache.catalina.realm.JAASRealm, java.lang.String, java.lang.String)"], ["org.apache.catalina.realm.JAASCallbackHandler", "org.apache.catalina.realm.JAASCallbackHandler(org.apache.catalina.realm.JAASRealm, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.realm.JAASCallbackHandler(org.apache.catalina.realm.JAASRealm, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.realm.JAASCallbackHandler.handle(javax.security.auth.callback.Callback[])", "public void handle(javax.security.auth.callback.Callback[]) throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException"], ["org.apache.catalina.realm.JAASMemoryLoginModule", "org.apache.catalina.realm.JAASMemoryLoginModule()", "public org.apache.catalina.realm.JAASMemoryLoginModule()"], ["boolean", "org.apache.catalina.realm.JAASMemoryLoginModule.abort()", "public boolean abort() throws javax.security.auth.login.LoginException"], ["boolean", "org.apache.catalina.realm.JAASMemoryLoginModule.commit()", "public boolean commit() throws javax.security.auth.login.LoginException"], ["void", "org.apache.catalina.realm.JAASMemoryLoginModule.initialize(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler, java.util.Map<java.lang.String, ?>, java.util.Map<java.lang.String, ?>)", "public void initialize(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler, java.util.Map<java.lang.String, ?>, java.util.Map<java.lang.String, ?>)"], ["boolean", "org.apache.catalina.realm.JAASMemoryLoginModule.login()", "public boolean login() throws javax.security.auth.login.LoginException"], ["boolean", "org.apache.catalina.realm.JAASMemoryLoginModule.logout()", "public boolean logout() throws javax.security.auth.login.LoginException"], ["org.apache.catalina.realm.JAASRealm", "org.apache.catalina.realm.JAASRealm()", "public org.apache.catalina.realm.JAASRealm()"], ["java.lang.String", "org.apache.catalina.realm.JAASRealm.getConfigFile()", "public java.lang.String getConfigFile()"], ["void", "org.apache.catalina.realm.JAASRealm.setConfigFile(java.lang.String)", "public void setConfigFile(java.lang.String)"], ["void", "org.apache.catalina.realm.JAASRealm.setAppName(java.lang.String)", "public void setAppName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JAASRealm.getAppName()", "public java.lang.String getAppName()"], ["void", "org.apache.catalina.realm.JAASRealm.setUseContextClassLoader(boolean)", "public void setUseContextClassLoader(boolean)"], ["boolean", "org.apache.catalina.realm.JAASRealm.isUseContextClassLoader()", "public boolean isUseContextClassLoader()"], ["void", "org.apache.catalina.realm.JAASRealm.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.realm.JAASRealm.getRoleClassNames()", "public java.lang.String getRoleClassNames()"], ["void", "org.apache.catalina.realm.JAASRealm.setRoleClassNames(java.lang.String)", "public void setRoleClassNames(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JAASRealm.getUserClassNames()", "public java.lang.String getUserClassNames()"], ["void", "org.apache.catalina.realm.JAASRealm.setUserClassNames(java.lang.String)", "public void setUserClassNames(java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.JAASRealm.authenticate(java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.JAASRealm.authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.catalina.realm.JDBCRealm", "org.apache.catalina.realm.JDBCRealm()", "public org.apache.catalina.realm.JDBCRealm()"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getConnectionName()", "public java.lang.String getConnectionName()"], ["void", "org.apache.catalina.realm.JDBCRealm.setConnectionName(java.lang.String)", "public void setConnectionName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getConnectionPassword()", "public java.lang.String getConnectionPassword()"], ["void", "org.apache.catalina.realm.JDBCRealm.setConnectionPassword(java.lang.String)", "public void setConnectionPassword(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getConnectionURL()", "public java.lang.String getConnectionURL()"], ["void", "org.apache.catalina.realm.JDBCRealm.setConnectionURL(java.lang.String)", "public void setConnectionURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getDriverName()", "public java.lang.String getDriverName()"], ["void", "org.apache.catalina.realm.JDBCRealm.setDriverName(java.lang.String)", "public void setDriverName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getRoleNameCol()", "public java.lang.String getRoleNameCol()"], ["void", "org.apache.catalina.realm.JDBCRealm.setRoleNameCol(java.lang.String)", "public void setRoleNameCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getUserCredCol()", "public java.lang.String getUserCredCol()"], ["void", "org.apache.catalina.realm.JDBCRealm.setUserCredCol(java.lang.String)", "public void setUserCredCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getUserNameCol()", "public java.lang.String getUserNameCol()"], ["void", "org.apache.catalina.realm.JDBCRealm.setUserNameCol(java.lang.String)", "public void setUserNameCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getUserRoleTable()", "public java.lang.String getUserRoleTable()"], ["void", "org.apache.catalina.realm.JDBCRealm.setUserRoleTable(java.lang.String)", "public void setUserRoleTable(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JDBCRealm.getUserTable()", "public java.lang.String getUserTable()"], ["void", "org.apache.catalina.realm.JDBCRealm.setUserTable(java.lang.String)", "public void setUserTable(java.lang.String)"], ["synchronized", "org.apache.catalina.realm.JDBCRealm.java.security.Principal authenticate(java.lang.String, java.lang.String)", "public synchronized java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["synchronized", "org.apache.catalina.realm.JDBCRealm.java.security.Principal authenticate(java.sql.Connection, java.lang.String, java.lang.String)", "public synchronized java.security.Principal authenticate(java.sql.Connection, java.lang.String, java.lang.String)"], ["org.apache.catalina.realm.JNDIRealm$User", "org.apache.catalina.realm.JNDIRealm$User(java.lang.String, java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.lang.String)", "public org.apache.catalina.realm.JNDIRealm$User(java.lang.String, java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm$User.getUserName()", "public java.lang.String getUserName()"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm$User.getDN()", "public java.lang.String getDN()"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm$User.getPassword()", "public java.lang.String getPassword()"], ["java.util.List<java.lang.String>", "org.apache.catalina.realm.JNDIRealm$User.getRoles()", "public java.util.List<java.lang.String> getRoles()"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm$User.getUserRoleId()", "public java.lang.String getUserRoleId()"], ["org.apache.catalina.realm.JNDIRealm", "org.apache.catalina.realm.JNDIRealm()", "public org.apache.catalina.realm.JNDIRealm()"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getAuthentication()", "public java.lang.String getAuthentication()"], ["void", "org.apache.catalina.realm.JNDIRealm.setAuthentication(java.lang.String)", "public void setAuthentication(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getConnectionName()", "public java.lang.String getConnectionName()"], ["void", "org.apache.catalina.realm.JNDIRealm.setConnectionName(java.lang.String)", "public void setConnectionName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getConnectionPassword()", "public java.lang.String getConnectionPassword()"], ["void", "org.apache.catalina.realm.JNDIRealm.setConnectionPassword(java.lang.String)", "public void setConnectionPassword(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getConnectionURL()", "public java.lang.String getConnectionURL()"], ["void", "org.apache.catalina.realm.JNDIRealm.setConnectionURL(java.lang.String)", "public void setConnectionURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getContextFactory()", "public java.lang.String getContextFactory()"], ["void", "org.apache.catalina.realm.JNDIRealm.setContextFactory(java.lang.String)", "public void setContextFactory(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getDerefAliases()", "public java.lang.String getDerefAliases()"], ["void", "org.apache.catalina.realm.JNDIRealm.setDerefAliases(java.lang.String)", "public void setDerefAliases(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getProtocol()", "public java.lang.String getProtocol()"], ["void", "org.apache.catalina.realm.JNDIRealm.setProtocol(java.lang.String)", "public void setProtocol(java.lang.String)"], ["boolean", "org.apache.catalina.realm.JNDIRealm.getAdCompat()", "public boolean getAdCompat()"], ["void", "org.apache.catalina.realm.JNDIRealm.setAdCompat(boolean)", "public void setAdCompat(boolean)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getReferrals()", "public java.lang.String getReferrals()"], ["void", "org.apache.catalina.realm.JNDIRealm.setReferrals(java.lang.String)", "public void setReferrals(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getUserBase()", "public java.lang.String getUserBase()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUserBase(java.lang.String)", "public void setUserBase(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getUserSearch()", "public java.lang.String getUserSearch()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUserSearch(java.lang.String)", "public void setUserSearch(java.lang.String)"], ["boolean", "org.apache.catalina.realm.JNDIRealm.getUserSubtree()", "public boolean getUserSubtree()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUserSubtree(boolean)", "public void setUserSubtree(boolean)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getUserRoleName()", "public java.lang.String getUserRoleName()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUserRoleName(java.lang.String)", "public void setUserRoleName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getRoleBase()", "public java.lang.String getRoleBase()"], ["void", "org.apache.catalina.realm.JNDIRealm.setRoleBase(java.lang.String)", "public void setRoleBase(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getRoleName()", "public java.lang.String getRoleName()"], ["void", "org.apache.catalina.realm.JNDIRealm.setRoleName(java.lang.String)", "public void setRoleName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getRoleSearch()", "public java.lang.String getRoleSearch()"], ["void", "org.apache.catalina.realm.JNDIRealm.setRoleSearch(java.lang.String)", "public void setRoleSearch(java.lang.String)"], ["boolean", "org.apache.catalina.realm.JNDIRealm.isRoleSearchAsUser()", "public boolean isRoleSearchAsUser()"], ["void", "org.apache.catalina.realm.JNDIRealm.setRoleSearchAsUser(boolean)", "public void setRoleSearchAsUser(boolean)"], ["boolean", "org.apache.catalina.realm.JNDIRealm.getRoleSubtree()", "public boolean getRoleSubtree()"], ["void", "org.apache.catalina.realm.JNDIRealm.setRoleSubtree(boolean)", "public void setRoleSubtree(boolean)"], ["boolean", "org.apache.catalina.realm.JNDIRealm.getRoleNested()", "public boolean getRoleNested()"], ["void", "org.apache.catalina.realm.JNDIRealm.setRoleNested(boolean)", "public void setRoleNested(boolean)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getUserPassword()", "public java.lang.String getUserPassword()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUserPassword(java.lang.String)", "public void setUserPassword(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getUserRoleAttribute()", "public java.lang.String getUserRoleAttribute()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUserRoleAttribute(java.lang.String)", "public void setUserRoleAttribute(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getUserPattern()", "public java.lang.String getUserPattern()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUserPattern(java.lang.String)", "public void setUserPattern(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getAlternateURL()", "public java.lang.String getAlternateURL()"], ["void", "org.apache.catalina.realm.JNDIRealm.setAlternateURL(java.lang.String)", "public void setAlternateURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getCommonRole()", "public java.lang.String getCommonRole()"], ["void", "org.apache.catalina.realm.JNDIRealm.setCommonRole(java.lang.String)", "public void setCommonRole(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getConnectionTimeout()", "public java.lang.String getConnectionTimeout()"], ["void", "org.apache.catalina.realm.JNDIRealm.setConnectionTimeout(java.lang.String)", "public void setConnectionTimeout(java.lang.String)"], ["long", "org.apache.catalina.realm.JNDIRealm.getSizeLimit()", "public long getSizeLimit()"], ["void", "org.apache.catalina.realm.JNDIRealm.setSizeLimit(long)", "public void setSizeLimit(long)"], ["int", "org.apache.catalina.realm.JNDIRealm.getTimeLimit()", "public int getTimeLimit()"], ["void", "org.apache.catalina.realm.JNDIRealm.setTimeLimit(int)", "public void setTimeLimit(int)"], ["boolean", "org.apache.catalina.realm.JNDIRealm.isUseDelegatedCredential()", "public boolean isUseDelegatedCredential()"], ["void", "org.apache.catalina.realm.JNDIRealm.setUseDelegatedCredential(boolean)", "public void setUseDelegatedCredential(boolean)"], ["java.lang.String", "org.apache.catalina.realm.JNDIRealm.getSpnegoDelegationQop()", "public java.lang.String getSpnegoDelegationQop()"], ["void", "org.apache.catalina.realm.JNDIRealm.setSpnegoDelegationQop(java.lang.String)", "public void setSpnegoDelegationQop(java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.JNDIRealm.authenticate(java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["synchronized", "org.apache.catalina.realm.JNDIRealm.java.security.Principal authenticate(javax.naming.directory.DirContext, java.lang.String, java.lang.String)", "public synchronized java.security.Principal authenticate(javax.naming.directory.DirContext, java.lang.String, java.lang.String) throws javax.naming.NamingException"], ["int", "org.apache.catalina.realm.LockOutRealm$LockRecord.getFailures()", "public int getFailures()"], ["void", "org.apache.catalina.realm.LockOutRealm$LockRecord.setFailures(int)", "public void setFailures(int)"], ["long", "org.apache.catalina.realm.LockOutRealm$LockRecord.getLastFailureTime()", "public long getLastFailureTime()"], ["void", "org.apache.catalina.realm.LockOutRealm$LockRecord.registerFailure()", "public void registerFailure()"], ["org.apache.catalina.realm.LockOutRealm", "org.apache.catalina.realm.LockOutRealm()", "public org.apache.catalina.realm.LockOutRealm()"], ["java.security.Principal", "org.apache.catalina.realm.LockOutRealm.authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.LockOutRealm.authenticate(java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.LockOutRealm.authenticate(java.security.cert.X509Certificate[])", "public java.security.Principal authenticate(java.security.cert.X509Certificate[])"], ["java.security.Principal", "org.apache.catalina.realm.LockOutRealm.authenticate(org.ietf.jgss.GSSContext, boolean)", "public java.security.Principal authenticate(org.ietf.jgss.GSSContext, boolean)"], ["void", "org.apache.catalina.realm.LockOutRealm.unlock(java.lang.String)", "public void unlock(java.lang.String)"], ["int", "org.apache.catalina.realm.LockOutRealm.getFailureCount()", "public int getFailureCount()"], ["void", "org.apache.catalina.realm.LockOutRealm.setFailureCount(int)", "public void setFailureCount(int)"], ["int", "org.apache.catalina.realm.LockOutRealm.getLockOutTime()", "public int getLockOutTime()"], ["void", "org.apache.catalina.realm.LockOutRealm.setLockOutTime(int)", "public void setLockOutTime(int)"], ["int", "org.apache.catalina.realm.LockOutRealm.getCacheSize()", "public int getCacheSize()"], ["void", "org.apache.catalina.realm.LockOutRealm.setCacheSize(int)", "public void setCacheSize(int)"], ["int", "org.apache.catalina.realm.LockOutRealm.getCacheRemovalWarningTime()", "public int getCacheRemovalWarningTime()"], ["void", "org.apache.catalina.realm.LockOutRealm.setCacheRemovalWarningTime(int)", "public void setCacheRemovalWarningTime(int)"], ["org.apache.catalina.realm.MemoryRealm", "org.apache.catalina.realm.MemoryRealm()", "public org.apache.catalina.realm.MemoryRealm()"], ["java.lang.String", "org.apache.catalina.realm.MemoryRealm.getPathname()", "public java.lang.String getPathname()"], ["void", "org.apache.catalina.realm.MemoryRealm.setPathname(java.lang.String)", "public void setPathname(java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.MemoryRealm.authenticate(java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["org.apache.catalina.realm.MemoryRuleSet", "org.apache.catalina.realm.MemoryRuleSet()", "public org.apache.catalina.realm.MemoryRuleSet()"], ["org.apache.catalina.realm.MemoryRuleSet", "org.apache.catalina.realm.MemoryRuleSet(java.lang.String)", "public org.apache.catalina.realm.MemoryRuleSet(java.lang.String)"], ["void", "org.apache.catalina.realm.MemoryRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.catalina.realm.MemoryUserRule", "org.apache.catalina.realm.MemoryUserRule()", "public org.apache.catalina.realm.MemoryUserRule()"], ["void", "org.apache.catalina.realm.MemoryUserRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.catalina.realm.NullRealm", "org.apache.catalina.realm.NullRealm()", "public org.apache.catalina.realm.NullRealm()"], ["boolean", "org.apache.catalina.realm.RealmBase$AllRolesMode.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.catalina.realm.RealmBase$AllRolesMode.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.catalina.realm.RealmBase$AllRolesMode.toString()", "public java.lang.String toString()"], ["org.apache.catalina.realm.RealmBase", "org.apache.catalina.realm.RealmBase()", "public org.apache.catalina.realm.RealmBase()"], ["org.apache.catalina.Container", "org.apache.catalina.realm.RealmBase.getContainer()", "public org.apache.catalina.Container getContainer()"], ["void", "org.apache.catalina.realm.RealmBase.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.getAllRolesMode()", "public java.lang.String getAllRolesMode()"], ["void", "org.apache.catalina.realm.RealmBase.setAllRolesMode(java.lang.String)", "public void setAllRolesMode(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.getDigest()", "public java.lang.String getDigest()"], ["void", "org.apache.catalina.realm.RealmBase.setDigest(java.lang.String)", "public void setDigest(java.lang.String)"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.getDigestEncoding()", "public java.lang.String getDigestEncoding()"], ["void", "org.apache.catalina.realm.RealmBase.setDigestEncoding(java.lang.String)", "public void setDigestEncoding(java.lang.String)"], ["boolean", "org.apache.catalina.realm.RealmBase.getValidate()", "public boolean getValidate()"], ["void", "org.apache.catalina.realm.RealmBase.setValidate(boolean)", "public void setValidate(boolean)"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.getX509UsernameRetrieverClassName()", "public java.lang.String getX509UsernameRetrieverClassName()"], ["void", "org.apache.catalina.realm.RealmBase.setX509UsernameRetrieverClassName(java.lang.String)", "public void setX509UsernameRetrieverClassName(java.lang.String)"], ["boolean", "org.apache.catalina.realm.RealmBase.isStripRealmForGss()", "public boolean isStripRealmForGss()"], ["void", "org.apache.catalina.realm.RealmBase.setStripRealmForGss(boolean)", "public void setStripRealmForGss(boolean)"], ["void", "org.apache.catalina.realm.RealmBase.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["java.security.Principal", "org.apache.catalina.realm.RealmBase.authenticate(java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.RealmBase.authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public java.security.Principal authenticate(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.security.Principal", "org.apache.catalina.realm.RealmBase.authenticate(java.security.cert.X509Certificate[])", "public java.security.Principal authenticate(java.security.cert.X509Certificate[])"], ["java.security.Principal", "org.apache.catalina.realm.RealmBase.authenticate(org.ietf.jgss.GSSContext, boolean)", "public java.security.Principal authenticate(org.ietf.jgss.GSSContext, boolean)"], ["void", "org.apache.catalina.realm.RealmBase.backgroundProcess()", "public void backgroundProcess()"], ["org.apache.tomcat.util.descriptor.web.SecurityConstraint[]", "org.apache.catalina.realm.RealmBase.findSecurityConstraints(org.apache.catalina.connector.Request, org.apache.catalina.Context)", "public org.apache.tomcat.util.descriptor.web.SecurityConstraint[] findSecurityConstraints(org.apache.catalina.connector.Request, org.apache.catalina.Context)"], ["boolean", "org.apache.catalina.realm.RealmBase.hasResourcePermission(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.tomcat.util.descriptor.web.SecurityConstraint[], org.apache.catalina.Context)", "public boolean hasResourcePermission(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.tomcat.util.descriptor.web.SecurityConstraint[], org.apache.catalina.Context) throws java.io.IOException"], ["boolean", "org.apache.catalina.realm.RealmBase.hasRole(org.apache.catalina.Wrapper, java.security.Principal, java.lang.String)", "public boolean hasRole(org.apache.catalina.Wrapper, java.security.Principal, java.lang.String)"], ["boolean", "org.apache.catalina.realm.RealmBase.hasUserDataPermission(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.tomcat.util.descriptor.web.SecurityConstraint[])", "public boolean hasUserDataPermission(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.tomcat.util.descriptor.web.SecurityConstraint[]) throws java.io.IOException"], ["void", "org.apache.catalina.realm.RealmBase.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.Digest(java.lang.String, java.lang.String, java.lang.String)", "public static final java.lang.String Digest(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.realm.RealmBase.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.getObjectNameKeyProperties()", "public java.lang.String getObjectNameKeyProperties()"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.getDomainInternal()", "public java.lang.String getDomainInternal()"], ["java.lang.String", "org.apache.catalina.realm.RealmBase.getRealmPath()", "public java.lang.String getRealmPath()"], ["void", "org.apache.catalina.realm.RealmBase.setRealmPath(java.lang.String)", "public void setRealmPath(java.lang.String)"], ["org.apache.catalina.realm.UserDatabaseRealm", "org.apache.catalina.realm.UserDatabaseRealm()", "public org.apache.catalina.realm.UserDatabaseRealm()"], ["java.lang.String", "org.apache.catalina.realm.UserDatabaseRealm.getResourceName()", "public java.lang.String getResourceName()"], ["void", "org.apache.catalina.realm.UserDatabaseRealm.setResourceName(java.lang.String)", "public void setResourceName(java.lang.String)"], ["boolean", "org.apache.catalina.realm.UserDatabaseRealm.hasRole(org.apache.catalina.Wrapper, java.security.Principal, java.lang.String)", "public boolean hasRole(org.apache.catalina.Wrapper, java.security.Principal, java.lang.String)"], ["org.apache.catalina.realm.X509SubjectDnRetriever", "org.apache.catalina.realm.X509SubjectDnRetriever()", "public org.apache.catalina.realm.X509SubjectDnRetriever()"], ["java.lang.String", "org.apache.catalina.realm.X509SubjectDnRetriever.getUsername(java.security.cert.X509Certificate)", "public java.lang.String getUsername(java.security.cert.X509Certificate)"], ["org.apache.catalina.security.Constants", "org.apache.catalina.security.Constants()", "public org.apache.catalina.security.Constants()"], ["org.apache.catalina.security.SecurityClassLoad", "org.apache.catalina.security.SecurityClassLoad()", "public org.apache.catalina.security.SecurityClassLoad()"], ["void", "org.apache.catalina.security.SecurityClassLoad.securityClassLoad(java.lang.ClassLoader)", "public static void securityClassLoad(java.lang.ClassLoader) throws java.lang.Exception"], ["org.apache.catalina.security.SecurityConfig", "org.apache.catalina.security.SecurityConfig.newInstance()", "public static org.apache.catalina.security.SecurityConfig newInstance()"], ["void", "org.apache.catalina.security.SecurityConfig.setPackageAccess()", "public void setPackageAccess()"], ["void", "org.apache.catalina.security.SecurityConfig.setPackageDefinition()", "public void setPackageDefinition()"], ["org.apache.catalina.security.SecurityListener", "org.apache.catalina.security.SecurityListener()", "public org.apache.catalina.security.SecurityListener()"], ["void", "org.apache.catalina.security.SecurityListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["void", "org.apache.catalina.security.SecurityListener.setCheckedOsUsers(java.lang.String)", "public void setCheckedOsUsers(java.lang.String)"], ["java.lang.String", "org.apache.catalina.security.SecurityListener.getCheckedOsUsers()", "public java.lang.String getCheckedOsUsers()"], ["void", "org.apache.catalina.security.SecurityListener.setMinimumUmask(java.lang.String)", "public void setMinimumUmask(java.lang.String)"], ["java.lang.String", "org.apache.catalina.security.SecurityListener.getMinimumUmask()", "public java.lang.String getMinimumUmask()"], ["java.lang.Void", "org.apache.catalina.security.SecurityUtil$1.run()", "public java.lang.Void run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.security.SecurityUtil$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.security.SecurityUtil", "org.apache.catalina.security.SecurityUtil()", "public org.apache.catalina.security.SecurityUtil()"], ["void", "org.apache.catalina.security.SecurityUtil.doAsPrivilege(java.lang.String, javax.servlet.Servlet)", "public static void doAsPrivilege(java.lang.String, javax.servlet.Servlet) throws java.lang.Exception"], ["void", "org.apache.catalina.security.SecurityUtil.doAsPrivilege(java.lang.String, javax.servlet.Servlet, java.lang.Class<?>[], java.lang.Object[])", "public static void doAsPrivilege(java.lang.String, javax.servlet.Servlet, java.lang.Class<?>[], java.lang.Object[]) throws java.lang.Exception"], ["void", "org.apache.catalina.security.SecurityUtil.doAsPrivilege(java.lang.String, javax.servlet.Servlet, java.lang.Class<?>[], java.lang.Object[], java.security.Principal)", "public static void doAsPrivilege(java.lang.String, javax.servlet.Servlet, java.lang.Class<?>[], java.lang.Object[], java.security.Principal) throws java.lang.Exception"], ["void", "org.apache.catalina.security.SecurityUtil.doAsPrivilege(java.lang.String, javax.servlet.Filter)", "public static void doAsPrivilege(java.lang.String, javax.servlet.Filter) throws java.lang.Exception"], ["void", "org.apache.catalina.security.SecurityUtil.doAsPrivilege(java.lang.String, javax.servlet.Filter, java.lang.Class<?>[], java.lang.Object[])", "public static void doAsPrivilege(java.lang.String, javax.servlet.Filter, java.lang.Class<?>[], java.lang.Object[]) throws java.lang.Exception"], ["void", "org.apache.catalina.security.SecurityUtil.doAsPrivilege(java.lang.String, javax.servlet.Filter, java.lang.Class<?>[], java.lang.Object[], java.security.Principal)", "public static void doAsPrivilege(java.lang.String, javax.servlet.Filter, java.lang.Class<?>[], java.lang.Object[], java.security.Principal) throws java.lang.Exception"], ["void", "org.apache.catalina.security.SecurityUtil.remove(java.lang.Object)", "public static void remove(java.lang.Object)"], ["boolean", "org.apache.catalina.security.SecurityUtil.isPackageProtectionEnabled()", "public static boolean isPackageProtectionEnabled()"], ["java.lang.String", "org.apache.catalina.servlets.CGIServlet$CGIEnvironment.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.servlets.CGIServlet$CGIRunner$1.run()", "public void run()"], ["int", "org.apache.catalina.servlets.CGIServlet$HTTPHeaderInputStream.read()", "public int read() throws java.io.IOException"], ["org.apache.catalina.servlets.CGIServlet", "org.apache.catalina.servlets.CGIServlet()", "public org.apache.catalina.servlets.CGIServlet()"], ["void", "org.apache.catalina.servlets.CGIServlet.init(javax.servlet.ServletConfig)", "public void init(javax.servlet.ServletConfig) throws javax.servlet.ServletException"], ["org.apache.catalina.servlets.Constants", "org.apache.catalina.servlets.Constants()", "public org.apache.catalina.servlets.Constants()"], ["boolean", "org.apache.catalina.servlets.DefaultServlet$Range.validate()", "public boolean validate()"], ["org.xml.sax.InputSource", "org.apache.catalina.servlets.DefaultServlet$SecureEntityResolver.resolveEntity(java.lang.String, java.lang.String)", "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"], ["org.xml.sax.InputSource", "org.apache.catalina.servlets.DefaultServlet$SecureEntityResolver.getExternalSubset(java.lang.String, java.lang.String)", "public org.xml.sax.InputSource getExternalSubset(java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"], ["org.xml.sax.InputSource", "org.apache.catalina.servlets.DefaultServlet$SecureEntityResolver.resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"], ["org.apache.catalina.servlets.DefaultServlet", "org.apache.catalina.servlets.DefaultServlet()", "public org.apache.catalina.servlets.DefaultServlet()"], ["void", "org.apache.catalina.servlets.DefaultServlet.destroy()", "public void destroy()"], ["void", "org.apache.catalina.servlets.DefaultServlet.init()", "public void init() throws javax.servlet.ServletException"], ["org.apache.catalina.servlets.WebdavServlet$LockInfo", "org.apache.catalina.servlets.WebdavServlet$LockInfo(org.apache.catalina.servlets.WebdavServlet)", "public org.apache.catalina.servlets.WebdavServlet$LockInfo(org.apache.catalina.servlets.WebdavServlet)"], ["java.lang.String", "org.apache.catalina.servlets.WebdavServlet$LockInfo.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.servlets.WebdavServlet$LockInfo.hasExpired()", "public boolean hasExpired()"], ["boolean", "org.apache.catalina.servlets.WebdavServlet$LockInfo.isExclusive()", "public boolean isExclusive()"], ["void", "org.apache.catalina.servlets.WebdavServlet$LockInfo.toXML(org.apache.catalina.util.XMLWriter)", "public void toXML(org.apache.catalina.util.XMLWriter)"], ["org.apache.catalina.servlets.WebdavServlet$WebdavResolver", "org.apache.catalina.servlets.WebdavServlet$WebdavResolver(javax.servlet.ServletContext)", "public org.apache.catalina.servlets.WebdavServlet$WebdavResolver(javax.servlet.ServletContext)"], ["org.xml.sax.InputSource", "org.apache.catalina.servlets.WebdavServlet$WebdavResolver.resolveEntity(java.lang.String, java.lang.String)", "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String)"], ["org.apache.catalina.servlets.WebdavServlet", "org.apache.catalina.servlets.WebdavServlet()", "public org.apache.catalina.servlets.WebdavServlet()"], ["void", "org.apache.catalina.servlets.WebdavServlet.init()", "public void init() throws javax.servlet.ServletException"], ["java.lang.String", "org.apache.catalina.servlets.WebdavStatus.getStatusText(int)", "public static java.lang.String getStatusText(int)"], ["org.apache.catalina.session.Constants", "org.apache.catalina.session.Constants()", "public org.apache.catalina.session.Constants()"], ["org.apache.catalina.session.FileStore", "org.apache.catalina.session.FileStore()", "public org.apache.catalina.session.FileStore()"], ["java.lang.String", "org.apache.catalina.session.FileStore.getDirectory()", "public java.lang.String getDirectory()"], ["void", "org.apache.catalina.session.FileStore.setDirectory(java.lang.String)", "public void setDirectory(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.FileStore.getThreadName()", "public java.lang.String getThreadName()"], ["java.lang.String", "org.apache.catalina.session.FileStore.getStoreName()", "public java.lang.String getStoreName()"], ["int", "org.apache.catalina.session.FileStore.getSize()", "public int getSize() throws java.io.IOException"], ["void", "org.apache.catalina.session.FileStore.clear()", "public void clear() throws java.io.IOException"], ["java.lang.String[]", "org.apache.catalina.session.FileStore.keys()", "public java.lang.String[] keys() throws java.io.IOException"], ["org.apache.catalina.Session", "org.apache.catalina.session.FileStore.load(java.lang.String)", "public org.apache.catalina.Session load(java.lang.String) throws java.lang.ClassNotFoundException, java.io.IOException"], ["void", "org.apache.catalina.session.FileStore.remove(java.lang.String)", "public void remove(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.session.FileStore.save(org.apache.catalina.Session)", "public void save(org.apache.catalina.Session) throws java.io.IOException"], ["org.apache.catalina.session.JDBCStore", "org.apache.catalina.session.JDBCStore()", "public org.apache.catalina.session.JDBCStore()"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getThreadName()", "public java.lang.String getThreadName()"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getStoreName()", "public java.lang.String getStoreName()"], ["void", "org.apache.catalina.session.JDBCStore.setDriverName(java.lang.String)", "public void setDriverName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getDriverName()", "public java.lang.String getDriverName()"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getConnectionName()", "public java.lang.String getConnectionName()"], ["void", "org.apache.catalina.session.JDBCStore.setConnectionName(java.lang.String)", "public void setConnectionName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getConnectionPassword()", "public java.lang.String getConnectionPassword()"], ["void", "org.apache.catalina.session.JDBCStore.setConnectionPassword(java.lang.String)", "public void setConnectionPassword(java.lang.String)"], ["void", "org.apache.catalina.session.JDBCStore.setConnectionURL(java.lang.String)", "public void setConnectionURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getConnectionURL()", "public java.lang.String getConnectionURL()"], ["void", "org.apache.catalina.session.JDBCStore.setSessionTable(java.lang.String)", "public void setSessionTable(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getSessionTable()", "public java.lang.String getSessionTable()"], ["void", "org.apache.catalina.session.JDBCStore.setSessionAppCol(java.lang.String)", "public void setSessionAppCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getSessionAppCol()", "public java.lang.String getSessionAppCol()"], ["void", "org.apache.catalina.session.JDBCStore.setSessionIdCol(java.lang.String)", "public void setSessionIdCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getSessionIdCol()", "public java.lang.String getSessionIdCol()"], ["void", "org.apache.catalina.session.JDBCStore.setSessionDataCol(java.lang.String)", "public void setSessionDataCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getSessionDataCol()", "public java.lang.String getSessionDataCol()"], ["void", "org.apache.catalina.session.JDBCStore.setSessionValidCol(java.lang.String)", "public void setSessionValidCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getSessionValidCol()", "public java.lang.String getSessionValidCol()"], ["void", "org.apache.catalina.session.JDBCStore.setSessionMaxInactiveCol(java.lang.String)", "public void setSessionMaxInactiveCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getSessionMaxInactiveCol()", "public java.lang.String getSessionMaxInactiveCol()"], ["void", "org.apache.catalina.session.JDBCStore.setSessionLastAccessedCol(java.lang.String)", "public void setSessionLastAccessedCol(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getSessionLastAccessedCol()", "public java.lang.String getSessionLastAccessedCol()"], ["void", "org.apache.catalina.session.JDBCStore.setDataSourceName(java.lang.String)", "public void setDataSourceName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.JDBCStore.getDataSourceName()", "public java.lang.String getDataSourceName()"], ["java.lang.String[]", "org.apache.catalina.session.JDBCStore.keys()", "public java.lang.String[] keys() throws java.io.IOException"], ["int", "org.apache.catalina.session.JDBCStore.getSize()", "public int getSize() throws java.io.IOException"], ["org.apache.catalina.Session", "org.apache.catalina.session.JDBCStore.load(java.lang.String)", "public org.apache.catalina.Session load(java.lang.String) throws java.lang.ClassNotFoundException, java.io.IOException"], ["void", "org.apache.catalina.session.JDBCStore.remove(java.lang.String)", "public void remove(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.session.JDBCStore.clear()", "public void clear() throws java.io.IOException"], ["void", "org.apache.catalina.session.JDBCStore.save(org.apache.catalina.Session)", "public void save(org.apache.catalina.Session) throws java.io.IOException"], ["org.apache.catalina.session.ManagerBase$SessionTiming", "org.apache.catalina.session.ManagerBase$SessionTiming(long, int)", "public org.apache.catalina.session.ManagerBase$SessionTiming(long, int)"], ["long", "org.apache.catalina.session.ManagerBase$SessionTiming.getTimestamp()", "public long getTimestamp()"], ["int", "org.apache.catalina.session.ManagerBase$SessionTiming.getDuration()", "public int getDuration()"], ["org.apache.catalina.session.ManagerBase", "org.apache.catalina.session.ManagerBase()", "public org.apache.catalina.session.ManagerBase()"], ["org.apache.catalina.Container", "org.apache.catalina.session.ManagerBase.getContainer()", "public org.apache.catalina.Container getContainer()"], ["void", "org.apache.catalina.session.ManagerBase.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["org.apache.catalina.Context", "org.apache.catalina.session.ManagerBase.getContext()", "public org.apache.catalina.Context getContext()"], ["void", "org.apache.catalina.session.ManagerBase.setContext(org.apache.catalina.Context)", "public void setContext(org.apache.catalina.Context)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getClassName()", "public java.lang.String getClassName()"], ["boolean", "org.apache.catalina.session.ManagerBase.getDistributable()", "public boolean getDistributable()"], ["void", "org.apache.catalina.session.ManagerBase.setDistributable(boolean)", "public void setDistributable(boolean)"], ["int", "org.apache.catalina.session.ManagerBase.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["void", "org.apache.catalina.session.ManagerBase.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["int", "org.apache.catalina.session.ManagerBase.getSessionIdLength()", "public int getSessionIdLength()"], ["void", "org.apache.catalina.session.ManagerBase.setSessionIdLength(int)", "public void setSessionIdLength(int)"], ["org.apache.catalina.SessionIdGenerator", "org.apache.catalina.session.ManagerBase.getSessionIdGenerator()", "public org.apache.catalina.SessionIdGenerator getSessionIdGenerator()"], ["void", "org.apache.catalina.session.ManagerBase.setSessionIdGenerator(org.apache.catalina.SessionIdGenerator)", "public void setSessionIdGenerator(org.apache.catalina.SessionIdGenerator)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getSecureRandomClass()", "public java.lang.String getSecureRandomClass()"], ["void", "org.apache.catalina.session.ManagerBase.setSecureRandomClass(java.lang.String)", "public void setSecureRandomClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getSecureRandomAlgorithm()", "public java.lang.String getSecureRandomAlgorithm()"], ["void", "org.apache.catalina.session.ManagerBase.setSecureRandomAlgorithm(java.lang.String)", "public void setSecureRandomAlgorithm(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getSecureRandomProvider()", "public java.lang.String getSecureRandomProvider()"], ["void", "org.apache.catalina.session.ManagerBase.setSecureRandomProvider(java.lang.String)", "public void setSecureRandomProvider(java.lang.String)"], ["int", "org.apache.catalina.session.ManagerBase.getRejectedSessions()", "public int getRejectedSessions()"], ["long", "org.apache.catalina.session.ManagerBase.getExpiredSessions()", "public long getExpiredSessions()"], ["void", "org.apache.catalina.session.ManagerBase.setExpiredSessions(long)", "public void setExpiredSessions(long)"], ["long", "org.apache.catalina.session.ManagerBase.getProcessingTime()", "public long getProcessingTime()"], ["void", "org.apache.catalina.session.ManagerBase.setProcessingTime(long)", "public void setProcessingTime(long)"], ["int", "org.apache.catalina.session.ManagerBase.getProcessExpiresFrequency()", "public int getProcessExpiresFrequency()"], ["void", "org.apache.catalina.session.ManagerBase.setProcessExpiresFrequency(int)", "public void setProcessExpiresFrequency(int)"], ["void", "org.apache.catalina.session.ManagerBase.backgroundProcess()", "public void backgroundProcess()"], ["void", "org.apache.catalina.session.ManagerBase.processExpires()", "public void processExpires()"], ["void", "org.apache.catalina.session.ManagerBase.add(org.apache.catalina.Session)", "public void add(org.apache.catalina.Session)"], ["void", "org.apache.catalina.session.ManagerBase.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["org.apache.catalina.Session", "org.apache.catalina.session.ManagerBase.createSession(java.lang.String)", "public org.apache.catalina.Session createSession(java.lang.String)"], ["org.apache.catalina.Session", "org.apache.catalina.session.ManagerBase.createEmptySession()", "public org.apache.catalina.Session createEmptySession()"], ["org.apache.catalina.Session", "org.apache.catalina.session.ManagerBase.findSession(java.lang.String)", "public org.apache.catalina.Session findSession(java.lang.String) throws java.io.IOException"], ["org.apache.catalina.Session[]", "org.apache.catalina.session.ManagerBase.findSessions()", "public org.apache.catalina.Session[] findSessions()"], ["void", "org.apache.catalina.session.ManagerBase.remove(org.apache.catalina.Session)", "public void remove(org.apache.catalina.Session)"], ["void", "org.apache.catalina.session.ManagerBase.remove(org.apache.catalina.Session, boolean)", "public void remove(org.apache.catalina.Session, boolean)"], ["void", "org.apache.catalina.session.ManagerBase.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.session.ManagerBase.changeSessionId(org.apache.catalina.Session)", "public void changeSessionId(org.apache.catalina.Session)"], ["void", "org.apache.catalina.session.ManagerBase.changeSessionId(org.apache.catalina.Session, java.lang.String)", "public void changeSessionId(org.apache.catalina.Session, java.lang.String)"], ["org.apache.catalina.Engine", "org.apache.catalina.session.ManagerBase.getEngine()", "public org.apache.catalina.Engine getEngine()"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getJvmRoute()", "public java.lang.String getJvmRoute()"], ["void", "org.apache.catalina.session.ManagerBase.setSessionCounter(long)", "public void setSessionCounter(long)"], ["long", "org.apache.catalina.session.ManagerBase.getSessionCounter()", "public long getSessionCounter()"], ["int", "org.apache.catalina.session.ManagerBase.getDuplicates()", "public int getDuplicates()"], ["void", "org.apache.catalina.session.ManagerBase.setDuplicates(int)", "public void setDuplicates(int)"], ["int", "org.apache.catalina.session.ManagerBase.getActiveSessions()", "public int getActiveSessions()"], ["int", "org.apache.catalina.session.ManagerBase.getMaxActive()", "public int getMaxActive()"], ["void", "org.apache.catalina.session.ManagerBase.setMaxActive(int)", "public void setMaxActive(int)"], ["int", "org.apache.catalina.session.ManagerBase.getMaxActiveSessions()", "public int getMaxActiveSessions()"], ["void", "org.apache.catalina.session.ManagerBase.setMaxActiveSessions(int)", "public void setMaxActiveSessions(int)"], ["int", "org.apache.catalina.session.ManagerBase.getSessionMaxAliveTime()", "public int getSessionMaxAliveTime()"], ["void", "org.apache.catalina.session.ManagerBase.setSessionMaxAliveTime(int)", "public void setSessionMaxAliveTime(int)"], ["void", "org.apache.catalina.session.ManagerBase.updateSessionMaxAliveTime(int)", "public void updateSessionMaxAliveTime(int)"], ["int", "org.apache.catalina.session.ManagerBase.getSessionAverageAliveTime()", "public int getSessionAverageAliveTime()"], ["int", "org.apache.catalina.session.ManagerBase.getSessionCreateRate()", "public int getSessionCreateRate()"], ["int", "org.apache.catalina.session.ManagerBase.getSessionExpireRate()", "public int getSessionExpireRate()"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.listSessionIds()", "public java.lang.String listSessionIds()"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getSessionAttribute(java.lang.String, java.lang.String)", "public java.lang.String getSessionAttribute(java.lang.String, java.lang.String)"], ["java.util.HashMap<java.lang.String, java.lang.String>", "org.apache.catalina.session.ManagerBase.getSession(java.lang.String)", "public java.util.HashMap<java.lang.String, java.lang.String> getSession(java.lang.String)"], ["void", "org.apache.catalina.session.ManagerBase.expireSession(java.lang.String)", "public void expireSession(java.lang.String)"], ["long", "org.apache.catalina.session.ManagerBase.getThisAccessedTimestamp(java.lang.String)", "public long getThisAccessedTimestamp(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getThisAccessedTime(java.lang.String)", "public java.lang.String getThisAccessedTime(java.lang.String)"], ["long", "org.apache.catalina.session.ManagerBase.getLastAccessedTimestamp(java.lang.String)", "public long getLastAccessedTimestamp(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getLastAccessedTime(java.lang.String)", "public java.lang.String getLastAccessedTime(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getCreationTime(java.lang.String)", "public java.lang.String getCreationTime(java.lang.String)"], ["long", "org.apache.catalina.session.ManagerBase.getCreationTimestamp(java.lang.String)", "public long getCreationTimestamp(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getObjectNameKeyProperties()", "public java.lang.String getObjectNameKeyProperties()"], ["java.lang.String", "org.apache.catalina.session.ManagerBase.getDomainInternal()", "public java.lang.String getDomainInternal()"], ["void", "org.apache.catalina.session.ManagerBase.propertyChange(java.beans.PropertyChangeEvent)", "public void propertyChange(java.beans.PropertyChangeEvent)"], ["org.apache.catalina.session.PersistentManager", "org.apache.catalina.session.PersistentManager()", "public org.apache.catalina.session.PersistentManager()"], ["java.lang.String", "org.apache.catalina.session.PersistentManager.getName()", "public java.lang.String getName()"], ["java.lang.Void", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreClear.run()", "public java.lang.Void run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreClear.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.String[]", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreKeys.run()", "public java.lang.String[] run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreKeys.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.Session", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreLoad.run()", "public org.apache.catalina.Session run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreLoad.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreRemove.run()", "public java.lang.Void run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreRemove.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreSave.run()", "public java.lang.Void run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.session.PersistentManagerBase$PrivilegedStoreSave.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.session.PersistentManagerBase", "org.apache.catalina.session.PersistentManagerBase()", "public org.apache.catalina.session.PersistentManagerBase()"], ["int", "org.apache.catalina.session.PersistentManagerBase.getMaxIdleBackup()", "public int getMaxIdleBackup()"], ["void", "org.apache.catalina.session.PersistentManagerBase.setMaxIdleBackup(int)", "public void setMaxIdleBackup(int)"], ["int", "org.apache.catalina.session.PersistentManagerBase.getMaxIdleSwap()", "public int getMaxIdleSwap()"], ["void", "org.apache.catalina.session.PersistentManagerBase.setMaxIdleSwap(int)", "public void setMaxIdleSwap(int)"], ["int", "org.apache.catalina.session.PersistentManagerBase.getMinIdleSwap()", "public int getMinIdleSwap()"], ["void", "org.apache.catalina.session.PersistentManagerBase.setMinIdleSwap(int)", "public void setMinIdleSwap(int)"], ["boolean", "org.apache.catalina.session.PersistentManagerBase.isLoaded(java.lang.String)", "public boolean isLoaded(java.lang.String)"], ["java.lang.String", "org.apache.catalina.session.PersistentManagerBase.getName()", "public java.lang.String getName()"], ["void", "org.apache.catalina.session.PersistentManagerBase.setStore(org.apache.catalina.Store)", "public void setStore(org.apache.catalina.Store)"], ["org.apache.catalina.Store", "org.apache.catalina.session.PersistentManagerBase.getStore()", "public org.apache.catalina.Store getStore()"], ["boolean", "org.apache.catalina.session.PersistentManagerBase.getSaveOnRestart()", "public boolean getSaveOnRestart()"], ["void", "org.apache.catalina.session.PersistentManagerBase.setSaveOnRestart(boolean)", "public void setSaveOnRestart(boolean)"], ["void", "org.apache.catalina.session.PersistentManagerBase.clearStore()", "public void clearStore()"], ["void", "org.apache.catalina.session.PersistentManagerBase.processExpires()", "public void processExpires()"], ["void", "org.apache.catalina.session.PersistentManagerBase.processPersistenceChecks()", "public void processPersistenceChecks()"], ["org.apache.catalina.Session", "org.apache.catalina.session.PersistentManagerBase.findSession(java.lang.String)", "public org.apache.catalina.Session findSession(java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.session.PersistentManagerBase.removeSuper(org.apache.catalina.Session)", "public void removeSuper(org.apache.catalina.Session)"], ["void", "org.apache.catalina.session.PersistentManagerBase.load()", "public void load()"], ["void", "org.apache.catalina.session.PersistentManagerBase.remove(org.apache.catalina.Session, boolean)", "public void remove(org.apache.catalina.Session, boolean)"], ["void", "org.apache.catalina.session.PersistentManagerBase.unload()", "public void unload()"], ["int", "org.apache.catalina.session.PersistentManagerBase.getActiveSessionsFull()", "public int getActiveSessionsFull()"], ["java.util.Set<java.lang.String>", "org.apache.catalina.session.PersistentManagerBase.getSessionIdsFull()", "public java.util.Set<java.lang.String> getSessionIdsFull()"], ["java.lang.Void", "org.apache.catalina.session.StandardManager$PrivilegedDoLoad.run()", "public java.lang.Void run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.session.StandardManager$PrivilegedDoLoad.run()", "public java.lang.Object run() throws java.lang.Exception"], ["java.lang.Void", "org.apache.catalina.session.StandardManager$PrivilegedDoUnload.run()", "public java.lang.Void run() throws java.lang.Exception"], ["java.lang.Object", "org.apache.catalina.session.StandardManager$PrivilegedDoUnload.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.catalina.session.StandardManager", "org.apache.catalina.session.StandardManager()", "public org.apache.catalina.session.StandardManager()"], ["java.lang.String", "org.apache.catalina.session.StandardManager.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.catalina.session.StandardManager.getPathname()", "public java.lang.String getPathname()"], ["void", "org.apache.catalina.session.StandardManager.setPathname(java.lang.String)", "public void setPathname(java.lang.String)"], ["void", "org.apache.catalina.session.StandardManager.load()", "public void load() throws java.lang.ClassNotFoundException, java.io.IOException"], ["void", "org.apache.catalina.session.StandardManager.unload()", "public void unload() throws java.io.IOException"], ["org.apache.catalina.session.StandardSessionFacade", "org.apache.catalina.session.StandardSession$1.run()", "public org.apache.catalina.session.StandardSessionFacade run()"], ["java.lang.Object", "org.apache.catalina.session.StandardSession$1.run()", "public java.lang.Object run()"], ["org.apache.catalina.session.StandardSession", "org.apache.catalina.session.StandardSession(org.apache.catalina.Manager)", "public org.apache.catalina.session.StandardSession(org.apache.catalina.Manager)"], ["java.lang.String", "org.apache.catalina.session.StandardSession.getAuthType()", "public java.lang.String getAuthType()"], ["void", "org.apache.catalina.session.StandardSession.setAuthType(java.lang.String)", "public void setAuthType(java.lang.String)"], ["void", "org.apache.catalina.session.StandardSession.setCreationTime(long)", "public void setCreationTime(long)"], ["java.lang.String", "org.apache.catalina.session.StandardSession.getId()", "public java.lang.String getId()"], ["java.lang.String", "org.apache.catalina.session.StandardSession.getIdInternal()", "public java.lang.String getIdInternal()"], ["void", "org.apache.catalina.session.StandardSession.setId(java.lang.String)", "public void setId(java.lang.String)"], ["void", "org.apache.catalina.session.StandardSession.setId(java.lang.String, boolean)", "public void setId(java.lang.String, boolean)"], ["void", "org.apache.catalina.session.StandardSession.tellNew()", "public void tellNew()"], ["void", "org.apache.catalina.session.StandardSession.tellChangedSessionId(java.lang.String, java.lang.String, boolean, boolean)", "public void tellChangedSessionId(java.lang.String, java.lang.String, boolean, boolean)"], ["long", "org.apache.catalina.session.StandardSession.getThisAccessedTime()", "public long getThisAccessedTime()"], ["long", "org.apache.catalina.session.StandardSession.getThisAccessedTimeInternal()", "public long getThisAccessedTimeInternal()"], ["long", "org.apache.catalina.session.StandardSession.getLastAccessedTime()", "public long getLastAccessedTime()"], ["long", "org.apache.catalina.session.StandardSession.getLastAccessedTimeInternal()", "public long getLastAccessedTimeInternal()"], ["long", "org.apache.catalina.session.StandardSession.getIdleTime()", "public long getIdleTime()"], ["long", "org.apache.catalina.session.StandardSession.getIdleTimeInternal()", "public long getIdleTimeInternal()"], ["org.apache.catalina.Manager", "org.apache.catalina.session.StandardSession.getManager()", "public org.apache.catalina.Manager getManager()"], ["void", "org.apache.catalina.session.StandardSession.setManager(org.apache.catalina.Manager)", "public void setManager(org.apache.catalina.Manager)"], ["int", "org.apache.catalina.session.StandardSession.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["void", "org.apache.catalina.session.StandardSession.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["void", "org.apache.catalina.session.StandardSession.setNew(boolean)", "public void setNew(boolean)"], ["java.security.Principal", "org.apache.catalina.session.StandardSession.getPrincipal()", "public java.security.Principal getPrincipal()"], ["void", "org.apache.catalina.session.StandardSession.setPrincipal(java.security.Principal)", "public void setPrincipal(java.security.Principal)"], ["javax.servlet.http.HttpSession", "org.apache.catalina.session.StandardSession.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["boolean", "org.apache.catalina.session.StandardSession.isValid()", "public boolean isValid()"], ["void", "org.apache.catalina.session.StandardSession.setValid(boolean)", "public void setValid(boolean)"], ["void", "org.apache.catalina.session.StandardSession.access()", "public void access()"], ["void", "org.apache.catalina.session.StandardSession.endAccess()", "public void endAccess()"], ["void", "org.apache.catalina.session.StandardSession.addSessionListener(org.apache.catalina.SessionListener)", "public void addSessionListener(org.apache.catalina.SessionListener)"], ["void", "org.apache.catalina.session.StandardSession.expire()", "public void expire()"], ["void", "org.apache.catalina.session.StandardSession.expire(boolean)", "public void expire(boolean)"], ["void", "org.apache.catalina.session.StandardSession.passivate()", "public void passivate()"], ["void", "org.apache.catalina.session.StandardSession.activate()", "public void activate()"], ["java.lang.Object", "org.apache.catalina.session.StandardSession.getNote(java.lang.String)", "public java.lang.Object getNote(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.catalina.session.StandardSession.getNoteNames()", "public java.util.Iterator<java.lang.String> getNoteNames()"], ["void", "org.apache.catalina.session.StandardSession.recycle()", "public void recycle()"], ["void", "org.apache.catalina.session.StandardSession.removeNote(java.lang.String)", "public void removeNote(java.lang.String)"], ["void", "org.apache.catalina.session.StandardSession.removeSessionListener(org.apache.catalina.SessionListener)", "public void removeSessionListener(org.apache.catalina.SessionListener)"], ["void", "org.apache.catalina.session.StandardSession.setNote(java.lang.String, java.lang.Object)", "public void setNote(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.apache.catalina.session.StandardSession.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.session.StandardSession.readObjectData(java.io.ObjectInputStream)", "public void readObjectData(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException"], ["void", "org.apache.catalina.session.StandardSession.writeObjectData(java.io.ObjectOutputStream)", "public void writeObjectData(java.io.ObjectOutputStream) throws java.io.IOException"], ["long", "org.apache.catalina.session.StandardSession.getCreationTime()", "public long getCreationTime()"], ["long", "org.apache.catalina.session.StandardSession.getCreationTimeInternal()", "public long getCreationTimeInternal()"], ["javax.servlet.ServletContext", "org.apache.catalina.session.StandardSession.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["javax.servlet.http.HttpSessionContext", "org.apache.catalina.session.StandardSession.getSessionContext()", "public javax.servlet.http.HttpSessionContext getSessionContext()"], ["java.lang.Object", "org.apache.catalina.session.StandardSession.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.session.StandardSession.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["java.lang.Object", "org.apache.catalina.session.StandardSession.getValue(java.lang.String)", "public java.lang.Object getValue(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.session.StandardSession.getValueNames()", "public java.lang.String[] getValueNames()"], ["void", "org.apache.catalina.session.StandardSession.invalidate()", "public void invalidate()"], ["boolean", "org.apache.catalina.session.StandardSession.isNew()", "public boolean isNew()"], ["void", "org.apache.catalina.session.StandardSession.putValue(java.lang.String, java.lang.Object)", "public void putValue(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.session.StandardSession.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.apache.catalina.session.StandardSession.removeAttribute(java.lang.String, boolean)", "public void removeAttribute(java.lang.String, boolean)"], ["void", "org.apache.catalina.session.StandardSession.removeValue(java.lang.String)", "public void removeValue(java.lang.String)"], ["void", "org.apache.catalina.session.StandardSession.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.session.StandardSession.setAttribute(java.lang.String, java.lang.Object, boolean)", "public void setAttribute(java.lang.String, java.lang.Object, boolean)"], ["void", "org.apache.catalina.session.StandardSession.fireSessionEvent(java.lang.String, java.lang.Object)", "public void fireSessionEvent(java.lang.String, java.lang.Object)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.session.StandardSessionContext.getIds()", "public java.util.Enumeration<java.lang.String> getIds()"], ["javax.servlet.http.HttpSession", "org.apache.catalina.session.StandardSessionContext.getSession(java.lang.String)", "public javax.servlet.http.HttpSession getSession(java.lang.String)"], ["org.apache.catalina.session.StandardSessionFacade", "org.apache.catalina.session.StandardSessionFacade(javax.servlet.http.HttpSession)", "public org.apache.catalina.session.StandardSessionFacade(javax.servlet.http.HttpSession)"], ["long", "org.apache.catalina.session.StandardSessionFacade.getCreationTime()", "public long getCreationTime()"], ["java.lang.String", "org.apache.catalina.session.StandardSessionFacade.getId()", "public java.lang.String getId()"], ["long", "org.apache.catalina.session.StandardSessionFacade.getLastAccessedTime()", "public long getLastAccessedTime()"], ["javax.servlet.ServletContext", "org.apache.catalina.session.StandardSessionFacade.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["void", "org.apache.catalina.session.StandardSessionFacade.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["int", "org.apache.catalina.session.StandardSessionFacade.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["javax.servlet.http.HttpSessionContext", "org.apache.catalina.session.StandardSessionFacade.getSessionContext()", "public javax.servlet.http.HttpSessionContext getSessionContext()"], ["java.lang.Object", "org.apache.catalina.session.StandardSessionFacade.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.lang.Object", "org.apache.catalina.session.StandardSessionFacade.getValue(java.lang.String)", "public java.lang.Object getValue(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.session.StandardSessionFacade.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["java.lang.String[]", "org.apache.catalina.session.StandardSessionFacade.getValueNames()", "public java.lang.String[] getValueNames()"], ["void", "org.apache.catalina.session.StandardSessionFacade.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.session.StandardSessionFacade.putValue(java.lang.String, java.lang.Object)", "public void putValue(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.session.StandardSessionFacade.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.apache.catalina.session.StandardSessionFacade.removeValue(java.lang.String)", "public void removeValue(java.lang.String)"], ["void", "org.apache.catalina.session.StandardSessionFacade.invalidate()", "public void invalidate()"], ["boolean", "org.apache.catalina.session.StandardSessionFacade.isNew()", "public boolean isNew()"], ["org.apache.catalina.session.StoreBase", "org.apache.catalina.session.StoreBase()", "public org.apache.catalina.session.StoreBase()"], ["java.lang.String", "org.apache.catalina.session.StoreBase.getStoreName()", "public java.lang.String getStoreName()"], ["void", "org.apache.catalina.session.StoreBase.setManager(org.apache.catalina.Manager)", "public void setManager(org.apache.catalina.Manager)"], ["org.apache.catalina.Manager", "org.apache.catalina.session.StoreBase.getManager()", "public org.apache.catalina.Manager getManager()"], ["void", "org.apache.catalina.session.StoreBase.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.session.StoreBase.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.session.StoreBase.processExpires()", "public void processExpires()"], ["java.lang.String", "org.apache.catalina.session.StoreBase.toString()", "public java.lang.String toString()"], ["org.apache.catalina.session.TooManyActiveSessionsException", "org.apache.catalina.session.TooManyActiveSessionsException(java.lang.String, int)", "public org.apache.catalina.session.TooManyActiveSessionsException(java.lang.String, int)"], ["int", "org.apache.catalina.session.TooManyActiveSessionsException.getMaxActiveSessions()", "public int getMaxActiveSessions()"], ["org.apache.catalina.ssi.ByteArrayServletOutputStream", "org.apache.catalina.ssi.ByteArrayServletOutputStream()", "public org.apache.catalina.ssi.ByteArrayServletOutputStream()"], ["byte[]", "org.apache.catalina.ssi.ByteArrayServletOutputStream.toByteArray()", "public byte[] toByteArray()"], ["void", "org.apache.catalina.ssi.ByteArrayServletOutputStream.write(int)", "public void write(int)"], ["boolean", "org.apache.catalina.ssi.ByteArrayServletOutputStream.isReady()", "public boolean isReady()"], ["void", "org.apache.catalina.ssi.ByteArrayServletOutputStream.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree$AndNode.evaluate()", "public boolean evaluate()"], ["int", "org.apache.catalina.ssi.ExpressionParseTree$AndNode.getPrecedence()", "public int getPrecedence()"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$AndNode.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree$EqualNode.evaluate()", "public boolean evaluate()"], ["int", "org.apache.catalina.ssi.ExpressionParseTree$EqualNode.getPrecedence()", "public int getPrecedence()"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$EqualNode.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree$GreaterThanNode.evaluate()", "public boolean evaluate()"], ["int", "org.apache.catalina.ssi.ExpressionParseTree$GreaterThanNode.getPrecedence()", "public int getPrecedence()"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$GreaterThanNode.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree$LessThanNode.evaluate()", "public boolean evaluate()"], ["int", "org.apache.catalina.ssi.ExpressionParseTree$LessThanNode.getPrecedence()", "public int getPrecedence()"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$LessThanNode.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree$NotNode.evaluate()", "public boolean evaluate()"], ["int", "org.apache.catalina.ssi.ExpressionParseTree$NotNode.getPrecedence()", "public int getPrecedence()"], ["void", "org.apache.catalina.ssi.ExpressionParseTree$NotNode.popValues(java.util.List<org.apache.catalina.ssi.ExpressionParseTree$Node>)", "public void popValues(java.util.List<org.apache.catalina.ssi.ExpressionParseTree$Node>)"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$NotNode.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.ssi.ExpressionParseTree$OppNode.popValues(java.util.List<org.apache.catalina.ssi.ExpressionParseTree$Node>)", "public void popValues(java.util.List<org.apache.catalina.ssi.ExpressionParseTree$Node>)"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree$OrNode.evaluate()", "public boolean evaluate()"], ["int", "org.apache.catalina.ssi.ExpressionParseTree$OrNode.getPrecedence()", "public int getPrecedence()"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$OrNode.toString()", "public java.lang.String toString()"], ["org.apache.catalina.ssi.ExpressionParseTree$StringNode", "org.apache.catalina.ssi.ExpressionParseTree$StringNode(org.apache.catalina.ssi.ExpressionParseTree, java.lang.String)", "public org.apache.catalina.ssi.ExpressionParseTree$StringNode(org.apache.catalina.ssi.ExpressionParseTree, java.lang.String)"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$StringNode.getValue()", "public java.lang.String getValue()"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree$StringNode.evaluate()", "public boolean evaluate()"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionParseTree$StringNode.toString()", "public java.lang.String toString()"], ["org.apache.catalina.ssi.ExpressionParseTree", "org.apache.catalina.ssi.ExpressionParseTree(java.lang.String, org.apache.catalina.ssi.SSIMediator)", "public org.apache.catalina.ssi.ExpressionParseTree(java.lang.String, org.apache.catalina.ssi.SSIMediator) throws java.text.ParseException"], ["boolean", "org.apache.catalina.ssi.ExpressionParseTree.evaluateTree()", "public boolean evaluateTree()"], ["org.apache.catalina.ssi.ExpressionTokenizer", "org.apache.catalina.ssi.ExpressionTokenizer(java.lang.String)", "public org.apache.catalina.ssi.ExpressionTokenizer(java.lang.String)"], ["boolean", "org.apache.catalina.ssi.ExpressionTokenizer.hasMoreTokens()", "public boolean hasMoreTokens()"], ["int", "org.apache.catalina.ssi.ExpressionTokenizer.getIndex()", "public int getIndex()"], ["int", "org.apache.catalina.ssi.ExpressionTokenizer.nextToken()", "public int nextToken()"], ["java.lang.String", "org.apache.catalina.ssi.ExpressionTokenizer.getTokenValue()", "public java.lang.String getTokenValue()"], ["org.apache.catalina.ssi.ResponseIncludeWrapper", "org.apache.catalina.ssi.ResponseIncludeWrapper(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletOutputStream)", "public org.apache.catalina.ssi.ResponseIncludeWrapper(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletOutputStream)"], ["void", "org.apache.catalina.ssi.ResponseIncludeWrapper.flushOutputStreamOrWriter()", "public void flushOutputStreamOrWriter() throws java.io.IOException"], ["java.io.PrintWriter", "org.apache.catalina.ssi.ResponseIncludeWrapper.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.IOException"], ["javax.servlet.ServletOutputStream", "org.apache.catalina.ssi.ResponseIncludeWrapper.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["long", "org.apache.catalina.ssi.ResponseIncludeWrapper.getLastModified()", "public long getLastModified()"], ["java.lang.String", "org.apache.catalina.ssi.ResponseIncludeWrapper.getContentType()", "public java.lang.String getContentType()"], ["void", "org.apache.catalina.ssi.ResponseIncludeWrapper.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.apache.catalina.ssi.ResponseIncludeWrapper.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.ssi.ResponseIncludeWrapper.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.ssi.ResponseIncludeWrapper.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.apache.catalina.ssi.ResponseIncludeWrapper.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["org.apache.catalina.ssi.SSIConditional", "org.apache.catalina.ssi.SSIConditional()", "public org.apache.catalina.ssi.SSIConditional()"], ["long", "org.apache.catalina.ssi.SSIConditional.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter) throws org.apache.catalina.ssi.SSIStopProcessingException"], ["org.apache.catalina.ssi.SSIConfig", "org.apache.catalina.ssi.SSIConfig()", "public org.apache.catalina.ssi.SSIConfig()"], ["long", "org.apache.catalina.ssi.SSIConfig.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)"], ["org.apache.catalina.ssi.SSIEcho", "org.apache.catalina.ssi.SSIEcho()", "public org.apache.catalina.ssi.SSIEcho()"], ["long", "org.apache.catalina.ssi.SSIEcho.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)"], ["org.apache.catalina.ssi.SSIExec", "org.apache.catalina.ssi.SSIExec()", "public org.apache.catalina.ssi.SSIExec()"], ["long", "org.apache.catalina.ssi.SSIExec.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)"], ["org.apache.catalina.ssi.SSIFilter", "org.apache.catalina.ssi.SSIFilter()", "public org.apache.catalina.ssi.SSIFilter()"], ["void", "org.apache.catalina.ssi.SSIFilter.init(javax.servlet.FilterConfig)", "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"], ["void", "org.apache.catalina.ssi.SSIFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)", "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.ssi.SSIFilter.destroy()", "public void destroy()"], ["org.apache.catalina.ssi.SSIFlastmod", "org.apache.catalina.ssi.SSIFlastmod()", "public org.apache.catalina.ssi.SSIFlastmod()"], ["long", "org.apache.catalina.ssi.SSIFlastmod.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)"], ["org.apache.catalina.ssi.SSIFsize", "org.apache.catalina.ssi.SSIFsize()", "public org.apache.catalina.ssi.SSIFsize()"], ["long", "org.apache.catalina.ssi.SSIFsize.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)"], ["java.lang.String", "org.apache.catalina.ssi.SSIFsize.repeat(char, int)", "public java.lang.String repeat(char, int)"], ["java.lang.String", "org.apache.catalina.ssi.SSIFsize.padLeft(java.lang.String, int)", "public java.lang.String padLeft(java.lang.String, int)"], ["org.apache.catalina.ssi.SSIInclude", "org.apache.catalina.ssi.SSIInclude()", "public org.apache.catalina.ssi.SSIInclude()"], ["long", "org.apache.catalina.ssi.SSIInclude.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)"], ["org.apache.catalina.ssi.SSIMediator", "org.apache.catalina.ssi.SSIMediator(org.apache.catalina.ssi.SSIExternalResolver, long)", "public org.apache.catalina.ssi.SSIMediator(org.apache.catalina.ssi.SSIExternalResolver, long)"], ["void", "org.apache.catalina.ssi.SSIMediator.setConfigErrMsg(java.lang.String)", "public void setConfigErrMsg(java.lang.String)"], ["void", "org.apache.catalina.ssi.SSIMediator.setConfigTimeFmt(java.lang.String)", "public void setConfigTimeFmt(java.lang.String)"], ["void", "org.apache.catalina.ssi.SSIMediator.setConfigTimeFmt(java.lang.String, boolean)", "public void setConfigTimeFmt(java.lang.String, boolean)"], ["void", "org.apache.catalina.ssi.SSIMediator.setConfigSizeFmt(java.lang.String)", "public void setConfigSizeFmt(java.lang.String)"], ["java.lang.String", "org.apache.catalina.ssi.SSIMediator.getConfigErrMsg()", "public java.lang.String getConfigErrMsg()"], ["java.lang.String", "org.apache.catalina.ssi.SSIMediator.getConfigTimeFmt()", "public java.lang.String getConfigTimeFmt()"], ["java.lang.String", "org.apache.catalina.ssi.SSIMediator.getConfigSizeFmt()", "public java.lang.String getConfigSizeFmt()"], ["org.apache.catalina.ssi.SSIConditionalState", "org.apache.catalina.ssi.SSIMediator.getConditionalState()", "public org.apache.catalina.ssi.SSIConditionalState getConditionalState()"], ["java.util.Collection<java.lang.String>", "org.apache.catalina.ssi.SSIMediator.getVariableNames()", "public java.util.Collection<java.lang.String> getVariableNames()"], ["long", "org.apache.catalina.ssi.SSIMediator.getFileSize(java.lang.String, boolean)", "public long getFileSize(java.lang.String, boolean) throws java.io.IOException"], ["long", "org.apache.catalina.ssi.SSIMediator.getFileLastModified(java.lang.String, boolean)", "public long getFileLastModified(java.lang.String, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.ssi.SSIMediator.getFileText(java.lang.String, boolean)", "public java.lang.String getFileText(java.lang.String, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.ssi.SSIMediator.getVariableValue(java.lang.String)", "public java.lang.String getVariableValue(java.lang.String)"], ["void", "org.apache.catalina.ssi.SSIMediator.setVariableValue(java.lang.String, java.lang.String)", "public void setVariableValue(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.ssi.SSIMediator.getVariableValue(java.lang.String, java.lang.String)", "public java.lang.String getVariableValue(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.ssi.SSIMediator.substituteVariables(java.lang.String)", "public java.lang.String substituteVariables(java.lang.String)"], ["void", "org.apache.catalina.ssi.SSIMediator.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.apache.catalina.ssi.SSIMediator.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["org.apache.catalina.ssi.SSIPrintenv", "org.apache.catalina.ssi.SSIPrintenv()", "public org.apache.catalina.ssi.SSIPrintenv()"], ["long", "org.apache.catalina.ssi.SSIPrintenv.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)"], ["org.apache.catalina.ssi.SSIProcessor", "org.apache.catalina.ssi.SSIProcessor(org.apache.catalina.ssi.SSIExternalResolver, int, boolean)", "public org.apache.catalina.ssi.SSIProcessor(org.apache.catalina.ssi.SSIExternalResolver, int, boolean)"], ["void", "org.apache.catalina.ssi.SSIProcessor.addCommand(java.lang.String, org.apache.catalina.ssi.SSICommand)", "public void addCommand(java.lang.String, org.apache.catalina.ssi.SSICommand)"], ["long", "org.apache.catalina.ssi.SSIProcessor.process(java.io.Reader, long, java.io.PrintWriter)", "public long process(java.io.Reader, long, java.io.PrintWriter) throws java.io.IOException"], ["org.apache.catalina.ssi.SSIServlet", "org.apache.catalina.ssi.SSIServlet()", "public org.apache.catalina.ssi.SSIServlet()"], ["void", "org.apache.catalina.ssi.SSIServlet.init()", "public void init() throws javax.servlet.ServletException"], ["void", "org.apache.catalina.ssi.SSIServlet.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.ssi.SSIServlet.doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.ssi.SSIServletExternalResolver$ServletContextAndPath", "org.apache.catalina.ssi.SSIServletExternalResolver$ServletContextAndPath(javax.servlet.ServletContext, java.lang.String)", "public org.apache.catalina.ssi.SSIServletExternalResolver$ServletContextAndPath(javax.servlet.ServletContext, java.lang.String)"], ["javax.servlet.ServletContext", "org.apache.catalina.ssi.SSIServletExternalResolver$ServletContextAndPath.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.apache.catalina.ssi.SSIServletExternalResolver$ServletContextAndPath.getPath()", "public java.lang.String getPath()"], ["org.apache.catalina.ssi.SSIServletExternalResolver", "org.apache.catalina.ssi.SSIServletExternalResolver(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, boolean, int, java.lang.String)", "public org.apache.catalina.ssi.SSIServletExternalResolver(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, boolean, int, java.lang.String)"], ["void", "org.apache.catalina.ssi.SSIServletExternalResolver.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["void", "org.apache.catalina.ssi.SSIServletExternalResolver.addVariableNames(java.util.Collection<java.lang.String>)", "public void addVariableNames(java.util.Collection<java.lang.String>)"], ["void", "org.apache.catalina.ssi.SSIServletExternalResolver.setVariableValue(java.lang.String, java.lang.String)", "public void setVariableValue(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.ssi.SSIServletExternalResolver.getVariableValue(java.lang.String)", "public java.lang.String getVariableValue(java.lang.String)"], ["java.util.Date", "org.apache.catalina.ssi.SSIServletExternalResolver.getCurrentDate()", "public java.util.Date getCurrentDate()"], ["long", "org.apache.catalina.ssi.SSIServletExternalResolver.getFileLastModified(java.lang.String, boolean)", "public long getFileLastModified(java.lang.String, boolean) throws java.io.IOException"], ["long", "org.apache.catalina.ssi.SSIServletExternalResolver.getFileSize(java.lang.String, boolean)", "public long getFileSize(java.lang.String, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.ssi.SSIServletExternalResolver.getFileText(java.lang.String, boolean)", "public java.lang.String getFileText(java.lang.String, boolean) throws java.io.IOException"], ["org.apache.catalina.ssi.SSIServletRequestUtil", "org.apache.catalina.ssi.SSIServletRequestUtil()", "public org.apache.catalina.ssi.SSIServletRequestUtil()"], ["java.lang.String", "org.apache.catalina.ssi.SSIServletRequestUtil.getRelativePath(javax.servlet.http.HttpServletRequest)", "public static java.lang.String getRelativePath(javax.servlet.http.HttpServletRequest)"], ["org.apache.catalina.ssi.SSISet", "org.apache.catalina.ssi.SSISet()", "public org.apache.catalina.ssi.SSISet()"], ["long", "org.apache.catalina.ssi.SSISet.process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter)", "public long process(org.apache.catalina.ssi.SSIMediator, java.lang.String, java.lang.String[], java.lang.String[], java.io.PrintWriter) throws org.apache.catalina.ssi.SSIStopProcessingException"], ["org.apache.catalina.ssi.SSIStopProcessingException", "org.apache.catalina.ssi.SSIStopProcessingException()", "public org.apache.catalina.ssi.SSIStopProcessingException()"], ["org.apache.catalina.startup.Bootstrap", "org.apache.catalina.startup.Bootstrap()", "public org.apache.catalina.startup.Bootstrap()"], ["void", "org.apache.catalina.startup.Bootstrap.init()", "public void init() throws java.lang.Exception"], ["void", "org.apache.catalina.startup.Bootstrap.init(java.lang.String[])", "public void init(java.lang.String[]) throws java.lang.Exception"], ["void", "org.apache.catalina.startup.Bootstrap.start()", "public void start() throws java.lang.Exception"], ["void", "org.apache.catalina.startup.Bootstrap.stop()", "public void stop() throws java.lang.Exception"], ["void", "org.apache.catalina.startup.Bootstrap.stopServer()", "public void stopServer() throws java.lang.Exception"], ["void", "org.apache.catalina.startup.Bootstrap.stopServer(java.lang.String[])", "public void stopServer(java.lang.String[]) throws java.lang.Exception"], ["void", "org.apache.catalina.startup.Bootstrap.setAwait(boolean)", "public void setAwait(boolean) throws java.lang.Exception"], ["boolean", "org.apache.catalina.startup.Bootstrap.getAwait()", "public boolean getAwait() throws java.lang.Exception"], ["void", "org.apache.catalina.startup.Bootstrap.destroy()", "public void destroy()"], ["void", "org.apache.catalina.startup.Bootstrap.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["java.lang.String", "org.apache.catalina.startup.Bootstrap.getCatalinaHome()", "public static java.lang.String getCatalinaHome()"], ["java.lang.String", "org.apache.catalina.startup.Bootstrap.getCatalinaBase()", "public static java.lang.String getCatalinaBase()"], ["java.io.File", "org.apache.catalina.startup.Bootstrap.getCatalinaHomeFile()", "public static java.io.File getCatalinaHomeFile()"], ["java.io.File", "org.apache.catalina.startup.Bootstrap.getCatalinaBaseFile()", "public static java.io.File getCatalinaBaseFile()"], ["void", "org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run()", "public void run()"], ["org.apache.catalina.startup.Catalina", "org.apache.catalina.startup.Catalina()", "public org.apache.catalina.startup.Catalina()"], ["void", "org.apache.catalina.startup.Catalina.setConfigFile(java.lang.String)", "public void setConfigFile(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.Catalina.getConfigFile()", "public java.lang.String getConfigFile()"], ["void", "org.apache.catalina.startup.Catalina.setUseShutdownHook(boolean)", "public void setUseShutdownHook(boolean)"], ["boolean", "org.apache.catalina.startup.Catalina.getUseShutdownHook()", "public boolean getUseShutdownHook()"], ["void", "org.apache.catalina.startup.Catalina.setParentClassLoader(java.lang.ClassLoader)", "public void setParentClassLoader(java.lang.ClassLoader)"], ["java.lang.ClassLoader", "org.apache.catalina.startup.Catalina.getParentClassLoader()", "public java.lang.ClassLoader getParentClassLoader()"], ["void", "org.apache.catalina.startup.Catalina.setServer(org.apache.catalina.Server)", "public void setServer(org.apache.catalina.Server)"], ["org.apache.catalina.Server", "org.apache.catalina.startup.Catalina.getServer()", "public org.apache.catalina.Server getServer()"], ["boolean", "org.apache.catalina.startup.Catalina.isUseNaming()", "public boolean isUseNaming()"], ["void", "org.apache.catalina.startup.Catalina.setUseNaming(boolean)", "public void setUseNaming(boolean)"], ["void", "org.apache.catalina.startup.Catalina.setAwait(boolean)", "public void setAwait(boolean)"], ["boolean", "org.apache.catalina.startup.Catalina.isAwait()", "public boolean isAwait()"], ["void", "org.apache.catalina.startup.Catalina.stopServer()", "public void stopServer()"], ["void", "org.apache.catalina.startup.Catalina.stopServer(java.lang.String[])", "public void stopServer(java.lang.String[])"], ["void", "org.apache.catalina.startup.Catalina.load()", "public void load()"], ["void", "org.apache.catalina.startup.Catalina.load(java.lang.String[])", "public void load(java.lang.String[])"], ["void", "org.apache.catalina.startup.Catalina.start()", "public void start()"], ["void", "org.apache.catalina.startup.Catalina.stop()", "public void stop()"], ["void", "org.apache.catalina.startup.Catalina.await()", "public void await()"], ["org.apache.catalina.startup.CatalinaProperties", "org.apache.catalina.startup.CatalinaProperties()", "public org.apache.catalina.startup.CatalinaProperties()"], ["java.lang.String", "org.apache.catalina.startup.CatalinaProperties.getProperty(java.lang.String)", "public static java.lang.String getProperty(java.lang.String)"], ["java.net.URLClassLoader", "org.apache.catalina.startup.ClassLoaderFactory$1.run()", "public java.net.URLClassLoader run()"], ["java.lang.Object", "org.apache.catalina.startup.ClassLoaderFactory$1.run()", "public java.lang.Object run()"], ["java.net.URLClassLoader", "org.apache.catalina.startup.ClassLoaderFactory$2.run()", "public java.net.URLClassLoader run()"], ["java.lang.Object", "org.apache.catalina.startup.ClassLoaderFactory$2.run()", "public java.lang.Object run()"], ["org.apache.catalina.startup.ClassLoaderFactory$Repository", "org.apache.catalina.startup.ClassLoaderFactory$Repository(java.lang.String, org.apache.catalina.startup.ClassLoaderFactory$RepositoryType)", "public org.apache.catalina.startup.ClassLoaderFactory$Repository(java.lang.String, org.apache.catalina.startup.ClassLoaderFactory$RepositoryType)"], ["java.lang.String", "org.apache.catalina.startup.ClassLoaderFactory$Repository.getLocation()", "public java.lang.String getLocation()"], ["org.apache.catalina.startup.ClassLoaderFactory$RepositoryType", "org.apache.catalina.startup.ClassLoaderFactory$Repository.getType()", "public org.apache.catalina.startup.ClassLoaderFactory$RepositoryType getType()"], ["org.apache.catalina.startup.ClassLoaderFactory$RepositoryType[]", "org.apache.catalina.startup.ClassLoaderFactory$RepositoryType.values()", "public static org.apache.catalina.startup.ClassLoaderFactory$RepositoryType[] values()"], ["org.apache.catalina.startup.ClassLoaderFactory$RepositoryType", "org.apache.catalina.startup.ClassLoaderFactory$RepositoryType.valueOf(java.lang.String)", "public static org.apache.catalina.startup.ClassLoaderFactory$RepositoryType valueOf(java.lang.String)"], ["org.apache.catalina.startup.ClassLoaderFactory", "org.apache.catalina.startup.ClassLoaderFactory()", "public org.apache.catalina.startup.ClassLoaderFactory()"], ["java.lang.ClassLoader", "org.apache.catalina.startup.ClassLoaderFactory.createClassLoader(java.io.File[], java.io.File[], java.lang.ClassLoader)", "public static java.lang.ClassLoader createClassLoader(java.io.File[], java.io.File[], java.lang.ClassLoader) throws java.lang.Exception"], ["java.lang.ClassLoader", "org.apache.catalina.startup.ClassLoaderFactory.createClassLoader(java.util.List<org.apache.catalina.startup.ClassLoaderFactory$Repository>, java.lang.ClassLoader)", "public static java.lang.ClassLoader createClassLoader(java.util.List<org.apache.catalina.startup.ClassLoaderFactory$Repository>, java.lang.ClassLoader) throws java.lang.Exception"], ["org.apache.catalina.startup.ConnectorCreateRule", "org.apache.catalina.startup.ConnectorCreateRule()", "public org.apache.catalina.startup.ConnectorCreateRule()"], ["void", "org.apache.catalina.startup.ConnectorCreateRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.catalina.startup.ConnectorCreateRule._setExecutor(org.apache.catalina.connector.Connector, org.apache.catalina.Executor)", "public void _setExecutor(org.apache.catalina.connector.Connector, org.apache.catalina.Executor) throws java.lang.Exception"], ["void", "org.apache.catalina.startup.ConnectorCreateRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.catalina.startup.Constants", "org.apache.catalina.startup.Constants()", "public org.apache.catalina.startup.Constants()"], ["org.apache.catalina.startup.ContextConfig$DefaultWebXmlCacheEntry", "org.apache.catalina.startup.ContextConfig$DefaultWebXmlCacheEntry(org.apache.tomcat.util.descriptor.web.WebXml, long, long)", "public org.apache.catalina.startup.ContextConfig$DefaultWebXmlCacheEntry(org.apache.tomcat.util.descriptor.web.WebXml, long, long)"], ["org.apache.tomcat.util.descriptor.web.WebXml", "org.apache.catalina.startup.ContextConfig$DefaultWebXmlCacheEntry.getWebXml()", "public org.apache.tomcat.util.descriptor.web.WebXml getWebXml()"], ["long", "org.apache.catalina.startup.ContextConfig$DefaultWebXmlCacheEntry.getGlobalTimeStamp()", "public long getGlobalTimeStamp()"], ["long", "org.apache.catalina.startup.ContextConfig$DefaultWebXmlCacheEntry.getHostTimeStamp()", "public long getHostTimeStamp()"], ["org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry", "org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry(org.apache.tomcat.util.bcel.classfile.JavaClass)", "public org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry(org.apache.tomcat.util.bcel.classfile.JavaClass)"], ["java.lang.String", "org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry.getSuperclassName()", "public java.lang.String getSuperclassName()"], ["java.lang.String[]", "org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry.getInterfaceNames()", "public java.lang.String[] getInterfaceNames()"], ["java.util.Set<javax.servlet.ServletContainerInitializer>", "org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry.getSciSet()", "public java.util.Set<javax.servlet.ServletContainerInitializer> getSciSet()"], ["void", "org.apache.catalina.startup.ContextConfig$JavaClassCacheEntry.setSciSet(java.util.Set<javax.servlet.ServletContainerInitializer>)", "public void setSciSet(java.util.Set<javax.servlet.ServletContainerInitializer>)"], ["org.apache.catalina.startup.ContextConfig", "org.apache.catalina.startup.ContextConfig()", "public org.apache.catalina.startup.ContextConfig()"], ["java.lang.String", "org.apache.catalina.startup.ContextConfig.getDefaultWebXml()", "public java.lang.String getDefaultWebXml()"], ["void", "org.apache.catalina.startup.ContextConfig.setDefaultWebXml(java.lang.String)", "public void setDefaultWebXml(java.lang.String)"], ["void", "org.apache.catalina.startup.ContextConfig.setCustomAuthenticators(java.util.Map<java.lang.String, org.apache.catalina.Authenticator>)", "public void setCustomAuthenticators(java.util.Map<java.lang.String, org.apache.catalina.Authenticator>)"], ["void", "org.apache.catalina.startup.ContextConfig.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.startup.ContextRuleSet", "org.apache.catalina.startup.ContextRuleSet()", "public org.apache.catalina.startup.ContextRuleSet()"], ["org.apache.catalina.startup.ContextRuleSet", "org.apache.catalina.startup.ContextRuleSet(java.lang.String)", "public org.apache.catalina.startup.ContextRuleSet(java.lang.String)"], ["org.apache.catalina.startup.ContextRuleSet", "org.apache.catalina.startup.ContextRuleSet(java.lang.String, boolean)", "public org.apache.catalina.startup.ContextRuleSet(java.lang.String, boolean)"], ["void", "org.apache.catalina.startup.ContextRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.catalina.startup.CopyParentClassLoaderRule", "org.apache.catalina.startup.CopyParentClassLoaderRule()", "public org.apache.catalina.startup.CopyParentClassLoaderRule()"], ["void", "org.apache.catalina.startup.CopyParentClassLoaderRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.catalina.startup.EngineConfig", "org.apache.catalina.startup.EngineConfig()", "public org.apache.catalina.startup.EngineConfig()"], ["void", "org.apache.catalina.startup.EngineConfig.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.startup.EngineRuleSet", "org.apache.catalina.startup.EngineRuleSet()", "public org.apache.catalina.startup.EngineRuleSet()"], ["org.apache.catalina.startup.EngineRuleSet", "org.apache.catalina.startup.EngineRuleSet(java.lang.String)", "public org.apache.catalina.startup.EngineRuleSet(java.lang.String)"], ["void", "org.apache.catalina.startup.EngineRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.catalina.startup.ExpandWar", "org.apache.catalina.startup.ExpandWar()", "public org.apache.catalina.startup.ExpandWar()"], ["java.lang.String", "org.apache.catalina.startup.ExpandWar.expand(org.apache.catalina.Host, java.net.URL, java.lang.String)", "public static java.lang.String expand(org.apache.catalina.Host, java.net.URL, java.lang.String) throws java.io.IOException"], ["void", "org.apache.catalina.startup.ExpandWar.validate(org.apache.catalina.Host, java.net.URL, java.lang.String)", "public static void validate(org.apache.catalina.Host, java.net.URL, java.lang.String) throws java.io.IOException"], ["boolean", "org.apache.catalina.startup.ExpandWar.copy(java.io.File, java.io.File)", "public static boolean copy(java.io.File, java.io.File)"], ["boolean", "org.apache.catalina.startup.ExpandWar.delete(java.io.File)", "public static boolean delete(java.io.File)"], ["boolean", "org.apache.catalina.startup.ExpandWar.delete(java.io.File, boolean)", "public static boolean delete(java.io.File, boolean)"], ["boolean", "org.apache.catalina.startup.ExpandWar.deleteDir(java.io.File)", "public static boolean deleteDir(java.io.File)"], ["boolean", "org.apache.catalina.startup.ExpandWar.deleteDir(java.io.File, boolean)", "public static boolean deleteDir(java.io.File, boolean)"], ["org.apache.catalina.startup.FailedContext", "org.apache.catalina.startup.FailedContext()", "public org.apache.catalina.startup.FailedContext()"], ["java.net.URL", "org.apache.catalina.startup.FailedContext.getConfigFile()", "public java.net.URL getConfigFile()"], ["void", "org.apache.catalina.startup.FailedContext.setConfigFile(java.net.URL)", "public void setConfigFile(java.net.URL)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getDocBase()", "public java.lang.String getDocBase()"], ["void", "org.apache.catalina.startup.FailedContext.setDocBase(java.lang.String)", "public void setDocBase(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getName()", "public java.lang.String getName()"], ["void", "org.apache.catalina.startup.FailedContext.setName(java.lang.String)", "public void setName(java.lang.String)"], ["org.apache.catalina.Container", "org.apache.catalina.startup.FailedContext.getParent()", "public org.apache.catalina.Container getParent()"], ["void", "org.apache.catalina.startup.FailedContext.setParent(org.apache.catalina.Container)", "public void setParent(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getPath()", "public java.lang.String getPath()"], ["void", "org.apache.catalina.startup.FailedContext.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getWebappVersion()", "public java.lang.String getWebappVersion()"], ["void", "org.apache.catalina.startup.FailedContext.setWebappVersion(java.lang.String)", "public void setWebappVersion(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getMBeanKeyProperties()", "public java.lang.String getMBeanKeyProperties()"], ["void", "org.apache.catalina.startup.FailedContext.addWatchedResource(java.lang.String)", "public void addWatchedResource(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findWatchedResources()", "public java.lang.String[] findWatchedResources()"], ["void", "org.apache.catalina.startup.FailedContext.removeWatchedResource(java.lang.String)", "public void removeWatchedResource(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addChild(org.apache.catalina.Container)", "public void addChild(org.apache.catalina.Container)"], ["org.apache.catalina.Container", "org.apache.catalina.startup.FailedContext.findChild(java.lang.String)", "public org.apache.catalina.Container findChild(java.lang.String)"], ["org.apache.catalina.Container[]", "org.apache.catalina.startup.FailedContext.findChildren()", "public org.apache.catalina.Container[] findChildren()"], ["void", "org.apache.catalina.startup.FailedContext.removeChild(org.apache.catalina.Container)", "public void removeChild(org.apache.catalina.Container)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.toString()", "public java.lang.String toString()"], ["org.apache.catalina.Loader", "org.apache.catalina.startup.FailedContext.getLoader()", "public org.apache.catalina.Loader getLoader()"], ["void", "org.apache.catalina.startup.FailedContext.setLoader(org.apache.catalina.Loader)", "public void setLoader(org.apache.catalina.Loader)"], ["org.apache.juli.logging.Log", "org.apache.catalina.startup.FailedContext.getLogger()", "public org.apache.juli.logging.Log getLogger()"], ["org.apache.catalina.Manager", "org.apache.catalina.startup.FailedContext.getManager()", "public org.apache.catalina.Manager getManager()"], ["void", "org.apache.catalina.startup.FailedContext.setManager(org.apache.catalina.Manager)", "public void setManager(org.apache.catalina.Manager)"], ["org.apache.catalina.Pipeline", "org.apache.catalina.startup.FailedContext.getPipeline()", "public org.apache.catalina.Pipeline getPipeline()"], ["org.apache.catalina.Cluster", "org.apache.catalina.startup.FailedContext.getCluster()", "public org.apache.catalina.Cluster getCluster()"], ["void", "org.apache.catalina.startup.FailedContext.setCluster(org.apache.catalina.Cluster)", "public void setCluster(org.apache.catalina.Cluster)"], ["int", "org.apache.catalina.startup.FailedContext.getBackgroundProcessorDelay()", "public int getBackgroundProcessorDelay()"], ["void", "org.apache.catalina.startup.FailedContext.setBackgroundProcessorDelay(int)", "public void setBackgroundProcessorDelay(int)"], ["java.lang.ClassLoader", "org.apache.catalina.startup.FailedContext.getParentClassLoader()", "public java.lang.ClassLoader getParentClassLoader()"], ["void", "org.apache.catalina.startup.FailedContext.setParentClassLoader(java.lang.ClassLoader)", "public void setParentClassLoader(java.lang.ClassLoader)"], ["org.apache.catalina.Realm", "org.apache.catalina.startup.FailedContext.getRealm()", "public org.apache.catalina.Realm getRealm()"], ["void", "org.apache.catalina.startup.FailedContext.setRealm(org.apache.catalina.Realm)", "public void setRealm(org.apache.catalina.Realm)"], ["org.apache.catalina.WebResourceRoot", "org.apache.catalina.startup.FailedContext.getResources()", "public org.apache.catalina.WebResourceRoot getResources()"], ["void", "org.apache.catalina.startup.FailedContext.setResources(org.apache.catalina.WebResourceRoot)", "public void setResources(org.apache.catalina.WebResourceRoot)"], ["void", "org.apache.catalina.startup.FailedContext.backgroundProcess()", "public void backgroundProcess()"], ["void", "org.apache.catalina.startup.FailedContext.addContainerListener(org.apache.catalina.ContainerListener)", "public void addContainerListener(org.apache.catalina.ContainerListener)"], ["org.apache.catalina.ContainerListener[]", "org.apache.catalina.startup.FailedContext.findContainerListeners()", "public org.apache.catalina.ContainerListener[] findContainerListeners()"], ["void", "org.apache.catalina.startup.FailedContext.removeContainerListener(org.apache.catalina.ContainerListener)", "public void removeContainerListener(org.apache.catalina.ContainerListener)"], ["void", "org.apache.catalina.startup.FailedContext.addPropertyChangeListener(java.beans.PropertyChangeListener)", "public void addPropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.startup.FailedContext.removePropertyChangeListener(java.beans.PropertyChangeListener)", "public void removePropertyChangeListener(java.beans.PropertyChangeListener)"], ["void", "org.apache.catalina.startup.FailedContext.fireContainerEvent(java.lang.String, java.lang.Object)", "public void fireContainerEvent(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.startup.FailedContext.logAccess(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long, boolean)", "public void logAccess(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long, boolean)"], ["org.apache.catalina.AccessLog", "org.apache.catalina.startup.FailedContext.getAccessLog()", "public org.apache.catalina.AccessLog getAccessLog()"], ["int", "org.apache.catalina.startup.FailedContext.getStartStopThreads()", "public int getStartStopThreads()"], ["void", "org.apache.catalina.startup.FailedContext.setStartStopThreads(int)", "public void setStartStopThreads(int)"], ["boolean", "org.apache.catalina.startup.FailedContext.getAllowCasualMultipartParsing()", "public boolean getAllowCasualMultipartParsing()"], ["void", "org.apache.catalina.startup.FailedContext.setAllowCasualMultipartParsing(boolean)", "public void setAllowCasualMultipartParsing(boolean)"], ["java.lang.Object[]", "org.apache.catalina.startup.FailedContext.getApplicationEventListeners()", "public java.lang.Object[] getApplicationEventListeners()"], ["void", "org.apache.catalina.startup.FailedContext.setApplicationEventListeners(java.lang.Object[])", "public void setApplicationEventListeners(java.lang.Object[])"], ["java.lang.Object[]", "org.apache.catalina.startup.FailedContext.getApplicationLifecycleListeners()", "public java.lang.Object[] getApplicationLifecycleListeners()"], ["void", "org.apache.catalina.startup.FailedContext.setApplicationLifecycleListeners(java.lang.Object[])", "public void setApplicationLifecycleListeners(java.lang.Object[])"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getCharset(java.util.Locale)", "public java.lang.String getCharset(java.util.Locale)"], ["boolean", "org.apache.catalina.startup.FailedContext.getConfigured()", "public boolean getConfigured()"], ["void", "org.apache.catalina.startup.FailedContext.setConfigured(boolean)", "public void setConfigured(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getCookies()", "public boolean getCookies()"], ["void", "org.apache.catalina.startup.FailedContext.setCookies(boolean)", "public void setCookies(boolean)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getSessionCookieName()", "public java.lang.String getSessionCookieName()"], ["void", "org.apache.catalina.startup.FailedContext.setSessionCookieName(java.lang.String)", "public void setSessionCookieName(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.getUseHttpOnly()", "public boolean getUseHttpOnly()"], ["void", "org.apache.catalina.startup.FailedContext.setUseHttpOnly(boolean)", "public void setUseHttpOnly(boolean)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getSessionCookieDomain()", "public java.lang.String getSessionCookieDomain()"], ["void", "org.apache.catalina.startup.FailedContext.setSessionCookieDomain(java.lang.String)", "public void setSessionCookieDomain(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getSessionCookiePath()", "public java.lang.String getSessionCookiePath()"], ["void", "org.apache.catalina.startup.FailedContext.setSessionCookiePath(java.lang.String)", "public void setSessionCookiePath(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.getSessionCookiePathUsesTrailingSlash()", "public boolean getSessionCookiePathUsesTrailingSlash()"], ["void", "org.apache.catalina.startup.FailedContext.setSessionCookiePathUsesTrailingSlash(boolean)", "public void setSessionCookiePathUsesTrailingSlash(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getCrossContext()", "public boolean getCrossContext()"], ["void", "org.apache.catalina.startup.FailedContext.setCrossContext(boolean)", "public void setCrossContext(boolean)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getAltDDName()", "public java.lang.String getAltDDName()"], ["void", "org.apache.catalina.startup.FailedContext.setAltDDName(java.lang.String)", "public void setAltDDName(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.getDenyUncoveredHttpMethods()", "public boolean getDenyUncoveredHttpMethods()"], ["void", "org.apache.catalina.startup.FailedContext.setDenyUncoveredHttpMethods(boolean)", "public void setDenyUncoveredHttpMethods(boolean)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.catalina.startup.FailedContext.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.getDistributable()", "public boolean getDistributable()"], ["void", "org.apache.catalina.startup.FailedContext.setDistributable(boolean)", "public void setDistributable(boolean)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getEncodedPath()", "public java.lang.String getEncodedPath()"], ["boolean", "org.apache.catalina.startup.FailedContext.getIgnoreAnnotations()", "public boolean getIgnoreAnnotations()"], ["void", "org.apache.catalina.startup.FailedContext.setIgnoreAnnotations(boolean)", "public void setIgnoreAnnotations(boolean)"], ["org.apache.tomcat.util.descriptor.web.LoginConfig", "org.apache.catalina.startup.FailedContext.getLoginConfig()", "public org.apache.tomcat.util.descriptor.web.LoginConfig getLoginConfig()"], ["void", "org.apache.catalina.startup.FailedContext.setLoginConfig(org.apache.tomcat.util.descriptor.web.LoginConfig)", "public void setLoginConfig(org.apache.tomcat.util.descriptor.web.LoginConfig)"], ["org.apache.catalina.deploy.NamingResourcesImpl", "org.apache.catalina.startup.FailedContext.getNamingResources()", "public org.apache.catalina.deploy.NamingResourcesImpl getNamingResources()"], ["void", "org.apache.catalina.startup.FailedContext.setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)", "public void setNamingResources(org.apache.catalina.deploy.NamingResourcesImpl)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getPublicId()", "public java.lang.String getPublicId()"], ["void", "org.apache.catalina.startup.FailedContext.setPublicId(java.lang.String)", "public void setPublicId(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.getReloadable()", "public boolean getReloadable()"], ["void", "org.apache.catalina.startup.FailedContext.setReloadable(boolean)", "public void setReloadable(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getOverride()", "public boolean getOverride()"], ["void", "org.apache.catalina.startup.FailedContext.setOverride(boolean)", "public void setOverride(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getPrivileged()", "public boolean getPrivileged()"], ["void", "org.apache.catalina.startup.FailedContext.setPrivileged(boolean)", "public void setPrivileged(boolean)"], ["javax.servlet.ServletContext", "org.apache.catalina.startup.FailedContext.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["int", "org.apache.catalina.startup.FailedContext.getSessionTimeout()", "public int getSessionTimeout()"], ["void", "org.apache.catalina.startup.FailedContext.setSessionTimeout(int)", "public void setSessionTimeout(int)"], ["boolean", "org.apache.catalina.startup.FailedContext.getSwallowAbortedUploads()", "public boolean getSwallowAbortedUploads()"], ["void", "org.apache.catalina.startup.FailedContext.setSwallowAbortedUploads(boolean)", "public void setSwallowAbortedUploads(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getSwallowOutput()", "public boolean getSwallowOutput()"], ["void", "org.apache.catalina.startup.FailedContext.setSwallowOutput(boolean)", "public void setSwallowOutput(boolean)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getWrapperClass()", "public java.lang.String getWrapperClass()"], ["void", "org.apache.catalina.startup.FailedContext.setWrapperClass(java.lang.String)", "public void setWrapperClass(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.getXmlNamespaceAware()", "public boolean getXmlNamespaceAware()"], ["void", "org.apache.catalina.startup.FailedContext.setXmlNamespaceAware(boolean)", "public void setXmlNamespaceAware(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getXmlValidation()", "public boolean getXmlValidation()"], ["void", "org.apache.catalina.startup.FailedContext.setXmlValidation(boolean)", "public void setXmlValidation(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getXmlBlockExternal()", "public boolean getXmlBlockExternal()"], ["void", "org.apache.catalina.startup.FailedContext.setXmlBlockExternal(boolean)", "public void setXmlBlockExternal(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getTldValidation()", "public boolean getTldValidation()"], ["void", "org.apache.catalina.startup.FailedContext.setTldValidation(boolean)", "public void setTldValidation(boolean)"], ["org.apache.tomcat.JarScanner", "org.apache.catalina.startup.FailedContext.getJarScanner()", "public org.apache.tomcat.JarScanner getJarScanner()"], ["void", "org.apache.catalina.startup.FailedContext.setJarScanner(org.apache.tomcat.JarScanner)", "public void setJarScanner(org.apache.tomcat.JarScanner)"], ["org.apache.catalina.Authenticator", "org.apache.catalina.startup.FailedContext.getAuthenticator()", "public org.apache.catalina.Authenticator getAuthenticator()"], ["void", "org.apache.catalina.startup.FailedContext.setLogEffectiveWebXml(boolean)", "public void setLogEffectiveWebXml(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getLogEffectiveWebXml()", "public boolean getLogEffectiveWebXml()"], ["void", "org.apache.catalina.startup.FailedContext.addApplicationListener(java.lang.String)", "public void addApplicationListener(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findApplicationListeners()", "public java.lang.String[] findApplicationListeners()"], ["void", "org.apache.catalina.startup.FailedContext.removeApplicationListener(java.lang.String)", "public void removeApplicationListener(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addApplicationParameter(org.apache.tomcat.util.descriptor.web.ApplicationParameter)", "public void addApplicationParameter(org.apache.tomcat.util.descriptor.web.ApplicationParameter)"], ["org.apache.tomcat.util.descriptor.web.ApplicationParameter[]", "org.apache.catalina.startup.FailedContext.findApplicationParameters()", "public org.apache.tomcat.util.descriptor.web.ApplicationParameter[] findApplicationParameters()"], ["void", "org.apache.catalina.startup.FailedContext.removeApplicationParameter(java.lang.String)", "public void removeApplicationParameter(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)", "public void addConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)"], ["org.apache.tomcat.util.descriptor.web.SecurityConstraint[]", "org.apache.catalina.startup.FailedContext.findConstraints()", "public org.apache.tomcat.util.descriptor.web.SecurityConstraint[] findConstraints()"], ["void", "org.apache.catalina.startup.FailedContext.removeConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)", "public void removeConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)"], ["void", "org.apache.catalina.startup.FailedContext.addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)", "public void addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)"], ["org.apache.tomcat.util.descriptor.web.ErrorPage", "org.apache.catalina.startup.FailedContext.findErrorPage(int)", "public org.apache.tomcat.util.descriptor.web.ErrorPage findErrorPage(int)"], ["org.apache.tomcat.util.descriptor.web.ErrorPage", "org.apache.catalina.startup.FailedContext.findErrorPage(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ErrorPage findErrorPage(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.ErrorPage[]", "org.apache.catalina.startup.FailedContext.findErrorPages()", "public org.apache.tomcat.util.descriptor.web.ErrorPage[] findErrorPages()"], ["void", "org.apache.catalina.startup.FailedContext.removeErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)", "public void removeErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)"], ["void", "org.apache.catalina.startup.FailedContext.addFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)", "public void addFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)"], ["org.apache.tomcat.util.descriptor.web.FilterDef", "org.apache.catalina.startup.FailedContext.findFilterDef(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.FilterDef findFilterDef(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.FilterDef[]", "org.apache.catalina.startup.FailedContext.findFilterDefs()", "public org.apache.tomcat.util.descriptor.web.FilterDef[] findFilterDefs()"], ["void", "org.apache.catalina.startup.FailedContext.removeFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)", "public void removeFilterDef(org.apache.tomcat.util.descriptor.web.FilterDef)"], ["void", "org.apache.catalina.startup.FailedContext.addFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void addFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["void", "org.apache.catalina.startup.FailedContext.addFilterMapBefore(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void addFilterMapBefore(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["org.apache.tomcat.util.descriptor.web.FilterMap[]", "org.apache.catalina.startup.FailedContext.findFilterMaps()", "public org.apache.tomcat.util.descriptor.web.FilterMap[] findFilterMaps()"], ["void", "org.apache.catalina.startup.FailedContext.removeFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void removeFilterMap(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["void", "org.apache.catalina.startup.FailedContext.addInstanceListener(java.lang.String)", "public void addInstanceListener(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findInstanceListeners()", "public java.lang.String[] findInstanceListeners()"], ["void", "org.apache.catalina.startup.FailedContext.removeInstanceListener(java.lang.String)", "public void removeInstanceListener(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addLocaleEncodingMappingParameter(java.lang.String, java.lang.String)", "public void addLocaleEncodingMappingParameter(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addMimeMapping(java.lang.String, java.lang.String)", "public void addMimeMapping(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.findMimeMapping(java.lang.String)", "public java.lang.String findMimeMapping(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findMimeMappings()", "public java.lang.String[] findMimeMappings()"], ["void", "org.apache.catalina.startup.FailedContext.removeMimeMapping(java.lang.String)", "public void removeMimeMapping(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addParameter(java.lang.String, java.lang.String)", "public void addParameter(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.findParameter(java.lang.String)", "public java.lang.String findParameter(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findParameters()", "public java.lang.String[] findParameters()"], ["void", "org.apache.catalina.startup.FailedContext.removeParameter(java.lang.String)", "public void removeParameter(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addRoleMapping(java.lang.String, java.lang.String)", "public void addRoleMapping(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.findRoleMapping(java.lang.String)", "public java.lang.String findRoleMapping(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.removeRoleMapping(java.lang.String)", "public void removeRoleMapping(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addSecurityRole(java.lang.String)", "public void addSecurityRole(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.findSecurityRole(java.lang.String)", "public boolean findSecurityRole(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findSecurityRoles()", "public java.lang.String[] findSecurityRoles()"], ["void", "org.apache.catalina.startup.FailedContext.removeSecurityRole(java.lang.String)", "public void removeSecurityRole(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addServletMapping(java.lang.String, java.lang.String)", "public void addServletMapping(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addServletMapping(java.lang.String, java.lang.String, boolean)", "public void addServletMapping(java.lang.String, java.lang.String, boolean)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.findServletMapping(java.lang.String)", "public java.lang.String findServletMapping(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findServletMappings()", "public java.lang.String[] findServletMappings()"], ["void", "org.apache.catalina.startup.FailedContext.removeServletMapping(java.lang.String)", "public void removeServletMapping(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addWelcomeFile(java.lang.String)", "public void addWelcomeFile(java.lang.String)"], ["boolean", "org.apache.catalina.startup.FailedContext.findWelcomeFile(java.lang.String)", "public boolean findWelcomeFile(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findWelcomeFiles()", "public java.lang.String[] findWelcomeFiles()"], ["void", "org.apache.catalina.startup.FailedContext.removeWelcomeFile(java.lang.String)", "public void removeWelcomeFile(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addWrapperLifecycle(java.lang.String)", "public void addWrapperLifecycle(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findWrapperLifecycles()", "public java.lang.String[] findWrapperLifecycles()"], ["void", "org.apache.catalina.startup.FailedContext.removeWrapperLifecycle(java.lang.String)", "public void removeWrapperLifecycle(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addWrapperListener(java.lang.String)", "public void addWrapperListener(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.startup.FailedContext.findWrapperListeners()", "public java.lang.String[] findWrapperListeners()"], ["void", "org.apache.catalina.startup.FailedContext.removeWrapperListener(java.lang.String)", "public void removeWrapperListener(java.lang.String)"], ["org.apache.catalina.Wrapper", "org.apache.catalina.startup.FailedContext.createWrapper()", "public org.apache.catalina.Wrapper createWrapper()"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.findStatusPage(int)", "public java.lang.String findStatusPage(int)"], ["int[]", "org.apache.catalina.startup.FailedContext.findStatusPages()", "public int[] findStatusPages()"], ["boolean", "org.apache.catalina.startup.FailedContext.fireRequestInitEvent(javax.servlet.ServletRequest)", "public boolean fireRequestInitEvent(javax.servlet.ServletRequest)"], ["boolean", "org.apache.catalina.startup.FailedContext.fireRequestDestroyEvent(javax.servlet.ServletRequest)", "public boolean fireRequestDestroyEvent(javax.servlet.ServletRequest)"], ["void", "org.apache.catalina.startup.FailedContext.reload()", "public void reload()"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["int", "org.apache.catalina.startup.FailedContext.getEffectiveMajorVersion()", "public int getEffectiveMajorVersion()"], ["void", "org.apache.catalina.startup.FailedContext.setEffectiveMajorVersion(int)", "public void setEffectiveMajorVersion(int)"], ["int", "org.apache.catalina.startup.FailedContext.getEffectiveMinorVersion()", "public int getEffectiveMinorVersion()"], ["void", "org.apache.catalina.startup.FailedContext.setEffectiveMinorVersion(int)", "public void setEffectiveMinorVersion(int)"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.apache.catalina.startup.FailedContext.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["void", "org.apache.catalina.startup.FailedContext.setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)", "public void setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)"], ["void", "org.apache.catalina.startup.FailedContext.addServletContainerInitializer(javax.servlet.ServletContainerInitializer, java.util.Set<java.lang.Class<?>>)", "public void addServletContainerInitializer(javax.servlet.ServletContainerInitializer, java.util.Set<java.lang.Class<?>>)"], ["boolean", "org.apache.catalina.startup.FailedContext.getPaused()", "public boolean getPaused()"], ["boolean", "org.apache.catalina.startup.FailedContext.isServlet22()", "public boolean isServlet22()"], ["java.util.Set<java.lang.String>", "org.apache.catalina.startup.FailedContext.addServletSecurity(javax.servlet.ServletRegistration$Dynamic, javax.servlet.ServletSecurityElement)", "public java.util.Set<java.lang.String> addServletSecurity(javax.servlet.ServletRegistration$Dynamic, javax.servlet.ServletSecurityElement)"], ["void", "org.apache.catalina.startup.FailedContext.setResourceOnlyServlets(java.lang.String)", "public void setResourceOnlyServlets(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getResourceOnlyServlets()", "public java.lang.String getResourceOnlyServlets()"], ["boolean", "org.apache.catalina.startup.FailedContext.isResourceOnlyServlet(java.lang.String)", "public boolean isResourceOnlyServlet(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getBaseName()", "public java.lang.String getBaseName()"], ["void", "org.apache.catalina.startup.FailedContext.setFireRequestListenersOnForwards(boolean)", "public void setFireRequestListenersOnForwards(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getFireRequestListenersOnForwards()", "public boolean getFireRequestListenersOnForwards()"], ["void", "org.apache.catalina.startup.FailedContext.setPreemptiveAuthentication(boolean)", "public void setPreemptiveAuthentication(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getPreemptiveAuthentication()", "public boolean getPreemptiveAuthentication()"], ["void", "org.apache.catalina.startup.FailedContext.setSendRedirectBody(boolean)", "public void setSendRedirectBody(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getSendRedirectBody()", "public boolean getSendRedirectBody()"], ["synchronized", "org.apache.catalina.startup.FailedContext.void addValve(org.apache.catalina.Valve)", "public synchronized void addValve(org.apache.catalina.Valve)"], ["java.io.File", "org.apache.catalina.startup.FailedContext.getCatalinaBase()", "public java.io.File getCatalinaBase()"], ["java.io.File", "org.apache.catalina.startup.FailedContext.getCatalinaHome()", "public java.io.File getCatalinaHome()"], ["void", "org.apache.catalina.startup.FailedContext.setAddWebinfClassesResources(boolean)", "public void setAddWebinfClassesResources(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getAddWebinfClassesResources()", "public boolean getAddWebinfClassesResources()"], ["void", "org.apache.catalina.startup.FailedContext.addPostConstructMethod(java.lang.String, java.lang.String)", "public void addPostConstructMethod(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.addPreDestroyMethod(java.lang.String, java.lang.String)", "public void addPreDestroyMethod(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.removePostConstructMethod(java.lang.String)", "public void removePostConstructMethod(java.lang.String)"], ["void", "org.apache.catalina.startup.FailedContext.removePreDestroyMethod(java.lang.String)", "public void removePreDestroyMethod(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.findPostConstructMethod(java.lang.String)", "public java.lang.String findPostConstructMethod(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.findPreDestroyMethod(java.lang.String)", "public java.lang.String findPreDestroyMethod(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.startup.FailedContext.findPostConstructMethods()", "public java.util.Map<java.lang.String, java.lang.String> findPostConstructMethods()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.startup.FailedContext.findPreDestroyMethods()", "public java.util.Map<java.lang.String, java.lang.String> findPreDestroyMethods()"], ["org.apache.tomcat.InstanceManager", "org.apache.catalina.startup.FailedContext.getInstanceManager()", "public org.apache.tomcat.InstanceManager getInstanceManager()"], ["void", "org.apache.catalina.startup.FailedContext.setInstanceManager(org.apache.tomcat.InstanceManager)", "public void setInstanceManager(org.apache.tomcat.InstanceManager)"], ["void", "org.apache.catalina.startup.FailedContext.setContainerSciFilter(java.lang.String)", "public void setContainerSciFilter(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getContainerSciFilter()", "public java.lang.String getContainerSciFilter()"], ["org.apache.catalina.ThreadBindingListener", "org.apache.catalina.startup.FailedContext.getThreadBindingListener()", "public org.apache.catalina.ThreadBindingListener getThreadBindingListener()"], ["void", "org.apache.catalina.startup.FailedContext.setThreadBindingListener(org.apache.catalina.ThreadBindingListener)", "public void setThreadBindingListener(org.apache.catalina.ThreadBindingListener)"], ["java.lang.ClassLoader", "org.apache.catalina.startup.FailedContext.bind(boolean, java.lang.ClassLoader)", "public java.lang.ClassLoader bind(boolean, java.lang.ClassLoader)"], ["void", "org.apache.catalina.startup.FailedContext.unbind(boolean, java.lang.ClassLoader)", "public void unbind(boolean, java.lang.ClassLoader)"], ["java.lang.Object", "org.apache.catalina.startup.FailedContext.getNamingToken()", "public java.lang.Object getNamingToken()"], ["void", "org.apache.catalina.startup.FailedContext.setUseRfc6265(boolean)", "public void setUseRfc6265(boolean)"], ["boolean", "org.apache.catalina.startup.FailedContext.getUseRfc6265()", "public boolean getUseRfc6265()"], ["void", "org.apache.catalina.startup.FailedContext.setCookieEncoding(java.lang.String)", "public void setCookieEncoding(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.FailedContext.getCookieEncoding()", "public java.lang.String getCookieEncoding()"], ["java.nio.charset.Charset", "org.apache.catalina.startup.FailedContext.getCookieEncodingCharset()", "public java.nio.charset.Charset getCookieEncodingCharset()"], ["org.apache.catalina.startup.HomesUserDatabase", "org.apache.catalina.startup.HomesUserDatabase()", "public org.apache.catalina.startup.HomesUserDatabase()"], ["org.apache.catalina.startup.UserConfig", "org.apache.catalina.startup.HomesUserDatabase.getUserConfig()", "public org.apache.catalina.startup.UserConfig getUserConfig()"], ["void", "org.apache.catalina.startup.HomesUserDatabase.setUserConfig(org.apache.catalina.startup.UserConfig)", "public void setUserConfig(org.apache.catalina.startup.UserConfig)"], ["java.lang.String", "org.apache.catalina.startup.HomesUserDatabase.getHome(java.lang.String)", "public java.lang.String getHome(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.startup.HomesUserDatabase.getUsers()", "public java.util.Enumeration<java.lang.String> getUsers()"], ["org.apache.catalina.startup.HostConfig$DeployDescriptor", "org.apache.catalina.startup.HostConfig$DeployDescriptor(org.apache.catalina.startup.HostConfig, org.apache.catalina.util.ContextName, java.io.File)", "public org.apache.catalina.startup.HostConfig$DeployDescriptor(org.apache.catalina.startup.HostConfig, org.apache.catalina.util.ContextName, java.io.File)"], ["void", "org.apache.catalina.startup.HostConfig$DeployDescriptor.run()", "public void run()"], ["org.apache.catalina.startup.HostConfig$DeployDirectory", "org.apache.catalina.startup.HostConfig$DeployDirectory(org.apache.catalina.startup.HostConfig, org.apache.catalina.util.ContextName, java.io.File)", "public org.apache.catalina.startup.HostConfig$DeployDirectory(org.apache.catalina.startup.HostConfig, org.apache.catalina.util.ContextName, java.io.File)"], ["void", "org.apache.catalina.startup.HostConfig$DeployDirectory.run()", "public void run()"], ["org.apache.catalina.startup.HostConfig$DeployWar", "org.apache.catalina.startup.HostConfig$DeployWar(org.apache.catalina.startup.HostConfig, org.apache.catalina.util.ContextName, java.io.File)", "public org.apache.catalina.startup.HostConfig$DeployWar(org.apache.catalina.startup.HostConfig, org.apache.catalina.util.ContextName, java.io.File)"], ["void", "org.apache.catalina.startup.HostConfig$DeployWar.run()", "public void run()"], ["org.apache.catalina.startup.HostConfig$DeployedApplication", "org.apache.catalina.startup.HostConfig$DeployedApplication(java.lang.String, boolean)", "public org.apache.catalina.startup.HostConfig$DeployedApplication(java.lang.String, boolean)"], ["org.apache.catalina.startup.HostConfig", "org.apache.catalina.startup.HostConfig()", "public org.apache.catalina.startup.HostConfig()"], ["java.lang.String", "org.apache.catalina.startup.HostConfig.getContextClass()", "public java.lang.String getContextClass()"], ["void", "org.apache.catalina.startup.HostConfig.setContextClass(java.lang.String)", "public void setContextClass(java.lang.String)"], ["boolean", "org.apache.catalina.startup.HostConfig.isDeployXML()", "public boolean isDeployXML()"], ["void", "org.apache.catalina.startup.HostConfig.setDeployXML(boolean)", "public void setDeployXML(boolean)"], ["boolean", "org.apache.catalina.startup.HostConfig.isCopyXML()", "public boolean isCopyXML()"], ["void", "org.apache.catalina.startup.HostConfig.setCopyXML(boolean)", "public void setCopyXML(boolean)"], ["boolean", "org.apache.catalina.startup.HostConfig.isUnpackWARs()", "public boolean isUnpackWARs()"], ["void", "org.apache.catalina.startup.HostConfig.setUnpackWARs(boolean)", "public void setUnpackWARs(boolean)"], ["void", "org.apache.catalina.startup.HostConfig.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["synchronized", "org.apache.catalina.startup.HostConfig.void addServiced(java.lang.String)", "public synchronized void addServiced(java.lang.String)"], ["synchronized", "org.apache.catalina.startup.HostConfig.boolean isServiced(java.lang.String)", "public synchronized boolean isServiced(java.lang.String)"], ["synchronized", "org.apache.catalina.startup.HostConfig.void removeServiced(java.lang.String)", "public synchronized void removeServiced(java.lang.String)"], ["long", "org.apache.catalina.startup.HostConfig.getDeploymentTime(java.lang.String)", "public long getDeploymentTime(java.lang.String)"], ["boolean", "org.apache.catalina.startup.HostConfig.isDeployed(java.lang.String)", "public boolean isDeployed(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.HostConfig.getConfigBaseName()", "public java.lang.String getConfigBaseName()"], ["void", "org.apache.catalina.startup.HostConfig.start()", "public void start()"], ["void", "org.apache.catalina.startup.HostConfig.stop()", "public void stop()"], ["void", "org.apache.catalina.startup.HostConfig.check(java.lang.String)", "public void check(java.lang.String)"], ["synchronized", "org.apache.catalina.startup.HostConfig.void checkUndeploy()", "public synchronized void checkUndeploy()"], ["void", "org.apache.catalina.startup.HostConfig.manageApp(org.apache.catalina.Context)", "public void manageApp(org.apache.catalina.Context)"], ["void", "org.apache.catalina.startup.HostConfig.unmanageApp(java.lang.String)", "public void unmanageApp(java.lang.String)"], ["org.apache.catalina.startup.HostRuleSet", "org.apache.catalina.startup.HostRuleSet()", "public org.apache.catalina.startup.HostRuleSet()"], ["org.apache.catalina.startup.HostRuleSet", "org.apache.catalina.startup.HostRuleSet(java.lang.String)", "public org.apache.catalina.startup.HostRuleSet(java.lang.String)"], ["void", "org.apache.catalina.startup.HostRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.catalina.startup.LifecycleListenerRule", "org.apache.catalina.startup.LifecycleListenerRule(java.lang.String, java.lang.String)", "public org.apache.catalina.startup.LifecycleListenerRule(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.LifecycleListenerRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.catalina.startup.NamingRuleSet", "org.apache.catalina.startup.NamingRuleSet()", "public org.apache.catalina.startup.NamingRuleSet()"], ["org.apache.catalina.startup.NamingRuleSet", "org.apache.catalina.startup.NamingRuleSet(java.lang.String)", "public org.apache.catalina.startup.NamingRuleSet(java.lang.String)"], ["void", "org.apache.catalina.startup.NamingRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.catalina.startup.PasswdUserDatabase", "org.apache.catalina.startup.PasswdUserDatabase()", "public org.apache.catalina.startup.PasswdUserDatabase()"], ["org.apache.catalina.startup.UserConfig", "org.apache.catalina.startup.PasswdUserDatabase.getUserConfig()", "public org.apache.catalina.startup.UserConfig getUserConfig()"], ["void", "org.apache.catalina.startup.PasswdUserDatabase.setUserConfig(org.apache.catalina.startup.UserConfig)", "public void setUserConfig(org.apache.catalina.startup.UserConfig)"], ["java.lang.String", "org.apache.catalina.startup.PasswdUserDatabase.getHome(java.lang.String)", "public java.lang.String getHome(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.catalina.startup.PasswdUserDatabase.getUsers()", "public java.util.Enumeration<java.lang.String> getUsers()"], ["org.apache.catalina.startup.RealmRuleSet", "org.apache.catalina.startup.RealmRuleSet()", "public org.apache.catalina.startup.RealmRuleSet()"], ["org.apache.catalina.startup.RealmRuleSet", "org.apache.catalina.startup.RealmRuleSet(java.lang.String)", "public org.apache.catalina.startup.RealmRuleSet(java.lang.String)"], ["void", "org.apache.catalina.startup.RealmRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.catalina.startup.SetAllPropertiesRule", "org.apache.catalina.startup.SetAllPropertiesRule()", "public org.apache.catalina.startup.SetAllPropertiesRule()"], ["org.apache.catalina.startup.SetAllPropertiesRule", "org.apache.catalina.startup.SetAllPropertiesRule(java.lang.String[])", "public org.apache.catalina.startup.SetAllPropertiesRule(java.lang.String[])"], ["void", "org.apache.catalina.startup.SetAllPropertiesRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.catalina.startup.SetContextPropertiesRule", "org.apache.catalina.startup.SetContextPropertiesRule()", "public org.apache.catalina.startup.SetContextPropertiesRule()"], ["void", "org.apache.catalina.startup.SetContextPropertiesRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.catalina.startup.SetNextNamingRule", "org.apache.catalina.startup.SetNextNamingRule(java.lang.String, java.lang.String)", "public org.apache.catalina.startup.SetNextNamingRule(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.SetNextNamingRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.startup.SetNextNamingRule.toString()", "public java.lang.String toString()"], ["org.apache.catalina.startup.SetParentClassLoaderRule", "org.apache.catalina.startup.SetParentClassLoaderRule(java.lang.ClassLoader)", "public org.apache.catalina.startup.SetParentClassLoaderRule(java.lang.ClassLoader)"], ["void", "org.apache.catalina.startup.SetParentClassLoaderRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.catalina.startup.Tomcat$DefaultWebXmlListener", "org.apache.catalina.startup.Tomcat$DefaultWebXmlListener()", "public org.apache.catalina.startup.Tomcat$DefaultWebXmlListener()"], ["void", "org.apache.catalina.startup.Tomcat$DefaultWebXmlListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.startup.Tomcat$ExistingStandardWrapper", "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper(javax.servlet.Servlet)", "public org.apache.catalina.startup.Tomcat$ExistingStandardWrapper(javax.servlet.Servlet)"], ["synchronized", "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper.javax.servlet.Servlet loadServlet()", "public synchronized javax.servlet.Servlet loadServlet() throws javax.servlet.ServletException"], ["long", "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper.getAvailable()", "public long getAvailable()"], ["boolean", "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper.isUnavailable()", "public boolean isUnavailable()"], ["javax.servlet.Servlet", "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper.getServlet()", "public javax.servlet.Servlet getServlet()"], ["java.lang.String", "org.apache.catalina.startup.Tomcat$ExistingStandardWrapper.getServletClass()", "public java.lang.String getServletClass()"], ["org.apache.catalina.startup.Tomcat$FixContextListener", "org.apache.catalina.startup.Tomcat$FixContextListener()", "public org.apache.catalina.startup.Tomcat$FixContextListener()"], ["void", "org.apache.catalina.startup.Tomcat$FixContextListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.startup.Tomcat", "org.apache.catalina.startup.Tomcat()", "public org.apache.catalina.startup.Tomcat()"], ["void", "org.apache.catalina.startup.Tomcat.setBaseDir(java.lang.String)", "public void setBaseDir(java.lang.String)"], ["void", "org.apache.catalina.startup.Tomcat.setPort(int)", "public void setPort(int)"], ["void", "org.apache.catalina.startup.Tomcat.setHostname(java.lang.String)", "public void setHostname(java.lang.String)"], ["org.apache.catalina.Context", "org.apache.catalina.startup.Tomcat.addWebapp(java.lang.String, java.lang.String)", "public org.apache.catalina.Context addWebapp(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["org.apache.catalina.Context", "org.apache.catalina.startup.Tomcat.addContext(java.lang.String, java.lang.String)", "public org.apache.catalina.Context addContext(java.lang.String, java.lang.String)"], ["org.apache.catalina.Wrapper", "org.apache.catalina.startup.Tomcat.addServlet(java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.Wrapper addServlet(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.catalina.Wrapper", "org.apache.catalina.startup.Tomcat.addServlet(org.apache.catalina.Context, java.lang.String, java.lang.String)", "public static org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context, java.lang.String, java.lang.String)"], ["org.apache.catalina.Wrapper", "org.apache.catalina.startup.Tomcat.addServlet(java.lang.String, java.lang.String, javax.servlet.Servlet)", "public org.apache.catalina.Wrapper addServlet(java.lang.String, java.lang.String, javax.servlet.Servlet)"], ["org.apache.catalina.Wrapper", "org.apache.catalina.startup.Tomcat.addServlet(org.apache.catalina.Context, java.lang.String, javax.servlet.Servlet)", "public static org.apache.catalina.Wrapper addServlet(org.apache.catalina.Context, java.lang.String, javax.servlet.Servlet)"], ["void", "org.apache.catalina.startup.Tomcat.init()", "public void init() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.startup.Tomcat.start()", "public void start() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.startup.Tomcat.stop()", "public void stop() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.startup.Tomcat.destroy()", "public void destroy() throws org.apache.catalina.LifecycleException"], ["void", "org.apache.catalina.startup.Tomcat.addUser(java.lang.String, java.lang.String)", "public void addUser(java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.Tomcat.addRole(java.lang.String, java.lang.String)", "public void addRole(java.lang.String, java.lang.String)"], ["org.apache.catalina.connector.Connector", "org.apache.catalina.startup.Tomcat.getConnector()", "public org.apache.catalina.connector.Connector getConnector()"], ["void", "org.apache.catalina.startup.Tomcat.setConnector(org.apache.catalina.connector.Connector)", "public void setConnector(org.apache.catalina.connector.Connector)"], ["org.apache.catalina.Service", "org.apache.catalina.startup.Tomcat.getService()", "public org.apache.catalina.Service getService()"], ["void", "org.apache.catalina.startup.Tomcat.setHost(org.apache.catalina.Host)", "public void setHost(org.apache.catalina.Host)"], ["org.apache.catalina.Host", "org.apache.catalina.startup.Tomcat.getHost()", "public org.apache.catalina.Host getHost()"], ["org.apache.catalina.Engine", "org.apache.catalina.startup.Tomcat.getEngine()", "public org.apache.catalina.Engine getEngine()"], ["org.apache.catalina.Server", "org.apache.catalina.startup.Tomcat.getServer()", "public org.apache.catalina.Server getServer()"], ["org.apache.catalina.Context", "org.apache.catalina.startup.Tomcat.addContext(org.apache.catalina.Host, java.lang.String, java.lang.String)", "public org.apache.catalina.Context addContext(org.apache.catalina.Host, java.lang.String, java.lang.String)"], ["org.apache.catalina.Context", "org.apache.catalina.startup.Tomcat.addContext(org.apache.catalina.Host, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.Context addContext(org.apache.catalina.Host, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.catalina.Context", "org.apache.catalina.startup.Tomcat.addWebapp(org.apache.catalina.Host, java.lang.String, java.lang.String)", "public org.apache.catalina.Context addWebapp(org.apache.catalina.Host, java.lang.String, java.lang.String)"], ["org.apache.catalina.Context", "org.apache.catalina.startup.Tomcat.addWebapp(org.apache.catalina.Host, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.Context addWebapp(org.apache.catalina.Host, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.catalina.LifecycleListener", "org.apache.catalina.startup.Tomcat.getDefaultWebXmlListener()", "public org.apache.catalina.LifecycleListener getDefaultWebXmlListener()"], ["java.lang.String", "org.apache.catalina.startup.Tomcat.noDefaultWebXmlPath()", "public java.lang.String noDefaultWebXmlPath()"], ["void", "org.apache.catalina.startup.Tomcat.setSilent(boolean)", "public void setSilent(boolean)"], ["void", "org.apache.catalina.startup.Tomcat.enableNaming()", "public void enableNaming()"], ["void", "org.apache.catalina.startup.Tomcat.initWebappDefaults(java.lang.String)", "public void initWebappDefaults(java.lang.String)"], ["void", "org.apache.catalina.startup.Tomcat.initWebappDefaults(org.apache.catalina.Context)", "public static void initWebappDefaults(org.apache.catalina.Context)"], ["org.apache.catalina.startup.Tool", "org.apache.catalina.startup.Tool()", "public org.apache.catalina.startup.Tool()"], ["void", "org.apache.catalina.startup.Tool.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["org.apache.catalina.startup.UserConfig$DeployUserDirectory", "org.apache.catalina.startup.UserConfig$DeployUserDirectory(org.apache.catalina.startup.UserConfig, java.lang.String, java.lang.String)", "public org.apache.catalina.startup.UserConfig$DeployUserDirectory(org.apache.catalina.startup.UserConfig, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.startup.UserConfig$DeployUserDirectory.run()", "public void run()"], ["org.apache.catalina.startup.UserConfig", "org.apache.catalina.startup.UserConfig()", "public org.apache.catalina.startup.UserConfig()"], ["java.lang.String", "org.apache.catalina.startup.UserConfig.getConfigClass()", "public java.lang.String getConfigClass()"], ["void", "org.apache.catalina.startup.UserConfig.setConfigClass(java.lang.String)", "public void setConfigClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.UserConfig.getContextClass()", "public java.lang.String getContextClass()"], ["void", "org.apache.catalina.startup.UserConfig.setContextClass(java.lang.String)", "public void setContextClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.UserConfig.getDirectoryName()", "public java.lang.String getDirectoryName()"], ["void", "org.apache.catalina.startup.UserConfig.setDirectoryName(java.lang.String)", "public void setDirectoryName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.UserConfig.getHomeBase()", "public java.lang.String getHomeBase()"], ["void", "org.apache.catalina.startup.UserConfig.setHomeBase(java.lang.String)", "public void setHomeBase(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.UserConfig.getUserClass()", "public java.lang.String getUserClass()"], ["void", "org.apache.catalina.startup.UserConfig.setUserClass(java.lang.String)", "public void setUserClass(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.UserConfig.getAllow()", "public java.lang.String getAllow()"], ["void", "org.apache.catalina.startup.UserConfig.setAllow(java.lang.String)", "public void setAllow(java.lang.String)"], ["java.lang.String", "org.apache.catalina.startup.UserConfig.getDeny()", "public java.lang.String getDeny()"], ["void", "org.apache.catalina.startup.UserConfig.setDeny(java.lang.String)", "public void setDeny(java.lang.String)"], ["void", "org.apache.catalina.startup.UserConfig.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.startup.VersionLoggerListener", "org.apache.catalina.startup.VersionLoggerListener()", "public org.apache.catalina.startup.VersionLoggerListener()"], ["void", "org.apache.catalina.startup.VersionLoggerListener.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["org.apache.catalina.startup.WebAnnotationSet", "org.apache.catalina.startup.WebAnnotationSet()", "public org.apache.catalina.startup.WebAnnotationSet()"], ["void", "org.apache.catalina.startup.WebAnnotationSet.loadApplicationAnnotations(org.apache.catalina.Context)", "public static void loadApplicationAnnotations(org.apache.catalina.Context)"], ["org.apache.catalina.startup.WebappServiceLoader", "org.apache.catalina.startup.WebappServiceLoader(javax.servlet.ServletContext, java.lang.String)", "public org.apache.catalina.startup.WebappServiceLoader(javax.servlet.ServletContext, java.lang.String)"], ["java.util.List<T>", "org.apache.catalina.startup.WebappServiceLoader.load(java.lang.Class<T>)", "public java.util.List<T> load(java.lang.Class<T>) throws java.io.IOException"], ["org.apache.catalina.users.AbstractGroup", "org.apache.catalina.users.AbstractGroup()", "public org.apache.catalina.users.AbstractGroup()"], ["java.lang.String", "org.apache.catalina.users.AbstractGroup.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.catalina.users.AbstractGroup.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.catalina.users.AbstractGroup.getGroupname()", "public java.lang.String getGroupname()"], ["void", "org.apache.catalina.users.AbstractGroup.setGroupname(java.lang.String)", "public void setGroupname(java.lang.String)"], ["java.lang.String", "org.apache.catalina.users.AbstractGroup.getName()", "public java.lang.String getName()"], ["org.apache.catalina.users.AbstractRole", "org.apache.catalina.users.AbstractRole()", "public org.apache.catalina.users.AbstractRole()"], ["java.lang.String", "org.apache.catalina.users.AbstractRole.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.catalina.users.AbstractRole.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.catalina.users.AbstractRole.getRolename()", "public java.lang.String getRolename()"], ["void", "org.apache.catalina.users.AbstractRole.setRolename(java.lang.String)", "public void setRolename(java.lang.String)"], ["java.lang.String", "org.apache.catalina.users.AbstractRole.getName()", "public java.lang.String getName()"], ["org.apache.catalina.users.AbstractUser", "org.apache.catalina.users.AbstractUser()", "public org.apache.catalina.users.AbstractUser()"], ["java.lang.String", "org.apache.catalina.users.AbstractUser.getFullName()", "public java.lang.String getFullName()"], ["void", "org.apache.catalina.users.AbstractUser.setFullName(java.lang.String)", "public void setFullName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.users.AbstractUser.getPassword()", "public java.lang.String getPassword()"], ["void", "org.apache.catalina.users.AbstractUser.setPassword(java.lang.String)", "public void setPassword(java.lang.String)"], ["java.lang.String", "org.apache.catalina.users.AbstractUser.getUsername()", "public java.lang.String getUsername()"], ["void", "org.apache.catalina.users.AbstractUser.setUsername(java.lang.String)", "public void setUsername(java.lang.String)"], ["java.lang.String", "org.apache.catalina.users.AbstractUser.getName()", "public java.lang.String getName()"], ["org.apache.catalina.users.Constants", "org.apache.catalina.users.Constants()", "public org.apache.catalina.users.Constants()"], ["java.util.Iterator<org.apache.catalina.Role>", "org.apache.catalina.users.MemoryGroup.getRoles()", "public java.util.Iterator<org.apache.catalina.Role> getRoles()"], ["org.apache.catalina.UserDatabase", "org.apache.catalina.users.MemoryGroup.getUserDatabase()", "public org.apache.catalina.UserDatabase getUserDatabase()"], ["java.util.Iterator<org.apache.catalina.User>", "org.apache.catalina.users.MemoryGroup.getUsers()", "public java.util.Iterator<org.apache.catalina.User> getUsers()"], ["void", "org.apache.catalina.users.MemoryGroup.addRole(org.apache.catalina.Role)", "public void addRole(org.apache.catalina.Role)"], ["boolean", "org.apache.catalina.users.MemoryGroup.isInRole(org.apache.catalina.Role)", "public boolean isInRole(org.apache.catalina.Role)"], ["void", "org.apache.catalina.users.MemoryGroup.removeRole(org.apache.catalina.Role)", "public void removeRole(org.apache.catalina.Role)"], ["void", "org.apache.catalina.users.MemoryGroup.removeRoles()", "public void removeRoles()"], ["java.lang.String", "org.apache.catalina.users.MemoryGroup.toString()", "public java.lang.String toString()"], ["org.apache.catalina.users.MemoryGroupCreationFactory", "org.apache.catalina.users.MemoryGroupCreationFactory(org.apache.catalina.users.MemoryUserDatabase)", "public org.apache.catalina.users.MemoryGroupCreationFactory(org.apache.catalina.users.MemoryUserDatabase)"], ["java.lang.Object", "org.apache.catalina.users.MemoryGroupCreationFactory.createObject(org.xml.sax.Attributes)", "public java.lang.Object createObject(org.xml.sax.Attributes)"], ["org.apache.catalina.UserDatabase", "org.apache.catalina.users.MemoryRole.getUserDatabase()", "public org.apache.catalina.UserDatabase getUserDatabase()"], ["java.lang.String", "org.apache.catalina.users.MemoryRole.toString()", "public java.lang.String toString()"], ["org.apache.catalina.users.MemoryRoleCreationFactory", "org.apache.catalina.users.MemoryRoleCreationFactory(org.apache.catalina.users.MemoryUserDatabase)", "public org.apache.catalina.users.MemoryRoleCreationFactory(org.apache.catalina.users.MemoryUserDatabase)"], ["java.lang.Object", "org.apache.catalina.users.MemoryRoleCreationFactory.createObject(org.xml.sax.Attributes)", "public java.lang.Object createObject(org.xml.sax.Attributes)"], ["java.util.Iterator<org.apache.catalina.Group>", "org.apache.catalina.users.MemoryUser.getGroups()", "public java.util.Iterator<org.apache.catalina.Group> getGroups()"], ["java.util.Iterator<org.apache.catalina.Role>", "org.apache.catalina.users.MemoryUser.getRoles()", "public java.util.Iterator<org.apache.catalina.Role> getRoles()"], ["org.apache.catalina.UserDatabase", "org.apache.catalina.users.MemoryUser.getUserDatabase()", "public org.apache.catalina.UserDatabase getUserDatabase()"], ["void", "org.apache.catalina.users.MemoryUser.addGroup(org.apache.catalina.Group)", "public void addGroup(org.apache.catalina.Group)"], ["void", "org.apache.catalina.users.MemoryUser.addRole(org.apache.catalina.Role)", "public void addRole(org.apache.catalina.Role)"], ["boolean", "org.apache.catalina.users.MemoryUser.isInGroup(org.apache.catalina.Group)", "public boolean isInGroup(org.apache.catalina.Group)"], ["boolean", "org.apache.catalina.users.MemoryUser.isInRole(org.apache.catalina.Role)", "public boolean isInRole(org.apache.catalina.Role)"], ["void", "org.apache.catalina.users.MemoryUser.removeGroup(org.apache.catalina.Group)", "public void removeGroup(org.apache.catalina.Group)"], ["void", "org.apache.catalina.users.MemoryUser.removeGroups()", "public void removeGroups()"], ["void", "org.apache.catalina.users.MemoryUser.removeRole(org.apache.catalina.Role)", "public void removeRole(org.apache.catalina.Role)"], ["void", "org.apache.catalina.users.MemoryUser.removeRoles()", "public void removeRoles()"], ["java.lang.String", "org.apache.catalina.users.MemoryUser.toXml()", "public java.lang.String toXml()"], ["java.lang.String", "org.apache.catalina.users.MemoryUser.toString()", "public java.lang.String toString()"], ["org.apache.catalina.users.MemoryUserCreationFactory", "org.apache.catalina.users.MemoryUserCreationFactory(org.apache.catalina.users.MemoryUserDatabase)", "public org.apache.catalina.users.MemoryUserCreationFactory(org.apache.catalina.users.MemoryUserDatabase)"], ["java.lang.Object", "org.apache.catalina.users.MemoryUserCreationFactory.createObject(org.xml.sax.Attributes)", "public java.lang.Object createObject(org.xml.sax.Attributes)"], ["org.apache.catalina.users.MemoryUserDatabase", "org.apache.catalina.users.MemoryUserDatabase()", "public org.apache.catalina.users.MemoryUserDatabase()"], ["org.apache.catalina.users.MemoryUserDatabase", "org.apache.catalina.users.MemoryUserDatabase(java.lang.String)", "public org.apache.catalina.users.MemoryUserDatabase(java.lang.String)"], ["java.util.Iterator<org.apache.catalina.Group>", "org.apache.catalina.users.MemoryUserDatabase.getGroups()", "public java.util.Iterator<org.apache.catalina.Group> getGroups()"], ["java.lang.String", "org.apache.catalina.users.MemoryUserDatabase.getId()", "public java.lang.String getId()"], ["java.lang.String", "org.apache.catalina.users.MemoryUserDatabase.getPathname()", "public java.lang.String getPathname()"], ["void", "org.apache.catalina.users.MemoryUserDatabase.setPathname(java.lang.String)", "public void setPathname(java.lang.String)"], ["boolean", "org.apache.catalina.users.MemoryUserDatabase.getReadonly()", "public boolean getReadonly()"], ["void", "org.apache.catalina.users.MemoryUserDatabase.setReadonly(boolean)", "public void setReadonly(boolean)"], ["java.util.Iterator<org.apache.catalina.Role>", "org.apache.catalina.users.MemoryUserDatabase.getRoles()", "public java.util.Iterator<org.apache.catalina.Role> getRoles()"], ["java.util.Iterator<org.apache.catalina.User>", "org.apache.catalina.users.MemoryUserDatabase.getUsers()", "public java.util.Iterator<org.apache.catalina.User> getUsers()"], ["void", "org.apache.catalina.users.MemoryUserDatabase.close()", "public void close() throws java.lang.Exception"], ["org.apache.catalina.Group", "org.apache.catalina.users.MemoryUserDatabase.createGroup(java.lang.String, java.lang.String)", "public org.apache.catalina.Group createGroup(java.lang.String, java.lang.String)"], ["org.apache.catalina.Role", "org.apache.catalina.users.MemoryUserDatabase.createRole(java.lang.String, java.lang.String)", "public org.apache.catalina.Role createRole(java.lang.String, java.lang.String)"], ["org.apache.catalina.User", "org.apache.catalina.users.MemoryUserDatabase.createUser(java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.User createUser(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.catalina.Group", "org.apache.catalina.users.MemoryUserDatabase.findGroup(java.lang.String)", "public org.apache.catalina.Group findGroup(java.lang.String)"], ["org.apache.catalina.Role", "org.apache.catalina.users.MemoryUserDatabase.findRole(java.lang.String)", "public org.apache.catalina.Role findRole(java.lang.String)"], ["org.apache.catalina.User", "org.apache.catalina.users.MemoryUserDatabase.findUser(java.lang.String)", "public org.apache.catalina.User findUser(java.lang.String)"], ["void", "org.apache.catalina.users.MemoryUserDatabase.open()", "public void open() throws java.lang.Exception"], ["void", "org.apache.catalina.users.MemoryUserDatabase.removeGroup(org.apache.catalina.Group)", "public void removeGroup(org.apache.catalina.Group)"], ["void", "org.apache.catalina.users.MemoryUserDatabase.removeRole(org.apache.catalina.Role)", "public void removeRole(org.apache.catalina.Role)"], ["void", "org.apache.catalina.users.MemoryUserDatabase.removeUser(org.apache.catalina.User)", "public void removeUser(org.apache.catalina.User)"], ["boolean", "org.apache.catalina.users.MemoryUserDatabase.isWriteable()", "public boolean isWriteable()"], ["void", "org.apache.catalina.users.MemoryUserDatabase.save()", "public void save() throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.users.MemoryUserDatabase.toString()", "public java.lang.String toString()"], ["org.apache.catalina.users.MemoryUserDatabaseFactory", "org.apache.catalina.users.MemoryUserDatabaseFactory()", "public org.apache.catalina.users.MemoryUserDatabaseFactory()"], ["java.lang.Object", "org.apache.catalina.users.MemoryUserDatabaseFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws java.lang.Exception"], ["org.apache.catalina.util.CharsetMapper", "org.apache.catalina.util.CharsetMapper()", "public org.apache.catalina.util.CharsetMapper()"], ["org.apache.catalina.util.CharsetMapper", "org.apache.catalina.util.CharsetMapper(java.lang.String)", "public org.apache.catalina.util.CharsetMapper(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.CharsetMapper.getCharset(java.util.Locale)", "public java.lang.String getCharset(java.util.Locale)"], ["void", "org.apache.catalina.util.CharsetMapper.addCharsetMappingFromDeploymentDescriptor(java.lang.String, java.lang.String)", "public void addCharsetMappingFromDeploymentDescriptor(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.ConcurrentDateFormat.formatRfc1123(java.util.Date)", "public static java.lang.String formatRfc1123(java.util.Date)"], ["org.apache.catalina.util.ConcurrentDateFormat", "org.apache.catalina.util.ConcurrentDateFormat(java.lang.String, java.util.Locale, java.util.TimeZone)", "public org.apache.catalina.util.ConcurrentDateFormat(java.lang.String, java.util.Locale, java.util.TimeZone)"], ["java.lang.String", "org.apache.catalina.util.ConcurrentDateFormat.format(java.util.Date)", "public java.lang.String format(java.util.Date)"], ["org.apache.catalina.util.ContextName", "org.apache.catalina.util.ContextName(java.lang.String, boolean)", "public org.apache.catalina.util.ContextName(java.lang.String, boolean)"], ["org.apache.catalina.util.ContextName", "org.apache.catalina.util.ContextName(java.lang.String, java.lang.String)", "public org.apache.catalina.util.ContextName(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.ContextName.getBaseName()", "public java.lang.String getBaseName()"], ["java.lang.String", "org.apache.catalina.util.ContextName.getPath()", "public java.lang.String getPath()"], ["java.lang.String", "org.apache.catalina.util.ContextName.getVersion()", "public java.lang.String getVersion()"], ["java.lang.String", "org.apache.catalina.util.ContextName.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.catalina.util.ContextName.getDisplayName()", "public java.lang.String getDisplayName()"], ["java.lang.String", "org.apache.catalina.util.ContextName.toString()", "public java.lang.String toString()"], ["long", "org.apache.catalina.util.Conversions.byteArrayToLong(byte[])", "public static long byteArrayToLong(byte[]) throws java.io.IOException"], ["org.apache.catalina.util.CustomObjectInputStream", "org.apache.catalina.util.CustomObjectInputStream(java.io.InputStream, java.lang.ClassLoader)", "public org.apache.catalina.util.CustomObjectInputStream(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException"], ["java.lang.Class<?>", "org.apache.catalina.util.CustomObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "public java.lang.Class<?> resolveClass(java.io.ObjectStreamClass) throws java.lang.ClassNotFoundException, java.io.IOException"], ["org.apache.catalina.util.DOMWriter", "org.apache.catalina.util.DOMWriter(java.io.Writer, boolean)", "public org.apache.catalina.util.DOMWriter(java.io.Writer, boolean)"], ["java.lang.String", "org.apache.catalina.util.DOMWriter.getWriterEncoding()", "public static java.lang.String getWriterEncoding()"], ["void", "org.apache.catalina.util.DOMWriter.print(org.w3c.dom.Node)", "public void print(org.w3c.dom.Node)"], ["org.apache.catalina.util.Extension", "org.apache.catalina.util.Extension()", "public org.apache.catalina.util.Extension()"], ["java.lang.String", "org.apache.catalina.util.Extension.getExtensionName()", "public java.lang.String getExtensionName()"], ["void", "org.apache.catalina.util.Extension.setExtensionName(java.lang.String)", "public void setExtensionName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.Extension.getImplementationURL()", "public java.lang.String getImplementationURL()"], ["void", "org.apache.catalina.util.Extension.setImplementationURL(java.lang.String)", "public void setImplementationURL(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.Extension.getImplementationVendor()", "public java.lang.String getImplementationVendor()"], ["void", "org.apache.catalina.util.Extension.setImplementationVendor(java.lang.String)", "public void setImplementationVendor(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.Extension.getImplementationVendorId()", "public java.lang.String getImplementationVendorId()"], ["void", "org.apache.catalina.util.Extension.setImplementationVendorId(java.lang.String)", "public void setImplementationVendorId(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.Extension.getImplementationVersion()", "public java.lang.String getImplementationVersion()"], ["void", "org.apache.catalina.util.Extension.setImplementationVersion(java.lang.String)", "public void setImplementationVersion(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.Extension.getSpecificationVendor()", "public java.lang.String getSpecificationVendor()"], ["void", "org.apache.catalina.util.Extension.setSpecificationVendor(java.lang.String)", "public void setSpecificationVendor(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.Extension.getSpecificationVersion()", "public java.lang.String getSpecificationVersion()"], ["void", "org.apache.catalina.util.Extension.setSpecificationVersion(java.lang.String)", "public void setSpecificationVersion(java.lang.String)"], ["void", "org.apache.catalina.util.Extension.setFulfilled(boolean)", "public void setFulfilled(boolean)"], ["boolean", "org.apache.catalina.util.Extension.isFulfilled()", "public boolean isFulfilled()"], ["boolean", "org.apache.catalina.util.Extension.isCompatibleWith(org.apache.catalina.util.Extension)", "public boolean isCompatibleWith(org.apache.catalina.util.Extension)"], ["java.lang.String", "org.apache.catalina.util.Extension.toString()", "public java.lang.String toString()"], ["org.apache.catalina.util.ExtensionValidator", "org.apache.catalina.util.ExtensionValidator()", "public org.apache.catalina.util.ExtensionValidator()"], ["synchronized", "org.apache.catalina.util.ExtensionValidator.boolean validateApplication(org.apache.catalina.WebResourceRoot, org.apache.catalina.Context)", "public static synchronized boolean validateApplication(org.apache.catalina.WebResourceRoot, org.apache.catalina.Context) throws java.io.IOException"], ["void", "org.apache.catalina.util.ExtensionValidator.addSystemResource(java.io.File)", "public static void addSystemResource(java.io.File) throws java.io.IOException"], ["void", "org.apache.catalina.util.IOTools.flow(java.io.Reader, java.io.Writer, char[])", "public static void flow(java.io.Reader, java.io.Writer, char[]) throws java.io.IOException"], ["void", "org.apache.catalina.util.IOTools.flow(java.io.Reader, java.io.Writer)", "public static void flow(java.io.Reader, java.io.Writer) throws java.io.IOException"], ["void", "org.apache.catalina.util.IOTools.flow(java.io.InputStream, java.io.OutputStream, byte[])", "public static void flow(java.io.InputStream, java.io.OutputStream, byte[]) throws java.io.IOException"], ["void", "org.apache.catalina.util.IOTools.flow(java.io.InputStream, java.io.OutputStream)", "public static void flow(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["org.apache.catalina.util.InstanceSupport", "org.apache.catalina.util.InstanceSupport(org.apache.catalina.Wrapper)", "public org.apache.catalina.util.InstanceSupport(org.apache.catalina.Wrapper)"], ["org.apache.catalina.Wrapper", "org.apache.catalina.util.InstanceSupport.getWrapper()", "public org.apache.catalina.Wrapper getWrapper()"], ["void", "org.apache.catalina.util.InstanceSupport.addInstanceListener(org.apache.catalina.InstanceListener)", "public void addInstanceListener(org.apache.catalina.InstanceListener)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Filter)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Filter)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Filter, java.lang.Throwable)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Filter, java.lang.Throwable)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Filter, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Filter, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Filter, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Filter, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Servlet)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Servlet)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Servlet, java.lang.Throwable)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Servlet, java.lang.Throwable)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["void", "org.apache.catalina.util.InstanceSupport.fireInstanceEvent(java.lang.String, javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)", "public void fireInstanceEvent(java.lang.String, javax.servlet.Servlet, javax.servlet.ServletRequest, javax.servlet.ServletResponse, java.lang.Throwable)"], ["void", "org.apache.catalina.util.InstanceSupport.removeInstanceListener(org.apache.catalina.InstanceListener)", "public void removeInstanceListener(org.apache.catalina.InstanceListener)"], ["java.lang.reflect.Field[]", "org.apache.catalina.util.Introspection$1.run()", "public java.lang.reflect.Field[] run()"], ["java.lang.Object", "org.apache.catalina.util.Introspection$1.run()", "public java.lang.Object run()"], ["java.lang.reflect.Method[]", "org.apache.catalina.util.Introspection$2.run()", "public java.lang.reflect.Method[] run()"], ["java.lang.Object", "org.apache.catalina.util.Introspection$2.run()", "public java.lang.Object run()"], ["org.apache.catalina.util.Introspection", "org.apache.catalina.util.Introspection()", "public org.apache.catalina.util.Introspection()"], ["java.lang.String", "org.apache.catalina.util.Introspection.getPropertyName(java.lang.reflect.Method)", "public static java.lang.String getPropertyName(java.lang.reflect.Method)"], ["boolean", "org.apache.catalina.util.Introspection.isValidSetter(java.lang.reflect.Method)", "public static boolean isValidSetter(java.lang.reflect.Method)"], ["boolean", "org.apache.catalina.util.Introspection.isValidLifecycleCallback(java.lang.reflect.Method)", "public static boolean isValidLifecycleCallback(java.lang.reflect.Method)"], ["java.lang.reflect.Field[]", "org.apache.catalina.util.Introspection.getDeclaredFields(java.lang.Class<?>)", "public static java.lang.reflect.Field[] getDeclaredFields(java.lang.Class<?>)"], ["java.lang.reflect.Method[]", "org.apache.catalina.util.Introspection.getDeclaredMethods(java.lang.Class<?>)", "public static java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class<?>)"], ["java.lang.Class<?>", "org.apache.catalina.util.Introspection.loadClass(org.apache.catalina.Context, java.lang.String)", "public static java.lang.Class<?> loadClass(org.apache.catalina.Context, java.lang.String)"], ["java.lang.Class<?>", "org.apache.catalina.util.Introspection.convertPrimitiveType(java.lang.Class<?>)", "public static java.lang.Class<?> convertPrimitiveType(java.lang.Class<?>)"], ["org.apache.catalina.util.LifecycleBase", "org.apache.catalina.util.LifecycleBase()", "public org.apache.catalina.util.LifecycleBase()"], ["void", "org.apache.catalina.util.LifecycleBase.addLifecycleListener(org.apache.catalina.LifecycleListener)", "public void addLifecycleListener(org.apache.catalina.LifecycleListener)"], ["org.apache.catalina.LifecycleListener[]", "org.apache.catalina.util.LifecycleBase.findLifecycleListeners()", "public org.apache.catalina.LifecycleListener[] findLifecycleListeners()"], ["void", "org.apache.catalina.util.LifecycleBase.removeLifecycleListener(org.apache.catalina.LifecycleListener)", "public void removeLifecycleListener(org.apache.catalina.LifecycleListener)"], ["synchronized", "org.apache.catalina.util.LifecycleBase.void init()", "public final synchronized void init() throws org.apache.catalina.LifecycleException"], ["synchronized", "org.apache.catalina.util.LifecycleBase.void start()", "public final synchronized void start() throws org.apache.catalina.LifecycleException"], ["synchronized", "org.apache.catalina.util.LifecycleBase.void stop()", "public final synchronized void stop() throws org.apache.catalina.LifecycleException"], ["synchronized", "org.apache.catalina.util.LifecycleBase.void destroy()", "public final synchronized void destroy() throws org.apache.catalina.LifecycleException"], ["org.apache.catalina.LifecycleState", "org.apache.catalina.util.LifecycleBase.getState()", "public org.apache.catalina.LifecycleState getState()"], ["java.lang.String", "org.apache.catalina.util.LifecycleBase.getStateName()", "public java.lang.String getStateName()"], ["org.apache.catalina.util.LifecycleMBeanBase", "org.apache.catalina.util.LifecycleMBeanBase()", "public org.apache.catalina.util.LifecycleMBeanBase()"], ["void", "org.apache.catalina.util.LifecycleMBeanBase.setDomain(java.lang.String)", "public final void setDomain(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.LifecycleMBeanBase.getDomain()", "public final java.lang.String getDomain()"], ["javax.management.ObjectName", "org.apache.catalina.util.LifecycleMBeanBase.getObjectName()", "public final javax.management.ObjectName getObjectName()"], ["void", "org.apache.catalina.util.LifecycleMBeanBase.postDeregister()", "public final void postDeregister()"], ["void", "org.apache.catalina.util.LifecycleMBeanBase.postRegister(java.lang.Boolean)", "public final void postRegister(java.lang.Boolean)"], ["void", "org.apache.catalina.util.LifecycleMBeanBase.preDeregister()", "public final void preDeregister() throws java.lang.Exception"], ["javax.management.ObjectName", "org.apache.catalina.util.LifecycleMBeanBase.preRegister(javax.management.MBeanServer, javax.management.ObjectName)", "public final javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName) throws java.lang.Exception"], ["org.apache.catalina.util.LifecycleSupport", "org.apache.catalina.util.LifecycleSupport(org.apache.catalina.Lifecycle)", "public org.apache.catalina.util.LifecycleSupport(org.apache.catalina.Lifecycle)"], ["void", "org.apache.catalina.util.LifecycleSupport.addLifecycleListener(org.apache.catalina.LifecycleListener)", "public void addLifecycleListener(org.apache.catalina.LifecycleListener)"], ["org.apache.catalina.LifecycleListener[]", "org.apache.catalina.util.LifecycleSupport.findLifecycleListeners()", "public org.apache.catalina.LifecycleListener[] findLifecycleListeners()"], ["void", "org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(java.lang.String, java.lang.Object)", "public void fireLifecycleEvent(java.lang.String, java.lang.Object)"], ["void", "org.apache.catalina.util.LifecycleSupport.removeLifecycleListener(org.apache.catalina.LifecycleListener)", "public void removeLifecycleListener(org.apache.catalina.LifecycleListener)"], ["java.lang.String", "org.apache.catalina.util.MIME2Java.convert(java.lang.String)", "public static java.lang.String convert(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.MIME2Java.reverse(java.lang.String)", "public static java.lang.String reverse(java.lang.String)"], ["org.apache.catalina.util.ManifestResource", "org.apache.catalina.util.ManifestResource(java.lang.String, java.util.jar.Manifest, int)", "public org.apache.catalina.util.ManifestResource(java.lang.String, java.util.jar.Manifest, int)"], ["java.lang.String", "org.apache.catalina.util.ManifestResource.getResourceName()", "public java.lang.String getResourceName()"], ["java.util.ArrayList<org.apache.catalina.util.Extension>", "org.apache.catalina.util.ManifestResource.getAvailableExtensions()", "public java.util.ArrayList<org.apache.catalina.util.Extension> getAvailableExtensions()"], ["java.util.ArrayList<org.apache.catalina.util.Extension>", "org.apache.catalina.util.ManifestResource.getRequiredExtensions()", "public java.util.ArrayList<org.apache.catalina.util.Extension> getRequiredExtensions()"], ["int", "org.apache.catalina.util.ManifestResource.getAvailableExtensionCount()", "public int getAvailableExtensionCount()"], ["int", "org.apache.catalina.util.ManifestResource.getRequiredExtensionCount()", "public int getRequiredExtensionCount()"], ["boolean", "org.apache.catalina.util.ManifestResource.isFulfilled()", "public boolean isFulfilled()"], ["java.lang.String", "org.apache.catalina.util.ManifestResource.toString()", "public java.lang.String toString()"], ["org.apache.catalina.util.ParameterMap", "org.apache.catalina.util.ParameterMap()", "public org.apache.catalina.util.ParameterMap()"], ["org.apache.catalina.util.ParameterMap", "org.apache.catalina.util.ParameterMap(int)", "public org.apache.catalina.util.ParameterMap(int)"], ["org.apache.catalina.util.ParameterMap", "org.apache.catalina.util.ParameterMap(int, float)", "public org.apache.catalina.util.ParameterMap(int, float)"], ["org.apache.catalina.util.ParameterMap", "org.apache.catalina.util.ParameterMap(java.util.Map<K, V>)", "public org.apache.catalina.util.ParameterMap(java.util.Map<K, V>)"], ["boolean", "org.apache.catalina.util.ParameterMap.isLocked()", "public boolean isLocked()"], ["void", "org.apache.catalina.util.ParameterMap.setLocked(boolean)", "public void setLocked(boolean)"], ["void", "org.apache.catalina.util.ParameterMap.clear()", "public void clear()"], ["V", "org.apache.catalina.util.ParameterMap.put(K, V)", "public V put(K, V)"], ["void", "org.apache.catalina.util.ParameterMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.apache.catalina.util.ParameterMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["org.apache.catalina.util.RequestUtil", "org.apache.catalina.util.RequestUtil()", "public org.apache.catalina.util.RequestUtil()"], ["java.lang.String", "org.apache.catalina.util.RequestUtil.filter(java.lang.String)", "public static java.lang.String filter(java.lang.String)"], ["void", "org.apache.catalina.util.RequestUtil.parseParameters(java.util.Map<java.lang.String, java.lang.String[]>, java.lang.String, java.lang.String)", "public static void parseParameters(java.util.Map<java.lang.String, java.lang.String[]>, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.util.RequestUtil.parseParameters(java.util.Map<java.lang.String, java.lang.String[]>, byte[], java.lang.String)", "public static void parseParameters(java.util.Map<java.lang.String, java.lang.String[]>, byte[], java.lang.String) throws java.io.UnsupportedEncodingException"], ["org.apache.catalina.util.ResourceSet", "org.apache.catalina.util.ResourceSet()", "public org.apache.catalina.util.ResourceSet()"], ["org.apache.catalina.util.ResourceSet", "org.apache.catalina.util.ResourceSet(int)", "public org.apache.catalina.util.ResourceSet(int)"], ["org.apache.catalina.util.ResourceSet", "org.apache.catalina.util.ResourceSet(int, float)", "public org.apache.catalina.util.ResourceSet(int, float)"], ["org.apache.catalina.util.ResourceSet", "org.apache.catalina.util.ResourceSet(java.util.Collection<T>)", "public org.apache.catalina.util.ResourceSet(java.util.Collection<T>)"], ["boolean", "org.apache.catalina.util.ResourceSet.isLocked()", "public boolean isLocked()"], ["void", "org.apache.catalina.util.ResourceSet.setLocked(boolean)", "public void setLocked(boolean)"], ["boolean", "org.apache.catalina.util.ResourceSet.add(T)", "public boolean add(T)"], ["void", "org.apache.catalina.util.ResourceSet.clear()", "public void clear()"], ["boolean", "org.apache.catalina.util.ResourceSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["org.apache.catalina.util.ServerInfo", "org.apache.catalina.util.ServerInfo()", "public org.apache.catalina.util.ServerInfo()"], ["java.lang.String", "org.apache.catalina.util.ServerInfo.getServerInfo()", "public static java.lang.String getServerInfo()"], ["java.lang.String", "org.apache.catalina.util.ServerInfo.getServerBuilt()", "public static java.lang.String getServerBuilt()"], ["java.lang.String", "org.apache.catalina.util.ServerInfo.getServerNumber()", "public static java.lang.String getServerNumber()"], ["void", "org.apache.catalina.util.ServerInfo.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["java.lang.String", "org.apache.catalina.util.SessionConfig.getSessionCookieName(org.apache.catalina.Context)", "public static java.lang.String getSessionCookieName(org.apache.catalina.Context)"], ["java.lang.String", "org.apache.catalina.util.SessionConfig.getSessionUriParamName(org.apache.catalina.Context)", "public static java.lang.String getSessionUriParamName(org.apache.catalina.Context)"], ["org.apache.catalina.util.SessionIdGeneratorBase", "org.apache.catalina.util.SessionIdGeneratorBase()", "public org.apache.catalina.util.SessionIdGeneratorBase()"], ["void", "org.apache.catalina.util.SessionIdGeneratorBase.setSecureRandomClass(java.lang.String)", "public void setSecureRandomClass(java.lang.String)"], ["void", "org.apache.catalina.util.SessionIdGeneratorBase.setSecureRandomAlgorithm(java.lang.String)", "public void setSecureRandomAlgorithm(java.lang.String)"], ["void", "org.apache.catalina.util.SessionIdGeneratorBase.setSecureRandomProvider(java.lang.String)", "public void setSecureRandomProvider(java.lang.String)"], ["java.lang.String", "org.apache.catalina.util.SessionIdGeneratorBase.getJvmRoute()", "public java.lang.String getJvmRoute()"], ["void", "org.apache.catalina.util.SessionIdGeneratorBase.setJvmRoute(java.lang.String)", "public void setJvmRoute(java.lang.String)"], ["int", "org.apache.catalina.util.SessionIdGeneratorBase.getSessionIdLength()", "public int getSessionIdLength()"], ["void", "org.apache.catalina.util.SessionIdGeneratorBase.setSessionIdLength(int)", "public void setSessionIdLength(int)"], ["java.lang.String", "org.apache.catalina.util.SessionIdGeneratorBase.generateSessionId()", "public java.lang.String generateSessionId()"], ["org.apache.catalina.util.StandardSessionIdGenerator", "org.apache.catalina.util.StandardSessionIdGenerator()", "public org.apache.catalina.util.StandardSessionIdGenerator()"], ["java.lang.String", "org.apache.catalina.util.StandardSessionIdGenerator.generateSessionId(java.lang.String)", "public java.lang.String generateSessionId(java.lang.String)"], ["org.apache.catalina.util.Strftime", "org.apache.catalina.util.Strftime(java.lang.String, java.util.Locale)", "public org.apache.catalina.util.Strftime(java.lang.String, java.util.Locale)"], ["java.lang.String", "org.apache.catalina.util.Strftime.format(java.util.Date)", "public java.lang.String format(java.util.Date)"], ["java.util.TimeZone", "org.apache.catalina.util.Strftime.getTimeZone()", "public java.util.TimeZone getTimeZone()"], ["void", "org.apache.catalina.util.Strftime.setTimeZone(java.util.TimeZone)", "public void setTimeZone(java.util.TimeZone)"], ["org.apache.catalina.util.StringParser", "org.apache.catalina.util.StringParser()", "public org.apache.catalina.util.StringParser()"], ["org.apache.catalina.util.StringParser", "org.apache.catalina.util.StringParser(java.lang.String)", "public org.apache.catalina.util.StringParser(java.lang.String)"], ["int", "org.apache.catalina.util.StringParser.getIndex()", "public int getIndex()"], ["int", "org.apache.catalina.util.StringParser.getLength()", "public int getLength()"], ["void", "org.apache.catalina.util.StringParser.setString(java.lang.String)", "public void setString(java.lang.String)"], ["void", "org.apache.catalina.util.StringParser.advance()", "public void advance()"], ["java.lang.String", "org.apache.catalina.util.StringParser.extract(int, int)", "public java.lang.String extract(int, int)"], ["int", "org.apache.catalina.util.StringParser.findChar(char)", "public int findChar(char)"], ["void", "org.apache.catalina.util.StringParser.reset()", "public void reset()"], ["org.apache.catalina.util.TomcatCSS", "org.apache.catalina.util.TomcatCSS()", "public org.apache.catalina.util.TomcatCSS()"], ["org.apache.catalina.util.URLEncoder", "org.apache.catalina.util.URLEncoder()", "public org.apache.catalina.util.URLEncoder()"], ["void", "org.apache.catalina.util.URLEncoder.addSafeCharacter(char)", "public void addSafeCharacter(char)"], ["java.lang.String", "org.apache.catalina.util.URLEncoder.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["org.apache.catalina.util.XMLWriter", "org.apache.catalina.util.XMLWriter()", "public org.apache.catalina.util.XMLWriter()"], ["org.apache.catalina.util.XMLWriter", "org.apache.catalina.util.XMLWriter(java.io.Writer)", "public org.apache.catalina.util.XMLWriter(java.io.Writer)"], ["java.lang.String", "org.apache.catalina.util.XMLWriter.toString()", "public java.lang.String toString()"], ["void", "org.apache.catalina.util.XMLWriter.writeProperty(java.lang.String, java.lang.String, java.lang.String)", "public void writeProperty(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.util.XMLWriter.writeElement(java.lang.String, java.lang.String, int)", "public void writeElement(java.lang.String, java.lang.String, int)"], ["void", "org.apache.catalina.util.XMLWriter.writeElement(java.lang.String, java.lang.String, java.lang.String, int)", "public void writeElement(java.lang.String, java.lang.String, java.lang.String, int)"], ["void", "org.apache.catalina.util.XMLWriter.writeText(java.lang.String)", "public void writeText(java.lang.String)"], ["void", "org.apache.catalina.util.XMLWriter.writeData(java.lang.String)", "public void writeData(java.lang.String)"], ["void", "org.apache.catalina.util.XMLWriter.writeXMLHeader()", "public void writeXMLHeader()"], ["void", "org.apache.catalina.util.XMLWriter.sendData()", "public void sendData() throws java.io.IOException"], ["org.apache.catalina.valves.AbstractAccessLogValve$ByteSentElement", "org.apache.catalina.valves.AbstractAccessLogValve$ByteSentElement(boolean)", "public org.apache.catalina.valves.AbstractAccessLogValve$ByteSentElement(boolean)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$ByteSentElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve$CookieElement", "org.apache.catalina.valves.AbstractAccessLogValve$CookieElement(java.lang.String)", "public org.apache.catalina.valves.AbstractAccessLogValve$CookieElement(java.lang.String)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$CookieElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$DateAndTimeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["java.lang.String", "org.apache.catalina.valves.AbstractAccessLogValve$DateFormatCache.getFormat(long)", "public java.lang.String getFormat(long)"], ["java.lang.String", "org.apache.catalina.valves.AbstractAccessLogValve$DateFormatCache.getFormat(java.lang.String, java.util.Locale, long)", "public java.lang.String getFormat(java.lang.String, java.util.Locale, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve$ElapsedTimeElement", "org.apache.catalina.valves.AbstractAccessLogValve$ElapsedTimeElement(boolean)", "public org.apache.catalina.valves.AbstractAccessLogValve$ElapsedTimeElement(boolean)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$ElapsedTimeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$FirstByteTimeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve$FormatType[]", "org.apache.catalina.valves.AbstractAccessLogValve$FormatType.values()", "public static org.apache.catalina.valves.AbstractAccessLogValve$FormatType[] values()"], ["org.apache.catalina.valves.AbstractAccessLogValve$FormatType", "org.apache.catalina.valves.AbstractAccessLogValve$FormatType.valueOf(java.lang.String)", "public static org.apache.catalina.valves.AbstractAccessLogValve$FormatType valueOf(java.lang.String)"], ["org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement", "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement(java.lang.String)", "public org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement(java.lang.String)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$HeaderElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$HostElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$HttpStatusCodeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$LocalAddrElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$LocalPortElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$LocalServerNameElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$LogicalUserNameElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$MethodElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$ProtocolElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$QueryElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$RemoteAddrElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement", "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement(java.lang.String)", "public org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement(java.lang.String)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$RequestAttributeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$RequestElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$RequestURIElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve$ResponseHeaderElement", "org.apache.catalina.valves.AbstractAccessLogValve$ResponseHeaderElement(java.lang.String)", "public org.apache.catalina.valves.AbstractAccessLogValve$ResponseHeaderElement(java.lang.String)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$ResponseHeaderElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement", "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement(java.lang.String)", "public org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement(java.lang.String)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$SessionAttributeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$SessionIdElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve$StringElement", "org.apache.catalina.valves.AbstractAccessLogValve$StringElement(java.lang.String)", "public org.apache.catalina.valves.AbstractAccessLogValve$StringElement(java.lang.String)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$StringElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$ThreadNameElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve$UserElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AbstractAccessLogValve", "org.apache.catalina.valves.AbstractAccessLogValve()", "public org.apache.catalina.valves.AbstractAccessLogValve()"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.setRequestAttributesEnabled(boolean)", "public void setRequestAttributesEnabled(boolean)"], ["boolean", "org.apache.catalina.valves.AbstractAccessLogValve.getRequestAttributesEnabled()", "public boolean getRequestAttributesEnabled()"], ["boolean", "org.apache.catalina.valves.AbstractAccessLogValve.getEnabled()", "public boolean getEnabled()"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.setEnabled(boolean)", "public void setEnabled(boolean)"], ["java.lang.String", "org.apache.catalina.valves.AbstractAccessLogValve.getPattern()", "public java.lang.String getPattern()"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.setPattern(java.lang.String)", "public void setPattern(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.AbstractAccessLogValve.getCondition()", "public java.lang.String getCondition()"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.setCondition(java.lang.String)", "public void setCondition(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.AbstractAccessLogValve.getConditionUnless()", "public java.lang.String getConditionUnless()"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.setConditionUnless(java.lang.String)", "public void setConditionUnless(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.AbstractAccessLogValve.getConditionIf()", "public java.lang.String getConditionIf()"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.setConditionIf(java.lang.String)", "public void setConditionIf(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.AbstractAccessLogValve.getLocale()", "public java.lang.String getLocale()"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.setLocale(java.lang.String)", "public void setLocale(java.lang.String)"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.AbstractAccessLogValve.log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.AccessLogValve", "org.apache.catalina.valves.AccessLogValve()", "public org.apache.catalina.valves.AccessLogValve()"], ["java.lang.String", "org.apache.catalina.valves.AccessLogValve.getDirectory()", "public java.lang.String getDirectory()"], ["void", "org.apache.catalina.valves.AccessLogValve.setDirectory(java.lang.String)", "public void setDirectory(java.lang.String)"], ["boolean", "org.apache.catalina.valves.AccessLogValve.isCheckExists()", "public boolean isCheckExists()"], ["void", "org.apache.catalina.valves.AccessLogValve.setCheckExists(boolean)", "public void setCheckExists(boolean)"], ["java.lang.String", "org.apache.catalina.valves.AccessLogValve.getPrefix()", "public java.lang.String getPrefix()"], ["void", "org.apache.catalina.valves.AccessLogValve.setPrefix(java.lang.String)", "public void setPrefix(java.lang.String)"], ["boolean", "org.apache.catalina.valves.AccessLogValve.isRotatable()", "public boolean isRotatable()"], ["void", "org.apache.catalina.valves.AccessLogValve.setRotatable(boolean)", "public void setRotatable(boolean)"], ["boolean", "org.apache.catalina.valves.AccessLogValve.isRenameOnRotate()", "public boolean isRenameOnRotate()"], ["void", "org.apache.catalina.valves.AccessLogValve.setRenameOnRotate(boolean)", "public void setRenameOnRotate(boolean)"], ["boolean", "org.apache.catalina.valves.AccessLogValve.isBuffered()", "public boolean isBuffered()"], ["void", "org.apache.catalina.valves.AccessLogValve.setBuffered(boolean)", "public void setBuffered(boolean)"], ["java.lang.String", "org.apache.catalina.valves.AccessLogValve.getSuffix()", "public java.lang.String getSuffix()"], ["void", "org.apache.catalina.valves.AccessLogValve.setSuffix(java.lang.String)", "public void setSuffix(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.AccessLogValve.getFileDateFormat()", "public java.lang.String getFileDateFormat()"], ["void", "org.apache.catalina.valves.AccessLogValve.setFileDateFormat(java.lang.String)", "public void setFileDateFormat(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.AccessLogValve.getEncoding()", "public java.lang.String getEncoding()"], ["void", "org.apache.catalina.valves.AccessLogValve.setEncoding(java.lang.String)", "public void setEncoding(java.lang.String)"], ["synchronized", "org.apache.catalina.valves.AccessLogValve.void backgroundProcess()", "public synchronized void backgroundProcess()"], ["void", "org.apache.catalina.valves.AccessLogValve.rotate()", "public void rotate()"], ["synchronized", "org.apache.catalina.valves.AccessLogValve.boolean rotate(java.lang.String)", "public synchronized boolean rotate(java.lang.String)"], ["void", "org.apache.catalina.valves.AccessLogValve.log(java.io.CharArrayWriter)", "public void log(java.io.CharArrayWriter)"], ["org.apache.catalina.connector.Request[]", "org.apache.catalina.valves.CometConnectionManagerValve$ConnectionList.get()", "public org.apache.catalina.connector.Request[] get()"], ["org.apache.catalina.valves.CometConnectionManagerValve", "org.apache.catalina.valves.CometConnectionManagerValve()", "public org.apache.catalina.valves.CometConnectionManagerValve()"], ["void", "org.apache.catalina.valves.CometConnectionManagerValve.lifecycleEvent(org.apache.catalina.LifecycleEvent)", "public void lifecycleEvent(org.apache.catalina.LifecycleEvent)"], ["void", "org.apache.catalina.valves.CometConnectionManagerValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.CometConnectionManagerValve.event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent)", "public void event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.CometConnectionManagerValve.sessionCreated(javax.servlet.http.HttpSessionEvent)", "public void sessionCreated(javax.servlet.http.HttpSessionEvent)"], ["void", "org.apache.catalina.valves.CometConnectionManagerValve.sessionDestroyed(javax.servlet.http.HttpSessionEvent)", "public void sessionDestroyed(javax.servlet.http.HttpSessionEvent)"], ["org.apache.catalina.valves.Constants$AccessLog", "org.apache.catalina.valves.Constants$AccessLog()", "public org.apache.catalina.valves.Constants$AccessLog()"], ["org.apache.catalina.valves.Constants", "org.apache.catalina.valves.Constants()", "public org.apache.catalina.valves.Constants()"], ["org.apache.catalina.valves.CrawlerSessionManagerValve", "org.apache.catalina.valves.CrawlerSessionManagerValve()", "public org.apache.catalina.valves.CrawlerSessionManagerValve()"], ["void", "org.apache.catalina.valves.CrawlerSessionManagerValve.setCrawlerUserAgents(java.lang.String)", "public void setCrawlerUserAgents(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.CrawlerSessionManagerValve.getCrawlerUserAgents()", "public java.lang.String getCrawlerUserAgents()"], ["void", "org.apache.catalina.valves.CrawlerSessionManagerValve.setSessionInactiveInterval(int)", "public void setSessionInactiveInterval(int)"], ["int", "org.apache.catalina.valves.CrawlerSessionManagerValve.getSessionInactiveInterval()", "public int getSessionInactiveInterval()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.catalina.valves.CrawlerSessionManagerValve.getClientIpSessionId()", "public java.util.Map<java.lang.String, java.lang.String> getClientIpSessionId()"], ["void", "org.apache.catalina.valves.CrawlerSessionManagerValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.CrawlerSessionManagerValve.valueBound(javax.servlet.http.HttpSessionBindingEvent)", "public void valueBound(javax.servlet.http.HttpSessionBindingEvent)"], ["void", "org.apache.catalina.valves.CrawlerSessionManagerValve.valueUnbound(javax.servlet.http.HttpSessionBindingEvent)", "public void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)"], ["org.apache.catalina.valves.ErrorReportValve", "org.apache.catalina.valves.ErrorReportValve()", "public org.apache.catalina.valves.ErrorReportValve()"], ["void", "org.apache.catalina.valves.ErrorReportValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.ErrorReportValve.setShowReport(boolean)", "public void setShowReport(boolean)"], ["boolean", "org.apache.catalina.valves.ErrorReportValve.isShowReport()", "public boolean isShowReport()"], ["void", "org.apache.catalina.valves.ErrorReportValve.setShowServerInfo(boolean)", "public void setShowServerInfo(boolean)"], ["boolean", "org.apache.catalina.valves.ErrorReportValve.isShowServerInfo()", "public boolean isShowServerInfo()"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$1.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$10.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$11.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$12.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$13.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$14.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$2.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$3.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$4.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$5.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$6.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$7.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$8.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$9.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$CookieElement", "org.apache.catalina.valves.ExtendedAccessLogValve$CookieElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$CookieElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$CookieElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$DateElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer(java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer(java.lang.String)"], ["boolean", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer.hasSubToken()", "public boolean hasSubToken()"], ["boolean", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer.hasParameter()", "public boolean hasParameter()"], ["java.lang.String", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer.getToken()", "public java.lang.String getToken() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer.getParameter()", "public java.lang.String getParameter() throws java.io.IOException"], ["java.lang.String", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer.getWhiteSpaces()", "public java.lang.String getWhiteSpaces() throws java.io.IOException"], ["boolean", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer.isEnded()", "public boolean isEnded()"], ["java.lang.String", "org.apache.catalina.valves.ExtendedAccessLogValve$PatternTokenizer.getRemains()", "public java.lang.String getRemains() throws java.io.IOException"], ["org.apache.catalina.valves.ExtendedAccessLogValve$RequestAttributeElement", "org.apache.catalina.valves.ExtendedAccessLogValve$RequestAttributeElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$RequestAttributeElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$RequestAttributeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$RequestHeaderElement", "org.apache.catalina.valves.ExtendedAccessLogValve$RequestHeaderElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$RequestHeaderElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$RequestHeaderElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$RequestParameterElement", "org.apache.catalina.valves.ExtendedAccessLogValve$RequestParameterElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$RequestParameterElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$RequestParameterElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$ResponseAllHeaderElement", "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseAllHeaderElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$ResponseAllHeaderElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseAllHeaderElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$ResponseHeaderElement", "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseHeaderElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$ResponseHeaderElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$ResponseHeaderElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$ServletContextElement", "org.apache.catalina.valves.ExtendedAccessLogValve$ServletContextElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$ServletContextElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$ServletContextElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve$SessionAttributeElement", "org.apache.catalina.valves.ExtendedAccessLogValve$SessionAttributeElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)", "public org.apache.catalina.valves.ExtendedAccessLogValve$SessionAttributeElement(org.apache.catalina.valves.ExtendedAccessLogValve, java.lang.String)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$SessionAttributeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["void", "org.apache.catalina.valves.ExtendedAccessLogValve$TimeElement.addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void addElement(java.io.CharArrayWriter, java.util.Date, org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["org.apache.catalina.valves.ExtendedAccessLogValve", "org.apache.catalina.valves.ExtendedAccessLogValve()", "public org.apache.catalina.valves.ExtendedAccessLogValve()"], ["org.apache.catalina.valves.JDBCAccessLogValve", "org.apache.catalina.valves.JDBCAccessLogValve()", "public org.apache.catalina.valves.JDBCAccessLogValve()"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setRequestAttributesEnabled(boolean)", "public void setRequestAttributesEnabled(boolean)"], ["boolean", "org.apache.catalina.valves.JDBCAccessLogValve.getRequestAttributesEnabled()", "public boolean getRequestAttributesEnabled()"], ["java.lang.String", "org.apache.catalina.valves.JDBCAccessLogValve.getConnectionName()", "public java.lang.String getConnectionName()"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setConnectionName(java.lang.String)", "public void setConnectionName(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setDriverName(java.lang.String)", "public void setDriverName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.JDBCAccessLogValve.getConnectionPassword()", "public java.lang.String getConnectionPassword()"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setConnectionPassword(java.lang.String)", "public void setConnectionPassword(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setConnectionURL(java.lang.String)", "public void setConnectionURL(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setTableName(java.lang.String)", "public void setTableName(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setRemoteHostField(java.lang.String)", "public void setRemoteHostField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setUserField(java.lang.String)", "public void setUserField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setTimestampField(java.lang.String)", "public void setTimestampField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setVirtualHostField(java.lang.String)", "public void setVirtualHostField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setMethodField(java.lang.String)", "public void setMethodField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setQueryField(java.lang.String)", "public void setQueryField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setStatusField(java.lang.String)", "public void setStatusField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setBytesField(java.lang.String)", "public void setBytesField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setRefererField(java.lang.String)", "public void setRefererField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setUserAgentField(java.lang.String)", "public void setUserAgentField(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setPattern(java.lang.String)", "public void setPattern(java.lang.String)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setResolveHosts(java.lang.String)", "public void setResolveHosts(java.lang.String)"], ["boolean", "org.apache.catalina.valves.JDBCAccessLogValve.getUseLongContentLength()", "public boolean getUseLongContentLength()"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.setUseLongContentLength(boolean)", "public void setUseLongContentLength(boolean)"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.JDBCAccessLogValve.log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)", "public void log(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, long)"], ["long", "org.apache.catalina.valves.JDBCAccessLogValve.getCurrentTimeMillis()", "public long getCurrentTimeMillis()"], ["org.apache.catalina.valves.PersistentValve", "org.apache.catalina.valves.PersistentValve()", "public org.apache.catalina.valves.PersistentValve()"], ["void", "org.apache.catalina.valves.PersistentValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.valves.RemoteAddrValve", "org.apache.catalina.valves.RemoteAddrValve()", "public org.apache.catalina.valves.RemoteAddrValve()"], ["void", "org.apache.catalina.valves.RemoteAddrValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.valves.RemoteHostValve", "org.apache.catalina.valves.RemoteHostValve()", "public org.apache.catalina.valves.RemoteHostValve()"], ["void", "org.apache.catalina.valves.RemoteHostValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.valves.RemoteIpValve", "org.apache.catalina.valves.RemoteIpValve()", "public org.apache.catalina.valves.RemoteIpValve()"], ["int", "org.apache.catalina.valves.RemoteIpValve.getHttpsServerPort()", "public int getHttpsServerPort()"], ["int", "org.apache.catalina.valves.RemoteIpValve.getHttpServerPort()", "public int getHttpServerPort()"], ["boolean", "org.apache.catalina.valves.RemoteIpValve.isChangeLocalPort()", "public boolean isChangeLocalPort()"], ["void", "org.apache.catalina.valves.RemoteIpValve.setChangeLocalPort(boolean)", "public void setChangeLocalPort(boolean)"], ["java.lang.String", "org.apache.catalina.valves.RemoteIpValve.getPortHeader()", "public java.lang.String getPortHeader()"], ["void", "org.apache.catalina.valves.RemoteIpValve.setPortHeader(java.lang.String)", "public void setPortHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.RemoteIpValve.getInternalProxies()", "public java.lang.String getInternalProxies()"], ["java.lang.String", "org.apache.catalina.valves.RemoteIpValve.getProtocolHeader()", "public java.lang.String getProtocolHeader()"], ["java.lang.String", "org.apache.catalina.valves.RemoteIpValve.getProtocolHeaderHttpsValue()", "public java.lang.String getProtocolHeaderHttpsValue()"], ["java.lang.String", "org.apache.catalina.valves.RemoteIpValve.getProxiesHeader()", "public java.lang.String getProxiesHeader()"], ["java.lang.String", "org.apache.catalina.valves.RemoteIpValve.getRemoteIpHeader()", "public java.lang.String getRemoteIpHeader()"], ["boolean", "org.apache.catalina.valves.RemoteIpValve.getRequestAttributesEnabled()", "public boolean getRequestAttributesEnabled()"], ["java.lang.String", "org.apache.catalina.valves.RemoteIpValve.getTrustedProxies()", "public java.lang.String getTrustedProxies()"], ["void", "org.apache.catalina.valves.RemoteIpValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.RemoteIpValve.setHttpServerPort(int)", "public void setHttpServerPort(int)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setHttpsServerPort(int)", "public void setHttpsServerPort(int)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setInternalProxies(java.lang.String)", "public void setInternalProxies(java.lang.String)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setProtocolHeader(java.lang.String)", "public void setProtocolHeader(java.lang.String)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setProtocolHeaderHttpsValue(java.lang.String)", "public void setProtocolHeaderHttpsValue(java.lang.String)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setProxiesHeader(java.lang.String)", "public void setProxiesHeader(java.lang.String)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setRemoteIpHeader(java.lang.String)", "public void setRemoteIpHeader(java.lang.String)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setRequestAttributesEnabled(boolean)", "public void setRequestAttributesEnabled(boolean)"], ["void", "org.apache.catalina.valves.RemoteIpValve.setTrustedProxies(java.lang.String)", "public void setTrustedProxies(java.lang.String)"], ["org.apache.catalina.valves.RequestFilterValve", "org.apache.catalina.valves.RequestFilterValve()", "public org.apache.catalina.valves.RequestFilterValve()"], ["java.lang.String", "org.apache.catalina.valves.RequestFilterValve.getAllow()", "public java.lang.String getAllow()"], ["void", "org.apache.catalina.valves.RequestFilterValve.setAllow(java.lang.String)", "public void setAllow(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.RequestFilterValve.getDeny()", "public java.lang.String getDeny()"], ["void", "org.apache.catalina.valves.RequestFilterValve.setDeny(java.lang.String)", "public void setDeny(java.lang.String)"], ["boolean", "org.apache.catalina.valves.RequestFilterValve.isAllowValid()", "public final boolean isAllowValid()"], ["boolean", "org.apache.catalina.valves.RequestFilterValve.isDenyValid()", "public final boolean isDenyValid()"], ["int", "org.apache.catalina.valves.RequestFilterValve.getDenyStatus()", "public int getDenyStatus()"], ["void", "org.apache.catalina.valves.RequestFilterValve.setDenyStatus(int)", "public void setDenyStatus(int)"], ["boolean", "org.apache.catalina.valves.RequestFilterValve.isAllowed(java.lang.String)", "public boolean isAllowed(java.lang.String)"], ["org.apache.catalina.valves.SSLValve", "org.apache.catalina.valves.SSLValve()", "public org.apache.catalina.valves.SSLValve()"], ["java.lang.String", "org.apache.catalina.valves.SSLValve.getSslClientCertHeader()", "public java.lang.String getSslClientCertHeader()"], ["void", "org.apache.catalina.valves.SSLValve.setSslClientCertHeader(java.lang.String)", "public void setSslClientCertHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.SSLValve.getSslCipherHeader()", "public java.lang.String getSslCipherHeader()"], ["void", "org.apache.catalina.valves.SSLValve.setSslCipherHeader(java.lang.String)", "public void setSslCipherHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.SSLValve.getSslSessionIdHeader()", "public java.lang.String getSslSessionIdHeader()"], ["void", "org.apache.catalina.valves.SSLValve.setSslSessionIdHeader(java.lang.String)", "public void setSslSessionIdHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.SSLValve.getSslCipherUserKeySizeHeader()", "public java.lang.String getSslCipherUserKeySizeHeader()"], ["void", "org.apache.catalina.valves.SSLValve.setSslCipherUserKeySizeHeader(java.lang.String)", "public void setSslCipherUserKeySizeHeader(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.SSLValve.mygetHeader(org.apache.catalina.connector.Request, java.lang.String)", "public java.lang.String mygetHeader(org.apache.catalina.connector.Request, java.lang.String)"], ["void", "org.apache.catalina.valves.SSLValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.valves.SemaphoreValve", "org.apache.catalina.valves.SemaphoreValve()", "public org.apache.catalina.valves.SemaphoreValve()"], ["int", "org.apache.catalina.valves.SemaphoreValve.getConcurrency()", "public int getConcurrency()"], ["void", "org.apache.catalina.valves.SemaphoreValve.setConcurrency(int)", "public void setConcurrency(int)"], ["boolean", "org.apache.catalina.valves.SemaphoreValve.getFairness()", "public boolean getFairness()"], ["void", "org.apache.catalina.valves.SemaphoreValve.setFairness(boolean)", "public void setFairness(boolean)"], ["boolean", "org.apache.catalina.valves.SemaphoreValve.getBlock()", "public boolean getBlock()"], ["void", "org.apache.catalina.valves.SemaphoreValve.setBlock(boolean)", "public void setBlock(boolean)"], ["boolean", "org.apache.catalina.valves.SemaphoreValve.getInterruptible()", "public boolean getInterruptible()"], ["void", "org.apache.catalina.valves.SemaphoreValve.setInterruptible(boolean)", "public void setInterruptible(boolean)"], ["void", "org.apache.catalina.valves.SemaphoreValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["boolean", "org.apache.catalina.valves.SemaphoreValve.controlConcurrency(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public boolean controlConcurrency(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)"], ["void", "org.apache.catalina.valves.SemaphoreValve.permitDenied(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void permitDenied(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["org.apache.catalina.valves.StuckThreadDetectionValve$CompletedStuckThread", "org.apache.catalina.valves.StuckThreadDetectionValve$CompletedStuckThread(java.lang.Thread, long)", "public org.apache.catalina.valves.StuckThreadDetectionValve$CompletedStuckThread(java.lang.Thread, long)"], ["java.lang.String", "org.apache.catalina.valves.StuckThreadDetectionValve$CompletedStuckThread.getName()", "public java.lang.String getName()"], ["long", "org.apache.catalina.valves.StuckThreadDetectionValve$CompletedStuckThread.getId()", "public long getId()"], ["long", "org.apache.catalina.valves.StuckThreadDetectionValve$CompletedStuckThread.getTotalActiveTime()", "public long getTotalActiveTime()"], ["org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread(java.lang.Thread, java.lang.String, boolean)", "public org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread(java.lang.Thread, java.lang.String, boolean)"], ["java.lang.Thread", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.getThread()", "public java.lang.Thread getThread()"], ["java.lang.String", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.getRequestUri()", "public java.lang.String getRequestUri()"], ["long", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.getActiveTimeInMillis()", "public long getActiveTimeInMillis()"], ["java.util.Date", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.getStartTime()", "public java.util.Date getStartTime()"], ["boolean", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.markAsStuckIfStillRunning()", "public boolean markAsStuckIfStillRunning()"], ["org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.markAsDone()", "public org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState markAsDone()"], ["boolean", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.interruptIfStuck(long)", "public boolean interruptIfStuck(long)"], ["boolean", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThread.wasInterrupted()", "public boolean wasInterrupted()"], ["org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState[]", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState.values()", "public static org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState[] values()"], ["org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState", "org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState.valueOf(java.lang.String)", "public static org.apache.catalina.valves.StuckThreadDetectionValve$MonitoredThreadState valueOf(java.lang.String)"], ["void", "org.apache.catalina.valves.StuckThreadDetectionValve.setThreshold(int)", "public void setThreshold(int)"], ["int", "org.apache.catalina.valves.StuckThreadDetectionValve.getThreshold()", "public int getThreshold()"], ["int", "org.apache.catalina.valves.StuckThreadDetectionValve.getInterruptThreadThreshold()", "public int getInterruptThreadThreshold()"], ["void", "org.apache.catalina.valves.StuckThreadDetectionValve.setInterruptThreadThreshold(int)", "public void setInterruptThreadThreshold(int)"], ["org.apache.catalina.valves.StuckThreadDetectionValve", "org.apache.catalina.valves.StuckThreadDetectionValve()", "public org.apache.catalina.valves.StuckThreadDetectionValve()"], ["void", "org.apache.catalina.valves.StuckThreadDetectionValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.apache.catalina.valves.StuckThreadDetectionValve.backgroundProcess()", "public void backgroundProcess()"], ["int", "org.apache.catalina.valves.StuckThreadDetectionValve.getStuckThreadCount()", "public int getStuckThreadCount()"], ["long[]", "org.apache.catalina.valves.StuckThreadDetectionValve.getStuckThreadIds()", "public long[] getStuckThreadIds()"], ["java.lang.String[]", "org.apache.catalina.valves.StuckThreadDetectionValve.getStuckThreadNames()", "public java.lang.String[] getStuckThreadNames()"], ["long", "org.apache.catalina.valves.StuckThreadDetectionValve.getInterruptedThreadsCount()", "public long getInterruptedThreadsCount()"], ["org.apache.catalina.valves.ValveBase", "org.apache.catalina.valves.ValveBase()", "public org.apache.catalina.valves.ValveBase()"], ["org.apache.catalina.valves.ValveBase", "org.apache.catalina.valves.ValveBase(boolean)", "public org.apache.catalina.valves.ValveBase(boolean)"], ["org.apache.catalina.Container", "org.apache.catalina.valves.ValveBase.getContainer()", "public org.apache.catalina.Container getContainer()"], ["boolean", "org.apache.catalina.valves.ValveBase.isAsyncSupported()", "public boolean isAsyncSupported()"], ["void", "org.apache.catalina.valves.ValveBase.setAsyncSupported(boolean)", "public void setAsyncSupported(boolean)"], ["void", "org.apache.catalina.valves.ValveBase.setContainer(org.apache.catalina.Container)", "public void setContainer(org.apache.catalina.Container)"], ["org.apache.catalina.Valve", "org.apache.catalina.valves.ValveBase.getNext()", "public org.apache.catalina.Valve getNext()"], ["void", "org.apache.catalina.valves.ValveBase.setNext(org.apache.catalina.Valve)", "public void setNext(org.apache.catalina.Valve)"], ["void", "org.apache.catalina.valves.ValveBase.backgroundProcess()", "public void backgroundProcess()"], ["void", "org.apache.catalina.valves.ValveBase.event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent)", "public void event(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response, org.apache.catalina.comet.CometEvent) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.apache.catalina.valves.ValveBase.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.catalina.valves.ValveBase.getObjectNameKeyProperties()", "public java.lang.String getObjectNameKeyProperties()"], ["java.lang.String", "org.apache.catalina.valves.ValveBase.getDomainInternal()", "public java.lang.String getDomainInternal()"], ["org.apache.catalina.valves.rewrite.Resolver", "org.apache.catalina.valves.rewrite.Resolver()", "public org.apache.catalina.valves.rewrite.Resolver()"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Resolver.resolveEnv(java.lang.String)", "public java.lang.String resolveEnv(java.lang.String)"], ["org.apache.catalina.valves.rewrite.ResolverImpl", "org.apache.catalina.valves.rewrite.ResolverImpl(org.apache.catalina.connector.Request)", "public org.apache.catalina.valves.rewrite.ResolverImpl(org.apache.catalina.connector.Request)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.ResolverImpl.resolve(java.lang.String)", "public java.lang.String resolve(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.ResolverImpl.resolveEnv(java.lang.String)", "public java.lang.String resolveEnv(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.ResolverImpl.resolveSsl(java.lang.String)", "public java.lang.String resolveSsl(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.ResolverImpl.resolveHttp(java.lang.String)", "public java.lang.String resolveHttp(java.lang.String)"], ["boolean", "org.apache.catalina.valves.rewrite.ResolverImpl.resolveResource(int, java.lang.String)", "public boolean resolveResource(int, java.lang.String)"], ["org.apache.catalina.valves.rewrite.RewriteCond$Condition", "org.apache.catalina.valves.rewrite.RewriteCond$Condition()", "public org.apache.catalina.valves.rewrite.RewriteCond$Condition()"], ["org.apache.catalina.valves.rewrite.RewriteCond$LexicalCondition", "org.apache.catalina.valves.rewrite.RewriteCond$LexicalCondition()", "public org.apache.catalina.valves.rewrite.RewriteCond$LexicalCondition()"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteCond$LexicalCondition.evaluate(java.lang.String, org.apache.catalina.valves.rewrite.Resolver)", "public boolean evaluate(java.lang.String, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.RewriteCond$PatternCondition", "org.apache.catalina.valves.rewrite.RewriteCond$PatternCondition()", "public org.apache.catalina.valves.rewrite.RewriteCond$PatternCondition()"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteCond$PatternCondition.evaluate(java.lang.String, org.apache.catalina.valves.rewrite.Resolver)", "public boolean evaluate(java.lang.String, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.RewriteCond$ResourceCondition", "org.apache.catalina.valves.rewrite.RewriteCond$ResourceCondition()", "public org.apache.catalina.valves.rewrite.RewriteCond$ResourceCondition()"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteCond$ResourceCondition.evaluate(java.lang.String, org.apache.catalina.valves.rewrite.Resolver)", "public boolean evaluate(java.lang.String, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.RewriteCond", "org.apache.catalina.valves.rewrite.RewriteCond()", "public org.apache.catalina.valves.rewrite.RewriteCond()"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteCond.getCondPattern()", "public java.lang.String getCondPattern()"], ["void", "org.apache.catalina.valves.rewrite.RewriteCond.setCondPattern(java.lang.String)", "public void setCondPattern(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteCond.getTestString()", "public java.lang.String getTestString()"], ["void", "org.apache.catalina.valves.rewrite.RewriteCond.setTestString(java.lang.String)", "public void setTestString(java.lang.String)"], ["void", "org.apache.catalina.valves.rewrite.RewriteCond.parse(java.util.Map<java.lang.String, org.apache.catalina.valves.rewrite.RewriteMap>)", "public void parse(java.util.Map<java.lang.String, org.apache.catalina.valves.rewrite.RewriteMap>)"], ["java.util.regex.Matcher", "org.apache.catalina.valves.rewrite.RewriteCond.getMatcher()", "public java.util.regex.Matcher getMatcher()"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteCond.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteCond.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public boolean evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteCond.isNocase()", "public boolean isNocase()"], ["void", "org.apache.catalina.valves.rewrite.RewriteCond.setNocase(boolean)", "public void setNocase(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteCond.isOrnext()", "public boolean isOrnext()"], ["void", "org.apache.catalina.valves.rewrite.RewriteCond.setOrnext(boolean)", "public void setOrnext(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteCond.isPositive()", "public boolean isPositive()"], ["void", "org.apache.catalina.valves.rewrite.RewriteCond.setPositive(boolean)", "public void setPositive(boolean)"], ["org.apache.catalina.valves.rewrite.RewriteRule", "org.apache.catalina.valves.rewrite.RewriteRule()", "public org.apache.catalina.valves.rewrite.RewriteRule()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.parse(java.util.Map<java.lang.String, org.apache.catalina.valves.rewrite.RewriteMap>)", "public void parse(java.util.Map<java.lang.String, org.apache.catalina.valves.rewrite.RewriteMap>)"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.addCondition(org.apache.catalina.valves.rewrite.RewriteCond)", "public void addCondition(org.apache.catalina.valves.rewrite.RewriteCond)"], ["java.lang.CharSequence", "org.apache.catalina.valves.rewrite.RewriteRule.evaluate(java.lang.CharSequence, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.CharSequence evaluate(java.lang.CharSequence, org.apache.catalina.valves.rewrite.Resolver)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isChain()", "public boolean isChain()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setChain(boolean)", "public void setChain(boolean)"], ["org.apache.catalina.valves.rewrite.RewriteCond[]", "org.apache.catalina.valves.rewrite.RewriteRule.getConditions()", "public org.apache.catalina.valves.rewrite.RewriteCond[] getConditions()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setConditions(org.apache.catalina.valves.rewrite.RewriteCond[])", "public void setConditions(org.apache.catalina.valves.rewrite.RewriteCond[])"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isCookie()", "public boolean isCookie()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookie(boolean)", "public void setCookie(boolean)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getCookieName()", "public java.lang.String getCookieName()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookieName(java.lang.String)", "public void setCookieName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getCookieValue()", "public java.lang.String getCookieValue()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookieValue(java.lang.String)", "public void setCookieValue(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getCookieResult()", "public java.lang.String getCookieResult()"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isEnv()", "public boolean isEnv()"], ["int", "org.apache.catalina.valves.rewrite.RewriteRule.getEnvSize()", "public int getEnvSize()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setEnv(boolean)", "public void setEnv(boolean)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getEnvName(int)", "public java.lang.String getEnvName(int)"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.addEnvName(java.lang.String)", "public void addEnvName(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getEnvValue(int)", "public java.lang.String getEnvValue(int)"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.addEnvValue(java.lang.String)", "public void addEnvValue(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getEnvResult(int)", "public java.lang.String getEnvResult(int)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isForbidden()", "public boolean isForbidden()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setForbidden(boolean)", "public void setForbidden(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isGone()", "public boolean isGone()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setGone(boolean)", "public void setGone(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isLast()", "public boolean isLast()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setLast(boolean)", "public void setLast(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isNext()", "public boolean isNext()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setNext(boolean)", "public void setNext(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isNocase()", "public boolean isNocase()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setNocase(boolean)", "public void setNocase(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isNoescape()", "public boolean isNoescape()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setNoescape(boolean)", "public void setNoescape(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isNosubreq()", "public boolean isNosubreq()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setNosubreq(boolean)", "public void setNosubreq(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isQsappend()", "public boolean isQsappend()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setQsappend(boolean)", "public void setQsappend(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isRedirect()", "public boolean isRedirect()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setRedirect(boolean)", "public void setRedirect(boolean)"], ["int", "org.apache.catalina.valves.rewrite.RewriteRule.getRedirectCode()", "public int getRedirectCode()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setRedirectCode(int)", "public void setRedirectCode(int)"], ["int", "org.apache.catalina.valves.rewrite.RewriteRule.getSkip()", "public int getSkip()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setSkip(int)", "public void setSkip(int)"], ["org.apache.catalina.valves.rewrite.Substitution", "org.apache.catalina.valves.rewrite.RewriteRule.getSubstitution()", "public org.apache.catalina.valves.rewrite.Substitution getSubstitution()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setSubstitution(org.apache.catalina.valves.rewrite.Substitution)", "public void setSubstitution(org.apache.catalina.valves.rewrite.Substitution)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isType()", "public boolean isType()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setType(boolean)", "public void setType(boolean)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getTypeValue()", "public java.lang.String getTypeValue()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setTypeValue(java.lang.String)", "public void setTypeValue(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getPatternString()", "public java.lang.String getPatternString()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setPatternString(java.lang.String)", "public void setPatternString(java.lang.String)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getSubstitutionString()", "public java.lang.String getSubstitutionString()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setSubstitutionString(java.lang.String)", "public void setSubstitutionString(java.lang.String)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isHost()", "public boolean isHost()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setHost(boolean)", "public void setHost(boolean)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getCookieDomain()", "public java.lang.String getCookieDomain()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookieDomain(java.lang.String)", "public void setCookieDomain(java.lang.String)"], ["int", "org.apache.catalina.valves.rewrite.RewriteRule.getCookieLifetime()", "public int getCookieLifetime()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookieLifetime(int)", "public void setCookieLifetime(int)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteRule.getCookiePath()", "public java.lang.String getCookiePath()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookiePath(java.lang.String)", "public void setCookiePath(java.lang.String)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isCookieSecure()", "public boolean isCookieSecure()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookieSecure(boolean)", "public void setCookieSecure(boolean)"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteRule.isCookieHttpOnly()", "public boolean isCookieHttpOnly()"], ["void", "org.apache.catalina.valves.rewrite.RewriteRule.setCookieHttpOnly(boolean)", "public void setCookieHttpOnly(boolean)"], ["org.apache.catalina.valves.rewrite.RewriteValve", "org.apache.catalina.valves.rewrite.RewriteValve()", "public org.apache.catalina.valves.rewrite.RewriteValve()"], ["boolean", "org.apache.catalina.valves.rewrite.RewriteValve.getEnabled()", "public boolean getEnabled()"], ["void", "org.apache.catalina.valves.rewrite.RewriteValve.setEnabled(boolean)", "public void setEnabled(boolean)"], ["void", "org.apache.catalina.valves.rewrite.RewriteValve.addLifecycleListener(org.apache.catalina.LifecycleListener)", "public void addLifecycleListener(org.apache.catalina.LifecycleListener)"], ["org.apache.catalina.LifecycleListener[]", "org.apache.catalina.valves.rewrite.RewriteValve.findLifecycleListeners()", "public org.apache.catalina.LifecycleListener[] findLifecycleListeners()"], ["void", "org.apache.catalina.valves.rewrite.RewriteValve.removeLifecycleListener(org.apache.catalina.LifecycleListener)", "public void removeLifecycleListener(org.apache.catalina.LifecycleListener)"], ["void", "org.apache.catalina.valves.rewrite.RewriteValve.setConfiguration(java.lang.String)", "public void setConfiguration(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.catalina.valves.rewrite.RewriteValve.getConfiguration()", "public java.lang.String getConfiguration()"], ["void", "org.apache.catalina.valves.rewrite.RewriteValve.invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response)", "public void invoke(org.apache.catalina.connector.Request, org.apache.catalina.connector.Response) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.Object", "org.apache.catalina.valves.rewrite.RewriteValve.parse(java.lang.String)", "public static java.lang.Object parse(java.lang.String)"], ["org.apache.catalina.valves.rewrite.Substitution$MapElement", "org.apache.catalina.valves.rewrite.Substitution$MapElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$MapElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$MapElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$RewriteCondBackReferenceElement", "org.apache.catalina.valves.rewrite.Substitution$RewriteCondBackReferenceElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$RewriteCondBackReferenceElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$RewriteCondBackReferenceElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$RewriteRuleBackReferenceElement", "org.apache.catalina.valves.rewrite.Substitution$RewriteRuleBackReferenceElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$RewriteRuleBackReferenceElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$RewriteRuleBackReferenceElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$ServerVariableElement", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$ServerVariableElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$ServerVariableEnvElement", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableEnvElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$ServerVariableEnvElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableEnvElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$ServerVariableHttpElement", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableHttpElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$ServerVariableHttpElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableHttpElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$ServerVariableSslElement", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableSslElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$ServerVariableSslElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$ServerVariableSslElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$StaticElement", "org.apache.catalina.valves.rewrite.Substitution$StaticElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$StaticElement(org.apache.catalina.valves.rewrite.Substitution)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution$StaticElement.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement", "org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement(org.apache.catalina.valves.rewrite.Substitution)", "public org.apache.catalina.valves.rewrite.Substitution$SubstitutionElement(org.apache.catalina.valves.rewrite.Substitution)"], ["org.apache.catalina.valves.rewrite.Substitution", "org.apache.catalina.valves.rewrite.Substitution()", "public org.apache.catalina.valves.rewrite.Substitution()"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution.getSub()", "public java.lang.String getSub()"], ["void", "org.apache.catalina.valves.rewrite.Substitution.setSub(java.lang.String)", "public void setSub(java.lang.String)"], ["void", "org.apache.catalina.valves.rewrite.Substitution.parse(java.util.Map<java.lang.String, org.apache.catalina.valves.rewrite.RewriteMap>)", "public void parse(java.util.Map<java.lang.String, org.apache.catalina.valves.rewrite.RewriteMap>)"], ["java.lang.String", "org.apache.catalina.valves.rewrite.Substitution.evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)", "public java.lang.String evaluate(java.util.regex.Matcher, java.util.regex.Matcher, org.apache.catalina.valves.rewrite.Resolver)"], ["org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper(org.apache.catalina.webresources.AbstractArchiveResource, java.util.jar.JarFile, java.util.jar.JarEntry, java.io.InputStream)", "public org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper(org.apache.catalina.webresources.AbstractArchiveResource, java.util.jar.JarFile, java.util.jar.JarEntry, java.io.InputStream)"], ["int", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.available()", "public int available() throws java.io.IOException"], ["void", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.void reset()", "public synchronized void reset() throws java.io.IOException"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.markSupported()", "public boolean markSupported()"], ["java.security.cert.Certificate[]", "org.apache.catalina.webresources.AbstractArchiveResource$JarInputStreamWrapper.getCertificates()", "public java.security.cert.Certificate[] getCertificates()"], ["long", "org.apache.catalina.webresources.AbstractArchiveResource.getLastModified()", "public long getLastModified()"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResource.exists()", "public boolean exists()"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResource.isVirtual()", "public boolean isVirtual()"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResource.isDirectory()", "public boolean isDirectory()"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResource.isFile()", "public boolean isFile()"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResource.delete()", "public boolean delete()"], ["java.lang.String", "org.apache.catalina.webresources.AbstractArchiveResource.getName()", "public java.lang.String getName()"], ["long", "org.apache.catalina.webresources.AbstractArchiveResource.getContentLength()", "public long getContentLength()"], ["java.lang.String", "org.apache.catalina.webresources.AbstractArchiveResource.getCanonicalPath()", "public java.lang.String getCanonicalPath()"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResource.canRead()", "public boolean canRead()"], ["long", "org.apache.catalina.webresources.AbstractArchiveResource.getCreation()", "public long getCreation()"], ["java.net.URL", "org.apache.catalina.webresources.AbstractArchiveResource.getURL()", "public java.net.URL getURL()"], ["byte[]", "org.apache.catalina.webresources.AbstractArchiveResource.getContent()", "public final byte[] getContent()"], ["java.security.cert.Certificate[]", "org.apache.catalina.webresources.AbstractArchiveResource.getCertificates()", "public java.security.cert.Certificate[] getCertificates()"], ["java.util.jar.Manifest", "org.apache.catalina.webresources.AbstractArchiveResource.getManifest()", "public java.util.jar.Manifest getManifest()"], ["org.apache.catalina.webresources.AbstractArchiveResourceSet", "org.apache.catalina.webresources.AbstractArchiveResourceSet()", "public org.apache.catalina.webresources.AbstractArchiveResourceSet()"], ["java.net.URL", "org.apache.catalina.webresources.AbstractArchiveResourceSet.getBaseUrl()", "public final java.net.URL getBaseUrl()"], ["java.lang.String[]", "org.apache.catalina.webresources.AbstractArchiveResourceSet.list(java.lang.String)", "public final java.lang.String[] list(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.webresources.AbstractArchiveResourceSet.listWebAppPaths(java.lang.String)", "public final java.util.Set<java.lang.String> listWebAppPaths(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResourceSet.mkdir(java.lang.String)", "public final boolean mkdir(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResourceSet.write(java.lang.String, java.io.InputStream, boolean)", "public final boolean write(java.lang.String, java.io.InputStream, boolean)"], ["org.apache.catalina.WebResource", "org.apache.catalina.webresources.AbstractArchiveResourceSet.getResource(java.lang.String)", "public final org.apache.catalina.WebResource getResource(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.AbstractArchiveResourceSet.isReadOnly()", "public final boolean isReadOnly()"], ["void", "org.apache.catalina.webresources.AbstractArchiveResourceSet.setReadOnly(boolean)", "public void setReadOnly(boolean)"], ["void", "org.apache.catalina.webresources.AbstractFileResourceSet.setReadOnly(boolean)", "public void setReadOnly(boolean)"], ["boolean", "org.apache.catalina.webresources.AbstractFileResourceSet.isReadOnly()", "public boolean isReadOnly()"], ["java.net.URL", "org.apache.catalina.webresources.AbstractFileResourceSet.getBaseUrl()", "public java.net.URL getBaseUrl()"], ["org.apache.catalina.WebResourceRoot", "org.apache.catalina.webresources.AbstractResource.getWebResourceRoot()", "public final org.apache.catalina.WebResourceRoot getWebResourceRoot()"], ["java.lang.String", "org.apache.catalina.webresources.AbstractResource.getWebappPath()", "public final java.lang.String getWebappPath()"], ["java.lang.String", "org.apache.catalina.webresources.AbstractResource.getLastModifiedHttp()", "public final java.lang.String getLastModifiedHttp()"], ["java.lang.String", "org.apache.catalina.webresources.AbstractResource.getETag()", "public final java.lang.String getETag()"], ["void", "org.apache.catalina.webresources.AbstractResource.setMimeType(java.lang.String)", "public final void setMimeType(java.lang.String)"], ["java.lang.String", "org.apache.catalina.webresources.AbstractResource.getMimeType()", "public final java.lang.String getMimeType()"], ["java.io.InputStream", "org.apache.catalina.webresources.AbstractResource.getInputStream()", "public final java.io.InputStream getInputStream()"], ["org.apache.catalina.webresources.AbstractResourceSet", "org.apache.catalina.webresources.AbstractResourceSet()", "public org.apache.catalina.webresources.AbstractResourceSet()"], ["void", "org.apache.catalina.webresources.AbstractResourceSet.setRoot(org.apache.catalina.WebResourceRoot)", "public final void setRoot(org.apache.catalina.WebResourceRoot)"], ["void", "org.apache.catalina.webresources.AbstractResourceSet.setInternalPath(java.lang.String)", "public final void setInternalPath(java.lang.String)"], ["void", "org.apache.catalina.webresources.AbstractResourceSet.setWebAppMount(java.lang.String)", "public final void setWebAppMount(java.lang.String)"], ["void", "org.apache.catalina.webresources.AbstractResourceSet.setBase(java.lang.String)", "public final void setBase(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.AbstractResourceSet.getClassLoaderOnly()", "public boolean getClassLoaderOnly()"], ["void", "org.apache.catalina.webresources.AbstractResourceSet.setClassLoaderOnly(boolean)", "public void setClassLoaderOnly(boolean)"], ["int", "org.apache.catalina.webresources.Cache$EvictionOrder.compare(org.apache.catalina.webresources.CachedResource, org.apache.catalina.webresources.CachedResource)", "public int compare(org.apache.catalina.webresources.CachedResource, org.apache.catalina.webresources.CachedResource)"], ["int", "org.apache.catalina.webresources.Cache$EvictionOrder.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.catalina.webresources.Cache", "org.apache.catalina.webresources.Cache(org.apache.catalina.webresources.StandardRoot)", "public org.apache.catalina.webresources.Cache(org.apache.catalina.webresources.StandardRoot)"], ["long", "org.apache.catalina.webresources.Cache.getTtl()", "public long getTtl()"], ["void", "org.apache.catalina.webresources.Cache.setTtl(long)", "public void setTtl(long)"], ["long", "org.apache.catalina.webresources.Cache.getMaxSize()", "public long getMaxSize()"], ["void", "org.apache.catalina.webresources.Cache.setMaxSize(long)", "public void setMaxSize(long)"], ["long", "org.apache.catalina.webresources.Cache.getLookupCount()", "public long getLookupCount()"], ["long", "org.apache.catalina.webresources.Cache.getHitCount()", "public long getHitCount()"], ["void", "org.apache.catalina.webresources.Cache.setObjectMaxSize(int)", "public void setObjectMaxSize(int)"], ["int", "org.apache.catalina.webresources.Cache.getObjectMaxSize()", "public int getObjectMaxSize()"], ["int", "org.apache.catalina.webresources.Cache.getObjectMaxSizeBytes()", "public int getObjectMaxSizeBytes()"], ["void", "org.apache.catalina.webresources.Cache.clear()", "public void clear()"], ["long", "org.apache.catalina.webresources.Cache.getSize()", "public long getSize()"], ["org.apache.catalina.webresources.CachedResource", "org.apache.catalina.webresources.CachedResource(org.apache.catalina.webresources.Cache, org.apache.catalina.webresources.StandardRoot, java.lang.String, long, int)", "public org.apache.catalina.webresources.CachedResource(org.apache.catalina.webresources.Cache, org.apache.catalina.webresources.StandardRoot, java.lang.String, long, int)"], ["long", "org.apache.catalina.webresources.CachedResource.getLastModified()", "public long getLastModified()"], ["java.lang.String", "org.apache.catalina.webresources.CachedResource.getLastModifiedHttp()", "public java.lang.String getLastModifiedHttp()"], ["boolean", "org.apache.catalina.webresources.CachedResource.exists()", "public boolean exists()"], ["boolean", "org.apache.catalina.webresources.CachedResource.isVirtual()", "public boolean isVirtual()"], ["boolean", "org.apache.catalina.webresources.CachedResource.isDirectory()", "public boolean isDirectory()"], ["boolean", "org.apache.catalina.webresources.CachedResource.isFile()", "public boolean isFile()"], ["boolean", "org.apache.catalina.webresources.CachedResource.delete()", "public boolean delete()"], ["java.lang.String", "org.apache.catalina.webresources.CachedResource.getName()", "public java.lang.String getName()"], ["long", "org.apache.catalina.webresources.CachedResource.getContentLength()", "public long getContentLength()"], ["java.lang.String", "org.apache.catalina.webresources.CachedResource.getCanonicalPath()", "public java.lang.String getCanonicalPath()"], ["boolean", "org.apache.catalina.webresources.CachedResource.canRead()", "public boolean canRead()"], ["java.lang.String", "org.apache.catalina.webresources.CachedResource.getWebappPath()", "public java.lang.String getWebappPath()"], ["java.lang.String", "org.apache.catalina.webresources.CachedResource.getETag()", "public java.lang.String getETag()"], ["void", "org.apache.catalina.webresources.CachedResource.setMimeType(java.lang.String)", "public void setMimeType(java.lang.String)"], ["java.lang.String", "org.apache.catalina.webresources.CachedResource.getMimeType()", "public java.lang.String getMimeType()"], ["java.io.InputStream", "org.apache.catalina.webresources.CachedResource.getInputStream()", "public java.io.InputStream getInputStream()"], ["byte[]", "org.apache.catalina.webresources.CachedResource.getContent()", "public byte[] getContent()"], ["long", "org.apache.catalina.webresources.CachedResource.getCreation()", "public long getCreation()"], ["java.net.URL", "org.apache.catalina.webresources.CachedResource.getURL()", "public java.net.URL getURL()"], ["java.security.cert.Certificate[]", "org.apache.catalina.webresources.CachedResource.getCertificates()", "public java.security.cert.Certificate[] getCertificates()"], ["java.util.jar.Manifest", "org.apache.catalina.webresources.CachedResource.getManifest()", "public java.util.jar.Manifest getManifest()"], ["org.apache.catalina.WebResourceRoot", "org.apache.catalina.webresources.CachedResource.getWebResourceRoot()", "public org.apache.catalina.WebResourceRoot getWebResourceRoot()"], ["org.apache.catalina.webresources.Constants", "org.apache.catalina.webresources.Constants()", "public org.apache.catalina.webresources.Constants()"], ["org.apache.catalina.webresources.DirResourceSet", "org.apache.catalina.webresources.DirResourceSet()", "public org.apache.catalina.webresources.DirResourceSet()"], ["org.apache.catalina.webresources.DirResourceSet", "org.apache.catalina.webresources.DirResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.webresources.DirResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.catalina.WebResource", "org.apache.catalina.webresources.DirResourceSet.getResource(java.lang.String)", "public org.apache.catalina.WebResource getResource(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.webresources.DirResourceSet.list(java.lang.String)", "public java.lang.String[] list(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.webresources.DirResourceSet.listWebAppPaths(java.lang.String)", "public java.util.Set<java.lang.String> listWebAppPaths(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.DirResourceSet.mkdir(java.lang.String)", "public boolean mkdir(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.DirResourceSet.write(java.lang.String, java.io.InputStream, boolean)", "public boolean write(java.lang.String, java.io.InputStream, boolean)"], ["org.apache.catalina.webresources.EmptyResource", "org.apache.catalina.webresources.EmptyResource(org.apache.catalina.WebResourceRoot, java.lang.String)", "public org.apache.catalina.webresources.EmptyResource(org.apache.catalina.WebResourceRoot, java.lang.String)"], ["org.apache.catalina.webresources.EmptyResource", "org.apache.catalina.webresources.EmptyResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.io.File)", "public org.apache.catalina.webresources.EmptyResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.io.File)"], ["long", "org.apache.catalina.webresources.EmptyResource.getLastModified()", "public long getLastModified()"], ["java.lang.String", "org.apache.catalina.webresources.EmptyResource.getLastModifiedHttp()", "public java.lang.String getLastModifiedHttp()"], ["boolean", "org.apache.catalina.webresources.EmptyResource.exists()", "public boolean exists()"], ["boolean", "org.apache.catalina.webresources.EmptyResource.isVirtual()", "public boolean isVirtual()"], ["boolean", "org.apache.catalina.webresources.EmptyResource.isDirectory()", "public boolean isDirectory()"], ["boolean", "org.apache.catalina.webresources.EmptyResource.isFile()", "public boolean isFile()"], ["boolean", "org.apache.catalina.webresources.EmptyResource.delete()", "public boolean delete()"], ["java.lang.String", "org.apache.catalina.webresources.EmptyResource.getName()", "public java.lang.String getName()"], ["long", "org.apache.catalina.webresources.EmptyResource.getContentLength()", "public long getContentLength()"], ["java.lang.String", "org.apache.catalina.webresources.EmptyResource.getCanonicalPath()", "public java.lang.String getCanonicalPath()"], ["boolean", "org.apache.catalina.webresources.EmptyResource.canRead()", "public boolean canRead()"], ["java.lang.String", "org.apache.catalina.webresources.EmptyResource.getWebappPath()", "public java.lang.String getWebappPath()"], ["java.lang.String", "org.apache.catalina.webresources.EmptyResource.getETag()", "public java.lang.String getETag()"], ["void", "org.apache.catalina.webresources.EmptyResource.setMimeType(java.lang.String)", "public void setMimeType(java.lang.String)"], ["java.lang.String", "org.apache.catalina.webresources.EmptyResource.getMimeType()", "public java.lang.String getMimeType()"], ["java.io.InputStream", "org.apache.catalina.webresources.EmptyResource.getInputStream()", "public java.io.InputStream getInputStream()"], ["byte[]", "org.apache.catalina.webresources.EmptyResource.getContent()", "public byte[] getContent()"], ["long", "org.apache.catalina.webresources.EmptyResource.getCreation()", "public long getCreation()"], ["java.net.URL", "org.apache.catalina.webresources.EmptyResource.getURL()", "public java.net.URL getURL()"], ["java.security.cert.Certificate[]", "org.apache.catalina.webresources.EmptyResource.getCertificates()", "public java.security.cert.Certificate[] getCertificates()"], ["java.util.jar.Manifest", "org.apache.catalina.webresources.EmptyResource.getManifest()", "public java.util.jar.Manifest getManifest()"], ["org.apache.catalina.WebResourceRoot", "org.apache.catalina.webresources.EmptyResource.getWebResourceRoot()", "public org.apache.catalina.WebResourceRoot getWebResourceRoot()"], ["org.apache.catalina.webresources.FileResource", "org.apache.catalina.webresources.FileResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.io.File, boolean)", "public org.apache.catalina.webresources.FileResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.io.File, boolean)"], ["long", "org.apache.catalina.webresources.FileResource.getLastModified()", "public long getLastModified()"], ["boolean", "org.apache.catalina.webresources.FileResource.exists()", "public boolean exists()"], ["boolean", "org.apache.catalina.webresources.FileResource.isVirtual()", "public boolean isVirtual()"], ["boolean", "org.apache.catalina.webresources.FileResource.isDirectory()", "public boolean isDirectory()"], ["boolean", "org.apache.catalina.webresources.FileResource.isFile()", "public boolean isFile()"], ["boolean", "org.apache.catalina.webresources.FileResource.delete()", "public boolean delete()"], ["java.lang.String", "org.apache.catalina.webresources.FileResource.getName()", "public java.lang.String getName()"], ["long", "org.apache.catalina.webresources.FileResource.getContentLength()", "public long getContentLength()"], ["java.lang.String", "org.apache.catalina.webresources.FileResource.getCanonicalPath()", "public java.lang.String getCanonicalPath()"], ["boolean", "org.apache.catalina.webresources.FileResource.canRead()", "public boolean canRead()"], ["byte[]", "org.apache.catalina.webresources.FileResource.getContent()", "public final byte[] getContent()"], ["long", "org.apache.catalina.webresources.FileResource.getCreation()", "public long getCreation()"], ["java.net.URL", "org.apache.catalina.webresources.FileResource.getURL()", "public java.net.URL getURL()"], ["java.security.cert.Certificate[]", "org.apache.catalina.webresources.FileResource.getCertificates()", "public java.security.cert.Certificate[] getCertificates()"], ["java.util.jar.Manifest", "org.apache.catalina.webresources.FileResource.getManifest()", "public java.util.jar.Manifest getManifest()"], ["org.apache.catalina.webresources.FileResourceSet", "org.apache.catalina.webresources.FileResourceSet()", "public org.apache.catalina.webresources.FileResourceSet()"], ["org.apache.catalina.webresources.FileResourceSet", "org.apache.catalina.webresources.FileResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.webresources.FileResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.catalina.WebResource", "org.apache.catalina.webresources.FileResourceSet.getResource(java.lang.String)", "public org.apache.catalina.WebResource getResource(java.lang.String)"], ["java.lang.String[]", "org.apache.catalina.webresources.FileResourceSet.list(java.lang.String)", "public java.lang.String[] list(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.webresources.FileResourceSet.listWebAppPaths(java.lang.String)", "public java.util.Set<java.lang.String> listWebAppPaths(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.FileResourceSet.mkdir(java.lang.String)", "public boolean mkdir(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.FileResourceSet.write(java.lang.String, java.io.InputStream, boolean)", "public boolean write(java.lang.String, java.io.InputStream, boolean)"], ["org.apache.catalina.webresources.JarResource", "org.apache.catalina.webresources.JarResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String, java.util.jar.JarEntry, java.lang.String, java.util.jar.Manifest)", "public org.apache.catalina.webresources.JarResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String, java.util.jar.JarEntry, java.lang.String, java.util.jar.Manifest)"], ["org.apache.catalina.webresources.JarResourceRoot", "org.apache.catalina.webresources.JarResourceRoot(org.apache.catalina.WebResourceRoot, java.io.File, java.lang.String, java.lang.String)", "public org.apache.catalina.webresources.JarResourceRoot(org.apache.catalina.WebResourceRoot, java.io.File, java.lang.String, java.lang.String)"], ["long", "org.apache.catalina.webresources.JarResourceRoot.getLastModified()", "public long getLastModified()"], ["boolean", "org.apache.catalina.webresources.JarResourceRoot.exists()", "public boolean exists()"], ["boolean", "org.apache.catalina.webresources.JarResourceRoot.isVirtual()", "public boolean isVirtual()"], ["boolean", "org.apache.catalina.webresources.JarResourceRoot.isDirectory()", "public boolean isDirectory()"], ["boolean", "org.apache.catalina.webresources.JarResourceRoot.isFile()", "public boolean isFile()"], ["boolean", "org.apache.catalina.webresources.JarResourceRoot.delete()", "public boolean delete()"], ["java.lang.String", "org.apache.catalina.webresources.JarResourceRoot.getName()", "public java.lang.String getName()"], ["long", "org.apache.catalina.webresources.JarResourceRoot.getContentLength()", "public long getContentLength()"], ["java.lang.String", "org.apache.catalina.webresources.JarResourceRoot.getCanonicalPath()", "public java.lang.String getCanonicalPath()"], ["boolean", "org.apache.catalina.webresources.JarResourceRoot.canRead()", "public boolean canRead()"], ["byte[]", "org.apache.catalina.webresources.JarResourceRoot.getContent()", "public byte[] getContent()"], ["long", "org.apache.catalina.webresources.JarResourceRoot.getCreation()", "public long getCreation()"], ["java.net.URL", "org.apache.catalina.webresources.JarResourceRoot.getURL()", "public java.net.URL getURL()"], ["java.security.cert.Certificate[]", "org.apache.catalina.webresources.JarResourceRoot.getCertificates()", "public java.security.cert.Certificate[] getCertificates()"], ["java.util.jar.Manifest", "org.apache.catalina.webresources.JarResourceRoot.getManifest()", "public java.util.jar.Manifest getManifest()"], ["org.apache.catalina.webresources.JarResourceSet", "org.apache.catalina.webresources.JarResourceSet()", "public org.apache.catalina.webresources.JarResourceSet()"], ["org.apache.catalina.webresources.JarResourceSet", "org.apache.catalina.webresources.JarResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.webresources.JarResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException"], ["org.apache.catalina.webresources.JarWarResource", "org.apache.catalina.webresources.JarWarResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String, java.util.jar.JarEntry, java.lang.String, java.lang.String, java.util.jar.Manifest)", "public org.apache.catalina.webresources.JarWarResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String, java.util.jar.JarEntry, java.lang.String, java.lang.String, java.util.jar.Manifest)"], ["org.apache.catalina.webresources.JarWarResourceSet", "org.apache.catalina.webresources.JarWarResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.catalina.webresources.JarWarResourceSet(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException"], ["org.apache.catalina.webresources.StandardRoot", "org.apache.catalina.webresources.StandardRoot()", "public org.apache.catalina.webresources.StandardRoot()"], ["org.apache.catalina.webresources.StandardRoot", "org.apache.catalina.webresources.StandardRoot(org.apache.catalina.Context)", "public org.apache.catalina.webresources.StandardRoot(org.apache.catalina.Context)"], ["java.lang.String[]", "org.apache.catalina.webresources.StandardRoot.list(java.lang.String)", "public java.lang.String[] list(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.catalina.webresources.StandardRoot.listWebAppPaths(java.lang.String)", "public java.util.Set<java.lang.String> listWebAppPaths(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.StandardRoot.mkdir(java.lang.String)", "public boolean mkdir(java.lang.String)"], ["boolean", "org.apache.catalina.webresources.StandardRoot.write(java.lang.String, java.io.InputStream, boolean)", "public boolean write(java.lang.String, java.io.InputStream, boolean)"], ["org.apache.catalina.WebResource", "org.apache.catalina.webresources.StandardRoot.getResource(java.lang.String)", "public org.apache.catalina.WebResource getResource(java.lang.String)"], ["org.apache.catalina.WebResource", "org.apache.catalina.webresources.StandardRoot.getClassLoaderResource(java.lang.String)", "public org.apache.catalina.WebResource getClassLoaderResource(java.lang.String)"], ["org.apache.catalina.WebResource[]", "org.apache.catalina.webresources.StandardRoot.getClassLoaderResources(java.lang.String)", "public org.apache.catalina.WebResource[] getClassLoaderResources(java.lang.String)"], ["org.apache.catalina.WebResource[]", "org.apache.catalina.webresources.StandardRoot.getResources(java.lang.String)", "public org.apache.catalina.WebResource[] getResources(java.lang.String)"], ["org.apache.catalina.WebResource[]", "org.apache.catalina.webresources.StandardRoot.listResources(java.lang.String)", "public org.apache.catalina.WebResource[] listResources(java.lang.String)"], ["void", "org.apache.catalina.webresources.StandardRoot.createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType, java.lang.String, java.net.URL, java.lang.String)", "public void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType, java.lang.String, java.net.URL, java.lang.String)"], ["void", "org.apache.catalina.webresources.StandardRoot.createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void createWebResourceSet(org.apache.catalina.WebResourceRoot$ResourceSetType, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.catalina.webresources.StandardRoot.addPreResources(org.apache.catalina.WebResourceSet)", "public void addPreResources(org.apache.catalina.WebResourceSet)"], ["org.apache.catalina.WebResourceSet[]", "org.apache.catalina.webresources.StandardRoot.getPreResources()", "public org.apache.catalina.WebResourceSet[] getPreResources()"], ["void", "org.apache.catalina.webresources.StandardRoot.addJarResources(org.apache.catalina.WebResourceSet)", "public void addJarResources(org.apache.catalina.WebResourceSet)"], ["org.apache.catalina.WebResourceSet[]", "org.apache.catalina.webresources.StandardRoot.getJarResources()", "public org.apache.catalina.WebResourceSet[] getJarResources()"], ["void", "org.apache.catalina.webresources.StandardRoot.addPostResources(org.apache.catalina.WebResourceSet)", "public void addPostResources(org.apache.catalina.WebResourceSet)"], ["org.apache.catalina.WebResourceSet[]", "org.apache.catalina.webresources.StandardRoot.getPostResources()", "public org.apache.catalina.WebResourceSet[] getPostResources()"], ["void", "org.apache.catalina.webresources.StandardRoot.setAllowLinking(boolean)", "public void setAllowLinking(boolean)"], ["boolean", "org.apache.catalina.webresources.StandardRoot.getAllowLinking()", "public boolean getAllowLinking()"], ["void", "org.apache.catalina.webresources.StandardRoot.setCachingAllowed(boolean)", "public void setCachingAllowed(boolean)"], ["boolean", "org.apache.catalina.webresources.StandardRoot.isCachingAllowed()", "public boolean isCachingAllowed()"], ["long", "org.apache.catalina.webresources.StandardRoot.getCacheTtl()", "public long getCacheTtl()"], ["void", "org.apache.catalina.webresources.StandardRoot.setCacheTtl(long)", "public void setCacheTtl(long)"], ["long", "org.apache.catalina.webresources.StandardRoot.getCacheMaxSize()", "public long getCacheMaxSize()"], ["void", "org.apache.catalina.webresources.StandardRoot.setCacheMaxSize(long)", "public void setCacheMaxSize(long)"], ["void", "org.apache.catalina.webresources.StandardRoot.setCacheObjectMaxSize(int)", "public void setCacheObjectMaxSize(int)"], ["int", "org.apache.catalina.webresources.StandardRoot.getCacheObjectMaxSize()", "public int getCacheObjectMaxSize()"], ["void", "org.apache.catalina.webresources.StandardRoot.setTrackLockedFiles(boolean)", "public void setTrackLockedFiles(boolean)"], ["boolean", "org.apache.catalina.webresources.StandardRoot.getTrackLockedFiles()", "public boolean getTrackLockedFiles()"], ["java.util.List<java.lang.String>", "org.apache.catalina.webresources.StandardRoot.getTrackedResources()", "public java.util.List<java.lang.String> getTrackedResources()"], ["org.apache.catalina.Context", "org.apache.catalina.webresources.StandardRoot.getContext()", "public org.apache.catalina.Context getContext()"], ["void", "org.apache.catalina.webresources.StandardRoot.setContext(org.apache.catalina.Context)", "public void setContext(org.apache.catalina.Context)"], ["void", "org.apache.catalina.webresources.StandardRoot.backgroundProcess()", "public void backgroundProcess()"], ["void", "org.apache.catalina.webresources.StandardRoot.registerTrackedResource(org.apache.catalina.TrackedWebResource)", "public void registerTrackedResource(org.apache.catalina.TrackedWebResource)"], ["void", "org.apache.catalina.webresources.StandardRoot.deregisterTrackedResource(org.apache.catalina.TrackedWebResource)", "public void deregisterTrackedResource(org.apache.catalina.TrackedWebResource)"], ["java.util.List<java.net.URL>", "org.apache.catalina.webresources.StandardRoot.getBaseUrls()", "public java.util.List<java.net.URL> getBaseUrls()"], ["org.apache.catalina.webresources.TomcatURLStreamHandlerFactory", "org.apache.catalina.webresources.TomcatURLStreamHandlerFactory.getInstance()", "public static org.apache.catalina.webresources.TomcatURLStreamHandlerFactory getInstance()"], ["boolean", "org.apache.catalina.webresources.TomcatURLStreamHandlerFactory.register()", "public static boolean register()"], ["boolean", "org.apache.catalina.webresources.TomcatURLStreamHandlerFactory.disable()", "public static boolean disable()"], ["void", "org.apache.catalina.webresources.TomcatURLStreamHandlerFactory.release(java.lang.ClassLoader)", "public static void release(java.lang.ClassLoader)"], ["boolean", "org.apache.catalina.webresources.TomcatURLStreamHandlerFactory.isRegistered()", "public boolean isRegistered()"], ["void", "org.apache.catalina.webresources.TomcatURLStreamHandlerFactory.addUserFactory(java.net.URLStreamHandlerFactory)", "public void addUserFactory(java.net.URLStreamHandlerFactory)"], ["java.net.URLStreamHandler", "org.apache.catalina.webresources.TomcatURLStreamHandlerFactory.createURLStreamHandler(java.lang.String)", "public java.net.URLStreamHandler createURLStreamHandler(java.lang.String)"], ["int", "org.apache.catalina.webresources.TrackedInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.catalina.webresources.TrackedInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.apache.catalina.webresources.TrackedInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.catalina.webresources.TrackedInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.apache.catalina.webresources.TrackedInputStream.available()", "public int available() throws java.io.IOException"], ["void", "org.apache.catalina.webresources.TrackedInputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.apache.catalina.webresources.TrackedInputStream.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "org.apache.catalina.webresources.TrackedInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["boolean", "org.apache.catalina.webresources.TrackedInputStream.markSupported()", "public boolean markSupported()"], ["java.lang.String", "org.apache.catalina.webresources.TrackedInputStream.getName()", "public java.lang.String getName()"], ["java.lang.Exception", "org.apache.catalina.webresources.TrackedInputStream.getCreatedBy()", "public java.lang.Exception getCreatedBy()"], ["java.lang.String", "org.apache.catalina.webresources.TrackedInputStream.toString()", "public java.lang.String toString()"], ["org.apache.catalina.webresources.VirtualResource", "org.apache.catalina.webresources.VirtualResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String)", "public org.apache.catalina.webresources.VirtualResource(org.apache.catalina.WebResourceRoot, java.lang.String, java.lang.String)"], ["boolean", "org.apache.catalina.webresources.VirtualResource.isVirtual()", "public boolean isVirtual()"], ["boolean", "org.apache.catalina.webresources.VirtualResource.isDirectory()", "public boolean isDirectory()"], ["java.lang.String", "org.apache.catalina.webresources.VirtualResource.getName()", "public java.lang.String getName()"], ["void", "org.apache.catalina.webresources.WarURLConnection.connect()", "public void connect() throws java.io.IOException"], ["java.io.InputStream", "org.apache.catalina.webresources.WarURLConnection.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["org.apache.catalina.webresources.WarURLStreamHandler", "org.apache.catalina.webresources.WarURLStreamHandler()", "public org.apache.catalina.webresources.WarURLStreamHandler()"], ["org.apache.coyote.AbstractProcessor", "org.apache.coyote.AbstractProcessor(org.apache.tomcat.util.net.AbstractEndpoint<S>)", "public org.apache.coyote.AbstractProcessor(org.apache.tomcat.util.net.AbstractEndpoint<S>)"], ["org.apache.coyote.Request", "org.apache.coyote.AbstractProcessor.getRequest()", "public org.apache.coyote.Request getRequest()"], ["void", "org.apache.coyote.AbstractProcessor.setAdapter(org.apache.coyote.Adapter)", "public void setAdapter(org.apache.coyote.Adapter)"], ["org.apache.coyote.Adapter", "org.apache.coyote.AbstractProcessor.getAdapter()", "public org.apache.coyote.Adapter getAdapter()"], ["java.util.concurrent.Executor", "org.apache.coyote.AbstractProcessor.getExecutor()", "public java.util.concurrent.Executor getExecutor()"], ["boolean", "org.apache.coyote.AbstractProcessor.isAsync()", "public boolean isAsync()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.AbstractProcessor.asyncPostProcess()", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()"], ["void", "org.apache.coyote.AbstractProcessor.errorDispatch()", "public void errorDispatch()"], ["java.lang.Object", "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.getGlobal()", "public java.lang.Object getGlobal()"], ["void", "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.recycle()", "public void recycle()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(org.apache.tomcat.util.net.SocketWrapper<S>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<S>, org.apache.tomcat.util.net.SocketStatus)"], ["org.apache.coyote.AbstractProtocol$RecycledProcessors", "org.apache.coyote.AbstractProtocol$RecycledProcessors(org.apache.coyote.AbstractProtocol$AbstractConnectionHandler<S, P>)", "public org.apache.coyote.AbstractProtocol$RecycledProcessors(org.apache.coyote.AbstractProtocol$AbstractConnectionHandler<S, P>)"], ["boolean", "org.apache.coyote.AbstractProtocol$RecycledProcessors.push(org.apache.coyote.Processor<S>)", "public boolean push(org.apache.coyote.Processor<S>)"], ["org.apache.coyote.Processor<S>", "org.apache.coyote.AbstractProtocol$RecycledProcessors.pop()", "public org.apache.coyote.Processor<S> pop()"], ["synchronized", "org.apache.coyote.AbstractProtocol$RecycledProcessors.void clear()", "public synchronized void clear()"], ["java.lang.Object", "org.apache.coyote.AbstractProtocol$RecycledProcessors.pop()", "public java.lang.Object pop()"], ["boolean", "org.apache.coyote.AbstractProtocol$RecycledProcessors.push(java.lang.Object)", "public boolean push(java.lang.Object)"], ["org.apache.coyote.AbstractProtocol", "org.apache.coyote.AbstractProtocol()", "public org.apache.coyote.AbstractProtocol()"], ["boolean", "org.apache.coyote.AbstractProtocol.setProperty(java.lang.String, java.lang.String)", "public boolean setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.coyote.AbstractProtocol.getProperty(java.lang.String)", "public java.lang.String getProperty(java.lang.String)"], ["void", "org.apache.coyote.AbstractProtocol.setAdapter(org.apache.coyote.Adapter)", "public void setAdapter(org.apache.coyote.Adapter)"], ["org.apache.coyote.Adapter", "org.apache.coyote.AbstractProtocol.getAdapter()", "public org.apache.coyote.Adapter getAdapter()"], ["int", "org.apache.coyote.AbstractProtocol.getProcessorCache()", "public int getProcessorCache()"], ["void", "org.apache.coyote.AbstractProtocol.setProcessorCache(int)", "public void setProcessorCache(int)"], ["java.lang.String", "org.apache.coyote.AbstractProtocol.getClientCertProvider()", "public java.lang.String getClientCertProvider()"], ["void", "org.apache.coyote.AbstractProtocol.setClientCertProvider(java.lang.String)", "public void setClientCertProvider(java.lang.String)"], ["boolean", "org.apache.coyote.AbstractProtocol.isAprRequired()", "public boolean isAprRequired()"], ["boolean", "org.apache.coyote.AbstractProtocol.isCometSupported()", "public boolean isCometSupported()"], ["boolean", "org.apache.coyote.AbstractProtocol.isCometTimeoutSupported()", "public boolean isCometTimeoutSupported()"], ["boolean", "org.apache.coyote.AbstractProtocol.isSendfileSupported()", "public boolean isSendfileSupported()"], ["java.util.concurrent.Executor", "org.apache.coyote.AbstractProtocol.getExecutor()", "public java.util.concurrent.Executor getExecutor()"], ["void", "org.apache.coyote.AbstractProtocol.setExecutor(java.util.concurrent.Executor)", "public void setExecutor(java.util.concurrent.Executor)"], ["int", "org.apache.coyote.AbstractProtocol.getMaxThreads()", "public int getMaxThreads()"], ["void", "org.apache.coyote.AbstractProtocol.setMaxThreads(int)", "public void setMaxThreads(int)"], ["int", "org.apache.coyote.AbstractProtocol.getMaxConnections()", "public int getMaxConnections()"], ["void", "org.apache.coyote.AbstractProtocol.setMaxConnections(int)", "public void setMaxConnections(int)"], ["int", "org.apache.coyote.AbstractProtocol.getMinSpareThreads()", "public int getMinSpareThreads()"], ["void", "org.apache.coyote.AbstractProtocol.setMinSpareThreads(int)", "public void setMinSpareThreads(int)"], ["int", "org.apache.coyote.AbstractProtocol.getThreadPriority()", "public int getThreadPriority()"], ["void", "org.apache.coyote.AbstractProtocol.setThreadPriority(int)", "public void setThreadPriority(int)"], ["int", "org.apache.coyote.AbstractProtocol.getBacklog()", "public int getBacklog()"], ["void", "org.apache.coyote.AbstractProtocol.setBacklog(int)", "public void setBacklog(int)"], ["boolean", "org.apache.coyote.AbstractProtocol.getTcpNoDelay()", "public boolean getTcpNoDelay()"], ["void", "org.apache.coyote.AbstractProtocol.setTcpNoDelay(boolean)", "public void setTcpNoDelay(boolean)"], ["int", "org.apache.coyote.AbstractProtocol.getSoLinger()", "public int getSoLinger()"], ["void", "org.apache.coyote.AbstractProtocol.setSoLinger(int)", "public void setSoLinger(int)"], ["int", "org.apache.coyote.AbstractProtocol.getKeepAliveTimeout()", "public int getKeepAliveTimeout()"], ["void", "org.apache.coyote.AbstractProtocol.setKeepAliveTimeout(int)", "public void setKeepAliveTimeout(int)"], ["java.net.InetAddress", "org.apache.coyote.AbstractProtocol.getAddress()", "public java.net.InetAddress getAddress()"], ["void", "org.apache.coyote.AbstractProtocol.setAddress(java.net.InetAddress)", "public void setAddress(java.net.InetAddress)"], ["int", "org.apache.coyote.AbstractProtocol.getPort()", "public int getPort()"], ["void", "org.apache.coyote.AbstractProtocol.setPort(int)", "public void setPort(int)"], ["int", "org.apache.coyote.AbstractProtocol.getLocalPort()", "public int getLocalPort()"], ["int", "org.apache.coyote.AbstractProtocol.getConnectionTimeout()", "public int getConnectionTimeout()"], ["void", "org.apache.coyote.AbstractProtocol.setConnectionTimeout(int)", "public void setConnectionTimeout(int)"], ["int", "org.apache.coyote.AbstractProtocol.getSoTimeout()", "public int getSoTimeout()"], ["void", "org.apache.coyote.AbstractProtocol.setSoTimeout(int)", "public void setSoTimeout(int)"], ["int", "org.apache.coyote.AbstractProtocol.getMaxHeaderCount()", "public int getMaxHeaderCount()"], ["void", "org.apache.coyote.AbstractProtocol.setMaxHeaderCount(int)", "public void setMaxHeaderCount(int)"], ["long", "org.apache.coyote.AbstractProtocol.getConnectionCount()", "public long getConnectionCount()"], ["synchronized", "org.apache.coyote.AbstractProtocol.int getNameIndex()", "public synchronized int getNameIndex()"], ["java.lang.String", "org.apache.coyote.AbstractProtocol.getName()", "public java.lang.String getName()"], ["javax.management.ObjectName", "org.apache.coyote.AbstractProtocol.getObjectName()", "public javax.management.ObjectName getObjectName()"], ["java.lang.String", "org.apache.coyote.AbstractProtocol.getDomain()", "public java.lang.String getDomain()"], ["javax.management.ObjectName", "org.apache.coyote.AbstractProtocol.preRegister(javax.management.MBeanServer, javax.management.ObjectName)", "public javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName) throws java.lang.Exception"], ["void", "org.apache.coyote.AbstractProtocol.postRegister(java.lang.Boolean)", "public void postRegister(java.lang.Boolean)"], ["void", "org.apache.coyote.AbstractProtocol.preDeregister()", "public void preDeregister() throws java.lang.Exception"], ["void", "org.apache.coyote.AbstractProtocol.postDeregister()", "public void postDeregister()"], ["void", "org.apache.coyote.AbstractProtocol.init()", "public void init() throws java.lang.Exception"], ["void", "org.apache.coyote.AbstractProtocol.start()", "public void start() throws java.lang.Exception"], ["void", "org.apache.coyote.AbstractProtocol.pause()", "public void pause() throws java.lang.Exception"], ["void", "org.apache.coyote.AbstractProtocol.resume()", "public void resume() throws java.lang.Exception"], ["void", "org.apache.coyote.AbstractProtocol.stop()", "public void stop() throws java.lang.Exception"], ["void", "org.apache.coyote.AbstractProtocol.destroy()", "public void destroy()"], ["org.apache.coyote.ActionCode[]", "org.apache.coyote.ActionCode.values()", "public static org.apache.coyote.ActionCode[] values()"], ["org.apache.coyote.ActionCode", "org.apache.coyote.ActionCode.valueOf(java.lang.String)", "public static org.apache.coyote.ActionCode valueOf(java.lang.String)"], ["org.apache.coyote.AsyncStateMachine$AsyncState[]", "org.apache.coyote.AsyncStateMachine$AsyncState.values()", "public static org.apache.coyote.AsyncStateMachine$AsyncState[] values()"], ["org.apache.coyote.AsyncStateMachine$AsyncState", "org.apache.coyote.AsyncStateMachine$AsyncState.valueOf(java.lang.String)", "public static org.apache.coyote.AsyncStateMachine$AsyncState valueOf(java.lang.String)"], ["boolean", "org.apache.coyote.AsyncStateMachine$AsyncState.isAsync()", "public boolean isAsync()"], ["boolean", "org.apache.coyote.AsyncStateMachine$AsyncState.isStarted()", "public boolean isStarted()"], ["boolean", "org.apache.coyote.AsyncStateMachine$AsyncState.isDispatching()", "public boolean isDispatching()"], ["org.apache.coyote.AsyncStateMachine", "org.apache.coyote.AsyncStateMachine(org.apache.coyote.Processor<S>)", "public org.apache.coyote.AsyncStateMachine(org.apache.coyote.Processor<S>)"], ["boolean", "org.apache.coyote.AsyncStateMachine.isAsync()", "public boolean isAsync()"], ["boolean", "org.apache.coyote.AsyncStateMachine.isAsyncDispatching()", "public boolean isAsyncDispatching()"], ["boolean", "org.apache.coyote.AsyncStateMachine.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "org.apache.coyote.AsyncStateMachine.isAsyncTimingOut()", "public boolean isAsyncTimingOut()"], ["boolean", "org.apache.coyote.AsyncStateMachine.isAsyncError()", "public boolean isAsyncError()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.void asyncStart(org.apache.coyote.AsyncContextCallback)", "public synchronized void asyncStart(org.apache.coyote.AsyncContextCallback)"], ["synchronized", "org.apache.coyote.AsyncStateMachine.void asyncOperation()", "public synchronized void asyncOperation()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()", "public synchronized org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.boolean asyncComplete()", "public synchronized boolean asyncComplete()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.boolean asyncTimeout()", "public synchronized boolean asyncTimeout()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.boolean asyncDispatch()", "public synchronized boolean asyncDispatch()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.void asyncDispatched()", "public synchronized void asyncDispatched()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.void asyncError()", "public synchronized void asyncError()"], ["synchronized", "org.apache.coyote.AsyncStateMachine.void asyncRun(java.lang.Runnable)", "public synchronized void asyncRun(java.lang.Runnable)"], ["synchronized", "org.apache.coyote.AsyncStateMachine.void recycle()", "public synchronized void recycle()"], ["org.apache.coyote.ByteBufferHolder", "org.apache.coyote.ByteBufferHolder(java.nio.ByteBuffer, boolean)", "public org.apache.coyote.ByteBufferHolder(java.nio.ByteBuffer, boolean)"], ["java.nio.ByteBuffer", "org.apache.coyote.ByteBufferHolder.getBuf()", "public java.nio.ByteBuffer getBuf()"], ["boolean", "org.apache.coyote.ByteBufferHolder.isFlipped()", "public boolean isFlipped()"], ["boolean", "org.apache.coyote.ByteBufferHolder.flip()", "public boolean flip()"], ["boolean", "org.apache.coyote.ByteBufferHolder.hasData()", "public boolean hasData()"], ["org.apache.coyote.Constants", "org.apache.coyote.Constants()", "public org.apache.coyote.Constants()"], ["org.apache.coyote.ContainerThreadMarker", "org.apache.coyote.ContainerThreadMarker()", "public org.apache.coyote.ContainerThreadMarker()"], ["boolean", "org.apache.coyote.ContainerThreadMarker.isContainerThread()", "public static boolean isContainerThread()"], ["void", "org.apache.coyote.ContainerThreadMarker.set()", "public static void set()"], ["void", "org.apache.coyote.ContainerThreadMarker.clear()", "public static void clear()"], ["org.apache.coyote.ErrorState[]", "org.apache.coyote.ErrorState.values()", "public static org.apache.coyote.ErrorState[] values()"], ["org.apache.coyote.ErrorState", "org.apache.coyote.ErrorState.valueOf(java.lang.String)", "public static org.apache.coyote.ErrorState valueOf(java.lang.String)"], ["boolean", "org.apache.coyote.ErrorState.isError()", "public boolean isError()"], ["org.apache.coyote.ErrorState", "org.apache.coyote.ErrorState.getMostSevere(org.apache.coyote.ErrorState)", "public org.apache.coyote.ErrorState getMostSevere(org.apache.coyote.ErrorState)"], ["boolean", "org.apache.coyote.ErrorState.isIoAllowed()", "public boolean isIoAllowed()"], ["org.apache.coyote.Request", "org.apache.coyote.Request()", "public org.apache.coyote.Request()"], ["javax.servlet.ReadListener", "org.apache.coyote.Request.getReadListener()", "public javax.servlet.ReadListener getReadListener()"], ["void", "org.apache.coyote.Request.setReadListener(javax.servlet.ReadListener)", "public void setReadListener(javax.servlet.ReadListener)"], ["boolean", "org.apache.coyote.Request.sendAllDataReadEvent()", "public boolean sendAllDataReadEvent()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.instanceId()", "public org.apache.tomcat.util.buf.MessageBytes instanceId()"], ["org.apache.tomcat.util.http.MimeHeaders", "org.apache.coyote.Request.getMimeHeaders()", "public org.apache.tomcat.util.http.MimeHeaders getMimeHeaders()"], ["org.apache.tomcat.util.buf.UDecoder", "org.apache.coyote.Request.getURLDecoder()", "public org.apache.tomcat.util.buf.UDecoder getURLDecoder()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.scheme()", "public org.apache.tomcat.util.buf.MessageBytes scheme()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.method()", "public org.apache.tomcat.util.buf.MessageBytes method()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.requestURI()", "public org.apache.tomcat.util.buf.MessageBytes requestURI()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.decodedURI()", "public org.apache.tomcat.util.buf.MessageBytes decodedURI()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.queryString()", "public org.apache.tomcat.util.buf.MessageBytes queryString()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.protocol()", "public org.apache.tomcat.util.buf.MessageBytes protocol()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.serverName()", "public org.apache.tomcat.util.buf.MessageBytes serverName()"], ["int", "org.apache.coyote.Request.getServerPort()", "public int getServerPort()"], ["void", "org.apache.coyote.Request.setServerPort(int)", "public void setServerPort(int)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.remoteAddr()", "public org.apache.tomcat.util.buf.MessageBytes remoteAddr()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.remoteHost()", "public org.apache.tomcat.util.buf.MessageBytes remoteHost()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.localName()", "public org.apache.tomcat.util.buf.MessageBytes localName()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.localAddr()", "public org.apache.tomcat.util.buf.MessageBytes localAddr()"], ["int", "org.apache.coyote.Request.getRemotePort()", "public int getRemotePort()"], ["void", "org.apache.coyote.Request.setRemotePort(int)", "public void setRemotePort(int)"], ["int", "org.apache.coyote.Request.getLocalPort()", "public int getLocalPort()"], ["void", "org.apache.coyote.Request.setLocalPort(int)", "public void setLocalPort(int)"], ["java.lang.String", "org.apache.coyote.Request.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["void", "org.apache.coyote.Request.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["void", "org.apache.coyote.Request.setContentLength(long)", "public void setContentLength(long)"], ["int", "org.apache.coyote.Request.getContentLength()", "public int getContentLength()"], ["long", "org.apache.coyote.Request.getContentLengthLong()", "public long getContentLengthLong()"], ["java.lang.String", "org.apache.coyote.Request.getContentType()", "public java.lang.String getContentType()"], ["void", "org.apache.coyote.Request.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.contentType()", "public org.apache.tomcat.util.buf.MessageBytes contentType()"], ["void", "org.apache.coyote.Request.setContentType(org.apache.tomcat.util.buf.MessageBytes)", "public void setContentType(org.apache.tomcat.util.buf.MessageBytes)"], ["java.lang.String", "org.apache.coyote.Request.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["org.apache.coyote.Response", "org.apache.coyote.Request.getResponse()", "public org.apache.coyote.Response getResponse()"], ["void", "org.apache.coyote.Request.setResponse(org.apache.coyote.Response)", "public void setResponse(org.apache.coyote.Response)"], ["void", "org.apache.coyote.Request.action(org.apache.coyote.ActionCode, java.lang.Object)", "public void action(org.apache.coyote.ActionCode, java.lang.Object)"], ["org.apache.tomcat.util.http.Cookies", "org.apache.coyote.Request.getCookies()", "public org.apache.tomcat.util.http.Cookies getCookies()"], ["org.apache.tomcat.util.http.Parameters", "org.apache.coyote.Request.getParameters()", "public org.apache.tomcat.util.http.Parameters getParameters()"], ["void", "org.apache.coyote.Request.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.util.HashMap<java.lang.String, java.lang.Object>", "org.apache.coyote.Request.getAttributes()", "public java.util.HashMap<java.lang.String, java.lang.Object> getAttributes()"], ["java.lang.Object", "org.apache.coyote.Request.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.getRemoteUser()", "public org.apache.tomcat.util.buf.MessageBytes getRemoteUser()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.coyote.Request.getAuthType()", "public org.apache.tomcat.util.buf.MessageBytes getAuthType()"], ["int", "org.apache.coyote.Request.getAvailable()", "public int getAvailable()"], ["void", "org.apache.coyote.Request.setAvailable(int)", "public void setAvailable(int)"], ["boolean", "org.apache.coyote.Request.isFinished()", "public boolean isFinished()"], ["org.apache.coyote.InputBuffer", "org.apache.coyote.Request.getInputBuffer()", "public org.apache.coyote.InputBuffer getInputBuffer()"], ["void", "org.apache.coyote.Request.setInputBuffer(org.apache.coyote.InputBuffer)", "public void setInputBuffer(org.apache.coyote.InputBuffer)"], ["int", "org.apache.coyote.Request.doRead(org.apache.tomcat.util.buf.ByteChunk)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk) throws java.io.IOException"], ["java.lang.String", "org.apache.coyote.Request.toString()", "public java.lang.String toString()"], ["long", "org.apache.coyote.Request.getStartTime()", "public long getStartTime()"], ["void", "org.apache.coyote.Request.setStartTime(long)", "public void setStartTime(long)"], ["void", "org.apache.coyote.Request.setNote(int, java.lang.Object)", "public final void setNote(int, java.lang.Object)"], ["java.lang.Object", "org.apache.coyote.Request.getNote(int)", "public final java.lang.Object getNote(int)"], ["void", "org.apache.coyote.Request.recycle()", "public void recycle()"], ["void", "org.apache.coyote.Request.updateCounters()", "public void updateCounters()"], ["org.apache.coyote.RequestInfo", "org.apache.coyote.Request.getRequestProcessor()", "public org.apache.coyote.RequestInfo getRequestProcessor()"], ["int", "org.apache.coyote.Request.getBytesRead()", "public int getBytesRead()"], ["boolean", "org.apache.coyote.Request.isProcessing()", "public boolean isProcessing()"], ["org.apache.coyote.RequestGroupInfo", "org.apache.coyote.RequestGroupInfo()", "public org.apache.coyote.RequestGroupInfo()"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void addRequestProcessor(org.apache.coyote.RequestInfo)", "public synchronized void addRequestProcessor(org.apache.coyote.RequestInfo)"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void removeRequestProcessor(org.apache.coyote.RequestInfo)", "public synchronized void removeRequestProcessor(org.apache.coyote.RequestInfo)"], ["synchronized", "org.apache.coyote.RequestGroupInfo.long getMaxTime()", "public synchronized long getMaxTime()"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void setMaxTime(long)", "public synchronized void setMaxTime(long)"], ["synchronized", "org.apache.coyote.RequestGroupInfo.long getProcessingTime()", "public synchronized long getProcessingTime()"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void setProcessingTime(long)", "public synchronized void setProcessingTime(long)"], ["synchronized", "org.apache.coyote.RequestGroupInfo.int getRequestCount()", "public synchronized int getRequestCount()"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void setRequestCount(int)", "public synchronized void setRequestCount(int)"], ["synchronized", "org.apache.coyote.RequestGroupInfo.int getErrorCount()", "public synchronized int getErrorCount()"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void setErrorCount(int)", "public synchronized void setErrorCount(int)"], ["synchronized", "org.apache.coyote.RequestGroupInfo.long getBytesReceived()", "public synchronized long getBytesReceived()"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void setBytesReceived(long)", "public synchronized void setBytesReceived(long)"], ["synchronized", "org.apache.coyote.RequestGroupInfo.long getBytesSent()", "public synchronized long getBytesSent()"], ["synchronized", "org.apache.coyote.RequestGroupInfo.void setBytesSent(long)", "public synchronized void setBytesSent(long)"], ["void", "org.apache.coyote.RequestGroupInfo.resetCounters()", "public void resetCounters()"], ["org.apache.coyote.RequestInfo", "org.apache.coyote.RequestInfo(org.apache.coyote.Request)", "public org.apache.coyote.RequestInfo(org.apache.coyote.Request)"], ["org.apache.coyote.RequestGroupInfo", "org.apache.coyote.RequestInfo.getGlobalProcessor()", "public org.apache.coyote.RequestGroupInfo getGlobalProcessor()"], ["void", "org.apache.coyote.RequestInfo.setGlobalProcessor(org.apache.coyote.RequestGroupInfo)", "public void setGlobalProcessor(org.apache.coyote.RequestGroupInfo)"], ["java.lang.String", "org.apache.coyote.RequestInfo.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "org.apache.coyote.RequestInfo.getCurrentUri()", "public java.lang.String getCurrentUri()"], ["java.lang.String", "org.apache.coyote.RequestInfo.getCurrentQueryString()", "public java.lang.String getCurrentQueryString()"], ["java.lang.String", "org.apache.coyote.RequestInfo.getProtocol()", "public java.lang.String getProtocol()"], ["java.lang.String", "org.apache.coyote.RequestInfo.getVirtualHost()", "public java.lang.String getVirtualHost()"], ["int", "org.apache.coyote.RequestInfo.getServerPort()", "public int getServerPort()"], ["java.lang.String", "org.apache.coyote.RequestInfo.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["java.lang.String", "org.apache.coyote.RequestInfo.getRemoteAddrForwarded()", "public java.lang.String getRemoteAddrForwarded()"], ["int", "org.apache.coyote.RequestInfo.getContentLength()", "public int getContentLength()"], ["long", "org.apache.coyote.RequestInfo.getRequestBytesReceived()", "public long getRequestBytesReceived()"], ["long", "org.apache.coyote.RequestInfo.getRequestBytesSent()", "public long getRequestBytesSent()"], ["long", "org.apache.coyote.RequestInfo.getRequestProcessingTime()", "public long getRequestProcessingTime()"], ["int", "org.apache.coyote.RequestInfo.getStage()", "public int getStage()"], ["void", "org.apache.coyote.RequestInfo.setStage(int)", "public void setStage(int)"], ["long", "org.apache.coyote.RequestInfo.getBytesSent()", "public long getBytesSent()"], ["void", "org.apache.coyote.RequestInfo.setBytesSent(long)", "public void setBytesSent(long)"], ["long", "org.apache.coyote.RequestInfo.getBytesReceived()", "public long getBytesReceived()"], ["void", "org.apache.coyote.RequestInfo.setBytesReceived(long)", "public void setBytesReceived(long)"], ["long", "org.apache.coyote.RequestInfo.getProcessingTime()", "public long getProcessingTime()"], ["void", "org.apache.coyote.RequestInfo.setProcessingTime(long)", "public void setProcessingTime(long)"], ["long", "org.apache.coyote.RequestInfo.getMaxTime()", "public long getMaxTime()"], ["void", "org.apache.coyote.RequestInfo.setMaxTime(long)", "public void setMaxTime(long)"], ["java.lang.String", "org.apache.coyote.RequestInfo.getMaxRequestUri()", "public java.lang.String getMaxRequestUri()"], ["void", "org.apache.coyote.RequestInfo.setMaxRequestUri(java.lang.String)", "public void setMaxRequestUri(java.lang.String)"], ["int", "org.apache.coyote.RequestInfo.getRequestCount()", "public int getRequestCount()"], ["void", "org.apache.coyote.RequestInfo.setRequestCount(int)", "public void setRequestCount(int)"], ["int", "org.apache.coyote.RequestInfo.getErrorCount()", "public int getErrorCount()"], ["void", "org.apache.coyote.RequestInfo.setErrorCount(int)", "public void setErrorCount(int)"], ["java.lang.String", "org.apache.coyote.RequestInfo.getWorkerThreadName()", "public java.lang.String getWorkerThreadName()"], ["javax.management.ObjectName", "org.apache.coyote.RequestInfo.getRpName()", "public javax.management.ObjectName getRpName()"], ["long", "org.apache.coyote.RequestInfo.getLastRequestProcessingTime()", "public long getLastRequestProcessingTime()"], ["void", "org.apache.coyote.RequestInfo.setWorkerThreadName(java.lang.String)", "public void setWorkerThreadName(java.lang.String)"], ["void", "org.apache.coyote.RequestInfo.setRpName(javax.management.ObjectName)", "public void setRpName(javax.management.ObjectName)"], ["void", "org.apache.coyote.RequestInfo.setLastRequestProcessingTime(long)", "public void setLastRequestProcessingTime(long)"], ["org.apache.coyote.Response", "org.apache.coyote.Response()", "public org.apache.coyote.Response()"], ["org.apache.coyote.Request", "org.apache.coyote.Response.getRequest()", "public org.apache.coyote.Request getRequest()"], ["void", "org.apache.coyote.Response.setRequest(org.apache.coyote.Request)", "public void setRequest(org.apache.coyote.Request)"], ["org.apache.coyote.OutputBuffer", "org.apache.coyote.Response.getOutputBuffer()", "public org.apache.coyote.OutputBuffer getOutputBuffer()"], ["void", "org.apache.coyote.Response.setOutputBuffer(org.apache.coyote.OutputBuffer)", "public void setOutputBuffer(org.apache.coyote.OutputBuffer)"], ["org.apache.tomcat.util.http.MimeHeaders", "org.apache.coyote.Response.getMimeHeaders()", "public org.apache.tomcat.util.http.MimeHeaders getMimeHeaders()"], ["org.apache.coyote.ActionHook", "org.apache.coyote.Response.getHook()", "public org.apache.coyote.ActionHook getHook()"], ["void", "org.apache.coyote.Response.setHook(org.apache.coyote.ActionHook)", "public void setHook(org.apache.coyote.ActionHook)"], ["void", "org.apache.coyote.Response.setNote(int, java.lang.Object)", "public final void setNote(int, java.lang.Object)"], ["java.lang.Object", "org.apache.coyote.Response.getNote(int)", "public final java.lang.Object getNote(int)"], ["void", "org.apache.coyote.Response.action(org.apache.coyote.ActionCode, java.lang.Object)", "public void action(org.apache.coyote.ActionCode, java.lang.Object)"], ["int", "org.apache.coyote.Response.getStatus()", "public int getStatus()"], ["void", "org.apache.coyote.Response.setStatus(int)", "public void setStatus(int)"], ["java.lang.String", "org.apache.coyote.Response.getMessage()", "public java.lang.String getMessage()"], ["void", "org.apache.coyote.Response.setMessage(java.lang.String)", "public void setMessage(java.lang.String)"], ["boolean", "org.apache.coyote.Response.isCommitted()", "public boolean isCommitted()"], ["void", "org.apache.coyote.Response.setCommitted(boolean)", "public void setCommitted(boolean)"], ["long", "org.apache.coyote.Response.getCommitTime()", "public long getCommitTime()"], ["void", "org.apache.coyote.Response.setErrorException(java.lang.Exception)", "public void setErrorException(java.lang.Exception)"], ["java.lang.Exception", "org.apache.coyote.Response.getErrorException()", "public java.lang.Exception getErrorException()"], ["boolean", "org.apache.coyote.Response.isExceptionPresent()", "public boolean isExceptionPresent()"], ["void", "org.apache.coyote.Response.reset()", "public void reset() throws java.lang.IllegalStateException"], ["boolean", "org.apache.coyote.Response.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["void", "org.apache.coyote.Response.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.coyote.Response.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.apache.coyote.Response.sendHeaders()", "public void sendHeaders()"], ["java.util.Locale", "org.apache.coyote.Response.getLocale()", "public java.util.Locale getLocale()"], ["void", "org.apache.coyote.Response.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["java.lang.String", "org.apache.coyote.Response.getContentLanguage()", "public java.lang.String getContentLanguage()"], ["void", "org.apache.coyote.Response.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["java.lang.String", "org.apache.coyote.Response.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["void", "org.apache.coyote.Response.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.apache.coyote.Response.setContentTypeNoCharset(java.lang.String)", "public void setContentTypeNoCharset(java.lang.String)"], ["java.lang.String", "org.apache.coyote.Response.getContentType()", "public java.lang.String getContentType()"], ["void", "org.apache.coyote.Response.setContentLength(long)", "public void setContentLength(long)"], ["int", "org.apache.coyote.Response.getContentLength()", "public int getContentLength()"], ["long", "org.apache.coyote.Response.getContentLengthLong()", "public long getContentLengthLong()"], ["void", "org.apache.coyote.Response.doWrite(org.apache.tomcat.util.buf.ByteChunk)", "public void doWrite(org.apache.tomcat.util.buf.ByteChunk) throws java.io.IOException"], ["void", "org.apache.coyote.Response.recycle()", "public void recycle()"], ["long", "org.apache.coyote.Response.getContentWritten()", "public long getContentWritten()"], ["long", "org.apache.coyote.Response.getBytesWritten(boolean)", "public long getBytesWritten(boolean)"], ["javax.servlet.WriteListener", "org.apache.coyote.Response.getWriteListener()", "public javax.servlet.WriteListener getWriteListener()"], ["void", "org.apache.coyote.Response.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["boolean", "org.apache.coyote.Response.isReady()", "public boolean isReady()"], ["boolean", "org.apache.coyote.Response.checkRegisterForWrite(boolean)", "public boolean checkRegisterForWrite(boolean)"], ["void", "org.apache.coyote.Response.onWritePossible()", "public void onWritePossible() throws java.io.IOException"], ["int", "org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["int", "org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer.getBytesWritten()", "public long getBytesWritten()"], ["org.apache.coyote.ajp.AbstractAjpProcessor", "org.apache.coyote.ajp.AbstractAjpProcessor(int, org.apache.tomcat.util.net.AbstractEndpoint<S>)", "public org.apache.coyote.ajp.AbstractAjpProcessor(int, org.apache.tomcat.util.net.AbstractEndpoint<S>)"], ["int", "org.apache.coyote.ajp.AbstractAjpProcessor.getKeepAliveTimeout()", "public int getKeepAliveTimeout()"], ["void", "org.apache.coyote.ajp.AbstractAjpProcessor.setKeepAliveTimeout(int)", "public void setKeepAliveTimeout(int)"], ["boolean", "org.apache.coyote.ajp.AbstractAjpProcessor.getTomcatAuthentication()", "public boolean getTomcatAuthentication()"], ["void", "org.apache.coyote.ajp.AbstractAjpProcessor.setTomcatAuthentication(boolean)", "public void setTomcatAuthentication(boolean)"], ["void", "org.apache.coyote.ajp.AbstractAjpProcessor.setRequiredSecret(java.lang.String)", "public void setRequiredSecret(java.lang.String)"], ["java.lang.String", "org.apache.coyote.ajp.AbstractAjpProcessor.getClientCertProvider()", "public java.lang.String getClientCertProvider()"], ["void", "org.apache.coyote.ajp.AbstractAjpProcessor.setClientCertProvider(java.lang.String)", "public void setClientCertProvider(java.lang.String)"], ["void", "org.apache.coyote.ajp.AbstractAjpProcessor.action(org.apache.coyote.ActionCode, java.lang.Object)", "public final void action(org.apache.coyote.ActionCode, java.lang.Object)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.ajp.AbstractAjpProcessor.asyncDispatch(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.ajp.AbstractAjpProcessor.process(org.apache.tomcat.util.net.SocketWrapper<S>)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<S>) throws java.io.IOException"], ["void", "org.apache.coyote.ajp.AbstractAjpProcessor.setSslSupport(org.apache.tomcat.util.net.SSLSupport)", "public void setSslSupport(org.apache.tomcat.util.net.SSLSupport)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.ajp.AbstractAjpProcessor.event(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState event(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.ajp.AbstractAjpProcessor.upgradeDispatch(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["javax.servlet.http.HttpUpgradeHandler", "org.apache.coyote.ajp.AbstractAjpProcessor.getHttpUpgradeHandler()", "public javax.servlet.http.HttpUpgradeHandler getHttpUpgradeHandler()"], ["void", "org.apache.coyote.ajp.AbstractAjpProcessor.recycle(boolean)", "public void recycle(boolean)"], ["boolean", "org.apache.coyote.ajp.AbstractAjpProcessor.isComet()", "public final boolean isComet()"], ["boolean", "org.apache.coyote.ajp.AbstractAjpProcessor.isUpgrade()", "public final boolean isUpgrade()"], ["org.apache.coyote.ajp.AbstractAjpProtocol", "org.apache.coyote.ajp.AbstractAjpProtocol()", "public org.apache.coyote.ajp.AbstractAjpProtocol()"], ["boolean", "org.apache.coyote.ajp.AbstractAjpProtocol.getTomcatAuthentication()", "public boolean getTomcatAuthentication()"], ["void", "org.apache.coyote.ajp.AbstractAjpProtocol.setTomcatAuthentication(boolean)", "public void setTomcatAuthentication(boolean)"], ["void", "org.apache.coyote.ajp.AbstractAjpProtocol.setRequiredSecret(java.lang.String)", "public void setRequiredSecret(java.lang.String)"], ["int", "org.apache.coyote.ajp.AbstractAjpProtocol.getPacketSize()", "public int getPacketSize()"], ["void", "org.apache.coyote.ajp.AbstractAjpProtocol.setPacketSize(int)", "public void setPacketSize(int)"], ["org.apache.coyote.ajp.AjpAprProcessor", "org.apache.coyote.ajp.AjpAprProcessor(int, org.apache.tomcat.util.net.AprEndpoint)", "public org.apache.coyote.ajp.AjpAprProcessor(int, org.apache.tomcat.util.net.AprEndpoint)"], ["void", "org.apache.coyote.ajp.AjpAprProcessor.recycle(boolean)", "public void recycle(boolean)"], ["org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler", "org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpAprProtocol)", "public org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpAprProtocol)"], ["void", "org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.coyote.Processor<java.lang.Long>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.coyote.Processor<java.lang.Long>, boolean, boolean)"], ["boolean", "org.apache.coyote.ajp.AjpAprProtocol.isAprRequired()", "public boolean isAprRequired()"], ["org.apache.coyote.ajp.AjpAprProtocol", "org.apache.coyote.ajp.AjpAprProtocol()", "public org.apache.coyote.ajp.AjpAprProtocol()"], ["int", "org.apache.coyote.ajp.AjpAprProtocol.getPollTime()", "public int getPollTime()"], ["void", "org.apache.coyote.ajp.AjpAprProtocol.setPollTime(int)", "public void setPollTime(int)"], ["void", "org.apache.coyote.ajp.AjpAprProtocol.setPollerSize(int)", "public void setPollerSize(int)"], ["int", "org.apache.coyote.ajp.AjpAprProtocol.getPollerSize()", "public int getPollerSize()"], ["org.apache.coyote.ajp.AjpMessage", "org.apache.coyote.ajp.AjpMessage(int)", "public org.apache.coyote.ajp.AjpMessage(int)"], ["void", "org.apache.coyote.ajp.AjpMessage.reset()", "public void reset()"], ["void", "org.apache.coyote.ajp.AjpMessage.end()", "public void end()"], ["byte[]", "org.apache.coyote.ajp.AjpMessage.getBuffer()", "public byte[] getBuffer()"], ["int", "org.apache.coyote.ajp.AjpMessage.getLen()", "public int getLen()"], ["void", "org.apache.coyote.ajp.AjpMessage.appendInt(int)", "public void appendInt(int)"], ["void", "org.apache.coyote.ajp.AjpMessage.appendByte(int)", "public void appendByte(int)"], ["void", "org.apache.coyote.ajp.AjpMessage.appendBytes(org.apache.tomcat.util.buf.MessageBytes)", "public void appendBytes(org.apache.tomcat.util.buf.MessageBytes)"], ["void", "org.apache.coyote.ajp.AjpMessage.appendByteChunk(org.apache.tomcat.util.buf.ByteChunk)", "public void appendByteChunk(org.apache.tomcat.util.buf.ByteChunk)"], ["void", "org.apache.coyote.ajp.AjpMessage.appendCharChunk(org.apache.tomcat.util.buf.CharChunk)", "public void appendCharChunk(org.apache.tomcat.util.buf.CharChunk)"], ["void", "org.apache.coyote.ajp.AjpMessage.appendString(java.lang.String)", "public void appendString(java.lang.String)"], ["void", "org.apache.coyote.ajp.AjpMessage.appendBytes(byte[], int, int)", "public void appendBytes(byte[], int, int)"], ["int", "org.apache.coyote.ajp.AjpMessage.getInt()", "public int getInt()"], ["int", "org.apache.coyote.ajp.AjpMessage.peekInt()", "public int peekInt()"], ["byte", "org.apache.coyote.ajp.AjpMessage.getByte()", "public byte getByte()"], ["void", "org.apache.coyote.ajp.AjpMessage.getBytes(org.apache.tomcat.util.buf.MessageBytes)", "public void getBytes(org.apache.tomcat.util.buf.MessageBytes)"], ["void", "org.apache.coyote.ajp.AjpMessage.getBodyBytes(org.apache.tomcat.util.buf.MessageBytes)", "public void getBodyBytes(org.apache.tomcat.util.buf.MessageBytes)"], ["int", "org.apache.coyote.ajp.AjpMessage.getLongInt()", "public int getLongInt()"], ["int", "org.apache.coyote.ajp.AjpMessage.getHeaderLength()", "public int getHeaderLength()"], ["int", "org.apache.coyote.ajp.AjpMessage.getPacketSize()", "public int getPacketSize()"], ["int", "org.apache.coyote.ajp.AjpMessage.processHeader(boolean)", "public int processHeader(boolean)"], ["void", "org.apache.coyote.ajp.AjpMessage.dump(java.lang.String)", "public void dump(java.lang.String)"], ["void", "org.apache.coyote.ajp.AjpNio2Processor$1.completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.ajp.AjpNio2Processor$1.failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.ajp.AjpNio2Processor$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.coyote.ajp.AjpNio2Processor$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["org.apache.coyote.ajp.AjpNio2Processor", "org.apache.coyote.ajp.AjpNio2Processor(int, org.apache.tomcat.util.net.Nio2Endpoint)", "public org.apache.coyote.ajp.AjpNio2Processor(int, org.apache.tomcat.util.net.Nio2Endpoint)"], ["void", "org.apache.coyote.ajp.AjpNio2Processor.recycle(boolean)", "public void recycle(boolean)"], ["org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler", "org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpNio2Protocol)", "public org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpNio2Protocol)"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler.getSslImplementation()", "public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()"], ["void", "org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.Nio2Channel>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.Nio2Channel>, boolean, boolean)"], ["void", "org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler.onCreateSSLEngine(javax.net.ssl.SSLEngine)", "public void onCreateSSLEngine(javax.net.ssl.SSLEngine)"], ["void", "org.apache.coyote.ajp.AjpNio2Protocol$AjpConnectionHandler.closeAll()", "public void closeAll()"], ["org.apache.coyote.ajp.AjpNio2Protocol", "org.apache.coyote.ajp.AjpNio2Protocol()", "public org.apache.coyote.ajp.AjpNio2Protocol()"], ["org.apache.coyote.ajp.AjpNioProcessor", "org.apache.coyote.ajp.AjpNioProcessor(int, org.apache.tomcat.util.net.NioEndpoint)", "public org.apache.coyote.ajp.AjpNioProcessor(int, org.apache.tomcat.util.net.NioEndpoint)"], ["org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler", "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpNioProtocol)", "public org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpNioProtocol)"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler.getSslImplementation()", "public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()"], ["void", "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler.release(java.nio.channels.SocketChannel)", "public void release(java.nio.channels.SocketChannel)"], ["void", "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>)"], ["void", "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.NioChannel>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.NioChannel>, boolean, boolean)"], ["void", "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler.onCreateSSLEngine(javax.net.ssl.SSLEngine)", "public void onCreateSSLEngine(javax.net.ssl.SSLEngine)"], ["org.apache.coyote.ajp.AjpNioProtocol", "org.apache.coyote.ajp.AjpNioProtocol()", "public org.apache.coyote.ajp.AjpNioProtocol()"], ["org.apache.coyote.ajp.AjpProcessor", "org.apache.coyote.ajp.AjpProcessor(int, org.apache.tomcat.util.net.JIoEndpoint)", "public org.apache.coyote.ajp.AjpProcessor(int, org.apache.tomcat.util.net.JIoEndpoint)"], ["void", "org.apache.coyote.ajp.AjpProcessor.recycle(boolean)", "public void recycle(boolean)"], ["org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler", "org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpProtocol)", "public org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler(org.apache.coyote.ajp.AjpProtocol)"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler.getSslImplementation()", "public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()"], ["void", "org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.coyote.Processor<java.net.Socket>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.coyote.Processor<java.net.Socket>, boolean, boolean)"], ["void", "org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler.beforeHandshake(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)", "public void beforeHandshake(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)"], ["org.apache.coyote.ajp.AjpProtocol", "org.apache.coyote.ajp.AjpProtocol()", "public org.apache.coyote.ajp.AjpProtocol()"], ["org.apache.coyote.ajp.Constants", "org.apache.coyote.ajp.Constants()", "public org.apache.coyote.ajp.Constants()"], ["java.lang.String", "org.apache.coyote.ajp.Constants.getMethodForCode(int)", "public static final java.lang.String getMethodForCode(int)"], ["java.lang.String", "org.apache.coyote.ajp.Constants.getHeaderForCode(int)", "public static final java.lang.String getHeaderForCode(int)"], ["java.lang.String", "org.apache.coyote.ajp.Constants.getResponseHeaderForCode(int)", "public static final java.lang.String getResponseHeaderForCode(int)"], ["int", "org.apache.coyote.ajp.Constants.getResponseAjpIndex(java.lang.String)", "public static final int getResponseAjpIndex(java.lang.String)"], ["org.apache.coyote.http11.AbstractHttp11JsseProtocol", "org.apache.coyote.http11.AbstractHttp11JsseProtocol()", "public org.apache.coyote.http11.AbstractHttp11JsseProtocol()"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getAlgorithm()", "public java.lang.String getAlgorithm()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setAlgorithm(java.lang.String)", "public void setAlgorithm(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getClientAuth()", "public java.lang.String getClientAuth()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setClientAuth(java.lang.String)", "public void setClientAuth(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getKeystoreFile()", "public java.lang.String getKeystoreFile()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setKeystoreFile(java.lang.String)", "public void setKeystoreFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getKeystorePass()", "public java.lang.String getKeystorePass()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setKeystorePass(java.lang.String)", "public void setKeystorePass(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getKeystoreType()", "public java.lang.String getKeystoreType()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setKeystoreType(java.lang.String)", "public void setKeystoreType(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getKeystoreProvider()", "public java.lang.String getKeystoreProvider()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setKeystoreProvider(java.lang.String)", "public void setKeystoreProvider(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getSslProtocol()", "public java.lang.String getSslProtocol()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setSslProtocol(java.lang.String)", "public void setSslProtocol(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getCiphers()", "public java.lang.String getCiphers()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setCiphers(java.lang.String)", "public void setCiphers(java.lang.String)"], ["java.lang.String[]", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getCiphersUsed()", "public java.lang.String[] getCiphersUsed()"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getKeyAlias()", "public java.lang.String getKeyAlias()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setKeyAlias(java.lang.String)", "public void setKeyAlias(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getKeyPass()", "public java.lang.String getKeyPass()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setKeyPass(java.lang.String)", "public void setKeyPass(java.lang.String)"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setTruststoreFile(java.lang.String)", "public void setTruststoreFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getTruststoreFile()", "public java.lang.String getTruststoreFile()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setTruststorePass(java.lang.String)", "public void setTruststorePass(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getTruststorePass()", "public java.lang.String getTruststorePass()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setTruststoreType(java.lang.String)", "public void setTruststoreType(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getTruststoreType()", "public java.lang.String getTruststoreType()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setTruststoreProvider(java.lang.String)", "public void setTruststoreProvider(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getTruststoreProvider()", "public java.lang.String getTruststoreProvider()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setTruststoreAlgorithm(java.lang.String)", "public void setTruststoreAlgorithm(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getTruststoreAlgorithm()", "public java.lang.String getTruststoreAlgorithm()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setTrustMaxCertLength(java.lang.String)", "public void setTrustMaxCertLength(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getTrustMaxCertLength()", "public java.lang.String getTrustMaxCertLength()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setCrlFile(java.lang.String)", "public void setCrlFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getCrlFile()", "public java.lang.String getCrlFile()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setSessionCacheSize(java.lang.String)", "public void setSessionCacheSize(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getSessionCacheSize()", "public java.lang.String getSessionCacheSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setSessionTimeout(java.lang.String)", "public void setSessionTimeout(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getSessionTimeout()", "public java.lang.String getSessionTimeout()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setAllowUnsafeLegacyRenegotiation(java.lang.String)", "public void setAllowUnsafeLegacyRenegotiation(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getAllowUnsafeLegacyRenegotiation()", "public java.lang.String getAllowUnsafeLegacyRenegotiation()"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.getSslImplementationName()", "public java.lang.String getSslImplementationName()"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.setSslImplementationName(java.lang.String)", "public void setSslImplementationName(java.lang.String)"], ["void", "org.apache.coyote.http11.AbstractHttp11JsseProtocol.init()", "public void init() throws java.lang.Exception"], ["org.apache.coyote.http11.AbstractHttp11Processor", "org.apache.coyote.http11.AbstractHttp11Processor(org.apache.tomcat.util.net.AbstractEndpoint<S>)", "public org.apache.coyote.http11.AbstractHttp11Processor(org.apache.tomcat.util.net.AbstractEndpoint<S>)"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setCompression(java.lang.String)", "public void setCompression(java.lang.String)"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setCompressionMinSize(int)", "public void setCompressionMinSize(int)"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setNoCompressionUserAgents(java.lang.String)", "public void setNoCompressionUserAgents(java.lang.String)"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.addCompressableMimeType(java.lang.String)", "public void addCompressableMimeType(java.lang.String)"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setCompressableMimeTypes(java.lang.String[])", "public void setCompressableMimeTypes(java.lang.String[])"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setCompressableMimeTypes(java.lang.String)", "public void setCompressableMimeTypes(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Processor.getCompression()", "public java.lang.String getCompression()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setRestrictedUserAgents(java.lang.String)", "public void setRestrictedUserAgents(java.lang.String)"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setMaxKeepAliveRequests(int)", "public void setMaxKeepAliveRequests(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Processor.getMaxKeepAliveRequests()", "public int getMaxKeepAliveRequests()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setKeepAliveTimeout(int)", "public void setKeepAliveTimeout(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Processor.getKeepAliveTimeout()", "public int getKeepAliveTimeout()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setMaxSavePostSize(int)", "public void setMaxSavePostSize(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Processor.getMaxSavePostSize()", "public int getMaxSavePostSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setDisableUploadTimeout(boolean)", "public void setDisableUploadTimeout(boolean)"], ["boolean", "org.apache.coyote.http11.AbstractHttp11Processor.getDisableUploadTimeout()", "public boolean getDisableUploadTimeout()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setSocketBuffer(int)", "public void setSocketBuffer(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Processor.getSocketBuffer()", "public int getSocketBuffer()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setConnectionUploadTimeout(int)", "public void setConnectionUploadTimeout(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Processor.getConnectionUploadTimeout()", "public int getConnectionUploadTimeout()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.setServer(java.lang.String)", "public void setServer(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Processor.getServer()", "public java.lang.String getServer()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.action(org.apache.coyote.ActionCode, java.lang.Object)", "public final void action(org.apache.coyote.ActionCode, java.lang.Object)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.AbstractHttp11Processor.process(org.apache.tomcat.util.net.SocketWrapper<S>)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<S>) throws java.io.IOException"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"], ["boolean", "org.apache.coyote.http11.AbstractHttp11Processor.isComet()", "public boolean isComet()"], ["boolean", "org.apache.coyote.http11.AbstractHttp11Processor.isUpgrade()", "public boolean isUpgrade()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.AbstractHttp11Processor.upgradeDispatch(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["javax.servlet.http.HttpUpgradeHandler", "org.apache.coyote.http11.AbstractHttp11Processor.getHttpUpgradeHandler()", "public javax.servlet.http.HttpUpgradeHandler getHttpUpgradeHandler()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.endRequest()", "public void endRequest()"], ["void", "org.apache.coyote.http11.AbstractHttp11Processor.recycle(boolean)", "public final void recycle(boolean)"], ["org.apache.coyote.http11.AbstractHttp11Protocol", "org.apache.coyote.http11.AbstractHttp11Protocol()", "public org.apache.coyote.http11.AbstractHttp11Protocol()"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getSocketBuffer()", "public int getSocketBuffer()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setSocketBuffer(int)", "public void setSocketBuffer(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getMaxSavePostSize()", "public int getMaxSavePostSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setMaxSavePostSize(int)", "public void setMaxSavePostSize(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getMaxHttpHeaderSize()", "public int getMaxHttpHeaderSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setMaxHttpHeaderSize(int)", "public void setMaxHttpHeaderSize(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getConnectionUploadTimeout()", "public int getConnectionUploadTimeout()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setConnectionUploadTimeout(int)", "public void setConnectionUploadTimeout(int)"], ["boolean", "org.apache.coyote.http11.AbstractHttp11Protocol.getDisableUploadTimeout()", "public boolean getDisableUploadTimeout()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setDisableUploadTimeout(boolean)", "public void setDisableUploadTimeout(boolean)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Protocol.getCompression()", "public java.lang.String getCompression()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setCompression(java.lang.String)", "public void setCompression(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Protocol.getNoCompressionUserAgents()", "public java.lang.String getNoCompressionUserAgents()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setNoCompressionUserAgents(java.lang.String)", "public void setNoCompressionUserAgents(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Protocol.getCompressableMimeType()", "public java.lang.String getCompressableMimeType()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setCompressableMimeType(java.lang.String)", "public void setCompressableMimeType(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Protocol.getCompressableMimeTypes()", "public java.lang.String getCompressableMimeTypes()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setCompressableMimeTypes(java.lang.String)", "public void setCompressableMimeTypes(java.lang.String)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getCompressionMinSize()", "public int getCompressionMinSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setCompressionMinSize(int)", "public void setCompressionMinSize(int)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Protocol.getRestrictedUserAgents()", "public java.lang.String getRestrictedUserAgents()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setRestrictedUserAgents(java.lang.String)", "public void setRestrictedUserAgents(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.AbstractHttp11Protocol.getServer()", "public java.lang.String getServer()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setServer(java.lang.String)", "public void setServer(java.lang.String)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getMaxTrailerSize()", "public int getMaxTrailerSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setMaxTrailerSize(int)", "public void setMaxTrailerSize(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getMaxExtensionSize()", "public int getMaxExtensionSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setMaxExtensionSize(int)", "public void setMaxExtensionSize(int)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getMaxSwallowSize()", "public int getMaxSwallowSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setMaxSwallowSize(int)", "public void setMaxSwallowSize(int)"], ["boolean", "org.apache.coyote.http11.AbstractHttp11Protocol.getSecure()", "public boolean getSecure()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setSecure(boolean)", "public void setSecure(boolean)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getUpgradeAsyncWriteBufferSize()", "public int getUpgradeAsyncWriteBufferSize()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setUpgradeAsyncWriteBufferSize(int)", "public void setUpgradeAsyncWriteBufferSize(int)"], ["boolean", "org.apache.coyote.http11.AbstractHttp11Protocol.isSSLEnabled()", "public boolean isSSLEnabled()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setSSLEnabled(boolean)", "public void setSSLEnabled(boolean)"], ["int", "org.apache.coyote.http11.AbstractHttp11Protocol.getMaxKeepAliveRequests()", "public int getMaxKeepAliveRequests()"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setMaxKeepAliveRequests(int)", "public void setMaxKeepAliveRequests(int)"], ["void", "org.apache.coyote.http11.AbstractHttp11Protocol.setNpnHandler(java.lang.String)", "public void setNpnHandler(java.lang.String)"], ["org.apache.coyote.http11.AbstractInputBuffer", "org.apache.coyote.http11.AbstractInputBuffer()", "public org.apache.coyote.http11.AbstractInputBuffer()"], ["void", "org.apache.coyote.http11.AbstractInputBuffer.addFilter(org.apache.coyote.http11.InputFilter)", "public void addFilter(org.apache.coyote.http11.InputFilter)"], ["org.apache.coyote.http11.InputFilter[]", "org.apache.coyote.http11.AbstractInputBuffer.getFilters()", "public org.apache.coyote.http11.InputFilter[] getFilters()"], ["void", "org.apache.coyote.http11.AbstractInputBuffer.addActiveFilter(org.apache.coyote.http11.InputFilter)", "public void addActiveFilter(org.apache.coyote.http11.InputFilter)"], ["void", "org.apache.coyote.http11.AbstractInputBuffer.setSwallowInput(boolean)", "public void setSwallowInput(boolean)"], ["void", "org.apache.coyote.http11.AbstractInputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.AbstractInputBuffer.nextRequest()", "public void nextRequest()"], ["void", "org.apache.coyote.http11.AbstractInputBuffer.endRequest()", "public void endRequest() throws java.io.IOException"], ["int", "org.apache.coyote.http11.AbstractInputBuffer.available()", "public int available()"], ["boolean", "org.apache.coyote.http11.AbstractInputBuffer.isFinished()", "public boolean isFinished()"], ["int", "org.apache.coyote.http11.AbstractInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseData", "org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseData()", "public org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseData()"], ["void", "org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseData.recycle()", "public void recycle()"], ["org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParsePosition[]", "org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParsePosition.values()", "public static org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParsePosition[] values()"], ["org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParsePosition", "org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParsePosition.valueOf(java.lang.String)", "public static org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParsePosition valueOf(java.lang.String)"], ["org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseStatus[]", "org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseStatus.values()", "public static org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseStatus[] values()"], ["org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseStatus", "org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseStatus.valueOf(java.lang.String)", "public static org.apache.coyote.http11.AbstractNioInputBuffer$HeaderParseStatus valueOf(java.lang.String)"], ["org.apache.coyote.http11.AbstractNioInputBuffer", "org.apache.coyote.http11.AbstractNioInputBuffer(org.apache.coyote.Request, int)", "public org.apache.coyote.http11.AbstractNioInputBuffer(org.apache.coyote.Request, int)"], ["void", "org.apache.coyote.http11.AbstractNioInputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.AbstractNioInputBuffer.nextRequest()", "public void nextRequest()"], ["boolean", "org.apache.coyote.http11.AbstractNioInputBuffer.parseRequestLine(boolean)", "public boolean parseRequestLine(boolean) throws java.io.IOException"], ["boolean", "org.apache.coyote.http11.AbstractNioInputBuffer.parseHeaders()", "public boolean parseHeaders() throws java.io.IOException"], ["int", "org.apache.coyote.http11.AbstractNioInputBuffer.getParsingRequestLinePhase()", "public int getParsingRequestLinePhase()"], ["java.lang.Void", "org.apache.coyote.http11.AbstractOutputBuffer$1.run()", "public java.lang.Void run()"], ["java.lang.Object", "org.apache.coyote.http11.AbstractOutputBuffer$1.run()", "public java.lang.Object run()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.addFilter(org.apache.coyote.http11.OutputFilter)", "public void addFilter(org.apache.coyote.http11.OutputFilter)"], ["org.apache.coyote.http11.OutputFilter[]", "org.apache.coyote.http11.AbstractOutputBuffer.getFilters()", "public org.apache.coyote.http11.OutputFilter[] getFilters()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.addActiveFilter(org.apache.coyote.http11.OutputFilter)", "public void addActiveFilter(org.apache.coyote.http11.OutputFilter)"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.setSocketBuffer(int)", "public void setSocketBuffer(int)"], ["int", "org.apache.coyote.http11.AbstractOutputBuffer.getSocketBuffer()", "public int getSocketBuffer()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.setBufferedWriteSize(int)", "public void setBufferedWriteSize(int)"], ["int", "org.apache.coyote.http11.AbstractOutputBuffer.getBufferedWriteSize()", "public int getBufferedWriteSize()"], ["int", "org.apache.coyote.http11.AbstractOutputBuffer.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.AbstractOutputBuffer.getBytesWritten()", "public long getBytesWritten()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.reset()", "public void reset()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.nextRequest()", "public void nextRequest()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.endRequest()", "public void endRequest() throws java.io.IOException"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.sendStatus()", "public void sendStatus()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.sendHeader(org.apache.tomcat.util.buf.MessageBytes, org.apache.tomcat.util.buf.MessageBytes)", "public void sendHeader(org.apache.tomcat.util.buf.MessageBytes, org.apache.tomcat.util.buf.MessageBytes)"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.endHeaders()", "public void endHeaders()"], ["void", "org.apache.coyote.http11.AbstractOutputBuffer.write(byte[])", "public void write(byte[])"], ["boolean", "org.apache.coyote.http11.AbstractOutputBuffer.hasDataToWrite()", "public boolean hasDataToWrite()"], ["org.apache.coyote.http11.Constants", "org.apache.coyote.http11.Constants()", "public org.apache.coyote.http11.Constants()"], ["org.apache.coyote.http11.HeadersTooLargeException", "org.apache.coyote.http11.HeadersTooLargeException()", "public org.apache.coyote.http11.HeadersTooLargeException()"], ["org.apache.coyote.http11.HeadersTooLargeException", "org.apache.coyote.http11.HeadersTooLargeException(java.lang.String, java.lang.Throwable)", "public org.apache.coyote.http11.HeadersTooLargeException(java.lang.String, java.lang.Throwable)"], ["org.apache.coyote.http11.HeadersTooLargeException", "org.apache.coyote.http11.HeadersTooLargeException(java.lang.String)", "public org.apache.coyote.http11.HeadersTooLargeException(java.lang.String)"], ["org.apache.coyote.http11.HeadersTooLargeException", "org.apache.coyote.http11.HeadersTooLargeException(java.lang.Throwable)", "public org.apache.coyote.http11.HeadersTooLargeException(java.lang.Throwable)"], ["org.apache.coyote.http11.Http11AprProcessor", "org.apache.coyote.http11.Http11AprProcessor(int, org.apache.tomcat.util.net.AprEndpoint, int, int, int)", "public org.apache.coyote.http11.Http11AprProcessor(int, org.apache.tomcat.util.net.AprEndpoint, int, int, int)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProcessor.getClientCertProvider()", "public java.lang.String getClientCertProvider()"], ["void", "org.apache.coyote.http11.Http11AprProcessor.setClientCertProvider(java.lang.String)", "public void setClientCertProvider(java.lang.String)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11AprProcessor.event(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState event(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["void", "org.apache.coyote.http11.Http11AprProcessor.recycleInternal()", "public void recycleInternal()"], ["void", "org.apache.coyote.http11.Http11AprProcessor.setSslSupport(org.apache.tomcat.util.net.SSLSupport)", "public void setSslSupport(org.apache.tomcat.util.net.SSLSupport)"], ["void", "org.apache.coyote.http11.Http11AprProcessor.actionInternal(org.apache.coyote.ActionCode, java.lang.Object)", "public void actionInternal(org.apache.coyote.ActionCode, java.lang.Object)"], ["void", "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.coyote.Processor<java.lang.Long>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.coyote.Processor<java.lang.Long>, boolean, boolean)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus)"], ["boolean", "org.apache.coyote.http11.Http11AprProtocol.isAprRequired()", "public boolean isAprRequired()"], ["org.apache.coyote.http11.Http11AprProtocol", "org.apache.coyote.http11.Http11AprProtocol()", "public org.apache.coyote.http11.Http11AprProtocol()"], ["boolean", "org.apache.coyote.http11.Http11AprProtocol.getUseSendfile()", "public boolean getUseSendfile()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setUseSendfile(boolean)", "public void setUseSendfile(boolean)"], ["int", "org.apache.coyote.http11.Http11AprProtocol.getPollTime()", "public int getPollTime()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setPollTime(int)", "public void setPollTime(int)"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setPollerSize(int)", "public void setPollerSize(int)"], ["int", "org.apache.coyote.http11.Http11AprProtocol.getPollerSize()", "public int getPollerSize()"], ["int", "org.apache.coyote.http11.Http11AprProtocol.getSendfileSize()", "public int getSendfileSize()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSendfileSize(int)", "public void setSendfileSize(int)"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSendfileThreadCount(int)", "public void setSendfileThreadCount(int)"], ["int", "org.apache.coyote.http11.Http11AprProtocol.getSendfileThreadCount()", "public int getSendfileThreadCount()"], ["boolean", "org.apache.coyote.http11.Http11AprProtocol.getDeferAccept()", "public boolean getDeferAccept()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setDeferAccept(boolean)", "public void setDeferAccept(boolean)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLProtocol()", "public java.lang.String getSSLProtocol()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLProtocol(java.lang.String)", "public void setSSLProtocol(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLPassword()", "public java.lang.String getSSLPassword()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLPassword(java.lang.String)", "public void setSSLPassword(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCipherSuite()", "public java.lang.String getSSLCipherSuite()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCipherSuite(java.lang.String)", "public void setSSLCipherSuite(java.lang.String)"], ["java.lang.String[]", "org.apache.coyote.http11.Http11AprProtocol.getCiphersUsed()", "public java.lang.String[] getCiphersUsed()"], ["boolean", "org.apache.coyote.http11.Http11AprProtocol.getSSLHonorCipherOrder()", "public boolean getSSLHonorCipherOrder()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLHonorCipherOrder(boolean)", "public void setSSLHonorCipherOrder(boolean)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCertificateFile()", "public java.lang.String getSSLCertificateFile()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCertificateFile(java.lang.String)", "public void setSSLCertificateFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCertificateKeyFile()", "public java.lang.String getSSLCertificateKeyFile()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCertificateKeyFile(java.lang.String)", "public void setSSLCertificateKeyFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCertificateChainFile()", "public java.lang.String getSSLCertificateChainFile()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCertificateChainFile(java.lang.String)", "public void setSSLCertificateChainFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCACertificatePath()", "public java.lang.String getSSLCACertificatePath()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCACertificatePath(java.lang.String)", "public void setSSLCACertificatePath(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCACertificateFile()", "public java.lang.String getSSLCACertificateFile()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCACertificateFile(java.lang.String)", "public void setSSLCACertificateFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCARevocationPath()", "public java.lang.String getSSLCARevocationPath()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCARevocationPath(java.lang.String)", "public void setSSLCARevocationPath(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLCARevocationFile()", "public java.lang.String getSSLCARevocationFile()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLCARevocationFile(java.lang.String)", "public void setSSLCARevocationFile(java.lang.String)"], ["java.lang.String", "org.apache.coyote.http11.Http11AprProtocol.getSSLVerifyClient()", "public java.lang.String getSSLVerifyClient()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLVerifyClient(java.lang.String)", "public void setSSLVerifyClient(java.lang.String)"], ["int", "org.apache.coyote.http11.Http11AprProtocol.getSSLVerifyDepth()", "public int getSSLVerifyDepth()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLVerifyDepth(int)", "public void setSSLVerifyDepth(int)"], ["boolean", "org.apache.coyote.http11.Http11AprProtocol.getSSLDisableCompression()", "public boolean getSSLDisableCompression()"], ["void", "org.apache.coyote.http11.Http11AprProtocol.setSSLDisableCompression(boolean)", "public void setSSLDisableCompression(boolean)"], ["void", "org.apache.coyote.http11.Http11AprProtocol.start()", "public void start() throws java.lang.Exception"], ["org.apache.coyote.http11.Http11Nio2Processor", "org.apache.coyote.http11.Http11Nio2Processor(int, org.apache.tomcat.util.net.Nio2Endpoint, int, int, int)", "public org.apache.coyote.http11.Http11Nio2Processor(int, org.apache.tomcat.util.net.Nio2Endpoint, int, int, int)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11Nio2Processor.event(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState event(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11Nio2Processor.asyncDispatch(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.coyote.http11.Http11Nio2Processor.recycleInternal()", "public void recycleInternal()"], ["void", "org.apache.coyote.http11.Http11Nio2Processor.actionInternal(org.apache.coyote.ActionCode, java.lang.Object)", "public void actionInternal(org.apache.coyote.ActionCode, java.lang.Object)"], ["void", "org.apache.coyote.http11.Http11Nio2Processor.setSslSupport(org.apache.tomcat.util.net.SSLSupport)", "public void setSslSupport(org.apache.tomcat.util.net.SSLSupport)"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.getSslImplementation()", "public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.process(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.Nio2Channel>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.Nio2Channel>, boolean, boolean)"], ["org.apache.coyote.http11.Http11Nio2Processor", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.createProcessor()", "public org.apache.coyote.http11.Http11Nio2Processor createProcessor()"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.onCreateSSLEngine(javax.net.ssl.SSLEngine)", "public void onCreateSSLEngine(javax.net.ssl.SSLEngine)"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.closeAll()", "public void closeAll()"], ["org.apache.coyote.Processor", "org.apache.coyote.http11.Http11Nio2Protocol$Http11ConnectionHandler.createProcessor()", "public org.apache.coyote.Processor createProcessor()"], ["org.apache.coyote.http11.Http11Nio2Protocol", "org.apache.coyote.http11.Http11Nio2Protocol()", "public org.apache.coyote.http11.Http11Nio2Protocol()"], ["org.apache.tomcat.util.net.Nio2Endpoint", "org.apache.coyote.http11.Http11Nio2Protocol.getEndpoint()", "public org.apache.tomcat.util.net.Nio2Endpoint getEndpoint()"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol.start()", "public void start() throws java.lang.Exception"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol.setAcceptorThreadPriority(int)", "public void setAcceptorThreadPriority(int)"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol.setPollerThreadPriority(int)", "public void setPollerThreadPriority(int)"], ["int", "org.apache.coyote.http11.Http11Nio2Protocol.getAcceptorThreadPriority()", "public int getAcceptorThreadPriority()"], ["int", "org.apache.coyote.http11.Http11Nio2Protocol.getPollerThreadPriority()", "public int getPollerThreadPriority()"], ["boolean", "org.apache.coyote.http11.Http11Nio2Protocol.getUseSendfile()", "public boolean getUseSendfile()"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol.setUseSendfile(boolean)", "public void setUseSendfile(boolean)"], ["void", "org.apache.coyote.http11.Http11Nio2Protocol.setOomParachute(int)", "public void setOomParachute(int)"], ["org.apache.coyote.http11.Http11NioProcessor", "org.apache.coyote.http11.Http11NioProcessor(int, org.apache.tomcat.util.net.NioEndpoint, int, int, int)", "public org.apache.coyote.http11.Http11NioProcessor(int, org.apache.tomcat.util.net.NioEndpoint, int, int, int)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11NioProcessor.event(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState event(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["void", "org.apache.coyote.http11.Http11NioProcessor.recycleInternal()", "public void recycleInternal()"], ["void", "org.apache.coyote.http11.Http11NioProcessor.actionInternal(org.apache.coyote.ActionCode, java.lang.Object)", "public void actionInternal(org.apache.coyote.ActionCode, java.lang.Object)"], ["void", "org.apache.coyote.http11.Http11NioProcessor.setSslSupport(org.apache.tomcat.util.net.SSLSupport)", "public void setSslSupport(org.apache.tomcat.util.net.SSLSupport)"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.getSslImplementation()", "public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()"], ["void", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.release(java.nio.channels.SocketChannel)", "public void release(java.nio.channels.SocketChannel)"], ["void", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.NioChannel>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.coyote.Processor<org.apache.tomcat.util.net.NioChannel>, boolean, boolean)"], ["org.apache.coyote.http11.Http11NioProcessor", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.createProcessor()", "public org.apache.coyote.http11.Http11NioProcessor createProcessor()"], ["void", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.onCreateSSLEngine(javax.net.ssl.SSLEngine)", "public void onCreateSSLEngine(javax.net.ssl.SSLEngine)"], ["org.apache.coyote.Processor", "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.createProcessor()", "public org.apache.coyote.Processor createProcessor()"], ["org.apache.coyote.http11.Http11NioProtocol", "org.apache.coyote.http11.Http11NioProtocol()", "public org.apache.coyote.http11.Http11NioProtocol()"], ["org.apache.tomcat.util.net.NioEndpoint", "org.apache.coyote.http11.Http11NioProtocol.getEndpoint()", "public org.apache.tomcat.util.net.NioEndpoint getEndpoint()"], ["void", "org.apache.coyote.http11.Http11NioProtocol.start()", "public void start() throws java.lang.Exception"], ["void", "org.apache.coyote.http11.Http11NioProtocol.setPollerThreadCount(int)", "public void setPollerThreadCount(int)"], ["int", "org.apache.coyote.http11.Http11NioProtocol.getPollerThreadCount()", "public int getPollerThreadCount()"], ["void", "org.apache.coyote.http11.Http11NioProtocol.setSelectorTimeout(long)", "public void setSelectorTimeout(long)"], ["long", "org.apache.coyote.http11.Http11NioProtocol.getSelectorTimeout()", "public long getSelectorTimeout()"], ["void", "org.apache.coyote.http11.Http11NioProtocol.setAcceptorThreadPriority(int)", "public void setAcceptorThreadPriority(int)"], ["void", "org.apache.coyote.http11.Http11NioProtocol.setPollerThreadPriority(int)", "public void setPollerThreadPriority(int)"], ["int", "org.apache.coyote.http11.Http11NioProtocol.getAcceptorThreadPriority()", "public int getAcceptorThreadPriority()"], ["int", "org.apache.coyote.http11.Http11NioProtocol.getPollerThreadPriority()", "public int getPollerThreadPriority()"], ["boolean", "org.apache.coyote.http11.Http11NioProtocol.getUseSendfile()", "public boolean getUseSendfile()"], ["void", "org.apache.coyote.http11.Http11NioProtocol.setUseSendfile(boolean)", "public void setUseSendfile(boolean)"], ["void", "org.apache.coyote.http11.Http11NioProtocol.setOomParachute(int)", "public void setOomParachute(int)"], ["org.apache.coyote.http11.Http11Processor", "org.apache.coyote.http11.Http11Processor(int, org.apache.tomcat.util.net.JIoEndpoint, int, int, int)", "public org.apache.coyote.http11.Http11Processor(int, org.apache.tomcat.util.net.JIoEndpoint, int, int, int)"], ["void", "org.apache.coyote.http11.Http11Processor.setSslSupport(org.apache.tomcat.util.net.SSLSupport)", "public void setSslSupport(org.apache.tomcat.util.net.SSLSupport)"], ["int", "org.apache.coyote.http11.Http11Processor.getDisableKeepAlivePercentage()", "public int getDisableKeepAlivePercentage()"], ["void", "org.apache.coyote.http11.Http11Processor.setDisableKeepAlivePercentage(int)", "public void setDisableKeepAlivePercentage(int)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11Processor.event(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState event(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["void", "org.apache.coyote.http11.Http11Processor.actionInternal(org.apache.coyote.ActionCode, java.lang.Object)", "public void actionInternal(org.apache.coyote.ActionCode, java.lang.Object)"], ["void", "org.apache.coyote.http11.Http11Processor.setSocketBuffer(int)", "public void setSocketBuffer(int)"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.getSslImplementation()", "public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.release(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.coyote.Processor<java.net.Socket>, boolean, boolean)", "public void release(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.coyote.Processor<java.net.Socket>, boolean, boolean)"], ["void", "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.beforeHandshake(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)", "public void beforeHandshake(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)"], ["org.apache.coyote.http11.Http11Protocol", "org.apache.coyote.http11.Http11Protocol()", "public org.apache.coyote.http11.Http11Protocol()"], ["int", "org.apache.coyote.http11.Http11Protocol.getDisableKeepAlivePercentage()", "public int getDisableKeepAlivePercentage()"], ["void", "org.apache.coyote.http11.Http11Protocol.setDisableKeepAlivePercentage(int)", "public void setDisableKeepAlivePercentage(int)"], ["void", "org.apache.coyote.http11.Http11Protocol.start()", "public void start() throws java.lang.Exception"], ["int", "org.apache.coyote.http11.InternalAprInputBuffer$SocketInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["org.apache.coyote.http11.InternalAprInputBuffer", "org.apache.coyote.http11.InternalAprInputBuffer(org.apache.coyote.Request, int)", "public org.apache.coyote.http11.InternalAprInputBuffer(org.apache.coyote.Request, int)"], ["void", "org.apache.coyote.http11.InternalAprInputBuffer.recycle()", "public void recycle()"], ["boolean", "org.apache.coyote.http11.InternalAprInputBuffer.parseRequestLine(boolean)", "public boolean parseRequestLine(boolean) throws java.io.IOException"], ["boolean", "org.apache.coyote.http11.InternalAprInputBuffer.parseHeaders()", "public boolean parseHeaders() throws java.io.IOException"], ["int", "org.apache.coyote.http11.InternalAprInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["int", "org.apache.coyote.http11.InternalAprOutputBuffer$SocketOutputBuffer.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.InternalAprOutputBuffer$SocketOutputBuffer.getBytesWritten()", "public long getBytesWritten()"], ["org.apache.coyote.http11.InternalAprOutputBuffer", "org.apache.coyote.http11.InternalAprOutputBuffer(org.apache.coyote.Response, int)", "public org.apache.coyote.http11.InternalAprOutputBuffer(org.apache.coyote.Response, int)"], ["void", "org.apache.coyote.http11.InternalAprOutputBuffer.init(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.AbstractEndpoint<java.lang.Long>)", "public void init(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.AbstractEndpoint<java.lang.Long>) throws java.io.IOException"], ["void", "org.apache.coyote.http11.InternalAprOutputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.InternalAprOutputBuffer.sendAck()", "public void sendAck() throws java.io.IOException"], ["int", "org.apache.coyote.http11.InternalInputBuffer$InputStreamInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["org.apache.coyote.http11.InternalInputBuffer", "org.apache.coyote.http11.InternalInputBuffer(org.apache.coyote.Request, int)", "public org.apache.coyote.http11.InternalInputBuffer(org.apache.coyote.Request, int)"], ["int", "org.apache.coyote.http11.InternalInputBuffer.available()", "public int available()"], ["boolean", "org.apache.coyote.http11.InternalInputBuffer.parseRequestLine(boolean)", "public boolean parseRequestLine(boolean) throws java.io.IOException"], ["boolean", "org.apache.coyote.http11.InternalInputBuffer.parseHeaders()", "public boolean parseHeaders() throws java.io.IOException"], ["void", "org.apache.coyote.http11.InternalInputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.InternalNio2InputBuffer$1.completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.http11.InternalNio2InputBuffer$1.failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.http11.InternalNio2InputBuffer$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.coyote.http11.InternalNio2InputBuffer$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["int", "org.apache.coyote.http11.InternalNio2InputBuffer$SocketInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["org.apache.coyote.http11.InternalNio2InputBuffer", "org.apache.coyote.http11.InternalNio2InputBuffer(org.apache.coyote.Request, int)", "public org.apache.coyote.http11.InternalNio2InputBuffer(org.apache.coyote.Request, int)"], ["void", "org.apache.coyote.http11.InternalNio2InputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.InternalNio2InputBuffer.nextRequest()", "public void nextRequest()"], ["boolean", "org.apache.coyote.http11.InternalNio2InputBuffer.isPending()", "public boolean isPending()"], ["void", "org.apache.coyote.http11.InternalNio2InputBuffer.registerReadInterest()", "public void registerReadInterest()"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$1.completed(java.lang.Integer, java.nio.ByteBuffer)", "public void completed(java.lang.Integer, java.nio.ByteBuffer)"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$1.failed(java.lang.Throwable, java.nio.ByteBuffer)", "public void failed(java.lang.Throwable, java.nio.ByteBuffer)"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$2.completed(java.lang.Long, java.nio.ByteBuffer[])", "public void completed(java.lang.Long, java.nio.ByteBuffer[])"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$2.failed(java.lang.Throwable, java.nio.ByteBuffer[])", "public void failed(java.lang.Throwable, java.nio.ByteBuffer[])"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$2.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer$2.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["int", "org.apache.coyote.http11.InternalNio2OutputBuffer$SocketOutputBuffer.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.InternalNio2OutputBuffer$SocketOutputBuffer.getBytesWritten()", "public long getBytesWritten()"], ["org.apache.coyote.http11.InternalNio2OutputBuffer", "org.apache.coyote.http11.InternalNio2OutputBuffer(org.apache.coyote.Response, int)", "public org.apache.coyote.http11.InternalNio2OutputBuffer(org.apache.coyote.Response, int)"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer.init(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>)", "public void init(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>) throws java.io.IOException"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer.nextRequest()", "public void nextRequest()"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer.sendAck()", "public void sendAck() throws java.io.IOException"], ["boolean", "org.apache.coyote.http11.InternalNio2OutputBuffer.hasDataToWrite()", "public boolean hasDataToWrite()"], ["void", "org.apache.coyote.http11.InternalNio2OutputBuffer.registerWriteInterest()", "public void registerWriteInterest()"], ["int", "org.apache.coyote.http11.InternalNioInputBuffer$SocketInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["org.apache.coyote.http11.InternalNioInputBuffer", "org.apache.coyote.http11.InternalNioInputBuffer(org.apache.coyote.Request, int)", "public org.apache.coyote.http11.InternalNioInputBuffer(org.apache.coyote.Request, int)"], ["void", "org.apache.coyote.http11.InternalNioInputBuffer.recycle()", "public void recycle()"], ["int", "org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.getBytesWritten()", "public long getBytesWritten()"], ["org.apache.coyote.http11.InternalNioOutputBuffer", "org.apache.coyote.http11.InternalNioOutputBuffer(org.apache.coyote.Response, int)", "public org.apache.coyote.http11.InternalNioOutputBuffer(org.apache.coyote.Response, int)"], ["void", "org.apache.coyote.http11.InternalNioOutputBuffer.init(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.NioChannel>)", "public void init(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.NioChannel>) throws java.io.IOException"], ["void", "org.apache.coyote.http11.InternalNioOutputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.InternalNioOutputBuffer.sendAck()", "public void sendAck() throws java.io.IOException"], ["int", "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer.getBytesWritten()", "public long getBytesWritten()"], ["org.apache.coyote.http11.InternalOutputBuffer", "org.apache.coyote.http11.InternalOutputBuffer(org.apache.coyote.Response, int)", "public org.apache.coyote.http11.InternalOutputBuffer(org.apache.coyote.Response, int)"], ["void", "org.apache.coyote.http11.InternalOutputBuffer.setSocketBuffer(int)", "public void setSocketBuffer(int)"], ["void", "org.apache.coyote.http11.InternalOutputBuffer.init(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.AbstractEndpoint<java.net.Socket>)", "public void init(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.AbstractEndpoint<java.net.Socket>) throws java.io.IOException"], ["void", "org.apache.coyote.http11.InternalOutputBuffer.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.InternalOutputBuffer.nextRequest()", "public void nextRequest()"], ["void", "org.apache.coyote.http11.InternalOutputBuffer.sendAck()", "public void sendAck() throws java.io.IOException"], ["void", "org.apache.coyote.http11.InternalOutputBuffer.realWriteBytes(byte[], int, int)", "public void realWriteBytes(byte[], int, int) throws java.io.IOException"], ["org.apache.coyote.http11.filters.BufferedInputFilter", "org.apache.coyote.http11.filters.BufferedInputFilter()", "public org.apache.coyote.http11.filters.BufferedInputFilter()"], ["void", "org.apache.coyote.http11.filters.BufferedInputFilter.setLimit(int)", "public void setLimit(int)"], ["void", "org.apache.coyote.http11.filters.BufferedInputFilter.setRequest(org.apache.coyote.Request)", "public void setRequest(org.apache.coyote.Request)"], ["int", "org.apache.coyote.http11.filters.BufferedInputFilter.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.BufferedInputFilter.setBuffer(org.apache.coyote.InputBuffer)", "public void setBuffer(org.apache.coyote.InputBuffer)"], ["void", "org.apache.coyote.http11.filters.BufferedInputFilter.recycle()", "public void recycle()"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.coyote.http11.filters.BufferedInputFilter.getEncodingName()", "public org.apache.tomcat.util.buf.ByteChunk getEncodingName()"], ["long", "org.apache.coyote.http11.filters.BufferedInputFilter.end()", "public long end() throws java.io.IOException"], ["int", "org.apache.coyote.http11.filters.BufferedInputFilter.available()", "public int available()"], ["boolean", "org.apache.coyote.http11.filters.BufferedInputFilter.isFinished()", "public boolean isFinished()"], ["org.apache.coyote.http11.filters.ChunkedInputFilter", "org.apache.coyote.http11.filters.ChunkedInputFilter(int, int, int)", "public org.apache.coyote.http11.filters.ChunkedInputFilter(int, int, int)"], ["int", "org.apache.coyote.http11.filters.ChunkedInputFilter.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.ChunkedInputFilter.setRequest(org.apache.coyote.Request)", "public void setRequest(org.apache.coyote.Request)"], ["long", "org.apache.coyote.http11.filters.ChunkedInputFilter.end()", "public long end() throws java.io.IOException"], ["int", "org.apache.coyote.http11.filters.ChunkedInputFilter.available()", "public int available()"], ["void", "org.apache.coyote.http11.filters.ChunkedInputFilter.setBuffer(org.apache.coyote.InputBuffer)", "public void setBuffer(org.apache.coyote.InputBuffer)"], ["void", "org.apache.coyote.http11.filters.ChunkedInputFilter.recycle()", "public void recycle()"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.coyote.http11.filters.ChunkedInputFilter.getEncodingName()", "public org.apache.tomcat.util.buf.ByteChunk getEncodingName()"], ["boolean", "org.apache.coyote.http11.filters.ChunkedInputFilter.isFinished()", "public boolean isFinished()"], ["org.apache.coyote.http11.filters.ChunkedOutputFilter", "org.apache.coyote.http11.filters.ChunkedOutputFilter()", "public org.apache.coyote.http11.filters.ChunkedOutputFilter()"], ["int", "org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.filters.ChunkedOutputFilter.getBytesWritten()", "public long getBytesWritten()"], ["void", "org.apache.coyote.http11.filters.ChunkedOutputFilter.setResponse(org.apache.coyote.Response)", "public void setResponse(org.apache.coyote.Response)"], ["void", "org.apache.coyote.http11.filters.ChunkedOutputFilter.setBuffer(org.apache.coyote.OutputBuffer)", "public void setBuffer(org.apache.coyote.OutputBuffer)"], ["long", "org.apache.coyote.http11.filters.ChunkedOutputFilter.end()", "public long end() throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.ChunkedOutputFilter.recycle()", "public void recycle()"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream.close()", "public void close() throws java.io.IOException"], ["org.apache.coyote.http11.filters.GzipOutputFilter", "org.apache.coyote.http11.filters.GzipOutputFilter()", "public org.apache.coyote.http11.filters.GzipOutputFilter()"], ["int", "org.apache.coyote.http11.filters.GzipOutputFilter.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.filters.GzipOutputFilter.getBytesWritten()", "public long getBytesWritten()"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter.flush()", "public void flush()"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter.setResponse(org.apache.coyote.Response)", "public void setResponse(org.apache.coyote.Response)"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter.setBuffer(org.apache.coyote.OutputBuffer)", "public void setBuffer(org.apache.coyote.OutputBuffer)"], ["long", "org.apache.coyote.http11.filters.GzipOutputFilter.end()", "public long end() throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.GzipOutputFilter.recycle()", "public void recycle()"], ["org.apache.coyote.http11.filters.IdentityInputFilter", "org.apache.coyote.http11.filters.IdentityInputFilter(int)", "public org.apache.coyote.http11.filters.IdentityInputFilter(int)"], ["int", "org.apache.coyote.http11.filters.IdentityInputFilter.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.IdentityInputFilter.setRequest(org.apache.coyote.Request)", "public void setRequest(org.apache.coyote.Request)"], ["long", "org.apache.coyote.http11.filters.IdentityInputFilter.end()", "public long end() throws java.io.IOException"], ["int", "org.apache.coyote.http11.filters.IdentityInputFilter.available()", "public int available()"], ["void", "org.apache.coyote.http11.filters.IdentityInputFilter.setBuffer(org.apache.coyote.InputBuffer)", "public void setBuffer(org.apache.coyote.InputBuffer)"], ["void", "org.apache.coyote.http11.filters.IdentityInputFilter.recycle()", "public void recycle()"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.coyote.http11.filters.IdentityInputFilter.getEncodingName()", "public org.apache.tomcat.util.buf.ByteChunk getEncodingName()"], ["boolean", "org.apache.coyote.http11.filters.IdentityInputFilter.isFinished()", "public boolean isFinished()"], ["org.apache.coyote.http11.filters.IdentityOutputFilter", "org.apache.coyote.http11.filters.IdentityOutputFilter()", "public org.apache.coyote.http11.filters.IdentityOutputFilter()"], ["int", "org.apache.coyote.http11.filters.IdentityOutputFilter.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.filters.IdentityOutputFilter.getBytesWritten()", "public long getBytesWritten()"], ["void", "org.apache.coyote.http11.filters.IdentityOutputFilter.setResponse(org.apache.coyote.Response)", "public void setResponse(org.apache.coyote.Response)"], ["void", "org.apache.coyote.http11.filters.IdentityOutputFilter.setBuffer(org.apache.coyote.OutputBuffer)", "public void setBuffer(org.apache.coyote.OutputBuffer)"], ["long", "org.apache.coyote.http11.filters.IdentityOutputFilter.end()", "public long end() throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.IdentityOutputFilter.recycle()", "public void recycle()"], ["org.apache.coyote.http11.filters.SavedRequestInputFilter", "org.apache.coyote.http11.filters.SavedRequestInputFilter(org.apache.tomcat.util.buf.ByteChunk)", "public org.apache.coyote.http11.filters.SavedRequestInputFilter(org.apache.tomcat.util.buf.ByteChunk)"], ["int", "org.apache.coyote.http11.filters.SavedRequestInputFilter.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.SavedRequestInputFilter.setRequest(org.apache.coyote.Request)", "public void setRequest(org.apache.coyote.Request)"], ["void", "org.apache.coyote.http11.filters.SavedRequestInputFilter.recycle()", "public void recycle()"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.coyote.http11.filters.SavedRequestInputFilter.getEncodingName()", "public org.apache.tomcat.util.buf.ByteChunk getEncodingName()"], ["void", "org.apache.coyote.http11.filters.SavedRequestInputFilter.setBuffer(org.apache.coyote.InputBuffer)", "public void setBuffer(org.apache.coyote.InputBuffer)"], ["int", "org.apache.coyote.http11.filters.SavedRequestInputFilter.available()", "public int available()"], ["long", "org.apache.coyote.http11.filters.SavedRequestInputFilter.end()", "public long end() throws java.io.IOException"], ["boolean", "org.apache.coyote.http11.filters.SavedRequestInputFilter.isFinished()", "public boolean isFinished()"], ["org.apache.coyote.http11.filters.VoidInputFilter", "org.apache.coyote.http11.filters.VoidInputFilter()", "public org.apache.coyote.http11.filters.VoidInputFilter()"], ["int", "org.apache.coyote.http11.filters.VoidInputFilter.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["void", "org.apache.coyote.http11.filters.VoidInputFilter.setRequest(org.apache.coyote.Request)", "public void setRequest(org.apache.coyote.Request)"], ["void", "org.apache.coyote.http11.filters.VoidInputFilter.setBuffer(org.apache.coyote.InputBuffer)", "public void setBuffer(org.apache.coyote.InputBuffer)"], ["void", "org.apache.coyote.http11.filters.VoidInputFilter.recycle()", "public void recycle()"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.coyote.http11.filters.VoidInputFilter.getEncodingName()", "public org.apache.tomcat.util.buf.ByteChunk getEncodingName()"], ["long", "org.apache.coyote.http11.filters.VoidInputFilter.end()", "public long end() throws java.io.IOException"], ["int", "org.apache.coyote.http11.filters.VoidInputFilter.available()", "public int available()"], ["boolean", "org.apache.coyote.http11.filters.VoidInputFilter.isFinished()", "public boolean isFinished()"], ["org.apache.coyote.http11.filters.VoidOutputFilter", "org.apache.coyote.http11.filters.VoidOutputFilter()", "public org.apache.coyote.http11.filters.VoidOutputFilter()"], ["int", "org.apache.coyote.http11.filters.VoidOutputFilter.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.http11.filters.VoidOutputFilter.getBytesWritten()", "public long getBytesWritten()"], ["void", "org.apache.coyote.http11.filters.VoidOutputFilter.setResponse(org.apache.coyote.Response)", "public void setResponse(org.apache.coyote.Response)"], ["void", "org.apache.coyote.http11.filters.VoidOutputFilter.setBuffer(org.apache.coyote.OutputBuffer)", "public void setBuffer(org.apache.coyote.OutputBuffer)"], ["void", "org.apache.coyote.http11.filters.VoidOutputFilter.recycle()", "public void recycle()"], ["long", "org.apache.coyote.http11.filters.VoidOutputFilter.end()", "public long end() throws java.io.IOException"], ["void", "org.apache.coyote.http11.upgrade.AbstractProcessor.close()", "public void close() throws java.lang.Exception"], ["javax.servlet.ServletInputStream", "org.apache.coyote.http11.upgrade.AbstractProcessor.getInputStream()", "public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException"], ["javax.servlet.ServletOutputStream", "org.apache.coyote.http11.upgrade.AbstractProcessor.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["boolean", "org.apache.coyote.http11.upgrade.AbstractProcessor.isUpgrade()", "public final boolean isUpgrade()"], ["javax.servlet.http.HttpUpgradeHandler", "org.apache.coyote.http11.upgrade.AbstractProcessor.getHttpUpgradeHandler()", "public javax.servlet.http.HttpUpgradeHandler getHttpUpgradeHandler()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(org.apache.tomcat.util.net.SocketStatus)", "public final org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["void", "org.apache.coyote.http11.upgrade.AbstractProcessor.recycle(boolean)", "public final void recycle(boolean)"], ["java.util.concurrent.Executor", "org.apache.coyote.http11.upgrade.AbstractProcessor.getExecutor()", "public final java.util.concurrent.Executor getExecutor()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.upgrade.AbstractProcessor.process(org.apache.tomcat.util.net.SocketWrapper<S>)", "public final org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<S>) throws java.io.IOException"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.upgrade.AbstractProcessor.event(org.apache.tomcat.util.net.SocketStatus)", "public final org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState event(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.upgrade.AbstractProcessor.asyncDispatch(org.apache.tomcat.util.net.SocketStatus)", "public final org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.coyote.http11.upgrade.AbstractProcessor.errorDispatch()", "public void errorDispatch()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.http11.upgrade.AbstractProcessor.asyncPostProcess()", "public final org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncPostProcess()"], ["boolean", "org.apache.coyote.http11.upgrade.AbstractProcessor.isComet()", "public final boolean isComet()"], ["boolean", "org.apache.coyote.http11.upgrade.AbstractProcessor.isAsync()", "public final boolean isAsync()"], ["org.apache.coyote.Request", "org.apache.coyote.http11.upgrade.AbstractProcessor.getRequest()", "public final org.apache.coyote.Request getRequest()"], ["void", "org.apache.coyote.http11.upgrade.AbstractProcessor.setSslSupport(org.apache.tomcat.util.net.SSLSupport)", "public final void setSslSupport(org.apache.tomcat.util.net.SSLSupport)"], ["org.apache.coyote.http11.upgrade.AbstractServletInputStream", "org.apache.coyote.http11.upgrade.AbstractServletInputStream()", "public org.apache.coyote.http11.upgrade.AbstractServletInputStream()"], ["boolean", "org.apache.coyote.http11.upgrade.AbstractServletInputStream.isFinished()", "public final boolean isFinished()"], ["boolean", "org.apache.coyote.http11.upgrade.AbstractServletInputStream.isReady()", "public final boolean isReady()"], ["void", "org.apache.coyote.http11.upgrade.AbstractServletInputStream.setReadListener(javax.servlet.ReadListener)", "public final void setReadListener(javax.servlet.ReadListener)"], ["int", "org.apache.coyote.http11.upgrade.AbstractServletInputStream.read()", "public final int read() throws java.io.IOException"], ["int", "org.apache.coyote.http11.upgrade.AbstractServletInputStream.readLine(byte[], int, int)", "public final int readLine(byte[], int, int) throws java.io.IOException"], ["int", "org.apache.coyote.http11.upgrade.AbstractServletInputStream.read(byte[], int, int)", "public final int read(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.coyote.http11.upgrade.AbstractServletInputStream.close()", "public void close() throws java.io.IOException"], ["org.apache.coyote.http11.upgrade.AbstractServletOutputStream", "org.apache.coyote.http11.upgrade.AbstractServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<S>, int)", "public org.apache.coyote.http11.upgrade.AbstractServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<S>, int)"], ["boolean", "org.apache.coyote.http11.upgrade.AbstractServletOutputStream.isReady()", "public final boolean isReady()"], ["void", "org.apache.coyote.http11.upgrade.AbstractServletOutputStream.setWriteListener(javax.servlet.WriteListener)", "public final void setWriteListener(javax.servlet.WriteListener)"], ["void", "org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.coyote.http11.upgrade.AbstractServletOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.coyote.http11.upgrade.AbstractServletOutputStream.close()", "public void close() throws java.io.IOException"], ["org.apache.coyote.http11.upgrade.AprProcessor", "org.apache.coyote.http11.upgrade.AprProcessor(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, javax.servlet.http.HttpUpgradeHandler, org.apache.tomcat.util.net.AprEndpoint, int)", "public org.apache.coyote.http11.upgrade.AprProcessor(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, javax.servlet.http.HttpUpgradeHandler, org.apache.tomcat.util.net.AprEndpoint, int)"], ["org.apache.coyote.http11.upgrade.AprServletInputStream", "org.apache.coyote.http11.upgrade.AprServletInputStream(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>)", "public org.apache.coyote.http11.upgrade.AprServletInputStream(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>)"], ["org.apache.coyote.http11.upgrade.AprServletOutputStream", "org.apache.coyote.http11.upgrade.AprServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, int, org.apache.tomcat.util.net.AprEndpoint)", "public org.apache.coyote.http11.upgrade.AprServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, int, org.apache.tomcat.util.net.AprEndpoint)"], ["org.apache.coyote.http11.upgrade.BioProcessor", "org.apache.coyote.http11.upgrade.BioProcessor(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, javax.servlet.http.HttpUpgradeHandler, int)", "public org.apache.coyote.http11.upgrade.BioProcessor(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, javax.servlet.http.HttpUpgradeHandler, int) throws java.io.IOException"], ["org.apache.coyote.http11.upgrade.BioServletInputStream", "org.apache.coyote.http11.upgrade.BioServletInputStream(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)", "public org.apache.coyote.http11.upgrade.BioServletInputStream(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>) throws java.io.IOException"], ["org.apache.coyote.http11.upgrade.BioServletOutputStream", "org.apache.coyote.http11.upgrade.BioServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, int)", "public org.apache.coyote.http11.upgrade.BioServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, int) throws java.io.IOException"], ["org.apache.coyote.http11.upgrade.Constants", "org.apache.coyote.http11.upgrade.Constants()", "public org.apache.coyote.http11.upgrade.Constants()"], ["org.apache.coyote.http11.upgrade.Nio2Processor", "org.apache.coyote.http11.upgrade.Nio2Processor(org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, javax.servlet.http.HttpUpgradeHandler, int)", "public org.apache.coyote.http11.upgrade.Nio2Processor(org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, javax.servlet.http.HttpUpgradeHandler, int)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletInputStream$1.completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletInputStream$1.failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletInputStream$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletInputStream$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["org.apache.coyote.http11.upgrade.Nio2ServletInputStream", "org.apache.coyote.http11.upgrade.Nio2ServletInputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>)", "public org.apache.coyote.http11.upgrade.Nio2ServletInputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletOutputStream$1.completed(java.lang.Integer, java.nio.ByteBuffer)", "public void completed(java.lang.Integer, java.nio.ByteBuffer)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletOutputStream$1.failed(java.lang.Throwable, java.nio.ByteBuffer)", "public void failed(java.lang.Throwable, java.nio.ByteBuffer)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletOutputStream$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.coyote.http11.upgrade.Nio2ServletOutputStream$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["org.apache.coyote.http11.upgrade.Nio2ServletOutputStream", "org.apache.coyote.http11.upgrade.Nio2ServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, int, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>)", "public org.apache.coyote.http11.upgrade.Nio2ServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, int, org.apache.tomcat.util.net.AbstractEndpoint<org.apache.tomcat.util.net.Nio2Channel>)"], ["org.apache.coyote.http11.upgrade.NioProcessor", "org.apache.coyote.http11.upgrade.NioProcessor(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, javax.servlet.http.HttpUpgradeHandler, org.apache.tomcat.util.net.NioSelectorPool, int)", "public org.apache.coyote.http11.upgrade.NioProcessor(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, javax.servlet.http.HttpUpgradeHandler, org.apache.tomcat.util.net.NioSelectorPool, int)"], ["org.apache.coyote.http11.upgrade.NioServletInputStream", "org.apache.coyote.http11.upgrade.NioServletInputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.NioSelectorPool)", "public org.apache.coyote.http11.upgrade.NioServletInputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.NioSelectorPool)"], ["org.apache.coyote.http11.upgrade.NioServletOutputStream", "org.apache.coyote.http11.upgrade.NioServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, int, org.apache.tomcat.util.net.NioSelectorPool)", "public org.apache.coyote.http11.upgrade.NioServletOutputStream(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, int, org.apache.tomcat.util.net.NioSelectorPool)"], ["void", "org.apache.coyote.spdy.SpdyAprNpnHandler$1.onStream(org.apache.tomcat.spdy.SpdyConnection, org.apache.tomcat.spdy.SpdyStream)", "public void onStream(org.apache.tomcat.spdy.SpdyConnection, org.apache.tomcat.spdy.SpdyStream) throws java.io.IOException"], ["org.apache.coyote.spdy.SpdyAprNpnHandler", "org.apache.coyote.spdy.SpdyAprNpnHandler()", "public org.apache.coyote.spdy.SpdyAprNpnHandler()"], ["void", "org.apache.coyote.spdy.SpdyAprNpnHandler.init(org.apache.tomcat.util.net.AbstractEndpoint<java.lang.Long>, long, org.apache.coyote.Adapter)", "public void init(org.apache.tomcat.util.net.AbstractEndpoint<java.lang.Long>, long, org.apache.coyote.Adapter)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.spdy.SpdyAprNpnHandler.process(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.coyote.spdy.SpdyAprNpnHandler.onCreateEngine(java.lang.Object)", "public void onCreateEngine(java.lang.Object)"], ["int", "org.apache.coyote.spdy.SpdyProcessor$LiteInputBuffer.doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request)", "public int doRead(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Request) throws java.io.IOException"], ["int", "org.apache.coyote.spdy.SpdyProcessor$LiteOutputBuffer.doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response)", "public int doWrite(org.apache.tomcat.util.buf.ByteChunk, org.apache.coyote.Response) throws java.io.IOException"], ["long", "org.apache.coyote.spdy.SpdyProcessor$LiteOutputBuffer.getBytesWritten()", "public long getBytesWritten()"], ["org.apache.coyote.spdy.SpdyProcessor", "org.apache.coyote.spdy.SpdyProcessor(org.apache.tomcat.spdy.SpdyConnection, org.apache.tomcat.util.net.AbstractEndpoint<S>)", "public org.apache.coyote.spdy.SpdyProcessor(org.apache.tomcat.spdy.SpdyConnection, org.apache.tomcat.util.net.AbstractEndpoint<S>)"], ["void", "org.apache.coyote.spdy.SpdyProcessor.run()", "public void run()"], ["void", "org.apache.coyote.spdy.SpdyProcessor.action(org.apache.coyote.ActionCode, java.lang.Object)", "public void action(org.apache.coyote.ActionCode, java.lang.Object)"], ["boolean", "org.apache.coyote.spdy.SpdyProcessor.isComet()", "public boolean isComet()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.spdy.SpdyProcessor.process(org.apache.tomcat.util.net.SocketWrapper<S>)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<S>) throws java.io.IOException"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.spdy.SpdyProcessor.event(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState event(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.spdy.SpdyProcessor.asyncDispatch(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"], ["boolean", "org.apache.coyote.spdy.SpdyProcessor.isUpgrade()", "public boolean isUpgrade()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.spdy.SpdyProcessor.upgradeDispatch(org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketStatus) throws java.io.IOException"], ["void", "org.apache.coyote.spdy.SpdyProcessor.onSynStream(org.apache.tomcat.spdy.SpdyStream)", "public void onSynStream(org.apache.tomcat.spdy.SpdyStream) throws java.io.IOException"], ["void", "org.apache.coyote.spdy.SpdyProcessor.recycle(boolean)", "public void recycle(boolean)"], ["void", "org.apache.coyote.spdy.SpdyProcessor.setSslSupport(org.apache.tomcat.util.net.SSLSupport)", "public void setSslSupport(org.apache.tomcat.util.net.SSLSupport)"], ["javax.servlet.http.HttpUpgradeHandler", "org.apache.coyote.spdy.SpdyProcessor.getHttpUpgradeHandler()", "public javax.servlet.http.HttpUpgradeHandler getHttpUpgradeHandler()"], ["void", "org.apache.coyote.spdy.SpdyProxyProtocol$1.onStream(org.apache.tomcat.spdy.SpdyConnection, org.apache.tomcat.spdy.SpdyStream)", "public void onStream(org.apache.tomcat.spdy.SpdyConnection, org.apache.tomcat.spdy.SpdyStream) throws java.io.IOException"], ["org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler", "org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler(org.apache.coyote.spdy.SpdyProxyProtocol)", "public org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler(org.apache.coyote.spdy.SpdyProxyProtocol)"], ["java.lang.Object", "org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler.getGlobal()", "public java.lang.Object getGlobal()"], ["void", "org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler.recycle()", "public void recycle()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler.process(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus)"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler.getSslImplementation()", "public org.apache.tomcat.util.net.SSLImplementation getSslImplementation()"], ["void", "org.apache.coyote.spdy.SpdyProxyProtocol$TomcatJioHandler.beforeHandshake(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)", "public void beforeHandshake(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)"], ["org.apache.coyote.spdy.SpdyProxyProtocol", "org.apache.coyote.spdy.SpdyProxyProtocol()", "public org.apache.coyote.spdy.SpdyProxyProtocol()"], ["void", "org.apache.coyote.spdy.SpdyProxyProtocol.start()", "public void start() throws java.lang.Exception"], ["boolean", "org.apache.coyote.spdy.SpdyProxyProtocol.isCompress()", "public boolean isCompress()"], ["void", "org.apache.coyote.spdy.SpdyProxyProtocol.setCompress(boolean)", "public void setCompress(boolean)"], ["org.apache.naming.Constants", "org.apache.naming.Constants()", "public org.apache.naming.Constants()"], ["org.apache.naming.ContextAccessController", "org.apache.naming.ContextAccessController()", "public org.apache.naming.ContextAccessController()"], ["void", "org.apache.naming.ContextAccessController.setSecurityToken(java.lang.Object, java.lang.Object)", "public static void setSecurityToken(java.lang.Object, java.lang.Object)"], ["void", "org.apache.naming.ContextAccessController.unsetSecurityToken(java.lang.Object, java.lang.Object)", "public static void unsetSecurityToken(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.naming.ContextAccessController.checkSecurityToken(java.lang.Object, java.lang.Object)", "public static boolean checkSecurityToken(java.lang.Object, java.lang.Object)"], ["void", "org.apache.naming.ContextAccessController.setWritable(java.lang.Object, java.lang.Object)", "public static void setWritable(java.lang.Object, java.lang.Object)"], ["void", "org.apache.naming.ContextAccessController.setReadOnly(java.lang.Object)", "public static void setReadOnly(java.lang.Object)"], ["boolean", "org.apache.naming.ContextAccessController.isWritable(java.lang.Object)", "public static boolean isWritable(java.lang.Object)"], ["org.apache.naming.ContextBindings", "org.apache.naming.ContextBindings()", "public org.apache.naming.ContextBindings()"], ["void", "org.apache.naming.ContextBindings.bindContext(java.lang.Object, javax.naming.Context)", "public static void bindContext(java.lang.Object, javax.naming.Context)"], ["void", "org.apache.naming.ContextBindings.bindContext(java.lang.Object, javax.naming.Context, java.lang.Object)", "public static void bindContext(java.lang.Object, javax.naming.Context, java.lang.Object)"], ["void", "org.apache.naming.ContextBindings.unbindContext(java.lang.Object, java.lang.Object)", "public static void unbindContext(java.lang.Object, java.lang.Object)"], ["void", "org.apache.naming.ContextBindings.bindThread(java.lang.Object, java.lang.Object)", "public static void bindThread(java.lang.Object, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.ContextBindings.unbindThread(java.lang.Object, java.lang.Object)", "public static void unbindThread(java.lang.Object, java.lang.Object)"], ["javax.naming.Context", "org.apache.naming.ContextBindings.getThread()", "public static javax.naming.Context getThread() throws javax.naming.NamingException"], ["boolean", "org.apache.naming.ContextBindings.isThreadBound()", "public static boolean isThreadBound()"], ["void", "org.apache.naming.ContextBindings.bindClassLoader(java.lang.Object, java.lang.Object, java.lang.ClassLoader)", "public static void bindClassLoader(java.lang.Object, java.lang.Object, java.lang.ClassLoader) throws javax.naming.NamingException"], ["void", "org.apache.naming.ContextBindings.unbindClassLoader(java.lang.Object, java.lang.Object, java.lang.ClassLoader)", "public static void unbindClassLoader(java.lang.Object, java.lang.Object, java.lang.ClassLoader)"], ["javax.naming.Context", "org.apache.naming.ContextBindings.getClassLoader()", "public static javax.naming.Context getClassLoader() throws javax.naming.NamingException"], ["boolean", "org.apache.naming.ContextBindings.isClassLoaderBound()", "public static boolean isClassLoaderBound()"], ["org.apache.naming.EjbRef", "org.apache.naming.EjbRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.naming.EjbRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.naming.EjbRef", "org.apache.naming.EjbRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.naming.EjbRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.naming.EjbRef.getFactoryClassName()", "public java.lang.String getFactoryClassName()"], ["org.apache.naming.HandlerRef", "org.apache.naming.HandlerRef(java.lang.String, java.lang.String)", "public org.apache.naming.HandlerRef(java.lang.String, java.lang.String)"], ["org.apache.naming.HandlerRef", "org.apache.naming.HandlerRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.naming.HandlerRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.naming.HandlerRef.getFactoryClassName()", "public java.lang.String getFactoryClassName()"], ["java.lang.String", "org.apache.naming.HandlerRef.toString()", "public java.lang.String toString()"], ["org.apache.naming.JndiPermission", "org.apache.naming.JndiPermission(java.lang.String)", "public org.apache.naming.JndiPermission(java.lang.String)"], ["org.apache.naming.JndiPermission", "org.apache.naming.JndiPermission(java.lang.String, java.lang.String)", "public org.apache.naming.JndiPermission(java.lang.String, java.lang.String)"], ["org.apache.naming.NameParserImpl", "org.apache.naming.NameParserImpl()", "public org.apache.naming.NameParserImpl()"], ["javax.naming.Name", "org.apache.naming.NameParserImpl.parse(java.lang.String)", "public javax.naming.Name parse(java.lang.String) throws javax.naming.NamingException"], ["org.apache.naming.NamingContext", "org.apache.naming.NamingContext(java.util.Hashtable<java.lang.String, java.lang.Object>, java.lang.String)", "public org.apache.naming.NamingContext(java.util.Hashtable<java.lang.String, java.lang.Object>, java.lang.String) throws javax.naming.NamingException"], ["org.apache.naming.NamingContext", "org.apache.naming.NamingContext(java.util.Hashtable<java.lang.String, java.lang.Object>, java.lang.String, java.util.HashMap<java.lang.String, org.apache.naming.NamingEntry>)", "public org.apache.naming.NamingContext(java.util.Hashtable<java.lang.String, java.lang.Object>, java.lang.String, java.util.HashMap<java.lang.String, org.apache.naming.NamingEntry>) throws javax.naming.NamingException"], ["boolean", "org.apache.naming.NamingContext.getExceptionOnFailedWrite()", "public boolean getExceptionOnFailedWrite()"], ["void", "org.apache.naming.NamingContext.setExceptionOnFailedWrite(boolean)", "public void setExceptionOnFailedWrite(boolean)"], ["java.lang.Object", "org.apache.naming.NamingContext.lookup(javax.naming.Name)", "public java.lang.Object lookup(javax.naming.Name) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.NamingContext.lookup(java.lang.String)", "public java.lang.Object lookup(java.lang.String) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.bind(javax.naming.Name, java.lang.Object)", "public void bind(javax.naming.Name, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.bind(java.lang.String, java.lang.Object)", "public void bind(java.lang.String, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.rebind(javax.naming.Name, java.lang.Object)", "public void rebind(javax.naming.Name, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.rebind(java.lang.String, java.lang.Object)", "public void rebind(java.lang.String, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.unbind(javax.naming.Name)", "public void unbind(javax.naming.Name) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.unbind(java.lang.String)", "public void unbind(java.lang.String) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.rename(javax.naming.Name, javax.naming.Name)", "public void rename(javax.naming.Name, javax.naming.Name) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.NameClassPair>", "org.apache.naming.NamingContext.list(javax.naming.Name)", "public javax.naming.NamingEnumeration<javax.naming.NameClassPair> list(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.NameClassPair>", "org.apache.naming.NamingContext.list(java.lang.String)", "public javax.naming.NamingEnumeration<javax.naming.NameClassPair> list(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.Binding>", "org.apache.naming.NamingContext.listBindings(javax.naming.Name)", "public javax.naming.NamingEnumeration<javax.naming.Binding> listBindings(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.Binding>", "org.apache.naming.NamingContext.listBindings(java.lang.String)", "public javax.naming.NamingEnumeration<javax.naming.Binding> listBindings(java.lang.String) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.destroySubcontext(javax.naming.Name)", "public void destroySubcontext(javax.naming.Name) throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.destroySubcontext(java.lang.String)", "public void destroySubcontext(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.Context", "org.apache.naming.NamingContext.createSubcontext(javax.naming.Name)", "public javax.naming.Context createSubcontext(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.Context", "org.apache.naming.NamingContext.createSubcontext(java.lang.String)", "public javax.naming.Context createSubcontext(java.lang.String) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.NamingContext.lookupLink(javax.naming.Name)", "public java.lang.Object lookupLink(javax.naming.Name) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.NamingContext.lookupLink(java.lang.String)", "public java.lang.Object lookupLink(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.NameParser", "org.apache.naming.NamingContext.getNameParser(javax.naming.Name)", "public javax.naming.NameParser getNameParser(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.NameParser", "org.apache.naming.NamingContext.getNameParser(java.lang.String)", "public javax.naming.NameParser getNameParser(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.Name", "org.apache.naming.NamingContext.composeName(javax.naming.Name, javax.naming.Name)", "public javax.naming.Name composeName(javax.naming.Name, javax.naming.Name) throws javax.naming.NamingException"], ["java.lang.String", "org.apache.naming.NamingContext.composeName(java.lang.String, java.lang.String)", "public java.lang.String composeName(java.lang.String, java.lang.String) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.NamingContext.addToEnvironment(java.lang.String, java.lang.Object)", "public java.lang.Object addToEnvironment(java.lang.String, java.lang.Object) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.NamingContext.removeFromEnvironment(java.lang.String)", "public java.lang.Object removeFromEnvironment(java.lang.String) throws javax.naming.NamingException"], ["java.util.Hashtable<?, ?>", "org.apache.naming.NamingContext.getEnvironment()", "public java.util.Hashtable<?, ?> getEnvironment() throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContext.close()", "public void close() throws javax.naming.NamingException"], ["java.lang.String", "org.apache.naming.NamingContext.getNameInNamespace()", "public java.lang.String getNameInNamespace() throws javax.naming.NamingException"], ["org.apache.naming.NamingContextBindingsEnumeration", "org.apache.naming.NamingContextBindingsEnumeration(java.util.Iterator<org.apache.naming.NamingEntry>, javax.naming.Context)", "public org.apache.naming.NamingContextBindingsEnumeration(java.util.Iterator<org.apache.naming.NamingEntry>, javax.naming.Context)"], ["javax.naming.Binding", "org.apache.naming.NamingContextBindingsEnumeration.next()", "public javax.naming.Binding next() throws javax.naming.NamingException"], ["boolean", "org.apache.naming.NamingContextBindingsEnumeration.hasMore()", "public boolean hasMore() throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContextBindingsEnumeration.close()", "public void close() throws javax.naming.NamingException"], ["boolean", "org.apache.naming.NamingContextBindingsEnumeration.hasMoreElements()", "public boolean hasMoreElements()"], ["javax.naming.Binding", "org.apache.naming.NamingContextBindingsEnumeration.nextElement()", "public javax.naming.Binding nextElement()"], ["java.lang.Object", "org.apache.naming.NamingContextBindingsEnumeration.next()", "public java.lang.Object next() throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.NamingContextBindingsEnumeration.nextElement()", "public java.lang.Object nextElement()"], ["org.apache.naming.NamingContextEnumeration", "org.apache.naming.NamingContextEnumeration(java.util.Iterator<org.apache.naming.NamingEntry>)", "public org.apache.naming.NamingContextEnumeration(java.util.Iterator<org.apache.naming.NamingEntry>)"], ["javax.naming.NameClassPair", "org.apache.naming.NamingContextEnumeration.next()", "public javax.naming.NameClassPair next() throws javax.naming.NamingException"], ["boolean", "org.apache.naming.NamingContextEnumeration.hasMore()", "public boolean hasMore() throws javax.naming.NamingException"], ["void", "org.apache.naming.NamingContextEnumeration.close()", "public void close() throws javax.naming.NamingException"], ["boolean", "org.apache.naming.NamingContextEnumeration.hasMoreElements()", "public boolean hasMoreElements()"], ["javax.naming.NameClassPair", "org.apache.naming.NamingContextEnumeration.nextElement()", "public javax.naming.NameClassPair nextElement()"], ["java.lang.Object", "org.apache.naming.NamingContextEnumeration.next()", "public java.lang.Object next() throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.NamingContextEnumeration.nextElement()", "public java.lang.Object nextElement()"], ["org.apache.naming.NamingEntry", "org.apache.naming.NamingEntry(java.lang.String, java.lang.Object, int)", "public org.apache.naming.NamingEntry(java.lang.String, java.lang.Object, int)"], ["boolean", "org.apache.naming.NamingEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.naming.NamingEntry.hashCode()", "public int hashCode()"], ["org.apache.naming.ResourceEnvRef", "org.apache.naming.ResourceEnvRef(java.lang.String)", "public org.apache.naming.ResourceEnvRef(java.lang.String)"], ["java.lang.String", "org.apache.naming.ResourceEnvRef.getFactoryClassName()", "public java.lang.String getFactoryClassName()"], ["org.apache.naming.ResourceLinkRef", "org.apache.naming.ResourceLinkRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.naming.ResourceLinkRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.naming.ResourceLinkRef.getFactoryClassName()", "public java.lang.String getFactoryClassName()"], ["org.apache.naming.ResourceRef", "org.apache.naming.ResourceRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)", "public org.apache.naming.ResourceRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)"], ["org.apache.naming.ResourceRef", "org.apache.naming.ResourceRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String)", "public org.apache.naming.ResourceRef(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.naming.ResourceRef.getFactoryClassName()", "public java.lang.String getFactoryClassName()"], ["java.lang.String", "org.apache.naming.ResourceRef.toString()", "public java.lang.String toString()"], ["org.apache.naming.SelectorContext", "org.apache.naming.SelectorContext(java.util.Hashtable<java.lang.String, java.lang.Object>)", "public org.apache.naming.SelectorContext(java.util.Hashtable<java.lang.String, java.lang.Object>)"], ["org.apache.naming.SelectorContext", "org.apache.naming.SelectorContext(java.util.Hashtable<java.lang.String, java.lang.Object>, boolean)", "public org.apache.naming.SelectorContext(java.util.Hashtable<java.lang.String, java.lang.Object>, boolean)"], ["java.lang.Object", "org.apache.naming.SelectorContext.lookup(javax.naming.Name)", "public java.lang.Object lookup(javax.naming.Name) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.SelectorContext.lookup(java.lang.String)", "public java.lang.Object lookup(java.lang.String) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.bind(javax.naming.Name, java.lang.Object)", "public void bind(javax.naming.Name, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.bind(java.lang.String, java.lang.Object)", "public void bind(java.lang.String, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.rebind(javax.naming.Name, java.lang.Object)", "public void rebind(javax.naming.Name, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.rebind(java.lang.String, java.lang.Object)", "public void rebind(java.lang.String, java.lang.Object) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.unbind(javax.naming.Name)", "public void unbind(javax.naming.Name) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.unbind(java.lang.String)", "public void unbind(java.lang.String) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.rename(javax.naming.Name, javax.naming.Name)", "public void rename(javax.naming.Name, javax.naming.Name) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.NameClassPair>", "org.apache.naming.SelectorContext.list(javax.naming.Name)", "public javax.naming.NamingEnumeration<javax.naming.NameClassPair> list(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.NameClassPair>", "org.apache.naming.SelectorContext.list(java.lang.String)", "public javax.naming.NamingEnumeration<javax.naming.NameClassPair> list(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.Binding>", "org.apache.naming.SelectorContext.listBindings(javax.naming.Name)", "public javax.naming.NamingEnumeration<javax.naming.Binding> listBindings(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.NamingEnumeration<javax.naming.Binding>", "org.apache.naming.SelectorContext.listBindings(java.lang.String)", "public javax.naming.NamingEnumeration<javax.naming.Binding> listBindings(java.lang.String) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.destroySubcontext(javax.naming.Name)", "public void destroySubcontext(javax.naming.Name) throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.destroySubcontext(java.lang.String)", "public void destroySubcontext(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.Context", "org.apache.naming.SelectorContext.createSubcontext(javax.naming.Name)", "public javax.naming.Context createSubcontext(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.Context", "org.apache.naming.SelectorContext.createSubcontext(java.lang.String)", "public javax.naming.Context createSubcontext(java.lang.String) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.SelectorContext.lookupLink(javax.naming.Name)", "public java.lang.Object lookupLink(javax.naming.Name) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.SelectorContext.lookupLink(java.lang.String)", "public java.lang.Object lookupLink(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.NameParser", "org.apache.naming.SelectorContext.getNameParser(javax.naming.Name)", "public javax.naming.NameParser getNameParser(javax.naming.Name) throws javax.naming.NamingException"], ["javax.naming.NameParser", "org.apache.naming.SelectorContext.getNameParser(java.lang.String)", "public javax.naming.NameParser getNameParser(java.lang.String) throws javax.naming.NamingException"], ["javax.naming.Name", "org.apache.naming.SelectorContext.composeName(javax.naming.Name, javax.naming.Name)", "public javax.naming.Name composeName(javax.naming.Name, javax.naming.Name) throws javax.naming.NamingException"], ["java.lang.String", "org.apache.naming.SelectorContext.composeName(java.lang.String, java.lang.String)", "public java.lang.String composeName(java.lang.String, java.lang.String) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.SelectorContext.addToEnvironment(java.lang.String, java.lang.Object)", "public java.lang.Object addToEnvironment(java.lang.String, java.lang.Object) throws javax.naming.NamingException"], ["java.lang.Object", "org.apache.naming.SelectorContext.removeFromEnvironment(java.lang.String)", "public java.lang.Object removeFromEnvironment(java.lang.String) throws javax.naming.NamingException"], ["java.util.Hashtable<?, ?>", "org.apache.naming.SelectorContext.getEnvironment()", "public java.util.Hashtable<?, ?> getEnvironment() throws javax.naming.NamingException"], ["void", "org.apache.naming.SelectorContext.close()", "public void close() throws javax.naming.NamingException"], ["java.lang.String", "org.apache.naming.SelectorContext.getNameInNamespace()", "public java.lang.String getNameInNamespace() throws javax.naming.NamingException"], ["org.apache.naming.ServiceRef", "org.apache.naming.ServiceRef(java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String)", "public org.apache.naming.ServiceRef(java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String)"], ["org.apache.naming.ServiceRef", "org.apache.naming.ServiceRef(java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.naming.ServiceRef(java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.naming.HandlerRef", "org.apache.naming.ServiceRef.getHandler()", "public org.apache.naming.HandlerRef getHandler()"], ["int", "org.apache.naming.ServiceRef.getHandlersSize()", "public int getHandlersSize()"], ["void", "org.apache.naming.ServiceRef.addHandler(org.apache.naming.HandlerRef)", "public void addHandler(org.apache.naming.HandlerRef)"], ["java.lang.String", "org.apache.naming.ServiceRef.getFactoryClassName()", "public java.lang.String getFactoryClassName()"], ["java.lang.String", "org.apache.naming.ServiceRef.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.naming.StringManager.getString(java.lang.String)", "public java.lang.String getString(java.lang.String)"], ["java.lang.String", "org.apache.naming.StringManager.getString(java.lang.String, java.lang.Object...)", "public java.lang.String getString(java.lang.String, java.lang.Object...)"], ["synchronized", "org.apache.naming.StringManager.org.apache.naming.StringManager getManager(java.lang.String)", "public static final synchronized org.apache.naming.StringManager getManager(java.lang.String)"], ["org.apache.naming.TransactionRef", "org.apache.naming.TransactionRef()", "public org.apache.naming.TransactionRef()"], ["org.apache.naming.TransactionRef", "org.apache.naming.TransactionRef(java.lang.String, java.lang.String)", "public org.apache.naming.TransactionRef(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.naming.TransactionRef.getFactoryClassName()", "public java.lang.String getFactoryClassName()"], ["org.apache.naming.factory.BeanFactory", "org.apache.naming.factory.BeanFactory()", "public org.apache.naming.factory.BeanFactory()"], ["java.lang.Object", "org.apache.naming.factory.BeanFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws javax.naming.NamingException"], ["org.apache.naming.factory.Constants", "org.apache.naming.factory.Constants()", "public org.apache.naming.factory.Constants()"], ["org.apache.naming.factory.DataSourceLinkFactory$DataSourceHandler", "org.apache.naming.factory.DataSourceLinkFactory$DataSourceHandler(javax.sql.DataSource, java.lang.String, java.lang.String)", "public org.apache.naming.factory.DataSourceLinkFactory$DataSourceHandler(javax.sql.DataSource, java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.Object", "org.apache.naming.factory.DataSourceLinkFactory$DataSourceHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["java.lang.Object", "org.apache.naming.factory.DataSourceLinkFactory$DataSourceHandler.unwrap(java.lang.Class<?>)", "public java.lang.Object unwrap(java.lang.Class<?>) throws java.sql.SQLException"], ["org.apache.naming.factory.DataSourceLinkFactory", "org.apache.naming.factory.DataSourceLinkFactory()", "public org.apache.naming.factory.DataSourceLinkFactory()"], ["void", "org.apache.naming.factory.DataSourceLinkFactory.setGlobalContext(javax.naming.Context)", "public static void setGlobalContext(javax.naming.Context)"], ["java.lang.Object", "org.apache.naming.factory.DataSourceLinkFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws javax.naming.NamingException"], ["org.apache.naming.factory.EjbFactory", "org.apache.naming.factory.EjbFactory()", "public org.apache.naming.factory.EjbFactory()"], ["org.apache.naming.factory.FactoryBase", "org.apache.naming.factory.FactoryBase()", "public org.apache.naming.factory.FactoryBase()"], ["java.lang.Object", "org.apache.naming.factory.FactoryBase.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public final java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws java.lang.Exception"], ["javax.mail.Session", "org.apache.naming.factory.MailSessionFactory$1.run()", "public javax.mail.Session run()"], ["java.lang.Object", "org.apache.naming.factory.MailSessionFactory$1.run()", "public java.lang.Object run()"], ["org.apache.naming.factory.MailSessionFactory", "org.apache.naming.factory.MailSessionFactory()", "public org.apache.naming.factory.MailSessionFactory()"], ["java.lang.Object", "org.apache.naming.factory.MailSessionFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws java.lang.Exception"], ["org.apache.naming.factory.OpenEjbFactory", "org.apache.naming.factory.OpenEjbFactory()", "public org.apache.naming.factory.OpenEjbFactory()"], ["java.lang.Object", "org.apache.naming.factory.OpenEjbFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws java.lang.Exception"], ["org.apache.naming.factory.ResourceEnvFactory", "org.apache.naming.factory.ResourceEnvFactory()", "public org.apache.naming.factory.ResourceEnvFactory()"], ["org.apache.naming.factory.ResourceFactory", "org.apache.naming.factory.ResourceFactory()", "public org.apache.naming.factory.ResourceFactory()"], ["org.apache.naming.factory.ResourceLinkFactory", "org.apache.naming.factory.ResourceLinkFactory()", "public org.apache.naming.factory.ResourceLinkFactory()"], ["void", "org.apache.naming.factory.ResourceLinkFactory.setGlobalContext(javax.naming.Context)", "public static void setGlobalContext(javax.naming.Context)"], ["java.lang.Object", "org.apache.naming.factory.ResourceLinkFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws javax.naming.NamingException"], ["javax.mail.internet.MimePartDataSource", "org.apache.naming.factory.SendMailFactory$1.run()", "public javax.mail.internet.MimePartDataSource run()"], ["java.lang.Object", "org.apache.naming.factory.SendMailFactory$1.run()", "public java.lang.Object run()"], ["org.apache.naming.factory.SendMailFactory", "org.apache.naming.factory.SendMailFactory()", "public org.apache.naming.factory.SendMailFactory()"], ["java.lang.Object", "org.apache.naming.factory.SendMailFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws java.lang.Exception"], ["org.apache.naming.factory.TransactionFactory", "org.apache.naming.factory.TransactionFactory()", "public org.apache.naming.factory.TransactionFactory()"], ["org.apache.naming.java.javaURLContextFactory", "org.apache.naming.java.javaURLContextFactory()", "public org.apache.naming.java.javaURLContextFactory()"], ["java.lang.Object", "org.apache.naming.java.javaURLContextFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws javax.naming.NamingException"], ["javax.naming.Context", "org.apache.naming.java.javaURLContextFactory.getInitialContext(java.util.Hashtable<?, ?>)", "public javax.naming.Context getInitialContext(java.util.Hashtable<?, ?>) throws javax.naming.NamingException"], ["org.apache.tomcat.JarScanType[]", "org.apache.tomcat.JarScanType.values()", "public static org.apache.tomcat.JarScanType[] values()"], ["org.apache.tomcat.JarScanType", "org.apache.tomcat.JarScanType.valueOf(java.lang.String)", "public static org.apache.tomcat.JarScanType valueOf(java.lang.String)"], ["org.apache.tomcat.SimpleInstanceManager", "org.apache.tomcat.SimpleInstanceManager()", "public org.apache.tomcat.SimpleInstanceManager()"], ["java.lang.Object", "org.apache.tomcat.SimpleInstanceManager.newInstance(java.lang.Class<?>)", "public java.lang.Object newInstance(java.lang.Class<?>) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException, java.lang.InstantiationException"], ["java.lang.Object", "org.apache.tomcat.SimpleInstanceManager.newInstance(java.lang.String)", "public java.lang.Object newInstance(java.lang.String) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException, java.lang.InstantiationException, java.lang.ClassNotFoundException"], ["java.lang.Object", "org.apache.tomcat.SimpleInstanceManager.newInstance(java.lang.String, java.lang.ClassLoader)", "public java.lang.Object newInstance(java.lang.String, java.lang.ClassLoader) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException, java.lang.InstantiationException, java.lang.ClassNotFoundException"], ["void", "org.apache.tomcat.SimpleInstanceManager.newInstance(java.lang.Object)", "public void newInstance(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException"], ["void", "org.apache.tomcat.SimpleInstanceManager.destroyInstance(java.lang.Object)", "public void destroyInstance(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["org.apache.tomcat.jni.Address", "org.apache.tomcat.jni.Address()", "public org.apache.tomcat.jni.Address()"], ["native", "org.apache.tomcat.jni.Address.boolean fill(org.apache.tomcat.jni.Sockaddr, long)", "public static native boolean fill(org.apache.tomcat.jni.Sockaddr, long)"], ["native", "org.apache.tomcat.jni.Address.org.apache.tomcat.jni.Sockaddr getInfo(long)", "public static native org.apache.tomcat.jni.Sockaddr getInfo(long)"], ["native", "org.apache.tomcat.jni.Address.long info(java.lang.String, int, int, int, long)", "public static native long info(java.lang.String, int, int, int, long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Address.java.lang.String getnameinfo(long, int)", "public static native java.lang.String getnameinfo(long, int)"], ["native", "org.apache.tomcat.jni.Address.java.lang.String getip(long)", "public static native java.lang.String getip(long)"], ["native", "org.apache.tomcat.jni.Address.int getservbyname(long, java.lang.String)", "public static native int getservbyname(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.Address.long get(int, long)", "public static native long get(int, long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Address.boolean equal(long, long)", "public static native boolean equal(long, long)"], ["org.apache.tomcat.jni.Buffer", "org.apache.tomcat.jni.Buffer()", "public org.apache.tomcat.jni.Buffer()"], ["native", "org.apache.tomcat.jni.Buffer.java.nio.ByteBuffer malloc(int)", "public static native java.nio.ByteBuffer malloc(int)"], ["native", "org.apache.tomcat.jni.Buffer.java.nio.ByteBuffer calloc(int, int)", "public static native java.nio.ByteBuffer calloc(int, int)"], ["native", "org.apache.tomcat.jni.Buffer.java.nio.ByteBuffer palloc(long, int)", "public static native java.nio.ByteBuffer palloc(long, int)"], ["native", "org.apache.tomcat.jni.Buffer.java.nio.ByteBuffer pcalloc(long, int)", "public static native java.nio.ByteBuffer pcalloc(long, int)"], ["native", "org.apache.tomcat.jni.Buffer.java.nio.ByteBuffer create(long, int)", "public static native java.nio.ByteBuffer create(long, int)"], ["native", "org.apache.tomcat.jni.Buffer.void free(java.nio.ByteBuffer)", "public static native void free(java.nio.ByteBuffer)"], ["native", "org.apache.tomcat.jni.Buffer.long address(java.nio.ByteBuffer)", "public static native long address(java.nio.ByteBuffer)"], ["native", "org.apache.tomcat.jni.Buffer.long size(java.nio.ByteBuffer)", "public static native long size(java.nio.ByteBuffer)"], ["org.apache.tomcat.jni.Directory", "org.apache.tomcat.jni.Directory()", "public org.apache.tomcat.jni.Directory()"], ["native", "org.apache.tomcat.jni.Directory.int make(java.lang.String, int, long)", "public static native int make(java.lang.String, int, long)"], ["native", "org.apache.tomcat.jni.Directory.int makeRecursive(java.lang.String, int, long)", "public static native int makeRecursive(java.lang.String, int, long)"], ["native", "org.apache.tomcat.jni.Directory.int remove(java.lang.String, long)", "public static native int remove(java.lang.String, long)"], ["native", "org.apache.tomcat.jni.Directory.java.lang.String tempGet(long)", "public static native java.lang.String tempGet(long)"], ["native", "org.apache.tomcat.jni.Directory.long open(java.lang.String, long)", "public static native long open(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Directory.int close(long)", "public static native int close(long)"], ["native", "org.apache.tomcat.jni.Directory.int rewind(long)", "public static native int rewind(long)"], ["native", "org.apache.tomcat.jni.Directory.int read(org.apache.tomcat.jni.FileInfo, int, long)", "public static native int read(org.apache.tomcat.jni.FileInfo, int, long)"], ["int", "org.apache.tomcat.jni.Error.getError()", "public int getError()"], ["java.lang.String", "org.apache.tomcat.jni.Error.getDescription()", "public java.lang.String getDescription()"], ["native", "org.apache.tomcat.jni.Error.int osError()", "public static native int osError()"], ["native", "org.apache.tomcat.jni.Error.int netosError()", "public static native int netosError()"], ["native", "org.apache.tomcat.jni.Error.java.lang.String strerror(int)", "public static native java.lang.String strerror(int)"], ["org.apache.tomcat.jni.File", "org.apache.tomcat.jni.File()", "public org.apache.tomcat.jni.File()"], ["native", "org.apache.tomcat.jni.File.long open(java.lang.String, int, int, long)", "public static native long open(java.lang.String, int, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.File.int close(long)", "public static native int close(long)"], ["native", "org.apache.tomcat.jni.File.int flush(long)", "public static native int flush(long)"], ["native", "org.apache.tomcat.jni.File.long mktemp(java.lang.String, int, long)", "public static native long mktemp(java.lang.String, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.File.int remove(java.lang.String, long)", "public static native int remove(java.lang.String, long)"], ["native", "org.apache.tomcat.jni.File.int rename(java.lang.String, java.lang.String, long)", "public static native int rename(java.lang.String, java.lang.String, long)"], ["native", "org.apache.tomcat.jni.File.int copy(java.lang.String, java.lang.String, int, long)", "public static native int copy(java.lang.String, java.lang.String, int, long)"], ["native", "org.apache.tomcat.jni.File.int append(java.lang.String, java.lang.String, int, long)", "public static native int append(java.lang.String, java.lang.String, int, long)"], ["native", "org.apache.tomcat.jni.File.int puts(byte[], long)", "public static native int puts(byte[], long)"], ["native", "org.apache.tomcat.jni.File.long seek(long, int, long)", "public static native long seek(long, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.File.int putc(byte, long)", "public static native int putc(byte, long)"], ["native", "org.apache.tomcat.jni.File.int ungetc(byte, long)", "public static native int ungetc(byte, long)"], ["native", "org.apache.tomcat.jni.File.int write(long, byte[], int, int)", "public static native int write(long, byte[], int, int)"], ["native", "org.apache.tomcat.jni.File.int writeb(long, java.nio.ByteBuffer, int, int)", "public static native int writeb(long, java.nio.ByteBuffer, int, int)"], ["native", "org.apache.tomcat.jni.File.int writeFull(long, byte[], int, int)", "public static native int writeFull(long, byte[], int, int)"], ["native", "org.apache.tomcat.jni.File.int writeFullb(long, java.nio.ByteBuffer, int, int)", "public static native int writeFullb(long, java.nio.ByteBuffer, int, int)"], ["native", "org.apache.tomcat.jni.File.int writev(long, byte[][])", "public static native int writev(long, byte[][])"], ["native", "org.apache.tomcat.jni.File.int writevFull(long, byte[][])", "public static native int writevFull(long, byte[][])"], ["native", "org.apache.tomcat.jni.File.int read(long, byte[], int, int)", "public static native int read(long, byte[], int, int)"], ["native", "org.apache.tomcat.jni.File.int readb(long, java.nio.ByteBuffer, int, int)", "public static native int readb(long, java.nio.ByteBuffer, int, int)"], ["native", "org.apache.tomcat.jni.File.int readFull(long, byte[], int, int)", "public static native int readFull(long, byte[], int, int)"], ["native", "org.apache.tomcat.jni.File.int readFullb(long, java.nio.ByteBuffer, int, int)", "public static native int readFullb(long, java.nio.ByteBuffer, int, int)"], ["native", "org.apache.tomcat.jni.File.int gets(byte[], int, long)", "public static native int gets(byte[], int, long)"], ["native", "org.apache.tomcat.jni.File.int getc(long)", "public static native int getc(long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.File.int eof(long)", "public static native int eof(long)"], ["native", "org.apache.tomcat.jni.File.java.lang.String nameGet(long)", "public static native java.lang.String nameGet(long)"], ["native", "org.apache.tomcat.jni.File.int permsSet(java.lang.String, int)", "public static native int permsSet(java.lang.String, int)"], ["native", "org.apache.tomcat.jni.File.int attrsSet(java.lang.String, int, int, long)", "public static native int attrsSet(java.lang.String, int, int, long)"], ["native", "org.apache.tomcat.jni.File.int mtimeSet(java.lang.String, long, long)", "public static native int mtimeSet(java.lang.String, long, long)"], ["native", "org.apache.tomcat.jni.File.int lock(long, int)", "public static native int lock(long, int)"], ["native", "org.apache.tomcat.jni.File.int unlock(long)", "public static native int unlock(long)"], ["native", "org.apache.tomcat.jni.File.int flagsGet(long)", "public static native int flagsGet(long)"], ["native", "org.apache.tomcat.jni.File.int trunc(long, long)", "public static native int trunc(long, long)"], ["native", "org.apache.tomcat.jni.File.int pipeCreate(long[], long)", "public static native int pipeCreate(long[], long)"], ["native", "org.apache.tomcat.jni.File.long pipeTimeoutGet(long)", "public static native long pipeTimeoutGet(long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.File.int pipeTimeoutSet(long, long)", "public static native int pipeTimeoutSet(long, long)"], ["native", "org.apache.tomcat.jni.File.long dup(long, long, long)", "public static native long dup(long, long, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.File.int dup2(long, long, long)", "public static native int dup2(long, long, long)"], ["native", "org.apache.tomcat.jni.File.int stat(org.apache.tomcat.jni.FileInfo, java.lang.String, int, long)", "public static native int stat(org.apache.tomcat.jni.FileInfo, java.lang.String, int, long)"], ["native", "org.apache.tomcat.jni.File.org.apache.tomcat.jni.FileInfo getStat(java.lang.String, int, long)", "public static native org.apache.tomcat.jni.FileInfo getStat(java.lang.String, int, long)"], ["native", "org.apache.tomcat.jni.File.int infoGet(org.apache.tomcat.jni.FileInfo, int, long)", "public static native int infoGet(org.apache.tomcat.jni.FileInfo, int, long)"], ["native", "org.apache.tomcat.jni.File.org.apache.tomcat.jni.FileInfo getInfo(int, long)", "public static native org.apache.tomcat.jni.FileInfo getInfo(int, long)"], ["org.apache.tomcat.jni.FileInfo", "org.apache.tomcat.jni.FileInfo()", "public org.apache.tomcat.jni.FileInfo()"], ["org.apache.tomcat.jni.Global", "org.apache.tomcat.jni.Global()", "public org.apache.tomcat.jni.Global()"], ["native", "org.apache.tomcat.jni.Global.long create(java.lang.String, int, long)", "public static native long create(java.lang.String, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Global.long childInit(java.lang.String, long)", "public static native long childInit(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Global.int lock(long)", "public static native int lock(long)"], ["native", "org.apache.tomcat.jni.Global.int trylock(long)", "public static native int trylock(long)"], ["native", "org.apache.tomcat.jni.Global.int unlock(long)", "public static native int unlock(long)"], ["native", "org.apache.tomcat.jni.Global.int destroy(long)", "public static native int destroy(long)"], ["native", "org.apache.tomcat.jni.Library.void terminate()", "public static native void terminate()"], ["native", "org.apache.tomcat.jni.Library.java.lang.String versionString()", "public static native java.lang.String versionString()"], ["native", "org.apache.tomcat.jni.Library.java.lang.String aprVersionString()", "public static native java.lang.String aprVersionString()"], ["native", "org.apache.tomcat.jni.Library.long globalPool()", "public static native long globalPool()"], ["boolean", "org.apache.tomcat.jni.Library.initialize(java.lang.String)", "public static boolean initialize(java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.jni.Local", "org.apache.tomcat.jni.Local()", "public org.apache.tomcat.jni.Local()"], ["native", "org.apache.tomcat.jni.Local.long create(java.lang.String, long)", "public static native long create(java.lang.String, long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Local.int bind(long, long)", "public static native int bind(long, long)"], ["native", "org.apache.tomcat.jni.Local.int listen(long, int)", "public static native int listen(long, int)"], ["native", "org.apache.tomcat.jni.Local.long accept(long)", "public static native long accept(long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Local.int connect(long, long)", "public static native int connect(long, long)"], ["org.apache.tomcat.jni.Lock", "org.apache.tomcat.jni.Lock()", "public org.apache.tomcat.jni.Lock()"], ["native", "org.apache.tomcat.jni.Lock.long create(java.lang.String, int, long)", "public static native long create(java.lang.String, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Lock.long childInit(java.lang.String, long)", "public static native long childInit(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Lock.int lock(long)", "public static native int lock(long)"], ["native", "org.apache.tomcat.jni.Lock.int trylock(long)", "public static native int trylock(long)"], ["native", "org.apache.tomcat.jni.Lock.int unlock(long)", "public static native int unlock(long)"], ["native", "org.apache.tomcat.jni.Lock.int destroy(long)", "public static native int destroy(long)"], ["native", "org.apache.tomcat.jni.Lock.java.lang.String lockfile(long)", "public static native java.lang.String lockfile(long)"], ["native", "org.apache.tomcat.jni.Lock.java.lang.String name(long)", "public static native java.lang.String name(long)"], ["native", "org.apache.tomcat.jni.Lock.java.lang.String defname()", "public static native java.lang.String defname()"], ["org.apache.tomcat.jni.Mmap", "org.apache.tomcat.jni.Mmap()", "public org.apache.tomcat.jni.Mmap()"], ["native", "org.apache.tomcat.jni.Mmap.long create(long, long, long, int, long)", "public static native long create(long, long, long, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Mmap.long dup(long, long)", "public static native long dup(long, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Mmap.int delete(long)", "public static native int delete(long)"], ["native", "org.apache.tomcat.jni.Mmap.long offset(long, long)", "public static native long offset(long, long) throws org.apache.tomcat.jni.Error"], ["org.apache.tomcat.jni.Multicast", "org.apache.tomcat.jni.Multicast()", "public org.apache.tomcat.jni.Multicast()"], ["native", "org.apache.tomcat.jni.Multicast.int join(long, long, long, long)", "public static native int join(long, long, long, long)"], ["native", "org.apache.tomcat.jni.Multicast.int leave(long, long, long, long)", "public static native int leave(long, long, long, long)"], ["native", "org.apache.tomcat.jni.Multicast.int hops(long, int)", "public static native int hops(long, int)"], ["native", "org.apache.tomcat.jni.Multicast.int loopback(long, boolean)", "public static native int loopback(long, boolean)"], ["native", "org.apache.tomcat.jni.Multicast.int ointerface(long, long)", "public static native int ointerface(long, long)"], ["org.apache.tomcat.jni.OS", "org.apache.tomcat.jni.OS()", "public org.apache.tomcat.jni.OS()"], ["native", "org.apache.tomcat.jni.OS.java.lang.String defaultEncoding(long)", "public static native java.lang.String defaultEncoding(long)"], ["native", "org.apache.tomcat.jni.OS.java.lang.String localeEncoding(long)", "public static native java.lang.String localeEncoding(long)"], ["native", "org.apache.tomcat.jni.OS.int random(byte[], int)", "public static native int random(byte[], int)"], ["native", "org.apache.tomcat.jni.OS.int info(long[])", "public static native int info(long[])"], ["native", "org.apache.tomcat.jni.OS.java.lang.String expand(java.lang.String)", "public static native java.lang.String expand(java.lang.String)"], ["native", "org.apache.tomcat.jni.OS.void sysloginit(java.lang.String)", "public static native void sysloginit(java.lang.String)"], ["native", "org.apache.tomcat.jni.OS.void syslog(int, java.lang.String)", "public static native void syslog(int, java.lang.String)"], ["org.apache.tomcat.jni.Poll", "org.apache.tomcat.jni.Poll()", "public org.apache.tomcat.jni.Poll()"], ["native", "org.apache.tomcat.jni.Poll.long create(int, long, int, long)", "public static native long create(int, long, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Poll.int destroy(long)", "public static native int destroy(long)"], ["native", "org.apache.tomcat.jni.Poll.int add(long, long, int)", "public static native int add(long, long, int)"], ["native", "org.apache.tomcat.jni.Poll.int addWithTimeout(long, long, int, long)", "public static native int addWithTimeout(long, long, int, long)"], ["native", "org.apache.tomcat.jni.Poll.int remove(long, long)", "public static native int remove(long, long)"], ["native", "org.apache.tomcat.jni.Poll.int poll(long, long, long[], boolean)", "public static native int poll(long, long, long[], boolean)"], ["native", "org.apache.tomcat.jni.Poll.int maintain(long, long[], boolean)", "public static native int maintain(long, long[], boolean)"], ["native", "org.apache.tomcat.jni.Poll.void setTtl(long, long)", "public static native void setTtl(long, long)"], ["native", "org.apache.tomcat.jni.Poll.long getTtl(long)", "public static native long getTtl(long)"], ["native", "org.apache.tomcat.jni.Poll.int pollset(long, long[])", "public static native int pollset(long, long[])"], ["native", "org.apache.tomcat.jni.Poll.int interrupt(long)", "public static native int interrupt(long)"], ["native", "org.apache.tomcat.jni.Poll.boolean wakeable(long)", "public static native boolean wakeable(long)"], ["org.apache.tomcat.jni.Pool", "org.apache.tomcat.jni.Pool()", "public org.apache.tomcat.jni.Pool()"], ["native", "org.apache.tomcat.jni.Pool.long create(long)", "public static native long create(long)"], ["native", "org.apache.tomcat.jni.Pool.void clear(long)", "public static native void clear(long)"], ["native", "org.apache.tomcat.jni.Pool.void destroy(long)", "public static native void destroy(long)"], ["native", "org.apache.tomcat.jni.Pool.long parentGet(long)", "public static native long parentGet(long)"], ["native", "org.apache.tomcat.jni.Pool.boolean isAncestor(long, long)", "public static native boolean isAncestor(long, long)"], ["native", "org.apache.tomcat.jni.Pool.long cleanupRegister(long, java.lang.Object)", "public static native long cleanupRegister(long, java.lang.Object)"], ["native", "org.apache.tomcat.jni.Pool.void cleanupKill(long, long)", "public static native void cleanupKill(long, long)"], ["native", "org.apache.tomcat.jni.Pool.void noteSubprocess(long, long, int)", "public static native void noteSubprocess(long, long, int)"], ["native", "org.apache.tomcat.jni.Pool.java.nio.ByteBuffer alloc(long, int)", "public static native java.nio.ByteBuffer alloc(long, int)"], ["native", "org.apache.tomcat.jni.Pool.java.nio.ByteBuffer calloc(long, int)", "public static native java.nio.ByteBuffer calloc(long, int)"], ["native", "org.apache.tomcat.jni.Pool.int dataSet(long, java.lang.String, java.lang.Object)", "public static native int dataSet(long, java.lang.String, java.lang.Object)"], ["native", "org.apache.tomcat.jni.Pool.java.lang.Object dataGet(long, java.lang.String)", "public static native java.lang.Object dataGet(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.Pool.void cleanupForExec()", "public static native void cleanupForExec()"], ["org.apache.tomcat.jni.Proc", "org.apache.tomcat.jni.Proc()", "public org.apache.tomcat.jni.Proc()"], ["native", "org.apache.tomcat.jni.Proc.long alloc(long)", "public static native long alloc(long)"], ["native", "org.apache.tomcat.jni.Proc.int fork(long[], long)", "public static native int fork(long[], long)"], ["native", "org.apache.tomcat.jni.Proc.int create(long, java.lang.String, java.lang.String[], java.lang.String[], long, long)", "public static native int create(long, java.lang.String, java.lang.String[], java.lang.String[], long, long)"], ["native", "org.apache.tomcat.jni.Proc.int wait(long, int[], int)", "public static native int wait(long, int[], int)"], ["native", "org.apache.tomcat.jni.Proc.int waitAllProcs(long, int[], int, long)", "public static native int waitAllProcs(long, int[], int, long)"], ["native", "org.apache.tomcat.jni.Proc.int detach(int)", "public static native int detach(int)"], ["native", "org.apache.tomcat.jni.Proc.int kill(long, int)", "public static native int kill(long, int)"], ["org.apache.tomcat.jni.Procattr", "org.apache.tomcat.jni.Procattr()", "public org.apache.tomcat.jni.Procattr()"], ["native", "org.apache.tomcat.jni.Procattr.long create(long)", "public static native long create(long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Procattr.int ioSet(long, int, int, int)", "public static native int ioSet(long, int, int, int)"], ["native", "org.apache.tomcat.jni.Procattr.int childInSet(long, long, long)", "public static native int childInSet(long, long, long)"], ["native", "org.apache.tomcat.jni.Procattr.int childOutSet(long, long, long)", "public static native int childOutSet(long, long, long)"], ["native", "org.apache.tomcat.jni.Procattr.int childErrSet(long, long, long)", "public static native int childErrSet(long, long, long)"], ["native", "org.apache.tomcat.jni.Procattr.int dirSet(long, java.lang.String)", "public static native int dirSet(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.Procattr.int cmdtypeSet(long, int)", "public static native int cmdtypeSet(long, int)"], ["native", "org.apache.tomcat.jni.Procattr.int detachSet(long, int)", "public static native int detachSet(long, int)"], ["native", "org.apache.tomcat.jni.Procattr.int errorCheckSet(long, int)", "public static native int errorCheckSet(long, int)"], ["native", "org.apache.tomcat.jni.Procattr.int addrspaceSet(long, int)", "public static native int addrspaceSet(long, int)"], ["native", "org.apache.tomcat.jni.Procattr.void errfnSet(long, long, java.lang.Object)", "public static native void errfnSet(long, long, java.lang.Object)"], ["native", "org.apache.tomcat.jni.Procattr.int userSet(long, java.lang.String, java.lang.String)", "public static native int userSet(long, java.lang.String, java.lang.String)"], ["native", "org.apache.tomcat.jni.Procattr.int groupSet(long, java.lang.String)", "public static native int groupSet(long, java.lang.String)"], ["org.apache.tomcat.jni.Registry", "org.apache.tomcat.jni.Registry()", "public org.apache.tomcat.jni.Registry()"], ["native", "org.apache.tomcat.jni.Registry.long create(int, java.lang.String, int, long)", "public static native long create(int, java.lang.String, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.long open(int, java.lang.String, int, long)", "public static native long open(int, java.lang.String, int, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.int close(long)", "public static native int close(long)"], ["native", "org.apache.tomcat.jni.Registry.int getType(long, java.lang.String)", "public static native int getType(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.Registry.int getValueI(long, java.lang.String)", "public static native int getValueI(long, java.lang.String) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.long getValueJ(long, java.lang.String)", "public static native long getValueJ(long, java.lang.String) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.int getSize(long, java.lang.String)", "public static native int getSize(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.Registry.java.lang.String getValueS(long, java.lang.String)", "public static native java.lang.String getValueS(long, java.lang.String) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.java.lang.String[] getValueA(long, java.lang.String)", "public static native java.lang.String[] getValueA(long, java.lang.String) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.byte[] getValueB(long, java.lang.String)", "public static native byte[] getValueB(long, java.lang.String) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.int setValueI(long, java.lang.String, int)", "public static native int setValueI(long, java.lang.String, int)"], ["native", "org.apache.tomcat.jni.Registry.int setValueJ(long, java.lang.String, long)", "public static native int setValueJ(long, java.lang.String, long)"], ["native", "org.apache.tomcat.jni.Registry.int setValueS(long, java.lang.String, java.lang.String)", "public static native int setValueS(long, java.lang.String, java.lang.String)"], ["native", "org.apache.tomcat.jni.Registry.int setValueE(long, java.lang.String, java.lang.String)", "public static native int setValueE(long, java.lang.String, java.lang.String)"], ["native", "org.apache.tomcat.jni.Registry.int setValueA(long, java.lang.String, java.lang.String[])", "public static native int setValueA(long, java.lang.String, java.lang.String[])"], ["native", "org.apache.tomcat.jni.Registry.int setValueB(long, java.lang.String, byte[])", "public static native int setValueB(long, java.lang.String, byte[])"], ["native", "org.apache.tomcat.jni.Registry.java.lang.String[] enumKeys(long)", "public static native java.lang.String[] enumKeys(long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.java.lang.String[] enumValues(long)", "public static native java.lang.String[] enumValues(long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Registry.int deleteValue(long, java.lang.String)", "public static native int deleteValue(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.Registry.int deleteKey(int, java.lang.String, boolean)", "public static native int deleteKey(int, java.lang.String, boolean)"], ["org.apache.tomcat.jni.SSL", "org.apache.tomcat.jni.SSL()", "public org.apache.tomcat.jni.SSL()"], ["native", "org.apache.tomcat.jni.SSL.int version()", "public static native int version()"], ["native", "org.apache.tomcat.jni.SSL.java.lang.String versionString()", "public static native java.lang.String versionString()"], ["native", "org.apache.tomcat.jni.SSL.int initialize(java.lang.String)", "public static native int initialize(java.lang.String)"], ["native", "org.apache.tomcat.jni.SSL.int fipsModeGet()", "public static native int fipsModeGet() throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSL.int fipsModeSet(int)", "public static native int fipsModeSet(int) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSL.boolean randLoad(java.lang.String)", "public static native boolean randLoad(java.lang.String)"], ["native", "org.apache.tomcat.jni.SSL.boolean randSave(java.lang.String)", "public static native boolean randSave(java.lang.String)"], ["native", "org.apache.tomcat.jni.SSL.boolean randMake(java.lang.String, int, boolean)", "public static native boolean randMake(java.lang.String, int, boolean)"], ["native", "org.apache.tomcat.jni.SSL.void randSet(java.lang.String)", "public static native void randSet(java.lang.String)"], ["native", "org.apache.tomcat.jni.SSL.long newBIO(long, org.apache.tomcat.jni.BIOCallback)", "public static native long newBIO(long, org.apache.tomcat.jni.BIOCallback) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSL.int closeBIO(long)", "public static native int closeBIO(long)"], ["native", "org.apache.tomcat.jni.SSL.void setPasswordCallback(org.apache.tomcat.jni.PasswordCallback)", "public static native void setPasswordCallback(org.apache.tomcat.jni.PasswordCallback)"], ["native", "org.apache.tomcat.jni.SSL.void setPassword(java.lang.String)", "public static native void setPassword(java.lang.String)"], ["native", "org.apache.tomcat.jni.SSL.boolean generateRSATempKey(int)", "public static native boolean generateRSATempKey(int)"], ["native", "org.apache.tomcat.jni.SSL.boolean loadDSATempKey(int, java.lang.String)", "public static native boolean loadDSATempKey(int, java.lang.String)"], ["native", "org.apache.tomcat.jni.SSL.java.lang.String getLastError()", "public static native java.lang.String getLastError()"], ["native", "org.apache.tomcat.jni.SSL.boolean hasOp(int)", "public static native boolean hasOp(int)"], ["org.apache.tomcat.jni.SSLContext", "org.apache.tomcat.jni.SSLContext()", "public org.apache.tomcat.jni.SSLContext()"], ["native", "org.apache.tomcat.jni.SSLContext.long make(long, int, int)", "public static native long make(long, int, int) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLContext.int free(long)", "public static native int free(long)"], ["native", "org.apache.tomcat.jni.SSLContext.void setContextId(long, java.lang.String)", "public static native void setContextId(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.SSLContext.void setBIO(long, long, int)", "public static native void setBIO(long, long, int)"], ["native", "org.apache.tomcat.jni.SSLContext.void setOptions(long, int)", "public static native void setOptions(long, int)"], ["native", "org.apache.tomcat.jni.SSLContext.void clearOptions(long, int)", "public static native void clearOptions(long, int)"], ["native", "org.apache.tomcat.jni.SSLContext.void setQuietShutdown(long, boolean)", "public static native void setQuietShutdown(long, boolean)"], ["native", "org.apache.tomcat.jni.SSLContext.boolean setCipherSuite(long, java.lang.String)", "public static native boolean setCipherSuite(long, java.lang.String) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLContext.boolean setCARevocation(long, java.lang.String, java.lang.String)", "public static native boolean setCARevocation(long, java.lang.String, java.lang.String) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLContext.boolean setCertificateChainFile(long, java.lang.String, boolean)", "public static native boolean setCertificateChainFile(long, java.lang.String, boolean)"], ["native", "org.apache.tomcat.jni.SSLContext.boolean setCertificate(long, java.lang.String, java.lang.String, java.lang.String, int)", "public static native boolean setCertificate(long, java.lang.String, java.lang.String, java.lang.String, int) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLContext.boolean setCACertificate(long, java.lang.String, java.lang.String)", "public static native boolean setCACertificate(long, java.lang.String, java.lang.String) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLContext.void setRandom(long, java.lang.String)", "public static native void setRandom(long, java.lang.String)"], ["native", "org.apache.tomcat.jni.SSLContext.void setShutdownType(long, int)", "public static native void setShutdownType(long, int)"], ["native", "org.apache.tomcat.jni.SSLContext.void setVerify(long, int, int)", "public static native void setVerify(long, int, int)"], ["org.apache.tomcat.jni.SSLExt", "org.apache.tomcat.jni.SSLExt()", "public org.apache.tomcat.jni.SSLExt()"], ["native", "org.apache.tomcat.jni.SSLExt.int setNPN(long, byte[], int)", "public static native int setNPN(long, byte[], int)"], ["native", "org.apache.tomcat.jni.SSLExt.int getNPN(long, byte[])", "public static native int getNPN(long, byte[])"], ["native", "org.apache.tomcat.jni.SSLExt.int debug(long)", "public static native int debug(long)"], ["native", "org.apache.tomcat.jni.SSLExt.byte[] getSessionData(long)", "public static native byte[] getSessionData(long)"], ["native", "org.apache.tomcat.jni.SSLExt.int setSessionData(long, byte[], int)", "public static native int setSessionData(long, byte[], int)"], ["native", "org.apache.tomcat.jni.SSLExt.int getTicket(long, byte[])", "public static native int getTicket(long, byte[])"], ["native", "org.apache.tomcat.jni.SSLExt.int setTicket(long, byte[], int)", "public static native int setTicket(long, byte[], int)"], ["native", "org.apache.tomcat.jni.SSLExt.int setTicketKeys(long, byte[], int)", "public static native int setTicketKeys(long, byte[], int)"], ["native", "org.apache.tomcat.jni.SSLExt.int setSNI(long, byte[], int)", "public static native int setSNI(long, byte[], int)"], ["native", "org.apache.tomcat.jni.SSLExt.java.lang.String sslErrReasonErrorString()", "public static native java.lang.String sslErrReasonErrorString()"], ["native", "org.apache.tomcat.jni.SSLExt.long sslCtxSetMode(long, long)", "public static native long sslCtxSetMode(long, long)"], ["native", "org.apache.tomcat.jni.SSLExt.long sslSetMode(long, long)", "public static native long sslSetMode(long, long)"], ["int", "org.apache.tomcat.jni.SSLExt.setNPN(long, byte[])", "public static int setNPN(long, byte[])"], ["boolean", "org.apache.tomcat.jni.SSLExt.checkNPN(long, byte[])", "public static boolean checkNPN(long, byte[])"], ["org.apache.tomcat.jni.SSLSocket", "org.apache.tomcat.jni.SSLSocket()", "public org.apache.tomcat.jni.SSLSocket()"], ["native", "org.apache.tomcat.jni.SSLSocket.int attach(long, long)", "public static native int attach(long, long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLSocket.int handshake(long)", "public static native int handshake(long)"], ["native", "org.apache.tomcat.jni.SSLSocket.int renegotiate(long)", "public static native int renegotiate(long)"], ["native", "org.apache.tomcat.jni.SSLSocket.void setVerify(long, int, int)", "public static native void setVerify(long, int, int)"], ["native", "org.apache.tomcat.jni.SSLSocket.byte[] getInfoB(long, int)", "public static native byte[] getInfoB(long, int) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLSocket.java.lang.String getInfoS(long, int)", "public static native java.lang.String getInfoS(long, int) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.SSLSocket.int getInfoI(long, int)", "public static native int getInfoI(long, int) throws java.lang.Exception"], ["org.apache.tomcat.jni.Shm", "org.apache.tomcat.jni.Shm()", "public org.apache.tomcat.jni.Shm()"], ["native", "org.apache.tomcat.jni.Shm.long create(long, java.lang.String, long)", "public static native long create(long, java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Shm.int remove(java.lang.String, long)", "public static native int remove(java.lang.String, long)"], ["native", "org.apache.tomcat.jni.Shm.int destroy(long)", "public static native int destroy(long)"], ["native", "org.apache.tomcat.jni.Shm.long attach(java.lang.String, long)", "public static native long attach(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.Shm.int detach(long)", "public static native int detach(long)"], ["native", "org.apache.tomcat.jni.Shm.long baseaddr(long)", "public static native long baseaddr(long)"], ["native", "org.apache.tomcat.jni.Shm.long size(long)", "public static native long size(long)"], ["native", "org.apache.tomcat.jni.Shm.java.nio.ByteBuffer buffer(long)", "public static native java.nio.ByteBuffer buffer(long)"], ["org.apache.tomcat.jni.Sockaddr", "org.apache.tomcat.jni.Sockaddr()", "public org.apache.tomcat.jni.Sockaddr()"], ["org.apache.tomcat.jni.Socket", "org.apache.tomcat.jni.Socket()", "public org.apache.tomcat.jni.Socket()"], ["native", "org.apache.tomcat.jni.Socket.long create(int, int, int, long)", "public static native long create(int, int, int, long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Socket.int shutdown(long, int)", "public static native int shutdown(long, int)"], ["native", "org.apache.tomcat.jni.Socket.int close(long)", "public static native int close(long)"], ["native", "org.apache.tomcat.jni.Socket.void destroy(long)", "public static native void destroy(long)"], ["native", "org.apache.tomcat.jni.Socket.int bind(long, long)", "public static native int bind(long, long)"], ["native", "org.apache.tomcat.jni.Socket.int listen(long, int)", "public static native int listen(long, int)"], ["native", "org.apache.tomcat.jni.Socket.long acceptx(long, long)", "public static native long acceptx(long, long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Socket.long accept(long)", "public static native long accept(long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Socket.int acceptfilter(long, java.lang.String, java.lang.String)", "public static native int acceptfilter(long, java.lang.String, java.lang.String)"], ["native", "org.apache.tomcat.jni.Socket.boolean atmark(long)", "public static native boolean atmark(long)"], ["native", "org.apache.tomcat.jni.Socket.int connect(long, long)", "public static native int connect(long, long)"], ["native", "org.apache.tomcat.jni.Socket.int send(long, byte[], int, int)", "public static native int send(long, byte[], int, int)"], ["native", "org.apache.tomcat.jni.Socket.int sendb(long, java.nio.ByteBuffer, int, int)", "public static native int sendb(long, java.nio.ByteBuffer, int, int)"], ["native", "org.apache.tomcat.jni.Socket.int sendib(long, java.nio.ByteBuffer, int, int)", "public static native int sendib(long, java.nio.ByteBuffer, int, int)"], ["native", "org.apache.tomcat.jni.Socket.int sendbb(long, int, int)", "public static native int sendbb(long, int, int)"], ["native", "org.apache.tomcat.jni.Socket.int sendibb(long, int, int)", "public static native int sendibb(long, int, int)"], ["native", "org.apache.tomcat.jni.Socket.int sendv(long, byte[][])", "public static native int sendv(long, byte[][])"], ["native", "org.apache.tomcat.jni.Socket.int sendto(long, long, int, byte[], int, int)", "public static native int sendto(long, long, int, byte[], int, int)"], ["native", "org.apache.tomcat.jni.Socket.int recv(long, byte[], int, int)", "public static native int recv(long, byte[], int, int)"], ["native", "org.apache.tomcat.jni.Socket.int recvt(long, byte[], int, int, long)", "public static native int recvt(long, byte[], int, int, long)"], ["native", "org.apache.tomcat.jni.Socket.int recvb(long, java.nio.ByteBuffer, int, int)", "public static native int recvb(long, java.nio.ByteBuffer, int, int)"], ["native", "org.apache.tomcat.jni.Socket.int recvbb(long, int, int)", "public static native int recvbb(long, int, int)"], ["native", "org.apache.tomcat.jni.Socket.int recvbt(long, java.nio.ByteBuffer, int, int, long)", "public static native int recvbt(long, java.nio.ByteBuffer, int, int, long)"], ["native", "org.apache.tomcat.jni.Socket.int recvbbt(long, int, int, long)", "public static native int recvbbt(long, int, int, long)"], ["native", "org.apache.tomcat.jni.Socket.int recvfrom(long, long, int, byte[], int, int)", "public static native int recvfrom(long, long, int, byte[], int, int)"], ["native", "org.apache.tomcat.jni.Socket.int optSet(long, int, int)", "public static native int optSet(long, int, int)"], ["native", "org.apache.tomcat.jni.Socket.int optGet(long, int)", "public static native int optGet(long, int) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Socket.int timeoutSet(long, long)", "public static native int timeoutSet(long, long)"], ["native", "org.apache.tomcat.jni.Socket.long timeoutGet(long)", "public static native long timeoutGet(long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Socket.long sendfile(long, long, byte[][], byte[][], long, long, int)", "public static native long sendfile(long, long, byte[][], byte[][], long, long, int)"], ["native", "org.apache.tomcat.jni.Socket.long sendfilen(long, long, long, long, int)", "public static native long sendfilen(long, long, long, long, int)"], ["native", "org.apache.tomcat.jni.Socket.long pool(long)", "public static native long pool(long) throws java.lang.Exception"], ["native", "org.apache.tomcat.jni.Socket.void setsbb(long, java.nio.ByteBuffer)", "public static native void setsbb(long, java.nio.ByteBuffer)"], ["native", "org.apache.tomcat.jni.Socket.void setrbb(long, java.nio.ByteBuffer)", "public static native void setrbb(long, java.nio.ByteBuffer)"], ["native", "org.apache.tomcat.jni.Socket.int dataSet(long, java.lang.String, java.lang.Object)", "public static native int dataSet(long, java.lang.String, java.lang.Object)"], ["native", "org.apache.tomcat.jni.Socket.java.lang.Object dataGet(long, java.lang.String)", "public static native java.lang.Object dataGet(long, java.lang.String)"], ["org.apache.tomcat.jni.Status", "org.apache.tomcat.jni.Status()", "public org.apache.tomcat.jni.Status()"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOSTAT(int)", "public static final boolean APR_STATUS_IS_ENOSTAT(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOPOOL(int)", "public static final boolean APR_STATUS_IS_ENOPOOL(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EBADDATE(int)", "public static final boolean APR_STATUS_IS_EBADDATE(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EINVALSOCK(int)", "public static final boolean APR_STATUS_IS_EINVALSOCK(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOPROC(int)", "public static final boolean APR_STATUS_IS_ENOPROC(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOTIME(int)", "public static final boolean APR_STATUS_IS_ENOTIME(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENODIR(int)", "public static final boolean APR_STATUS_IS_ENODIR(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOLOCK(int)", "public static final boolean APR_STATUS_IS_ENOLOCK(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOPOLL(int)", "public static final boolean APR_STATUS_IS_ENOPOLL(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOSOCKET(int)", "public static final boolean APR_STATUS_IS_ENOSOCKET(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOTHREAD(int)", "public static final boolean APR_STATUS_IS_ENOTHREAD(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOTHDKEY(int)", "public static final boolean APR_STATUS_IS_ENOTHDKEY(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EGENERAL(int)", "public static final boolean APR_STATUS_IS_EGENERAL(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOSHMAVAIL(int)", "public static final boolean APR_STATUS_IS_ENOSHMAVAIL(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EBADIP(int)", "public static final boolean APR_STATUS_IS_EBADIP(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EBADMASK(int)", "public static final boolean APR_STATUS_IS_EBADMASK(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EDSOPEN(int)", "public static final boolean APR_STATUS_IS_EDSOPEN(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EABSOLUTE(int)", "public static final boolean APR_STATUS_IS_EABSOLUTE(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ERELATIVE(int)", "public static final boolean APR_STATUS_IS_ERELATIVE(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EINCOMPLETE(int)", "public static final boolean APR_STATUS_IS_EINCOMPLETE(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EABOVEROOT(int)", "public static final boolean APR_STATUS_IS_EABOVEROOT(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EBADPATH(int)", "public static final boolean APR_STATUS_IS_EBADPATH(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EPATHWILD(int)", "public static final boolean APR_STATUS_IS_EPATHWILD(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ESYMNOTFOUND(int)", "public static final boolean APR_STATUS_IS_ESYMNOTFOUND(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EPROC_UNKNOWN(int)", "public static final boolean APR_STATUS_IS_EPROC_UNKNOWN(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOTENOUGHENTROPY(int)", "public static final boolean APR_STATUS_IS_ENOTENOUGHENTROPY(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_INCHILD(int)", "public static final boolean APR_STATUS_IS_INCHILD(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_INPARENT(int)", "public static final boolean APR_STATUS_IS_INPARENT(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_DETACH(int)", "public static final boolean APR_STATUS_IS_DETACH(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_NOTDETACH(int)", "public static final boolean APR_STATUS_IS_NOTDETACH(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_CHILD_DONE(int)", "public static final boolean APR_STATUS_IS_CHILD_DONE(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_CHILD_NOTDONE(int)", "public static final boolean APR_STATUS_IS_CHILD_NOTDONE(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_TIMEUP(int)", "public static final boolean APR_STATUS_IS_TIMEUP(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_INCOMPLETE(int)", "public static final boolean APR_STATUS_IS_INCOMPLETE(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_BADCH(int)", "public static final boolean APR_STATUS_IS_BADCH(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_BADARG(int)", "public static final boolean APR_STATUS_IS_BADARG(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EOF(int)", "public static final boolean APR_STATUS_IS_EOF(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_NOTFOUND(int)", "public static final boolean APR_STATUS_IS_NOTFOUND(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ANONYMOUS(int)", "public static final boolean APR_STATUS_IS_ANONYMOUS(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_FILEBASED(int)", "public static final boolean APR_STATUS_IS_FILEBASED(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_KEYBASED(int)", "public static final boolean APR_STATUS_IS_KEYBASED(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EINIT(int)", "public static final boolean APR_STATUS_IS_EINIT(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOTIMPL(int)", "public static final boolean APR_STATUS_IS_ENOTIMPL(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EMISMATCH(int)", "public static final boolean APR_STATUS_IS_EMISMATCH(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EBUSY(int)", "public static final boolean APR_STATUS_IS_EBUSY(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EAGAIN(int)", "public static final boolean APR_STATUS_IS_EAGAIN(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ETIMEDOUT(int)", "public static final boolean APR_STATUS_IS_ETIMEDOUT(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ECONNABORTED(int)", "public static final boolean APR_STATUS_IS_ECONNABORTED(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ECONNRESET(int)", "public static final boolean APR_STATUS_IS_ECONNRESET(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EINPROGRESS(int)", "public static final boolean APR_STATUS_IS_EINPROGRESS(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EINTR(int)", "public static final boolean APR_STATUS_IS_EINTR(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_ENOTSOCK(int)", "public static final boolean APR_STATUS_IS_ENOTSOCK(int)"], ["boolean", "org.apache.tomcat.jni.Status.APR_STATUS_IS_EINVAL(int)", "public static final boolean APR_STATUS_IS_EINVAL(int)"], ["org.apache.tomcat.jni.Stdlib", "org.apache.tomcat.jni.Stdlib()", "public org.apache.tomcat.jni.Stdlib()"], ["native", "org.apache.tomcat.jni.Stdlib.boolean memread(byte[], long, int)", "public static native boolean memread(byte[], long, int)"], ["native", "org.apache.tomcat.jni.Stdlib.boolean memwrite(long, byte[], int)", "public static native boolean memwrite(long, byte[], int)"], ["native", "org.apache.tomcat.jni.Stdlib.boolean memset(long, int, int)", "public static native boolean memset(long, int, int)"], ["native", "org.apache.tomcat.jni.Stdlib.long malloc(int)", "public static native long malloc(int)"], ["native", "org.apache.tomcat.jni.Stdlib.long realloc(long, int)", "public static native long realloc(long, int)"], ["native", "org.apache.tomcat.jni.Stdlib.long calloc(int, int)", "public static native long calloc(int, int)"], ["native", "org.apache.tomcat.jni.Stdlib.void free(long)", "public static native void free(long)"], ["native", "org.apache.tomcat.jni.Stdlib.int getpid()", "public static native int getpid()"], ["native", "org.apache.tomcat.jni.Stdlib.int getppid()", "public static native int getppid()"], ["org.apache.tomcat.jni.Thread", "org.apache.tomcat.jni.Thread()", "public org.apache.tomcat.jni.Thread()"], ["native", "org.apache.tomcat.jni.Thread.long current()", "public static native long current()"], ["org.apache.tomcat.jni.Time", "org.apache.tomcat.jni.Time()", "public org.apache.tomcat.jni.Time()"], ["long", "org.apache.tomcat.jni.Time.sec(long)", "public static long sec(long)"], ["long", "org.apache.tomcat.jni.Time.msec(long)", "public static long msec(long)"], ["native", "org.apache.tomcat.jni.Time.long now()", "public static native long now()"], ["native", "org.apache.tomcat.jni.Time.java.lang.String rfc822(long)", "public static native java.lang.String rfc822(long)"], ["native", "org.apache.tomcat.jni.Time.java.lang.String ctime(long)", "public static native java.lang.String ctime(long)"], ["native", "org.apache.tomcat.jni.Time.void sleep(long)", "public static native void sleep(long)"], ["org.apache.tomcat.jni.User", "org.apache.tomcat.jni.User()", "public org.apache.tomcat.jni.User()"], ["native", "org.apache.tomcat.jni.User.long uidCurrent(long)", "public static native long uidCurrent(long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.User.long gidCurrent(long)", "public static native long gidCurrent(long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.User.long uid(java.lang.String, long)", "public static native long uid(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.User.long usergid(java.lang.String, long)", "public static native long usergid(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.User.long gid(java.lang.String, long)", "public static native long gid(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.User.java.lang.String username(long, long)", "public static native java.lang.String username(long, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.User.java.lang.String groupname(long, long)", "public static native java.lang.String groupname(long, long) throws org.apache.tomcat.jni.Error"], ["native", "org.apache.tomcat.jni.User.int uidcompare(long, long)", "public static native int uidcompare(long, long)"], ["native", "org.apache.tomcat.jni.User.int gidcompare(long, long)", "public static native int gidcompare(long, long)"], ["native", "org.apache.tomcat.jni.User.java.lang.String homepath(java.lang.String, long)", "public static native java.lang.String homepath(java.lang.String, long) throws org.apache.tomcat.jni.Error"], ["void", "org.apache.tomcat.jni.socket.AprSocket.recycle()", "public void recycle()"], ["java.lang.String", "org.apache.tomcat.jni.socket.AprSocket.toString()", "public java.lang.String toString()"], ["void", "org.apache.tomcat.jni.socket.AprSocket.setHandler(org.apache.tomcat.jni.socket.AprSocketContext$BlockingPollHandler)", "public void setHandler(org.apache.tomcat.jni.socket.AprSocketContext$BlockingPollHandler)"], ["boolean", "org.apache.tomcat.jni.socket.AprSocket.isPolling()", "public boolean isPolling()"], ["org.apache.tomcat.jni.socket.AprSocketContext$BlockingPollHandler", "org.apache.tomcat.jni.socket.AprSocket.getHandler()", "public org.apache.tomcat.jni.socket.AprSocketContext$BlockingPollHandler getHandler()"], ["org.apache.tomcat.jni.socket.AprSocketContext", "org.apache.tomcat.jni.socket.AprSocket.getContext()", "public org.apache.tomcat.jni.socket.AprSocketContext getContext()"], ["void", "org.apache.tomcat.jni.socket.AprSocket.connect()", "public void connect() throws java.io.IOException"], ["org.apache.tomcat.jni.socket.HostInfo", "org.apache.tomcat.jni.socket.AprSocket.getHost()", "public org.apache.tomcat.jni.socket.HostInfo getHost()"], ["int", "org.apache.tomcat.jni.socket.AprSocket.write(byte[], int, int, long)", "public int write(byte[], int, int, long) throws java.io.IOException"], ["int", "org.apache.tomcat.jni.socket.AprSocket.write(byte[], int, int)", "public int write(byte[], int, int) throws java.io.IOException"], ["int", "org.apache.tomcat.jni.socket.AprSocket.read(byte[], int, int, long)", "public int read(byte[], int, int, long) throws java.io.IOException"], ["int", "org.apache.tomcat.jni.socket.AprSocket.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["int", "org.apache.tomcat.jni.socket.AprSocket.readNB(byte[], int, int)", "public int readNB(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.jni.socket.AprSocket.close()", "public void close()"], ["void", "org.apache.tomcat.jni.socket.AprSocket.reset()", "public void reset()"], ["boolean", "org.apache.tomcat.jni.socket.AprSocket.isClosed()", "public boolean isClosed()"], ["long", "org.apache.tomcat.jni.socket.AprSocket.getIOTimeout()", "public long getIOTimeout() throws java.io.IOException"], ["byte[][]", "org.apache.tomcat.jni.socket.AprSocket.getPeerCert(boolean)", "public byte[][] getPeerCert(boolean) throws java.io.IOException"], ["java.security.cert.X509Certificate[]", "org.apache.tomcat.jni.socket.AprSocket.getPeerX509Cert()", "public java.security.cert.X509Certificate[] getPeerX509Cert() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.jni.socket.AprSocket.getCipherSuite()", "public java.lang.String getCipherSuite() throws java.io.IOException"], ["int", "org.apache.tomcat.jni.socket.AprSocket.getKeySize()", "public int getKeySize() throws java.io.IOException"], ["int", "org.apache.tomcat.jni.socket.AprSocket.getRemotePort()", "public int getRemotePort() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.jni.socket.AprSocket.getRemoteAddress()", "public java.lang.String getRemoteAddress() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.jni.socket.AprSocket.getRemoteHostname()", "public java.lang.String getRemoteHostname() throws java.io.IOException"], ["int", "org.apache.tomcat.jni.socket.AprSocket.getLocalPort()", "public int getLocalPort() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.jni.socket.AprSocket.getLocalAddress()", "public java.lang.String getLocalAddress() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.jni.socket.AprSocket.getLocalHostname()", "public java.lang.String getLocalHostname() throws java.io.IOException"], ["boolean", "org.apache.tomcat.jni.socket.AprSocket.isBlocking()", "public boolean isBlocking()"], ["boolean", "org.apache.tomcat.jni.socket.AprSocket.isError()", "public boolean isError()"], ["void", "org.apache.tomcat.jni.socket.AprSocket.run()", "public void run()"], ["void", "org.apache.tomcat.jni.socket.AprSocket.blockingStartTLS()", "public void blockingStartTLS() throws java.io.IOException"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext$1.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)", "public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)"], ["java.lang.Thread", "org.apache.tomcat.jni.socket.AprSocketContext$2.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext$AcceptorDispatchThread.run()", "public void run()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext$AcceptorThread.run()", "public void run()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext$AprPoller.run()", "public void run()"], ["boolean", "org.apache.tomcat.jni.socket.AprSocketContext$AprPoller.isPollerThread()", "public boolean isPollerThread()"], ["org.apache.tomcat.jni.socket.AprSocketContext", "org.apache.tomcat.jni.socket.AprSocketContext()", "public org.apache.tomcat.jni.socket.AprSocketContext()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setPollerThreadCount(int)", "public void setPollerThreadCount(int)"], ["int", "org.apache.tomcat.jni.socket.AprSocketContext.getPollerThreadCount()", "public int getPollerThreadCount()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setMaxconnections(int)", "public void setMaxconnections(int)"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setBacklog(int)", "public void setBacklog(int)"], ["int", "org.apache.tomcat.jni.socket.AprSocketContext.getBacklog()", "public int getBacklog()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setDeferAccept(boolean)", "public void setDeferAccept(boolean)"], ["boolean", "org.apache.tomcat.jni.socket.AprSocketContext.getDeferAccept()", "public boolean getDeferAccept()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setNpn(java.lang.String)", "public void setNpn(java.lang.String)"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setNpn(byte[])", "public void setNpn(byte[])"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setHostLoader(org.apache.tomcat.jni.socket.AprSocketContext$HostInfoLoader)", "public void setHostLoader(org.apache.tomcat.jni.socket.AprSocketContext$HostInfoLoader)"], ["boolean", "org.apache.tomcat.jni.socket.AprSocketContext.isServer()", "public boolean isServer()"], ["org.apache.tomcat.jni.socket.AprSocketContext", "org.apache.tomcat.jni.socket.AprSocketContext.setTls()", "public org.apache.tomcat.jni.socket.AprSocketContext setTls()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setTcpNoDelay(boolean)", "public void setTcpNoDelay(boolean)"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setSslProtocol(java.lang.String)", "public void setSslProtocol(java.lang.String)"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setTicketKey(byte[])", "public void setTicketKey(byte[])"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.customVerification(org.apache.tomcat.jni.socket.AprSocketContext$TlsCertVerifier)", "public void customVerification(org.apache.tomcat.jni.socket.AprSocketContext$TlsCertVerifier)"], ["org.apache.tomcat.jni.socket.AprSocketContext", "org.apache.tomcat.jni.socket.AprSocketContext.setKeys(java.lang.String, java.lang.String)", "public org.apache.tomcat.jni.socket.AprSocketContext setKeys(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.jni.socket.AprSocketContext.getSSLCipherSuite()", "public java.lang.String getSSLCipherSuite()"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.setSSLCipherSuite(java.lang.String)", "public void setSSLCipherSuite(java.lang.String)"], ["org.apache.tomcat.jni.socket.HostInfo", "org.apache.tomcat.jni.socket.AprSocketContext.getHostInfo(java.lang.String, int, boolean)", "public org.apache.tomcat.jni.socket.HostInfo getHostInfo(java.lang.String, int, boolean)"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.listen(int)", "public void listen(int) throws java.io.IOException"], ["org.apache.tomcat.jni.socket.AprSocket", "org.apache.tomcat.jni.socket.AprSocketContext.socket(java.lang.String, int, boolean)", "public org.apache.tomcat.jni.socket.AprSocket socket(java.lang.String, int, boolean)"], ["org.apache.tomcat.jni.socket.AprSocket", "org.apache.tomcat.jni.socket.AprSocketContext.socket(org.apache.tomcat.jni.socket.HostInfo)", "public org.apache.tomcat.jni.socket.AprSocket socket(org.apache.tomcat.jni.socket.HostInfo)"], ["org.apache.tomcat.jni.socket.AprSocket", "org.apache.tomcat.jni.socket.AprSocketContext.socket(long)", "public org.apache.tomcat.jni.socket.AprSocket socket(long)"], ["void", "org.apache.tomcat.jni.socket.AprSocketContext.stop()", "public void stop()"], ["org.apache.tomcat.jni.socket.HostInfo", "org.apache.tomcat.jni.socket.HostInfo()", "public org.apache.tomcat.jni.socket.HostInfo()"], ["org.apache.tomcat.jni.socket.HostInfo", "org.apache.tomcat.jni.socket.HostInfo(java.lang.String, int, boolean)", "public org.apache.tomcat.jni.socket.HostInfo(java.lang.String, int, boolean)"], ["java.lang.String", "org.apache.tomcat.jni.socket.HostInfo.getNpn()", "public java.lang.String getNpn()"], ["void", "org.apache.tomcat.jni.socket.HostInfo.setNpn(java.lang.String)", "public void setNpn(java.lang.String)"], ["org.apache.tomcat.util.Diagnostics", "org.apache.tomcat.util.Diagnostics()", "public org.apache.tomcat.util.Diagnostics()"], ["boolean", "org.apache.tomcat.util.Diagnostics.isThreadContentionMonitoringEnabled()", "public static boolean isThreadContentionMonitoringEnabled()"], ["void", "org.apache.tomcat.util.Diagnostics.setThreadContentionMonitoringEnabled(boolean)", "public static void setThreadContentionMonitoringEnabled(boolean)"], ["boolean", "org.apache.tomcat.util.Diagnostics.isThreadCpuTimeEnabled()", "public static boolean isThreadCpuTimeEnabled()"], ["void", "org.apache.tomcat.util.Diagnostics.setThreadCpuTimeEnabled(boolean)", "public static void setThreadCpuTimeEnabled(boolean)"], ["void", "org.apache.tomcat.util.Diagnostics.resetPeakThreadCount()", "public static void resetPeakThreadCount()"], ["void", "org.apache.tomcat.util.Diagnostics.setVerboseClassLoading(boolean)", "public static void setVerboseClassLoading(boolean)"], ["void", "org.apache.tomcat.util.Diagnostics.setLoggerLevel(java.lang.String, java.lang.String)", "public static void setLoggerLevel(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.Diagnostics.setVerboseGarbageCollection(boolean)", "public static void setVerboseGarbageCollection(boolean)"], ["void", "org.apache.tomcat.util.Diagnostics.gc()", "public static void gc()"], ["void", "org.apache.tomcat.util.Diagnostics.resetPeakUsage(java.lang.String)", "public static void resetPeakUsage(java.lang.String)"], ["boolean", "org.apache.tomcat.util.Diagnostics.setUsageThreshold(java.lang.String, long)", "public static boolean setUsageThreshold(java.lang.String, long)"], ["boolean", "org.apache.tomcat.util.Diagnostics.setCollectionUsageThreshold(java.lang.String, long)", "public static boolean setCollectionUsageThreshold(java.lang.String, long)"], ["java.lang.String", "org.apache.tomcat.util.Diagnostics.findDeadlock()", "public static java.lang.String findDeadlock()"], ["java.lang.String", "org.apache.tomcat.util.Diagnostics.getThreadDump()", "public static java.lang.String getThreadDump()"], ["java.lang.String", "org.apache.tomcat.util.Diagnostics.getThreadDump(java.util.Enumeration<java.util.Locale>)", "public static java.lang.String getThreadDump(java.util.Enumeration<java.util.Locale>)"], ["java.lang.String", "org.apache.tomcat.util.Diagnostics.getThreadDump(org.apache.tomcat.util.res.StringManager)", "public static java.lang.String getThreadDump(org.apache.tomcat.util.res.StringManager)"], ["java.lang.String", "org.apache.tomcat.util.Diagnostics.getVMInfo()", "public static java.lang.String getVMInfo()"], ["java.lang.String", "org.apache.tomcat.util.Diagnostics.getVMInfo(java.util.Enumeration<java.util.Locale>)", "public static java.lang.String getVMInfo(java.util.Enumeration<java.util.Locale>)"], ["java.lang.String", "org.apache.tomcat.util.Diagnostics.getVMInfo(org.apache.tomcat.util.res.StringManager)", "public static java.lang.String getVMInfo(org.apache.tomcat.util.res.StringManager)"], ["org.apache.tomcat.util.ExceptionUtils", "org.apache.tomcat.util.ExceptionUtils()", "public org.apache.tomcat.util.ExceptionUtils()"], ["void", "org.apache.tomcat.util.ExceptionUtils.handleThrowable(java.lang.Throwable)", "public static void handleThrowable(java.lang.Throwable)"], ["java.lang.Throwable", "org.apache.tomcat.util.ExceptionUtils.unwrapInvocationTargetException(java.lang.Throwable)", "public static java.lang.Throwable unwrapInvocationTargetException(java.lang.Throwable)"], ["org.apache.tomcat.util.IntrospectionUtils", "org.apache.tomcat.util.IntrospectionUtils()", "public org.apache.tomcat.util.IntrospectionUtils()"], ["boolean", "org.apache.tomcat.util.IntrospectionUtils.setProperty(java.lang.Object, java.lang.String, java.lang.String)", "public static boolean setProperty(java.lang.Object, java.lang.String, java.lang.String)"], ["boolean", "org.apache.tomcat.util.IntrospectionUtils.setProperty(java.lang.Object, java.lang.String, java.lang.String, boolean)", "public static boolean setProperty(java.lang.Object, java.lang.String, java.lang.String, boolean)"], ["java.lang.Object", "org.apache.tomcat.util.IntrospectionUtils.getProperty(java.lang.Object, java.lang.String)", "public static java.lang.Object getProperty(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.IntrospectionUtils.replaceProperties(java.lang.String, java.util.Hashtable<java.lang.Object, java.lang.Object>, org.apache.tomcat.util.IntrospectionUtils$PropertySource[])", "public static java.lang.String replaceProperties(java.lang.String, java.util.Hashtable<java.lang.Object, java.lang.Object>, org.apache.tomcat.util.IntrospectionUtils$PropertySource[])"], ["java.lang.String", "org.apache.tomcat.util.IntrospectionUtils.capitalize(java.lang.String)", "public static java.lang.String capitalize(java.lang.String)"], ["void", "org.apache.tomcat.util.IntrospectionUtils.clear()", "public static void clear()"], ["java.lang.reflect.Method[]", "org.apache.tomcat.util.IntrospectionUtils.findMethods(java.lang.Class<?>)", "public static java.lang.reflect.Method[] findMethods(java.lang.Class<?>)"], ["java.lang.reflect.Method", "org.apache.tomcat.util.IntrospectionUtils.findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>[])", "public static java.lang.reflect.Method findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>[])"], ["java.lang.Object", "org.apache.tomcat.util.IntrospectionUtils.callMethod1(java.lang.Object, java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassLoader)", "public static java.lang.Object callMethod1(java.lang.Object, java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassLoader) throws java.lang.Exception"], ["java.lang.Object", "org.apache.tomcat.util.IntrospectionUtils.callMethodN(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class<?>[])", "public static java.lang.Object callMethodN(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class<?>[]) throws java.lang.Exception"], ["java.lang.Object", "org.apache.tomcat.util.IntrospectionUtils.convert(java.lang.String, java.lang.Class<?>)", "public static java.lang.Object convert(java.lang.String, java.lang.Class<?>)"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.AnnotationElementValue.stringifyValue()", "public java.lang.String stringifyValue()"], ["org.apache.tomcat.util.bcel.classfile.AnnotationEntry", "org.apache.tomcat.util.bcel.classfile.AnnotationElementValue.getAnnotationEntry()", "public org.apache.tomcat.util.bcel.classfile.AnnotationEntry getAnnotationEntry()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.AnnotationEntry.getAnnotationType()", "public java.lang.String getAnnotationType()"], ["java.util.List<org.apache.tomcat.util.bcel.classfile.ElementValuePair>", "org.apache.tomcat.util.bcel.classfile.AnnotationEntry.getElementValuePairs()", "public java.util.List<org.apache.tomcat.util.bcel.classfile.ElementValuePair> getElementValuePairs()"], ["org.apache.tomcat.util.bcel.classfile.AnnotationEntry[]", "org.apache.tomcat.util.bcel.classfile.Annotations.getAnnotationEntries()", "public org.apache.tomcat.util.bcel.classfile.AnnotationEntry[] getAnnotationEntries()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.ArrayElementValue.stringifyValue()", "public java.lang.String stringifyValue()"], ["org.apache.tomcat.util.bcel.classfile.ElementValue[]", "org.apache.tomcat.util.bcel.classfile.ArrayElementValue.getElementValuesArray()", "public org.apache.tomcat.util.bcel.classfile.ElementValue[] getElementValuesArray()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.ClassElementValue.stringifyValue()", "public java.lang.String stringifyValue()"], ["org.apache.tomcat.util.bcel.classfile.ClassFormatException", "org.apache.tomcat.util.bcel.classfile.ClassFormatException()", "public org.apache.tomcat.util.bcel.classfile.ClassFormatException()"], ["org.apache.tomcat.util.bcel.classfile.ClassFormatException", "org.apache.tomcat.util.bcel.classfile.ClassFormatException(java.lang.String)", "public org.apache.tomcat.util.bcel.classfile.ClassFormatException(java.lang.String)"], ["org.apache.tomcat.util.bcel.classfile.ClassParser", "org.apache.tomcat.util.bcel.classfile.ClassParser(java.io.InputStream)", "public org.apache.tomcat.util.bcel.classfile.ClassParser(java.io.InputStream)"], ["org.apache.tomcat.util.bcel.classfile.JavaClass", "org.apache.tomcat.util.bcel.classfile.ClassParser.parse()", "public org.apache.tomcat.util.bcel.classfile.JavaClass parse() throws java.io.IOException, org.apache.tomcat.util.bcel.classfile.ClassFormatException"], ["byte", "org.apache.tomcat.util.bcel.classfile.Constant.getTag()", "public final byte getTag()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.Constant.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.bcel.classfile.ConstantClass.getNameIndex()", "public final int getNameIndex()"], ["double", "org.apache.tomcat.util.bcel.classfile.ConstantDouble.getBytes()", "public final double getBytes()"], ["float", "org.apache.tomcat.util.bcel.classfile.ConstantFloat.getBytes()", "public final float getBytes()"], ["int", "org.apache.tomcat.util.bcel.classfile.ConstantInteger.getBytes()", "public final int getBytes()"], ["long", "org.apache.tomcat.util.bcel.classfile.ConstantLong.getBytes()", "public final long getBytes()"], ["org.apache.tomcat.util.bcel.classfile.Constant", "org.apache.tomcat.util.bcel.classfile.ConstantPool.getConstant(int)", "public org.apache.tomcat.util.bcel.classfile.Constant getConstant(int)"], ["org.apache.tomcat.util.bcel.classfile.Constant", "org.apache.tomcat.util.bcel.classfile.ConstantPool.getConstant(int, byte)", "public org.apache.tomcat.util.bcel.classfile.Constant getConstant(int, byte) throws org.apache.tomcat.util.bcel.classfile.ClassFormatException"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.ConstantUtf8.getBytes()", "public final java.lang.String getBytes()"], ["org.apache.tomcat.util.bcel.classfile.ElementValue", "org.apache.tomcat.util.bcel.classfile.ElementValue.readElementValue(java.io.DataInput, org.apache.tomcat.util.bcel.classfile.ConstantPool)", "public static org.apache.tomcat.util.bcel.classfile.ElementValue readElementValue(java.io.DataInput, org.apache.tomcat.util.bcel.classfile.ConstantPool) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.ElementValuePair.getNameString()", "public java.lang.String getNameString()"], ["org.apache.tomcat.util.bcel.classfile.ElementValue", "org.apache.tomcat.util.bcel.classfile.ElementValuePair.getValue()", "public final org.apache.tomcat.util.bcel.classfile.ElementValue getValue()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.EnumElementValue.stringifyValue()", "public java.lang.String stringifyValue()"], ["org.apache.tomcat.util.bcel.classfile.FastDataInputStream", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream(java.io.InputStream, int)", "public org.apache.tomcat.util.bcel.classfile.FastDataInputStream(java.io.InputStream, int)"], ["int", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.read(byte[])", "public final int read(byte[]) throws java.io.IOException"], ["void", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readFully(byte[])", "public final void readFully(byte[]) throws java.io.IOException"], ["void", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readFully(byte[], int, int)", "public final void readFully(byte[], int, int) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readBoolean()", "public boolean readBoolean() throws java.io.IOException"], ["byte", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readByte()", "public final byte readByte() throws java.io.IOException"], ["int", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException"], ["short", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readShort()", "public final short readShort() throws java.io.IOException"], ["int", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readUnsignedShort()", "public int readUnsignedShort() throws java.io.IOException"], ["char", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readChar()", "public final char readChar() throws java.io.IOException"], ["int", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readInt()", "public final int readInt() throws java.io.IOException"], ["long", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readLong()", "public final long readLong() throws java.io.IOException"], ["float", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readFloat()", "public final float readFloat() throws java.io.IOException"], ["double", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readDouble()", "public double readDouble() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readUTF()", "public final java.lang.String readUTF() throws java.io.IOException"], ["int", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.FastDataInputStream.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["int", "org.apache.tomcat.util.bcel.classfile.JavaClass.getAccessFlags()", "public final int getAccessFlags()"], ["org.apache.tomcat.util.bcel.classfile.AnnotationEntry[]", "org.apache.tomcat.util.bcel.classfile.JavaClass.getAnnotationEntries()", "public org.apache.tomcat.util.bcel.classfile.AnnotationEntry[] getAnnotationEntries()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.JavaClass.getClassName()", "public java.lang.String getClassName()"], ["java.lang.String[]", "org.apache.tomcat.util.bcel.classfile.JavaClass.getInterfaceNames()", "public java.lang.String[] getInterfaceNames()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.JavaClass.getSuperclassName()", "public java.lang.String getSuperclassName()"], ["int", "org.apache.tomcat.util.bcel.classfile.SimpleElementValue.getIndex()", "public int getIndex()"], ["java.lang.String", "org.apache.tomcat.util.bcel.classfile.SimpleElementValue.stringifyValue()", "public java.lang.String stringifyValue()"], ["org.apache.tomcat.util.buf.Ascii", "org.apache.tomcat.util.buf.Ascii()", "public org.apache.tomcat.util.buf.Ascii()"], ["int", "org.apache.tomcat.util.buf.Ascii.toLower(int)", "public static int toLower(int)"], ["long", "org.apache.tomcat.util.buf.Ascii.parseLong(byte[], int, int)", "public static long parseLong(byte[], int, int) throws java.lang.NumberFormatException"], ["java.nio.charset.Charset", "org.apache.tomcat.util.buf.B2CConverter.getCharset(java.lang.String)", "public static java.nio.charset.Charset getCharset(java.lang.String) throws java.io.UnsupportedEncodingException"], ["java.nio.charset.Charset", "org.apache.tomcat.util.buf.B2CConverter.getCharsetLower(java.lang.String)", "public static java.nio.charset.Charset getCharsetLower(java.lang.String) throws java.io.UnsupportedEncodingException"], ["org.apache.tomcat.util.buf.B2CConverter", "org.apache.tomcat.util.buf.B2CConverter(java.lang.String)", "public org.apache.tomcat.util.buf.B2CConverter(java.lang.String) throws java.io.IOException"], ["org.apache.tomcat.util.buf.B2CConverter", "org.apache.tomcat.util.buf.B2CConverter(java.lang.String, boolean)", "public org.apache.tomcat.util.buf.B2CConverter(java.lang.String, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.B2CConverter.recycle()", "public void recycle()"], ["void", "org.apache.tomcat.util.buf.B2CConverter.convert(org.apache.tomcat.util.buf.ByteChunk, org.apache.tomcat.util.buf.CharChunk, boolean)", "public void convert(org.apache.tomcat.util.buf.ByteChunk, org.apache.tomcat.util.buf.CharChunk, boolean) throws java.io.IOException"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.tomcat.util.buf.ByteChunk()", "public org.apache.tomcat.util.buf.ByteChunk()"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.tomcat.util.buf.ByteChunk(int)", "public org.apache.tomcat.util.buf.ByteChunk(int)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.isNull()", "public boolean isNull()"], ["void", "org.apache.tomcat.util.buf.ByteChunk.recycle()", "public void recycle()"], ["void", "org.apache.tomcat.util.buf.ByteChunk.reset()", "public void reset()"], ["void", "org.apache.tomcat.util.buf.ByteChunk.allocate(int, int)", "public void allocate(int, int)"], ["void", "org.apache.tomcat.util.buf.ByteChunk.setBytes(byte[], int, int)", "public void setBytes(byte[], int, int)"], ["void", "org.apache.tomcat.util.buf.ByteChunk.setCharset(java.nio.charset.Charset)", "public void setCharset(java.nio.charset.Charset)"], ["java.nio.charset.Charset", "org.apache.tomcat.util.buf.ByteChunk.getCharset()", "public java.nio.charset.Charset getCharset()"], ["byte[]", "org.apache.tomcat.util.buf.ByteChunk.getBytes()", "public byte[] getBytes()"], ["byte[]", "org.apache.tomcat.util.buf.ByteChunk.getBuffer()", "public byte[] getBuffer()"], ["int", "org.apache.tomcat.util.buf.ByteChunk.getStart()", "public int getStart()"], ["int", "org.apache.tomcat.util.buf.ByteChunk.getOffset()", "public int getOffset()"], ["void", "org.apache.tomcat.util.buf.ByteChunk.setOffset(int)", "public void setOffset(int)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.getLength()", "public int getLength()"], ["void", "org.apache.tomcat.util.buf.ByteChunk.setLimit(int)", "public void setLimit(int)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.getLimit()", "public int getLimit()"], ["void", "org.apache.tomcat.util.buf.ByteChunk.setByteInputChannel(org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel)", "public void setByteInputChannel(org.apache.tomcat.util.buf.ByteChunk$ByteInputChannel)"], ["void", "org.apache.tomcat.util.buf.ByteChunk.setByteOutputChannel(org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel)", "public void setByteOutputChannel(org.apache.tomcat.util.buf.ByteChunk$ByteOutputChannel)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.getEnd()", "public int getEnd()"], ["void", "org.apache.tomcat.util.buf.ByteChunk.setEnd(int)", "public void setEnd(int)"], ["void", "org.apache.tomcat.util.buf.ByteChunk.append(byte)", "public void append(byte) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.ByteChunk.append(org.apache.tomcat.util.buf.ByteChunk)", "public void append(org.apache.tomcat.util.buf.ByteChunk) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.ByteChunk.append(byte[], int, int)", "public void append(byte[], int, int) throws java.io.IOException"], ["int", "org.apache.tomcat.util.buf.ByteChunk.substract()", "public int substract() throws java.io.IOException"], ["byte", "org.apache.tomcat.util.buf.ByteChunk.substractB()", "public byte substractB() throws java.io.IOException"], ["int", "org.apache.tomcat.util.buf.ByteChunk.substract(byte[], int, int)", "public int substract(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.ByteChunk.flushBuffer()", "public void flushBuffer() throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.ByteChunk.makeSpace(int)", "public void makeSpace(int)"], ["java.lang.String", "org.apache.tomcat.util.buf.ByteChunk.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.tomcat.util.buf.ByteChunk.toStringInternal()", "public java.lang.String toStringInternal()"], ["long", "org.apache.tomcat.util.buf.ByteChunk.getLong()", "public long getLong()"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.equals(java.lang.String)", "public boolean equals(java.lang.String)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.equalsIgnoreCase(java.lang.String)", "public boolean equalsIgnoreCase(java.lang.String)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.equals(org.apache.tomcat.util.buf.ByteChunk)", "public boolean equals(org.apache.tomcat.util.buf.ByteChunk)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.equals(byte[], int, int)", "public boolean equals(byte[], int, int)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.equals(org.apache.tomcat.util.buf.CharChunk)", "public boolean equals(org.apache.tomcat.util.buf.CharChunk)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.equals(char[], int, int)", "public boolean equals(char[], int, int)"], ["boolean", "org.apache.tomcat.util.buf.ByteChunk.startsWithIgnoreCase(java.lang.String, int)", "public boolean startsWithIgnoreCase(java.lang.String, int)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.indexOf(java.lang.String, int, int, int)", "public int indexOf(java.lang.String, int, int, int)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.hashCode()", "public int hashCode()"], ["int", "org.apache.tomcat.util.buf.ByteChunk.hash()", "public int hash()"], ["int", "org.apache.tomcat.util.buf.ByteChunk.indexOf(char, int)", "public int indexOf(char, int)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.indexOf(byte[], int, int, char)", "public static int indexOf(byte[], int, int, char)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.findByte(byte[], int, int, byte)", "public static int findByte(byte[], int, int, byte)"], ["int", "org.apache.tomcat.util.buf.ByteChunk.findBytes(byte[], int, int, byte[])", "public static int findBytes(byte[], int, int, byte[])"], ["byte[]", "org.apache.tomcat.util.buf.ByteChunk.convertToBytes(java.lang.String)", "public static final byte[] convertToBytes(java.lang.String)"], ["org.apache.tomcat.util.buf.C2BConverter", "org.apache.tomcat.util.buf.C2BConverter(java.lang.String)", "public org.apache.tomcat.util.buf.C2BConverter(java.lang.String) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.C2BConverter.recycle()", "public void recycle()"], ["boolean", "org.apache.tomcat.util.buf.C2BConverter.isUndeflow()", "public boolean isUndeflow()"], ["void", "org.apache.tomcat.util.buf.C2BConverter.convert(org.apache.tomcat.util.buf.CharChunk, org.apache.tomcat.util.buf.ByteChunk)", "public void convert(org.apache.tomcat.util.buf.CharChunk, org.apache.tomcat.util.buf.ByteChunk) throws java.io.IOException"], ["org.apache.tomcat.util.buf.CharChunk", "org.apache.tomcat.util.buf.CharChunk()", "public org.apache.tomcat.util.buf.CharChunk()"], ["org.apache.tomcat.util.buf.CharChunk", "org.apache.tomcat.util.buf.CharChunk(int)", "public org.apache.tomcat.util.buf.CharChunk(int)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.isNull()", "public boolean isNull()"], ["void", "org.apache.tomcat.util.buf.CharChunk.recycle()", "public void recycle()"], ["void", "org.apache.tomcat.util.buf.CharChunk.allocate(int, int)", "public void allocate(int, int)"], ["void", "org.apache.tomcat.util.buf.CharChunk.setOptimizedWrite(boolean)", "public void setOptimizedWrite(boolean)"], ["void", "org.apache.tomcat.util.buf.CharChunk.setChars(char[], int, int)", "public void setChars(char[], int, int)"], ["void", "org.apache.tomcat.util.buf.CharChunk.setLimit(int)", "public void setLimit(int)"], ["int", "org.apache.tomcat.util.buf.CharChunk.getLimit()", "public int getLimit()"], ["void", "org.apache.tomcat.util.buf.CharChunk.setCharInputChannel(org.apache.tomcat.util.buf.CharChunk$CharInputChannel)", "public void setCharInputChannel(org.apache.tomcat.util.buf.CharChunk$CharInputChannel)"], ["void", "org.apache.tomcat.util.buf.CharChunk.setCharOutputChannel(org.apache.tomcat.util.buf.CharChunk$CharOutputChannel)", "public void setCharOutputChannel(org.apache.tomcat.util.buf.CharChunk$CharOutputChannel)"], ["char[]", "org.apache.tomcat.util.buf.CharChunk.getChars()", "public char[] getChars()"], ["char[]", "org.apache.tomcat.util.buf.CharChunk.getBuffer()", "public char[] getBuffer()"], ["int", "org.apache.tomcat.util.buf.CharChunk.getStart()", "public int getStart()"], ["int", "org.apache.tomcat.util.buf.CharChunk.getOffset()", "public int getOffset()"], ["void", "org.apache.tomcat.util.buf.CharChunk.setOffset(int)", "public void setOffset(int)"], ["int", "org.apache.tomcat.util.buf.CharChunk.getLength()", "public int getLength()"], ["int", "org.apache.tomcat.util.buf.CharChunk.getEnd()", "public int getEnd()"], ["void", "org.apache.tomcat.util.buf.CharChunk.setEnd(int)", "public void setEnd(int)"], ["void", "org.apache.tomcat.util.buf.CharChunk.append(char)", "public void append(char) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.CharChunk.append(org.apache.tomcat.util.buf.CharChunk)", "public void append(org.apache.tomcat.util.buf.CharChunk) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.CharChunk.append(char[], int, int)", "public void append(char[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.CharChunk.append(java.lang.String)", "public void append(java.lang.String) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.CharChunk.append(java.lang.String, int, int)", "public void append(java.lang.String, int, int) throws java.io.IOException"], ["int", "org.apache.tomcat.util.buf.CharChunk.substract()", "public int substract() throws java.io.IOException"], ["int", "org.apache.tomcat.util.buf.CharChunk.substract(char[], int, int)", "public int substract(char[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.CharChunk.flushBuffer()", "public void flushBuffer() throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.CharChunk.makeSpace(int)", "public void makeSpace(int)"], ["java.lang.String", "org.apache.tomcat.util.buf.CharChunk.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.tomcat.util.buf.CharChunk.toStringInternal()", "public java.lang.String toStringInternal()"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.equals(java.lang.String)", "public boolean equals(java.lang.String)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.equalsIgnoreCase(java.lang.String)", "public boolean equalsIgnoreCase(java.lang.String)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.equals(org.apache.tomcat.util.buf.CharChunk)", "public boolean equals(org.apache.tomcat.util.buf.CharChunk)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.equals(char[], int, int)", "public boolean equals(char[], int, int)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.startsWith(java.lang.String)", "public boolean startsWith(java.lang.String)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.startsWithIgnoreCase(java.lang.String, int)", "public boolean startsWithIgnoreCase(java.lang.String, int)"], ["boolean", "org.apache.tomcat.util.buf.CharChunk.endsWith(java.lang.String)", "public boolean endsWith(java.lang.String)"], ["int", "org.apache.tomcat.util.buf.CharChunk.hashCode()", "public int hashCode()"], ["int", "org.apache.tomcat.util.buf.CharChunk.hash()", "public int hash()"], ["int", "org.apache.tomcat.util.buf.CharChunk.indexOf(char)", "public int indexOf(char)"], ["int", "org.apache.tomcat.util.buf.CharChunk.indexOf(char, int)", "public int indexOf(char, int)"], ["int", "org.apache.tomcat.util.buf.CharChunk.indexOf(char[], int, int, char)", "public static int indexOf(char[], int, int, char)"], ["int", "org.apache.tomcat.util.buf.CharChunk.indexOf(java.lang.String, int, int, int)", "public int indexOf(java.lang.String, int, int, int)"], ["char", "org.apache.tomcat.util.buf.CharChunk.charAt(int)", "public char charAt(int)"], ["java.lang.CharSequence", "org.apache.tomcat.util.buf.CharChunk.subSequence(int, int)", "public java.lang.CharSequence subSequence(int, int)"], ["int", "org.apache.tomcat.util.buf.CharChunk.length()", "public int length()"], ["org.apache.tomcat.util.buf.Constants", "org.apache.tomcat.util.buf.Constants()", "public org.apache.tomcat.util.buf.Constants()"], ["org.apache.tomcat.util.buf.HexUtils", "org.apache.tomcat.util.buf.HexUtils()", "public org.apache.tomcat.util.buf.HexUtils()"], ["int", "org.apache.tomcat.util.buf.HexUtils.getDec(int)", "public static int getDec(int)"], ["byte", "org.apache.tomcat.util.buf.HexUtils.getHex(int)", "public static byte getHex(int)"], ["java.lang.String", "org.apache.tomcat.util.buf.HexUtils.toHexString(byte[])", "public static java.lang.String toHexString(byte[])"], ["byte[]", "org.apache.tomcat.util.buf.HexUtils.fromHexString(java.lang.String)", "public static byte[] fromHexString(java.lang.String)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.buf.MessageBytes$MessageBytesFactory.newInstance()", "public org.apache.tomcat.util.buf.MessageBytes newInstance()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.buf.MessageBytes.newInstance()", "public static org.apache.tomcat.util.buf.MessageBytes newInstance()"], ["boolean", "org.apache.tomcat.util.buf.MessageBytes.isNull()", "public boolean isNull()"], ["void", "org.apache.tomcat.util.buf.MessageBytes.recycle()", "public void recycle()"], ["void", "org.apache.tomcat.util.buf.MessageBytes.setBytes(byte[], int, int)", "public void setBytes(byte[], int, int)"], ["void", "org.apache.tomcat.util.buf.MessageBytes.setChars(char[], int, int)", "public void setChars(char[], int, int)"], ["void", "org.apache.tomcat.util.buf.MessageBytes.setString(java.lang.String)", "public void setString(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.buf.MessageBytes.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.buf.MessageBytes.getType()", "public int getType()"], ["org.apache.tomcat.util.buf.ByteChunk", "org.apache.tomcat.util.buf.MessageBytes.getByteChunk()", "public org.apache.tomcat.util.buf.ByteChunk getByteChunk()"], ["org.apache.tomcat.util.buf.CharChunk", "org.apache.tomcat.util.buf.MessageBytes.getCharChunk()", "public org.apache.tomcat.util.buf.CharChunk getCharChunk()"], ["java.lang.String", "org.apache.tomcat.util.buf.MessageBytes.getString()", "public java.lang.String getString()"], ["void", "org.apache.tomcat.util.buf.MessageBytes.toBytes()", "public void toBytes()"], ["void", "org.apache.tomcat.util.buf.MessageBytes.toChars()", "public void toChars()"], ["int", "org.apache.tomcat.util.buf.MessageBytes.getLength()", "public int getLength()"], ["boolean", "org.apache.tomcat.util.buf.MessageBytes.equals(java.lang.String)", "public boolean equals(java.lang.String)"], ["boolean", "org.apache.tomcat.util.buf.MessageBytes.equalsIgnoreCase(java.lang.String)", "public boolean equalsIgnoreCase(java.lang.String)"], ["boolean", "org.apache.tomcat.util.buf.MessageBytes.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.tomcat.util.buf.MessageBytes.equals(org.apache.tomcat.util.buf.MessageBytes)", "public boolean equals(org.apache.tomcat.util.buf.MessageBytes)"], ["boolean", "org.apache.tomcat.util.buf.MessageBytes.startsWithIgnoreCase(java.lang.String, int)", "public boolean startsWithIgnoreCase(java.lang.String, int)"], ["int", "org.apache.tomcat.util.buf.MessageBytes.hashCode()", "public int hashCode()"], ["int", "org.apache.tomcat.util.buf.MessageBytes.indexOf(java.lang.String, int)", "public int indexOf(java.lang.String, int)"], ["int", "org.apache.tomcat.util.buf.MessageBytes.indexOf(java.lang.String)", "public int indexOf(java.lang.String)"], ["int", "org.apache.tomcat.util.buf.MessageBytes.indexOfIgnoreCase(java.lang.String, int)", "public int indexOfIgnoreCase(java.lang.String, int)"], ["void", "org.apache.tomcat.util.buf.MessageBytes.duplicate(org.apache.tomcat.util.buf.MessageBytes)", "public void duplicate(org.apache.tomcat.util.buf.MessageBytes) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.MessageBytes.setLong(long)", "public void setLong(long)"], ["long", "org.apache.tomcat.util.buf.MessageBytes.getLong()", "public long getLong()"], ["java.lang.String", "org.apache.tomcat.util.buf.StringCache$ByteEntry.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.buf.StringCache$ByteEntry.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.buf.StringCache$ByteEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.tomcat.util.buf.StringCache$CharEntry.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.buf.StringCache$CharEntry.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.buf.StringCache$CharEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.buf.StringCache", "org.apache.tomcat.util.buf.StringCache()", "public org.apache.tomcat.util.buf.StringCache()"], ["int", "org.apache.tomcat.util.buf.StringCache.getCacheSize()", "public int getCacheSize()"], ["void", "org.apache.tomcat.util.buf.StringCache.setCacheSize(int)", "public void setCacheSize(int)"], ["boolean", "org.apache.tomcat.util.buf.StringCache.getByteEnabled()", "public boolean getByteEnabled()"], ["void", "org.apache.tomcat.util.buf.StringCache.setByteEnabled(boolean)", "public void setByteEnabled(boolean)"], ["boolean", "org.apache.tomcat.util.buf.StringCache.getCharEnabled()", "public boolean getCharEnabled()"], ["void", "org.apache.tomcat.util.buf.StringCache.setCharEnabled(boolean)", "public void setCharEnabled(boolean)"], ["int", "org.apache.tomcat.util.buf.StringCache.getTrainThreshold()", "public int getTrainThreshold()"], ["void", "org.apache.tomcat.util.buf.StringCache.setTrainThreshold(int)", "public void setTrainThreshold(int)"], ["int", "org.apache.tomcat.util.buf.StringCache.getAccessCount()", "public int getAccessCount()"], ["int", "org.apache.tomcat.util.buf.StringCache.getHitCount()", "public int getHitCount()"], ["void", "org.apache.tomcat.util.buf.StringCache.reset()", "public void reset()"], ["java.lang.String", "org.apache.tomcat.util.buf.StringCache.toString(org.apache.tomcat.util.buf.ByteChunk)", "public static java.lang.String toString(org.apache.tomcat.util.buf.ByteChunk)"], ["java.lang.String", "org.apache.tomcat.util.buf.StringCache.toString(org.apache.tomcat.util.buf.CharChunk)", "public static java.lang.String toString(org.apache.tomcat.util.buf.CharChunk)"], ["org.apache.tomcat.util.buf.UDecoder$DecodeException", "org.apache.tomcat.util.buf.UDecoder$DecodeException(java.lang.String)", "public org.apache.tomcat.util.buf.UDecoder$DecodeException(java.lang.String)"], ["synchronized", "org.apache.tomcat.util.buf.UDecoder$DecodeException.java.lang.Throwable fillInStackTrace()", "public synchronized java.lang.Throwable fillInStackTrace()"], ["org.apache.tomcat.util.buf.UDecoder", "org.apache.tomcat.util.buf.UDecoder()", "public org.apache.tomcat.util.buf.UDecoder()"], ["void", "org.apache.tomcat.util.buf.UDecoder.convert(org.apache.tomcat.util.buf.ByteChunk, boolean)", "public void convert(org.apache.tomcat.util.buf.ByteChunk, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.UDecoder.convert(org.apache.tomcat.util.buf.CharChunk, boolean)", "public void convert(org.apache.tomcat.util.buf.CharChunk, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.buf.UDecoder.convert(org.apache.tomcat.util.buf.MessageBytes, boolean)", "public void convert(org.apache.tomcat.util.buf.MessageBytes, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.buf.UDecoder.convert(java.lang.String, boolean)", "public final java.lang.String convert(java.lang.String, boolean)"], ["java.lang.String", "org.apache.tomcat.util.buf.UDecoder.URLDecode(java.lang.String)", "public static java.lang.String URLDecode(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.buf.UDecoder.URLDecode(java.lang.String, java.lang.String)", "public static java.lang.String URLDecode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.buf.UDecoder.URLDecode(java.lang.String, java.lang.String, boolean)", "public static java.lang.String URLDecode(java.lang.String, java.lang.String, boolean)"], ["java.lang.String", "org.apache.tomcat.util.buf.UDecoder.URLDecode(byte[], java.lang.String, boolean)", "public static java.lang.String URLDecode(byte[], java.lang.String, boolean)"], ["org.apache.tomcat.util.buf.UEncoder", "org.apache.tomcat.util.buf.UEncoder()", "public org.apache.tomcat.util.buf.UEncoder()"], ["void", "org.apache.tomcat.util.buf.UEncoder.addSafeCharacter(char)", "public void addSafeCharacter(char)"], ["org.apache.tomcat.util.buf.CharChunk", "org.apache.tomcat.util.buf.UEncoder.encodeURL(java.lang.String, int, int)", "public org.apache.tomcat.util.buf.CharChunk encodeURL(java.lang.String, int, int) throws java.io.IOException"], ["org.apache.tomcat.util.buf.Utf8Decoder", "org.apache.tomcat.util.buf.Utf8Decoder()", "public org.apache.tomcat.util.buf.Utf8Decoder()"], ["org.apache.tomcat.util.buf.Utf8Encoder", "org.apache.tomcat.util.buf.Utf8Encoder()", "public org.apache.tomcat.util.buf.Utf8Encoder()"], ["org.apache.tomcat.util.codec.DecoderException", "org.apache.tomcat.util.codec.DecoderException()", "public org.apache.tomcat.util.codec.DecoderException()"], ["org.apache.tomcat.util.codec.DecoderException", "org.apache.tomcat.util.codec.DecoderException(java.lang.String)", "public org.apache.tomcat.util.codec.DecoderException(java.lang.String)"], ["org.apache.tomcat.util.codec.DecoderException", "org.apache.tomcat.util.codec.DecoderException(java.lang.String, java.lang.Throwable)", "public org.apache.tomcat.util.codec.DecoderException(java.lang.String, java.lang.Throwable)"], ["org.apache.tomcat.util.codec.DecoderException", "org.apache.tomcat.util.codec.DecoderException(java.lang.Throwable)", "public org.apache.tomcat.util.codec.DecoderException(java.lang.Throwable)"], ["org.apache.tomcat.util.codec.EncoderException", "org.apache.tomcat.util.codec.EncoderException()", "public org.apache.tomcat.util.codec.EncoderException()"], ["org.apache.tomcat.util.codec.EncoderException", "org.apache.tomcat.util.codec.EncoderException(java.lang.String)", "public org.apache.tomcat.util.codec.EncoderException(java.lang.String)"], ["org.apache.tomcat.util.codec.EncoderException", "org.apache.tomcat.util.codec.EncoderException(java.lang.String, java.lang.Throwable)", "public org.apache.tomcat.util.codec.EncoderException(java.lang.String, java.lang.Throwable)"], ["org.apache.tomcat.util.codec.EncoderException", "org.apache.tomcat.util.codec.EncoderException(java.lang.Throwable)", "public org.apache.tomcat.util.codec.EncoderException(java.lang.Throwable)"], ["org.apache.tomcat.util.codec.binary.Base64", "org.apache.tomcat.util.codec.binary.Base64()", "public org.apache.tomcat.util.codec.binary.Base64()"], ["org.apache.tomcat.util.codec.binary.Base64", "org.apache.tomcat.util.codec.binary.Base64(boolean)", "public org.apache.tomcat.util.codec.binary.Base64(boolean)"], ["org.apache.tomcat.util.codec.binary.Base64", "org.apache.tomcat.util.codec.binary.Base64(int)", "public org.apache.tomcat.util.codec.binary.Base64(int)"], ["org.apache.tomcat.util.codec.binary.Base64", "org.apache.tomcat.util.codec.binary.Base64(int, byte[])", "public org.apache.tomcat.util.codec.binary.Base64(int, byte[])"], ["org.apache.tomcat.util.codec.binary.Base64", "org.apache.tomcat.util.codec.binary.Base64(int, byte[], boolean)", "public org.apache.tomcat.util.codec.binary.Base64(int, byte[], boolean)"], ["boolean", "org.apache.tomcat.util.codec.binary.Base64.isUrlSafe()", "public boolean isUrlSafe()"], ["boolean", "org.apache.tomcat.util.codec.binary.Base64.isBase64(byte)", "public static boolean isBase64(byte)"], ["boolean", "org.apache.tomcat.util.codec.binary.Base64.isBase64(java.lang.String)", "public static boolean isBase64(java.lang.String)"], ["boolean", "org.apache.tomcat.util.codec.binary.Base64.isBase64(byte[])", "public static boolean isBase64(byte[])"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64(byte[])", "public static byte[] encodeBase64(byte[])"], ["java.lang.String", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64String(byte[])", "public static java.lang.String encodeBase64String(byte[])"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64URLSafe(byte[])", "public static byte[] encodeBase64URLSafe(byte[])"], ["java.lang.String", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64URLSafeString(byte[])", "public static java.lang.String encodeBase64URLSafeString(byte[])"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64Chunked(byte[])", "public static byte[] encodeBase64Chunked(byte[])"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64(byte[], boolean)", "public static byte[] encodeBase64(byte[], boolean)"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64(byte[], boolean, boolean)", "public static byte[] encodeBase64(byte[], boolean, boolean)"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.encodeBase64(byte[], boolean, boolean, int)", "public static byte[] encodeBase64(byte[], boolean, boolean, int)"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.decodeBase64(java.lang.String)", "public static byte[] decodeBase64(java.lang.String)"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.decodeBase64(byte[])", "public static byte[] decodeBase64(byte[])"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.decodeBase64(byte[], int, int)", "public static byte[] decodeBase64(byte[], int, int)"], ["java.math.BigInteger", "org.apache.tomcat.util.codec.binary.Base64.decodeInteger(byte[])", "public static java.math.BigInteger decodeInteger(byte[])"], ["byte[]", "org.apache.tomcat.util.codec.binary.Base64.encodeInteger(java.math.BigInteger)", "public static byte[] encodeInteger(java.math.BigInteger)"], ["java.lang.String", "org.apache.tomcat.util.codec.binary.BaseNCodec$Context.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.tomcat.util.codec.binary.BaseNCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.apache.tomcat.util.codec.EncoderException"], ["java.lang.String", "org.apache.tomcat.util.codec.binary.BaseNCodec.encodeToString(byte[])", "public java.lang.String encodeToString(byte[])"], ["java.lang.String", "org.apache.tomcat.util.codec.binary.BaseNCodec.encodeAsString(byte[])", "public java.lang.String encodeAsString(byte[])"], ["java.lang.Object", "org.apache.tomcat.util.codec.binary.BaseNCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.apache.tomcat.util.codec.DecoderException"], ["byte[]", "org.apache.tomcat.util.codec.binary.BaseNCodec.decode(java.lang.String)", "public byte[] decode(java.lang.String)"], ["byte[]", "org.apache.tomcat.util.codec.binary.BaseNCodec.decode(byte[])", "public byte[] decode(byte[])"], ["byte[]", "org.apache.tomcat.util.codec.binary.BaseNCodec.decode(byte[], int, int)", "public byte[] decode(byte[], int, int)"], ["byte[]", "org.apache.tomcat.util.codec.binary.BaseNCodec.encode(byte[])", "public byte[] encode(byte[])"], ["boolean", "org.apache.tomcat.util.codec.binary.BaseNCodec.isInAlphabet(byte[], boolean)", "public boolean isInAlphabet(byte[], boolean)"], ["boolean", "org.apache.tomcat.util.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)", "public boolean isInAlphabet(java.lang.String)"], ["long", "org.apache.tomcat.util.codec.binary.BaseNCodec.getEncodedLength(byte[])", "public long getEncodedLength(byte[])"], ["org.apache.tomcat.util.codec.binary.StringUtils", "org.apache.tomcat.util.codec.binary.StringUtils()", "public org.apache.tomcat.util.codec.binary.StringUtils()"], ["byte[]", "org.apache.tomcat.util.codec.binary.StringUtils.getBytesUtf8(java.lang.String)", "public static byte[] getBytesUtf8(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.codec.binary.StringUtils.newStringUtf8(byte[])", "public static java.lang.String newStringUtf8(byte[])"], ["org.apache.tomcat.util.collections.ConcurrentCache", "org.apache.tomcat.util.collections.ConcurrentCache(int)", "public org.apache.tomcat.util.collections.ConcurrentCache(int)"], ["V", "org.apache.tomcat.util.collections.ConcurrentCache.get(K)", "public V get(K)"], ["void", "org.apache.tomcat.util.collections.ConcurrentCache.put(K, V)", "public void put(K, V)"], ["K", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1$1.getKey()", "public K getKey()"], ["V", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1$1.getValue()", "public V getValue()"], ["V", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1$1.setValue(V)", "public V setValue(V)"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1.next()", "public java.util.Map$Entry<K, V> next()"], ["void", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1$1.next()", "public java.lang.Object next()"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1.size()", "public int size()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key(java.lang.Object, java.lang.ref.ReferenceQueue<java.lang.Object>)", "public org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key(java.lang.Object, java.lang.ref.ReferenceQueue<java.lang.Object>)"], ["int", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key.ackDeath()", "public void ackDeath()"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap$Key.isDead()", "public boolean isDead()"], ["org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap()", "public org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap()"], ["void", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.maintain()", "public void maintain()"], ["int", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.size()", "public int size()"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.put(K, V)", "public V put(K, V)"], ["V", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.clear()", "public void clear()"], ["V", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.replace(K, V)", "public V replace(K, V)"], ["java.util.Collection<V>", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.apache.tomcat.util.collections.ManagedConcurrentWeakHashMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["org.apache.tomcat.util.collections.SynchronizedQueue", "org.apache.tomcat.util.collections.SynchronizedQueue()", "public org.apache.tomcat.util.collections.SynchronizedQueue()"], ["org.apache.tomcat.util.collections.SynchronizedQueue", "org.apache.tomcat.util.collections.SynchronizedQueue(int)", "public org.apache.tomcat.util.collections.SynchronizedQueue(int)"], ["synchronized", "org.apache.tomcat.util.collections.SynchronizedQueue.boolean offer(T)", "public synchronized boolean offer(T)"], ["synchronized", "org.apache.tomcat.util.collections.SynchronizedQueue.T poll()", "public synchronized T poll()"], ["synchronized", "org.apache.tomcat.util.collections.SynchronizedQueue.int size()", "public synchronized int size()"], ["synchronized", "org.apache.tomcat.util.collections.SynchronizedQueue.void clear()", "public synchronized void clear()"], ["org.apache.tomcat.util.collections.SynchronizedStack", "org.apache.tomcat.util.collections.SynchronizedStack()", "public org.apache.tomcat.util.collections.SynchronizedStack()"], ["org.apache.tomcat.util.collections.SynchronizedStack", "org.apache.tomcat.util.collections.SynchronizedStack(int, int)", "public org.apache.tomcat.util.collections.SynchronizedStack(int, int)"], ["synchronized", "org.apache.tomcat.util.collections.SynchronizedStack.boolean push(T)", "public synchronized boolean push(T)"], ["synchronized", "org.apache.tomcat.util.collections.SynchronizedStack.T pop()", "public synchronized T pop()"], ["synchronized", "org.apache.tomcat.util.collections.SynchronizedStack.void clear()", "public synchronized void clear()"], ["org.apache.tomcat.util.descriptor.Constants", "org.apache.tomcat.util.descriptor.Constants()", "public org.apache.tomcat.util.descriptor.Constants()"], ["org.apache.tomcat.util.descriptor.DigesterFactory", "org.apache.tomcat.util.descriptor.DigesterFactory()", "public org.apache.tomcat.util.descriptor.DigesterFactory()"], ["org.apache.tomcat.util.digester.Digester", "org.apache.tomcat.util.descriptor.DigesterFactory.newDigester(boolean, boolean, org.apache.tomcat.util.digester.RuleSet, boolean)", "public static org.apache.tomcat.util.digester.Digester newDigester(boolean, boolean, org.apache.tomcat.util.digester.RuleSet, boolean)"], ["org.apache.tomcat.util.descriptor.LocalResolver", "org.apache.tomcat.util.descriptor.LocalResolver(java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>, boolean)", "public org.apache.tomcat.util.descriptor.LocalResolver(java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>, boolean)"], ["org.xml.sax.InputSource", "org.apache.tomcat.util.descriptor.LocalResolver.resolveEntity(java.lang.String, java.lang.String)", "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"], ["org.xml.sax.InputSource", "org.apache.tomcat.util.descriptor.LocalResolver.resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"], ["org.xml.sax.InputSource", "org.apache.tomcat.util.descriptor.LocalResolver.getExternalSubset(java.lang.String, java.lang.String)", "public org.xml.sax.InputSource getExternalSubset(java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"], ["org.apache.tomcat.util.descriptor.XmlErrorHandler", "org.apache.tomcat.util.descriptor.XmlErrorHandler()", "public org.apache.tomcat.util.descriptor.XmlErrorHandler()"], ["void", "org.apache.tomcat.util.descriptor.XmlErrorHandler.error(org.xml.sax.SAXParseException)", "public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.descriptor.XmlErrorHandler.fatalError(org.xml.sax.SAXParseException)", "public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.descriptor.XmlErrorHandler.warning(org.xml.sax.SAXParseException)", "public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"], ["java.util.List<org.xml.sax.SAXParseException>", "org.apache.tomcat.util.descriptor.XmlErrorHandler.getErrors()", "public java.util.List<org.xml.sax.SAXParseException> getErrors()"], ["java.util.List<org.xml.sax.SAXParseException>", "org.apache.tomcat.util.descriptor.XmlErrorHandler.getWarnings()", "public java.util.List<org.xml.sax.SAXParseException> getWarnings()"], ["void", "org.apache.tomcat.util.descriptor.XmlErrorHandler.logFindings(org.apache.juli.logging.Log, java.lang.String)", "public void logFindings(org.apache.juli.logging.Log, java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser$TagPluginRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser", "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser(javax.servlet.ServletContext, boolean)", "public org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser(javax.servlet.ServletContext, boolean)"], ["void", "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser.parse(java.net.URL)", "public void parse(java.net.URL) throws java.io.IOException, org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser.addPlugin(java.lang.String, java.lang.String)", "public void addPlugin(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.tagplugin.TagPluginParser.getPlugins()", "public java.util.Map<java.lang.String, java.lang.String> getPlugins()"], ["void", "org.apache.tomcat.util.descriptor.tld.ImplicitTldRuleSet$1.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)"], ["org.apache.tomcat.util.descriptor.tld.ImplicitTldRuleSet", "org.apache.tomcat.util.descriptor.tld.ImplicitTldRuleSet()", "public org.apache.tomcat.util.descriptor.tld.ImplicitTldRuleSet()"], ["void", "org.apache.tomcat.util.descriptor.tld.ImplicitTldRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.tomcat.util.descriptor.tld.TagFileXml", "org.apache.tomcat.util.descriptor.tld.TagFileXml()", "public org.apache.tomcat.util.descriptor.tld.TagFileXml()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagFileXml.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagFileXml.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagFileXml.getPath()", "public java.lang.String getPath()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagFileXml.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagFileXml.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagFileXml.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagFileXml.getSmallIcon()", "public java.lang.String getSmallIcon()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagFileXml.setSmallIcon(java.lang.String)", "public void setSmallIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagFileXml.getLargeIcon()", "public java.lang.String getLargeIcon()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagFileXml.setLargeIcon(java.lang.String)", "public void setLargeIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagFileXml.getInfo()", "public java.lang.String getInfo()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagFileXml.setInfo(java.lang.String)", "public void setInfo(java.lang.String)"], ["org.apache.tomcat.util.descriptor.tld.TagXml", "org.apache.tomcat.util.descriptor.tld.TagXml()", "public org.apache.tomcat.util.descriptor.tld.TagXml()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getTagClass()", "public java.lang.String getTagClass()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setTagClass(java.lang.String)", "public void setTagClass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getTeiClass()", "public java.lang.String getTeiClass()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setTeiClass(java.lang.String)", "public void setTeiClass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getBodyContent()", "public java.lang.String getBodyContent()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setBodyContent(java.lang.String)", "public void setBodyContent(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getSmallIcon()", "public java.lang.String getSmallIcon()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setSmallIcon(java.lang.String)", "public void setSmallIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getLargeIcon()", "public java.lang.String getLargeIcon()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setLargeIcon(java.lang.String)", "public void setLargeIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TagXml.getInfo()", "public java.lang.String getInfo()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setInfo(java.lang.String)", "public void setInfo(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.tld.TagXml.hasDynamicAttributes()", "public boolean hasDynamicAttributes()"], ["void", "org.apache.tomcat.util.descriptor.tld.TagXml.setDynamicAttributes(boolean)", "public void setDynamicAttributes(boolean)"], ["java.util.List<javax.servlet.jsp.tagext.TagAttributeInfo>", "org.apache.tomcat.util.descriptor.tld.TagXml.getAttributes()", "public java.util.List<javax.servlet.jsp.tagext.TagAttributeInfo> getAttributes()"], ["java.util.List<javax.servlet.jsp.tagext.TagVariableInfo>", "org.apache.tomcat.util.descriptor.tld.TagXml.getVariables()", "public java.util.List<javax.servlet.jsp.tagext.TagVariableInfo> getVariables()"], ["org.apache.tomcat.util.descriptor.tld.TaglibXml", "org.apache.tomcat.util.descriptor.tld.TaglibXml()", "public org.apache.tomcat.util.descriptor.tld.TaglibXml()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getTlibVersion()", "public java.lang.String getTlibVersion()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.setTlibVersion(java.lang.String)", "public void setTlibVersion(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getJspVersion()", "public java.lang.String getJspVersion()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.setJspVersion(java.lang.String)", "public void setJspVersion(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getShortName()", "public java.lang.String getShortName()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.setShortName(java.lang.String)", "public void setShortName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getUri()", "public java.lang.String getUri()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.setUri(java.lang.String)", "public void setUri(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getInfo()", "public java.lang.String getInfo()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.setInfo(java.lang.String)", "public void setInfo(java.lang.String)"], ["org.apache.tomcat.util.descriptor.tld.ValidatorXml", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getValidator()", "public org.apache.tomcat.util.descriptor.tld.ValidatorXml getValidator()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.setValidator(org.apache.tomcat.util.descriptor.tld.ValidatorXml)", "public void setValidator(org.apache.tomcat.util.descriptor.tld.ValidatorXml)"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.addTag(org.apache.tomcat.util.descriptor.tld.TagXml)", "public void addTag(org.apache.tomcat.util.descriptor.tld.TagXml)"], ["java.util.List<org.apache.tomcat.util.descriptor.tld.TagXml>", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getTags()", "public java.util.List<org.apache.tomcat.util.descriptor.tld.TagXml> getTags()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.addTagFile(org.apache.tomcat.util.descriptor.tld.TagFileXml)", "public void addTagFile(org.apache.tomcat.util.descriptor.tld.TagFileXml)"], ["java.util.List<org.apache.tomcat.util.descriptor.tld.TagFileXml>", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getTagFiles()", "public java.util.List<org.apache.tomcat.util.descriptor.tld.TagFileXml> getTagFiles()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["java.util.List<java.lang.String>", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getListeners()", "public java.util.List<java.lang.String> getListeners()"], ["void", "org.apache.tomcat.util.descriptor.tld.TaglibXml.addFunction(java.lang.String, java.lang.String, java.lang.String)", "public void addFunction(java.lang.String, java.lang.String, java.lang.String)"], ["java.util.List<javax.servlet.jsp.tagext.FunctionInfo>", "org.apache.tomcat.util.descriptor.tld.TaglibXml.getFunctions()", "public java.util.List<javax.servlet.jsp.tagext.FunctionInfo> getFunctions()"], ["org.apache.tomcat.util.descriptor.tld.TldParser", "org.apache.tomcat.util.descriptor.tld.TldParser(boolean, boolean, boolean)", "public org.apache.tomcat.util.descriptor.tld.TldParser(boolean, boolean, boolean)"], ["org.apache.tomcat.util.descriptor.tld.TldParser", "org.apache.tomcat.util.descriptor.tld.TldParser(boolean, boolean, org.apache.tomcat.util.digester.RuleSet, boolean)", "public org.apache.tomcat.util.descriptor.tld.TldParser(boolean, boolean, org.apache.tomcat.util.digester.RuleSet, boolean)"], ["org.apache.tomcat.util.descriptor.tld.TaglibXml", "org.apache.tomcat.util.descriptor.tld.TldParser.parse(org.apache.tomcat.util.descriptor.tld.TldResourcePath)", "public org.apache.tomcat.util.descriptor.tld.TaglibXml parse(org.apache.tomcat.util.descriptor.tld.TldResourcePath) throws java.io.IOException, org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.descriptor.tld.TldParser.setClassLoader(java.lang.ClassLoader)", "public void setClassLoader(java.lang.ClassLoader)"], ["org.apache.tomcat.util.descriptor.tld.TldResourcePath", "org.apache.tomcat.util.descriptor.tld.TldResourcePath(java.net.URL, java.lang.String)", "public org.apache.tomcat.util.descriptor.tld.TldResourcePath(java.net.URL, java.lang.String)"], ["org.apache.tomcat.util.descriptor.tld.TldResourcePath", "org.apache.tomcat.util.descriptor.tld.TldResourcePath(java.net.URL, java.lang.String, java.lang.String)", "public org.apache.tomcat.util.descriptor.tld.TldResourcePath(java.net.URL, java.lang.String, java.lang.String)"], ["java.net.URL", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.getUrl()", "public java.net.URL getUrl()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.getWebappPath()", "public java.lang.String getWebappPath()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.getEntryName()", "public java.lang.String getEntryName()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.toExternalForm()", "public java.lang.String toExternalForm()"], ["java.io.InputStream", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["org.apache.tomcat.util.scan.Jar", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.getJar()", "public org.apache.tomcat.util.scan.Jar getJar() throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.tomcat.util.descriptor.tld.TldResourcePath.hashCode()", "public int hashCode()"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$1.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setRequired(boolean)", "public void setRequired(boolean)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setType(java.lang.String)", "public void setType(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setRequestTime(boolean)", "public void setRequestTime(boolean)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setFragment(boolean)", "public void setFragment(boolean)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setDeferredValue()", "public void setDeferredValue()"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setDeferredMethod()", "public void setDeferredMethod()"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setExpectedTypeName(java.lang.String)", "public void setExpectedTypeName(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.setMethodSignature(java.lang.String)", "public void setMethodSignature(java.lang.String)"], ["javax.servlet.jsp.tagext.TagAttributeInfo", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Attribute.toTagAttributeInfo()", "public javax.servlet.jsp.tagext.TagAttributeInfo toTagAttributeInfo()"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$GenericBooleanRule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$ScriptVariableRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$ScriptVariableRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$TagAttributeRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$TagAttributeRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable()", "public org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable()"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable.setNameGiven(java.lang.String)", "public void setNameGiven(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable.setNameFromAttribute(java.lang.String)", "public void setNameFromAttribute(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable.setClassName(java.lang.String)", "public void setClassName(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable.setDeclare(boolean)", "public void setDeclare(boolean)"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable.setScope(java.lang.String)", "public void setScope(java.lang.String)"], ["javax.servlet.jsp.tagext.TagVariableInfo", "org.apache.tomcat.util.descriptor.tld.TldRuleSet$Variable.toTagVariableInfo()", "public javax.servlet.jsp.tagext.TagVariableInfo toTagVariableInfo()"], ["org.apache.tomcat.util.descriptor.tld.TldRuleSet", "org.apache.tomcat.util.descriptor.tld.TldRuleSet()", "public org.apache.tomcat.util.descriptor.tld.TldRuleSet()"], ["void", "org.apache.tomcat.util.descriptor.tld.TldRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["org.apache.tomcat.util.descriptor.tld.ValidatorXml", "org.apache.tomcat.util.descriptor.tld.ValidatorXml()", "public org.apache.tomcat.util.descriptor.tld.ValidatorXml()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.tld.ValidatorXml.getValidatorClass()", "public java.lang.String getValidatorClass()"], ["void", "org.apache.tomcat.util.descriptor.tld.ValidatorXml.setValidatorClass(java.lang.String)", "public void setValidatorClass(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.tld.ValidatorXml.addInitParam(java.lang.String, java.lang.String)", "public void addInitParam(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.tld.ValidatorXml.getInitParams()", "public java.util.Map<java.lang.String, java.lang.String> getInitParams()"], ["org.apache.tomcat.util.descriptor.web.AbsoluteOrderingRule", "org.apache.tomcat.util.descriptor.web.AbsoluteOrderingRule(boolean)", "public org.apache.tomcat.util.descriptor.web.AbsoluteOrderingRule(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.AbsoluteOrderingRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.ApplicationParameter", "org.apache.tomcat.util.descriptor.web.ApplicationParameter()", "public org.apache.tomcat.util.descriptor.web.ApplicationParameter()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.getOverride()", "public boolean getOverride()"], ["void", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.setOverride(boolean)", "public void setOverride(boolean)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.getValue()", "public java.lang.String getValue()"], ["void", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ApplicationParameter.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.descriptor.web.CallMethodMultiRule", "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule(java.lang.String, int, int)", "public org.apache.tomcat.util.descriptor.web.CallMethodMultiRule(java.lang.String, int, int)"], ["void", "org.apache.tomcat.util.descriptor.web.CallMethodMultiRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.CallParamMultiRule", "org.apache.tomcat.util.descriptor.web.CallParamMultiRule(int)", "public org.apache.tomcat.util.descriptor.web.CallParamMultiRule(int)"], ["void", "org.apache.tomcat.util.descriptor.web.CallParamMultiRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.Constants", "org.apache.tomcat.util.descriptor.web.Constants()", "public org.apache.tomcat.util.descriptor.web.Constants()"], ["org.apache.tomcat.util.descriptor.web.ContextEjb", "org.apache.tomcat.util.descriptor.web.ContextEjb()", "public org.apache.tomcat.util.descriptor.web.ContextEjb()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextEjb.getHome()", "public java.lang.String getHome()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextEjb.setHome(java.lang.String)", "public void setHome(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextEjb.getLink()", "public java.lang.String getLink()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextEjb.setLink(java.lang.String)", "public void setLink(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextEjb.getRemote()", "public java.lang.String getRemote()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextEjb.setRemote(java.lang.String)", "public void setRemote(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextEjb.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextEjb.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextEjb.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextEnvironment", "org.apache.tomcat.util.descriptor.web.ContextEnvironment()", "public org.apache.tomcat.util.descriptor.web.ContextEnvironment()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextEnvironment.getOverride()", "public boolean getOverride()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextEnvironment.setOverride(boolean)", "public void setOverride(boolean)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextEnvironment.getValue()", "public java.lang.String getValue()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextEnvironment.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextEnvironment.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextEnvironment.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextEnvironment.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextHandler", "org.apache.tomcat.util.descriptor.web.ContextHandler()", "public org.apache.tomcat.util.descriptor.web.ContextHandler()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextHandler.getHandlerclass()", "public java.lang.String getHandlerclass()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextHandler.setHandlerclass(java.lang.String)", "public void setHandlerclass(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.tomcat.util.descriptor.web.ContextHandler.getLocalparts()", "public java.util.Iterator<java.lang.String> getLocalparts()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextHandler.getNamespaceuri(java.lang.String)", "public java.lang.String getNamespaceuri(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextHandler.addSoapHeaders(java.lang.String, java.lang.String)", "public void addSoapHeaders(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextHandler.setProperty(java.lang.String, java.lang.String)", "public void setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextHandler.getSoapRole(int)", "public java.lang.String getSoapRole(int)"], ["int", "org.apache.tomcat.util.descriptor.web.ContextHandler.getSoapRolesSize()", "public int getSoapRolesSize()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextHandler.addSoapRole(java.lang.String)", "public void addSoapRole(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextHandler.getPortName(int)", "public java.lang.String getPortName(int)"], ["int", "org.apache.tomcat.util.descriptor.web.ContextHandler.getPortNamesSize()", "public int getPortNamesSize()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextHandler.addPortName(java.lang.String)", "public void addPortName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextHandler.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextHandler.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextHandler.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextLocalEjb", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb()", "public org.apache.tomcat.util.descriptor.web.ContextLocalEjb()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.getHome()", "public java.lang.String getHome()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.setHome(java.lang.String)", "public void setHome(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.getLink()", "public java.lang.String getLink()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.setLink(java.lang.String)", "public void setLink(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.getLocal()", "public java.lang.String getLocal()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.setLocal(java.lang.String)", "public void setLocal(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextLocalEjb.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextResource", "org.apache.tomcat.util.descriptor.web.ContextResource()", "public org.apache.tomcat.util.descriptor.web.ContextResource()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResource.getAuth()", "public java.lang.String getAuth()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextResource.setAuth(java.lang.String)", "public void setAuth(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResource.getScope()", "public java.lang.String getScope()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextResource.setScope(java.lang.String)", "public void setScope(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextResource.getSingleton()", "public boolean getSingleton()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextResource.setSingleton(boolean)", "public void setSingleton(boolean)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResource.getCloseMethod()", "public java.lang.String getCloseMethod()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextResource.setCloseMethod(java.lang.String)", "public void setCloseMethod(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResource.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextResource.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextResource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef", "org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef()", "public org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef.getOverride()", "public boolean getOverride()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef.setOverride(boolean)", "public void setOverride(boolean)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextResourceLink", "org.apache.tomcat.util.descriptor.web.ContextResourceLink()", "public org.apache.tomcat.util.descriptor.web.ContextResourceLink()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResourceLink.getGlobal()", "public java.lang.String getGlobal()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextResourceLink.setGlobal(java.lang.String)", "public void setGlobal(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResourceLink.getFactory()", "public java.lang.String getFactory()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextResourceLink.setFactory(java.lang.String)", "public void setFactory(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextResourceLink.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextResourceLink.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextResourceLink.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextService", "org.apache.tomcat.util.descriptor.web.ContextService()", "public org.apache.tomcat.util.descriptor.web.ContextService()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getDisplayname()", "public java.lang.String getDisplayname()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setDisplayname(java.lang.String)", "public void setDisplayname(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getLargeIcon()", "public java.lang.String getLargeIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setLargeIcon(java.lang.String)", "public void setLargeIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getSmallIcon()", "public java.lang.String getSmallIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setSmallIcon(java.lang.String)", "public void setSmallIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getInterface()", "public java.lang.String getInterface()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setInterface(java.lang.String)", "public void setInterface(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getWsdlfile()", "public java.lang.String getWsdlfile()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setWsdlfile(java.lang.String)", "public void setWsdlfile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getJaxrpcmappingfile()", "public java.lang.String getJaxrpcmappingfile()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setJaxrpcmappingfile(java.lang.String)", "public void setJaxrpcmappingfile(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.ContextService.getServiceqname()", "public java.lang.String[] getServiceqname()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getServiceqname(int)", "public java.lang.String getServiceqname(int)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getServiceqnameNamespaceURI()", "public java.lang.String getServiceqnameNamespaceURI()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getServiceqnameLocalpart()", "public java.lang.String getServiceqnameLocalpart()"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setServiceqname(java.lang.String[])", "public void setServiceqname(java.lang.String[])"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setServiceqname(java.lang.String, int)", "public void setServiceqname(java.lang.String, int)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setServiceqnameNamespaceURI(java.lang.String)", "public void setServiceqnameNamespaceURI(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.setServiceqnameLocalpart(java.lang.String)", "public void setServiceqnameLocalpart(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.tomcat.util.descriptor.web.ContextService.getServiceendpoints()", "public java.util.Iterator<java.lang.String> getServiceendpoints()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.getPortlink(java.lang.String)", "public java.lang.String getPortlink(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.addPortcomponent(java.lang.String, java.lang.String)", "public void addPortcomponent(java.lang.String, java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.tomcat.util.descriptor.web.ContextService.getHandlers()", "public java.util.Iterator<java.lang.String> getHandlers()"], ["org.apache.tomcat.util.descriptor.web.ContextHandler", "org.apache.tomcat.util.descriptor.web.ContextService.getHandler(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.ContextHandler getHandler(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextService.addHandler(org.apache.tomcat.util.descriptor.web.ContextHandler)", "public void addHandler(org.apache.tomcat.util.descriptor.web.ContextHandler)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextService.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.ContextService.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ContextService.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.ContextTransaction", "org.apache.tomcat.util.descriptor.web.ContextTransaction()", "public org.apache.tomcat.util.descriptor.web.ContextTransaction()"], ["java.lang.Object", "org.apache.tomcat.util.descriptor.web.ContextTransaction.getProperty(java.lang.String)", "public java.lang.Object getProperty(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextTransaction.setProperty(java.lang.String, java.lang.Object)", "public void setProperty(java.lang.String, java.lang.Object)"], ["void", "org.apache.tomcat.util.descriptor.web.ContextTransaction.removeProperty(java.lang.String)", "public void removeProperty(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.tomcat.util.descriptor.web.ContextTransaction.listProperties()", "public java.util.Iterator<java.lang.String> listProperties()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ContextTransaction.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.descriptor.web.ErrorPage", "org.apache.tomcat.util.descriptor.web.ErrorPage()", "public org.apache.tomcat.util.descriptor.web.ErrorPage()"], ["int", "org.apache.tomcat.util.descriptor.web.ErrorPage.getErrorCode()", "public int getErrorCode()"], ["void", "org.apache.tomcat.util.descriptor.web.ErrorPage.setErrorCode(int)", "public void setErrorCode(int)"], ["void", "org.apache.tomcat.util.descriptor.web.ErrorPage.setErrorCode(java.lang.String)", "public void setErrorCode(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ErrorPage.getExceptionType()", "public java.lang.String getExceptionType()"], ["void", "org.apache.tomcat.util.descriptor.web.ErrorPage.setExceptionType(java.lang.String)", "public void setExceptionType(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ErrorPage.getLocation()", "public java.lang.String getLocation()"], ["void", "org.apache.tomcat.util.descriptor.web.ErrorPage.setLocation(java.lang.String)", "public void setLocation(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ErrorPage.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ErrorPage.getName()", "public java.lang.String getName()"], ["org.apache.tomcat.util.descriptor.web.FilterDef", "org.apache.tomcat.util.descriptor.web.FilterDef()", "public org.apache.tomcat.util.descriptor.web.FilterDef()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["javax.servlet.Filter", "org.apache.tomcat.util.descriptor.web.FilterDef.getFilter()", "public javax.servlet.Filter getFilter()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setFilter(javax.servlet.Filter)", "public void setFilter(javax.servlet.Filter)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.getFilterClass()", "public java.lang.String getFilterClass()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setFilterClass(java.lang.String)", "public void setFilterClass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.getFilterName()", "public java.lang.String getFilterName()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setFilterName(java.lang.String)", "public void setFilterName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.getLargeIcon()", "public java.lang.String getLargeIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setLargeIcon(java.lang.String)", "public void setLargeIcon(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.FilterDef.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String> getParameterMap()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.getSmallIcon()", "public java.lang.String getSmallIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setSmallIcon(java.lang.String)", "public void setSmallIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.getAsyncSupported()", "public java.lang.String getAsyncSupported()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.setAsyncSupported(java.lang.String)", "public void setAsyncSupported(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.FilterDef.addInitParameter(java.lang.String, java.lang.String)", "public void addInitParameter(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterDef.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.descriptor.web.FilterMap", "org.apache.tomcat.util.descriptor.web.FilterMap()", "public org.apache.tomcat.util.descriptor.web.FilterMap()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterMap.getFilterName()", "public java.lang.String getFilterName()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterMap.setFilterName(java.lang.String)", "public void setFilterName(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.FilterMap.getServletNames()", "public java.lang.String[] getServletNames()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterMap.addServletName(java.lang.String)", "public void addServletName(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.FilterMap.getMatchAllUrlPatterns()", "public boolean getMatchAllUrlPatterns()"], ["boolean", "org.apache.tomcat.util.descriptor.web.FilterMap.getMatchAllServletNames()", "public boolean getMatchAllServletNames()"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.FilterMap.getURLPatterns()", "public java.lang.String[] getURLPatterns()"], ["void", "org.apache.tomcat.util.descriptor.web.FilterMap.addURLPattern(java.lang.String)", "public void addURLPattern(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.FilterMap.setDispatcher(java.lang.String)", "public void setDispatcher(java.lang.String)"], ["int", "org.apache.tomcat.util.descriptor.web.FilterMap.getDispatcherMapping()", "public int getDispatcherMapping()"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.FilterMap.getDispatcherNames()", "public java.lang.String[] getDispatcherNames()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.FilterMap.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback", "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback(org.apache.tomcat.util.descriptor.web.WebXmlParser, boolean, boolean)", "public org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback(org.apache.tomcat.util.descriptor.web.WebXmlParser, boolean, boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback.scan(java.net.JarURLConnection, java.lang.String, boolean)", "public void scan(java.net.JarURLConnection, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback.scan(java.io.File, java.lang.String, boolean)", "public void scan(java.io.File, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback.scanWebInfClasses()", "public void scanWebInfClasses()"], ["boolean", "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback.isOk()", "public boolean isOk()"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.WebXml>", "org.apache.tomcat.util.descriptor.web.FragmentJarScannerCallback.getFragments()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.WebXml> getFragments()"], ["org.apache.tomcat.util.descriptor.web.IgnoreAnnotationsRule", "org.apache.tomcat.util.descriptor.web.IgnoreAnnotationsRule()", "public org.apache.tomcat.util.descriptor.web.IgnoreAnnotationsRule()"], ["void", "org.apache.tomcat.util.descriptor.web.IgnoreAnnotationsRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.InjectionTarget", "org.apache.tomcat.util.descriptor.web.InjectionTarget()", "public org.apache.tomcat.util.descriptor.web.InjectionTarget()"], ["org.apache.tomcat.util.descriptor.web.InjectionTarget", "org.apache.tomcat.util.descriptor.web.InjectionTarget(java.lang.String, java.lang.String)", "public org.apache.tomcat.util.descriptor.web.InjectionTarget(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.InjectionTarget.getTargetClass()", "public java.lang.String getTargetClass()"], ["void", "org.apache.tomcat.util.descriptor.web.InjectionTarget.setTargetClass(java.lang.String)", "public void setTargetClass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.InjectionTarget.getTargetName()", "public java.lang.String getTargetName()"], ["void", "org.apache.tomcat.util.descriptor.web.InjectionTarget.setTargetName(java.lang.String)", "public void setTargetName(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.JspConfigDescriptorImpl", "org.apache.tomcat.util.descriptor.web.JspConfigDescriptorImpl(java.util.Collection<javax.servlet.descriptor.JspPropertyGroupDescriptor>, java.util.Collection<javax.servlet.descriptor.TaglibDescriptor>)", "public org.apache.tomcat.util.descriptor.web.JspConfigDescriptorImpl(java.util.Collection<javax.servlet.descriptor.JspPropertyGroupDescriptor>, java.util.Collection<javax.servlet.descriptor.TaglibDescriptor>)"], ["java.util.Collection<javax.servlet.descriptor.JspPropertyGroupDescriptor>", "org.apache.tomcat.util.descriptor.web.JspConfigDescriptorImpl.getJspPropertyGroups()", "public java.util.Collection<javax.servlet.descriptor.JspPropertyGroupDescriptor> getJspPropertyGroups()"], ["java.util.Collection<javax.servlet.descriptor.TaglibDescriptor>", "org.apache.tomcat.util.descriptor.web.JspConfigDescriptorImpl.getTaglibs()", "public java.util.Collection<javax.servlet.descriptor.TaglibDescriptor> getTaglibs()"], ["org.apache.tomcat.util.descriptor.web.JspPropertyGroup", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup()", "public org.apache.tomcat.util.descriptor.web.JspPropertyGroup()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setDeferredSyntax(java.lang.String)", "public void setDeferredSyntax(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getDeferredSyntax()", "public java.lang.Boolean getDeferredSyntax()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setElIgnored(java.lang.String)", "public void setElIgnored(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getElIgnored()", "public java.lang.Boolean getElIgnored()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.addIncludeCoda(java.lang.String)", "public void addIncludeCoda(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getIncludeCodas()", "public java.util.Collection<java.lang.String> getIncludeCodas()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.addIncludePrelude(java.lang.String)", "public void addIncludePrelude(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getIncludePreludes()", "public java.util.Collection<java.lang.String> getIncludePreludes()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setIsXml(java.lang.String)", "public void setIsXml(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getIsXml()", "public java.lang.Boolean getIsXml()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setPageEncoding(java.lang.String)", "public void setPageEncoding(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getPageEncoding()", "public java.lang.String getPageEncoding()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setScriptingInvalid(java.lang.String)", "public void setScriptingInvalid(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getScriptingInvalid()", "public java.lang.Boolean getScriptingInvalid()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setTrimWhitespace(java.lang.String)", "public void setTrimWhitespace(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getTrimWhitespace()", "public java.lang.Boolean getTrimWhitespace()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.addUrlPattern(java.lang.String)", "public void addUrlPattern(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getUrlPatterns()", "public java.util.Set<java.lang.String> getUrlPatterns()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setDefaultContentType(java.lang.String)", "public void setDefaultContentType(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getDefaultContentType()", "public java.lang.String getDefaultContentType()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setBuffer(java.lang.String)", "public void setBuffer(java.lang.String)"], ["java.lang.Integer", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getBuffer()", "public java.lang.Integer getBuffer()"], ["void", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.setErrorOnUndeclaredNamespace(java.lang.String)", "public void setErrorOnUndeclaredNamespace(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.JspPropertyGroup.getErrorOnUndeclaredNamespace()", "public java.lang.Boolean getErrorOnUndeclaredNamespace()"], ["org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl(org.apache.tomcat.util.descriptor.web.JspPropertyGroup)", "public org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl(org.apache.tomcat.util.descriptor.web.JspPropertyGroup)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getBuffer()", "public java.lang.String getBuffer()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getDefaultContentType()", "public java.lang.String getDefaultContentType()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getDeferredSyntaxAllowedAsLiteral()", "public java.lang.String getDeferredSyntaxAllowedAsLiteral()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getElIgnored()", "public java.lang.String getElIgnored()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getErrorOnUndeclaredNamespace()", "public java.lang.String getErrorOnUndeclaredNamespace()"], ["java.util.Collection<java.lang.String>", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getIncludeCodas()", "public java.util.Collection<java.lang.String> getIncludeCodas()"], ["java.util.Collection<java.lang.String>", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getIncludePreludes()", "public java.util.Collection<java.lang.String> getIncludePreludes()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getIsXml()", "public java.lang.String getIsXml()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getPageEncoding()", "public java.lang.String getPageEncoding()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getScriptingInvalid()", "public java.lang.String getScriptingInvalid()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getTrimDirectiveWhitespaces()", "public java.lang.String getTrimDirectiveWhitespaces()"], ["java.util.Collection<java.lang.String>", "org.apache.tomcat.util.descriptor.web.JspPropertyGroupDescriptorImpl.getUrlPatterns()", "public java.util.Collection<java.lang.String> getUrlPatterns()"], ["org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule", "org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule(java.lang.String, int, boolean)", "public org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule(java.lang.String, int, boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.LifecycleCallbackRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.LoginConfig", "org.apache.tomcat.util.descriptor.web.LoginConfig()", "public org.apache.tomcat.util.descriptor.web.LoginConfig()"], ["org.apache.tomcat.util.descriptor.web.LoginConfig", "org.apache.tomcat.util.descriptor.web.LoginConfig(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.tomcat.util.descriptor.web.LoginConfig(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.LoginConfig.getAuthMethod()", "public java.lang.String getAuthMethod()"], ["void", "org.apache.tomcat.util.descriptor.web.LoginConfig.setAuthMethod(java.lang.String)", "public void setAuthMethod(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.LoginConfig.getErrorPage()", "public java.lang.String getErrorPage()"], ["void", "org.apache.tomcat.util.descriptor.web.LoginConfig.setErrorPage(java.lang.String)", "public void setErrorPage(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.LoginConfig.getLoginPage()", "public java.lang.String getLoginPage()"], ["void", "org.apache.tomcat.util.descriptor.web.LoginConfig.setLoginPage(java.lang.String)", "public void setLoginPage(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.LoginConfig.getRealmName()", "public java.lang.String getRealmName()"], ["void", "org.apache.tomcat.util.descriptor.web.LoginConfig.setRealmName(java.lang.String)", "public void setRealmName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.LoginConfig.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.LoginConfig.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.LoginConfig.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.MappedNameRule", "org.apache.tomcat.util.descriptor.web.MappedNameRule()", "public org.apache.tomcat.util.descriptor.web.MappedNameRule()"], ["void", "org.apache.tomcat.util.descriptor.web.MappedNameRule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.MessageDestination", "org.apache.tomcat.util.descriptor.web.MessageDestination()", "public org.apache.tomcat.util.descriptor.web.MessageDestination()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MessageDestination.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.descriptor.web.MessageDestination.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MessageDestination.getLargeIcon()", "public java.lang.String getLargeIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.MessageDestination.setLargeIcon(java.lang.String)", "public void setLargeIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MessageDestination.getSmallIcon()", "public java.lang.String getSmallIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.MessageDestination.setSmallIcon(java.lang.String)", "public void setSmallIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MessageDestination.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.MessageDestination.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.MessageDestination.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.MessageDestinationRef", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef()", "public org.apache.tomcat.util.descriptor.web.MessageDestinationRef()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef.getLink()", "public java.lang.String getLink()"], ["void", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef.setLink(java.lang.String)", "public void setLink(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef.getUsage()", "public java.lang.String getUsage()"], ["void", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef.setUsage(java.lang.String)", "public void setUsage(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.MessageDestinationRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.MultipartDef", "org.apache.tomcat.util.descriptor.web.MultipartDef()", "public org.apache.tomcat.util.descriptor.web.MultipartDef()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MultipartDef.getLocation()", "public java.lang.String getLocation()"], ["void", "org.apache.tomcat.util.descriptor.web.MultipartDef.setLocation(java.lang.String)", "public void setLocation(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MultipartDef.getMaxFileSize()", "public java.lang.String getMaxFileSize()"], ["void", "org.apache.tomcat.util.descriptor.web.MultipartDef.setMaxFileSize(java.lang.String)", "public void setMaxFileSize(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MultipartDef.getMaxRequestSize()", "public java.lang.String getMaxRequestSize()"], ["void", "org.apache.tomcat.util.descriptor.web.MultipartDef.setMaxRequestSize(java.lang.String)", "public void setMaxRequestSize(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.MultipartDef.getFileSizeThreshold()", "public java.lang.String getFileSizeThreshold()"], ["void", "org.apache.tomcat.util.descriptor.web.MultipartDef.setFileSizeThreshold(java.lang.String)", "public void setFileSizeThreshold(java.lang.String)"], ["int", "org.apache.tomcat.util.descriptor.web.MultipartDef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.MultipartDef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.NameRule", "org.apache.tomcat.util.descriptor.web.NameRule()", "public org.apache.tomcat.util.descriptor.web.NameRule()"], ["void", "org.apache.tomcat.util.descriptor.web.NameRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.descriptor.web.NameRule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.RelativeOrderingRule", "org.apache.tomcat.util.descriptor.web.RelativeOrderingRule(boolean)", "public org.apache.tomcat.util.descriptor.web.RelativeOrderingRule(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.RelativeOrderingRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.ResourceBase", "org.apache.tomcat.util.descriptor.web.ResourceBase()", "public org.apache.tomcat.util.descriptor.web.ResourceBase()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ResourceBase.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.tomcat.util.descriptor.web.ResourceBase.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ResourceBase.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.descriptor.web.ResourceBase.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ResourceBase.getType()", "public java.lang.String getType()"], ["void", "org.apache.tomcat.util.descriptor.web.ResourceBase.setType(java.lang.String)", "public void setType(java.lang.String)"], ["java.lang.Object", "org.apache.tomcat.util.descriptor.web.ResourceBase.getProperty(java.lang.String)", "public java.lang.Object getProperty(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.ResourceBase.setProperty(java.lang.String, java.lang.Object)", "public void setProperty(java.lang.String, java.lang.Object)"], ["void", "org.apache.tomcat.util.descriptor.web.ResourceBase.removeProperty(java.lang.String)", "public void removeProperty(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.tomcat.util.descriptor.web.ResourceBase.listProperties()", "public java.util.Iterator<java.lang.String> listProperties()"], ["void", "org.apache.tomcat.util.descriptor.web.ResourceBase.addInjectionTarget(java.lang.String, java.lang.String)", "public void addInjectionTarget(java.lang.String, java.lang.String)"], ["java.util.List<org.apache.tomcat.util.descriptor.web.InjectionTarget>", "org.apache.tomcat.util.descriptor.web.ResourceBase.getInjectionTargets()", "public java.util.List<org.apache.tomcat.util.descriptor.web.InjectionTarget> getInjectionTargets()"], ["int", "org.apache.tomcat.util.descriptor.web.ResourceBase.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.ResourceBase.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.NamingResources", "org.apache.tomcat.util.descriptor.web.ResourceBase.getNamingResources()", "public org.apache.tomcat.util.descriptor.web.NamingResources getNamingResources()"], ["void", "org.apache.tomcat.util.descriptor.web.ResourceBase.setNamingResources(org.apache.tomcat.util.descriptor.web.NamingResources)", "public void setNamingResources(org.apache.tomcat.util.descriptor.web.NamingResources)"], ["org.apache.tomcat.util.descriptor.web.SecurityCollection", "org.apache.tomcat.util.descriptor.web.SecurityCollection()", "public org.apache.tomcat.util.descriptor.web.SecurityCollection()"], ["org.apache.tomcat.util.descriptor.web.SecurityCollection", "org.apache.tomcat.util.descriptor.web.SecurityCollection(java.lang.String, java.lang.String)", "public org.apache.tomcat.util.descriptor.web.SecurityCollection(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityCollection.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityCollection.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityCollection.isFromDescriptor()", "public boolean isFromDescriptor()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.setFromDescriptor(boolean)", "public void setFromDescriptor(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.addMethod(java.lang.String)", "public void addMethod(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.addOmittedMethod(java.lang.String)", "public void addOmittedMethod(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.addPattern(java.lang.String)", "public void addPattern(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityCollection.findMethod(java.lang.String)", "public boolean findMethod(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.SecurityCollection.findMethods()", "public java.lang.String[] findMethods()"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.SecurityCollection.findOmittedMethods()", "public java.lang.String[] findOmittedMethods()"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityCollection.findPattern(java.lang.String)", "public boolean findPattern(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.SecurityCollection.findPatterns()", "public java.lang.String[] findPatterns()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.removeMethod(java.lang.String)", "public void removeMethod(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.removeOmittedMethod(java.lang.String)", "public void removeOmittedMethod(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityCollection.removePattern(java.lang.String)", "public void removePattern(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityCollection.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.descriptor.web.SecurityConstraint", "org.apache.tomcat.util.descriptor.web.SecurityConstraint()", "public org.apache.tomcat.util.descriptor.web.SecurityConstraint()"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.getAllRoles()", "public boolean getAllRoles()"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.getAuthenticatedUsers()", "public boolean getAuthenticatedUsers()"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.getAuthConstraint()", "public boolean getAuthConstraint()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.setAuthConstraint(boolean)", "public void setAuthConstraint(boolean)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.getUserConstraint()", "public java.lang.String getUserConstraint()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.setUserConstraint(java.lang.String)", "public void setUserConstraint(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.treatAllAuthenticatedUsersAsApplicationRole()", "public void treatAllAuthenticatedUsersAsApplicationRole()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.addAuthRole(java.lang.String)", "public void addAuthRole(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.addCollection(org.apache.tomcat.util.descriptor.web.SecurityCollection)", "public void addCollection(org.apache.tomcat.util.descriptor.web.SecurityCollection)"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.findAuthRole(java.lang.String)", "public boolean findAuthRole(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.findAuthRoles()", "public java.lang.String[] findAuthRoles()"], ["org.apache.tomcat.util.descriptor.web.SecurityCollection", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.findCollection(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.SecurityCollection findCollection(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.SecurityCollection[]", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.findCollections()", "public org.apache.tomcat.util.descriptor.web.SecurityCollection[] findCollections()"], ["boolean", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.included(java.lang.String, java.lang.String)", "public boolean included(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.removeAuthRole(java.lang.String)", "public void removeAuthRole(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.removeCollection(org.apache.tomcat.util.descriptor.web.SecurityCollection)", "public void removeCollection(org.apache.tomcat.util.descriptor.web.SecurityCollection)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.descriptor.web.SecurityConstraint[]", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.createConstraints(javax.servlet.ServletSecurityElement, java.lang.String)", "public static org.apache.tomcat.util.descriptor.web.SecurityConstraint[] createConstraints(javax.servlet.ServletSecurityElement, java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.SecurityConstraint[]", "org.apache.tomcat.util.descriptor.web.SecurityConstraint.findUncoveredHttpMethods(org.apache.tomcat.util.descriptor.web.SecurityConstraint[], boolean, org.apache.juli.logging.Log)", "public static org.apache.tomcat.util.descriptor.web.SecurityConstraint[] findUncoveredHttpMethods(org.apache.tomcat.util.descriptor.web.SecurityConstraint[], boolean, org.apache.juli.logging.Log)"], ["org.apache.tomcat.util.descriptor.web.SecurityRoleRef", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef()", "public org.apache.tomcat.util.descriptor.web.SecurityRoleRef()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef.getLink()", "public java.lang.String getLink()"], ["void", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef.setLink(java.lang.String)", "public void setLink(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SecurityRoleRef.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.descriptor.web.ServiceQnameRule", "org.apache.tomcat.util.descriptor.web.ServiceQnameRule()", "public org.apache.tomcat.util.descriptor.web.ServiceQnameRule()"], ["void", "org.apache.tomcat.util.descriptor.web.ServiceQnameRule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.ServletDef", "org.apache.tomcat.util.descriptor.web.ServletDef()", "public org.apache.tomcat.util.descriptor.web.ServletDef()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getSmallIcon()", "public java.lang.String getSmallIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setSmallIcon(java.lang.String)", "public void setSmallIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getLargeIcon()", "public java.lang.String getLargeIcon()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setLargeIcon(java.lang.String)", "public void setLargeIcon(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getServletName()", "public java.lang.String getServletName()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setServletName(java.lang.String)", "public void setServletName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getServletClass()", "public java.lang.String getServletClass()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setServletClass(java.lang.String)", "public void setServletClass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getJspFile()", "public java.lang.String getJspFile()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setJspFile(java.lang.String)", "public void setJspFile(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.ServletDef.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String> getParameterMap()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.addInitParameter(java.lang.String, java.lang.String)", "public void addInitParameter(java.lang.String, java.lang.String)"], ["java.lang.Integer", "org.apache.tomcat.util.descriptor.web.ServletDef.getLoadOnStartup()", "public java.lang.Integer getLoadOnStartup()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setLoadOnStartup(java.lang.String)", "public void setLoadOnStartup(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.ServletDef.getRunAs()", "public java.lang.String getRunAs()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setRunAs(java.lang.String)", "public void setRunAs(java.lang.String)"], ["java.util.Set<org.apache.tomcat.util.descriptor.web.SecurityRoleRef>", "org.apache.tomcat.util.descriptor.web.ServletDef.getSecurityRoleRefs()", "public java.util.Set<org.apache.tomcat.util.descriptor.web.SecurityRoleRef> getSecurityRoleRefs()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.addSecurityRoleRef(org.apache.tomcat.util.descriptor.web.SecurityRoleRef)", "public void addSecurityRoleRef(org.apache.tomcat.util.descriptor.web.SecurityRoleRef)"], ["org.apache.tomcat.util.descriptor.web.MultipartDef", "org.apache.tomcat.util.descriptor.web.ServletDef.getMultipartDef()", "public org.apache.tomcat.util.descriptor.web.MultipartDef getMultipartDef()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setMultipartDef(org.apache.tomcat.util.descriptor.web.MultipartDef)", "public void setMultipartDef(org.apache.tomcat.util.descriptor.web.MultipartDef)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.ServletDef.getAsyncSupported()", "public java.lang.Boolean getAsyncSupported()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setAsyncSupported(java.lang.String)", "public void setAsyncSupported(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.ServletDef.getEnabled()", "public java.lang.Boolean getEnabled()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setEnabled(java.lang.String)", "public void setEnabled(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.ServletDef.isOverridable()", "public boolean isOverridable()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDef.setOverridable(boolean)", "public void setOverridable(boolean)"], ["org.apache.tomcat.util.descriptor.web.ServletDefCreateRule", "org.apache.tomcat.util.descriptor.web.ServletDefCreateRule()", "public org.apache.tomcat.util.descriptor.web.ServletDefCreateRule()"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDefCreateRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.descriptor.web.ServletDefCreateRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SessionConfig", "org.apache.tomcat.util.descriptor.web.SessionConfig()", "public org.apache.tomcat.util.descriptor.web.SessionConfig()"], ["java.lang.Integer", "org.apache.tomcat.util.descriptor.web.SessionConfig.getSessionTimeout()", "public java.lang.Integer getSessionTimeout()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setSessionTimeout(java.lang.String)", "public void setSessionTimeout(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SessionConfig.getCookieName()", "public java.lang.String getCookieName()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setCookieName(java.lang.String)", "public void setCookieName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SessionConfig.getCookieDomain()", "public java.lang.String getCookieDomain()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setCookieDomain(java.lang.String)", "public void setCookieDomain(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SessionConfig.getCookiePath()", "public java.lang.String getCookiePath()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setCookiePath(java.lang.String)", "public void setCookiePath(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.SessionConfig.getCookieComment()", "public java.lang.String getCookieComment()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setCookieComment(java.lang.String)", "public void setCookieComment(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.SessionConfig.getCookieHttpOnly()", "public java.lang.Boolean getCookieHttpOnly()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setCookieHttpOnly(java.lang.String)", "public void setCookieHttpOnly(java.lang.String)"], ["java.lang.Boolean", "org.apache.tomcat.util.descriptor.web.SessionConfig.getCookieSecure()", "public java.lang.Boolean getCookieSecure()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setCookieSecure(java.lang.String)", "public void setCookieSecure(java.lang.String)"], ["java.lang.Integer", "org.apache.tomcat.util.descriptor.web.SessionConfig.getCookieMaxAge()", "public java.lang.Integer getCookieMaxAge()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.setCookieMaxAge(java.lang.String)", "public void setCookieMaxAge(java.lang.String)"], ["java.util.EnumSet<javax.servlet.SessionTrackingMode>", "org.apache.tomcat.util.descriptor.web.SessionConfig.getSessionTrackingModes()", "public java.util.EnumSet<javax.servlet.SessionTrackingMode> getSessionTrackingModes()"], ["void", "org.apache.tomcat.util.descriptor.web.SessionConfig.addSessionTrackingMode(java.lang.String)", "public void addSessionTrackingMode(java.lang.String)"], ["org.apache.tomcat.util.descriptor.web.SetAuthConstraintRule", "org.apache.tomcat.util.descriptor.web.SetAuthConstraintRule()", "public org.apache.tomcat.util.descriptor.web.SetAuthConstraintRule()"], ["void", "org.apache.tomcat.util.descriptor.web.SetAuthConstraintRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SetDenyUncoveredHttpMethodsRule", "org.apache.tomcat.util.descriptor.web.SetDenyUncoveredHttpMethodsRule()", "public org.apache.tomcat.util.descriptor.web.SetDenyUncoveredHttpMethodsRule()"], ["void", "org.apache.tomcat.util.descriptor.web.SetDenyUncoveredHttpMethodsRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SetDistributableRule", "org.apache.tomcat.util.descriptor.web.SetDistributableRule()", "public org.apache.tomcat.util.descriptor.web.SetDistributableRule()"], ["void", "org.apache.tomcat.util.descriptor.web.SetDistributableRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SetJspConfig", "org.apache.tomcat.util.descriptor.web.SetJspConfig()", "public org.apache.tomcat.util.descriptor.web.SetJspConfig()"], ["void", "org.apache.tomcat.util.descriptor.web.SetJspConfig.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SetLoginConfig", "org.apache.tomcat.util.descriptor.web.SetLoginConfig()", "public org.apache.tomcat.util.descriptor.web.SetLoginConfig()"], ["void", "org.apache.tomcat.util.descriptor.web.SetLoginConfig.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SetOverrideRule", "org.apache.tomcat.util.descriptor.web.SetOverrideRule()", "public org.apache.tomcat.util.descriptor.web.SetOverrideRule()"], ["void", "org.apache.tomcat.util.descriptor.web.SetOverrideRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SetPublicIdRule", "org.apache.tomcat.util.descriptor.web.SetPublicIdRule(java.lang.String)", "public org.apache.tomcat.util.descriptor.web.SetPublicIdRule(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.SetPublicIdRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SetSessionConfig", "org.apache.tomcat.util.descriptor.web.SetSessionConfig()", "public org.apache.tomcat.util.descriptor.web.SetSessionConfig()"], ["void", "org.apache.tomcat.util.descriptor.web.SetSessionConfig.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.SoapHeaderRule", "org.apache.tomcat.util.descriptor.web.SoapHeaderRule()", "public org.apache.tomcat.util.descriptor.web.SoapHeaderRule()"], ["void", "org.apache.tomcat.util.descriptor.web.SoapHeaderRule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.TaglibDescriptorImpl", "org.apache.tomcat.util.descriptor.web.TaglibDescriptorImpl(java.lang.String, java.lang.String)", "public org.apache.tomcat.util.descriptor.web.TaglibDescriptorImpl(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.TaglibDescriptorImpl.getTaglibLocation()", "public java.lang.String getTaglibLocation()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.TaglibDescriptorImpl.getTaglibURI()", "public java.lang.String getTaglibURI()"], ["int", "org.apache.tomcat.util.descriptor.web.TaglibDescriptorImpl.hashCode()", "public int hashCode()"], ["boolean", "org.apache.tomcat.util.descriptor.web.TaglibDescriptorImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.tomcat.util.descriptor.web.TaglibLocationRule", "org.apache.tomcat.util.descriptor.web.TaglibLocationRule(boolean)", "public org.apache.tomcat.util.descriptor.web.TaglibLocationRule(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.TaglibLocationRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.VersionRule", "org.apache.tomcat.util.descriptor.web.VersionRule()", "public org.apache.tomcat.util.descriptor.web.VersionRule()"], ["void", "org.apache.tomcat.util.descriptor.web.VersionRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["org.apache.tomcat.util.descriptor.web.WebRuleSet", "org.apache.tomcat.util.descriptor.web.WebRuleSet()", "public org.apache.tomcat.util.descriptor.web.WebRuleSet()"], ["org.apache.tomcat.util.descriptor.web.WebRuleSet", "org.apache.tomcat.util.descriptor.web.WebRuleSet(boolean)", "public org.apache.tomcat.util.descriptor.web.WebRuleSet(boolean)"], ["org.apache.tomcat.util.descriptor.web.WebRuleSet", "org.apache.tomcat.util.descriptor.web.WebRuleSet(java.lang.String, boolean)", "public org.apache.tomcat.util.descriptor.web.WebRuleSet(java.lang.String, boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.WebRuleSet.addRuleInstances(org.apache.tomcat.util.digester.Digester)", "public void addRuleInstances(org.apache.tomcat.util.digester.Digester)"], ["void", "org.apache.tomcat.util.descriptor.web.WebRuleSet.recycle()", "public void recycle()"], ["org.apache.tomcat.util.descriptor.web.WebXml", "org.apache.tomcat.util.descriptor.web.WebXml()", "public org.apache.tomcat.util.descriptor.web.WebXml()"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXml.isOverridable()", "public boolean isOverridable()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setOverridable(boolean)", "public void setOverridable(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.createAbsoluteOrdering()", "public void createAbsoluteOrdering()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addAbsoluteOrdering(java.lang.String)", "public void addAbsoluteOrdering(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addAbsoluteOrderingOthers()", "public void addAbsoluteOrderingOthers()"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getAbsoluteOrdering()", "public java.util.Set<java.lang.String> getAbsoluteOrdering()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addAfterOrdering(java.lang.String)", "public void addAfterOrdering(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addAfterOrderingOthers()", "public void addAfterOrderingOthers()"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getAfterOrdering()", "public java.util.Set<java.lang.String> getAfterOrdering()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addBeforeOrdering(java.lang.String)", "public void addBeforeOrdering(java.lang.String)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addBeforeOrderingOthers()", "public void addBeforeOrderingOthers()"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getBeforeOrdering()", "public java.util.Set<java.lang.String> getBeforeOrdering()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.WebXml.getVersion()", "public java.lang.String getVersion()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setVersion(java.lang.String)", "public void setVersion(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.WebXml.getPublicId()", "public java.lang.String getPublicId()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setPublicId(java.lang.String)", "public void setPublicId(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXml.isMetadataComplete()", "public boolean isMetadataComplete()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setMetadataComplete(boolean)", "public void setMetadataComplete(boolean)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.WebXml.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setName(java.lang.String)", "public void setName(java.lang.String)"], ["int", "org.apache.tomcat.util.descriptor.web.WebXml.getMajorVersion()", "public int getMajorVersion()"], ["int", "org.apache.tomcat.util.descriptor.web.WebXml.getMinorVersion()", "public int getMinorVersion()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.WebXml.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXml.isDistributable()", "public boolean isDistributable()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setDistributable(boolean)", "public void setDistributable(boolean)"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXml.getDenyUncoveredHttpMethods()", "public boolean getDenyUncoveredHttpMethods()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setDenyUncoveredHttpMethods(boolean)", "public void setDenyUncoveredHttpMethods(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addContextParam(java.lang.String, java.lang.String)", "public void addContextParam(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getContextParams()", "public java.util.Map<java.lang.String, java.lang.String> getContextParams()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addFilter(org.apache.tomcat.util.descriptor.web.FilterDef)", "public void addFilter(org.apache.tomcat.util.descriptor.web.FilterDef)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.FilterDef>", "org.apache.tomcat.util.descriptor.web.WebXml.getFilters()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.FilterDef> getFilters()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addFilterMapping(org.apache.tomcat.util.descriptor.web.FilterMap)", "public void addFilterMapping(org.apache.tomcat.util.descriptor.web.FilterMap)"], ["java.util.Set<org.apache.tomcat.util.descriptor.web.FilterMap>", "org.apache.tomcat.util.descriptor.web.WebXml.getFilterMappings()", "public java.util.Set<org.apache.tomcat.util.descriptor.web.FilterMap> getFilterMappings()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getListeners()", "public java.util.Set<java.lang.String> getListeners()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addServlet(org.apache.tomcat.util.descriptor.web.ServletDef)", "public void addServlet(org.apache.tomcat.util.descriptor.web.ServletDef)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ServletDef>", "org.apache.tomcat.util.descriptor.web.WebXml.getServlets()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ServletDef> getServlets()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addServletMapping(java.lang.String, java.lang.String)", "public void addServletMapping(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getServletMappings()", "public java.util.Map<java.lang.String, java.lang.String> getServletMappings()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setSessionConfig(org.apache.tomcat.util.descriptor.web.SessionConfig)", "public void setSessionConfig(org.apache.tomcat.util.descriptor.web.SessionConfig)"], ["org.apache.tomcat.util.descriptor.web.SessionConfig", "org.apache.tomcat.util.descriptor.web.WebXml.getSessionConfig()", "public org.apache.tomcat.util.descriptor.web.SessionConfig getSessionConfig()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addMimeMapping(java.lang.String, java.lang.String)", "public void addMimeMapping(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getMimeMappings()", "public java.util.Map<java.lang.String, java.lang.String> getMimeMappings()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setReplaceWelcomeFiles(boolean)", "public void setReplaceWelcomeFiles(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setAlwaysAddWelcomeFiles(boolean)", "public void setAlwaysAddWelcomeFiles(boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addWelcomeFile(java.lang.String)", "public void addWelcomeFile(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getWelcomeFiles()", "public java.util.Set<java.lang.String> getWelcomeFiles()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)", "public void addErrorPage(org.apache.tomcat.util.descriptor.web.ErrorPage)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ErrorPage>", "org.apache.tomcat.util.descriptor.web.WebXml.getErrorPages()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ErrorPage> getErrorPages()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addTaglib(java.lang.String, java.lang.String)", "public void addTaglib(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getTaglibs()", "public java.util.Map<java.lang.String, java.lang.String> getTaglibs()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addJspPropertyGroup(org.apache.tomcat.util.descriptor.web.JspPropertyGroup)", "public void addJspPropertyGroup(org.apache.tomcat.util.descriptor.web.JspPropertyGroup)"], ["java.util.Set<org.apache.tomcat.util.descriptor.web.JspPropertyGroup>", "org.apache.tomcat.util.descriptor.web.WebXml.getJspPropertyGroups()", "public java.util.Set<org.apache.tomcat.util.descriptor.web.JspPropertyGroup> getJspPropertyGroups()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addSecurityConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)", "public void addSecurityConstraint(org.apache.tomcat.util.descriptor.web.SecurityConstraint)"], ["java.util.Set<org.apache.tomcat.util.descriptor.web.SecurityConstraint>", "org.apache.tomcat.util.descriptor.web.WebXml.getSecurityConstraints()", "public java.util.Set<org.apache.tomcat.util.descriptor.web.SecurityConstraint> getSecurityConstraints()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setLoginConfig(org.apache.tomcat.util.descriptor.web.LoginConfig)", "public void setLoginConfig(org.apache.tomcat.util.descriptor.web.LoginConfig)"], ["org.apache.tomcat.util.descriptor.web.LoginConfig", "org.apache.tomcat.util.descriptor.web.WebXml.getLoginConfig()", "public org.apache.tomcat.util.descriptor.web.LoginConfig getLoginConfig()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addSecurityRole(java.lang.String)", "public void addSecurityRole(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getSecurityRoles()", "public java.util.Set<java.lang.String> getSecurityRoles()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addEnvEntry(org.apache.tomcat.util.descriptor.web.ContextEnvironment)", "public void addEnvEntry(org.apache.tomcat.util.descriptor.web.ContextEnvironment)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextEnvironment>", "org.apache.tomcat.util.descriptor.web.WebXml.getEnvEntries()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextEnvironment> getEnvEntries()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addEjbRef(org.apache.tomcat.util.descriptor.web.ContextEjb)", "public void addEjbRef(org.apache.tomcat.util.descriptor.web.ContextEjb)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextEjb>", "org.apache.tomcat.util.descriptor.web.WebXml.getEjbRefs()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextEjb> getEjbRefs()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addEjbLocalRef(org.apache.tomcat.util.descriptor.web.ContextLocalEjb)", "public void addEjbLocalRef(org.apache.tomcat.util.descriptor.web.ContextLocalEjb)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextLocalEjb>", "org.apache.tomcat.util.descriptor.web.WebXml.getEjbLocalRefs()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextLocalEjb> getEjbLocalRefs()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addServiceRef(org.apache.tomcat.util.descriptor.web.ContextService)", "public void addServiceRef(org.apache.tomcat.util.descriptor.web.ContextService)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextService>", "org.apache.tomcat.util.descriptor.web.WebXml.getServiceRefs()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextService> getServiceRefs()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addResourceRef(org.apache.tomcat.util.descriptor.web.ContextResource)", "public void addResourceRef(org.apache.tomcat.util.descriptor.web.ContextResource)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResource>", "org.apache.tomcat.util.descriptor.web.WebXml.getResourceRefs()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResource> getResourceRefs()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)", "public void addResourceEnvRef(org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef>", "org.apache.tomcat.util.descriptor.web.WebXml.getResourceEnvRefs()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef> getResourceEnvRefs()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)", "public void addMessageDestinationRef(org.apache.tomcat.util.descriptor.web.MessageDestinationRef)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.MessageDestinationRef>", "org.apache.tomcat.util.descriptor.web.WebXml.getMessageDestinationRefs()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.MessageDestinationRef> getMessageDestinationRefs()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addMessageDestination(org.apache.tomcat.util.descriptor.web.MessageDestination)", "public void addMessageDestination(org.apache.tomcat.util.descriptor.web.MessageDestination)"], ["java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.MessageDestination>", "org.apache.tomcat.util.descriptor.web.WebXml.getMessageDestinations()", "public java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.MessageDestination> getMessageDestinations()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addLocaleEncodingMapping(java.lang.String, java.lang.String)", "public void addLocaleEncodingMapping(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getLocaleEncodingMappings()", "public java.util.Map<java.lang.String, java.lang.String> getLocaleEncodingMappings()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addPostConstructMethods(java.lang.String, java.lang.String)", "public void addPostConstructMethods(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getPostConstructMethods()", "public java.util.Map<java.lang.String, java.lang.String> getPostConstructMethods()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.addPreDestroyMethods(java.lang.String, java.lang.String)", "public void addPreDestroyMethods(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.descriptor.web.WebXml.getPreDestroyMethods()", "public java.util.Map<java.lang.String, java.lang.String> getPreDestroyMethods()"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.apache.tomcat.util.descriptor.web.WebXml.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setURL(java.net.URL)", "public void setURL(java.net.URL)"], ["java.net.URL", "org.apache.tomcat.util.descriptor.web.WebXml.getURL()", "public java.net.URL getURL()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setJarName(java.lang.String)", "public void setJarName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.WebXml.getJarName()", "public java.lang.String getJarName()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setWebappJar(boolean)", "public void setWebappJar(boolean)"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXml.getWebappJar()", "public boolean getWebappJar()"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXml.getDelegate()", "public boolean getDelegate()"], ["void", "org.apache.tomcat.util.descriptor.web.WebXml.setDelegate(boolean)", "public void setDelegate(boolean)"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.WebXml.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.tomcat.util.descriptor.web.WebXml.toXml()", "public java.lang.String toXml()"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXml.merge(java.util.Set<org.apache.tomcat.util.descriptor.web.WebXml>)", "public boolean merge(java.util.Set<org.apache.tomcat.util.descriptor.web.WebXml>)"], ["java.util.Set<org.apache.tomcat.util.descriptor.web.WebXml>", "org.apache.tomcat.util.descriptor.web.WebXml.orderWebFragments(org.apache.tomcat.util.descriptor.web.WebXml, java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.WebXml>, javax.servlet.ServletContext)", "public static java.util.Set<org.apache.tomcat.util.descriptor.web.WebXml> orderWebFragments(org.apache.tomcat.util.descriptor.web.WebXml, java.util.Map<java.lang.String, org.apache.tomcat.util.descriptor.web.WebXml>, javax.servlet.ServletContext)"], ["org.apache.tomcat.util.descriptor.web.WebXmlParser", "org.apache.tomcat.util.descriptor.web.WebXmlParser(boolean, boolean, boolean)", "public org.apache.tomcat.util.descriptor.web.WebXmlParser(boolean, boolean, boolean)"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXmlParser.parseWebXml(java.net.URL, org.apache.tomcat.util.descriptor.web.WebXml, boolean)", "public boolean parseWebXml(java.net.URL, org.apache.tomcat.util.descriptor.web.WebXml, boolean) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.descriptor.web.WebXmlParser.parseWebXml(org.xml.sax.InputSource, org.apache.tomcat.util.descriptor.web.WebXml, boolean)", "public boolean parseWebXml(org.xml.sax.InputSource, org.apache.tomcat.util.descriptor.web.WebXml, boolean)"], ["void", "org.apache.tomcat.util.descriptor.web.WebXmlParser.setClassLoader(java.lang.ClassLoader)", "public void setClassLoader(java.lang.ClassLoader)"], ["org.apache.tomcat.util.digester.AbstractObjectCreationFactory", "org.apache.tomcat.util.digester.AbstractObjectCreationFactory()", "public org.apache.tomcat.util.digester.AbstractObjectCreationFactory()"], ["org.apache.tomcat.util.digester.Digester", "org.apache.tomcat.util.digester.AbstractObjectCreationFactory.getDigester()", "public org.apache.tomcat.util.digester.Digester getDigester()"], ["void", "org.apache.tomcat.util.digester.AbstractObjectCreationFactory.setDigester(org.apache.tomcat.util.digester.Digester)", "public void setDigester(org.apache.tomcat.util.digester.Digester)"], ["org.apache.tomcat.util.digester.ArrayStack", "org.apache.tomcat.util.digester.ArrayStack()", "public org.apache.tomcat.util.digester.ArrayStack()"], ["org.apache.tomcat.util.digester.ArrayStack", "org.apache.tomcat.util.digester.ArrayStack(int)", "public org.apache.tomcat.util.digester.ArrayStack(int)"], ["boolean", "org.apache.tomcat.util.digester.ArrayStack.empty()", "public boolean empty()"], ["E", "org.apache.tomcat.util.digester.ArrayStack.peek()", "public E peek() throws java.util.EmptyStackException"], ["E", "org.apache.tomcat.util.digester.ArrayStack.peek(int)", "public E peek(int) throws java.util.EmptyStackException"], ["E", "org.apache.tomcat.util.digester.ArrayStack.pop()", "public E pop() throws java.util.EmptyStackException"], ["E", "org.apache.tomcat.util.digester.ArrayStack.push(E)", "public E push(E)"], ["org.apache.tomcat.util.digester.CallMethodRule", "org.apache.tomcat.util.digester.CallMethodRule(java.lang.String, int)", "public org.apache.tomcat.util.digester.CallMethodRule(java.lang.String, int)"], ["org.apache.tomcat.util.digester.CallMethodRule", "org.apache.tomcat.util.digester.CallMethodRule(int, java.lang.String, int)", "public org.apache.tomcat.util.digester.CallMethodRule(int, java.lang.String, int)"], ["org.apache.tomcat.util.digester.CallMethodRule", "org.apache.tomcat.util.digester.CallMethodRule(java.lang.String)", "public org.apache.tomcat.util.digester.CallMethodRule(java.lang.String)"], ["org.apache.tomcat.util.digester.CallMethodRule", "org.apache.tomcat.util.digester.CallMethodRule(int, java.lang.String, int, java.lang.Class<?>[])", "public org.apache.tomcat.util.digester.CallMethodRule(int, java.lang.String, int, java.lang.Class<?>[])"], ["boolean", "org.apache.tomcat.util.digester.CallMethodRule.getUseExactMatch()", "public boolean getUseExactMatch()"], ["void", "org.apache.tomcat.util.digester.CallMethodRule.setUseExactMatch(boolean)", "public void setUseExactMatch(boolean)"], ["void", "org.apache.tomcat.util.digester.CallMethodRule.setDigester(org.apache.tomcat.util.digester.Digester)", "public void setDigester(org.apache.tomcat.util.digester.Digester)"], ["void", "org.apache.tomcat.util.digester.CallMethodRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.CallMethodRule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.CallMethodRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.CallMethodRule.finish()", "public void finish() throws java.lang.Exception"], ["java.lang.String", "org.apache.tomcat.util.digester.CallMethodRule.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.digester.CallParamRule", "org.apache.tomcat.util.digester.CallParamRule(int)", "public org.apache.tomcat.util.digester.CallParamRule(int)"], ["org.apache.tomcat.util.digester.CallParamRule", "org.apache.tomcat.util.digester.CallParamRule(int, java.lang.String)", "public org.apache.tomcat.util.digester.CallParamRule(int, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.CallParamRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.CallParamRule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.CallParamRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.digester.CallParamRule.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.tomcat.util.digester.Digester$SystemPropertySource.getProperty(java.lang.String)", "public java.lang.String getProperty(java.lang.String)"], ["org.apache.tomcat.util.digester.Digester", "org.apache.tomcat.util.digester.Digester()", "public org.apache.tomcat.util.digester.Digester()"], ["java.lang.String", "org.apache.tomcat.util.digester.Digester.findNamespaceURI(java.lang.String)", "public java.lang.String findNamespaceURI(java.lang.String)"], ["java.lang.ClassLoader", "org.apache.tomcat.util.digester.Digester.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["void", "org.apache.tomcat.util.digester.Digester.setClassLoader(java.lang.ClassLoader)", "public void setClassLoader(java.lang.ClassLoader)"], ["int", "org.apache.tomcat.util.digester.Digester.getCount()", "public int getCount()"], ["java.lang.String", "org.apache.tomcat.util.digester.Digester.getCurrentElementName()", "public java.lang.String getCurrentElementName()"], ["org.xml.sax.ErrorHandler", "org.apache.tomcat.util.digester.Digester.getErrorHandler()", "public org.xml.sax.ErrorHandler getErrorHandler()"], ["void", "org.apache.tomcat.util.digester.Digester.setErrorHandler(org.xml.sax.ErrorHandler)", "public void setErrorHandler(org.xml.sax.ErrorHandler)"], ["javax.xml.parsers.SAXParserFactory", "org.apache.tomcat.util.digester.Digester.getFactory()", "public javax.xml.parsers.SAXParserFactory getFactory() throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException, javax.xml.parsers.ParserConfigurationException"], ["void", "org.apache.tomcat.util.digester.Digester.setFeature(java.lang.String, boolean)", "public void setFeature(java.lang.String, boolean) throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"], ["org.apache.juli.logging.Log", "org.apache.tomcat.util.digester.Digester.getLogger()", "public org.apache.juli.logging.Log getLogger()"], ["void", "org.apache.tomcat.util.digester.Digester.setLogger(org.apache.juli.logging.Log)", "public void setLogger(org.apache.juli.logging.Log)"], ["org.apache.juli.logging.Log", "org.apache.tomcat.util.digester.Digester.getSAXLogger()", "public org.apache.juli.logging.Log getSAXLogger()"], ["void", "org.apache.tomcat.util.digester.Digester.setSAXLogger(org.apache.juli.logging.Log)", "public void setSAXLogger(org.apache.juli.logging.Log)"], ["java.lang.String", "org.apache.tomcat.util.digester.Digester.getMatch()", "public java.lang.String getMatch()"], ["boolean", "org.apache.tomcat.util.digester.Digester.getNamespaceAware()", "public boolean getNamespaceAware()"], ["void", "org.apache.tomcat.util.digester.Digester.setNamespaceAware(boolean)", "public void setNamespaceAware(boolean)"], ["void", "org.apache.tomcat.util.digester.Digester.setPublicId(java.lang.String)", "public void setPublicId(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.digester.Digester.getPublicId()", "public java.lang.String getPublicId()"], ["java.lang.String", "org.apache.tomcat.util.digester.Digester.getRuleNamespaceURI()", "public java.lang.String getRuleNamespaceURI()"], ["void", "org.apache.tomcat.util.digester.Digester.setRuleNamespaceURI(java.lang.String)", "public void setRuleNamespaceURI(java.lang.String)"], ["javax.xml.parsers.SAXParser", "org.apache.tomcat.util.digester.Digester.getParser()", "public javax.xml.parsers.SAXParser getParser()"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.getProperty(java.lang.String)", "public java.lang.Object getProperty(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException"], ["org.apache.tomcat.util.digester.Rules", "org.apache.tomcat.util.digester.Digester.getRules()", "public org.apache.tomcat.util.digester.Rules getRules()"], ["void", "org.apache.tomcat.util.digester.Digester.setRules(org.apache.tomcat.util.digester.Rules)", "public void setRules(org.apache.tomcat.util.digester.Rules)"], ["boolean", "org.apache.tomcat.util.digester.Digester.getUseContextClassLoader()", "public boolean getUseContextClassLoader()"], ["void", "org.apache.tomcat.util.digester.Digester.setUseContextClassLoader(boolean)", "public void setUseContextClassLoader(boolean)"], ["boolean", "org.apache.tomcat.util.digester.Digester.getValidating()", "public boolean getValidating()"], ["void", "org.apache.tomcat.util.digester.Digester.setValidating(boolean)", "public void setValidating(boolean)"], ["boolean", "org.apache.tomcat.util.digester.Digester.getRulesValidation()", "public boolean getRulesValidation()"], ["void", "org.apache.tomcat.util.digester.Digester.setRulesValidation(boolean)", "public void setRulesValidation(boolean)"], ["java.util.Map<java.lang.Class<?>, java.util.List<java.lang.String>>", "org.apache.tomcat.util.digester.Digester.getFakeAttributes()", "public java.util.Map<java.lang.Class<?>, java.util.List<java.lang.String>> getFakeAttributes()"], ["boolean", "org.apache.tomcat.util.digester.Digester.isFakeAttribute(java.lang.Object, java.lang.String)", "public boolean isFakeAttribute(java.lang.Object, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.setFakeAttributes(java.util.Map<java.lang.Class<?>, java.util.List<java.lang.String>>)", "public void setFakeAttributes(java.util.Map<java.lang.Class<?>, java.util.List<java.lang.String>>)"], ["org.xml.sax.XMLReader", "org.apache.tomcat.util.digester.Digester.getXMLReader()", "public org.xml.sax.XMLReader getXMLReader() throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.characters(char[], int, int)", "public void characters(char[], int, int) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.endDocument()", "public void endDocument() throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.endElement(java.lang.String, java.lang.String, java.lang.String)", "public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.endPrefixMapping(java.lang.String)", "public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.ignorableWhitespace(char[], int, int)", "public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.processingInstruction(java.lang.String, java.lang.String)", "public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException"], ["org.xml.sax.Locator", "org.apache.tomcat.util.digester.Digester.getDocumentLocator()", "public org.xml.sax.Locator getDocumentLocator()"], ["void", "org.apache.tomcat.util.digester.Digester.setDocumentLocator(org.xml.sax.Locator)", "public void setDocumentLocator(org.xml.sax.Locator)"], ["void", "org.apache.tomcat.util.digester.Digester.skippedEntity(java.lang.String)", "public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.startDocument()", "public void startDocument() throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.startPrefixMapping(java.lang.String, java.lang.String)", "public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.notationDecl(java.lang.String, java.lang.String, java.lang.String)", "public void notationDecl(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.setEntityResolver(org.xml.sax.EntityResolver)", "public void setEntityResolver(org.xml.sax.EntityResolver)"], ["org.xml.sax.EntityResolver", "org.apache.tomcat.util.digester.Digester.getEntityResolver()", "public org.xml.sax.EntityResolver getEntityResolver()"], ["org.xml.sax.InputSource", "org.apache.tomcat.util.digester.Digester.resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException"], ["void", "org.apache.tomcat.util.digester.Digester.startDTD(java.lang.String, java.lang.String, java.lang.String)", "public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.error(org.xml.sax.SAXParseException)", "public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.fatalError(org.xml.sax.SAXParseException)", "public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.warning(org.xml.sax.SAXParseException)", "public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.parse(java.io.File)", "public java.lang.Object parse(java.io.File) throws java.io.IOException, org.xml.sax.SAXException"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.parse(org.xml.sax.InputSource)", "public java.lang.Object parse(org.xml.sax.InputSource) throws java.io.IOException, org.xml.sax.SAXException"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.parse(java.io.InputStream)", "public java.lang.Object parse(java.io.InputStream) throws java.io.IOException, org.xml.sax.SAXException"], ["void", "org.apache.tomcat.util.digester.Digester.register(java.lang.String, java.lang.String)", "public void register(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.addRule(java.lang.String, org.apache.tomcat.util.digester.Rule)", "public void addRule(java.lang.String, org.apache.tomcat.util.digester.Rule)"], ["void", "org.apache.tomcat.util.digester.Digester.addRuleSet(org.apache.tomcat.util.digester.RuleSet)", "public void addRuleSet(org.apache.tomcat.util.digester.RuleSet)"], ["void", "org.apache.tomcat.util.digester.Digester.addCallMethod(java.lang.String, java.lang.String)", "public void addCallMethod(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.addCallMethod(java.lang.String, java.lang.String, int)", "public void addCallMethod(java.lang.String, java.lang.String, int)"], ["void", "org.apache.tomcat.util.digester.Digester.addCallParam(java.lang.String, int)", "public void addCallParam(java.lang.String, int)"], ["void", "org.apache.tomcat.util.digester.Digester.addFactoryCreate(java.lang.String, org.apache.tomcat.util.digester.ObjectCreationFactory, boolean)", "public void addFactoryCreate(java.lang.String, org.apache.tomcat.util.digester.ObjectCreationFactory, boolean)"], ["void", "org.apache.tomcat.util.digester.Digester.addObjectCreate(java.lang.String, java.lang.String)", "public void addObjectCreate(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.addObjectCreate(java.lang.String, java.lang.String, java.lang.String)", "public void addObjectCreate(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.addSetNext(java.lang.String, java.lang.String, java.lang.String)", "public void addSetNext(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.addSetProperties(java.lang.String)", "public void addSetProperties(java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Digester.clear()", "public void clear()"], ["void", "org.apache.tomcat.util.digester.Digester.reset()", "public void reset()"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.peek(int)", "public java.lang.Object peek(int)"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.pop()", "public java.lang.Object pop()"], ["void", "org.apache.tomcat.util.digester.Digester.push(java.lang.Object)", "public void push(java.lang.Object)"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.getRoot()", "public java.lang.Object getRoot()"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.peekParams()", "public java.lang.Object peekParams()"], ["java.lang.Object", "org.apache.tomcat.util.digester.Digester.popParams()", "public java.lang.Object popParams()"], ["void", "org.apache.tomcat.util.digester.Digester.pushParams(java.lang.Object)", "public void pushParams(java.lang.Object)"], ["org.xml.sax.SAXException", "org.apache.tomcat.util.digester.Digester.createSAXException(java.lang.String, java.lang.Exception)", "public org.xml.sax.SAXException createSAXException(java.lang.String, java.lang.Exception)"], ["org.xml.sax.SAXException", "org.apache.tomcat.util.digester.Digester.createSAXException(java.lang.Exception)", "public org.xml.sax.SAXException createSAXException(java.lang.Exception)"], ["org.xml.sax.SAXException", "org.apache.tomcat.util.digester.Digester.createSAXException(java.lang.String)", "public org.xml.sax.SAXException createSAXException(java.lang.String)"], ["org.apache.tomcat.util.digester.FactoryCreateRule", "org.apache.tomcat.util.digester.FactoryCreateRule(org.apache.tomcat.util.digester.ObjectCreationFactory, boolean)", "public org.apache.tomcat.util.digester.FactoryCreateRule(org.apache.tomcat.util.digester.ObjectCreationFactory, boolean)"], ["void", "org.apache.tomcat.util.digester.FactoryCreateRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.FactoryCreateRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.FactoryCreateRule.finish()", "public void finish() throws java.lang.Exception"], ["java.lang.String", "org.apache.tomcat.util.digester.FactoryCreateRule.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.digester.ObjectCreateRule", "org.apache.tomcat.util.digester.ObjectCreateRule(java.lang.String)", "public org.apache.tomcat.util.digester.ObjectCreateRule(java.lang.String)"], ["org.apache.tomcat.util.digester.ObjectCreateRule", "org.apache.tomcat.util.digester.ObjectCreateRule(java.lang.String, java.lang.String)", "public org.apache.tomcat.util.digester.ObjectCreateRule(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.digester.ObjectCreateRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.ObjectCreateRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.tomcat.util.digester.ObjectCreateRule.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.digester.Rule", "org.apache.tomcat.util.digester.Rule()", "public org.apache.tomcat.util.digester.Rule()"], ["org.apache.tomcat.util.digester.Digester", "org.apache.tomcat.util.digester.Rule.getDigester()", "public org.apache.tomcat.util.digester.Digester getDigester()"], ["void", "org.apache.tomcat.util.digester.Rule.setDigester(org.apache.tomcat.util.digester.Digester)", "public void setDigester(org.apache.tomcat.util.digester.Digester)"], ["java.lang.String", "org.apache.tomcat.util.digester.Rule.getNamespaceURI()", "public java.lang.String getNamespaceURI()"], ["void", "org.apache.tomcat.util.digester.Rule.setNamespaceURI(java.lang.String)", "public void setNamespaceURI(java.lang.String)"], ["void", "org.apache.tomcat.util.digester.Rule.begin(org.xml.sax.Attributes)", "public void begin(org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.Rule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.Rule.body(java.lang.String)", "public void body(java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.Rule.body(java.lang.String, java.lang.String, java.lang.String)", "public void body(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.Rule.end()", "public void end() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.Rule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.digester.Rule.finish()", "public void finish() throws java.lang.Exception"], ["org.apache.tomcat.util.digester.RuleSetBase", "org.apache.tomcat.util.digester.RuleSetBase()", "public org.apache.tomcat.util.digester.RuleSetBase()"], ["java.lang.String", "org.apache.tomcat.util.digester.RuleSetBase.getNamespaceURI()", "public java.lang.String getNamespaceURI()"], ["org.apache.tomcat.util.digester.RulesBase", "org.apache.tomcat.util.digester.RulesBase()", "public org.apache.tomcat.util.digester.RulesBase()"], ["org.apache.tomcat.util.digester.Digester", "org.apache.tomcat.util.digester.RulesBase.getDigester()", "public org.apache.tomcat.util.digester.Digester getDigester()"], ["void", "org.apache.tomcat.util.digester.RulesBase.setDigester(org.apache.tomcat.util.digester.Digester)", "public void setDigester(org.apache.tomcat.util.digester.Digester)"], ["java.lang.String", "org.apache.tomcat.util.digester.RulesBase.getNamespaceURI()", "public java.lang.String getNamespaceURI()"], ["void", "org.apache.tomcat.util.digester.RulesBase.setNamespaceURI(java.lang.String)", "public void setNamespaceURI(java.lang.String)"], ["void", "org.apache.tomcat.util.digester.RulesBase.add(java.lang.String, org.apache.tomcat.util.digester.Rule)", "public void add(java.lang.String, org.apache.tomcat.util.digester.Rule)"], ["void", "org.apache.tomcat.util.digester.RulesBase.clear()", "public void clear()"], ["java.util.List<org.apache.tomcat.util.digester.Rule>", "org.apache.tomcat.util.digester.RulesBase.match(java.lang.String, java.lang.String)", "public java.util.List<org.apache.tomcat.util.digester.Rule> match(java.lang.String, java.lang.String)"], ["java.util.List<org.apache.tomcat.util.digester.Rule>", "org.apache.tomcat.util.digester.RulesBase.rules()", "public java.util.List<org.apache.tomcat.util.digester.Rule> rules()"], ["org.apache.tomcat.util.digester.SetNextRule", "org.apache.tomcat.util.digester.SetNextRule(java.lang.String, java.lang.String)", "public org.apache.tomcat.util.digester.SetNextRule(java.lang.String, java.lang.String)"], ["boolean", "org.apache.tomcat.util.digester.SetNextRule.isExactMatch()", "public boolean isExactMatch()"], ["void", "org.apache.tomcat.util.digester.SetNextRule.setExactMatch(boolean)", "public void setExactMatch(boolean)"], ["void", "org.apache.tomcat.util.digester.SetNextRule.end(java.lang.String, java.lang.String)", "public void end(java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.tomcat.util.digester.SetNextRule.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.digester.SetPropertiesRule", "org.apache.tomcat.util.digester.SetPropertiesRule()", "public org.apache.tomcat.util.digester.SetPropertiesRule()"], ["void", "org.apache.tomcat.util.digester.SetPropertiesRule.begin(java.lang.String, java.lang.String, org.xml.sax.Attributes)", "public void begin(java.lang.String, java.lang.String, org.xml.sax.Attributes) throws java.lang.Exception"], ["java.lang.String", "org.apache.tomcat.util.digester.SetPropertiesRule.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.file.Matcher", "org.apache.tomcat.util.file.Matcher()", "public org.apache.tomcat.util.file.Matcher()"], ["boolean", "org.apache.tomcat.util.file.Matcher.matchName(java.util.Set<java.lang.String>, java.lang.String)", "public static boolean matchName(java.util.Set<java.lang.String>, java.lang.String)"], ["boolean", "org.apache.tomcat.util.file.Matcher.match(java.lang.String, java.lang.String, boolean)", "public static boolean match(java.lang.String, java.lang.String, boolean)"], ["boolean", "org.apache.tomcat.util.http.CookieSupport.isV0Separator(char)", "public static final boolean isV0Separator(char)"], ["boolean", "org.apache.tomcat.util.http.CookieSupport.isHttpSeparator(char)", "public static final boolean isHttpSeparator(char)"], ["org.apache.tomcat.util.http.Cookies", "org.apache.tomcat.util.http.Cookies(org.apache.tomcat.util.http.MimeHeaders)", "public org.apache.tomcat.util.http.Cookies(org.apache.tomcat.util.http.MimeHeaders)"], ["void", "org.apache.tomcat.util.http.Cookies.recycle()", "public void recycle()"], ["java.lang.String", "org.apache.tomcat.util.http.Cookies.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.http.ServerCookie", "org.apache.tomcat.util.http.Cookies.getCookie(int)", "public org.apache.tomcat.util.http.ServerCookie getCookie(int)"], ["int", "org.apache.tomcat.util.http.Cookies.getCookieCount()", "public int getCookieCount()"], ["void", "org.apache.tomcat.util.http.Cookies.setUseRfc6265(boolean)", "public void setUseRfc6265(boolean)"], ["org.apache.tomcat.util.http.FastHttpDateFormat", "org.apache.tomcat.util.http.FastHttpDateFormat()", "public org.apache.tomcat.util.http.FastHttpDateFormat()"], ["java.lang.String", "org.apache.tomcat.util.http.FastHttpDateFormat.getCurrentDate()", "public static final java.lang.String getCurrentDate()"], ["java.lang.String", "org.apache.tomcat.util.http.FastHttpDateFormat.formatDate(long, java.text.DateFormat)", "public static final java.lang.String formatDate(long, java.text.DateFormat)"], ["long", "org.apache.tomcat.util.http.FastHttpDateFormat.parseDate(java.lang.String, java.text.DateFormat[])", "public static final long parseDate(java.lang.String, java.text.DateFormat[])"], ["java.lang.String", "org.apache.tomcat.util.http.HttpMessages.getMessage(int)", "public java.lang.String getMessage(int)"], ["org.apache.tomcat.util.http.HttpMessages", "org.apache.tomcat.util.http.HttpMessages.getInstance(java.util.Locale)", "public static org.apache.tomcat.util.http.HttpMessages getInstance(java.util.Locale)"], ["java.lang.String", "org.apache.tomcat.util.http.HttpMessages.filter(java.lang.String)", "public static java.lang.String filter(java.lang.String)"], ["boolean", "org.apache.tomcat.util.http.HttpMessages.isSafeInHttpHeader(java.lang.String)", "public static boolean isSafeInHttpHeader(java.lang.String)"], ["org.apache.tomcat.util.http.MimeHeaderField", "org.apache.tomcat.util.http.MimeHeaderField()", "public org.apache.tomcat.util.http.MimeHeaderField()"], ["void", "org.apache.tomcat.util.http.MimeHeaderField.recycle()", "public void recycle()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaderField.getName()", "public org.apache.tomcat.util.buf.MessageBytes getName()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaderField.getValue()", "public org.apache.tomcat.util.buf.MessageBytes getValue()"], ["org.apache.tomcat.util.http.MimeHeaders", "org.apache.tomcat.util.http.MimeHeaders()", "public org.apache.tomcat.util.http.MimeHeaders()"], ["void", "org.apache.tomcat.util.http.MimeHeaders.setLimit(int)", "public void setLimit(int)"], ["void", "org.apache.tomcat.util.http.MimeHeaders.recycle()", "public void recycle()"], ["void", "org.apache.tomcat.util.http.MimeHeaders.clear()", "public void clear()"], ["java.lang.String", "org.apache.tomcat.util.http.MimeHeaders.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.http.MimeHeaders.size()", "public int size()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaders.getName(int)", "public org.apache.tomcat.util.buf.MessageBytes getName(int)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaders.getValue(int)", "public org.apache.tomcat.util.buf.MessageBytes getValue(int)"], ["int", "org.apache.tomcat.util.http.MimeHeaders.findHeader(java.lang.String, int)", "public int findHeader(java.lang.String, int)"], ["java.util.Enumeration<java.lang.String>", "org.apache.tomcat.util.http.MimeHeaders.names()", "public java.util.Enumeration<java.lang.String> names()"], ["java.util.Enumeration<java.lang.String>", "org.apache.tomcat.util.http.MimeHeaders.values(java.lang.String)", "public java.util.Enumeration<java.lang.String> values(java.lang.String)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaders.addValue(java.lang.String)", "public org.apache.tomcat.util.buf.MessageBytes addValue(java.lang.String)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaders.addValue(byte[], int, int)", "public org.apache.tomcat.util.buf.MessageBytes addValue(byte[], int, int)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaders.setValue(java.lang.String)", "public org.apache.tomcat.util.buf.MessageBytes setValue(java.lang.String)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaders.getValue(java.lang.String)", "public org.apache.tomcat.util.buf.MessageBytes getValue(java.lang.String)"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.MimeHeaders.getUniqueValue(java.lang.String)", "public org.apache.tomcat.util.buf.MessageBytes getUniqueValue(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.MimeHeaders.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["void", "org.apache.tomcat.util.http.MimeHeaders.removeHeader(java.lang.String)", "public void removeHeader(java.lang.String)"], ["org.apache.tomcat.util.http.NamesEnumerator", "org.apache.tomcat.util.http.NamesEnumerator(org.apache.tomcat.util.http.MimeHeaders)", "public org.apache.tomcat.util.http.NamesEnumerator(org.apache.tomcat.util.http.MimeHeaders)"], ["boolean", "org.apache.tomcat.util.http.NamesEnumerator.hasMoreElements()", "public boolean hasMoreElements()"], ["java.lang.String", "org.apache.tomcat.util.http.NamesEnumerator.nextElement()", "public java.lang.String nextElement()"], ["java.lang.Object", "org.apache.tomcat.util.http.NamesEnumerator.nextElement()", "public java.lang.Object nextElement()"], ["org.apache.tomcat.util.http.Parameters", "org.apache.tomcat.util.http.Parameters()", "public org.apache.tomcat.util.http.Parameters()"], ["void", "org.apache.tomcat.util.http.Parameters.setQuery(org.apache.tomcat.util.buf.MessageBytes)", "public void setQuery(org.apache.tomcat.util.buf.MessageBytes)"], ["void", "org.apache.tomcat.util.http.Parameters.setLimit(int)", "public void setLimit(int)"], ["java.lang.String", "org.apache.tomcat.util.http.Parameters.getEncoding()", "public java.lang.String getEncoding()"], ["void", "org.apache.tomcat.util.http.Parameters.setEncoding(java.lang.String)", "public void setEncoding(java.lang.String)"], ["void", "org.apache.tomcat.util.http.Parameters.setQueryStringEncoding(java.lang.String)", "public void setQueryStringEncoding(java.lang.String)"], ["boolean", "org.apache.tomcat.util.http.Parameters.isParseFailed()", "public boolean isParseFailed()"], ["void", "org.apache.tomcat.util.http.Parameters.setParseFailed(boolean)", "public void setParseFailed(boolean)"], ["void", "org.apache.tomcat.util.http.Parameters.recycle()", "public void recycle()"], ["java.lang.String[]", "org.apache.tomcat.util.http.Parameters.getParameterValues(java.lang.String)", "public java.lang.String[] getParameterValues(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.apache.tomcat.util.http.Parameters.getParameterNames()", "public java.util.Enumeration<java.lang.String> getParameterNames()"], ["java.lang.String", "org.apache.tomcat.util.http.Parameters.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["void", "org.apache.tomcat.util.http.Parameters.handleQueryParameters()", "public void handleQueryParameters()"], ["void", "org.apache.tomcat.util.http.Parameters.addParameter(java.lang.String, java.lang.String)", "public void addParameter(java.lang.String, java.lang.String) throws java.lang.IllegalStateException"], ["void", "org.apache.tomcat.util.http.Parameters.setURLDecoder(org.apache.tomcat.util.buf.UDecoder)", "public void setURLDecoder(org.apache.tomcat.util.buf.UDecoder)"], ["void", "org.apache.tomcat.util.http.Parameters.processParameters(byte[], int, int)", "public void processParameters(byte[], int, int)"], ["void", "org.apache.tomcat.util.http.Parameters.processParameters(org.apache.tomcat.util.buf.MessageBytes, java.lang.String)", "public void processParameters(org.apache.tomcat.util.buf.MessageBytes, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.Parameters.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.tomcat.util.http.RequestUtil.normalize(java.lang.String)", "public static java.lang.String normalize(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.RequestUtil.normalize(java.lang.String, boolean)", "public static java.lang.String normalize(java.lang.String, boolean)"], ["org.apache.tomcat.util.http.ServerCookie", "org.apache.tomcat.util.http.ServerCookie()", "public org.apache.tomcat.util.http.ServerCookie()"], ["void", "org.apache.tomcat.util.http.ServerCookie.recycle()", "public void recycle()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.ServerCookie.getComment()", "public org.apache.tomcat.util.buf.MessageBytes getComment()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.ServerCookie.getDomain()", "public org.apache.tomcat.util.buf.MessageBytes getDomain()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.ServerCookie.getPath()", "public org.apache.tomcat.util.buf.MessageBytes getPath()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.ServerCookie.getName()", "public org.apache.tomcat.util.buf.MessageBytes getName()"], ["org.apache.tomcat.util.buf.MessageBytes", "org.apache.tomcat.util.http.ServerCookie.getValue()", "public org.apache.tomcat.util.buf.MessageBytes getValue()"], ["int", "org.apache.tomcat.util.http.ServerCookie.getVersion()", "public int getVersion()"], ["void", "org.apache.tomcat.util.http.ServerCookie.setVersion(int)", "public void setVersion(int)"], ["java.lang.String", "org.apache.tomcat.util.http.ServerCookie.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.http.ServerCookies", "org.apache.tomcat.util.http.ServerCookies(int)", "public org.apache.tomcat.util.http.ServerCookies(int)"], ["org.apache.tomcat.util.http.ServerCookie", "org.apache.tomcat.util.http.ServerCookies.addCookie()", "public org.apache.tomcat.util.http.ServerCookie addCookie()"], ["org.apache.tomcat.util.http.ServerCookie", "org.apache.tomcat.util.http.ServerCookies.getCookie(int)", "public org.apache.tomcat.util.http.ServerCookie getCookie(int)"], ["int", "org.apache.tomcat.util.http.ServerCookies.getCookieCount()", "public int getCookieCount()"], ["void", "org.apache.tomcat.util.http.ServerCookies.recycle()", "public void recycle()"], ["org.apache.tomcat.util.http.SetCookieSupport", "org.apache.tomcat.util.http.SetCookieSupport()", "public org.apache.tomcat.util.http.SetCookieSupport()"], ["java.lang.String", "org.apache.tomcat.util.http.SetCookieSupport.generateHeader(javax.servlet.http.Cookie)", "public static java.lang.String generateHeader(javax.servlet.http.Cookie)"], ["boolean", "org.apache.tomcat.util.http.ValuesEnumerator.hasMoreElements()", "public boolean hasMoreElements()"], ["java.lang.String", "org.apache.tomcat.util.http.ValuesEnumerator.nextElement()", "public java.lang.String nextElement()"], ["java.lang.Object", "org.apache.tomcat.util.http.ValuesEnumerator.nextElement()", "public java.lang.Object nextElement()"], ["org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream()", "public org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream()"], ["org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream(int)", "public org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream(int)"], ["void", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream.write(byte[], int, int)", "public void write(byte[], int, int)"], ["synchronized", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream.void write(int)", "public synchronized void write(int)"], ["synchronized", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream.int write(java.io.InputStream)", "public synchronized int write(java.io.InputStream) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream.void writeTo(java.io.OutputStream)", "public synchronized void writeTo(java.io.OutputStream) throws java.io.IOException"], ["synchronized", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream.byte[] toByteArray()", "public synchronized byte[] toByteArray()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream", "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream(int, java.io.File)", "public org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream(int, java.io.File)"], ["boolean", "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream.isInMemory()", "public boolean isInMemory()"], ["byte[]", "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream.getData()", "public byte[] getData()"], ["java.io.File", "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream.getFile()", "public java.io.File getFile()"], ["void", "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream.close()", "public void close() throws java.io.IOException"], ["org.apache.tomcat.util.http.fileupload.FileItemStream$ItemSkippedException", "org.apache.tomcat.util.http.fileupload.FileItemStream$ItemSkippedException()", "public org.apache.tomcat.util.http.fileupload.FileItemStream$ItemSkippedException()"], ["org.apache.tomcat.util.http.fileupload.FileUpload", "org.apache.tomcat.util.http.fileupload.FileUpload()", "public org.apache.tomcat.util.http.fileupload.FileUpload()"], ["org.apache.tomcat.util.http.fileupload.FileUpload", "org.apache.tomcat.util.http.fileupload.FileUpload(org.apache.tomcat.util.http.fileupload.FileItemFactory)", "public org.apache.tomcat.util.http.fileupload.FileUpload(org.apache.tomcat.util.http.fileupload.FileItemFactory)"], ["org.apache.tomcat.util.http.fileupload.FileItemFactory", "org.apache.tomcat.util.http.fileupload.FileUpload.getFileItemFactory()", "public org.apache.tomcat.util.http.fileupload.FileItemFactory getFileItemFactory()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUpload.setFileItemFactory(org.apache.tomcat.util.http.fileupload.FileItemFactory)", "public void setFileItemFactory(org.apache.tomcat.util.http.fileupload.FileItemFactory)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.getContentType()", "public java.lang.String getContentType()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.getFieldName()", "public java.lang.String getFieldName()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.isFormField()", "public boolean isFormField()"], ["java.io.InputStream", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["org.apache.tomcat.util.http.fileupload.FileItemHeaders", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.getHeaders()", "public org.apache.tomcat.util.http.fileupload.FileItemHeaders getHeaders()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl.setHeaders(org.apache.tomcat.util.http.fileupload.FileItemHeaders)", "public void setHeaders(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"], ["boolean", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl.hasNext()", "public boolean hasNext() throws org.apache.tomcat.util.http.fileupload.FileUploadException, java.io.IOException"], ["org.apache.tomcat.util.http.fileupload.FileItemStream", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl.next()", "public org.apache.tomcat.util.http.fileupload.FileItemStream next() throws org.apache.tomcat.util.http.fileupload.FileUploadException, java.io.IOException"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException(java.lang.String, long, long)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException(java.lang.String, long, long)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException.getFileName()", "public java.lang.String getFileName()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException.setFileName(java.lang.String)", "public void setFileName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException.getFieldName()", "public java.lang.String getFieldName()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException.setFieldName(java.lang.String)", "public void setFieldName(java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException()", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException()"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException(java.lang.String, java.lang.Throwable)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException(java.lang.String, java.lang.Throwable)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException(java.lang.String)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException(java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException(java.lang.Throwable)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException(java.lang.Throwable)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException()", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException()"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException(java.lang.String, java.lang.Throwable)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException(java.lang.String, java.lang.Throwable)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException(java.lang.String)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException(java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException(java.lang.Throwable)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$IOFileUploadException(java.lang.Throwable)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException()", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException()"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException(java.lang.String)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException(java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException(java.lang.String, java.lang.Throwable)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$InvalidContentTypeException(java.lang.String, java.lang.Throwable)"], ["long", "org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeException.getActualSize()", "public long getActualSize()"], ["long", "org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeException.getPermittedSize()", "public long getPermittedSize()"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException", "org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException(java.lang.String, long, long)", "public org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException(java.lang.String, long, long)"], ["org.apache.tomcat.util.http.fileupload.FileUploadBase", "org.apache.tomcat.util.http.fileupload.FileUploadBase()", "public org.apache.tomcat.util.http.fileupload.FileUploadBase()"], ["boolean", "org.apache.tomcat.util.http.fileupload.FileUploadBase.isMultipartContent(org.apache.tomcat.util.http.fileupload.RequestContext)", "public static final boolean isMultipartContent(org.apache.tomcat.util.http.fileupload.RequestContext)"], ["long", "org.apache.tomcat.util.http.fileupload.FileUploadBase.getSizeMax()", "public long getSizeMax()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUploadBase.setSizeMax(long)", "public void setSizeMax(long)"], ["long", "org.apache.tomcat.util.http.fileupload.FileUploadBase.getFileSizeMax()", "public long getFileSizeMax()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUploadBase.setFileSizeMax(long)", "public void setFileSizeMax(long)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.FileUploadBase.getHeaderEncoding()", "public java.lang.String getHeaderEncoding()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUploadBase.setHeaderEncoding(java.lang.String)", "public void setHeaderEncoding(java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.FileItemIterator", "org.apache.tomcat.util.http.fileupload.FileUploadBase.getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)", "public org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext) throws org.apache.tomcat.util.http.fileupload.FileUploadException, java.io.IOException"], ["java.util.List<org.apache.tomcat.util.http.fileupload.FileItem>", "org.apache.tomcat.util.http.fileupload.FileUploadBase.parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)", "public java.util.List<org.apache.tomcat.util.http.fileupload.FileItem> parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext) throws org.apache.tomcat.util.http.fileupload.FileUploadException"], ["java.util.Map<java.lang.String, java.util.List<org.apache.tomcat.util.http.fileupload.FileItem>>", "org.apache.tomcat.util.http.fileupload.FileUploadBase.parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext)", "public java.util.Map<java.lang.String, java.util.List<org.apache.tomcat.util.http.fileupload.FileItem>> parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext) throws org.apache.tomcat.util.http.fileupload.FileUploadException"], ["org.apache.tomcat.util.http.fileupload.ProgressListener", "org.apache.tomcat.util.http.fileupload.FileUploadBase.getProgressListener()", "public org.apache.tomcat.util.http.fileupload.ProgressListener getProgressListener()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUploadBase.setProgressListener(org.apache.tomcat.util.http.fileupload.ProgressListener)", "public void setProgressListener(org.apache.tomcat.util.http.fileupload.ProgressListener)"], ["org.apache.tomcat.util.http.fileupload.FileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadException()", "public org.apache.tomcat.util.http.fileupload.FileUploadException()"], ["org.apache.tomcat.util.http.fileupload.FileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadException(java.lang.String, java.lang.Throwable)", "public org.apache.tomcat.util.http.fileupload.FileUploadException(java.lang.String, java.lang.Throwable)"], ["org.apache.tomcat.util.http.fileupload.FileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadException(java.lang.String)", "public org.apache.tomcat.util.http.fileupload.FileUploadException(java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.FileUploadException", "org.apache.tomcat.util.http.fileupload.FileUploadException(java.lang.Throwable)", "public org.apache.tomcat.util.http.fileupload.FileUploadException(java.lang.Throwable)"], ["org.apache.tomcat.util.http.fileupload.FileUtils", "org.apache.tomcat.util.http.fileupload.FileUtils()", "public org.apache.tomcat.util.http.fileupload.FileUtils()"], ["void", "org.apache.tomcat.util.http.fileupload.FileUtils.deleteDirectory(java.io.File)", "public static void deleteDirectory(java.io.File) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.FileUtils.cleanDirectory(java.io.File)", "public static void cleanDirectory(java.io.File) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.FileUtils.forceDelete(java.io.File)", "public static void forceDelete(java.io.File) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.FileUtils.forceDeleteOnExit(java.io.File)", "public static void forceDeleteOnExit(java.io.File) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.http.fileupload.FileUtils.isSymlink(java.io.File)", "public static boolean isSymlink(java.io.File) throws java.io.IOException"], ["org.apache.tomcat.util.http.fileupload.IOUtils", "org.apache.tomcat.util.http.fileupload.IOUtils()", "public org.apache.tomcat.util.http.fileupload.IOUtils()"], ["void", "org.apache.tomcat.util.http.fileupload.IOUtils.closeQuietly(java.io.Closeable)", "public static void closeQuietly(java.io.Closeable)"], ["int", "org.apache.tomcat.util.http.fileupload.IOUtils.copy(java.io.InputStream, java.io.OutputStream)", "public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["long", "org.apache.tomcat.util.http.fileupload.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream)", "public static long copyLarge(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["int", "org.apache.tomcat.util.http.fileupload.IOUtils.read(java.io.InputStream, byte[], int, int)", "public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.IOUtils.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.IOUtils.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["org.apache.tomcat.util.http.fileupload.InvalidFileNameException", "org.apache.tomcat.util.http.fileupload.InvalidFileNameException(java.lang.String, java.lang.String)", "public org.apache.tomcat.util.http.fileupload.InvalidFileNameException(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.InvalidFileNameException.getName()", "public java.lang.String getName()"], ["org.apache.tomcat.util.http.fileupload.MultipartStream$IllegalBoundaryException", "org.apache.tomcat.util.http.fileupload.MultipartStream$IllegalBoundaryException()", "public org.apache.tomcat.util.http.fileupload.MultipartStream$IllegalBoundaryException()"], ["org.apache.tomcat.util.http.fileupload.MultipartStream$IllegalBoundaryException", "org.apache.tomcat.util.http.fileupload.MultipartStream$IllegalBoundaryException(java.lang.String)", "public org.apache.tomcat.util.http.fileupload.MultipartStream$IllegalBoundaryException(java.lang.String)"], ["long", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.getBytesRead()", "public long getBytesRead()"], ["int", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.available()", "public int available() throws java.io.IOException"], ["int", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.close(boolean)", "public void close(boolean) throws java.io.IOException"], ["long", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.http.fileupload.MultipartStream$ItemInputStream.isClosed()", "public boolean isClosed()"], ["org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException", "org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException()", "public org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException()"], ["org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException", "org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException(java.lang.String)", "public org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException(java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.MultipartStream", "org.apache.tomcat.util.http.fileupload.MultipartStream(java.io.InputStream, byte[], int, org.apache.tomcat.util.http.fileupload.MultipartStream$ProgressNotifier)", "public org.apache.tomcat.util.http.fileupload.MultipartStream(java.io.InputStream, byte[], int, org.apache.tomcat.util.http.fileupload.MultipartStream$ProgressNotifier)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.MultipartStream.getHeaderEncoding()", "public java.lang.String getHeaderEncoding()"], ["void", "org.apache.tomcat.util.http.fileupload.MultipartStream.setHeaderEncoding(java.lang.String)", "public void setHeaderEncoding(java.lang.String)"], ["byte", "org.apache.tomcat.util.http.fileupload.MultipartStream.readByte()", "public byte readByte() throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.http.fileupload.MultipartStream.readBoundary()", "public boolean readBoundary() throws org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException, org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException"], ["void", "org.apache.tomcat.util.http.fileupload.MultipartStream.setBoundary(byte[])", "public void setBoundary(byte[]) throws org.apache.tomcat.util.http.fileupload.MultipartStream$IllegalBoundaryException"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.MultipartStream.readHeaders()", "public java.lang.String readHeaders() throws org.apache.tomcat.util.http.fileupload.FileUploadBase$FileUploadIOException, org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException"], ["int", "org.apache.tomcat.util.http.fileupload.MultipartStream.readBodyData(java.io.OutputStream)", "public int readBodyData(java.io.OutputStream) throws org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException, java.io.IOException"], ["int", "org.apache.tomcat.util.http.fileupload.MultipartStream.discardBodyData()", "public int discardBodyData() throws org.apache.tomcat.util.http.fileupload.MultipartStream$MalformedStreamException, java.io.IOException"], ["boolean", "org.apache.tomcat.util.http.fileupload.MultipartStream.skipPreamble()", "public boolean skipPreamble() throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.http.fileupload.MultipartStream.arrayequals(byte[], byte[], int)", "public static boolean arrayequals(byte[], byte[], int)"], ["org.apache.tomcat.util.http.fileupload.ParameterParser", "org.apache.tomcat.util.http.fileupload.ParameterParser()", "public org.apache.tomcat.util.http.fileupload.ParameterParser()"], ["boolean", "org.apache.tomcat.util.http.fileupload.ParameterParser.isLowerCaseNames()", "public boolean isLowerCaseNames()"], ["void", "org.apache.tomcat.util.http.fileupload.ParameterParser.setLowerCaseNames(boolean)", "public void setLowerCaseNames(boolean)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.http.fileupload.ParameterParser.parse(java.lang.String, char[])", "public java.util.Map<java.lang.String, java.lang.String> parse(java.lang.String, char[])"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.http.fileupload.ParameterParser.parse(java.lang.String, char)", "public java.util.Map<java.lang.String, java.lang.String> parse(java.lang.String, char)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.http.fileupload.ParameterParser.parse(char[], char)", "public java.util.Map<java.lang.String, java.lang.String> parse(char[], char)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.http.fileupload.ParameterParser.parse(char[], int, int, char)", "public java.util.Map<java.lang.String, java.lang.String> parse(char[], int, int, char)"], ["org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream", "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream(int)", "public org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream(int)"], ["void", "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream.isThresholdExceeded()", "public boolean isThresholdExceeded()"], ["org.apache.tomcat.util.http.fileupload.disk.DiskFileItem", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem(java.lang.String, java.lang.String, boolean, java.lang.String, int, java.io.File)", "public org.apache.tomcat.util.http.fileupload.disk.DiskFileItem(java.lang.String, java.lang.String, boolean, java.lang.String, int, java.io.File)"], ["java.io.InputStream", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getContentType()", "public java.lang.String getContentType()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getCharSet()", "public java.lang.String getCharSet()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.isInMemory()", "public boolean isInMemory()"], ["long", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getSize()", "public long getSize()"], ["byte[]", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.get()", "public byte[] get()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getString(java.lang.String)", "public java.lang.String getString(java.lang.String) throws java.io.UnsupportedEncodingException"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getString()", "public java.lang.String getString()"], ["void", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.write(java.io.File)", "public void write(java.io.File) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.delete()", "public void delete()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getFieldName()", "public java.lang.String getFieldName()"], ["void", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.setFieldName(java.lang.String)", "public void setFieldName(java.lang.String)"], ["boolean", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.isFormField()", "public boolean isFormField()"], ["void", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.setFormField(boolean)", "public void setFormField(boolean)"], ["java.io.OutputStream", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getOutputStream()", "public java.io.OutputStream getOutputStream() throws java.io.IOException"], ["java.io.File", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getStoreLocation()", "public java.io.File getStoreLocation()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.http.fileupload.FileItemHeaders", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.getHeaders()", "public org.apache.tomcat.util.http.fileupload.FileItemHeaders getHeaders()"], ["void", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem.setHeaders(org.apache.tomcat.util.http.fileupload.FileItemHeaders)", "public void setHeaders(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"], ["org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory()", "public org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory()"], ["org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory(int, java.io.File)", "public org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory(int, java.io.File)"], ["java.io.File", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory.getRepository()", "public java.io.File getRepository()"], ["void", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory.setRepository(java.io.File)", "public void setRepository(java.io.File)"], ["int", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory.getSizeThreshold()", "public int getSizeThreshold()"], ["void", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory.setSizeThreshold(int)", "public void setSizeThreshold(int)"], ["org.apache.tomcat.util.http.fileupload.FileItem", "org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory.createItem(java.lang.String, java.lang.String, boolean, java.lang.String)", "public org.apache.tomcat.util.http.fileupload.FileItem createItem(java.lang.String, java.lang.String, boolean, java.lang.String)"], ["boolean", "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload.isMultipartContent(javax.servlet.http.HttpServletRequest)", "public static final boolean isMultipartContent(javax.servlet.http.HttpServletRequest)"], ["org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload", "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload()", "public org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload()"], ["org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload", "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload(org.apache.tomcat.util.http.fileupload.FileItemFactory)", "public org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload(org.apache.tomcat.util.http.fileupload.FileItemFactory)"], ["java.util.Map<java.lang.String, java.util.List<org.apache.tomcat.util.http.fileupload.FileItem>>", "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload.parseParameterMap(javax.servlet.http.HttpServletRequest)", "public java.util.Map<java.lang.String, java.util.List<org.apache.tomcat.util.http.fileupload.FileItem>> parseParameterMap(javax.servlet.http.HttpServletRequest) throws org.apache.tomcat.util.http.fileupload.FileUploadException"], ["org.apache.tomcat.util.http.fileupload.FileItemIterator", "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload.getItemIterator(javax.servlet.http.HttpServletRequest)", "public org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(javax.servlet.http.HttpServletRequest) throws org.apache.tomcat.util.http.fileupload.FileUploadException, java.io.IOException"], ["org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext", "org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext(javax.servlet.http.HttpServletRequest)", "public org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext(javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext.getContentType()", "public java.lang.String getContentType()"], ["long", "org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext.contentLength()", "public long contentLength()"], ["java.io.InputStream", "org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl", "org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl()", "public org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl()"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl.getHeaderNames()", "public java.util.Iterator<java.lang.String> getHeaderNames()"], ["java.util.Iterator<java.lang.String>", "org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl.getHeaders(java.lang.String)", "public java.util.Iterator<java.lang.String> getHeaders(java.lang.String)"], ["synchronized", "org.apache.tomcat.util.http.fileupload.util.FileItemHeadersImpl.void addHeader(java.lang.String, java.lang.String)", "public synchronized void addHeader(java.lang.String, java.lang.String)"], ["org.apache.tomcat.util.http.fileupload.util.LimitedInputStream", "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream(java.io.InputStream, long)", "public org.apache.tomcat.util.http.fileupload.util.LimitedInputStream(java.io.InputStream, long)"], ["int", "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream.isClosed()", "public boolean isClosed() throws java.io.IOException"], ["void", "org.apache.tomcat.util.http.fileupload.util.LimitedInputStream.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.tomcat.util.http.fileupload.util.Streams.copy(java.io.InputStream, java.io.OutputStream, boolean)", "public static long copy(java.io.InputStream, java.io.OutputStream, boolean) throws java.io.IOException"], ["long", "org.apache.tomcat.util.http.fileupload.util.Streams.copy(java.io.InputStream, java.io.OutputStream, boolean, byte[])", "public static long copy(java.io.InputStream, java.io.OutputStream, boolean, byte[]) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.util.Streams.asString(java.io.InputStream)", "public static java.lang.String asString(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.util.Streams.asString(java.io.InputStream, java.lang.String)", "public static java.lang.String asString(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.util.Streams.checkFileName(java.lang.String)", "public static java.lang.String checkFileName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility.decodeText(java.lang.String)", "public static java.lang.String decodeText(java.lang.String) throws java.io.UnsupportedEncodingException"], ["org.apache.tomcat.util.http.fileupload.util.mime.ParseException", "org.apache.tomcat.util.http.fileupload.util.mime.ParseException(java.lang.String)", "public org.apache.tomcat.util.http.fileupload.util.mime.ParseException(java.lang.String)"], ["int", "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder.decode(byte[], java.io.OutputStream)", "public static int decode(byte[], java.io.OutputStream) throws java.io.IOException"], ["java.util.Locale", "org.apache.tomcat.util.http.parser.AcceptLanguage.getLocale()", "public java.util.Locale getLocale()"], ["double", "org.apache.tomcat.util.http.parser.AcceptLanguage.getQuality()", "public double getQuality()"], ["java.util.List<org.apache.tomcat.util.http.parser.AcceptLanguage>", "org.apache.tomcat.util.http.parser.AcceptLanguage.parse(java.io.StringReader)", "public static java.util.List<org.apache.tomcat.util.http.parser.AcceptLanguage> parse(java.io.StringReader) throws java.io.IOException"], ["org.apache.tomcat.util.http.parser.Authorization", "org.apache.tomcat.util.http.parser.Authorization()", "public org.apache.tomcat.util.http.parser.Authorization()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.tomcat.util.http.parser.Authorization.parseAuthorizationDigest(java.io.StringReader)", "public static java.util.Map<java.lang.String, java.lang.String> parseAuthorizationDigest(java.io.StringReader) throws java.lang.IllegalArgumentException, java.io.IOException"], ["org.apache.tomcat.util.http.parser.Cookie$ByteBuffer", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer(byte[], int, int)", "public org.apache.tomcat.util.http.parser.Cookie$ByteBuffer(byte[], int, int)"], ["int", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.position()", "public int position()"], ["void", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.position(int)", "public void position(int)"], ["int", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.limit()", "public int limit()"], ["int", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.remaining()", "public int remaining()"], ["boolean", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.hasRemaining()", "public boolean hasRemaining()"], ["byte", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.get()", "public byte get()"], ["byte", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.peek()", "public byte peek()"], ["void", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.rewind()", "public void rewind()"], ["byte[]", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.array()", "public byte[] array()"], ["java.lang.String", "org.apache.tomcat.util.http.parser.Cookie$ByteBuffer.toString()", "public java.lang.String toString()"], ["void", "org.apache.tomcat.util.http.parser.Cookie.parseCookie(byte[], int, int, org.apache.tomcat.util.http.ServerCookies)", "public static void parseCookie(byte[], int, int, org.apache.tomcat.util.http.ServerCookies)"], ["java.lang.String", "org.apache.tomcat.util.http.parser.Cookie.unescapeCookieValueRfc2109(java.lang.String)", "public static java.lang.String unescapeCookieValueRfc2109(java.lang.String)"], ["org.apache.tomcat.util.http.parser.HttpParser", "org.apache.tomcat.util.http.parser.HttpParser()", "public org.apache.tomcat.util.http.parser.HttpParser()"], ["java.lang.String", "org.apache.tomcat.util.http.parser.HttpParser.unquote(java.lang.String)", "public static java.lang.String unquote(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.parser.MediaType.getType()", "public java.lang.String getType()"], ["java.lang.String", "org.apache.tomcat.util.http.parser.MediaType.getSubtype()", "public java.lang.String getSubtype()"], ["java.lang.String", "org.apache.tomcat.util.http.parser.MediaType.getCharset()", "public java.lang.String getCharset()"], ["int", "org.apache.tomcat.util.http.parser.MediaType.getParameterCount()", "public int getParameterCount()"], ["java.lang.String", "org.apache.tomcat.util.http.parser.MediaType.getParameterValue(java.lang.String)", "public java.lang.String getParameterValue(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.http.parser.MediaType.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.tomcat.util.http.parser.MediaType.toStringNoCharset()", "public java.lang.String toStringNoCharset()"], ["org.apache.tomcat.util.http.parser.MediaType", "org.apache.tomcat.util.http.parser.MediaType.parseMediaType(java.io.StringReader)", "public static org.apache.tomcat.util.http.parser.MediaType parseMediaType(java.io.StringReader) throws java.io.IOException"], ["org.apache.tomcat.util.http.parser.MediaTypeCache", "org.apache.tomcat.util.http.parser.MediaTypeCache(int)", "public org.apache.tomcat.util.http.parser.MediaTypeCache(int)"], ["java.lang.String[]", "org.apache.tomcat.util.http.parser.MediaTypeCache.parse(java.lang.String)", "public java.lang.String[] parse(java.lang.String)"], ["org.apache.tomcat.util.http.parser.SkipResult[]", "org.apache.tomcat.util.http.parser.SkipResult.values()", "public static org.apache.tomcat.util.http.parser.SkipResult[] values()"], ["org.apache.tomcat.util.http.parser.SkipResult", "org.apache.tomcat.util.http.parser.SkipResult.valueOf(java.lang.String)", "public static org.apache.tomcat.util.http.parser.SkipResult valueOf(java.lang.String)"], ["org.apache.tomcat.util.log.SystemLogHandler", "org.apache.tomcat.util.log.SystemLogHandler(java.io.PrintStream)", "public org.apache.tomcat.util.log.SystemLogHandler(java.io.PrintStream)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.startCapture()", "public static void startCapture()"], ["java.lang.String", "org.apache.tomcat.util.log.SystemLogHandler.stopCapture()", "public static java.lang.String stopCapture()"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.flush()", "public void flush()"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.close()", "public void close()"], ["boolean", "org.apache.tomcat.util.log.SystemLogHandler.checkError()", "public boolean checkError()"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.write(int)", "public void write(int)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(boolean)", "public void print(boolean)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(char)", "public void print(char)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(int)", "public void print(int)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(long)", "public void print(long)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(float)", "public void print(float)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(double)", "public void print(double)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(char[])", "public void print(char[])"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(java.lang.String)", "public void print(java.lang.String)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.print(java.lang.Object)", "public void print(java.lang.Object)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println()", "public void println()"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(boolean)", "public void println(boolean)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(char)", "public void println(char)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(int)", "public void println(int)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(long)", "public void println(long)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(float)", "public void println(float)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(double)", "public void println(double)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(char[])", "public void println(char[])"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(java.lang.String)", "public void println(java.lang.String)"], ["void", "org.apache.tomcat.util.log.SystemLogHandler.println(java.lang.Object)", "public void println(java.lang.Object)"], ["org.apache.tomcat.util.log.UserDataHelper$Config[]", "org.apache.tomcat.util.log.UserDataHelper$Config.values()", "public static org.apache.tomcat.util.log.UserDataHelper$Config[] values()"], ["org.apache.tomcat.util.log.UserDataHelper$Config", "org.apache.tomcat.util.log.UserDataHelper$Config.valueOf(java.lang.String)", "public static org.apache.tomcat.util.log.UserDataHelper$Config valueOf(java.lang.String)"], ["org.apache.tomcat.util.log.UserDataHelper$Mode[]", "org.apache.tomcat.util.log.UserDataHelper$Mode.values()", "public static org.apache.tomcat.util.log.UserDataHelper$Mode[] values()"], ["org.apache.tomcat.util.log.UserDataHelper$Mode", "org.apache.tomcat.util.log.UserDataHelper$Mode.valueOf(java.lang.String)", "public static org.apache.tomcat.util.log.UserDataHelper$Mode valueOf(java.lang.String)"], ["org.apache.tomcat.util.log.UserDataHelper", "org.apache.tomcat.util.log.UserDataHelper(org.apache.juli.logging.Log)", "public org.apache.tomcat.util.log.UserDataHelper(org.apache.juli.logging.Log)"], ["org.apache.tomcat.util.log.UserDataHelper$Mode", "org.apache.tomcat.util.log.UserDataHelper.getNextMode()", "public org.apache.tomcat.util.log.UserDataHelper$Mode getNextMode()"], ["org.apache.tomcat.util.modeler.AttributeInfo", "org.apache.tomcat.util.modeler.AttributeInfo()", "public org.apache.tomcat.util.modeler.AttributeInfo()"], ["java.lang.String", "org.apache.tomcat.util.modeler.AttributeInfo.getDisplayName()", "public java.lang.String getDisplayName()"], ["void", "org.apache.tomcat.util.modeler.AttributeInfo.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.AttributeInfo.getGetMethod()", "public java.lang.String getGetMethod()"], ["void", "org.apache.tomcat.util.modeler.AttributeInfo.setGetMethod(java.lang.String)", "public void setGetMethod(java.lang.String)"], ["boolean", "org.apache.tomcat.util.modeler.AttributeInfo.isIs()", "public boolean isIs()"], ["void", "org.apache.tomcat.util.modeler.AttributeInfo.setIs(boolean)", "public void setIs(boolean)"], ["boolean", "org.apache.tomcat.util.modeler.AttributeInfo.isReadable()", "public boolean isReadable()"], ["void", "org.apache.tomcat.util.modeler.AttributeInfo.setReadable(boolean)", "public void setReadable(boolean)"], ["java.lang.String", "org.apache.tomcat.util.modeler.AttributeInfo.getSetMethod()", "public java.lang.String getSetMethod()"], ["void", "org.apache.tomcat.util.modeler.AttributeInfo.setSetMethod(java.lang.String)", "public void setSetMethod(java.lang.String)"], ["boolean", "org.apache.tomcat.util.modeler.AttributeInfo.isWriteable()", "public boolean isWriteable()"], ["void", "org.apache.tomcat.util.modeler.AttributeInfo.setWriteable(boolean)", "public void setWriteable(boolean)"], ["org.apache.tomcat.util.modeler.BaseAttributeFilter", "org.apache.tomcat.util.modeler.BaseAttributeFilter(java.lang.String)", "public org.apache.tomcat.util.modeler.BaseAttributeFilter(java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.BaseAttributeFilter.addAttribute(java.lang.String)", "public void addAttribute(java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.BaseAttributeFilter.clear()", "public void clear()"], ["java.lang.String[]", "org.apache.tomcat.util.modeler.BaseAttributeFilter.getNames()", "public java.lang.String[] getNames()"], ["boolean", "org.apache.tomcat.util.modeler.BaseAttributeFilter.isNotificationEnabled(javax.management.Notification)", "public boolean isNotificationEnabled(javax.management.Notification)"], ["void", "org.apache.tomcat.util.modeler.BaseAttributeFilter.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["java.lang.Object", "org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["javax.management.AttributeList", "org.apache.tomcat.util.modeler.BaseModelMBean.getAttributes(java.lang.String[])", "public javax.management.AttributeList getAttributes(java.lang.String[])"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.setManagedBean(org.apache.tomcat.util.modeler.ManagedBean)", "public void setManagedBean(org.apache.tomcat.util.modeler.ManagedBean)"], ["javax.management.MBeanInfo", "org.apache.tomcat.util.modeler.BaseModelMBean.getMBeanInfo()", "public javax.management.MBeanInfo getMBeanInfo()"], ["java.lang.Object", "org.apache.tomcat.util.modeler.BaseModelMBean.invoke(java.lang.String, java.lang.Object[], java.lang.String[])", "public java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws javax.management.MBeanException, javax.management.ReflectionException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.setAttribute(javax.management.Attribute)", "public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"], ["java.lang.String", "org.apache.tomcat.util.modeler.BaseModelMBean.toString()", "public java.lang.String toString()"], ["javax.management.AttributeList", "org.apache.tomcat.util.modeler.BaseModelMBean.setAttributes(javax.management.AttributeList)", "public javax.management.AttributeList setAttributes(javax.management.AttributeList)"], ["java.lang.Object", "org.apache.tomcat.util.modeler.BaseModelMBean.getManagedResource()", "public java.lang.Object getManagedResource() throws javax.management.InstanceNotFoundException, javax.management.modelmbean.InvalidTargetObjectTypeException, javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.setManagedResource(java.lang.Object, java.lang.String)", "public void setManagedResource(java.lang.Object, java.lang.String) throws javax.management.InstanceNotFoundException, javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.addAttributeChangeNotificationListener(javax.management.NotificationListener, java.lang.String, java.lang.Object)", "public void addAttributeChangeNotificationListener(javax.management.NotificationListener, java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.removeAttributeChangeNotificationListener(javax.management.NotificationListener, java.lang.String)", "public void removeAttributeChangeNotificationListener(javax.management.NotificationListener, java.lang.String) throws javax.management.ListenerNotFoundException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.sendAttributeChangeNotification(javax.management.AttributeChangeNotification)", "public void sendAttributeChangeNotification(javax.management.AttributeChangeNotification) throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.sendAttributeChangeNotification(javax.management.Attribute, javax.management.Attribute)", "public void sendAttributeChangeNotification(javax.management.Attribute, javax.management.Attribute) throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.sendNotification(javax.management.Notification)", "public void sendNotification(javax.management.Notification) throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.sendNotification(java.lang.String)", "public void sendNotification(java.lang.String) throws javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)", "public void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws java.lang.IllegalArgumentException"], ["javax.management.MBeanNotificationInfo[]", "org.apache.tomcat.util.modeler.BaseModelMBean.getNotificationInfo()", "public javax.management.MBeanNotificationInfo[] getNotificationInfo()"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.removeNotificationListener(javax.management.NotificationListener)", "public void removeNotificationListener(javax.management.NotificationListener) throws javax.management.ListenerNotFoundException"], ["java.lang.String", "org.apache.tomcat.util.modeler.BaseModelMBean.getModelerType()", "public java.lang.String getModelerType()"], ["java.lang.String", "org.apache.tomcat.util.modeler.BaseModelMBean.getClassName()", "public java.lang.String getClassName()"], ["javax.management.ObjectName", "org.apache.tomcat.util.modeler.BaseModelMBean.getJmxName()", "public javax.management.ObjectName getJmxName()"], ["java.lang.String", "org.apache.tomcat.util.modeler.BaseModelMBean.getObjectName()", "public java.lang.String getObjectName()"], ["javax.management.ObjectName", "org.apache.tomcat.util.modeler.BaseModelMBean.preRegister(javax.management.MBeanServer, javax.management.ObjectName)", "public javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.postRegister(java.lang.Boolean)", "public void postRegister(java.lang.Boolean)"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.preDeregister()", "public void preDeregister() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.BaseModelMBean.postDeregister()", "public void postDeregister()"], ["org.apache.tomcat.util.modeler.BaseNotificationBroadcaster", "org.apache.tomcat.util.modeler.BaseNotificationBroadcaster()", "public org.apache.tomcat.util.modeler.BaseNotificationBroadcaster()"], ["void", "org.apache.tomcat.util.modeler.BaseNotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)", "public void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws java.lang.IllegalArgumentException"], ["javax.management.MBeanNotificationInfo[]", "org.apache.tomcat.util.modeler.BaseNotificationBroadcaster.getNotificationInfo()", "public javax.management.MBeanNotificationInfo[] getNotificationInfo()"], ["void", "org.apache.tomcat.util.modeler.BaseNotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener)", "public void removeNotificationListener(javax.management.NotificationListener) throws javax.management.ListenerNotFoundException"], ["void", "org.apache.tomcat.util.modeler.BaseNotificationBroadcaster.sendNotification(javax.management.Notification)", "public void sendNotification(javax.management.Notification)"], ["org.apache.tomcat.util.modeler.BaseNotificationBroadcasterEntry", "org.apache.tomcat.util.modeler.BaseNotificationBroadcasterEntry(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)", "public org.apache.tomcat.util.modeler.BaseNotificationBroadcasterEntry(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)"], ["org.apache.tomcat.util.modeler.FeatureInfo", "org.apache.tomcat.util.modeler.FeatureInfo()", "public org.apache.tomcat.util.modeler.FeatureInfo()"], ["java.lang.String", "org.apache.tomcat.util.modeler.FeatureInfo.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.tomcat.util.modeler.FeatureInfo.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.FeatureInfo.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.modeler.FeatureInfo.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.FeatureInfo.getType()", "public java.lang.String getType()"], ["void", "org.apache.tomcat.util.modeler.FeatureInfo.setType(java.lang.String)", "public void setType(java.lang.String)"], ["org.apache.tomcat.util.modeler.ManagedBean", "org.apache.tomcat.util.modeler.ManagedBean()", "public org.apache.tomcat.util.modeler.ManagedBean()"], ["org.apache.tomcat.util.modeler.AttributeInfo[]", "org.apache.tomcat.util.modeler.ManagedBean.getAttributes()", "public org.apache.tomcat.util.modeler.AttributeInfo[] getAttributes()"], ["java.lang.String", "org.apache.tomcat.util.modeler.ManagedBean.getClassName()", "public java.lang.String getClassName()"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.setClassName(java.lang.String)", "public void setClassName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.ManagedBean.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.ManagedBean.getDomain()", "public java.lang.String getDomain()"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.setDomain(java.lang.String)", "public void setDomain(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.ManagedBean.getGroup()", "public java.lang.String getGroup()"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.setGroup(java.lang.String)", "public void setGroup(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.ManagedBean.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.setName(java.lang.String)", "public void setName(java.lang.String)"], ["org.apache.tomcat.util.modeler.NotificationInfo[]", "org.apache.tomcat.util.modeler.ManagedBean.getNotifications()", "public org.apache.tomcat.util.modeler.NotificationInfo[] getNotifications()"], ["org.apache.tomcat.util.modeler.OperationInfo[]", "org.apache.tomcat.util.modeler.ManagedBean.getOperations()", "public org.apache.tomcat.util.modeler.OperationInfo[] getOperations()"], ["java.lang.String", "org.apache.tomcat.util.modeler.ManagedBean.getType()", "public java.lang.String getType()"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.setType(java.lang.String)", "public void setType(java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)", "public void addAttribute(org.apache.tomcat.util.modeler.AttributeInfo)"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.addNotification(org.apache.tomcat.util.modeler.NotificationInfo)", "public void addNotification(org.apache.tomcat.util.modeler.NotificationInfo)"], ["void", "org.apache.tomcat.util.modeler.ManagedBean.addOperation(org.apache.tomcat.util.modeler.OperationInfo)", "public void addOperation(org.apache.tomcat.util.modeler.OperationInfo)"], ["javax.management.DynamicMBean", "org.apache.tomcat.util.modeler.ManagedBean.createMBean(java.lang.Object)", "public javax.management.DynamicMBean createMBean(java.lang.Object) throws javax.management.InstanceNotFoundException, javax.management.MBeanException, javax.management.RuntimeOperationsException"], ["java.lang.String", "org.apache.tomcat.util.modeler.ManagedBean.toString()", "public java.lang.String toString()"], ["java.lang.reflect.Method", "org.apache.tomcat.util.modeler.ManagedBean.getSetter(java.lang.String, org.apache.tomcat.util.modeler.BaseModelMBean, java.lang.Object)", "public java.lang.reflect.Method getSetter(java.lang.String, org.apache.tomcat.util.modeler.BaseModelMBean, java.lang.Object) throws javax.management.AttributeNotFoundException, javax.management.ReflectionException"], ["java.lang.reflect.Method", "org.apache.tomcat.util.modeler.ManagedBean.getInvoke(java.lang.String, java.lang.Object[], java.lang.String[], org.apache.tomcat.util.modeler.BaseModelMBean, java.lang.Object)", "public java.lang.reflect.Method getInvoke(java.lang.String, java.lang.Object[], java.lang.String[], org.apache.tomcat.util.modeler.BaseModelMBean, java.lang.Object) throws javax.management.MBeanException, javax.management.ReflectionException"], ["org.apache.tomcat.util.modeler.NotificationInfo", "org.apache.tomcat.util.modeler.NotificationInfo()", "public org.apache.tomcat.util.modeler.NotificationInfo()"], ["void", "org.apache.tomcat.util.modeler.NotificationInfo.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.NotificationInfo.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.modeler.NotificationInfo.getNotifTypes()", "public java.lang.String[] getNotifTypes()"], ["void", "org.apache.tomcat.util.modeler.NotificationInfo.addNotifType(java.lang.String)", "public void addNotifType(java.lang.String)"], ["javax.management.MBeanNotificationInfo", "org.apache.tomcat.util.modeler.NotificationInfo.createNotificationInfo()", "public javax.management.MBeanNotificationInfo createNotificationInfo()"], ["java.lang.String", "org.apache.tomcat.util.modeler.NotificationInfo.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.modeler.OperationInfo", "org.apache.tomcat.util.modeler.OperationInfo()", "public org.apache.tomcat.util.modeler.OperationInfo()"], ["java.lang.String", "org.apache.tomcat.util.modeler.OperationInfo.getImpact()", "public java.lang.String getImpact()"], ["void", "org.apache.tomcat.util.modeler.OperationInfo.setImpact(java.lang.String)", "public void setImpact(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.OperationInfo.getRole()", "public java.lang.String getRole()"], ["void", "org.apache.tomcat.util.modeler.OperationInfo.setRole(java.lang.String)", "public void setRole(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.OperationInfo.getReturnType()", "public java.lang.String getReturnType()"], ["void", "org.apache.tomcat.util.modeler.OperationInfo.setReturnType(java.lang.String)", "public void setReturnType(java.lang.String)"], ["org.apache.tomcat.util.modeler.ParameterInfo[]", "org.apache.tomcat.util.modeler.OperationInfo.getSignature()", "public org.apache.tomcat.util.modeler.ParameterInfo[] getSignature()"], ["void", "org.apache.tomcat.util.modeler.OperationInfo.addParameter(org.apache.tomcat.util.modeler.ParameterInfo)", "public void addParameter(org.apache.tomcat.util.modeler.ParameterInfo)"], ["org.apache.tomcat.util.modeler.ParameterInfo", "org.apache.tomcat.util.modeler.ParameterInfo()", "public org.apache.tomcat.util.modeler.ParameterInfo()"], ["javax.management.MBeanParameterInfo", "org.apache.tomcat.util.modeler.ParameterInfo.createParameterInfo()", "public javax.management.MBeanParameterInfo createParameterInfo()"], ["org.apache.tomcat.util.modeler.Registry", "org.apache.tomcat.util.modeler.Registry()", "public org.apache.tomcat.util.modeler.Registry()"], ["synchronized", "org.apache.tomcat.util.modeler.Registry.org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object, java.lang.Object)", "public static synchronized org.apache.tomcat.util.modeler.Registry getRegistry(java.lang.Object, java.lang.Object)"], ["void", "org.apache.tomcat.util.modeler.Registry.stop()", "public void stop()"], ["void", "org.apache.tomcat.util.modeler.Registry.registerComponent(java.lang.Object, java.lang.String, java.lang.String)", "public void registerComponent(java.lang.Object, java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.Registry.unregisterComponent(java.lang.String)", "public void unregisterComponent(java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.Registry.invoke(java.util.List<javax.management.ObjectName>, java.lang.String, boolean)", "public void invoke(java.util.List<javax.management.ObjectName>, java.lang.String, boolean) throws java.lang.Exception"], ["synchronized", "org.apache.tomcat.util.modeler.Registry.int getId(java.lang.String, java.lang.String)", "public synchronized int getId(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.Registry.addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)", "public void addManagedBean(org.apache.tomcat.util.modeler.ManagedBean)"], ["org.apache.tomcat.util.modeler.ManagedBean", "org.apache.tomcat.util.modeler.Registry.findManagedBean(java.lang.String)", "public org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.modeler.Registry.getType(javax.management.ObjectName, java.lang.String)", "public java.lang.String getType(javax.management.ObjectName, java.lang.String)"], ["javax.management.MBeanOperationInfo", "org.apache.tomcat.util.modeler.Registry.getMethodInfo(javax.management.ObjectName, java.lang.String)", "public javax.management.MBeanOperationInfo getMethodInfo(javax.management.ObjectName, java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.Registry.unregisterComponent(javax.management.ObjectName)", "public void unregisterComponent(javax.management.ObjectName)"], ["synchronized", "org.apache.tomcat.util.modeler.Registry.javax.management.MBeanServer getMBeanServer()", "public synchronized javax.management.MBeanServer getMBeanServer()"], ["org.apache.tomcat.util.modeler.ManagedBean", "org.apache.tomcat.util.modeler.Registry.findManagedBean(java.lang.Object, java.lang.Class<?>, java.lang.String)", "public org.apache.tomcat.util.modeler.ManagedBean findManagedBean(java.lang.Object, java.lang.Class<?>, java.lang.String) throws java.lang.Exception"], ["java.lang.Object", "org.apache.tomcat.util.modeler.Registry.convertValue(java.lang.String, java.lang.String)", "public java.lang.Object convertValue(java.lang.String, java.lang.String)"], ["java.util.List<javax.management.ObjectName>", "org.apache.tomcat.util.modeler.Registry.load(java.lang.String, java.lang.Object, java.lang.String)", "public java.util.List<javax.management.ObjectName> load(java.lang.String, java.lang.Object, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.Registry.registerComponent(java.lang.Object, javax.management.ObjectName, java.lang.String)", "public void registerComponent(java.lang.Object, javax.management.ObjectName, java.lang.String) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.Registry.loadDescriptors(java.lang.String, java.lang.ClassLoader)", "public void loadDescriptors(java.lang.String, java.lang.ClassLoader)"], ["javax.management.ObjectName", "org.apache.tomcat.util.modeler.Registry.preRegister(javax.management.MBeanServer, javax.management.ObjectName)", "public javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.Registry.postRegister(java.lang.Boolean)", "public void postRegister(java.lang.Boolean)"], ["void", "org.apache.tomcat.util.modeler.Registry.preDeregister()", "public void preDeregister() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.Registry.postDeregister()", "public void postDeregister()"], ["boolean", "org.apache.tomcat.util.modeler.Util.objectNameValueNeedsQuote(java.lang.String)", "public static boolean objectNameValueNeedsQuote(java.lang.String)"], ["org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource()", "public org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource()"], ["void", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource.setRegistry(org.apache.tomcat.util.modeler.Registry)", "public void setRegistry(org.apache.tomcat.util.modeler.Registry)"], ["void", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource.setSource(java.lang.Object)", "public void setSource(java.lang.Object)"], ["java.util.List<javax.management.ObjectName>", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource.loadDescriptors(org.apache.tomcat.util.modeler.Registry, java.lang.String, java.lang.Object)", "public java.util.List<javax.management.ObjectName> loadDescriptors(org.apache.tomcat.util.modeler.Registry, java.lang.String, java.lang.Object) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsDigesterSource.execute()", "public void execute() throws java.lang.Exception"], ["org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource()", "public org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource()"], ["void", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource.setRegistry(org.apache.tomcat.util.modeler.Registry)", "public void setRegistry(org.apache.tomcat.util.modeler.Registry)"], ["void", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource.setType(java.lang.String)", "public void setType(java.lang.String)"], ["void", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource.setSource(java.lang.Object)", "public void setSource(java.lang.Object)"], ["java.util.List<javax.management.ObjectName>", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource.loadDescriptors(org.apache.tomcat.util.modeler.Registry, java.lang.String, java.lang.Object)", "public java.util.List<javax.management.ObjectName> loadDescriptors(org.apache.tomcat.util.modeler.Registry, java.lang.String, java.lang.Object) throws java.lang.Exception"], ["void", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource.execute()", "public void execute() throws java.lang.Exception"], ["org.apache.tomcat.util.modeler.ManagedBean", "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource.createManagedBean(org.apache.tomcat.util.modeler.Registry, java.lang.String, java.lang.Class<?>, java.lang.String)", "public org.apache.tomcat.util.modeler.ManagedBean createManagedBean(org.apache.tomcat.util.modeler.Registry, java.lang.String, java.lang.Class<?>, java.lang.String)"], ["org.apache.tomcat.util.modeler.modules.ModelerSource", "org.apache.tomcat.util.modeler.modules.ModelerSource()", "public org.apache.tomcat.util.modeler.modules.ModelerSource()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState[]", "org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState.values()", "public static org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState[] values()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState", "org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Acceptor", "org.apache.tomcat.util.net.AbstractEndpoint$Acceptor()", "public org.apache.tomcat.util.net.AbstractEndpoint$Acceptor()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState", "org.apache.tomcat.util.net.AbstractEndpoint$Acceptor.getState()", "public final org.apache.tomcat.util.net.AbstractEndpoint$Acceptor$AcceptorState getState()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint$AsyncTimeout.run()", "public void run()"], ["org.apache.tomcat.util.net.AbstractEndpoint$BindState[]", "org.apache.tomcat.util.net.AbstractEndpoint$BindState.values()", "public static org.apache.tomcat.util.net.AbstractEndpoint$BindState[] values()"], ["org.apache.tomcat.util.net.AbstractEndpoint$BindState", "org.apache.tomcat.util.net.AbstractEndpoint$BindState.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.AbstractEndpoint$BindState valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState[]", "org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState.values()", "public static org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState[] values()"], ["org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState", "org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.AbstractEndpoint", "org.apache.tomcat.util.net.AbstractEndpoint()", "public org.apache.tomcat.util.net.AbstractEndpoint()"], ["org.apache.tomcat.util.net.SocketProperties", "org.apache.tomcat.util.net.AbstractEndpoint.getSocketProperties()", "public org.apache.tomcat.util.net.SocketProperties getSocketProperties()"], ["long", "org.apache.tomcat.util.net.AbstractEndpoint.getExecutorTerminationTimeoutMillis()", "public long getExecutorTerminationTimeoutMillis()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setExecutorTerminationTimeoutMillis(long)", "public void setExecutorTerminationTimeoutMillis(long)"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setAcceptorThreadCount(int)", "public void setAcceptorThreadCount(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getAcceptorThreadCount()", "public int getAcceptorThreadCount()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setAcceptorThreadPriority(int)", "public void setAcceptorThreadPriority(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getAcceptorThreadPriority()", "public int getAcceptorThreadPriority()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setMaxConnections(int)", "public void setMaxConnections(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getMaxConnections()", "public int getMaxConnections()"], ["long", "org.apache.tomcat.util.net.AbstractEndpoint.getConnectionCount()", "public long getConnectionCount()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setExecutor(java.util.concurrent.Executor)", "public void setExecutor(java.util.concurrent.Executor)"], ["java.util.concurrent.Executor", "org.apache.tomcat.util.net.AbstractEndpoint.getExecutor()", "public java.util.concurrent.Executor getExecutor()"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getPort()", "public int getPort()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setPort(int)", "public void setPort(int)"], ["java.net.InetAddress", "org.apache.tomcat.util.net.AbstractEndpoint.getAddress()", "public java.net.InetAddress getAddress()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setAddress(java.net.InetAddress)", "public void setAddress(java.net.InetAddress)"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setBacklog(int)", "public void setBacklog(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getBacklog()", "public int getBacklog()"], ["boolean", "org.apache.tomcat.util.net.AbstractEndpoint.getBindOnInit()", "public boolean getBindOnInit()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setBindOnInit(boolean)", "public void setBindOnInit(boolean)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getKeepAliveTimeout()", "public int getKeepAliveTimeout()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setKeepAliveTimeout(int)", "public void setKeepAliveTimeout(int)"], ["boolean", "org.apache.tomcat.util.net.AbstractEndpoint.getTcpNoDelay()", "public boolean getTcpNoDelay()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTcpNoDelay(boolean)", "public void setTcpNoDelay(boolean)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getSoLinger()", "public int getSoLinger()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setSoLinger(int)", "public void setSoLinger(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getSoTimeout()", "public int getSoTimeout()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setSoTimeout(int)", "public void setSoTimeout(int)"], ["boolean", "org.apache.tomcat.util.net.AbstractEndpoint.isSSLEnabled()", "public boolean isSSLEnabled()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setSSLEnabled(boolean)", "public void setSSLEnabled(boolean)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getMinSpareThreads()", "public int getMinSpareThreads()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setMinSpareThreads(int)", "public void setMinSpareThreads(int)"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setMaxThreads(int)", "public void setMaxThreads(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getMaxThreads()", "public int getMaxThreads()"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getMaxKeepAliveRequests()", "public int getMaxKeepAliveRequests()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setMaxKeepAliveRequests(int)", "public void setMaxKeepAliveRequests(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getMaxHeaderCount()", "public int getMaxHeaderCount()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setMaxHeaderCount(int)", "public void setMaxHeaderCount(int)"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getName()", "public java.lang.String getName()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setDaemon(boolean)", "public void setDaemon(boolean)"], ["boolean", "org.apache.tomcat.util.net.AbstractEndpoint.getDaemon()", "public boolean getDaemon()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setThreadPriority(int)", "public void setThreadPriority(int)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getThreadPriority()", "public int getThreadPriority()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.tomcat.util.net.AbstractEndpoint.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["boolean", "org.apache.tomcat.util.net.AbstractEndpoint.setProperty(java.lang.String, java.lang.String)", "public boolean setProperty(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getProperty(java.lang.String)", "public java.lang.String getProperty(java.lang.String)"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getCurrentThreadCount()", "public int getCurrentThreadCount()"], ["int", "org.apache.tomcat.util.net.AbstractEndpoint.getCurrentThreadsBusy()", "public int getCurrentThreadsBusy()"], ["boolean", "org.apache.tomcat.util.net.AbstractEndpoint.isRunning()", "public boolean isRunning()"], ["boolean", "org.apache.tomcat.util.net.AbstractEndpoint.isPaused()", "public boolean isPaused()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.createExecutor()", "public void createExecutor()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.shutdownExecutor()", "public void shutdownExecutor()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.executeNonBlockingDispatches(org.apache.tomcat.util.net.SocketWrapper<S>)", "public void executeNonBlockingDispatches(org.apache.tomcat.util.net.SocketWrapper<S>)"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.init()", "public final void init() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.start()", "public final void start() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.pause()", "public void pause()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.resume()", "public void resume()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.stop()", "public final void stop() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.destroy()", "public final void destroy() throws java.lang.Exception"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getAlgorithm()", "public java.lang.String getAlgorithm()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setAlgorithm(java.lang.String)", "public void setAlgorithm(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getClientAuth()", "public java.lang.String getClientAuth()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setClientAuth(java.lang.String)", "public void setClientAuth(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getKeystoreFile()", "public java.lang.String getKeystoreFile()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setKeystoreFile(java.lang.String)", "public void setKeystoreFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getKeystorePass()", "public java.lang.String getKeystorePass()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setKeystorePass(java.lang.String)", "public void setKeystorePass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getKeystoreType()", "public java.lang.String getKeystoreType()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setKeystoreType(java.lang.String)", "public void setKeystoreType(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getKeystoreProvider()", "public java.lang.String getKeystoreProvider()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setKeystoreProvider(java.lang.String)", "public void setKeystoreProvider(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getSslProtocol()", "public java.lang.String getSslProtocol()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setSslProtocol(java.lang.String)", "public void setSslProtocol(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getCiphers()", "public java.lang.String getCiphers()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setCiphers(java.lang.String)", "public void setCiphers(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getKeyAlias()", "public java.lang.String getKeyAlias()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setKeyAlias(java.lang.String)", "public void setKeyAlias(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getKeyPass()", "public java.lang.String getKeyPass()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setKeyPass(java.lang.String)", "public void setKeyPass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getTruststoreFile()", "public java.lang.String getTruststoreFile()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTruststoreFile(java.lang.String)", "public void setTruststoreFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getTruststorePass()", "public java.lang.String getTruststorePass()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTruststorePass(java.lang.String)", "public void setTruststorePass(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getTruststoreType()", "public java.lang.String getTruststoreType()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTruststoreType(java.lang.String)", "public void setTruststoreType(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getTruststoreProvider()", "public java.lang.String getTruststoreProvider()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTruststoreProvider(java.lang.String)", "public void setTruststoreProvider(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getTruststoreAlgorithm()", "public java.lang.String getTruststoreAlgorithm()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTruststoreAlgorithm(java.lang.String)", "public void setTruststoreAlgorithm(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getTrustManagerClassName()", "public java.lang.String getTrustManagerClassName()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTrustManagerClassName(java.lang.String)", "public void setTrustManagerClassName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getCrlFile()", "public java.lang.String getCrlFile()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setCrlFile(java.lang.String)", "public void setCrlFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getTrustMaxCertLength()", "public java.lang.String getTrustMaxCertLength()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setTrustMaxCertLength(java.lang.String)", "public void setTrustMaxCertLength(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getSessionCacheSize()", "public java.lang.String getSessionCacheSize()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setSessionCacheSize(java.lang.String)", "public void setSessionCacheSize(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getSessionTimeout()", "public java.lang.String getSessionTimeout()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setSessionTimeout(java.lang.String)", "public void setSessionTimeout(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AbstractEndpoint.getAllowUnsafeLegacyRenegotiation()", "public java.lang.String getAllowUnsafeLegacyRenegotiation()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setAllowUnsafeLegacyRenegotiation(java.lang.String)", "public void setAllowUnsafeLegacyRenegotiation(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.net.AbstractEndpoint.getSslEnabledProtocolsArray()", "public java.lang.String[] getSslEnabledProtocolsArray()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setSslEnabledProtocols(java.lang.String)", "public void setSslEnabledProtocols(java.lang.String)"], ["org.apache.tomcat.util.net.AbstractEndpoint<S>.AsyncTimeout", "org.apache.tomcat.util.net.AbstractEndpoint.getAsyncTimeout()", "public org.apache.tomcat.util.net.AbstractEndpoint<S>.AsyncTimeout getAsyncTimeout()"], ["void", "org.apache.tomcat.util.net.AbstractEndpoint.setAsyncTimeout(org.apache.tomcat.util.net.AbstractEndpoint<S>.AsyncTimeout)", "public void setAsyncTimeout(org.apache.tomcat.util.net.AbstractEndpoint<S>.AsyncTimeout)"], ["void", "org.apache.tomcat.util.net.AprEndpoint$Acceptor.run()", "public void run()"], ["org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper", "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper(java.lang.Long)", "public org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper(java.lang.Long)"], ["org.apache.tomcat.util.net.AprEndpoint$Poller", "org.apache.tomcat.util.net.AprEndpoint$Poller(org.apache.tomcat.util.net.AprEndpoint)", "public org.apache.tomcat.util.net.AprEndpoint$Poller(org.apache.tomcat.util.net.AprEndpoint)"], ["int", "org.apache.tomcat.util.net.AprEndpoint$Poller.getConnectionCount()", "public int getConnectionCount()"], ["void", "org.apache.tomcat.util.net.AprEndpoint$Poller.add(long, int, boolean, boolean)", "public void add(long, int, boolean, boolean)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint$Poller.toString()", "public java.lang.String toString()"], ["void", "org.apache.tomcat.util.net.AprEndpoint$Poller.run()", "public void run()"], ["org.apache.tomcat.util.net.AprEndpoint$Sendfile", "org.apache.tomcat.util.net.AprEndpoint$Sendfile(org.apache.tomcat.util.net.AprEndpoint)", "public org.apache.tomcat.util.net.AprEndpoint$Sendfile(org.apache.tomcat.util.net.AprEndpoint)"], ["int", "org.apache.tomcat.util.net.AprEndpoint$Sendfile.getSendfileCount()", "public int getSendfileCount()"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint$Sendfile.add(org.apache.tomcat.util.net.AprEndpoint$SendfileData)", "public boolean add(org.apache.tomcat.util.net.AprEndpoint$SendfileData)"], ["void", "org.apache.tomcat.util.net.AprEndpoint$Sendfile.run()", "public void run()"], ["org.apache.tomcat.util.net.AprEndpoint$SendfileData", "org.apache.tomcat.util.net.AprEndpoint$SendfileData()", "public org.apache.tomcat.util.net.AprEndpoint$SendfileData()"], ["org.apache.tomcat.util.net.AprEndpoint$SocketInfo", "org.apache.tomcat.util.net.AprEndpoint$SocketInfo()", "public org.apache.tomcat.util.net.AprEndpoint$SocketInfo()"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint$SocketInfo.read()", "public boolean read()"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint$SocketInfo.write()", "public boolean write()"], ["int", "org.apache.tomcat.util.net.AprEndpoint$SocketInfo.merge(int, int)", "public static int merge(int, int)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint$SocketInfo.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.net.AprEndpoint$SocketList", "org.apache.tomcat.util.net.AprEndpoint$SocketList(org.apache.tomcat.util.net.AprEndpoint, int)", "public org.apache.tomcat.util.net.AprEndpoint$SocketList(org.apache.tomcat.util.net.AprEndpoint, int)"], ["int", "org.apache.tomcat.util.net.AprEndpoint$SocketList.size()", "public int size()"], ["org.apache.tomcat.util.net.AprEndpoint$SocketInfo", "org.apache.tomcat.util.net.AprEndpoint$SocketList.get()", "public org.apache.tomcat.util.net.AprEndpoint$SocketInfo get()"], ["void", "org.apache.tomcat.util.net.AprEndpoint$SocketList.clear()", "public void clear()"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint$SocketList.add(long, int, int)", "public boolean add(long, int, int)"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint$SocketList.remove(long)", "public boolean remove(long)"], ["void", "org.apache.tomcat.util.net.AprEndpoint$SocketList.duplicate(org.apache.tomcat.util.net.AprEndpoint$SocketList)", "public void duplicate(org.apache.tomcat.util.net.AprEndpoint$SocketList)"], ["org.apache.tomcat.util.net.AprEndpoint$SocketProcessor", "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.AprEndpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run()", "public void run()"], ["org.apache.tomcat.util.net.AprEndpoint$SocketTimeouts", "org.apache.tomcat.util.net.AprEndpoint$SocketTimeouts(org.apache.tomcat.util.net.AprEndpoint, int)", "public org.apache.tomcat.util.net.AprEndpoint$SocketTimeouts(org.apache.tomcat.util.net.AprEndpoint, int)"], ["void", "org.apache.tomcat.util.net.AprEndpoint$SocketTimeouts.add(long, long)", "public void add(long, long)"], ["long", "org.apache.tomcat.util.net.AprEndpoint$SocketTimeouts.remove(long)", "public long remove(long)"], ["long", "org.apache.tomcat.util.net.AprEndpoint$SocketTimeouts.check(long)", "public long check(long)"], ["org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor", "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>)", "public org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>)"], ["void", "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor.run()", "public void run()"], ["org.apache.tomcat.util.net.AprEndpoint", "org.apache.tomcat.util.net.AprEndpoint()", "public org.apache.tomcat.util.net.AprEndpoint()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setDeferAccept(boolean)", "public void setDeferAccept(boolean)"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getDeferAccept()", "public boolean getDeferAccept()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSendfileSize(int)", "public void setSendfileSize(int)"], ["int", "org.apache.tomcat.util.net.AprEndpoint.getSendfileSize()", "public int getSendfileSize()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setHandler(org.apache.tomcat.util.net.AprEndpoint$Handler)", "public void setHandler(org.apache.tomcat.util.net.AprEndpoint$Handler)"], ["org.apache.tomcat.util.net.AprEndpoint$Handler", "org.apache.tomcat.util.net.AprEndpoint.getHandler()", "public org.apache.tomcat.util.net.AprEndpoint$Handler getHandler()"], ["int", "org.apache.tomcat.util.net.AprEndpoint.getPollTime()", "public int getPollTime()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setPollTime(int)", "public void setPollTime(int)"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setUseSendfile(boolean)", "public void setUseSendfile(boolean)"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getUseSendfile()", "public boolean getUseSendfile()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setUseComet(boolean)", "public void setUseComet(boolean)"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getUseComet()", "public boolean getUseComet()"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getUseCometTimeout()", "public boolean getUseCometTimeout()"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getUsePolling()", "public boolean getUsePolling()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSendfileThreadCount(int)", "public void setSendfileThreadCount(int)"], ["int", "org.apache.tomcat.util.net.AprEndpoint.getSendfileThreadCount()", "public int getSendfileThreadCount()"], ["org.apache.tomcat.util.net.AprEndpoint$Poller", "org.apache.tomcat.util.net.AprEndpoint.getPoller()", "public org.apache.tomcat.util.net.AprEndpoint$Poller getPoller()"], ["org.apache.tomcat.util.net.AprEndpoint$Sendfile", "org.apache.tomcat.util.net.AprEndpoint.getSendfile()", "public org.apache.tomcat.util.net.AprEndpoint$Sendfile getSendfile()"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLProtocol()", "public java.lang.String getSSLProtocol()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLProtocol(java.lang.String)", "public void setSSLProtocol(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLPassword()", "public java.lang.String getSSLPassword()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLPassword(java.lang.String)", "public void setSSLPassword(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCipherSuite()", "public java.lang.String getSSLCipherSuite()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCipherSuite(java.lang.String)", "public void setSSLCipherSuite(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCertificateFile()", "public java.lang.String getSSLCertificateFile()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCertificateFile(java.lang.String)", "public void setSSLCertificateFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCertificateKeyFile()", "public java.lang.String getSSLCertificateKeyFile()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCertificateKeyFile(java.lang.String)", "public void setSSLCertificateKeyFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCertificateChainFile()", "public java.lang.String getSSLCertificateChainFile()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCertificateChainFile(java.lang.String)", "public void setSSLCertificateChainFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCACertificatePath()", "public java.lang.String getSSLCACertificatePath()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCACertificatePath(java.lang.String)", "public void setSSLCACertificatePath(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCACertificateFile()", "public java.lang.String getSSLCACertificateFile()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCACertificateFile(java.lang.String)", "public void setSSLCACertificateFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCARevocationPath()", "public java.lang.String getSSLCARevocationPath()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCARevocationPath(java.lang.String)", "public void setSSLCARevocationPath(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLCARevocationFile()", "public java.lang.String getSSLCARevocationFile()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLCARevocationFile(java.lang.String)", "public void setSSLCARevocationFile(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.AprEndpoint.getSSLVerifyClient()", "public java.lang.String getSSLVerifyClient()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLVerifyClient(java.lang.String)", "public void setSSLVerifyClient(java.lang.String)"], ["int", "org.apache.tomcat.util.net.AprEndpoint.getSSLVerifyDepth()", "public int getSSLVerifyDepth()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLVerifyDepth(int)", "public void setSSLVerifyDepth(int)"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLInsecureRenegotiation(boolean)", "public void setSSLInsecureRenegotiation(boolean)"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getSSLInsecureRenegotiation()", "public boolean getSSLInsecureRenegotiation()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLHonorCipherOrder(boolean)", "public void setSSLHonorCipherOrder(boolean)"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getSSLHonorCipherOrder()", "public boolean getSSLHonorCipherOrder()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setSSLDisableCompression(boolean)", "public void setSSLDisableCompression(boolean)"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.getSSLDisableCompression()", "public boolean getSSLDisableCompression()"], ["int", "org.apache.tomcat.util.net.AprEndpoint.getLocalPort()", "public int getLocalPort()"], ["java.lang.String[]", "org.apache.tomcat.util.net.AprEndpoint.getCiphersUsed()", "public java.lang.String[] getCiphersUsed()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.setMaxConnections(int)", "public void setMaxConnections(int)"], ["int", "org.apache.tomcat.util.net.AprEndpoint.getKeepAliveCount()", "public int getKeepAliveCount()"], ["int", "org.apache.tomcat.util.net.AprEndpoint.getSendfileCount()", "public int getSendfileCount()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.bind()", "public void bind() throws java.lang.Exception"], ["long", "org.apache.tomcat.util.net.AprEndpoint.getJniSslContext()", "public long getJniSslContext()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.startInternal()", "public void startInternal() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.AprEndpoint.stopInternal()", "public void stopInternal()"], ["void", "org.apache.tomcat.util.net.AprEndpoint.unbind()", "public void unbind() throws java.lang.Exception"], ["boolean", "org.apache.tomcat.util.net.AprEndpoint.processSocket(long, org.apache.tomcat.util.net.SocketStatus)", "public boolean processSocket(long, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.AprEndpoint.processSocket(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus, boolean)", "public void processSocket(org.apache.tomcat.util.net.SocketWrapper<java.lang.Long>, org.apache.tomcat.util.net.SocketStatus, boolean)"], ["org.apache.tomcat.util.net.Constants", "org.apache.tomcat.util.net.Constants()", "public org.apache.tomcat.util.net.Constants()"], ["org.apache.tomcat.util.net.DefaultServerSocketFactory", "org.apache.tomcat.util.net.DefaultServerSocketFactory(org.apache.tomcat.util.net.AbstractEndpoint<?>)", "public org.apache.tomcat.util.net.DefaultServerSocketFactory(org.apache.tomcat.util.net.AbstractEndpoint<?>)"], ["java.net.ServerSocket", "org.apache.tomcat.util.net.DefaultServerSocketFactory.createSocket(int)", "public java.net.ServerSocket createSocket(int) throws java.io.IOException"], ["java.net.ServerSocket", "org.apache.tomcat.util.net.DefaultServerSocketFactory.createSocket(int, int)", "public java.net.ServerSocket createSocket(int, int) throws java.io.IOException"], ["java.net.ServerSocket", "org.apache.tomcat.util.net.DefaultServerSocketFactory.createSocket(int, int, java.net.InetAddress)", "public java.net.ServerSocket createSocket(int, int, java.net.InetAddress) throws java.io.IOException"], ["java.net.Socket", "org.apache.tomcat.util.net.DefaultServerSocketFactory.acceptSocket(java.net.ServerSocket)", "public java.net.Socket acceptSocket(java.net.ServerSocket) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.DefaultServerSocketFactory.handshake(java.net.Socket)", "public void handshake(java.net.Socket) throws java.io.IOException"], ["org.apache.tomcat.util.net.DispatchType[]", "org.apache.tomcat.util.net.DispatchType.values()", "public static org.apache.tomcat.util.net.DispatchType[] values()"], ["org.apache.tomcat.util.net.DispatchType", "org.apache.tomcat.util.net.DispatchType.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.DispatchType valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.SocketStatus", "org.apache.tomcat.util.net.DispatchType.getSocketStatus()", "public org.apache.tomcat.util.net.SocketStatus getSocketStatus()"], ["void", "org.apache.tomcat.util.net.JIoEndpoint$Acceptor.run()", "public void run()"], ["org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor", "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)", "public org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>)"], ["org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor", "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run()", "public void run()"], ["org.apache.tomcat.util.net.JIoEndpoint", "org.apache.tomcat.util.net.JIoEndpoint()", "public org.apache.tomcat.util.net.JIoEndpoint()"], ["void", "org.apache.tomcat.util.net.JIoEndpoint.setHandler(org.apache.tomcat.util.net.JIoEndpoint$Handler)", "public void setHandler(org.apache.tomcat.util.net.JIoEndpoint$Handler)"], ["org.apache.tomcat.util.net.JIoEndpoint$Handler", "org.apache.tomcat.util.net.JIoEndpoint.getHandler()", "public org.apache.tomcat.util.net.JIoEndpoint$Handler getHandler()"], ["void", "org.apache.tomcat.util.net.JIoEndpoint.setServerSocketFactory(org.apache.tomcat.util.net.ServerSocketFactory)", "public void setServerSocketFactory(org.apache.tomcat.util.net.ServerSocketFactory)"], ["org.apache.tomcat.util.net.ServerSocketFactory", "org.apache.tomcat.util.net.JIoEndpoint.getServerSocketFactory()", "public org.apache.tomcat.util.net.ServerSocketFactory getServerSocketFactory()"], ["int", "org.apache.tomcat.util.net.JIoEndpoint.getLocalPort()", "public int getLocalPort()"], ["java.lang.String[]", "org.apache.tomcat.util.net.JIoEndpoint.getCiphersUsed()", "public java.lang.String[] getCiphersUsed()"], ["boolean", "org.apache.tomcat.util.net.JIoEndpoint.getUseSendfile()", "public boolean getUseSendfile()"], ["boolean", "org.apache.tomcat.util.net.JIoEndpoint.getUseComet()", "public boolean getUseComet()"], ["boolean", "org.apache.tomcat.util.net.JIoEndpoint.getUseCometTimeout()", "public boolean getUseCometTimeout()"], ["boolean", "org.apache.tomcat.util.net.JIoEndpoint.getDeferAccept()", "public boolean getDeferAccept()"], ["boolean", "org.apache.tomcat.util.net.JIoEndpoint.getUsePolling()", "public boolean getUsePolling()"], ["void", "org.apache.tomcat.util.net.JIoEndpoint.bind()", "public void bind() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.JIoEndpoint.startInternal()", "public void startInternal() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.JIoEndpoint.stopInternal()", "public void stopInternal()"], ["void", "org.apache.tomcat.util.net.JIoEndpoint.unbind()", "public void unbind() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.JIoEndpoint.processSocket(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus, boolean)", "public void processSocket(org.apache.tomcat.util.net.SocketWrapper<java.net.Socket>, org.apache.tomcat.util.net.SocketStatus, boolean)"], ["boolean", "org.apache.tomcat.util.net.Nio2Channel$1.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.apache.tomcat.util.net.Nio2Channel$1.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.apache.tomcat.util.net.Nio2Channel$1.isDone()", "public boolean isDone()"], ["java.lang.Boolean", "org.apache.tomcat.util.net.Nio2Channel$1.get()", "public java.lang.Boolean get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["java.lang.Boolean", "org.apache.tomcat.util.net.Nio2Channel$1.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Boolean get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.Nio2Channel$1.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.Nio2Channel$1.get()", "public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["org.apache.tomcat.util.net.Nio2Channel", "org.apache.tomcat.util.net.Nio2Channel(org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler)", "public org.apache.tomcat.util.net.Nio2Channel(org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler)"], ["void", "org.apache.tomcat.util.net.Nio2Channel.reset(java.nio.channels.AsynchronousSocketChannel, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void reset(java.nio.channels.AsynchronousSocketChannel, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>) throws java.io.IOException"], ["org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>", "org.apache.tomcat.util.net.Nio2Channel.getSocket()", "public org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel> getSocket()"], ["int", "org.apache.tomcat.util.net.Nio2Channel.getBufferSize()", "public int getBufferSize()"], ["void", "org.apache.tomcat.util.net.Nio2Channel.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.Nio2Channel.close(boolean)", "public void close(boolean) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.net.Nio2Channel.isOpen()", "public boolean isOpen()"], ["org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler", "org.apache.tomcat.util.net.Nio2Channel.getBufHandler()", "public org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler getBufHandler()"], ["java.nio.channels.AsynchronousSocketChannel", "org.apache.tomcat.util.net.Nio2Channel.getIOChannel()", "public java.nio.channels.AsynchronousSocketChannel getIOChannel()"], ["boolean", "org.apache.tomcat.util.net.Nio2Channel.isClosing()", "public boolean isClosing()"], ["boolean", "org.apache.tomcat.util.net.Nio2Channel.isHandshakeComplete()", "public boolean isHandshakeComplete()"], ["int", "org.apache.tomcat.util.net.Nio2Channel.handshake()", "public int handshake() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.net.Nio2Channel.toString()", "public java.lang.String toString()"], ["java.util.concurrent.Future<java.lang.Integer>", "org.apache.tomcat.util.net.Nio2Channel.read(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> read(java.nio.ByteBuffer)"], ["<A> void", "org.apache.tomcat.util.net.Nio2Channel.read(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void read(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "org.apache.tomcat.util.net.Nio2Channel.read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["java.util.concurrent.Future<java.lang.Integer>", "org.apache.tomcat.util.net.Nio2Channel.write(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> write(java.nio.ByteBuffer)"], ["<A> void", "org.apache.tomcat.util.net.Nio2Channel.write(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void write(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "org.apache.tomcat.util.net.Nio2Channel.write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "org.apache.tomcat.util.net.Nio2Channel.write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)", "public <A> void write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)"], ["java.util.concurrent.Future<java.lang.Boolean>", "org.apache.tomcat.util.net.Nio2Channel.flush()", "public java.util.concurrent.Future<java.lang.Boolean> flush()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$1.run()", "public void run()"], ["synchronized", "org.apache.tomcat.util.net.Nio2Endpoint$2.void completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public synchronized void completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$2.failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$2.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$2.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$3.completed(java.lang.Integer, org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)", "public void completed(java.lang.Integer, org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$3.failed(java.lang.Throwable, org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$3.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$3.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$Acceptor.run()", "public void run()"], ["org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper(org.apache.tomcat.util.net.Nio2Channel)", "public org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper(org.apache.tomcat.util.net.Nio2Channel)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.reset(org.apache.tomcat.util.net.Nio2Channel, long)", "public void reset(org.apache.tomcat.util.net.Nio2Channel, long)"], ["long", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.getTimeout()", "public long getTimeout()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.setUpgraded(boolean)", "public void setUpgraded(boolean)"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.isUpgradeInit()", "public boolean isUpgradeInit()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.setSendfileData(org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)", "public void setSendfileData(org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)"], ["org.apache.tomcat.util.net.Nio2Endpoint$SendfileData", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.getSendfileData()", "public org.apache.tomcat.util.net.Nio2Endpoint$SendfileData getSendfileData()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper.reset(java.lang.Object, long)", "public void reset(java.lang.Object, long)"], ["org.apache.tomcat.util.net.Nio2Endpoint$NioBufferHandler", "org.apache.tomcat.util.net.Nio2Endpoint$NioBufferHandler(int, int, boolean)", "public org.apache.tomcat.util.net.Nio2Endpoint$NioBufferHandler(int, int, boolean)"], ["java.nio.ByteBuffer", "org.apache.tomcat.util.net.Nio2Endpoint$NioBufferHandler.getReadBuffer()", "public java.nio.ByteBuffer getReadBuffer()"], ["java.nio.ByteBuffer", "org.apache.tomcat.util.net.Nio2Endpoint$NioBufferHandler.getWriteBuffer()", "public java.nio.ByteBuffer getWriteBuffer()"], ["org.apache.tomcat.util.net.Nio2Endpoint$SendfileData", "org.apache.tomcat.util.net.Nio2Endpoint$SendfileData()", "public org.apache.tomcat.util.net.Nio2Endpoint$SendfileData()"], ["org.apache.tomcat.util.net.Nio2Endpoint$SendfileState[]", "org.apache.tomcat.util.net.Nio2Endpoint$SendfileState.values()", "public static org.apache.tomcat.util.net.Nio2Endpoint$SendfileState[] values()"], ["org.apache.tomcat.util.net.Nio2Endpoint$SendfileState", "org.apache.tomcat.util.net.Nio2Endpoint$SendfileState.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.Nio2Endpoint$SendfileState valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor", "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.reset(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)", "public void reset(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor.run()", "public void run()"], ["org.apache.tomcat.util.net.Nio2Endpoint", "org.apache.tomcat.util.net.Nio2Endpoint()", "public org.apache.tomcat.util.net.Nio2Endpoint()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setUseCaches(boolean)", "public void setUseCaches(boolean)"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.getUseCaches()", "public boolean getUseCaches()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setPollerThreadPriority(int)", "public void setPollerThreadPriority(int)"], ["int", "org.apache.tomcat.util.net.Nio2Endpoint.getPollerThreadPriority()", "public int getPollerThreadPriority()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setHandler(org.apache.tomcat.util.net.Nio2Endpoint$Handler)", "public void setHandler(org.apache.tomcat.util.net.Nio2Endpoint$Handler)"], ["org.apache.tomcat.util.net.Nio2Endpoint$Handler", "org.apache.tomcat.util.net.Nio2Endpoint.getHandler()", "public org.apache.tomcat.util.net.Nio2Endpoint$Handler getHandler()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setUseComet(boolean)", "public void setUseComet(boolean)"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.getUseComet()", "public boolean getUseComet()"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.getUseCometTimeout()", "public boolean getUseCometTimeout()"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.getUsePolling()", "public boolean getUsePolling()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setSocketProperties(org.apache.tomcat.util.net.SocketProperties)", "public void setSocketProperties(org.apache.tomcat.util.net.SocketProperties)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setUseSendfile(boolean)", "public void setUseSendfile(boolean)"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.getDeferAccept()", "public boolean getDeferAccept()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setOomParachute(int)", "public void setOomParachute(int)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setOomParachuteData(byte[])", "public void setOomParachuteData(byte[])"], ["javax.net.ssl.SSLContext", "org.apache.tomcat.util.net.Nio2Endpoint.getSSLContext()", "public javax.net.ssl.SSLContext getSSLContext()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.setSSLContext(javax.net.ssl.SSLContext)", "public void setSSLContext(javax.net.ssl.SSLContext)"], ["int", "org.apache.tomcat.util.net.Nio2Endpoint.getLocalPort()", "public int getLocalPort()"], ["java.lang.String[]", "org.apache.tomcat.util.net.Nio2Endpoint.getCiphersUsed()", "public java.lang.String[] getCiphersUsed()"], ["int", "org.apache.tomcat.util.net.Nio2Endpoint.getKeepAliveCount()", "public int getKeepAliveCount()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.bind()", "public void bind() throws java.lang.Exception"], ["javax.net.ssl.KeyManager[]", "org.apache.tomcat.util.net.Nio2Endpoint.wrap(javax.net.ssl.KeyManager[])", "public javax.net.ssl.KeyManager[] wrap(javax.net.ssl.KeyManager[])"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.startInternal()", "public void startInternal() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.stopInternal()", "public void stopInternal()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.unbind()", "public void unbind() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.shutdownExecutor()", "public void shutdownExecutor()"], ["int", "org.apache.tomcat.util.net.Nio2Endpoint.getWriteBufSize()", "public int getWriteBufSize()"], ["int", "org.apache.tomcat.util.net.Nio2Endpoint.getReadBufSize()", "public int getReadBufSize()"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.getUseSendfile()", "public boolean getUseSendfile()"], ["int", "org.apache.tomcat.util.net.Nio2Endpoint.getOomParachute()", "public int getOomParachute()"], ["byte[]", "org.apache.tomcat.util.net.Nio2Endpoint.getOomParachuteData()", "public byte[] getOomParachuteData()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.processSocket(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus, boolean)", "public void processSocket(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus, boolean)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.closeSocket(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)", "public void closeSocket(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.addTimeout(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void addTimeout(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.removeTimeout(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public boolean removeTimeout(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.startInline()", "public static void startInline()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.endInline()", "public static void endInline()"], ["boolean", "org.apache.tomcat.util.net.Nio2Endpoint.isInline()", "public static boolean isInline()"], ["void", "org.apache.tomcat.util.net.Nio2Endpoint.awaitBytes(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void awaitBytes(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["org.apache.tomcat.util.net.Nio2Endpoint$SendfileState", "org.apache.tomcat.util.net.Nio2Endpoint.processSendfile(org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper)", "public org.apache.tomcat.util.net.Nio2Endpoint$SendfileState processSendfile(org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper)"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller$1.run()", "public void run()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller$2.run()", "public void run()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller$3.run()", "public void run()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.disable()", "public void disable()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.cancelKey(java.nio.channels.SelectionKey)", "public void cancelKey(java.nio.channels.SelectionKey)"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.wakeup()", "public void wakeup()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.cancel(java.nio.channels.SelectionKey, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)", "public void cancel(java.nio.channels.SelectionKey, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.add(org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int, org.apache.tomcat.util.net.NioBlockingSelector$KeyReference)", "public void add(org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int, org.apache.tomcat.util.net.NioBlockingSelector$KeyReference)"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.remove(org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)", "public void remove(org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)"], ["boolean", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.events()", "public boolean events()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.run()", "public void run()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller.countDown(java.util.concurrent.CountDownLatch)", "public void countDown(java.util.concurrent.CountDownLatch)"], ["org.apache.tomcat.util.net.NioBlockingSelector$KeyReference", "org.apache.tomcat.util.net.NioBlockingSelector$KeyReference()", "public org.apache.tomcat.util.net.NioBlockingSelector$KeyReference()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector$KeyReference.finalize()", "public void finalize()"], ["org.apache.tomcat.util.net.NioBlockingSelector", "org.apache.tomcat.util.net.NioBlockingSelector()", "public org.apache.tomcat.util.net.NioBlockingSelector()"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector.open(java.nio.channels.Selector)", "public void open(java.nio.channels.Selector)"], ["void", "org.apache.tomcat.util.net.NioBlockingSelector.close()", "public void close()"], ["int", "org.apache.tomcat.util.net.NioBlockingSelector.write(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, long)", "public int write(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, long) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.NioBlockingSelector.read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, long)", "public int read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, long) throws java.io.IOException"], ["org.apache.tomcat.util.net.NioChannel", "org.apache.tomcat.util.net.NioChannel(java.nio.channels.SocketChannel, org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler)", "public org.apache.tomcat.util.net.NioChannel(java.nio.channels.SocketChannel, org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler)"], ["void", "org.apache.tomcat.util.net.NioChannel.reset()", "public void reset() throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.NioChannel.getBufferSize()", "public int getBufferSize()"], ["boolean", "org.apache.tomcat.util.net.NioChannel.flush(boolean, java.nio.channels.Selector, long)", "public boolean flush(boolean, java.nio.channels.Selector, long) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.NioChannel.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.NioChannel.close(boolean)", "public void close(boolean) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.net.NioChannel.isOpen()", "public boolean isOpen()"], ["int", "org.apache.tomcat.util.net.NioChannel.write(java.nio.ByteBuffer)", "public int write(java.nio.ByteBuffer) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.NioChannel.read(java.nio.ByteBuffer)", "public int read(java.nio.ByteBuffer) throws java.io.IOException"], ["java.lang.Object", "org.apache.tomcat.util.net.NioChannel.getAttachment(boolean)", "public java.lang.Object getAttachment(boolean)"], ["org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler", "org.apache.tomcat.util.net.NioChannel.getBufHandler()", "public org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()"], ["org.apache.tomcat.util.net.NioEndpoint$Poller", "org.apache.tomcat.util.net.NioChannel.getPoller()", "public org.apache.tomcat.util.net.NioEndpoint$Poller getPoller()"], ["java.nio.channels.SocketChannel", "org.apache.tomcat.util.net.NioChannel.getIOChannel()", "public java.nio.channels.SocketChannel getIOChannel()"], ["boolean", "org.apache.tomcat.util.net.NioChannel.isClosing()", "public boolean isClosing()"], ["boolean", "org.apache.tomcat.util.net.NioChannel.isHandshakeComplete()", "public boolean isHandshakeComplete()"], ["int", "org.apache.tomcat.util.net.NioChannel.handshake(boolean, boolean)", "public int handshake(boolean, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.NioChannel.setPoller(org.apache.tomcat.util.net.NioEndpoint$Poller)", "public void setPoller(org.apache.tomcat.util.net.NioEndpoint$Poller)"], ["void", "org.apache.tomcat.util.net.NioChannel.setIOChannel(java.nio.channels.SocketChannel)", "public void setIOChannel(java.nio.channels.SocketChannel)"], ["java.lang.String", "org.apache.tomcat.util.net.NioChannel.toString()", "public java.lang.String toString()"], ["int", "org.apache.tomcat.util.net.NioChannel.getOutboundRemaining()", "public int getOutboundRemaining()"], ["boolean", "org.apache.tomcat.util.net.NioChannel.flushOutbound()", "public boolean flushOutbound() throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.net.NioChannel.isSendFile()", "public boolean isSendFile()"], ["void", "org.apache.tomcat.util.net.NioChannel.setSendFile(boolean)", "public void setSendFile(boolean)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$Acceptor.run()", "public void run()"], ["org.apache.tomcat.util.net.NioEndpoint$KeyAttachment", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment(org.apache.tomcat.util.net.NioChannel)", "public org.apache.tomcat.util.net.NioEndpoint$KeyAttachment(org.apache.tomcat.util.net.NioChannel)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.reset(org.apache.tomcat.util.net.NioEndpoint$Poller, org.apache.tomcat.util.net.NioChannel, long)", "public void reset(org.apache.tomcat.util.net.NioEndpoint$Poller, org.apache.tomcat.util.net.NioChannel, long)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.reset()", "public void reset()"], ["org.apache.tomcat.util.net.NioEndpoint$Poller", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.getPoller()", "public org.apache.tomcat.util.net.NioEndpoint$Poller getPoller()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.setPoller(org.apache.tomcat.util.net.NioEndpoint$Poller)", "public void setPoller(org.apache.tomcat.util.net.NioEndpoint$Poller)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.setCometNotify(boolean)", "public void setCometNotify(boolean)"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.getCometNotify()", "public boolean getCometNotify()"], ["int", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.interestOps()", "public int interestOps()"], ["int", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.interestOps(int)", "public int interestOps(int)"], ["java.util.concurrent.CountDownLatch", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.getReadLatch()", "public java.util.concurrent.CountDownLatch getReadLatch()"], ["java.util.concurrent.CountDownLatch", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.getWriteLatch()", "public java.util.concurrent.CountDownLatch getWriteLatch()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.resetReadLatch()", "public void resetReadLatch()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.resetWriteLatch()", "public void resetWriteLatch()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.startReadLatch(int)", "public void startReadLatch(int)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.startWriteLatch(int)", "public void startWriteLatch(int)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.awaitReadLatch(long, java.util.concurrent.TimeUnit)", "public void awaitReadLatch(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.awaitWriteLatch(long, java.util.concurrent.TimeUnit)", "public void awaitWriteLatch(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.setSendfileData(org.apache.tomcat.util.net.NioEndpoint$SendfileData)", "public void setSendfileData(org.apache.tomcat.util.net.NioEndpoint$SendfileData)"], ["org.apache.tomcat.util.net.NioEndpoint$SendfileData", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.getSendfileData()", "public org.apache.tomcat.util.net.NioEndpoint$SendfileData getSendfileData()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.setWriteTimeout(long)", "public void setWriteTimeout(long)"], ["long", "org.apache.tomcat.util.net.NioEndpoint$KeyAttachment.getWriteTimeout()", "public long getWriteTimeout()"], ["org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler", "org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler(int, int, boolean)", "public org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler(int, int, boolean)"], ["java.nio.ByteBuffer", "org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler.expand(java.nio.ByteBuffer, int)", "public java.nio.ByteBuffer expand(java.nio.ByteBuffer, int)"], ["java.nio.ByteBuffer", "org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler.getReadBuffer()", "public java.nio.ByteBuffer getReadBuffer()"], ["java.nio.ByteBuffer", "org.apache.tomcat.util.net.NioEndpoint$NioBufferHandler.getWriteBuffer()", "public java.nio.ByteBuffer getWriteBuffer()"], ["org.apache.tomcat.util.net.NioEndpoint$Poller", "org.apache.tomcat.util.net.NioEndpoint$Poller(org.apache.tomcat.util.net.NioEndpoint)", "public org.apache.tomcat.util.net.NioEndpoint$Poller(org.apache.tomcat.util.net.NioEndpoint) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.NioEndpoint$Poller.getKeyCount()", "public int getKeyCount()"], ["java.nio.channels.Selector", "org.apache.tomcat.util.net.NioEndpoint$Poller.getSelector()", "public java.nio.channels.Selector getSelector()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$Poller.add(org.apache.tomcat.util.net.NioChannel)", "public void add(org.apache.tomcat.util.net.NioChannel)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$Poller.add(org.apache.tomcat.util.net.NioChannel, int)", "public void add(org.apache.tomcat.util.net.NioChannel, int)"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint$Poller.events()", "public boolean events()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$Poller.register(org.apache.tomcat.util.net.NioChannel)", "public void register(org.apache.tomcat.util.net.NioChannel)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(java.nio.channels.SelectionKey, org.apache.tomcat.util.net.SocketStatus)", "public void cancelledKey(java.nio.channels.SelectionKey, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$Poller.run()", "public void run()"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint$Poller.processSendfile(java.nio.channels.SelectionKey, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, boolean)", "public boolean processSendfile(java.nio.channels.SelectionKey, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, boolean)"], ["org.apache.tomcat.util.net.NioEndpoint$PollerEvent", "org.apache.tomcat.util.net.NioEndpoint$PollerEvent(org.apache.tomcat.util.net.NioChannel, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)", "public org.apache.tomcat.util.net.NioEndpoint$PollerEvent(org.apache.tomcat.util.net.NioChannel, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$PollerEvent.reset(org.apache.tomcat.util.net.NioChannel, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)", "public void reset(org.apache.tomcat.util.net.NioChannel, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, int)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$PollerEvent.reset()", "public void reset()"], ["void", "org.apache.tomcat.util.net.NioEndpoint$PollerEvent.run()", "public void run()"], ["java.lang.String", "org.apache.tomcat.util.net.NioEndpoint$PollerEvent.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.net.NioEndpoint$SendfileData", "org.apache.tomcat.util.net.NioEndpoint$SendfileData()", "public org.apache.tomcat.util.net.NioEndpoint$SendfileData()"], ["org.apache.tomcat.util.net.NioEndpoint$SocketProcessor", "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor(org.apache.tomcat.util.net.NioEndpoint, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, org.apache.tomcat.util.net.SocketStatus)", "public org.apache.tomcat.util.net.NioEndpoint$SocketProcessor(org.apache.tomcat.util.net.NioEndpoint, org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.reset(org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, org.apache.tomcat.util.net.SocketStatus)", "public void reset(org.apache.tomcat.util.net.NioEndpoint$KeyAttachment, org.apache.tomcat.util.net.SocketStatus)"], ["void", "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run()", "public void run()"], ["org.apache.tomcat.util.net.NioEndpoint", "org.apache.tomcat.util.net.NioEndpoint()", "public org.apache.tomcat.util.net.NioEndpoint()"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint.setProperty(java.lang.String, java.lang.String)", "public boolean setProperty(java.lang.String, java.lang.String)"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setPollerThreadPriority(int)", "public void setPollerThreadPriority(int)"], ["int", "org.apache.tomcat.util.net.NioEndpoint.getPollerThreadPriority()", "public int getPollerThreadPriority()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setHandler(org.apache.tomcat.util.net.NioEndpoint$Handler)", "public void setHandler(org.apache.tomcat.util.net.NioEndpoint$Handler)"], ["org.apache.tomcat.util.net.NioEndpoint$Handler", "org.apache.tomcat.util.net.NioEndpoint.getHandler()", "public org.apache.tomcat.util.net.NioEndpoint$Handler getHandler()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setUseComet(boolean)", "public void setUseComet(boolean)"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint.getUseComet()", "public boolean getUseComet()"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint.getUseCometTimeout()", "public boolean getUseCometTimeout()"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint.getUsePolling()", "public boolean getUsePolling()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setPollerThreadCount(int)", "public void setPollerThreadCount(int)"], ["int", "org.apache.tomcat.util.net.NioEndpoint.getPollerThreadCount()", "public int getPollerThreadCount()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setSelectorTimeout(long)", "public void setSelectorTimeout(long)"], ["long", "org.apache.tomcat.util.net.NioEndpoint.getSelectorTimeout()", "public long getSelectorTimeout()"], ["org.apache.tomcat.util.net.NioEndpoint$Poller", "org.apache.tomcat.util.net.NioEndpoint.getPoller0()", "public org.apache.tomcat.util.net.NioEndpoint$Poller getPoller0()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setSelectorPool(org.apache.tomcat.util.net.NioSelectorPool)", "public void setSelectorPool(org.apache.tomcat.util.net.NioSelectorPool)"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setSocketProperties(org.apache.tomcat.util.net.SocketProperties)", "public void setSocketProperties(org.apache.tomcat.util.net.SocketProperties)"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setUseSendfile(boolean)", "public void setUseSendfile(boolean)"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint.getDeferAccept()", "public boolean getDeferAccept()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setOomParachute(int)", "public void setOomParachute(int)"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setOomParachuteData(byte[])", "public void setOomParachuteData(byte[])"], ["javax.net.ssl.SSLContext", "org.apache.tomcat.util.net.NioEndpoint.getSSLContext()", "public javax.net.ssl.SSLContext getSSLContext()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.setSSLContext(javax.net.ssl.SSLContext)", "public void setSSLContext(javax.net.ssl.SSLContext)"], ["int", "org.apache.tomcat.util.net.NioEndpoint.getLocalPort()", "public int getLocalPort()"], ["java.lang.String[]", "org.apache.tomcat.util.net.NioEndpoint.getCiphersUsed()", "public java.lang.String[] getCiphersUsed()"], ["int", "org.apache.tomcat.util.net.NioEndpoint.getKeepAliveCount()", "public int getKeepAliveCount()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.bind()", "public void bind() throws java.lang.Exception"], ["javax.net.ssl.KeyManager[]", "org.apache.tomcat.util.net.NioEndpoint.wrap(javax.net.ssl.KeyManager[])", "public javax.net.ssl.KeyManager[] wrap(javax.net.ssl.KeyManager[])"], ["void", "org.apache.tomcat.util.net.NioEndpoint.startInternal()", "public void startInternal() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.NioEndpoint.stopInternal()", "public void stopInternal()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.unbind()", "public void unbind() throws java.lang.Exception"], ["int", "org.apache.tomcat.util.net.NioEndpoint.getWriteBufSize()", "public int getWriteBufSize()"], ["int", "org.apache.tomcat.util.net.NioEndpoint.getReadBufSize()", "public int getReadBufSize()"], ["org.apache.tomcat.util.net.NioSelectorPool", "org.apache.tomcat.util.net.NioEndpoint.getSelectorPool()", "public org.apache.tomcat.util.net.NioSelectorPool getSelectorPool()"], ["boolean", "org.apache.tomcat.util.net.NioEndpoint.getUseSendfile()", "public boolean getUseSendfile()"], ["int", "org.apache.tomcat.util.net.NioEndpoint.getOomParachute()", "public int getOomParachute()"], ["byte[]", "org.apache.tomcat.util.net.NioEndpoint.getOomParachuteData()", "public byte[] getOomParachuteData()"], ["void", "org.apache.tomcat.util.net.NioEndpoint.processSocket(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.SocketStatus, boolean)", "public void processSocket(org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.NioChannel>, org.apache.tomcat.util.net.SocketStatus, boolean)"], ["org.apache.tomcat.util.net.NioSelectorPool", "org.apache.tomcat.util.net.NioSelectorPool()", "public org.apache.tomcat.util.net.NioSelectorPool()"], ["java.nio.channels.Selector", "org.apache.tomcat.util.net.NioSelectorPool.get()", "public java.nio.channels.Selector get() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.NioSelectorPool.put(java.nio.channels.Selector)", "public void put(java.nio.channels.Selector) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.NioSelectorPool.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.NioSelectorPool.open()", "public void open() throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.NioSelectorPool.write(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long, boolean)", "public int write(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long, boolean) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.NioSelectorPool.read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long)", "public int read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.NioSelectorPool.read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long, boolean)", "public int read(java.nio.ByteBuffer, org.apache.tomcat.util.net.NioChannel, java.nio.channels.Selector, long, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.NioSelectorPool.setMaxSelectors(int)", "public void setMaxSelectors(int)"], ["void", "org.apache.tomcat.util.net.NioSelectorPool.setMaxSpareSelectors(int)", "public void setMaxSpareSelectors(int)"], ["void", "org.apache.tomcat.util.net.NioSelectorPool.setEnabled(boolean)", "public void setEnabled(boolean)"], ["void", "org.apache.tomcat.util.net.NioSelectorPool.setSharedSelectorTimeout(long)", "public void setSharedSelectorTimeout(long)"], ["int", "org.apache.tomcat.util.net.NioSelectorPool.getMaxSelectors()", "public int getMaxSelectors()"], ["int", "org.apache.tomcat.util.net.NioSelectorPool.getMaxSpareSelectors()", "public int getMaxSpareSelectors()"], ["boolean", "org.apache.tomcat.util.net.NioSelectorPool.isEnabled()", "public boolean isEnabled()"], ["long", "org.apache.tomcat.util.net.NioSelectorPool.getSharedSelectorTimeout()", "public long getSharedSelectorTimeout()"], ["java.util.concurrent.ConcurrentLinkedQueue<java.nio.channels.Selector>", "org.apache.tomcat.util.net.NioSelectorPool.getSelectors()", "public java.util.concurrent.ConcurrentLinkedQueue<java.nio.channels.Selector> getSelectors()"], ["java.util.concurrent.atomic.AtomicInteger", "org.apache.tomcat.util.net.NioSelectorPool.getSpare()", "public java.util.concurrent.atomic.AtomicInteger getSpare()"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.tomcat.util.net.SSLImplementation()", "public org.apache.tomcat.util.net.SSLImplementation()"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.tomcat.util.net.SSLImplementation.getInstance()", "public static org.apache.tomcat.util.net.SSLImplementation getInstance() throws java.lang.ClassNotFoundException"], ["org.apache.tomcat.util.net.SSLImplementation", "org.apache.tomcat.util.net.SSLImplementation.getInstance(java.lang.String)", "public static org.apache.tomcat.util.net.SSLImplementation getInstance(java.lang.String) throws java.lang.ClassNotFoundException"], ["org.apache.tomcat.util.net.SSLSupport$CipherData", "org.apache.tomcat.util.net.SSLSupport$CipherData(java.lang.String, int)", "public org.apache.tomcat.util.net.SSLSupport$CipherData(java.lang.String, int)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$1.completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$1.failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$1.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$1.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$2.completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void completed(java.lang.Integer, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$2.failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$2.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$2.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$3.completed(java.lang.Integer, A)", "public void completed(java.lang.Integer, A)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$3.failed(java.lang.Throwable, A)", "public void failed(java.lang.Throwable, A)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$3.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush.isDone()", "public boolean isDone()"], ["java.lang.Boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush.get()", "public java.lang.Boolean get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["java.lang.Boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Boolean get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush.get()", "public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureNetRead.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureNetRead.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureNetRead.isDone()", "public boolean isDone()"], ["java.lang.Integer", "org.apache.tomcat.util.net.SecureNio2Channel$FutureNetRead.get()", "public java.lang.Integer get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["java.lang.Integer", "org.apache.tomcat.util.net.SecureNio2Channel$FutureNetRead.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Integer get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureNetRead.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureNetRead.get()", "public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["org.apache.tomcat.util.net.SecureNio2Channel$FutureRead", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead(org.apache.tomcat.util.net.SecureNio2Channel, java.nio.ByteBuffer)", "public org.apache.tomcat.util.net.SecureNio2Channel$FutureRead(org.apache.tomcat.util.net.SecureNio2Channel, java.nio.ByteBuffer)"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead.isDone()", "public boolean isDone()"], ["java.lang.Integer", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead.get()", "public java.lang.Integer get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["java.lang.Integer", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Integer get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead.get()", "public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite.isDone()", "public boolean isDone()"], ["java.lang.Integer", "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite.get()", "public java.lang.Integer get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["java.lang.Integer", "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Integer get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite.get()", "public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$GatherCompletionHandler.completed(java.lang.Integer, org.apache.tomcat.util.net.SecureNio2Channel$GatherState<A>)", "public void completed(java.lang.Integer, org.apache.tomcat.util.net.SecureNio2Channel$GatherState<A>)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$GatherCompletionHandler.failed(java.lang.Throwable, org.apache.tomcat.util.net.SecureNio2Channel$GatherState<A>)", "public void failed(java.lang.Throwable, org.apache.tomcat.util.net.SecureNio2Channel$GatherState<A>)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$GatherCompletionHandler.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$GatherCompletionHandler.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$ReadCompletionHandler.completed(java.lang.Integer, A)", "public void completed(java.lang.Integer, A)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$ReadCompletionHandler.failed(java.lang.Throwable, A)", "public void failed(java.lang.Throwable, A)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel$ReadCompletionHandler.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["org.apache.tomcat.util.net.SecureNio2Channel", "org.apache.tomcat.util.net.SecureNio2Channel(javax.net.ssl.SSLEngine, org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler, org.apache.tomcat.util.net.Nio2Endpoint)", "public org.apache.tomcat.util.net.SecureNio2Channel(javax.net.ssl.SSLEngine, org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler, org.apache.tomcat.util.net.Nio2Endpoint)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel.setSSLEngine(javax.net.ssl.SSLEngine)", "public void setSSLEngine(javax.net.ssl.SSLEngine)"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel.reset(java.nio.channels.AsynchronousSocketChannel, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>)", "public void reset(java.nio.channels.AsynchronousSocketChannel, org.apache.tomcat.util.net.SocketWrapper<org.apache.tomcat.util.net.Nio2Channel>) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.SecureNio2Channel.getBufferSize()", "public int getBufferSize()"], ["java.util.concurrent.Future<java.lang.Boolean>", "org.apache.tomcat.util.net.SecureNio2Channel.flush()", "public java.util.concurrent.Future<java.lang.Boolean> flush()"], ["int", "org.apache.tomcat.util.net.SecureNio2Channel.handshake()", "public int handshake() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel.rehandshake()", "public void rehandshake() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel.close(boolean)", "public void close(boolean) throws java.io.IOException"], ["java.util.concurrent.Future<java.lang.Integer>", "org.apache.tomcat.util.net.SecureNio2Channel.read(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> read(java.nio.ByteBuffer)"], ["java.util.concurrent.Future<java.lang.Integer>", "org.apache.tomcat.util.net.SecureNio2Channel.write(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> write(java.nio.ByteBuffer)"], ["<A> void", "org.apache.tomcat.util.net.SecureNio2Channel.read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "org.apache.tomcat.util.net.SecureNio2Channel.write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "org.apache.tomcat.util.net.SecureNio2Channel.write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)", "public <A> void write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)"], ["org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler", "org.apache.tomcat.util.net.SecureNio2Channel.getBufHandler()", "public org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler getBufHandler()"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel.isHandshakeComplete()", "public boolean isHandshakeComplete()"], ["boolean", "org.apache.tomcat.util.net.SecureNio2Channel.isClosing()", "public boolean isClosing()"], ["javax.net.ssl.SSLEngine", "org.apache.tomcat.util.net.SecureNio2Channel.getSslEngine()", "public javax.net.ssl.SSLEngine getSslEngine()"], ["java.nio.ByteBuffer", "org.apache.tomcat.util.net.SecureNio2Channel.getEmptyBuf()", "public java.nio.ByteBuffer getEmptyBuf()"], ["void", "org.apache.tomcat.util.net.SecureNio2Channel.setBufHandler(org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler)", "public void setBufHandler(org.apache.tomcat.util.net.SecureNio2Channel$ApplicationBufferHandler)"], ["java.nio.channels.AsynchronousSocketChannel", "org.apache.tomcat.util.net.SecureNio2Channel.getIOChannel()", "public java.nio.channels.AsynchronousSocketChannel getIOChannel()"], ["org.apache.tomcat.util.net.SecureNioChannel", "org.apache.tomcat.util.net.SecureNioChannel(java.nio.channels.SocketChannel, javax.net.ssl.SSLEngine, org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler, org.apache.tomcat.util.net.NioSelectorPool)", "public org.apache.tomcat.util.net.SecureNioChannel(java.nio.channels.SocketChannel, javax.net.ssl.SSLEngine, org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler, org.apache.tomcat.util.net.NioSelectorPool) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNioChannel.reset(javax.net.ssl.SSLEngine)", "public void reset(javax.net.ssl.SSLEngine) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNioChannel.reset()", "public void reset() throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.SecureNioChannel.getBufferSize()", "public int getBufferSize()"], ["boolean", "org.apache.tomcat.util.net.SecureNioChannel.flush(boolean, java.nio.channels.Selector, long)", "public boolean flush(boolean, java.nio.channels.Selector, long) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.SecureNioChannel.handshake(boolean, boolean)", "public int handshake(boolean, boolean) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNioChannel.rehandshake(long)", "public void rehandshake(long) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNioChannel.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SecureNioChannel.close(boolean)", "public void close(boolean) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.SecureNioChannel.read(java.nio.ByteBuffer)", "public int read(java.nio.ByteBuffer) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.SecureNioChannel.write(java.nio.ByteBuffer)", "public int write(java.nio.ByteBuffer) throws java.io.IOException"], ["int", "org.apache.tomcat.util.net.SecureNioChannel.getOutboundRemaining()", "public int getOutboundRemaining()"], ["boolean", "org.apache.tomcat.util.net.SecureNioChannel.flushOutbound()", "public boolean flushOutbound() throws java.io.IOException"], ["org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler", "org.apache.tomcat.util.net.SecureNioChannel.getBufHandler()", "public org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler getBufHandler()"], ["boolean", "org.apache.tomcat.util.net.SecureNioChannel.isHandshakeComplete()", "public boolean isHandshakeComplete()"], ["boolean", "org.apache.tomcat.util.net.SecureNioChannel.isClosing()", "public boolean isClosing()"], ["javax.net.ssl.SSLEngine", "org.apache.tomcat.util.net.SecureNioChannel.getSslEngine()", "public javax.net.ssl.SSLEngine getSslEngine()"], ["java.nio.ByteBuffer", "org.apache.tomcat.util.net.SecureNioChannel.getEmptyBuf()", "public java.nio.ByteBuffer getEmptyBuf()"], ["void", "org.apache.tomcat.util.net.SecureNioChannel.setBufHandler(org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler)", "public void setBufHandler(org.apache.tomcat.util.net.SecureNioChannel$ApplicationBufferHandler)"], ["java.nio.channels.SocketChannel", "org.apache.tomcat.util.net.SecureNioChannel.getIOChannel()", "public java.nio.channels.SocketChannel getIOChannel()"], ["org.apache.tomcat.util.net.SocketProperties", "org.apache.tomcat.util.net.SocketProperties()", "public org.apache.tomcat.util.net.SocketProperties()"], ["void", "org.apache.tomcat.util.net.SocketProperties.setProperties(java.net.Socket)", "public void setProperties(java.net.Socket) throws java.net.SocketException"], ["void", "org.apache.tomcat.util.net.SocketProperties.setProperties(java.net.ServerSocket)", "public void setProperties(java.net.ServerSocket) throws java.net.SocketException"], ["void", "org.apache.tomcat.util.net.SocketProperties.setProperties(java.nio.channels.AsynchronousSocketChannel)", "public void setProperties(java.nio.channels.AsynchronousSocketChannel) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.SocketProperties.setProperties(java.nio.channels.AsynchronousServerSocketChannel)", "public void setProperties(java.nio.channels.AsynchronousServerSocketChannel) throws java.io.IOException"], ["boolean", "org.apache.tomcat.util.net.SocketProperties.getDirectBuffer()", "public boolean getDirectBuffer()"], ["boolean", "org.apache.tomcat.util.net.SocketProperties.getDirectSslBuffer()", "public boolean getDirectSslBuffer()"], ["boolean", "org.apache.tomcat.util.net.SocketProperties.getOoBInline()", "public boolean getOoBInline()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getPerformanceBandwidth()", "public int getPerformanceBandwidth()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getPerformanceConnectionTime()", "public int getPerformanceConnectionTime()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getPerformanceLatency()", "public int getPerformanceLatency()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getRxBufSize()", "public int getRxBufSize()"], ["boolean", "org.apache.tomcat.util.net.SocketProperties.getSoKeepAlive()", "public boolean getSoKeepAlive()"], ["boolean", "org.apache.tomcat.util.net.SocketProperties.getSoLingerOn()", "public boolean getSoLingerOn()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getSoLingerTime()", "public int getSoLingerTime()"], ["boolean", "org.apache.tomcat.util.net.SocketProperties.getSoReuseAddress()", "public boolean getSoReuseAddress()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getSoTimeout()", "public int getSoTimeout()"], ["boolean", "org.apache.tomcat.util.net.SocketProperties.getTcpNoDelay()", "public boolean getTcpNoDelay()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getTxBufSize()", "public int getTxBufSize()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getBufferPool()", "public int getBufferPool()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getBufferPoolSize()", "public int getBufferPoolSize()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getEventCache()", "public int getEventCache()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getKeyCache()", "public int getKeyCache()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getSocketWrapperCache()", "public int getSocketWrapperCache()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getAppReadBufSize()", "public int getAppReadBufSize()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getAppWriteBufSize()", "public int getAppWriteBufSize()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getProcessorCache()", "public int getProcessorCache()"], ["long", "org.apache.tomcat.util.net.SocketProperties.getTimeoutInterval()", "public long getTimeoutInterval()"], ["int", "org.apache.tomcat.util.net.SocketProperties.getDirectBufferPool()", "public int getDirectBufferPool()"], ["void", "org.apache.tomcat.util.net.SocketProperties.setPerformanceConnectionTime(int)", "public void setPerformanceConnectionTime(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setTxBufSize(int)", "public void setTxBufSize(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setTcpNoDelay(boolean)", "public void setTcpNoDelay(boolean)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setSoTimeout(int)", "public void setSoTimeout(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setSoReuseAddress(boolean)", "public void setSoReuseAddress(boolean)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setSoLingerTime(int)", "public void setSoLingerTime(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setSoKeepAlive(boolean)", "public void setSoKeepAlive(boolean)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setRxBufSize(int)", "public void setRxBufSize(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setPerformanceLatency(int)", "public void setPerformanceLatency(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setPerformanceBandwidth(int)", "public void setPerformanceBandwidth(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setOoBInline(boolean)", "public void setOoBInline(boolean)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setDirectBuffer(boolean)", "public void setDirectBuffer(boolean)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setDirectSslBuffer(boolean)", "public void setDirectSslBuffer(boolean)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setSoLingerOn(boolean)", "public void setSoLingerOn(boolean)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setBufferPool(int)", "public void setBufferPool(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setBufferPoolSize(int)", "public void setBufferPoolSize(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setEventCache(int)", "public void setEventCache(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setSocketWrapperCache(int)", "public void setSocketWrapperCache(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setKeyCache(int)", "public void setKeyCache(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setAppReadBufSize(int)", "public void setAppReadBufSize(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setAppWriteBufSize(int)", "public void setAppWriteBufSize(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setProcessorCache(int)", "public void setProcessorCache(int)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setTimeoutInterval(long)", "public void setTimeoutInterval(long)"], ["void", "org.apache.tomcat.util.net.SocketProperties.setDirectBufferPool(int)", "public void setDirectBufferPool(int)"], ["int", "org.apache.tomcat.util.net.SocketProperties.getUnlockTimeout()", "public int getUnlockTimeout()"], ["void", "org.apache.tomcat.util.net.SocketProperties.setUnlockTimeout(int)", "public void setUnlockTimeout(int)"], ["org.apache.tomcat.util.net.SocketStatus[]", "org.apache.tomcat.util.net.SocketStatus.values()", "public static org.apache.tomcat.util.net.SocketStatus[] values()"], ["org.apache.tomcat.util.net.SocketStatus", "org.apache.tomcat.util.net.SocketStatus.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.SocketStatus valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.SocketWrapper", "org.apache.tomcat.util.net.SocketWrapper(E)", "public org.apache.tomcat.util.net.SocketWrapper(E)"], ["E", "org.apache.tomcat.util.net.SocketWrapper.getSocket()", "public E getSocket()"], ["boolean", "org.apache.tomcat.util.net.SocketWrapper.isComet()", "public boolean isComet()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setComet(boolean)", "public void setComet(boolean)"], ["boolean", "org.apache.tomcat.util.net.SocketWrapper.isAsync()", "public boolean isAsync()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setAsync(boolean)", "public void setAsync(boolean)"], ["boolean", "org.apache.tomcat.util.net.SocketWrapper.isUpgraded()", "public boolean isUpgraded()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setUpgraded(boolean)", "public void setUpgraded(boolean)"], ["boolean", "org.apache.tomcat.util.net.SocketWrapper.isSecure()", "public boolean isSecure()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setSecure(boolean)", "public void setSecure(boolean)"], ["long", "org.apache.tomcat.util.net.SocketWrapper.getLastAccess()", "public long getLastAccess()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.access()", "public void access()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.access(long)", "public void access(long)"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setTimeout(long)", "public void setTimeout(long)"], ["long", "org.apache.tomcat.util.net.SocketWrapper.getTimeout()", "public long getTimeout()"], ["boolean", "org.apache.tomcat.util.net.SocketWrapper.getError()", "public boolean getError()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setError(boolean)", "public void setError(boolean)"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setKeepAliveLeft(int)", "public void setKeepAliveLeft(int)"], ["int", "org.apache.tomcat.util.net.SocketWrapper.decrementKeepAlive()", "public int decrementKeepAlive()"], ["boolean", "org.apache.tomcat.util.net.SocketWrapper.isKeptAlive()", "public boolean isKeptAlive()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setKeptAlive(boolean)", "public void setKeptAlive(boolean)"], ["int", "org.apache.tomcat.util.net.SocketWrapper.getLocalPort()", "public int getLocalPort()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setLocalPort(int)", "public void setLocalPort(int)"], ["java.lang.String", "org.apache.tomcat.util.net.SocketWrapper.getLocalName()", "public java.lang.String getLocalName()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setLocalName(java.lang.String)", "public void setLocalName(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.SocketWrapper.getLocalAddr()", "public java.lang.String getLocalAddr()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setLocalAddr(java.lang.String)", "public void setLocalAddr(java.lang.String)"], ["int", "org.apache.tomcat.util.net.SocketWrapper.getRemotePort()", "public int getRemotePort()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setRemotePort(int)", "public void setRemotePort(int)"], ["java.lang.String", "org.apache.tomcat.util.net.SocketWrapper.getRemoteHost()", "public java.lang.String getRemoteHost()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setRemoteHost(java.lang.String)", "public void setRemoteHost(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.SocketWrapper.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setRemoteAddr(java.lang.String)", "public void setRemoteAddr(java.lang.String)"], ["boolean", "org.apache.tomcat.util.net.SocketWrapper.getBlockingStatus()", "public boolean getBlockingStatus()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.setBlockingStatus(boolean)", "public void setBlockingStatus(boolean)"], ["java.util.concurrent.locks.Lock", "org.apache.tomcat.util.net.SocketWrapper.getBlockingStatusReadLock()", "public java.util.concurrent.locks.Lock getBlockingStatusReadLock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock", "org.apache.tomcat.util.net.SocketWrapper.getBlockingStatusWriteLock()", "public java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock getBlockingStatusWriteLock()"], ["java.lang.Object", "org.apache.tomcat.util.net.SocketWrapper.getWriteThreadLock()", "public java.lang.Object getWriteThreadLock()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.addDispatch(org.apache.tomcat.util.net.DispatchType)", "public void addDispatch(org.apache.tomcat.util.net.DispatchType)"], ["java.util.Iterator<org.apache.tomcat.util.net.DispatchType>", "org.apache.tomcat.util.net.SocketWrapper.getIteratorAndClearDispatches()", "public java.util.Iterator<org.apache.tomcat.util.net.DispatchType> getIteratorAndClearDispatches()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.clearDispatches()", "public void clearDispatches()"], ["void", "org.apache.tomcat.util.net.SocketWrapper.reset(E, long)", "public void reset(E, long)"], ["java.lang.String", "org.apache.tomcat.util.net.SocketWrapper.toString()", "public java.lang.String toString()"], ["org.apache.tomcat.util.net.URL", "org.apache.tomcat.util.net.URL(java.lang.String)", "public org.apache.tomcat.util.net.URL(java.lang.String) throws java.net.MalformedURLException"], ["org.apache.tomcat.util.net.URL", "org.apache.tomcat.util.net.URL(org.apache.tomcat.util.net.URL, java.lang.String)", "public org.apache.tomcat.util.net.URL(org.apache.tomcat.util.net.URL, java.lang.String) throws java.net.MalformedURLException"], ["boolean", "org.apache.tomcat.util.net.URL.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.tomcat.util.net.URL.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getAuthority()", "public java.lang.String getAuthority()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getFile()", "public java.lang.String getFile()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getHost()", "public java.lang.String getHost()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getPath()", "public java.lang.String getPath()"], ["int", "org.apache.tomcat.util.net.URL.getPort()", "public int getPort()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getProtocol()", "public java.lang.String getProtocol()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getQuery()", "public java.lang.String getQuery()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getRef()", "public java.lang.String getRef()"], ["java.lang.String", "org.apache.tomcat.util.net.URL.getUserInfo()", "public java.lang.String getUserInfo()"], ["void", "org.apache.tomcat.util.net.URL.normalize()", "public void normalize() throws java.net.MalformedURLException"], ["boolean", "org.apache.tomcat.util.net.URL.sameFile(org.apache.tomcat.util.net.URL)", "public boolean sameFile(org.apache.tomcat.util.net.URL)"], ["java.lang.String", "org.apache.tomcat.util.net.URL.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.tomcat.util.net.URL.isSchemeChar(char)", "public static boolean isSchemeChar(char)"], ["org.apache.tomcat.util.net.jsse.JSSEImplementation", "org.apache.tomcat.util.net.jsse.JSSEImplementation()", "public org.apache.tomcat.util.net.jsse.JSSEImplementation()"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.JSSEImplementation.getImplementationName()", "public java.lang.String getImplementationName()"], ["org.apache.tomcat.util.net.ServerSocketFactory", "org.apache.tomcat.util.net.jsse.JSSEImplementation.getServerSocketFactory(org.apache.tomcat.util.net.AbstractEndpoint<?>)", "public org.apache.tomcat.util.net.ServerSocketFactory getServerSocketFactory(org.apache.tomcat.util.net.AbstractEndpoint<?>)"], ["org.apache.tomcat.util.net.SSLSupport", "org.apache.tomcat.util.net.jsse.JSSEImplementation.getSSLSupport(java.net.Socket)", "public org.apache.tomcat.util.net.SSLSupport getSSLSupport(java.net.Socket)"], ["org.apache.tomcat.util.net.SSLSupport", "org.apache.tomcat.util.net.jsse.JSSEImplementation.getSSLSupport(javax.net.ssl.SSLSession)", "public org.apache.tomcat.util.net.SSLSupport getSSLSupport(javax.net.ssl.SSLSession)"], ["org.apache.tomcat.util.net.SSLUtil", "org.apache.tomcat.util.net.jsse.JSSEImplementation.getSSLUtil(org.apache.tomcat.util.net.AbstractEndpoint<?>)", "public org.apache.tomcat.util.net.SSLUtil getSSLUtil(org.apache.tomcat.util.net.AbstractEndpoint<?>)"], ["org.apache.tomcat.util.net.jsse.JSSEKeyManager", "org.apache.tomcat.util.net.jsse.JSSEKeyManager(javax.net.ssl.X509KeyManager, java.lang.String)", "public org.apache.tomcat.util.net.jsse.JSSEKeyManager(javax.net.ssl.X509KeyManager, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)", "public java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)", "public java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)"], ["java.security.cert.X509Certificate[]", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.getCertificateChain(java.lang.String)", "public java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.getClientAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[])"], ["java.lang.String[]", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.getServerAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[])"], ["java.security.PrivateKey", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.getPrivateKey(java.lang.String)", "public java.security.PrivateKey getPrivateKey(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.chooseEngineClientAlias(java.lang.String[], java.security.Principal[], javax.net.ssl.SSLEngine)", "public java.lang.String chooseEngineClientAlias(java.lang.String[], java.security.Principal[], javax.net.ssl.SSLEngine)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.JSSEKeyManager.chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine)", "public java.lang.String chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine)"], ["org.apache.tomcat.util.net.jsse.JSSESocketFactory", "org.apache.tomcat.util.net.jsse.JSSESocketFactory(org.apache.tomcat.util.net.AbstractEndpoint<?>)", "public org.apache.tomcat.util.net.jsse.JSSESocketFactory(org.apache.tomcat.util.net.AbstractEndpoint<?>)"], ["java.net.ServerSocket", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.createSocket(int)", "public java.net.ServerSocket createSocket(int) throws java.io.IOException"], ["java.net.ServerSocket", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.createSocket(int, int)", "public java.net.ServerSocket createSocket(int, int) throws java.io.IOException"], ["java.net.ServerSocket", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.createSocket(int, int, java.net.InetAddress)", "public java.net.ServerSocket createSocket(int, int, java.net.InetAddress) throws java.io.IOException"], ["java.net.Socket", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.acceptSocket(java.net.ServerSocket)", "public java.net.Socket acceptSocket(java.net.ServerSocket) throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.handshake(java.net.Socket)", "public void handshake(java.net.Socket) throws java.io.IOException"], ["java.lang.String[]", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.getEnableableCiphers(javax.net.ssl.SSLContext)", "public java.lang.String[] getEnableableCiphers(javax.net.ssl.SSLContext)"], ["java.lang.String[]", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.getEnabledCiphers()", "public java.lang.String[] getEnabledCiphers()"], ["javax.net.ssl.SSLContext", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.createSSLContext()", "public javax.net.ssl.SSLContext createSSLContext() throws java.lang.Exception"], ["javax.net.ssl.KeyManager[]", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.getKeyManagers()", "public javax.net.ssl.KeyManager[] getKeyManagers() throws java.lang.Exception"], ["javax.net.ssl.TrustManager[]", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.getTrustManagers()", "public javax.net.ssl.TrustManager[] getTrustManagers() throws java.lang.Exception"], ["void", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.configureSessionContext(javax.net.ssl.SSLSessionContext)", "public void configureSessionContext(javax.net.ssl.SSLSessionContext)"], ["java.lang.String[]", "org.apache.tomcat.util.net.jsse.JSSESocketFactory.getEnableableProtocols(javax.net.ssl.SSLContext)", "public java.lang.String[] getEnableableProtocols(javax.net.ssl.SSLContext)"], ["void", "org.apache.tomcat.util.net.jsse.JSSESupport$Listener.handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)", "public void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.JSSESupport.getCipherSuite()", "public java.lang.String getCipherSuite() throws java.io.IOException"], ["java.lang.Object[]", "org.apache.tomcat.util.net.jsse.JSSESupport.getPeerCertificateChain()", "public java.lang.Object[] getPeerCertificateChain() throws java.io.IOException"], ["java.lang.Object[]", "org.apache.tomcat.util.net.jsse.JSSESupport.getPeerCertificateChain(boolean)", "public java.lang.Object[] getPeerCertificateChain(boolean) throws java.io.IOException"], ["java.lang.Integer", "org.apache.tomcat.util.net.jsse.JSSESupport.getKeySize()", "public java.lang.Integer getKeySize() throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.JSSESupport.getSessionId()", "public java.lang.String getSessionId() throws java.io.IOException"], ["void", "org.apache.tomcat.util.net.jsse.JSSESupport.invalidateSession()", "public void invalidateSession()"], ["org.apache.tomcat.util.net.jsse.NioX509KeyManager", "org.apache.tomcat.util.net.jsse.NioX509KeyManager(javax.net.ssl.X509KeyManager, java.lang.String)", "public org.apache.tomcat.util.net.jsse.NioX509KeyManager(javax.net.ssl.X509KeyManager, java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.NioX509KeyManager.chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)", "public java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.NioX509KeyManager.chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)", "public java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)"], ["java.security.cert.X509Certificate[]", "org.apache.tomcat.util.net.jsse.NioX509KeyManager.getCertificateChain(java.lang.String)", "public java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.net.jsse.NioX509KeyManager.getClientAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[])"], ["java.security.PrivateKey", "org.apache.tomcat.util.net.jsse.NioX509KeyManager.getPrivateKey(java.lang.String)", "public java.security.PrivateKey getPrivateKey(java.lang.String)"], ["java.lang.String[]", "org.apache.tomcat.util.net.jsse.NioX509KeyManager.getServerAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[])"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.NioX509KeyManager.chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine)", "public java.lang.String chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine)"], ["org.apache.tomcat.util.net.jsse.openssl.Authentication[]", "org.apache.tomcat.util.net.jsse.openssl.Authentication.values()", "public static org.apache.tomcat.util.net.jsse.openssl.Authentication[] values()"], ["org.apache.tomcat.util.net.jsse.openssl.Authentication", "org.apache.tomcat.util.net.jsse.openssl.Authentication.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.jsse.openssl.Authentication valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.jsse.openssl.Cipher[]", "org.apache.tomcat.util.net.jsse.openssl.Cipher.values()", "public static org.apache.tomcat.util.net.jsse.openssl.Cipher[] values()"], ["org.apache.tomcat.util.net.jsse.openssl.Cipher", "org.apache.tomcat.util.net.jsse.openssl.Cipher.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.jsse.openssl.Cipher valueOf(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getOpenSSLAlias()", "public java.lang.String getOpenSSLAlias()"], ["java.util.Set<java.lang.String>", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getJsseNames()", "public java.util.Set<java.lang.String> getJsseNames()"], ["org.apache.tomcat.util.net.jsse.openssl.KeyExchange", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getKx()", "public org.apache.tomcat.util.net.jsse.openssl.KeyExchange getKx()"], ["org.apache.tomcat.util.net.jsse.openssl.Authentication", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getAu()", "public org.apache.tomcat.util.net.jsse.openssl.Authentication getAu()"], ["org.apache.tomcat.util.net.jsse.openssl.Encryption", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getEnc()", "public org.apache.tomcat.util.net.jsse.openssl.Encryption getEnc()"], ["org.apache.tomcat.util.net.jsse.openssl.MessageDigest", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getMac()", "public org.apache.tomcat.util.net.jsse.openssl.MessageDigest getMac()"], ["org.apache.tomcat.util.net.jsse.openssl.Protocol", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getProtocol()", "public org.apache.tomcat.util.net.jsse.openssl.Protocol getProtocol()"], ["boolean", "org.apache.tomcat.util.net.jsse.openssl.Cipher.isExport()", "public boolean isExport()"], ["org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getLevel()", "public org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel getLevel()"], ["boolean", "org.apache.tomcat.util.net.jsse.openssl.Cipher.isFipsCompatible()", "public boolean isFipsCompatible()"], ["int", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getStrength_bits()", "public int getStrength_bits()"], ["int", "org.apache.tomcat.util.net.jsse.openssl.Cipher.getAlg_bits()", "public int getAlg_bits()"], ["org.apache.tomcat.util.net.jsse.openssl.Encryption[]", "org.apache.tomcat.util.net.jsse.openssl.Encryption.values()", "public static org.apache.tomcat.util.net.jsse.openssl.Encryption[] values()"], ["org.apache.tomcat.util.net.jsse.openssl.Encryption", "org.apache.tomcat.util.net.jsse.openssl.Encryption.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.jsse.openssl.Encryption valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel[]", "org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel.values()", "public static org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel[] values()"], ["org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel", "org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.jsse.openssl.EncryptionLevel valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.jsse.openssl.KeyExchange[]", "org.apache.tomcat.util.net.jsse.openssl.KeyExchange.values()", "public static org.apache.tomcat.util.net.jsse.openssl.KeyExchange[] values()"], ["org.apache.tomcat.util.net.jsse.openssl.KeyExchange", "org.apache.tomcat.util.net.jsse.openssl.KeyExchange.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.jsse.openssl.KeyExchange valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.jsse.openssl.MessageDigest[]", "org.apache.tomcat.util.net.jsse.openssl.MessageDigest.values()", "public static org.apache.tomcat.util.net.jsse.openssl.MessageDigest[] values()"], ["org.apache.tomcat.util.net.jsse.openssl.MessageDigest", "org.apache.tomcat.util.net.jsse.openssl.MessageDigest.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.jsse.openssl.MessageDigest valueOf(java.lang.String)"], ["org.apache.tomcat.util.net.jsse.openssl.OpenSSLCipherConfigurationParser", "org.apache.tomcat.util.net.jsse.openssl.OpenSSLCipherConfigurationParser()", "public org.apache.tomcat.util.net.jsse.openssl.OpenSSLCipherConfigurationParser()"], ["java.util.List<java.lang.String>", "org.apache.tomcat.util.net.jsse.openssl.OpenSSLCipherConfigurationParser.parseExpression(java.lang.String)", "public static java.util.List<java.lang.String> parseExpression(java.lang.String)"], ["org.apache.tomcat.util.net.jsse.openssl.Protocol[]", "org.apache.tomcat.util.net.jsse.openssl.Protocol.values()", "public static org.apache.tomcat.util.net.jsse.openssl.Protocol[] values()"], ["org.apache.tomcat.util.net.jsse.openssl.Protocol", "org.apache.tomcat.util.net.jsse.openssl.Protocol.valueOf(java.lang.String)", "public static org.apache.tomcat.util.net.jsse.openssl.Protocol valueOf(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.res.StringManager.getString(java.lang.String)", "public java.lang.String getString(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.res.StringManager.getString(java.lang.String, java.lang.Object...)", "public java.lang.String getString(java.lang.String, java.lang.Object...)"], ["java.util.Locale", "org.apache.tomcat.util.res.StringManager.getLocale()", "public java.util.Locale getLocale()"], ["synchronized", "org.apache.tomcat.util.res.StringManager.org.apache.tomcat.util.res.StringManager getManager(java.lang.String)", "public static final synchronized org.apache.tomcat.util.res.StringManager getManager(java.lang.String)"], ["synchronized", "org.apache.tomcat.util.res.StringManager.org.apache.tomcat.util.res.StringManager getManager(java.lang.String, java.util.Locale)", "public static final synchronized org.apache.tomcat.util.res.StringManager getManager(java.lang.String, java.util.Locale)"], ["org.apache.tomcat.util.res.StringManager", "org.apache.tomcat.util.res.StringManager.getManager(java.lang.String, java.util.Enumeration<java.util.Locale>)", "public static org.apache.tomcat.util.res.StringManager getManager(java.lang.String, java.util.Enumeration<java.util.Locale>)"], ["org.apache.tomcat.util.scan.Constants", "org.apache.tomcat.util.scan.Constants()", "public org.apache.tomcat.util.scan.Constants()"], ["org.apache.tomcat.util.scan.Jar", "org.apache.tomcat.util.scan.JarFactory.newInstance(java.net.URL)", "public static org.apache.tomcat.util.scan.Jar newInstance(java.net.URL) throws java.io.IOException"], ["java.net.URL", "org.apache.tomcat.util.scan.JarFactory.getJarEntryURL(java.net.URL, java.lang.String)", "public static java.net.URL getJarEntryURL(java.net.URL, java.lang.String) throws java.net.MalformedURLException"], ["org.apache.tomcat.util.scan.JarFileUrlJar", "org.apache.tomcat.util.scan.JarFileUrlJar(java.net.URL, boolean)", "public org.apache.tomcat.util.scan.JarFileUrlJar(java.net.URL, boolean) throws java.io.IOException"], ["java.net.URL", "org.apache.tomcat.util.scan.JarFileUrlJar.getJarFileURL()", "public java.net.URL getJarFileURL()"], ["boolean", "org.apache.tomcat.util.scan.JarFileUrlJar.entryExists(java.lang.String)", "public boolean entryExists(java.lang.String)"], ["java.io.InputStream", "org.apache.tomcat.util.scan.JarFileUrlJar.getInputStream(java.lang.String)", "public java.io.InputStream getInputStream(java.lang.String) throws java.io.IOException"], ["long", "org.apache.tomcat.util.scan.JarFileUrlJar.getLastModified(java.lang.String)", "public long getLastModified(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.scan.JarFileUrlJar.getURL(java.lang.String)", "public java.lang.String getURL(java.lang.String)"], ["void", "org.apache.tomcat.util.scan.JarFileUrlJar.close()", "public void close()"], ["void", "org.apache.tomcat.util.scan.JarFileUrlJar.nextEntry()", "public void nextEntry()"], ["java.lang.String", "org.apache.tomcat.util.scan.JarFileUrlJar.getEntryName()", "public java.lang.String getEntryName()"], ["java.io.InputStream", "org.apache.tomcat.util.scan.JarFileUrlJar.getEntryInputStream()", "public java.io.InputStream getEntryInputStream() throws java.io.IOException"], ["void", "org.apache.tomcat.util.scan.JarFileUrlJar.reset()", "public void reset() throws java.io.IOException"], ["org.apache.tomcat.util.scan.JarFileUrlNestedJar", "org.apache.tomcat.util.scan.JarFileUrlNestedJar(java.net.URL)", "public org.apache.tomcat.util.scan.JarFileUrlNestedJar(java.net.URL) throws java.io.IOException"], ["java.net.URL", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.getJarFileURL()", "public java.net.URL getJarFileURL()"], ["boolean", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.entryExists(java.lang.String)", "public boolean entryExists(java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.getInputStream(java.lang.String)", "public java.io.InputStream getInputStream(java.lang.String) throws java.io.IOException"], ["long", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.getLastModified(java.lang.String)", "public long getLastModified(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.getURL(java.lang.String)", "public java.lang.String getURL(java.lang.String)"], ["void", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.close()", "public void close()"], ["void", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.nextEntry()", "public void nextEntry()"], ["java.lang.String", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.getEntryName()", "public java.lang.String getEntryName()"], ["java.io.InputStream", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.getEntryInputStream()", "public java.io.InputStream getEntryInputStream() throws java.io.IOException"], ["void", "org.apache.tomcat.util.scan.JarFileUrlNestedJar.reset()", "public void reset() throws java.io.IOException"], ["org.apache.tomcat.util.scan.NonClosingJarInputStream", "org.apache.tomcat.util.scan.NonClosingJarInputStream(java.io.InputStream, boolean)", "public org.apache.tomcat.util.scan.NonClosingJarInputStream(java.io.InputStream, boolean) throws java.io.IOException"], ["org.apache.tomcat.util.scan.NonClosingJarInputStream", "org.apache.tomcat.util.scan.NonClosingJarInputStream(java.io.InputStream)", "public org.apache.tomcat.util.scan.NonClosingJarInputStream(java.io.InputStream) throws java.io.IOException"], ["void", "org.apache.tomcat.util.scan.NonClosingJarInputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.tomcat.util.scan.NonClosingJarInputStream.reallyClose()", "public void reallyClose() throws java.io.IOException"], ["org.apache.tomcat.util.scan.StandardJarScanFilter", "org.apache.tomcat.util.scan.StandardJarScanFilter()", "public org.apache.tomcat.util.scan.StandardJarScanFilter()"], ["java.lang.String", "org.apache.tomcat.util.scan.StandardJarScanFilter.getTldSkip()", "public java.lang.String getTldSkip()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanFilter.setTldSkip(java.lang.String)", "public void setTldSkip(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.scan.StandardJarScanFilter.getTldScan()", "public java.lang.String getTldScan()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanFilter.setTldScan(java.lang.String)", "public void setTldScan(java.lang.String)"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanFilter.isDefaultTldScan()", "public boolean isDefaultTldScan()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanFilter.setDefaultTldScan(boolean)", "public void setDefaultTldScan(boolean)"], ["java.lang.String", "org.apache.tomcat.util.scan.StandardJarScanFilter.getPluggabilitySkip()", "public java.lang.String getPluggabilitySkip()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanFilter.setPluggabilitySkip(java.lang.String)", "public void setPluggabilitySkip(java.lang.String)"], ["java.lang.String", "org.apache.tomcat.util.scan.StandardJarScanFilter.getPluggabilityScan()", "public java.lang.String getPluggabilityScan()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanFilter.setPluggabilityScan(java.lang.String)", "public void setPluggabilityScan(java.lang.String)"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanFilter.isDefaultPluggabilityScan()", "public boolean isDefaultPluggabilityScan()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanFilter.setDefaultPluggabilityScan(boolean)", "public void setDefaultPluggabilityScan(boolean)"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanFilter.check(org.apache.tomcat.JarScanType, java.lang.String)", "public boolean check(org.apache.tomcat.JarScanType, java.lang.String)"], ["org.apache.tomcat.util.scan.StandardJarScanner$ClassPathEntry", "org.apache.tomcat.util.scan.StandardJarScanner$ClassPathEntry(java.net.URL)", "public org.apache.tomcat.util.scan.StandardJarScanner$ClassPathEntry(java.net.URL)"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanner$ClassPathEntry.isJar()", "public boolean isJar()"], ["java.lang.String", "org.apache.tomcat.util.scan.StandardJarScanner$ClassPathEntry.getName()", "public java.lang.String getName()"], ["org.apache.tomcat.util.scan.StandardJarScanner", "org.apache.tomcat.util.scan.StandardJarScanner()", "public org.apache.tomcat.util.scan.StandardJarScanner()"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanner.isScanClassPath()", "public boolean isScanClassPath()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanner.setScanClassPath(boolean)", "public void setScanClassPath(boolean)"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanner.isScanAllFiles()", "public boolean isScanAllFiles()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanner.setScanAllFiles(boolean)", "public void setScanAllFiles(boolean)"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanner.isScanAllDirectories()", "public boolean isScanAllDirectories()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanner.setScanAllDirectories(boolean)", "public void setScanAllDirectories(boolean)"], ["boolean", "org.apache.tomcat.util.scan.StandardJarScanner.isScanBootstrapClassPath()", "public boolean isScanBootstrapClassPath()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanner.setScanBootstrapClassPath(boolean)", "public void setScanBootstrapClassPath(boolean)"], ["org.apache.tomcat.JarScanFilter", "org.apache.tomcat.util.scan.StandardJarScanner.getJarScanFilter()", "public org.apache.tomcat.JarScanFilter getJarScanFilter()"], ["void", "org.apache.tomcat.util.scan.StandardJarScanner.setJarScanFilter(org.apache.tomcat.JarScanFilter)", "public void setJarScanFilter(org.apache.tomcat.JarScanFilter)"], ["void", "org.apache.tomcat.util.scan.StandardJarScanner.scan(org.apache.tomcat.JarScanType, javax.servlet.ServletContext, org.apache.tomcat.JarScannerCallback)", "public void scan(org.apache.tomcat.JarScanType, javax.servlet.ServletContext, org.apache.tomcat.JarScannerCallback)"], ["org.apache.tomcat.util.scan.UrlJar", "org.apache.tomcat.util.scan.UrlJar(java.net.URL)", "public org.apache.tomcat.util.scan.UrlJar(java.net.URL) throws java.io.IOException"], ["java.net.URL", "org.apache.tomcat.util.scan.UrlJar.getJarFileURL()", "public java.net.URL getJarFileURL()"], ["boolean", "org.apache.tomcat.util.scan.UrlJar.entryExists(java.lang.String)", "public boolean entryExists(java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.apache.tomcat.util.scan.UrlJar.getInputStream(java.lang.String)", "public java.io.InputStream getInputStream(java.lang.String) throws java.io.IOException"], ["long", "org.apache.tomcat.util.scan.UrlJar.getLastModified(java.lang.String)", "public long getLastModified(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.tomcat.util.scan.UrlJar.getURL(java.lang.String)", "public java.lang.String getURL(java.lang.String)"], ["void", "org.apache.tomcat.util.scan.UrlJar.close()", "public void close()"], ["void", "org.apache.tomcat.util.scan.UrlJar.nextEntry()", "public void nextEntry()"], ["java.lang.String", "org.apache.tomcat.util.scan.UrlJar.getEntryName()", "public java.lang.String getEntryName()"], ["java.io.InputStream", "org.apache.tomcat.util.scan.UrlJar.getEntryInputStream()", "public java.io.InputStream getEntryInputStream() throws java.io.IOException"], ["void", "org.apache.tomcat.util.scan.UrlJar.reset()", "public void reset() throws java.io.IOException"], ["byte[]", "org.apache.tomcat.util.security.ConcurrentMessageDigest.digestMD5(byte[]...)", "public static byte[] digestMD5(byte[]...)"], ["byte[]", "org.apache.tomcat.util.security.ConcurrentMessageDigest.digestSHA1(byte[]...)", "public static byte[] digestSHA1(byte[]...)"], ["byte[]", "org.apache.tomcat.util.security.ConcurrentMessageDigest.digest(java.lang.String, byte[]...)", "public static byte[] digest(java.lang.String, byte[]...)"], ["void", "org.apache.tomcat.util.security.ConcurrentMessageDigest.init(java.lang.String)", "public static void init(java.lang.String) throws java.security.NoSuchAlgorithmException"], ["java.lang.String", "org.apache.tomcat.util.security.MD5Encoder.encode(byte[])", "public static java.lang.String encode(byte[])"], ["org.apache.tomcat.util.security.PrivilegedGetTccl", "org.apache.tomcat.util.security.PrivilegedGetTccl()", "public org.apache.tomcat.util.security.PrivilegedGetTccl()"], ["java.lang.ClassLoader", "org.apache.tomcat.util.security.PrivilegedGetTccl.run()", "public java.lang.ClassLoader run()"], ["java.lang.Object", "org.apache.tomcat.util.security.PrivilegedGetTccl.run()", "public java.lang.Object run()"], ["org.apache.tomcat.util.security.PrivilegedSetTccl", "org.apache.tomcat.util.security.PrivilegedSetTccl(java.lang.ClassLoader)", "public org.apache.tomcat.util.security.PrivilegedSetTccl(java.lang.ClassLoader)"], ["java.lang.Void", "org.apache.tomcat.util.security.PrivilegedSetTccl.run()", "public java.lang.Void run()"], ["java.lang.Object", "org.apache.tomcat.util.security.PrivilegedSetTccl.run()", "public java.lang.Object run()"], ["org.apache.tomcat.util.threads.Constants", "org.apache.tomcat.util.threads.Constants()", "public org.apache.tomcat.util.threads.Constants()"], ["org.apache.tomcat.util.threads.LimitLatch$Sync", "org.apache.tomcat.util.threads.LimitLatch$Sync(org.apache.tomcat.util.threads.LimitLatch)", "public org.apache.tomcat.util.threads.LimitLatch$Sync(org.apache.tomcat.util.threads.LimitLatch)"], ["org.apache.tomcat.util.threads.LimitLatch", "org.apache.tomcat.util.threads.LimitLatch(long)", "public org.apache.tomcat.util.threads.LimitLatch(long)"], ["long", "org.apache.tomcat.util.threads.LimitLatch.getCount()", "public long getCount()"], ["long", "org.apache.tomcat.util.threads.LimitLatch.getLimit()", "public long getLimit()"], ["void", "org.apache.tomcat.util.threads.LimitLatch.setLimit(long)", "public void setLimit(long)"], ["void", "org.apache.tomcat.util.threads.LimitLatch.countUpOrAwait()", "public void countUpOrAwait() throws java.lang.InterruptedException"], ["long", "org.apache.tomcat.util.threads.LimitLatch.countDown()", "public long countDown()"], ["boolean", "org.apache.tomcat.util.threads.LimitLatch.releaseAll()", "public boolean releaseAll()"], ["void", "org.apache.tomcat.util.threads.LimitLatch.reset()", "public void reset()"], ["boolean", "org.apache.tomcat.util.threads.LimitLatch.hasQueuedThreads()", "public boolean hasQueuedThreads()"], ["java.util.Collection<java.lang.Thread>", "org.apache.tomcat.util.threads.LimitLatch.getQueuedThreads()", "public java.util.Collection<java.lang.Thread> getQueuedThreads()"], ["org.apache.tomcat.util.threads.StopPooledThreadException", "org.apache.tomcat.util.threads.StopPooledThreadException(java.lang.String)", "public org.apache.tomcat.util.threads.StopPooledThreadException(java.lang.String)"], ["org.apache.tomcat.util.threads.TaskQueue", "org.apache.tomcat.util.threads.TaskQueue()", "public org.apache.tomcat.util.threads.TaskQueue()"], ["org.apache.tomcat.util.threads.TaskQueue", "org.apache.tomcat.util.threads.TaskQueue(int)", "public org.apache.tomcat.util.threads.TaskQueue(int)"], ["org.apache.tomcat.util.threads.TaskQueue", "org.apache.tomcat.util.threads.TaskQueue(java.util.Collection<? extends java.lang.Runnable>)", "public org.apache.tomcat.util.threads.TaskQueue(java.util.Collection<? extends java.lang.Runnable>)"], ["void", "org.apache.tomcat.util.threads.TaskQueue.setParent(org.apache.tomcat.util.threads.ThreadPoolExecutor)", "public void setParent(org.apache.tomcat.util.threads.ThreadPoolExecutor)"], ["boolean", "org.apache.tomcat.util.threads.TaskQueue.force(java.lang.Runnable)", "public boolean force(java.lang.Runnable)"], ["boolean", "org.apache.tomcat.util.threads.TaskQueue.force(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public boolean force(java.lang.Runnable, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.apache.tomcat.util.threads.TaskQueue.offer(java.lang.Runnable)", "public boolean offer(java.lang.Runnable)"], ["java.lang.Runnable", "org.apache.tomcat.util.threads.TaskQueue.poll(long, java.util.concurrent.TimeUnit)", "public java.lang.Runnable poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["java.lang.Runnable", "org.apache.tomcat.util.threads.TaskQueue.take()", "public java.lang.Runnable take() throws java.lang.InterruptedException"], ["int", "org.apache.tomcat.util.threads.TaskQueue.remainingCapacity()", "public int remainingCapacity()"], ["void", "org.apache.tomcat.util.threads.TaskQueue.setForcedRemainingCapacity(java.lang.Integer)", "public void setForcedRemainingCapacity(java.lang.Integer)"], ["java.lang.Object", "org.apache.tomcat.util.threads.TaskQueue.poll(long, java.util.concurrent.TimeUnit)", "public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["java.lang.Object", "org.apache.tomcat.util.threads.TaskQueue.take()", "public java.lang.Object take() throws java.lang.InterruptedException"], ["boolean", "org.apache.tomcat.util.threads.TaskQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["void", "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run()", "public void run()"], ["org.apache.tomcat.util.threads.TaskThread", "org.apache.tomcat.util.threads.TaskThread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)", "public org.apache.tomcat.util.threads.TaskThread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)"], ["org.apache.tomcat.util.threads.TaskThread", "org.apache.tomcat.util.threads.TaskThread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)", "public org.apache.tomcat.util.threads.TaskThread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)"], ["long", "org.apache.tomcat.util.threads.TaskThread.getCreationTime()", "public final long getCreationTime()"], ["org.apache.tomcat.util.threads.TaskThreadFactory", "org.apache.tomcat.util.threads.TaskThreadFactory(java.lang.String, boolean, int)", "public org.apache.tomcat.util.threads.TaskThreadFactory(java.lang.String, boolean, int)"], ["java.lang.Thread", "org.apache.tomcat.util.threads.TaskThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["void", "org.apache.tomcat.util.threads.ThreadPoolExecutor$RejectHandler.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)", "public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)"], ["org.apache.tomcat.util.threads.ThreadPoolExecutor", "org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.RejectedExecutionHandler)", "public org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.RejectedExecutionHandler)"], ["org.apache.tomcat.util.threads.ThreadPoolExecutor", "org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)", "public org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)"], ["org.apache.tomcat.util.threads.ThreadPoolExecutor", "org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory)", "public org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>, java.util.concurrent.ThreadFactory)"], ["org.apache.tomcat.util.threads.ThreadPoolExecutor", "org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "public org.apache.tomcat.util.threads.ThreadPoolExecutor(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>)"], ["long", "org.apache.tomcat.util.threads.ThreadPoolExecutor.getThreadRenewalDelay()", "public long getThreadRenewalDelay()"], ["void", "org.apache.tomcat.util.threads.ThreadPoolExecutor.setThreadRenewalDelay(long)", "public void setThreadRenewalDelay(long)"], ["int", "org.apache.tomcat.util.threads.ThreadPoolExecutor.getSubmittedCount()", "public int getSubmittedCount()"], ["void", "org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public void execute(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.tomcat.util.threads.ThreadPoolExecutor.contextStopping()", "public void contextStopping()"]]}