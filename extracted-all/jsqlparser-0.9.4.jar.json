{"jsqlparser-0.9.4.jar": [["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.expression.Alias(java.lang.String)", "public net.sf.jsqlparser.expression.Alias(java.lang.String)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.expression.Alias(java.lang.String, boolean)", "public net.sf.jsqlparser.expression.Alias(java.lang.String, boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.Alias.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.Alias.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.Alias.isUseAs()", "public boolean isUseAs()"], ["void", "net.sf.jsqlparser.expression.Alias.setUseAs(boolean)", "public void setUseAs(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.Alias.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.AllComparisonExpression", "net.sf.jsqlparser.expression.AllComparisonExpression(net.sf.jsqlparser.statement.select.SubSelect)", "public net.sf.jsqlparser.expression.AllComparisonExpression(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.expression.AllComparisonExpression.getSubSelect()", "public net.sf.jsqlparser.statement.select.SubSelect getSubSelect()"], ["void", "net.sf.jsqlparser.expression.AllComparisonExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.AllComparisonExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.AnalyticExpression", "net.sf.jsqlparser.expression.AnalyticExpression()", "public net.sf.jsqlparser.expression.AnalyticExpression()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>", "net.sf.jsqlparser.expression.AnalyticExpression.getOrderByElements()", "public java.util.List<net.sf.jsqlparser.statement.select.OrderByElement> getOrderByElements()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.expression.AnalyticExpression.getKeep()", "public net.sf.jsqlparser.expression.KeepExpression getKeep()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setKeep(net.sf.jsqlparser.expression.KeepExpression)", "public void setKeep(net.sf.jsqlparser.expression.KeepExpression)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.AnalyticExpression.getPartitionExpressionList()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList getPartitionExpressionList()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setPartitionExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void setPartitionExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["java.lang.String", "net.sf.jsqlparser.expression.AnalyticExpression.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setName(java.lang.String)", "public void setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.AnalyticExpression.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setExpression(net.sf.jsqlparser.expression.Expression)", "public void setExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.AnalyticExpression.getOffset()", "public net.sf.jsqlparser.expression.Expression getOffset()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setOffset(net.sf.jsqlparser.expression.Expression)", "public void setOffset(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.AnalyticExpression.getDefaultValue()", "public net.sf.jsqlparser.expression.Expression getDefaultValue()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setDefaultValue(net.sf.jsqlparser.expression.Expression)", "public void setDefaultValue(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.WindowElement", "net.sf.jsqlparser.expression.AnalyticExpression.getWindowElement()", "public net.sf.jsqlparser.expression.WindowElement getWindowElement()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setWindowElement(net.sf.jsqlparser.expression.WindowElement)", "public void setWindowElement(net.sf.jsqlparser.expression.WindowElement)"], ["java.lang.String", "net.sf.jsqlparser.expression.AnalyticExpression.toString()", "public java.lang.String toString()"], ["boolean", "net.sf.jsqlparser.expression.AnalyticExpression.isAllColumns()", "public boolean isAllColumns()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setAllColumns(boolean)", "public void setAllColumns(boolean)"], ["net.sf.jsqlparser.expression.AnyComparisonExpression", "net.sf.jsqlparser.expression.AnyComparisonExpression(net.sf.jsqlparser.expression.AnyType, net.sf.jsqlparser.statement.select.SubSelect)", "public net.sf.jsqlparser.expression.AnyComparisonExpression(net.sf.jsqlparser.expression.AnyType, net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.expression.AnyComparisonExpression.getSubSelect()", "public net.sf.jsqlparser.statement.select.SubSelect getSubSelect()"], ["void", "net.sf.jsqlparser.expression.AnyComparisonExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.AnyType", "net.sf.jsqlparser.expression.AnyComparisonExpression.getAnyType()", "public net.sf.jsqlparser.expression.AnyType getAnyType()"], ["java.lang.String", "net.sf.jsqlparser.expression.AnyComparisonExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.AnyType[]", "net.sf.jsqlparser.expression.AnyType.values()", "public static net.sf.jsqlparser.expression.AnyType[] values()"], ["net.sf.jsqlparser.expression.AnyType", "net.sf.jsqlparser.expression.AnyType.valueOf(java.lang.String)", "public static net.sf.jsqlparser.expression.AnyType valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.BinaryExpression", "net.sf.jsqlparser.expression.BinaryExpression()", "public net.sf.jsqlparser.expression.BinaryExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.BinaryExpression.getLeftExpression()", "public net.sf.jsqlparser.expression.Expression getLeftExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.BinaryExpression.getRightExpression()", "public net.sf.jsqlparser.expression.Expression getRightExpression()"], ["void", "net.sf.jsqlparser.expression.BinaryExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)", "public void setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.BinaryExpression.setRightExpression(net.sf.jsqlparser.expression.Expression)", "public void setRightExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.BinaryExpression.setNot()", "public void setNot()"], ["boolean", "net.sf.jsqlparser.expression.BinaryExpression.isNot()", "public boolean isNot()"], ["java.lang.String", "net.sf.jsqlparser.expression.BinaryExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.CaseExpression", "net.sf.jsqlparser.expression.CaseExpression()", "public net.sf.jsqlparser.expression.CaseExpression()"], ["void", "net.sf.jsqlparser.expression.CaseExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.CaseExpression.getSwitchExpression()", "public net.sf.jsqlparser.expression.Expression getSwitchExpression()"], ["void", "net.sf.jsqlparser.expression.CaseExpression.setSwitchExpression(net.sf.jsqlparser.expression.Expression)", "public void setSwitchExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.CaseExpression.getElseExpression()", "public net.sf.jsqlparser.expression.Expression getElseExpression()"], ["void", "net.sf.jsqlparser.expression.CaseExpression.setElseExpression(net.sf.jsqlparser.expression.Expression)", "public void setElseExpression(net.sf.jsqlparser.expression.Expression)"], ["java.util.List<net.sf.jsqlparser.expression.Expression>", "net.sf.jsqlparser.expression.CaseExpression.getWhenClauses()", "public java.util.List<net.sf.jsqlparser.expression.Expression> getWhenClauses()"], ["void", "net.sf.jsqlparser.expression.CaseExpression.setWhenClauses(java.util.List<net.sf.jsqlparser.expression.Expression>)", "public void setWhenClauses(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["java.lang.String", "net.sf.jsqlparser.expression.CaseExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.CastExpression", "net.sf.jsqlparser.expression.CastExpression()", "public net.sf.jsqlparser.expression.CastExpression()"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.expression.CastExpression.getType()", "public net.sf.jsqlparser.statement.create.table.ColDataType getType()"], ["void", "net.sf.jsqlparser.expression.CastExpression.setType(net.sf.jsqlparser.statement.create.table.ColDataType)", "public void setType(net.sf.jsqlparser.statement.create.table.ColDataType)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.CastExpression.getLeftExpression()", "public net.sf.jsqlparser.expression.Expression getLeftExpression()"], ["void", "net.sf.jsqlparser.expression.CastExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)", "public void setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.CastExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["boolean", "net.sf.jsqlparser.expression.CastExpression.isUseCastKeyword()", "public boolean isUseCastKeyword()"], ["void", "net.sf.jsqlparser.expression.CastExpression.setUseCastKeyword(boolean)", "public void setUseCastKeyword(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.CastExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.DateValue", "net.sf.jsqlparser.expression.DateValue(java.lang.String)", "public net.sf.jsqlparser.expression.DateValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.DateValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.sql.Date", "net.sf.jsqlparser.expression.DateValue.getValue()", "public java.sql.Date getValue()"], ["void", "net.sf.jsqlparser.expression.DateValue.setValue(java.sql.Date)", "public void setValue(java.sql.Date)"], ["net.sf.jsqlparser.expression.DoubleValue", "net.sf.jsqlparser.expression.DoubleValue(java.lang.String)", "public net.sf.jsqlparser.expression.DoubleValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.DoubleValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["double", "net.sf.jsqlparser.expression.DoubleValue.getValue()", "public double getValue()"], ["void", "net.sf.jsqlparser.expression.DoubleValue.setValue(double)", "public void setValue(double)"], ["java.lang.String", "net.sf.jsqlparser.expression.DoubleValue.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.ExpressionVisitorAdapter", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter()", "public net.sf.jsqlparser.expression.ExpressionVisitorAdapter()"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.getSelectVisitor()", "public net.sf.jsqlparser.statement.select.SelectVisitor getSelectVisitor()"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)", "public void setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.NullValue)", "public void visit(net.sf.jsqlparser.expression.NullValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.Function)", "public void visit(net.sf.jsqlparser.expression.Function)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.SignedExpression)", "public void visit(net.sf.jsqlparser.expression.SignedExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.JdbcParameter)", "public void visit(net.sf.jsqlparser.expression.JdbcParameter)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.JdbcNamedParameter)", "public void visit(net.sf.jsqlparser.expression.JdbcNamedParameter)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.DoubleValue)", "public void visit(net.sf.jsqlparser.expression.DoubleValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.LongValue)", "public void visit(net.sf.jsqlparser.expression.LongValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.DateValue)", "public void visit(net.sf.jsqlparser.expression.DateValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.TimeValue)", "public void visit(net.sf.jsqlparser.expression.TimeValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.TimestampValue)", "public void visit(net.sf.jsqlparser.expression.TimestampValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.Parenthesis)", "public void visit(net.sf.jsqlparser.expression.Parenthesis)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.StringValue)", "public void visit(net.sf.jsqlparser.expression.StringValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)", "public void visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)", "public void visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.Between)", "public void visit(net.sf.jsqlparser.expression.operators.relational.Between)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)", "public void visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)", "public void visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)", "public void visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.InExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.InExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)", "public void visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.schema.Column)", "public void visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.CaseExpression)", "public void visit(net.sf.jsqlparser.expression.CaseExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.WhenClause)", "public void visit(net.sf.jsqlparser.expression.WhenClause)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.AllComparisonExpression)", "public void visit(net.sf.jsqlparser.expression.AllComparisonExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.AnyComparisonExpression)", "public void visit(net.sf.jsqlparser.expression.AnyComparisonExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.Matches)", "public void visit(net.sf.jsqlparser.expression.operators.relational.Matches)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.CastExpression)", "public void visit(net.sf.jsqlparser.expression.CastExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.AnalyticExpression)", "public void visit(net.sf.jsqlparser.expression.AnalyticExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.ExtractExpression)", "public void visit(net.sf.jsqlparser.expression.ExtractExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.IntervalExpression)", "public void visit(net.sf.jsqlparser.expression.IntervalExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)", "public void visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)", "public void visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.JsonExpression)", "public void visit(net.sf.jsqlparser.expression.JsonExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)", "public void visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.WithinGroupExpression)", "public void visit(net.sf.jsqlparser.expression.WithinGroupExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.UserVariable)", "public void visit(net.sf.jsqlparser.expression.UserVariable)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.NumericBind)", "public void visit(net.sf.jsqlparser.expression.NumericBind)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.KeepExpression)", "public void visit(net.sf.jsqlparser.expression.KeepExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.MySQLGroupConcat)", "public void visit(net.sf.jsqlparser.expression.MySQLGroupConcat)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.Pivot)", "public void visit(net.sf.jsqlparser.statement.select.Pivot)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.PivotXml)", "public void visit(net.sf.jsqlparser.statement.select.PivotXml)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllTableColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)", "public void visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.RowConstructor)", "public void visit(net.sf.jsqlparser.expression.RowConstructor)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.HexValue)", "public void visit(net.sf.jsqlparser.expression.HexValue)"], ["net.sf.jsqlparser.expression.ExtractExpression", "net.sf.jsqlparser.expression.ExtractExpression()", "public net.sf.jsqlparser.expression.ExtractExpression()"], ["void", "net.sf.jsqlparser.expression.ExtractExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.ExtractExpression.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.ExtractExpression.setName(java.lang.String)", "public void setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.ExtractExpression.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.expression.ExtractExpression.setExpression(net.sf.jsqlparser.expression.Expression)", "public void setExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.expression.ExtractExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.Function", "net.sf.jsqlparser.expression.Function()", "public net.sf.jsqlparser.expression.Function()"], ["void", "net.sf.jsqlparser.expression.Function.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.Function.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.Function.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.Function.isAllColumns()", "public boolean isAllColumns()"], ["void", "net.sf.jsqlparser.expression.Function.setAllColumns(boolean)", "public void setAllColumns(boolean)"], ["boolean", "net.sf.jsqlparser.expression.Function.isDistinct()", "public boolean isDistinct()"], ["void", "net.sf.jsqlparser.expression.Function.setDistinct(boolean)", "public void setDistinct(boolean)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.Function.getParameters()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList getParameters()"], ["void", "net.sf.jsqlparser.expression.Function.setParameters(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void setParameters(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["boolean", "net.sf.jsqlparser.expression.Function.isEscaped()", "public boolean isEscaped()"], ["void", "net.sf.jsqlparser.expression.Function.setEscaped(boolean)", "public void setEscaped(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.Function.getAttribute()", "public java.lang.String getAttribute()"], ["void", "net.sf.jsqlparser.expression.Function.setAttribute(java.lang.String)", "public void setAttribute(java.lang.String)"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.expression.Function.getKeep()", "public net.sf.jsqlparser.expression.KeepExpression getKeep()"], ["void", "net.sf.jsqlparser.expression.Function.setKeep(net.sf.jsqlparser.expression.KeepExpression)", "public void setKeep(net.sf.jsqlparser.expression.KeepExpression)"], ["java.lang.String", "net.sf.jsqlparser.expression.Function.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.HexValue", "net.sf.jsqlparser.expression.HexValue(java.lang.String)", "public net.sf.jsqlparser.expression.HexValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.HexValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.HexValue.getValue()", "public java.lang.String getValue()"], ["void", "net.sf.jsqlparser.expression.HexValue.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.HexValue.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.IntervalExpression", "net.sf.jsqlparser.expression.IntervalExpression()", "public net.sf.jsqlparser.expression.IntervalExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.IntervalExpression.getParameter()", "public java.lang.String getParameter()"], ["void", "net.sf.jsqlparser.expression.IntervalExpression.setParameter(java.lang.String)", "public void setParameter(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.IntervalExpression.getIntervalType()", "public java.lang.String getIntervalType()"], ["void", "net.sf.jsqlparser.expression.IntervalExpression.setIntervalType(java.lang.String)", "public void setIntervalType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.IntervalExpression.toString()", "public java.lang.String toString()"], ["void", "net.sf.jsqlparser.expression.IntervalExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.JdbcNamedParameter", "net.sf.jsqlparser.expression.JdbcNamedParameter()", "public net.sf.jsqlparser.expression.JdbcNamedParameter()"], ["java.lang.String", "net.sf.jsqlparser.expression.JdbcNamedParameter.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.JdbcNamedParameter.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.JdbcNamedParameter.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.JdbcNamedParameter.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.JdbcParameter", "net.sf.jsqlparser.expression.JdbcParameter()", "public net.sf.jsqlparser.expression.JdbcParameter()"], ["java.lang.Integer", "net.sf.jsqlparser.expression.JdbcParameter.getIndex()", "public java.lang.Integer getIndex()"], ["void", "net.sf.jsqlparser.expression.JdbcParameter.setIndex(java.lang.Integer)", "public void setIndex(java.lang.Integer)"], ["void", "net.sf.jsqlparser.expression.JdbcParameter.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.JdbcParameter.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.JsonExpression", "net.sf.jsqlparser.expression.JsonExpression()", "public net.sf.jsqlparser.expression.JsonExpression()"], ["void", "net.sf.jsqlparser.expression.JsonExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.expression.JsonExpression.getColumn()", "public net.sf.jsqlparser.schema.Column getColumn()"], ["void", "net.sf.jsqlparser.expression.JsonExpression.setColumn(net.sf.jsqlparser.schema.Column)", "public void setColumn(net.sf.jsqlparser.schema.Column)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.expression.JsonExpression.getIdents()", "public java.util.List<java.lang.String> getIdents()"], ["void", "net.sf.jsqlparser.expression.JsonExpression.setIdents(java.util.List<java.lang.String>)", "public void setIdents(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.expression.JsonExpression.addIdent(java.lang.String)", "public void addIdent(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.JsonExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.expression.KeepExpression()", "public net.sf.jsqlparser.expression.KeepExpression()"], ["void", "net.sf.jsqlparser.expression.KeepExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>", "net.sf.jsqlparser.expression.KeepExpression.getOrderByElements()", "public java.util.List<net.sf.jsqlparser.statement.select.OrderByElement> getOrderByElements()"], ["void", "net.sf.jsqlparser.expression.KeepExpression.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.expression.KeepExpression.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.KeepExpression.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.KeepExpression.isFirst()", "public boolean isFirst()"], ["void", "net.sf.jsqlparser.expression.KeepExpression.setFirst(boolean)", "public void setFirst(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.KeepExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.LongValue", "net.sf.jsqlparser.expression.LongValue(java.lang.String)", "public net.sf.jsqlparser.expression.LongValue(java.lang.String)"], ["net.sf.jsqlparser.expression.LongValue", "net.sf.jsqlparser.expression.LongValue(long)", "public net.sf.jsqlparser.expression.LongValue(long)"], ["void", "net.sf.jsqlparser.expression.LongValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["long", "net.sf.jsqlparser.expression.LongValue.getValue()", "public long getValue()"], ["void", "net.sf.jsqlparser.expression.LongValue.setValue(long)", "public void setValue(long)"], ["java.lang.String", "net.sf.jsqlparser.expression.LongValue.getStringValue()", "public java.lang.String getStringValue()"], ["void", "net.sf.jsqlparser.expression.LongValue.setStringValue(java.lang.String)", "public void setStringValue(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.LongValue.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.MySQLGroupConcat", "net.sf.jsqlparser.expression.MySQLGroupConcat()", "public net.sf.jsqlparser.expression.MySQLGroupConcat()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.MySQLGroupConcat.getExpressionList()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList getExpressionList()"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void setExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["boolean", "net.sf.jsqlparser.expression.MySQLGroupConcat.isDistinct()", "public boolean isDistinct()"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setDistinct(boolean)", "public void setDistinct(boolean)"], ["java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>", "net.sf.jsqlparser.expression.MySQLGroupConcat.getOrderByElements()", "public java.util.List<net.sf.jsqlparser.statement.select.OrderByElement> getOrderByElements()"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.expression.MySQLGroupConcat.getSeparator()", "public java.lang.String getSeparator()"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setSeparator(java.lang.String)", "public void setSeparator(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.MySQLGroupConcat.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.NullValue", "net.sf.jsqlparser.expression.NullValue()", "public net.sf.jsqlparser.expression.NullValue()"], ["void", "net.sf.jsqlparser.expression.NullValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.NullValue.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.NumericBind", "net.sf.jsqlparser.expression.NumericBind()", "public net.sf.jsqlparser.expression.NumericBind()"], ["int", "net.sf.jsqlparser.expression.NumericBind.getBindId()", "public int getBindId()"], ["void", "net.sf.jsqlparser.expression.NumericBind.setBindId(int)", "public void setBindId(int)"], ["void", "net.sf.jsqlparser.expression.NumericBind.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.NumericBind.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Addition", "net.sf.jsqlparser.expression.operators.arithmetic.Addition()", "public net.sf.jsqlparser.expression.operators.arithmetic.Addition()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Addition.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Addition.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd()", "public net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr()", "public net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor()", "public net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Concat", "net.sf.jsqlparser.expression.operators.arithmetic.Concat()", "public net.sf.jsqlparser.expression.operators.arithmetic.Concat()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Concat.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Concat.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Division", "net.sf.jsqlparser.expression.operators.arithmetic.Division()", "public net.sf.jsqlparser.expression.operators.arithmetic.Division()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Division.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Division.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Modulo", "net.sf.jsqlparser.expression.operators.arithmetic.Modulo()", "public net.sf.jsqlparser.expression.operators.arithmetic.Modulo()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Modulo.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Modulo.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Multiplication", "net.sf.jsqlparser.expression.operators.arithmetic.Multiplication()", "public net.sf.jsqlparser.expression.operators.arithmetic.Multiplication()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Multiplication.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Multiplication.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Subtraction", "net.sf.jsqlparser.expression.operators.arithmetic.Subtraction()", "public net.sf.jsqlparser.expression.operators.arithmetic.Subtraction()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Subtraction.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Subtraction.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.conditional.AndExpression", "net.sf.jsqlparser.expression.operators.conditional.AndExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.Expression)", "public net.sf.jsqlparser.expression.operators.conditional.AndExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.conditional.AndExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.conditional.AndExpression.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.conditional.OrExpression", "net.sf.jsqlparser.expression.operators.conditional.OrExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.Expression)", "public net.sf.jsqlparser.expression.operators.conditional.OrExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.conditional.OrExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.conditional.OrExpression.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.Between", "net.sf.jsqlparser.expression.operators.relational.Between()", "public net.sf.jsqlparser.expression.operators.relational.Between()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.Between.getBetweenExpressionEnd()", "public net.sf.jsqlparser.expression.Expression getBetweenExpressionEnd()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.Between.getBetweenExpressionStart()", "public net.sf.jsqlparser.expression.Expression getBetweenExpressionStart()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.Between.getLeftExpression()", "public net.sf.jsqlparser.expression.Expression getLeftExpression()"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.Between.isNot()", "public boolean isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setBetweenExpressionEnd(net.sf.jsqlparser.expression.Expression)", "public void setBetweenExpressionEnd(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setBetweenExpressionStart(net.sf.jsqlparser.expression.Expression)", "public void setBetweenExpressionStart(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setLeftExpression(net.sf.jsqlparser.expression.Expression)", "public void setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setNot(boolean)", "public void setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.Between.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.operators.relational.EqualsTo", "net.sf.jsqlparser.expression.operators.relational.EqualsTo()", "public net.sf.jsqlparser.expression.operators.relational.EqualsTo()"], ["void", "net.sf.jsqlparser.expression.operators.relational.EqualsTo.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.EqualsTo.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.ExistsExpression", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression()", "public net.sf.jsqlparser.expression.operators.relational.ExistsExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.getRightExpression()", "public net.sf.jsqlparser.expression.Expression getRightExpression()"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.setRightExpression(net.sf.jsqlparser.expression.Expression)", "public void setRightExpression(net.sf.jsqlparser.expression.Expression)"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.isNot()", "public boolean isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.setNot(boolean)", "public void setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.getStringExpression()", "public java.lang.String getStringExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.operators.relational.ExpressionList()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.operators.relational.ExpressionList(java.util.List<net.sf.jsqlparser.expression.Expression>)", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["java.util.List<net.sf.jsqlparser.expression.Expression>", "net.sf.jsqlparser.expression.operators.relational.ExpressionList.getExpressions()", "public java.util.List<net.sf.jsqlparser.expression.Expression> getExpressions()"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExpressionList.setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)", "public void setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExpressionList.accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)", "public void accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.ExpressionList.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.operators.relational.GreaterThan", "net.sf.jsqlparser.expression.operators.relational.GreaterThan()", "public net.sf.jsqlparser.expression.operators.relational.GreaterThan()"], ["void", "net.sf.jsqlparser.expression.operators.relational.GreaterThan.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.GreaterThan.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals", "net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals()", "public net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals()"], ["void", "net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.InExpression", "net.sf.jsqlparser.expression.operators.relational.InExpression()", "public net.sf.jsqlparser.expression.operators.relational.InExpression()"], ["net.sf.jsqlparser.expression.operators.relational.InExpression", "net.sf.jsqlparser.expression.operators.relational.InExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.operators.relational.ItemsList)", "public net.sf.jsqlparser.expression.operators.relational.InExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setOldOracleJoinSyntax(int)", "public void setOldOracleJoinSyntax(int)"], ["int", "net.sf.jsqlparser.expression.operators.relational.InExpression.getOldOracleJoinSyntax()", "public int getOldOracleJoinSyntax()"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.expression.operators.relational.InExpression.getRightItemsList()", "public net.sf.jsqlparser.expression.operators.relational.ItemsList getRightItemsList()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.InExpression.getLeftExpression()", "public net.sf.jsqlparser.expression.Expression getLeftExpression()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setRightItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)", "public final void setRightItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)", "public final void setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.InExpression.isNot()", "public boolean isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setNot(boolean)", "public void setNot(boolean)"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.expression.operators.relational.InExpression.getLeftItemsList()", "public net.sf.jsqlparser.expression.operators.relational.ItemsList getLeftItemsList()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setLeftItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)", "public void setLeftItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.InExpression.toString()", "public java.lang.String toString()"], ["int", "net.sf.jsqlparser.expression.operators.relational.InExpression.getOraclePriorPosition()", "public int getOraclePriorPosition()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setOraclePriorPosition(int)", "public void setOraclePriorPosition(int)"], ["net.sf.jsqlparser.expression.operators.relational.IsNullExpression", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression()", "public net.sf.jsqlparser.expression.operators.relational.IsNullExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.getLeftExpression()", "public net.sf.jsqlparser.expression.Expression getLeftExpression()"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.isNot()", "public boolean isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)", "public void setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.setNot(boolean)", "public void setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter()", "public net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter()"], ["void", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["net.sf.jsqlparser.expression.operators.relational.LikeExpression", "net.sf.jsqlparser.expression.operators.relational.LikeExpression()", "public net.sf.jsqlparser.expression.operators.relational.LikeExpression()"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.isNot()", "public boolean isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.setNot(boolean)", "public void setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.getStringExpression()", "public java.lang.String getStringExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.toString()", "public java.lang.String toString()"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.getEscape()", "public java.lang.String getEscape()"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.setEscape(java.lang.String)", "public void setEscape(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.isCaseInsensitive()", "public boolean isCaseInsensitive()"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.setCaseInsensitive(boolean)", "public void setCaseInsensitive(boolean)"], ["net.sf.jsqlparser.expression.operators.relational.Matches", "net.sf.jsqlparser.expression.operators.relational.Matches()", "public net.sf.jsqlparser.expression.operators.relational.Matches()"], ["void", "net.sf.jsqlparser.expression.operators.relational.Matches.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.Matches.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.MinorThan", "net.sf.jsqlparser.expression.operators.relational.MinorThan()", "public net.sf.jsqlparser.expression.operators.relational.MinorThan()"], ["void", "net.sf.jsqlparser.expression.operators.relational.MinorThan.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.MinorThan.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.MinorThanEquals", "net.sf.jsqlparser.expression.operators.relational.MinorThanEquals()", "public net.sf.jsqlparser.expression.operators.relational.MinorThanEquals()"], ["void", "net.sf.jsqlparser.expression.operators.relational.MinorThanEquals.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.MinorThanEquals.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.MultiExpressionList", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList()", "public net.sf.jsqlparser.expression.operators.relational.MultiExpressionList()"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)", "public void accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)"], ["java.util.List<net.sf.jsqlparser.expression.operators.relational.ExpressionList>", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.getExprList()", "public java.util.List<net.sf.jsqlparser.expression.operators.relational.ExpressionList> getExprList()"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.addExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void addExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.addExpressionList(java.util.List<net.sf.jsqlparser.expression.Expression>)", "public void addExpressionList(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.addExpressionList(net.sf.jsqlparser.expression.Expression)", "public void addExpressionList(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.operators.relational.NotEqualsTo", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo()", "public net.sf.jsqlparser.expression.operators.relational.NotEqualsTo()"], ["net.sf.jsqlparser.expression.operators.relational.NotEqualsTo", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo(java.lang.String)", "public net.sf.jsqlparser.expression.operators.relational.NotEqualsTo(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression()", "public net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression()"], ["void", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.setOldOracleJoinSyntax(int)", "public void setOldOracleJoinSyntax(int)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.toString()", "public java.lang.String toString()"], ["int", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.getOldOracleJoinSyntax()", "public int getOldOracleJoinSyntax()"], ["int", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.getOraclePriorPosition()", "public int getOraclePriorPosition()"], ["void", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.setOraclePriorPosition(int)", "public void setOraclePriorPosition(int)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType)", "public net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator.getOperatorType()", "public net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType getOperatorType()"], ["void", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType[]", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType.values()", "public static net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType[] values()"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType.valueOf(java.lang.String)", "public static net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType)", "public net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator.getOperatorType()", "public net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType getOperatorType()"], ["void", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator.getStringExpression()", "public java.lang.String getStringExpression()"], ["net.sf.jsqlparser.expression.OracleHierarchicalExpression", "net.sf.jsqlparser.expression.OracleHierarchicalExpression()", "public net.sf.jsqlparser.expression.OracleHierarchicalExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.getStartExpression()", "public net.sf.jsqlparser.expression.Expression getStartExpression()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setStartExpression(net.sf.jsqlparser.expression.Expression)", "public void setStartExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.getConnectExpression()", "public net.sf.jsqlparser.expression.Expression getConnectExpression()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setConnectExpression(net.sf.jsqlparser.expression.Expression)", "public void setConnectExpression(net.sf.jsqlparser.expression.Expression)"], ["boolean", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.isNoCycle()", "public boolean isNoCycle()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setNoCycle(boolean)", "public void setNoCycle(boolean)"], ["boolean", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.isConnectFirst()", "public boolean isConnectFirst()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setConnectFirst(boolean)", "public void setConnectFirst(boolean)"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.Parenthesis", "net.sf.jsqlparser.expression.Parenthesis()", "public net.sf.jsqlparser.expression.Parenthesis()"], ["net.sf.jsqlparser.expression.Parenthesis", "net.sf.jsqlparser.expression.Parenthesis(net.sf.jsqlparser.expression.Expression)", "public net.sf.jsqlparser.expression.Parenthesis(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.Parenthesis.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.expression.Parenthesis.setExpression(net.sf.jsqlparser.expression.Expression)", "public final void setExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.Parenthesis.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.expression.Parenthesis.setNot()", "public void setNot()"], ["boolean", "net.sf.jsqlparser.expression.Parenthesis.isNot()", "public boolean isNot()"], ["java.lang.String", "net.sf.jsqlparser.expression.Parenthesis.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.RowConstructor", "net.sf.jsqlparser.expression.RowConstructor()", "public net.sf.jsqlparser.expression.RowConstructor()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.RowConstructor.getExprList()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList getExprList()"], ["void", "net.sf.jsqlparser.expression.RowConstructor.setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["java.lang.String", "net.sf.jsqlparser.expression.RowConstructor.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.RowConstructor.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.RowConstructor.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.RowConstructor.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.SignedExpression", "net.sf.jsqlparser.expression.SignedExpression(char, net.sf.jsqlparser.expression.Expression)", "public net.sf.jsqlparser.expression.SignedExpression(char, net.sf.jsqlparser.expression.Expression)"], ["char", "net.sf.jsqlparser.expression.SignedExpression.getSign()", "public char getSign()"], ["void", "net.sf.jsqlparser.expression.SignedExpression.setSign(char)", "public final void setSign(char)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.SignedExpression.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.expression.SignedExpression.setExpression(net.sf.jsqlparser.expression.Expression)", "public final void setExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.SignedExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.SignedExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.StringValue", "net.sf.jsqlparser.expression.StringValue(java.lang.String)", "public net.sf.jsqlparser.expression.StringValue(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.StringValue.getValue()", "public java.lang.String getValue()"], ["java.lang.String", "net.sf.jsqlparser.expression.StringValue.getNotExcapedValue()", "public java.lang.String getNotExcapedValue()"], ["void", "net.sf.jsqlparser.expression.StringValue.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.StringValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.StringValue.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.TimestampValue", "net.sf.jsqlparser.expression.TimestampValue(java.lang.String)", "public net.sf.jsqlparser.expression.TimestampValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.TimestampValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.sql.Timestamp", "net.sf.jsqlparser.expression.TimestampValue.getValue()", "public java.sql.Timestamp getValue()"], ["void", "net.sf.jsqlparser.expression.TimestampValue.setValue(java.sql.Timestamp)", "public void setValue(java.sql.Timestamp)"], ["java.lang.String", "net.sf.jsqlparser.expression.TimestampValue.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.TimeValue", "net.sf.jsqlparser.expression.TimeValue(java.lang.String)", "public net.sf.jsqlparser.expression.TimeValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.TimeValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.sql.Time", "net.sf.jsqlparser.expression.TimeValue.getValue()", "public java.sql.Time getValue()"], ["void", "net.sf.jsqlparser.expression.TimeValue.setValue(java.sql.Time)", "public void setValue(java.sql.Time)"], ["java.lang.String", "net.sf.jsqlparser.expression.TimeValue.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.UserVariable", "net.sf.jsqlparser.expression.UserVariable()", "public net.sf.jsqlparser.expression.UserVariable()"], ["java.lang.String", "net.sf.jsqlparser.expression.UserVariable.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.UserVariable.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.UserVariable.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["boolean", "net.sf.jsqlparser.expression.UserVariable.isDoubleAdd()", "public boolean isDoubleAdd()"], ["void", "net.sf.jsqlparser.expression.UserVariable.setDoubleAdd(boolean)", "public void setDoubleAdd(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.UserVariable.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.WhenClause", "net.sf.jsqlparser.expression.WhenClause()", "public net.sf.jsqlparser.expression.WhenClause()"], ["void", "net.sf.jsqlparser.expression.WhenClause.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.WhenClause.getThenExpression()", "public net.sf.jsqlparser.expression.Expression getThenExpression()"], ["void", "net.sf.jsqlparser.expression.WhenClause.setThenExpression(net.sf.jsqlparser.expression.Expression)", "public void setThenExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.WhenClause.getWhenExpression()", "public net.sf.jsqlparser.expression.Expression getWhenExpression()"], ["void", "net.sf.jsqlparser.expression.WhenClause.setWhenExpression(net.sf.jsqlparser.expression.Expression)", "public void setWhenExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.expression.WhenClause.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.WindowElement$Type[]", "net.sf.jsqlparser.expression.WindowElement$Type.values()", "public static net.sf.jsqlparser.expression.WindowElement$Type[] values()"], ["net.sf.jsqlparser.expression.WindowElement$Type", "net.sf.jsqlparser.expression.WindowElement$Type.valueOf(java.lang.String)", "public static net.sf.jsqlparser.expression.WindowElement$Type valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.WindowElement", "net.sf.jsqlparser.expression.WindowElement()", "public net.sf.jsqlparser.expression.WindowElement()"], ["net.sf.jsqlparser.expression.WindowElement$Type", "net.sf.jsqlparser.expression.WindowElement.getType()", "public net.sf.jsqlparser.expression.WindowElement$Type getType()"], ["void", "net.sf.jsqlparser.expression.WindowElement.setType(net.sf.jsqlparser.expression.WindowElement$Type)", "public void setType(net.sf.jsqlparser.expression.WindowElement$Type)"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowElement.getOffset()", "public net.sf.jsqlparser.expression.WindowOffset getOffset()"], ["void", "net.sf.jsqlparser.expression.WindowElement.setOffset(net.sf.jsqlparser.expression.WindowOffset)", "public void setOffset(net.sf.jsqlparser.expression.WindowOffset)"], ["net.sf.jsqlparser.expression.WindowRange", "net.sf.jsqlparser.expression.WindowElement.getRange()", "public net.sf.jsqlparser.expression.WindowRange getRange()"], ["void", "net.sf.jsqlparser.expression.WindowElement.setRange(net.sf.jsqlparser.expression.WindowRange)", "public void setRange(net.sf.jsqlparser.expression.WindowRange)"], ["java.lang.String", "net.sf.jsqlparser.expression.WindowElement.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.WindowOffset$Type[]", "net.sf.jsqlparser.expression.WindowOffset$Type.values()", "public static net.sf.jsqlparser.expression.WindowOffset$Type[] values()"], ["net.sf.jsqlparser.expression.WindowOffset$Type", "net.sf.jsqlparser.expression.WindowOffset$Type.valueOf(java.lang.String)", "public static net.sf.jsqlparser.expression.WindowOffset$Type valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowOffset()", "public net.sf.jsqlparser.expression.WindowOffset()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.WindowOffset.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.expression.WindowOffset.setExpression(net.sf.jsqlparser.expression.Expression)", "public void setExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.WindowOffset$Type", "net.sf.jsqlparser.expression.WindowOffset.getType()", "public net.sf.jsqlparser.expression.WindowOffset$Type getType()"], ["void", "net.sf.jsqlparser.expression.WindowOffset.setType(net.sf.jsqlparser.expression.WindowOffset$Type)", "public void setType(net.sf.jsqlparser.expression.WindowOffset$Type)"], ["java.lang.String", "net.sf.jsqlparser.expression.WindowOffset.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.WindowRange", "net.sf.jsqlparser.expression.WindowRange()", "public net.sf.jsqlparser.expression.WindowRange()"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowRange.getEnd()", "public net.sf.jsqlparser.expression.WindowOffset getEnd()"], ["void", "net.sf.jsqlparser.expression.WindowRange.setEnd(net.sf.jsqlparser.expression.WindowOffset)", "public void setEnd(net.sf.jsqlparser.expression.WindowOffset)"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowRange.getStart()", "public net.sf.jsqlparser.expression.WindowOffset getStart()"], ["void", "net.sf.jsqlparser.expression.WindowRange.setStart(net.sf.jsqlparser.expression.WindowOffset)", "public void setStart(net.sf.jsqlparser.expression.WindowOffset)"], ["java.lang.String", "net.sf.jsqlparser.expression.WindowRange.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.expression.WithinGroupExpression", "net.sf.jsqlparser.expression.WithinGroupExpression()", "public net.sf.jsqlparser.expression.WithinGroupExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.WithinGroupExpression.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>", "net.sf.jsqlparser.expression.WithinGroupExpression.getOrderByElements()", "public java.util.List<net.sf.jsqlparser.statement.select.OrderByElement> getOrderByElements()"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.WithinGroupExpression.getExprList()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList getExprList()"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.WithinGroupExpression.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException()", "public net.sf.jsqlparser.JSQLParserException()"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException(java.lang.String)", "public net.sf.jsqlparser.JSQLParserException(java.lang.String)"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException(java.lang.Throwable)", "public net.sf.jsqlparser.JSQLParserException(java.lang.Throwable)"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException(java.lang.String, java.lang.Throwable)", "public net.sf.jsqlparser.JSQLParserException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "net.sf.jsqlparser.JSQLParserException.getCause()", "public java.lang.Throwable getCause()"], ["void", "net.sf.jsqlparser.JSQLParserException.printStackTrace()", "public void printStackTrace()"], ["void", "net.sf.jsqlparser.JSQLParserException.printStackTrace(java.io.PrintWriter)", "public void printStackTrace(java.io.PrintWriter)"], ["void", "net.sf.jsqlparser.JSQLParserException.printStackTrace(java.io.PrintStream)", "public void printStackTrace(java.io.PrintStream)"], ["net.sf.jsqlparser.parser.ASTNodeAccessImpl", "net.sf.jsqlparser.parser.ASTNodeAccessImpl()", "public net.sf.jsqlparser.parser.ASTNodeAccessImpl()"], ["net.sf.jsqlparser.parser.SimpleNode", "net.sf.jsqlparser.parser.ASTNodeAccessImpl.getASTNode()", "public net.sf.jsqlparser.parser.SimpleNode getASTNode()"], ["void", "net.sf.jsqlparser.parser.ASTNodeAccessImpl.setASTNode(net.sf.jsqlparser.parser.SimpleNode)", "public void setASTNode(net.sf.jsqlparser.parser.SimpleNode)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.CCJSqlParser.getASTRoot()", "public net.sf.jsqlparser.parser.Node getASTRoot()"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParser.Statement()", "public final net.sf.jsqlparser.statement.Statement Statement() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParser.SingleStatement()", "public final net.sf.jsqlparser.statement.Statement SingleStatement() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.Statements", "net.sf.jsqlparser.parser.CCJSqlParser.Statements()", "public final net.sf.jsqlparser.statement.Statements Statements() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.SetStatement", "net.sf.jsqlparser.parser.CCJSqlParser.Set()", "public final net.sf.jsqlparser.statement.SetStatement Set() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.update.Update", "net.sf.jsqlparser.parser.CCJSqlParser.Update()", "public final net.sf.jsqlparser.statement.update.Update Update() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.replace.Replace", "net.sf.jsqlparser.parser.CCJSqlParser.Replace()", "public final net.sf.jsqlparser.statement.replace.Replace Replace() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>", "net.sf.jsqlparser.parser.CCJSqlParser.ListExpressionItem()", "public final java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem> ListExpressionItem() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.insert.Insert", "net.sf.jsqlparser.parser.CCJSqlParser.Insert()", "public final net.sf.jsqlparser.statement.insert.Insert Insert() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.delete.Delete", "net.sf.jsqlparser.parser.CCJSqlParser.Delete()", "public final net.sf.jsqlparser.statement.delete.Delete Delete() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.parser.CCJSqlParser.Column()", "public final net.sf.jsqlparser.schema.Column Column() throws net.sf.jsqlparser.parser.ParseException"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.RelObjectName()", "public final java.lang.String RelObjectName() throws net.sf.jsqlparser.parser.ParseException"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.RelObjectNameExt()", "public final java.lang.String RelObjectNameExt() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.parser.CCJSqlParser.Table()", "public final net.sf.jsqlparser.schema.Table Table() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.parser.CCJSqlParser.TableWithAlias()", "public final net.sf.jsqlparser.schema.Table TableWithAlias() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.parser.CCJSqlParser.Select()", "public final net.sf.jsqlparser.statement.select.Select Select() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.parser.CCJSqlParser.SelectBody()", "public final net.sf.jsqlparser.statement.select.SelectBody SelectBody() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.PlainSelect", "net.sf.jsqlparser.parser.CCJSqlParser.PlainSelect()", "public final net.sf.jsqlparser.statement.select.PlainSelect PlainSelect() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.SetOperationList", "net.sf.jsqlparser.parser.CCJSqlParser.SetOperationList()", "public final net.sf.jsqlparser.statement.select.SetOperationList SetOperationList() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.statement.select.WithItem>", "net.sf.jsqlparser.parser.CCJSqlParser.WithList()", "public final java.util.List<net.sf.jsqlparser.statement.select.WithItem> WithList() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.WithItem", "net.sf.jsqlparser.parser.CCJSqlParser.WithItem()", "public final net.sf.jsqlparser.statement.select.WithItem WithItem() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectItem>", "net.sf.jsqlparser.parser.CCJSqlParser.SelectItemsList()", "public final java.util.List<net.sf.jsqlparser.statement.select.SelectItem> SelectItemsList() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.SelectExpressionItem", "net.sf.jsqlparser.parser.CCJSqlParser.SelectExpressionItem()", "public final net.sf.jsqlparser.statement.select.SelectExpressionItem SelectExpressionItem() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.SelectItem", "net.sf.jsqlparser.parser.CCJSqlParser.SelectItem()", "public final net.sf.jsqlparser.statement.select.SelectItem SelectItem() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.AllTableColumns", "net.sf.jsqlparser.parser.CCJSqlParser.AllTableColumns()", "public final net.sf.jsqlparser.statement.select.AllTableColumns AllTableColumns() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.parser.CCJSqlParser.Alias()", "public final net.sf.jsqlparser.expression.Alias Alias() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.FunctionItem", "net.sf.jsqlparser.parser.CCJSqlParser.FunctionItem()", "public final net.sf.jsqlparser.statement.select.FunctionItem FunctionItem() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.schema.Column>", "net.sf.jsqlparser.parser.CCJSqlParser.PivotForColumns()", "public final java.util.List<net.sf.jsqlparser.schema.Column> PivotForColumns() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.statement.select.FunctionItem>", "net.sf.jsqlparser.parser.CCJSqlParser.PivotFunctionItems()", "public final java.util.List<net.sf.jsqlparser.statement.select.FunctionItem> PivotFunctionItems() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>", "net.sf.jsqlparser.parser.CCJSqlParser.PivotSingleInItems()", "public final java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem> PivotSingleInItems() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.ExpressionListItem", "net.sf.jsqlparser.parser.CCJSqlParser.ExpressionListItem()", "public final net.sf.jsqlparser.statement.select.ExpressionListItem ExpressionListItem() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.statement.select.ExpressionListItem>", "net.sf.jsqlparser.parser.CCJSqlParser.PivotMultiInItems()", "public final java.util.List<net.sf.jsqlparser.statement.select.ExpressionListItem> PivotMultiInItems() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.parser.CCJSqlParser.Pivot()", "public final net.sf.jsqlparser.statement.select.Pivot Pivot() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.PivotXml", "net.sf.jsqlparser.parser.CCJSqlParser.PivotXml()", "public final net.sf.jsqlparser.statement.select.PivotXml PivotXml() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.schema.Table>", "net.sf.jsqlparser.parser.CCJSqlParser.IntoClause()", "public final java.util.List<net.sf.jsqlparser.schema.Table> IntoClause() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.parser.CCJSqlParser.FromItem()", "public final net.sf.jsqlparser.statement.select.FromItem FromItem() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.parser.CCJSqlParser.ValuesList()", "public final net.sf.jsqlparser.statement.select.FromItem ValuesList() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.LateralSubSelect", "net.sf.jsqlparser.parser.CCJSqlParser.LateralSubSelect()", "public final net.sf.jsqlparser.statement.select.LateralSubSelect LateralSubSelect() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.parser.CCJSqlParser.SubJoin()", "public final net.sf.jsqlparser.statement.select.FromItem SubJoin() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List", "net.sf.jsqlparser.parser.CCJSqlParser.JoinsList()", "public final java.util.List JoinsList() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.parser.CCJSqlParser.JoinerExpression()", "public final net.sf.jsqlparser.statement.select.Join JoinerExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.WhereClause()", "public final net.sf.jsqlparser.expression.Expression WhereClause() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.OracleHierarchicalExpression", "net.sf.jsqlparser.parser.CCJSqlParser.OracleHierarchicalQueryClause()", "public final net.sf.jsqlparser.expression.OracleHierarchicalExpression OracleHierarchicalQueryClause() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.expression.Expression>", "net.sf.jsqlparser.parser.CCJSqlParser.GroupByColumnReferences()", "public final java.util.List<net.sf.jsqlparser.expression.Expression> GroupByColumnReferences() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Having()", "public final net.sf.jsqlparser.expression.Expression Having() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>", "net.sf.jsqlparser.parser.CCJSqlParser.OrderByElements()", "public final java.util.List<net.sf.jsqlparser.statement.select.OrderByElement> OrderByElements() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.OrderByElement", "net.sf.jsqlparser.parser.CCJSqlParser.OrderByElement()", "public final net.sf.jsqlparser.statement.select.OrderByElement OrderByElement() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.parser.CCJSqlParser.Limit()", "public final net.sf.jsqlparser.statement.select.Limit Limit() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.parser.CCJSqlParser.Offset()", "public final net.sf.jsqlparser.statement.select.Offset Offset() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.parser.CCJSqlParser.Fetch()", "public final net.sf.jsqlparser.statement.select.Fetch Fetch() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Top", "net.sf.jsqlparser.parser.CCJSqlParser.Top()", "public final net.sf.jsqlparser.statement.select.Top Top() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.Skip", "net.sf.jsqlparser.parser.CCJSqlParser.Skip()", "public final net.sf.jsqlparser.statement.select.Skip Skip() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.First", "net.sf.jsqlparser.parser.CCJSqlParser.First()", "public final net.sf.jsqlparser.statement.select.First First() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Expression()", "public final net.sf.jsqlparser.expression.Expression Expression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.OrExpression()", "public final net.sf.jsqlparser.expression.Expression OrExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AndExpression()", "public final net.sf.jsqlparser.expression.Expression AndExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Condition()", "public final net.sf.jsqlparser.expression.Expression Condition() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.RegularCondition()", "public final net.sf.jsqlparser.expression.Expression RegularCondition() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.SQLCondition()", "public final net.sf.jsqlparser.expression.Expression SQLCondition() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.InExpression()", "public final net.sf.jsqlparser.expression.Expression InExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Between()", "public final net.sf.jsqlparser.expression.Expression Between() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.LikeExpression()", "public final net.sf.jsqlparser.expression.Expression LikeExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.IsNullExpression()", "public final net.sf.jsqlparser.expression.Expression IsNullExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.ExistsExpression()", "public final net.sf.jsqlparser.expression.Expression ExistsExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.parser.CCJSqlParser.SQLExpressionList()", "public final net.sf.jsqlparser.expression.operators.relational.ExpressionList SQLExpressionList() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.parser.CCJSqlParser.SimpleExpressionList()", "public final net.sf.jsqlparser.expression.operators.relational.ExpressionList SimpleExpressionList() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.parser.CCJSqlParser.SimpleExpressionListAtLeastTwoItems()", "public final net.sf.jsqlparser.expression.operators.relational.ExpressionList SimpleExpressionListAtLeastTwoItems() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.ComparisonItem()", "public final net.sf.jsqlparser.expression.Expression ComparisonItem() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AllComparisonExpression()", "public final net.sf.jsqlparser.expression.Expression AllComparisonExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AnyComparisonExpression()", "public final net.sf.jsqlparser.expression.Expression AnyComparisonExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.SimpleExpression()", "public final net.sf.jsqlparser.expression.Expression SimpleExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.ConcatExpression()", "public final net.sf.jsqlparser.expression.Expression ConcatExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.BitwiseAndOr()", "public final net.sf.jsqlparser.expression.Expression BitwiseAndOr() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AdditiveExpression()", "public final net.sf.jsqlparser.expression.Expression AdditiveExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.MultiplicativeExpression()", "public final net.sf.jsqlparser.expression.Expression MultiplicativeExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.BitwiseXor()", "public final net.sf.jsqlparser.expression.Expression BitwiseXor() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.PrimaryExpression()", "public final net.sf.jsqlparser.expression.Expression PrimaryExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.JdbcNamedParameter", "net.sf.jsqlparser.parser.CCJSqlParser.JdbcNamedParameter()", "public final net.sf.jsqlparser.expression.JdbcNamedParameter JdbcNamedParameter() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.UserVariable", "net.sf.jsqlparser.parser.CCJSqlParser.UserVariable()", "public final net.sf.jsqlparser.expression.UserVariable UserVariable() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.NumericBind", "net.sf.jsqlparser.parser.CCJSqlParser.NumericBind()", "public final net.sf.jsqlparser.expression.NumericBind NumericBind() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.JsonExpression", "net.sf.jsqlparser.parser.CCJSqlParser.JsonExpression()", "public final net.sf.jsqlparser.expression.JsonExpression JsonExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.IntervalExpression", "net.sf.jsqlparser.parser.CCJSqlParser.IntervalExpression()", "public final net.sf.jsqlparser.expression.IntervalExpression IntervalExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.WithinGroupExpression", "net.sf.jsqlparser.parser.CCJSqlParser.WithinGroupExpression()", "public final net.sf.jsqlparser.expression.WithinGroupExpression WithinGroupExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.parser.CCJSqlParser.KeepExpression()", "public final net.sf.jsqlparser.expression.KeepExpression KeepExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.AnalyticExpression", "net.sf.jsqlparser.parser.CCJSqlParser.AnalyticExpression()", "public final net.sf.jsqlparser.expression.AnalyticExpression AnalyticExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.WindowElement", "net.sf.jsqlparser.parser.CCJSqlParser.WindowElement()", "public final net.sf.jsqlparser.expression.WindowElement WindowElement() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.parser.CCJSqlParser.WindowOffset()", "public final net.sf.jsqlparser.expression.WindowOffset WindowOffset() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.ExtractExpression", "net.sf.jsqlparser.parser.CCJSqlParser.ExtractExpression()", "public final net.sf.jsqlparser.expression.ExtractExpression ExtractExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.CastExpression", "net.sf.jsqlparser.parser.CCJSqlParser.CastExpression()", "public final net.sf.jsqlparser.expression.CastExpression CastExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.CaseWhenExpression()", "public final net.sf.jsqlparser.expression.Expression CaseWhenExpression() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.WhenClause", "net.sf.jsqlparser.parser.CCJSqlParser.WhenThenSearchCondition()", "public final net.sf.jsqlparser.expression.WhenClause WhenThenSearchCondition() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.WhenClause", "net.sf.jsqlparser.parser.CCJSqlParser.WhenThenValue()", "public final net.sf.jsqlparser.expression.WhenClause WhenThenValue() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.RowConstructor", "net.sf.jsqlparser.parser.CCJSqlParser.RowConstructor()", "public final net.sf.jsqlparser.expression.RowConstructor RowConstructor() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.execute.Execute", "net.sf.jsqlparser.parser.CCJSqlParser.Execute()", "public final net.sf.jsqlparser.statement.execute.Execute Execute() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.Function", "net.sf.jsqlparser.parser.CCJSqlParser.Function()", "public final net.sf.jsqlparser.expression.Function Function() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.expression.MySQLGroupConcat", "net.sf.jsqlparser.parser.CCJSqlParser.MySQLGroupConcat()", "public final net.sf.jsqlparser.expression.MySQLGroupConcat MySQLGroupConcat() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.parser.CCJSqlParser.SubSelect()", "public final net.sf.jsqlparser.statement.select.SubSelect SubSelect() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.create.index.CreateIndex", "net.sf.jsqlparser.parser.CCJSqlParser.CreateIndex()", "public final net.sf.jsqlparser.statement.create.index.CreateIndex CreateIndex() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.create.table.CreateTable", "net.sf.jsqlparser.parser.CCJSqlParser.CreateTable()", "public final net.sf.jsqlparser.statement.create.table.CreateTable CreateTable() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.parser.CCJSqlParser.ColDataType()", "public final net.sf.jsqlparser.statement.create.table.ColDataType ColDataType() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.create.view.CreateView", "net.sf.jsqlparser.parser.CCJSqlParser.CreateView()", "public final net.sf.jsqlparser.statement.create.view.CreateView CreateView() throws net.sf.jsqlparser.parser.ParseException"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.CreateParameter()", "public final java.lang.String CreateParameter() throws net.sf.jsqlparser.parser.ParseException"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.AList()", "public final java.lang.String AList() throws net.sf.jsqlparser.parser.ParseException"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.parser.CCJSqlParser.ColumnsNamesList()", "public final java.util.List<java.lang.String> ColumnsNamesList() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.drop.Drop", "net.sf.jsqlparser.parser.CCJSqlParser.Drop()", "public final net.sf.jsqlparser.statement.drop.Drop Drop() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.truncate.Truncate", "net.sf.jsqlparser.parser.CCJSqlParser.Truncate()", "public final net.sf.jsqlparser.statement.truncate.Truncate Truncate() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.statement.alter.Alter", "net.sf.jsqlparser.parser.CCJSqlParser.Alter()", "public final net.sf.jsqlparser.statement.alter.Alter Alter() throws net.sf.jsqlparser.parser.ParseException"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(java.io.InputStream)", "public net.sf.jsqlparser.parser.CCJSqlParser(java.io.InputStream)"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(java.io.InputStream, java.lang.String)", "public net.sf.jsqlparser.parser.CCJSqlParser(java.io.InputStream, java.lang.String)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(java.io.InputStream)", "public void ReInit(java.io.InputStream)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(java.io.InputStream, java.lang.String)", "public void ReInit(java.io.InputStream, java.lang.String)"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(java.io.Reader)", "public net.sf.jsqlparser.parser.CCJSqlParser(java.io.Reader)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(java.io.Reader)", "public void ReInit(java.io.Reader)"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(net.sf.jsqlparser.parser.CCJSqlParserTokenManager)", "public net.sf.jsqlparser.parser.CCJSqlParser(net.sf.jsqlparser.parser.CCJSqlParserTokenManager)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(net.sf.jsqlparser.parser.CCJSqlParserTokenManager)", "public void ReInit(net.sf.jsqlparser.parser.CCJSqlParserTokenManager)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.CCJSqlParser.getNextToken()", "public final net.sf.jsqlparser.parser.Token getNextToken()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.CCJSqlParser.getToken(int)", "public final net.sf.jsqlparser.parser.Token getToken(int)"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.CCJSqlParser.generateParseException()", "public net.sf.jsqlparser.parser.ParseException generateParseException()"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.enable_tracing()", "public final void enable_tracing()"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.disable_tracing()", "public final void disable_tracing()"], ["net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor", "net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor()", "public net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor()"], ["java.lang.Object", "net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor.defaultVisit(net.sf.jsqlparser.parser.SimpleNode, java.lang.Object)", "public java.lang.Object defaultVisit(net.sf.jsqlparser.parser.SimpleNode, java.lang.Object)"], ["java.lang.Object", "net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor.visit(net.sf.jsqlparser.parser.SimpleNode, java.lang.Object)", "public java.lang.Object visit(net.sf.jsqlparser.parser.SimpleNode, java.lang.Object)"], ["net.sf.jsqlparser.parser.CCJSqlParserManager", "net.sf.jsqlparser.parser.CCJSqlParserManager()", "public net.sf.jsqlparser.parser.CCJSqlParserManager()"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserManager.parse(java.io.Reader)", "public net.sf.jsqlparser.statement.Statement parse(java.io.Reader) throws net.sf.jsqlparser.JSQLParserException"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.setDebugStream(java.io.PrintStream)", "public void setDebugStream(java.io.PrintStream)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.getNextToken()", "public net.sf.jsqlparser.parser.Token getNextToken()"], ["net.sf.jsqlparser.parser.CCJSqlParserTokenManager", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager(net.sf.jsqlparser.parser.SimpleCharStream)", "public net.sf.jsqlparser.parser.CCJSqlParserTokenManager(net.sf.jsqlparser.parser.SimpleCharStream)"], ["net.sf.jsqlparser.parser.CCJSqlParserTokenManager", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager(net.sf.jsqlparser.parser.SimpleCharStream, int)", "public net.sf.jsqlparser.parser.CCJSqlParserTokenManager(net.sf.jsqlparser.parser.SimpleCharStream, int)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.ReInit(net.sf.jsqlparser.parser.SimpleCharStream)", "public void ReInit(net.sf.jsqlparser.parser.SimpleCharStream)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.ReInit(net.sf.jsqlparser.parser.SimpleCharStream, int)", "public void ReInit(net.sf.jsqlparser.parser.SimpleCharStream, int)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.SwitchTo(int)", "public void SwitchTo(int)"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.io.Reader)", "public static net.sf.jsqlparser.statement.Statement parse(java.io.Reader) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.lang.String)", "public static net.sf.jsqlparser.statement.Statement parse(java.lang.String) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseAST(java.lang.String)", "public static net.sf.jsqlparser.parser.Node parseAST(java.lang.String) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.io.InputStream)", "public static net.sf.jsqlparser.statement.Statement parse(java.io.InputStream) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.io.InputStream, java.lang.String)", "public static net.sf.jsqlparser.statement.Statement parse(java.io.InputStream, java.lang.String) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseExpression(java.lang.String)", "public static net.sf.jsqlparser.expression.Expression parseExpression(java.lang.String) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseCondExpression(java.lang.String)", "public static net.sf.jsqlparser.expression.Expression parseCondExpression(java.lang.String) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.statement.Statements", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseStatements(java.lang.String)", "public static net.sf.jsqlparser.statement.Statements parseStatements(java.lang.String) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.parser.JJTCCJSqlParserState", "net.sf.jsqlparser.parser.JJTCCJSqlParserState()", "public net.sf.jsqlparser.parser.JJTCCJSqlParserState()"], ["boolean", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.nodeCreated()", "public boolean nodeCreated()"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.reset()", "public void reset()"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.rootNode()", "public net.sf.jsqlparser.parser.Node rootNode()"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.pushNode(net.sf.jsqlparser.parser.Node)", "public void pushNode(net.sf.jsqlparser.parser.Node)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.popNode()", "public net.sf.jsqlparser.parser.Node popNode()"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.peekNode()", "public net.sf.jsqlparser.parser.Node peekNode()"], ["int", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.nodeArity()", "public int nodeArity()"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.clearNodeScope(net.sf.jsqlparser.parser.Node)", "public void clearNodeScope(net.sf.jsqlparser.parser.Node)"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.openNodeScope(net.sf.jsqlparser.parser.Node)", "public void openNodeScope(net.sf.jsqlparser.parser.Node)"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.closeNodeScope(net.sf.jsqlparser.parser.Node, int)", "public void closeNodeScope(net.sf.jsqlparser.parser.Node, int)"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.closeNodeScope(net.sf.jsqlparser.parser.Node, boolean)", "public void closeNodeScope(net.sf.jsqlparser.parser.Node, boolean)"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.ParseException(net.sf.jsqlparser.parser.Token, int[][], java.lang.String[])", "public net.sf.jsqlparser.parser.ParseException(net.sf.jsqlparser.parser.Token, int[][], java.lang.String[])"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.ParseException()", "public net.sf.jsqlparser.parser.ParseException()"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.ParseException(java.lang.String)", "public net.sf.jsqlparser.parser.ParseException(java.lang.String)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.setTabSize(int)", "public void setTabSize(int)"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getTabSize()", "public int getTabSize()"], ["char", "net.sf.jsqlparser.parser.SimpleCharStream.BeginToken()", "public char BeginToken() throws java.io.IOException"], ["char", "net.sf.jsqlparser.parser.SimpleCharStream.readChar()", "public char readChar() throws java.io.IOException"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getColumn()", "public int getColumn()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getLine()", "public int getLine()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getEndColumn()", "public int getEndColumn()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getEndLine()", "public int getEndLine()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getBeginColumn()", "public int getBeginColumn()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getBeginLine()", "public int getBeginLine()"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.backup(int)", "public void backup(int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader, int, int, int)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader, int, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader, int, int)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.Reader, int, int, int)", "public void ReInit(java.io.Reader, int, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.Reader, int, int)", "public void ReInit(java.io.Reader, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.Reader)", "public void ReInit(java.io.Reader)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int, int)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, int, int, int)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, int, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, int, int)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream)", "public net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, java.lang.String, int, int, int)", "public void ReInit(java.io.InputStream, java.lang.String, int, int, int) throws java.io.UnsupportedEncodingException"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, int, int, int)", "public void ReInit(java.io.InputStream, int, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, java.lang.String)", "public void ReInit(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream)", "public void ReInit(java.io.InputStream)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, java.lang.String, int, int)", "public void ReInit(java.io.InputStream, java.lang.String, int, int) throws java.io.UnsupportedEncodingException"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, int, int)", "public void ReInit(java.io.InputStream, int, int)"], ["java.lang.String", "net.sf.jsqlparser.parser.SimpleCharStream.GetImage()", "public java.lang.String GetImage()"], ["char[]", "net.sf.jsqlparser.parser.SimpleCharStream.GetSuffix(int)", "public char[] GetSuffix(int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.Done()", "public void Done()"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.adjustBeginLineColumn(int, int)", "public void adjustBeginLineColumn(int, int)"], ["net.sf.jsqlparser.parser.SimpleNode", "net.sf.jsqlparser.parser.SimpleNode(int)", "public net.sf.jsqlparser.parser.SimpleNode(int)"], ["net.sf.jsqlparser.parser.SimpleNode", "net.sf.jsqlparser.parser.SimpleNode(net.sf.jsqlparser.parser.CCJSqlParser, int)", "public net.sf.jsqlparser.parser.SimpleNode(net.sf.jsqlparser.parser.CCJSqlParser, int)"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtOpen()", "public void jjtOpen()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtClose()", "public void jjtClose()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetParent(net.sf.jsqlparser.parser.Node)", "public void jjtSetParent(net.sf.jsqlparser.parser.Node)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.SimpleNode.jjtGetParent()", "public net.sf.jsqlparser.parser.Node jjtGetParent()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtAddChild(net.sf.jsqlparser.parser.Node, int)", "public void jjtAddChild(net.sf.jsqlparser.parser.Node, int)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.SimpleNode.jjtGetChild(int)", "public net.sf.jsqlparser.parser.Node jjtGetChild(int)"], ["int", "net.sf.jsqlparser.parser.SimpleNode.jjtGetNumChildren()", "public int jjtGetNumChildren()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetValue(java.lang.Object)", "public void jjtSetValue(java.lang.Object)"], ["java.lang.Object", "net.sf.jsqlparser.parser.SimpleNode.jjtGetValue()", "public java.lang.Object jjtGetValue()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.SimpleNode.jjtGetFirstToken()", "public net.sf.jsqlparser.parser.Token jjtGetFirstToken()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetFirstToken(net.sf.jsqlparser.parser.Token)", "public void jjtSetFirstToken(net.sf.jsqlparser.parser.Token)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.SimpleNode.jjtGetLastToken()", "public net.sf.jsqlparser.parser.Token jjtGetLastToken()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetLastToken(net.sf.jsqlparser.parser.Token)", "public void jjtSetLastToken(net.sf.jsqlparser.parser.Token)"], ["java.lang.Object", "net.sf.jsqlparser.parser.SimpleNode.jjtAccept(net.sf.jsqlparser.parser.CCJSqlParserVisitor, java.lang.Object)", "public java.lang.Object jjtAccept(net.sf.jsqlparser.parser.CCJSqlParserVisitor, java.lang.Object)"], ["java.lang.Object", "net.sf.jsqlparser.parser.SimpleNode.childrenAccept(net.sf.jsqlparser.parser.CCJSqlParserVisitor, java.lang.Object)", "public java.lang.Object childrenAccept(net.sf.jsqlparser.parser.CCJSqlParserVisitor, java.lang.Object)"], ["java.lang.String", "net.sf.jsqlparser.parser.SimpleNode.toString()", "public java.lang.String toString()"], ["java.lang.String", "net.sf.jsqlparser.parser.SimpleNode.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["void", "net.sf.jsqlparser.parser.SimpleNode.dump(java.lang.String)", "public void dump(java.lang.String)"], ["int", "net.sf.jsqlparser.parser.SimpleNode.getId()", "public int getId()"], ["java.lang.Object", "net.sf.jsqlparser.parser.Token.getValue()", "public java.lang.Object getValue()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token()", "public net.sf.jsqlparser.parser.Token()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token(int)", "public net.sf.jsqlparser.parser.Token(int)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token(int, java.lang.String)", "public net.sf.jsqlparser.parser.Token(int, java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.parser.Token.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token.newToken(int, java.lang.String)", "public static net.sf.jsqlparser.parser.Token newToken(int, java.lang.String)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token.newToken(int)", "public static net.sf.jsqlparser.parser.Token newToken(int)"], ["java.lang.String", "net.sf.jsqlparser.parser.TokenMgrError.getMessage()", "public java.lang.String getMessage()"], ["net.sf.jsqlparser.parser.TokenMgrError", "net.sf.jsqlparser.parser.TokenMgrError()", "public net.sf.jsqlparser.parser.TokenMgrError()"], ["net.sf.jsqlparser.parser.TokenMgrError", "net.sf.jsqlparser.parser.TokenMgrError(java.lang.String, int)", "public net.sf.jsqlparser.parser.TokenMgrError(java.lang.String, int)"], ["net.sf.jsqlparser.parser.TokenMgrError", "net.sf.jsqlparser.parser.TokenMgrError(boolean, int, int, int, java.lang.String, int, int)", "public net.sf.jsqlparser.parser.TokenMgrError(boolean, int, int, int, java.lang.String, int, int)"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.schema.Column()", "public net.sf.jsqlparser.schema.Column()"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.schema.Column(net.sf.jsqlparser.schema.Table, java.lang.String)", "public net.sf.jsqlparser.schema.Column(net.sf.jsqlparser.schema.Table, java.lang.String)"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.schema.Column(java.lang.String)", "public net.sf.jsqlparser.schema.Column(java.lang.String)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Column.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.schema.Column.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.schema.Column.getColumnName()", "public java.lang.String getColumnName()"], ["void", "net.sf.jsqlparser.schema.Column.setColumnName(java.lang.String)", "public void setColumnName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Column.getFullyQualifiedName()", "public java.lang.String getFullyQualifiedName()"], ["void", "net.sf.jsqlparser.schema.Column.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.schema.Column.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.schema.Database", "net.sf.jsqlparser.schema.Database(java.lang.String)", "public net.sf.jsqlparser.schema.Database(java.lang.String)"], ["net.sf.jsqlparser.schema.Database", "net.sf.jsqlparser.schema.Database(net.sf.jsqlparser.schema.Server, java.lang.String)", "public net.sf.jsqlparser.schema.Database(net.sf.jsqlparser.schema.Server, java.lang.String)"], ["net.sf.jsqlparser.schema.Server", "net.sf.jsqlparser.schema.Database.getServer()", "public net.sf.jsqlparser.schema.Server getServer()"], ["void", "net.sf.jsqlparser.schema.Database.setServer(net.sf.jsqlparser.schema.Server)", "public void setServer(net.sf.jsqlparser.schema.Server)"], ["java.lang.String", "net.sf.jsqlparser.schema.Database.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["void", "net.sf.jsqlparser.schema.Database.setDatabaseName(java.lang.String)", "public void setDatabaseName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Database.getFullyQualifiedName()", "public java.lang.String getFullyQualifiedName()"], ["java.lang.String", "net.sf.jsqlparser.schema.Database.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.schema.Server", "net.sf.jsqlparser.schema.Server(java.lang.String)", "public net.sf.jsqlparser.schema.Server(java.lang.String)"], ["net.sf.jsqlparser.schema.Server", "net.sf.jsqlparser.schema.Server(java.lang.String, java.lang.String)", "public net.sf.jsqlparser.schema.Server(java.lang.String, java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.getServerName()", "public java.lang.String getServerName()"], ["void", "net.sf.jsqlparser.schema.Server.setServerName(java.lang.String)", "public void setServerName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.getInstanceName()", "public java.lang.String getInstanceName()"], ["void", "net.sf.jsqlparser.schema.Server.setInstanceName(java.lang.String)", "public void setInstanceName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.getFullyQualifiedName()", "public java.lang.String getFullyQualifiedName()"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table()", "public net.sf.jsqlparser.schema.Table()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table(java.lang.String)", "public net.sf.jsqlparser.schema.Table(java.lang.String)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table(java.lang.String, java.lang.String)", "public net.sf.jsqlparser.schema.Table(java.lang.String, java.lang.String)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table(net.sf.jsqlparser.schema.Database, java.lang.String, java.lang.String)", "public net.sf.jsqlparser.schema.Table(net.sf.jsqlparser.schema.Database, java.lang.String, java.lang.String)"], ["net.sf.jsqlparser.schema.Database", "net.sf.jsqlparser.schema.Table.getDatabase()", "public net.sf.jsqlparser.schema.Database getDatabase()"], ["void", "net.sf.jsqlparser.schema.Table.setDatabase(net.sf.jsqlparser.schema.Database)", "public void setDatabase(net.sf.jsqlparser.schema.Database)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.getSchemaName()", "public java.lang.String getSchemaName()"], ["void", "net.sf.jsqlparser.schema.Table.setSchemaName(java.lang.String)", "public void setSchemaName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.schema.Table.setName(java.lang.String)", "public void setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.schema.Table.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["void", "net.sf.jsqlparser.schema.Table.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.getFullyQualifiedName()", "public java.lang.String getFullyQualifiedName()"], ["void", "net.sf.jsqlparser.schema.Table.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["void", "net.sf.jsqlparser.schema.Table.accept(net.sf.jsqlparser.statement.select.IntoTableVisitor)", "public void accept(net.sf.jsqlparser.statement.select.IntoTableVisitor)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.schema.Table.getPivot()", "public net.sf.jsqlparser.statement.select.Pivot getPivot()"], ["void", "net.sf.jsqlparser.schema.Table.setPivot(net.sf.jsqlparser.statement.select.Pivot)", "public void setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.alter.Alter", "net.sf.jsqlparser.statement.alter.Alter()", "public net.sf.jsqlparser.statement.alter.Alter()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.alter.Alter.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.alter.Alter.getColumnName()", "public java.lang.String getColumnName()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setColumnName(java.lang.String)", "public void setColumnName(java.lang.String)"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.statement.alter.Alter.getDataType()", "public net.sf.jsqlparser.statement.create.table.ColDataType getDataType()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setDataType(net.sf.jsqlparser.statement.create.table.ColDataType)", "public void setDataType(net.sf.jsqlparser.statement.create.table.ColDataType)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.alter.Alter.getPkColumns()", "public java.util.List<java.lang.String> getPkColumns()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setPkColumns(java.util.List<java.lang.String>)", "public void setPkColumns(java.util.List<java.lang.String>)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.alter.Alter.getUkColumns()", "public java.util.List<java.lang.String> getUkColumns()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setUkColumns(java.util.List<java.lang.String>)", "public void setUkColumns(java.util.List<java.lang.String>)"], ["java.lang.String", "net.sf.jsqlparser.statement.alter.Alter.getUkName()", "public java.lang.String getUkName()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setUkName(java.lang.String)", "public void setUkName(java.lang.String)"], ["void", "net.sf.jsqlparser.statement.alter.Alter.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.alter.Alter.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.index.CreateIndex", "net.sf.jsqlparser.statement.create.index.CreateIndex()", "public net.sf.jsqlparser.statement.create.index.CreateIndex()"], ["void", "net.sf.jsqlparser.statement.create.index.CreateIndex.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.statement.create.table.Index", "net.sf.jsqlparser.statement.create.index.CreateIndex.getIndex()", "public net.sf.jsqlparser.statement.create.table.Index getIndex()"], ["void", "net.sf.jsqlparser.statement.create.index.CreateIndex.setIndex(net.sf.jsqlparser.statement.create.table.Index)", "public void setIndex(net.sf.jsqlparser.statement.create.table.Index)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.index.CreateIndex.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.create.index.CreateIndex.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.index.CreateIndex.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.statement.create.table.ColDataType()", "public net.sf.jsqlparser.statement.create.table.ColDataType()"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.create.table.ColDataType.getArgumentsStringList()", "public java.util.List<java.lang.String> getArgumentsStringList()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColDataType.getDataType()", "public java.lang.String getDataType()"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setArgumentsStringList(java.util.List<java.lang.String>)", "public void setArgumentsStringList(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setDataType(java.lang.String)", "public void setDataType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColDataType.getCharacterSet()", "public java.lang.String getCharacterSet()"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setCharacterSet(java.lang.String)", "public void setCharacterSet(java.lang.String)"], ["java.util.List<java.lang.Integer>", "net.sf.jsqlparser.statement.create.table.ColDataType.getArrayData()", "public java.util.List<java.lang.Integer> getArrayData()"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setArrayData(java.util.List<java.lang.Integer>)", "public void setArrayData(java.util.List<java.lang.Integer>)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColDataType.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.table.ColumnDefinition", "net.sf.jsqlparser.statement.create.table.ColumnDefinition()", "public net.sf.jsqlparser.statement.create.table.ColumnDefinition()"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.getColumnSpecStrings()", "public java.util.List<java.lang.String> getColumnSpecStrings()"], ["void", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.setColumnSpecStrings(java.util.List<java.lang.String>)", "public void setColumnSpecStrings(java.util.List<java.lang.String>)"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.getColDataType()", "public net.sf.jsqlparser.statement.create.table.ColDataType getColDataType()"], ["void", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.setColDataType(net.sf.jsqlparser.statement.create.table.ColDataType)", "public void setColDataType(net.sf.jsqlparser.statement.create.table.ColDataType)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.getColumnName()", "public java.lang.String getColumnName()"], ["void", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.setColumnName(java.lang.String)", "public void setColumnName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.table.CreateTable", "net.sf.jsqlparser.statement.create.table.CreateTable()", "public net.sf.jsqlparser.statement.create.table.CreateTable()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.table.CreateTable.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["boolean", "net.sf.jsqlparser.statement.create.table.CreateTable.isUnlogged()", "public boolean isUnlogged()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setUnlogged(boolean)", "public void setUnlogged(boolean)"], ["java.util.List<net.sf.jsqlparser.statement.create.table.ColumnDefinition>", "net.sf.jsqlparser.statement.create.table.CreateTable.getColumnDefinitions()", "public java.util.List<net.sf.jsqlparser.statement.create.table.ColumnDefinition> getColumnDefinitions()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setColumnDefinitions(java.util.List<net.sf.jsqlparser.statement.create.table.ColumnDefinition>)", "public void setColumnDefinitions(java.util.List<net.sf.jsqlparser.statement.create.table.ColumnDefinition>)"], ["java.util.List<?>", "net.sf.jsqlparser.statement.create.table.CreateTable.getTableOptionsStrings()", "public java.util.List<?> getTableOptionsStrings()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setTableOptionsStrings(java.util.List<java.lang.String>)", "public void setTableOptionsStrings(java.util.List<java.lang.String>)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.create.table.CreateTable.getCreateOptionsStrings()", "public java.util.List<java.lang.String> getCreateOptionsStrings()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setCreateOptionsStrings(java.util.List<java.lang.String>)", "public void setCreateOptionsStrings(java.util.List<java.lang.String>)"], ["java.util.List<net.sf.jsqlparser.statement.create.table.Index>", "net.sf.jsqlparser.statement.create.table.CreateTable.getIndexes()", "public java.util.List<net.sf.jsqlparser.statement.create.table.Index> getIndexes()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setIndexes(java.util.List<net.sf.jsqlparser.statement.create.table.Index>)", "public void setIndexes(java.util.List<net.sf.jsqlparser.statement.create.table.Index>)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.create.table.CreateTable.getSelect()", "public net.sf.jsqlparser.statement.select.Select getSelect()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setSelect(net.sf.jsqlparser.statement.select.Select)", "public void setSelect(net.sf.jsqlparser.statement.select.Select)"], ["boolean", "net.sf.jsqlparser.statement.create.table.CreateTable.isIfNotExists()", "public boolean isIfNotExists()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setIfNotExists(boolean)", "public void setIfNotExists(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.CreateTable.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.table.ForeignKeyIndex", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex()", "public net.sf.jsqlparser.statement.create.table.ForeignKeyIndex()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.getReferencedColumnNames()", "public java.util.List<java.lang.String> getReferencedColumnNames()"], ["void", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.setReferencedColumnNames(java.util.List<java.lang.String>)", "public void setReferencedColumnNames(java.util.List<java.lang.String>)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.table.Index", "net.sf.jsqlparser.statement.create.table.Index()", "public net.sf.jsqlparser.statement.create.table.Index()"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.create.table.Index.getColumnsNames()", "public java.util.List<java.lang.String> getColumnsNames()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.Index.getName()", "public java.lang.String getName()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.Index.getType()", "public java.lang.String getType()"], ["void", "net.sf.jsqlparser.statement.create.table.Index.setColumnsNames(java.util.List<java.lang.String>)", "public void setColumnsNames(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.create.table.Index.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "net.sf.jsqlparser.statement.create.table.Index.setType(java.lang.String)", "public void setType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.Index.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.table.NamedConstraint", "net.sf.jsqlparser.statement.create.table.NamedConstraint()", "public net.sf.jsqlparser.statement.create.table.NamedConstraint()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.NamedConstraint.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.create.view.CreateView", "net.sf.jsqlparser.statement.create.view.CreateView()", "public net.sf.jsqlparser.statement.create.view.CreateView()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.view.CreateView.getView()", "public net.sf.jsqlparser.schema.Table getView()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setView(net.sf.jsqlparser.schema.Table)", "public void setView(net.sf.jsqlparser.schema.Table)"], ["boolean", "net.sf.jsqlparser.statement.create.view.CreateView.isOrReplace()", "public boolean isOrReplace()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setOrReplace(boolean)", "public void setOrReplace(boolean)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.create.view.CreateView.getSelectBody()", "public net.sf.jsqlparser.statement.select.SelectBody getSelectBody()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)", "public void setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.create.view.CreateView.getColumnNames()", "public java.util.List<java.lang.String> getColumnNames()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setColumnNames(java.util.List<java.lang.String>)", "public void setColumnNames(java.util.List<java.lang.String>)"], ["boolean", "net.sf.jsqlparser.statement.create.view.CreateView.isMaterialized()", "public boolean isMaterialized()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setMaterialized(boolean)", "public void setMaterialized(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.view.CreateView.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.delete.Delete", "net.sf.jsqlparser.statement.delete.Delete()", "public net.sf.jsqlparser.statement.delete.Delete()"], ["void", "net.sf.jsqlparser.statement.delete.Delete.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.delete.Delete.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.delete.Delete.getWhere()", "public net.sf.jsqlparser.expression.Expression getWhere()"], ["void", "net.sf.jsqlparser.statement.delete.Delete.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.delete.Delete.setWhere(net.sf.jsqlparser.expression.Expression)", "public void setWhere(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.delete.Delete.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.drop.Drop", "net.sf.jsqlparser.statement.drop.Drop()", "public net.sf.jsqlparser.statement.drop.Drop()"], ["void", "net.sf.jsqlparser.statement.drop.Drop.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.drop.Drop.getName()", "public net.sf.jsqlparser.schema.Table getName()"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.drop.Drop.getParameters()", "public java.util.List<java.lang.String> getParameters()"], ["java.lang.String", "net.sf.jsqlparser.statement.drop.Drop.getType()", "public java.lang.String getType()"], ["void", "net.sf.jsqlparser.statement.drop.Drop.setName(net.sf.jsqlparser.schema.Table)", "public void setName(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.drop.Drop.setParameters(java.util.List<java.lang.String>)", "public void setParameters(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.drop.Drop.setType(java.lang.String)", "public void setType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.drop.Drop.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.execute.Execute", "net.sf.jsqlparser.statement.execute.Execute()", "public net.sf.jsqlparser.statement.execute.Execute()"], ["java.lang.String", "net.sf.jsqlparser.statement.execute.Execute.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.statement.execute.Execute.setName(java.lang.String)", "public void setName(java.lang.String)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.statement.execute.Execute.getExprList()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList getExprList()"], ["void", "net.sf.jsqlparser.statement.execute.Execute.setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.statement.execute.Execute.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.execute.Execute.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.insert.Insert", "net.sf.jsqlparser.statement.insert.Insert()", "public net.sf.jsqlparser.statement.insert.Insert()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.insert.Insert.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["java.util.List<net.sf.jsqlparser.schema.Column>", "net.sf.jsqlparser.statement.insert.Insert.getColumns()", "public java.util.List<net.sf.jsqlparser.schema.Column> getColumns()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)", "public void setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.statement.insert.Insert.getItemsList()", "public net.sf.jsqlparser.expression.operators.relational.ItemsList getItemsList()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)", "public void setItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["boolean", "net.sf.jsqlparser.statement.insert.Insert.isUseValues()", "public boolean isUseValues()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setUseValues(boolean)", "public void setUseValues(boolean)"], ["boolean", "net.sf.jsqlparser.statement.insert.Insert.isReturningAllColumns()", "public boolean isReturningAllColumns()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setReturningAllColumns(boolean)", "public void setReturningAllColumns(boolean)"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>", "net.sf.jsqlparser.statement.insert.Insert.getReturningExpressionList()", "public java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem> getReturningExpressionList()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setReturningExpressionList(java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>)", "public void setReturningExpressionList(java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.insert.Insert.getSelect()", "public net.sf.jsqlparser.statement.select.Select getSelect()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setSelect(net.sf.jsqlparser.statement.select.Select)", "public void setSelect(net.sf.jsqlparser.statement.select.Select)"], ["boolean", "net.sf.jsqlparser.statement.insert.Insert.isUseSelectBrackets()", "public boolean isUseSelectBrackets()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setUseSelectBrackets(boolean)", "public void setUseSelectBrackets(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.insert.Insert.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.replace.Replace", "net.sf.jsqlparser.statement.replace.Replace()", "public net.sf.jsqlparser.statement.replace.Replace()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.replace.Replace.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["java.util.List<net.sf.jsqlparser.schema.Column>", "net.sf.jsqlparser.statement.replace.Replace.getColumns()", "public java.util.List<net.sf.jsqlparser.schema.Column> getColumns()"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.statement.replace.Replace.getItemsList()", "public net.sf.jsqlparser.expression.operators.relational.ItemsList getItemsList()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)", "public void setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)", "public void setItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["java.util.List<net.sf.jsqlparser.expression.Expression>", "net.sf.jsqlparser.statement.replace.Replace.getExpressions()", "public java.util.List<net.sf.jsqlparser.expression.Expression> getExpressions()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)", "public void setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["boolean", "net.sf.jsqlparser.statement.replace.Replace.isUseValues()", "public boolean isUseValues()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setUseValues(boolean)", "public void setUseValues(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.replace.Replace.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.AllColumns", "net.sf.jsqlparser.statement.select.AllColumns()", "public net.sf.jsqlparser.statement.select.AllColumns()"], ["void", "net.sf.jsqlparser.statement.select.AllColumns.accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.AllColumns.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.AllTableColumns", "net.sf.jsqlparser.statement.select.AllTableColumns()", "public net.sf.jsqlparser.statement.select.AllTableColumns()"], ["net.sf.jsqlparser.statement.select.AllTableColumns", "net.sf.jsqlparser.statement.select.AllTableColumns(net.sf.jsqlparser.schema.Table)", "public net.sf.jsqlparser.statement.select.AllTableColumns(net.sf.jsqlparser.schema.Table)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.select.AllTableColumns.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.select.AllTableColumns.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.select.AllTableColumns.accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.AllTableColumns.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.Distinct", "net.sf.jsqlparser.statement.select.Distinct()", "public net.sf.jsqlparser.statement.select.Distinct()"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectItem>", "net.sf.jsqlparser.statement.select.Distinct.getOnSelectItems()", "public java.util.List<net.sf.jsqlparser.statement.select.SelectItem> getOnSelectItems()"], ["void", "net.sf.jsqlparser.statement.select.Distinct.setOnSelectItems(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)", "public void setOnSelectItems(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Distinct.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.ExceptOp", "net.sf.jsqlparser.statement.select.ExceptOp()", "public net.sf.jsqlparser.statement.select.ExceptOp()"], ["net.sf.jsqlparser.statement.select.ExpressionListItem", "net.sf.jsqlparser.statement.select.ExpressionListItem()", "public net.sf.jsqlparser.statement.select.ExpressionListItem()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.statement.select.ExpressionListItem.getExpressionList()", "public net.sf.jsqlparser.expression.operators.relational.ExpressionList getExpressionList()"], ["void", "net.sf.jsqlparser.statement.select.ExpressionListItem.setExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void setExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.ExpressionListItem.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["void", "net.sf.jsqlparser.statement.select.ExpressionListItem.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.ExpressionListItem.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.statement.select.Fetch()", "public net.sf.jsqlparser.statement.select.Fetch()"], ["long", "net.sf.jsqlparser.statement.select.Fetch.getRowCount()", "public long getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setRowCount(long)", "public void setRowCount(long)"], ["boolean", "net.sf.jsqlparser.statement.select.Fetch.isFetchJdbcParameter()", "public boolean isFetchJdbcParameter()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Fetch.getFetchParam()", "public java.lang.String getFetchParam()"], ["boolean", "net.sf.jsqlparser.statement.select.Fetch.isFetchParamFirst()", "public boolean isFetchParamFirst()"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setFetchJdbcParameter(boolean)", "public void setFetchJdbcParameter(boolean)"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setFetchParam(java.lang.String)", "public void setFetchParam(java.lang.String)"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setFetchParamFirst(boolean)", "public void setFetchParamFirst(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Fetch.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.First$Keyword[]", "net.sf.jsqlparser.statement.select.First$Keyword.values()", "public static net.sf.jsqlparser.statement.select.First$Keyword[] values()"], ["net.sf.jsqlparser.statement.select.First$Keyword", "net.sf.jsqlparser.statement.select.First$Keyword.valueOf(java.lang.String)", "public static net.sf.jsqlparser.statement.select.First$Keyword valueOf(java.lang.String)"], ["net.sf.jsqlparser.statement.select.First", "net.sf.jsqlparser.statement.select.First()", "public net.sf.jsqlparser.statement.select.First()"], ["java.lang.Long", "net.sf.jsqlparser.statement.select.First.getRowCount()", "public java.lang.Long getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.First.setRowCount(java.lang.Long)", "public void setRowCount(java.lang.Long)"], ["net.sf.jsqlparser.expression.JdbcParameter", "net.sf.jsqlparser.statement.select.First.getJdbcParameter()", "public net.sf.jsqlparser.expression.JdbcParameter getJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.First.setJdbcParameter(net.sf.jsqlparser.expression.JdbcParameter)", "public void setJdbcParameter(net.sf.jsqlparser.expression.JdbcParameter)"], ["net.sf.jsqlparser.statement.select.First$Keyword", "net.sf.jsqlparser.statement.select.First.getKeyword()", "public net.sf.jsqlparser.statement.select.First$Keyword getKeyword()"], ["void", "net.sf.jsqlparser.statement.select.First.setKeyword(net.sf.jsqlparser.statement.select.First$Keyword)", "public void setKeyword(net.sf.jsqlparser.statement.select.First$Keyword)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.First.getVariable()", "public java.lang.String getVariable()"], ["void", "net.sf.jsqlparser.statement.select.First.setVariable(java.lang.String)", "public void setVariable(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.First.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.FromItemVisitorAdapter", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter()", "public net.sf.jsqlparser.statement.select.FromItemVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.schema.Table)", "public void visit(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubJoin)", "public void visit(net.sf.jsqlparser.statement.select.SubJoin)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.LateralSubSelect)", "public void visit(net.sf.jsqlparser.statement.select.LateralSubSelect)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.ValuesList)", "public void visit(net.sf.jsqlparser.statement.select.ValuesList)"], ["net.sf.jsqlparser.statement.select.FunctionItem", "net.sf.jsqlparser.statement.select.FunctionItem()", "public net.sf.jsqlparser.statement.select.FunctionItem()"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.FunctionItem.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["void", "net.sf.jsqlparser.statement.select.FunctionItem.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.expression.Function", "net.sf.jsqlparser.statement.select.FunctionItem.getFunction()", "public net.sf.jsqlparser.expression.Function getFunction()"], ["void", "net.sf.jsqlparser.statement.select.FunctionItem.setFunction(net.sf.jsqlparser.expression.Function)", "public void setFunction(net.sf.jsqlparser.expression.Function)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.FunctionItem.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.IntersectOp", "net.sf.jsqlparser.statement.select.IntersectOp()", "public net.sf.jsqlparser.statement.select.IntersectOp()"], ["net.sf.jsqlparser.statement.select.IntoTableVisitorAdapter", "net.sf.jsqlparser.statement.select.IntoTableVisitorAdapter()", "public net.sf.jsqlparser.statement.select.IntoTableVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.IntoTableVisitorAdapter.visit(net.sf.jsqlparser.schema.Table)", "public void visit(net.sf.jsqlparser.schema.Table)"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.statement.select.Join()", "public net.sf.jsqlparser.statement.select.Join()"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isSimple()", "public boolean isSimple()"], ["void", "net.sf.jsqlparser.statement.select.Join.setSimple(boolean)", "public void setSimple(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isInner()", "public boolean isInner()"], ["void", "net.sf.jsqlparser.statement.select.Join.setInner(boolean)", "public void setInner(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isOuter()", "public boolean isOuter()"], ["void", "net.sf.jsqlparser.statement.select.Join.setOuter(boolean)", "public void setOuter(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isLeft()", "public boolean isLeft()"], ["void", "net.sf.jsqlparser.statement.select.Join.setLeft(boolean)", "public void setLeft(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isRight()", "public boolean isRight()"], ["void", "net.sf.jsqlparser.statement.select.Join.setRight(boolean)", "public void setRight(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isNatural()", "public boolean isNatural()"], ["void", "net.sf.jsqlparser.statement.select.Join.setNatural(boolean)", "public void setNatural(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isFull()", "public boolean isFull()"], ["void", "net.sf.jsqlparser.statement.select.Join.setFull(boolean)", "public void setFull(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isCross()", "public boolean isCross()"], ["void", "net.sf.jsqlparser.statement.select.Join.setCross(boolean)", "public void setCross(boolean)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.select.Join.getRightItem()", "public net.sf.jsqlparser.statement.select.FromItem getRightItem()"], ["void", "net.sf.jsqlparser.statement.select.Join.setRightItem(net.sf.jsqlparser.statement.select.FromItem)", "public void setRightItem(net.sf.jsqlparser.statement.select.FromItem)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.Join.getOnExpression()", "public net.sf.jsqlparser.expression.Expression getOnExpression()"], ["void", "net.sf.jsqlparser.statement.select.Join.setOnExpression(net.sf.jsqlparser.expression.Expression)", "public void setOnExpression(net.sf.jsqlparser.expression.Expression)"], ["java.util.List<net.sf.jsqlparser.schema.Column>", "net.sf.jsqlparser.statement.select.Join.getUsingColumns()", "public java.util.List<net.sf.jsqlparser.schema.Column> getUsingColumns()"], ["void", "net.sf.jsqlparser.statement.select.Join.setUsingColumns(java.util.List<net.sf.jsqlparser.schema.Column>)", "public void setUsingColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Join.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.LateralSubSelect", "net.sf.jsqlparser.statement.select.LateralSubSelect()", "public net.sf.jsqlparser.statement.select.LateralSubSelect()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.setSubSelect(net.sf.jsqlparser.statement.select.SubSelect)", "public void setSubSelect(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.statement.select.LateralSubSelect.getSubSelect()", "public net.sf.jsqlparser.statement.select.SubSelect getSubSelect()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.LateralSubSelect.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.LateralSubSelect.getPivot()", "public net.sf.jsqlparser.statement.select.Pivot getPivot()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.setPivot(net.sf.jsqlparser.statement.select.Pivot)", "public void setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.LateralSubSelect.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.statement.select.Limit()", "public net.sf.jsqlparser.statement.select.Limit()"], ["long", "net.sf.jsqlparser.statement.select.Limit.getOffset()", "public long getOffset()"], ["long", "net.sf.jsqlparser.statement.select.Limit.getRowCount()", "public long getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setOffset(long)", "public void setOffset(long)"], ["void", "net.sf.jsqlparser.statement.select.Limit.setRowCount(long)", "public void setRowCount(long)"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isOffsetJdbcParameter()", "public boolean isOffsetJdbcParameter()"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isRowCountJdbcParameter()", "public boolean isRowCountJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setOffsetJdbcParameter(boolean)", "public void setOffsetJdbcParameter(boolean)"], ["void", "net.sf.jsqlparser.statement.select.Limit.setRowCountJdbcParameter(boolean)", "public void setRowCountJdbcParameter(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isLimitAll()", "public boolean isLimitAll()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setLimitAll(boolean)", "public void setLimitAll(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isLimitNull()", "public boolean isLimitNull()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setLimitNull(boolean)", "public void setLimitNull(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Limit.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.MinusOp", "net.sf.jsqlparser.statement.select.MinusOp()", "public net.sf.jsqlparser.statement.select.MinusOp()"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.statement.select.Offset()", "public net.sf.jsqlparser.statement.select.Offset()"], ["long", "net.sf.jsqlparser.statement.select.Offset.getOffset()", "public long getOffset()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Offset.getOffsetParam()", "public java.lang.String getOffsetParam()"], ["void", "net.sf.jsqlparser.statement.select.Offset.setOffset(long)", "public void setOffset(long)"], ["void", "net.sf.jsqlparser.statement.select.Offset.setOffsetParam(java.lang.String)", "public void setOffsetParam(java.lang.String)"], ["boolean", "net.sf.jsqlparser.statement.select.Offset.isOffsetJdbcParameter()", "public boolean isOffsetJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Offset.setOffsetJdbcParameter(boolean)", "public void setOffsetJdbcParameter(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Offset.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering[]", "net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering.values()", "public static net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering[] values()"], ["net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering", "net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering.valueOf(java.lang.String)", "public static net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering valueOf(java.lang.String)"], ["net.sf.jsqlparser.statement.select.OrderByElement", "net.sf.jsqlparser.statement.select.OrderByElement()", "public net.sf.jsqlparser.statement.select.OrderByElement()"], ["boolean", "net.sf.jsqlparser.statement.select.OrderByElement.isAsc()", "public boolean isAsc()"], ["net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering", "net.sf.jsqlparser.statement.select.OrderByElement.getNullOrdering()", "public net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering getNullOrdering()"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setNullOrdering(net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering)", "public void setNullOrdering(net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering)"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setAsc(boolean)", "public void setAsc(boolean)"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setAscDescPresent(boolean)", "public void setAscDescPresent(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.OrderByElement.isAscDescPresent()", "public boolean isAscDescPresent()"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.accept(net.sf.jsqlparser.statement.select.OrderByVisitor)", "public void accept(net.sf.jsqlparser.statement.select.OrderByVisitor)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.OrderByElement.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setExpression(net.sf.jsqlparser.expression.Expression)", "public void setExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.OrderByElement.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.OrderByVisitorAdapter", "net.sf.jsqlparser.statement.select.OrderByVisitorAdapter()", "public net.sf.jsqlparser.statement.select.OrderByVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.OrderByVisitorAdapter.visit(net.sf.jsqlparser.statement.select.OrderByElement)", "public void visit(net.sf.jsqlparser.statement.select.OrderByElement)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.Pivot()", "public net.sf.jsqlparser.statement.select.Pivot()"], ["void", "net.sf.jsqlparser.statement.select.Pivot.accept(net.sf.jsqlparser.statement.select.PivotVisitor)", "public void accept(net.sf.jsqlparser.statement.select.PivotVisitor)"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>", "net.sf.jsqlparser.statement.select.Pivot.getSingleInItems()", "public java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem> getSingleInItems()"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setSingleInItems(java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>)", "public void setSingleInItems(java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>)"], ["java.util.List<net.sf.jsqlparser.statement.select.ExpressionListItem>", "net.sf.jsqlparser.statement.select.Pivot.getMultiInItems()", "public java.util.List<net.sf.jsqlparser.statement.select.ExpressionListItem> getMultiInItems()"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setMultiInItems(java.util.List<net.sf.jsqlparser.statement.select.ExpressionListItem>)", "public void setMultiInItems(java.util.List<net.sf.jsqlparser.statement.select.ExpressionListItem>)"], ["java.util.List<net.sf.jsqlparser.statement.select.FunctionItem>", "net.sf.jsqlparser.statement.select.Pivot.getFunctionItems()", "public java.util.List<net.sf.jsqlparser.statement.select.FunctionItem> getFunctionItems()"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setFunctionItems(java.util.List<net.sf.jsqlparser.statement.select.FunctionItem>)", "public void setFunctionItems(java.util.List<net.sf.jsqlparser.statement.select.FunctionItem>)"], ["java.util.List<net.sf.jsqlparser.schema.Column>", "net.sf.jsqlparser.statement.select.Pivot.getForColumns()", "public java.util.List<net.sf.jsqlparser.schema.Column> getForColumns()"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setForColumns(java.util.List<net.sf.jsqlparser.schema.Column>)", "public void setForColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["java.util.List<?>", "net.sf.jsqlparser.statement.select.Pivot.getInItems()", "public java.util.List<?> getInItems()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Pivot.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.PivotVisitorAdapter", "net.sf.jsqlparser.statement.select.PivotVisitorAdapter()", "public net.sf.jsqlparser.statement.select.PivotVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.PivotVisitorAdapter.visit(net.sf.jsqlparser.statement.select.Pivot)", "public void visit(net.sf.jsqlparser.statement.select.Pivot)"], ["void", "net.sf.jsqlparser.statement.select.PivotVisitorAdapter.visit(net.sf.jsqlparser.statement.select.PivotXml)", "public void visit(net.sf.jsqlparser.statement.select.PivotXml)"], ["net.sf.jsqlparser.statement.select.PivotXml", "net.sf.jsqlparser.statement.select.PivotXml()", "public net.sf.jsqlparser.statement.select.PivotXml()"], ["void", "net.sf.jsqlparser.statement.select.PivotXml.accept(net.sf.jsqlparser.statement.select.PivotVisitor)", "public void accept(net.sf.jsqlparser.statement.select.PivotVisitor)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.PivotXml.getInSelect()", "public net.sf.jsqlparser.statement.select.SelectBody getInSelect()"], ["void", "net.sf.jsqlparser.statement.select.PivotXml.setInSelect(net.sf.jsqlparser.statement.select.SelectBody)", "public void setInSelect(net.sf.jsqlparser.statement.select.SelectBody)"], ["boolean", "net.sf.jsqlparser.statement.select.PivotXml.isInAny()", "public boolean isInAny()"], ["void", "net.sf.jsqlparser.statement.select.PivotXml.setInAny(boolean)", "public void setInAny(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PivotXml.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.PlainSelect", "net.sf.jsqlparser.statement.select.PlainSelect()", "public net.sf.jsqlparser.statement.select.PlainSelect()"], ["boolean", "net.sf.jsqlparser.statement.select.PlainSelect.isUseBrackets()", "public boolean isUseBrackets()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setUseBrackets(boolean)", "public void setUseBrackets(boolean)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.select.PlainSelect.getFromItem()", "public net.sf.jsqlparser.statement.select.FromItem getFromItem()"], ["java.util.List<net.sf.jsqlparser.schema.Table>", "net.sf.jsqlparser.statement.select.PlainSelect.getIntoTables()", "public java.util.List<net.sf.jsqlparser.schema.Table> getIntoTables()"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectItem>", "net.sf.jsqlparser.statement.select.PlainSelect.getSelectItems()", "public java.util.List<net.sf.jsqlparser.statement.select.SelectItem> getSelectItems()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.PlainSelect.getWhere()", "public net.sf.jsqlparser.expression.Expression getWhere()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setFromItem(net.sf.jsqlparser.statement.select.FromItem)", "public void setFromItem(net.sf.jsqlparser.statement.select.FromItem)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setIntoTables(java.util.List<net.sf.jsqlparser.schema.Table>)", "public void setIntoTables(java.util.List<net.sf.jsqlparser.schema.Table>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setSelectItems(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)", "public void setSelectItems(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.addSelectItems(net.sf.jsqlparser.statement.select.SelectItem...)", "public void addSelectItems(net.sf.jsqlparser.statement.select.SelectItem...)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setWhere(net.sf.jsqlparser.expression.Expression)", "public void setWhere(net.sf.jsqlparser.expression.Expression)"], ["java.util.List<net.sf.jsqlparser.statement.select.Join>", "net.sf.jsqlparser.statement.select.PlainSelect.getJoins()", "public java.util.List<net.sf.jsqlparser.statement.select.Join> getJoins()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setJoins(java.util.List<net.sf.jsqlparser.statement.select.Join>)", "public void setJoins(java.util.List<net.sf.jsqlparser.statement.select.Join>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.accept(net.sf.jsqlparser.statement.select.SelectVisitor)", "public void accept(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>", "net.sf.jsqlparser.statement.select.PlainSelect.getOrderByElements()", "public java.util.List<net.sf.jsqlparser.statement.select.OrderByElement> getOrderByElements()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.statement.select.PlainSelect.getLimit()", "public net.sf.jsqlparser.statement.select.Limit getLimit()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setLimit(net.sf.jsqlparser.statement.select.Limit)", "public void setLimit(net.sf.jsqlparser.statement.select.Limit)"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.statement.select.PlainSelect.getOffset()", "public net.sf.jsqlparser.statement.select.Offset getOffset()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOffset(net.sf.jsqlparser.statement.select.Offset)", "public void setOffset(net.sf.jsqlparser.statement.select.Offset)"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.statement.select.PlainSelect.getFetch()", "public net.sf.jsqlparser.statement.select.Fetch getFetch()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setFetch(net.sf.jsqlparser.statement.select.Fetch)", "public void setFetch(net.sf.jsqlparser.statement.select.Fetch)"], ["net.sf.jsqlparser.statement.select.Top", "net.sf.jsqlparser.statement.select.PlainSelect.getTop()", "public net.sf.jsqlparser.statement.select.Top getTop()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setTop(net.sf.jsqlparser.statement.select.Top)", "public void setTop(net.sf.jsqlparser.statement.select.Top)"], ["net.sf.jsqlparser.statement.select.Skip", "net.sf.jsqlparser.statement.select.PlainSelect.getSkip()", "public net.sf.jsqlparser.statement.select.Skip getSkip()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setSkip(net.sf.jsqlparser.statement.select.Skip)", "public void setSkip(net.sf.jsqlparser.statement.select.Skip)"], ["net.sf.jsqlparser.statement.select.First", "net.sf.jsqlparser.statement.select.PlainSelect.getFirst()", "public net.sf.jsqlparser.statement.select.First getFirst()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setFirst(net.sf.jsqlparser.statement.select.First)", "public void setFirst(net.sf.jsqlparser.statement.select.First)"], ["net.sf.jsqlparser.statement.select.Distinct", "net.sf.jsqlparser.statement.select.PlainSelect.getDistinct()", "public net.sf.jsqlparser.statement.select.Distinct getDistinct()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setDistinct(net.sf.jsqlparser.statement.select.Distinct)", "public void setDistinct(net.sf.jsqlparser.statement.select.Distinct)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.PlainSelect.getHaving()", "public net.sf.jsqlparser.expression.Expression getHaving()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setHaving(net.sf.jsqlparser.expression.Expression)", "public void setHaving(net.sf.jsqlparser.expression.Expression)"], ["java.util.List<net.sf.jsqlparser.expression.Expression>", "net.sf.jsqlparser.statement.select.PlainSelect.getGroupByColumnReferences()", "public java.util.List<net.sf.jsqlparser.expression.Expression> getGroupByColumnReferences()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setGroupByColumnReferences(java.util.List<net.sf.jsqlparser.expression.Expression>)", "public void setGroupByColumnReferences(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.addGroupByColumnReference(net.sf.jsqlparser.expression.Expression)", "public void addGroupByColumnReference(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.OracleHierarchicalExpression", "net.sf.jsqlparser.statement.select.PlainSelect.getOracleHierarchical()", "public net.sf.jsqlparser.expression.OracleHierarchicalExpression getOracleHierarchical()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOracleHierarchical(net.sf.jsqlparser.expression.OracleHierarchicalExpression)", "public void setOracleHierarchical(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["boolean", "net.sf.jsqlparser.statement.select.PlainSelect.isOracleSiblings()", "public boolean isOracleSiblings()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOracleSiblings(boolean)", "public void setOracleSiblings(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.PlainSelect.isForUpdate()", "public boolean isForUpdate()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setForUpdate(boolean)", "public void setForUpdate(boolean)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.select.PlainSelect.getForUpdateTable()", "public net.sf.jsqlparser.schema.Table getForUpdateTable()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setForUpdateTable(net.sf.jsqlparser.schema.Table)", "public void setForUpdateTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.toString()", "public java.lang.String toString()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.orderByToString(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public static java.lang.String orderByToString(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.orderByToString(boolean, java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public static java.lang.String orderByToString(boolean, java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getFormatedList(java.util.List<?>, java.lang.String)", "public static java.lang.String getFormatedList(java.util.List<?>, java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getFormatedList(java.util.List<?>, java.lang.String, boolean, boolean)", "public static java.lang.String getFormatedList(java.util.List<?>, java.lang.String, boolean, boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getStringList(java.util.List<?>)", "public static java.lang.String getStringList(java.util.List<?>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getStringList(java.util.List<?>, boolean, boolean)", "public static java.lang.String getStringList(java.util.List<?>, boolean, boolean)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.select.Select()", "public net.sf.jsqlparser.statement.select.Select()"], ["void", "net.sf.jsqlparser.statement.select.Select.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.Select.getSelectBody()", "public net.sf.jsqlparser.statement.select.SelectBody getSelectBody()"], ["void", "net.sf.jsqlparser.statement.select.Select.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)", "public void setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Select.toString()", "public java.lang.String toString()"], ["java.util.List<net.sf.jsqlparser.statement.select.WithItem>", "net.sf.jsqlparser.statement.select.Select.getWithItemsList()", "public java.util.List<net.sf.jsqlparser.statement.select.WithItem> getWithItemsList()"], ["void", "net.sf.jsqlparser.statement.select.Select.setWithItemsList(java.util.List<net.sf.jsqlparser.statement.select.WithItem>)", "public void setWithItemsList(java.util.List<net.sf.jsqlparser.statement.select.WithItem>)"], ["net.sf.jsqlparser.statement.select.SelectExpressionItem", "net.sf.jsqlparser.statement.select.SelectExpressionItem()", "public net.sf.jsqlparser.statement.select.SelectExpressionItem()"], ["net.sf.jsqlparser.statement.select.SelectExpressionItem", "net.sf.jsqlparser.statement.select.SelectExpressionItem(net.sf.jsqlparser.expression.Expression)", "public net.sf.jsqlparser.statement.select.SelectExpressionItem(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.SelectExpressionItem.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.SelectExpressionItem.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.statement.select.SelectExpressionItem.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["void", "net.sf.jsqlparser.statement.select.SelectExpressionItem.setExpression(net.sf.jsqlparser.expression.Expression)", "public void setExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.statement.select.SelectExpressionItem.accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SelectExpressionItem.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter()", "public net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllTableColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)", "public void visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["net.sf.jsqlparser.statement.select.SelectVisitorAdapter", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter()", "public net.sf.jsqlparser.statement.select.SelectVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter.visit(net.sf.jsqlparser.statement.select.PlainSelect)", "public void visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SetOperationList)", "public void visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter.visit(net.sf.jsqlparser.statement.select.WithItem)", "public void visit(net.sf.jsqlparser.statement.select.WithItem)"], ["net.sf.jsqlparser.statement.select.SetOperation", "net.sf.jsqlparser.statement.select.SetOperation(net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType)", "public net.sf.jsqlparser.statement.select.SetOperation(net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SetOperation.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType[]", "net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType.values()", "public static net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType[] values()"], ["net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType", "net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType.valueOf(java.lang.String)", "public static net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType valueOf(java.lang.String)"], ["net.sf.jsqlparser.statement.select.SetOperationList", "net.sf.jsqlparser.statement.select.SetOperationList()", "public net.sf.jsqlparser.statement.select.SetOperationList()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.accept(net.sf.jsqlparser.statement.select.SelectVisitor)", "public void accept(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>", "net.sf.jsqlparser.statement.select.SetOperationList.getOrderByElements()", "public java.util.List<net.sf.jsqlparser.statement.select.OrderByElement> getOrderByElements()"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectBody>", "net.sf.jsqlparser.statement.select.SetOperationList.getSelects()", "public java.util.List<net.sf.jsqlparser.statement.select.SelectBody> getSelects()"], ["java.util.List<net.sf.jsqlparser.statement.select.SetOperation>", "net.sf.jsqlparser.statement.select.SetOperationList.getOperations()", "public java.util.List<net.sf.jsqlparser.statement.select.SetOperation> getOperations()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setOpsAndSelects(java.util.List<net.sf.jsqlparser.statement.select.SelectBody>, java.util.List<net.sf.jsqlparser.statement.select.SetOperation>)", "public void setOpsAndSelects(java.util.List<net.sf.jsqlparser.statement.select.SelectBody>, java.util.List<net.sf.jsqlparser.statement.select.SetOperation>)"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.statement.select.SetOperationList.getLimit()", "public net.sf.jsqlparser.statement.select.Limit getLimit()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setLimit(net.sf.jsqlparser.statement.select.Limit)", "public void setLimit(net.sf.jsqlparser.statement.select.Limit)"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.statement.select.SetOperationList.getOffset()", "public net.sf.jsqlparser.statement.select.Offset getOffset()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setOffset(net.sf.jsqlparser.statement.select.Offset)", "public void setOffset(net.sf.jsqlparser.statement.select.Offset)"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.statement.select.SetOperationList.getFetch()", "public net.sf.jsqlparser.statement.select.Fetch getFetch()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setFetch(net.sf.jsqlparser.statement.select.Fetch)", "public void setFetch(net.sf.jsqlparser.statement.select.Fetch)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SetOperationList.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.Skip", "net.sf.jsqlparser.statement.select.Skip()", "public net.sf.jsqlparser.statement.select.Skip()"], ["java.lang.Long", "net.sf.jsqlparser.statement.select.Skip.getRowCount()", "public java.lang.Long getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Skip.setRowCount(java.lang.Long)", "public void setRowCount(java.lang.Long)"], ["net.sf.jsqlparser.expression.JdbcParameter", "net.sf.jsqlparser.statement.select.Skip.getJdbcParameter()", "public net.sf.jsqlparser.expression.JdbcParameter getJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Skip.setJdbcParameter(net.sf.jsqlparser.expression.JdbcParameter)", "public void setJdbcParameter(net.sf.jsqlparser.expression.JdbcParameter)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Skip.getVariable()", "public java.lang.String getVariable()"], ["void", "net.sf.jsqlparser.statement.select.Skip.setVariable(java.lang.String)", "public void setVariable(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Skip.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.SubJoin", "net.sf.jsqlparser.statement.select.SubJoin()", "public net.sf.jsqlparser.statement.select.SubJoin()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.select.SubJoin.getLeft()", "public net.sf.jsqlparser.statement.select.FromItem getLeft()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setLeft(net.sf.jsqlparser.statement.select.FromItem)", "public void setLeft(net.sf.jsqlparser.statement.select.FromItem)"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.statement.select.SubJoin.getJoin()", "public net.sf.jsqlparser.statement.select.Join getJoin()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setJoin(net.sf.jsqlparser.statement.select.Join)", "public void setJoin(net.sf.jsqlparser.statement.select.Join)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.SubJoin.getPivot()", "public net.sf.jsqlparser.statement.select.Pivot getPivot()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setPivot(net.sf.jsqlparser.statement.select.Pivot)", "public void setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.SubJoin.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SubJoin.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.statement.select.SubSelect()", "public net.sf.jsqlparser.statement.select.SubSelect()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.SubSelect.getSelectBody()", "public net.sf.jsqlparser.statement.select.SelectBody getSelectBody()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)", "public void setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.accept(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.SubSelect.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.SubSelect.getPivot()", "public net.sf.jsqlparser.statement.select.Pivot getPivot()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setPivot(net.sf.jsqlparser.statement.select.Pivot)", "public void setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["boolean", "net.sf.jsqlparser.statement.select.SubSelect.isUseBrackets()", "public boolean isUseBrackets()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setUseBrackets(boolean)", "public void setUseBrackets(boolean)"], ["java.util.List<net.sf.jsqlparser.statement.select.WithItem>", "net.sf.jsqlparser.statement.select.SubSelect.getWithItemsList()", "public java.util.List<net.sf.jsqlparser.statement.select.WithItem> getWithItemsList()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setWithItemsList(java.util.List<net.sf.jsqlparser.statement.select.WithItem>)", "public void setWithItemsList(java.util.List<net.sf.jsqlparser.statement.select.WithItem>)"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)", "public void accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SubSelect.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.Top", "net.sf.jsqlparser.statement.select.Top()", "public net.sf.jsqlparser.statement.select.Top()"], ["long", "net.sf.jsqlparser.statement.select.Top.getRowCount()", "public long getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Top.setRowCount(long)", "public void setRowCount(long)"], ["boolean", "net.sf.jsqlparser.statement.select.Top.isRowCountJdbcParameter()", "public boolean isRowCountJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Top.setRowCountJdbcParameter(boolean)", "public void setRowCountJdbcParameter(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Top.hasParenthesis()", "public boolean hasParenthesis()"], ["void", "net.sf.jsqlparser.statement.select.Top.setParenthesis(boolean)", "public void setParenthesis(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Top.isPercentage()", "public boolean isPercentage()"], ["void", "net.sf.jsqlparser.statement.select.Top.setPercentage(boolean)", "public void setPercentage(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Top.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.UnionOp", "net.sf.jsqlparser.statement.select.UnionOp()", "public net.sf.jsqlparser.statement.select.UnionOp()"], ["boolean", "net.sf.jsqlparser.statement.select.UnionOp.isAll()", "public boolean isAll()"], ["void", "net.sf.jsqlparser.statement.select.UnionOp.setAll(boolean)", "public void setAll(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.UnionOp.isDistinct()", "public boolean isDistinct()"], ["void", "net.sf.jsqlparser.statement.select.UnionOp.setDistinct(boolean)", "public void setDistinct(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.UnionOp.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.select.ValuesList", "net.sf.jsqlparser.statement.select.ValuesList()", "public net.sf.jsqlparser.statement.select.ValuesList()"], ["net.sf.jsqlparser.statement.select.ValuesList", "net.sf.jsqlparser.statement.select.ValuesList(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public net.sf.jsqlparser.statement.select.ValuesList(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)", "public void accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.ValuesList.getAlias()", "public net.sf.jsqlparser.expression.Alias getAlias()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setAlias(net.sf.jsqlparser.expression.Alias)", "public void setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.ValuesList.getPivot()", "public net.sf.jsqlparser.statement.select.Pivot getPivot()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setPivot(net.sf.jsqlparser.statement.select.Pivot)", "public void setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["net.sf.jsqlparser.expression.operators.relational.MultiExpressionList", "net.sf.jsqlparser.statement.select.ValuesList.getMultiExpressionList()", "public net.sf.jsqlparser.expression.operators.relational.MultiExpressionList getMultiExpressionList()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setMultiExpressionList(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public void setMultiExpressionList(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["boolean", "net.sf.jsqlparser.statement.select.ValuesList.isNoBrackets()", "public boolean isNoBrackets()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setNoBrackets(boolean)", "public void setNoBrackets(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.ValuesList.toString()", "public java.lang.String toString()"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.statement.select.ValuesList.getColumnNames()", "public java.util.List<java.lang.String> getColumnNames()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setColumnNames(java.util.List<java.lang.String>)", "public void setColumnNames(java.util.List<java.lang.String>)"], ["net.sf.jsqlparser.statement.select.WithItem", "net.sf.jsqlparser.statement.select.WithItem()", "public net.sf.jsqlparser.statement.select.WithItem()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.WithItem.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.statement.select.WithItem.isRecursive()", "public boolean isRecursive()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setRecursive(boolean)", "public void setRecursive(boolean)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.WithItem.getSelectBody()", "public net.sf.jsqlparser.statement.select.SelectBody getSelectBody()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)", "public void setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["java.util.List<net.sf.jsqlparser.statement.select.SelectItem>", "net.sf.jsqlparser.statement.select.WithItem.getWithItemList()", "public java.util.List<net.sf.jsqlparser.statement.select.SelectItem> getWithItemList()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setWithItemList(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)", "public void setWithItemList(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.WithItem.toString()", "public java.lang.String toString()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.accept(net.sf.jsqlparser.statement.select.SelectVisitor)", "public void accept(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["net.sf.jsqlparser.statement.SetStatement", "net.sf.jsqlparser.statement.SetStatement(java.lang.String, net.sf.jsqlparser.expression.Expression)", "public net.sf.jsqlparser.statement.SetStatement(java.lang.String, net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.SetStatement.getName()", "public java.lang.String getName()"], ["void", "net.sf.jsqlparser.statement.SetStatement.setName(java.lang.String)", "public void setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.SetStatement.getExpression()", "public net.sf.jsqlparser.expression.Expression getExpression()"], ["void", "net.sf.jsqlparser.statement.SetStatement.setExpression(net.sf.jsqlparser.expression.Expression)", "public void setExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.SetStatement.toString()", "public java.lang.String toString()"], ["void", "net.sf.jsqlparser.statement.SetStatement.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.statement.Statements", "net.sf.jsqlparser.statement.Statements()", "public net.sf.jsqlparser.statement.Statements()"], ["java.util.List<net.sf.jsqlparser.statement.Statement>", "net.sf.jsqlparser.statement.Statements.getStatements()", "public java.util.List<net.sf.jsqlparser.statement.Statement> getStatements()"], ["void", "net.sf.jsqlparser.statement.Statements.setStatements(java.util.List<net.sf.jsqlparser.statement.Statement>)", "public void setStatements(java.util.List<net.sf.jsqlparser.statement.Statement>)"], ["void", "net.sf.jsqlparser.statement.Statements.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.Statements.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.StatementVisitorAdapter", "net.sf.jsqlparser.statement.StatementVisitorAdapter()", "public net.sf.jsqlparser.statement.StatementVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.select.Select)", "public void visit(net.sf.jsqlparser.statement.select.Select)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.delete.Delete)", "public void visit(net.sf.jsqlparser.statement.delete.Delete)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.update.Update)", "public void visit(net.sf.jsqlparser.statement.update.Update)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.insert.Insert)", "public void visit(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.replace.Replace)", "public void visit(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.drop.Drop)", "public void visit(net.sf.jsqlparser.statement.drop.Drop)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.truncate.Truncate)", "public void visit(net.sf.jsqlparser.statement.truncate.Truncate)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.create.index.CreateIndex)", "public void visit(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.create.table.CreateTable)", "public void visit(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.create.view.CreateView)", "public void visit(net.sf.jsqlparser.statement.create.view.CreateView)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.alter.Alter)", "public void visit(net.sf.jsqlparser.statement.alter.Alter)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.Statements)", "public void visit(net.sf.jsqlparser.statement.Statements)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.execute.Execute)", "public void visit(net.sf.jsqlparser.statement.execute.Execute)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.SetStatement)", "public void visit(net.sf.jsqlparser.statement.SetStatement)"], ["net.sf.jsqlparser.statement.truncate.Truncate", "net.sf.jsqlparser.statement.truncate.Truncate()", "public net.sf.jsqlparser.statement.truncate.Truncate()"], ["void", "net.sf.jsqlparser.statement.truncate.Truncate.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.truncate.Truncate.getTable()", "public net.sf.jsqlparser.schema.Table getTable()"], ["void", "net.sf.jsqlparser.statement.truncate.Truncate.setTable(net.sf.jsqlparser.schema.Table)", "public void setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.truncate.Truncate.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.statement.update.Update", "net.sf.jsqlparser.statement.update.Update()", "public net.sf.jsqlparser.statement.update.Update()"], ["void", "net.sf.jsqlparser.statement.update.Update.accept(net.sf.jsqlparser.statement.StatementVisitor)", "public void accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["java.util.List<net.sf.jsqlparser.schema.Table>", "net.sf.jsqlparser.statement.update.Update.getTables()", "public java.util.List<net.sf.jsqlparser.schema.Table> getTables()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.update.Update.getWhere()", "public net.sf.jsqlparser.expression.Expression getWhere()"], ["void", "net.sf.jsqlparser.statement.update.Update.setTables(java.util.List<net.sf.jsqlparser.schema.Table>)", "public void setTables(java.util.List<net.sf.jsqlparser.schema.Table>)"], ["void", "net.sf.jsqlparser.statement.update.Update.setWhere(net.sf.jsqlparser.expression.Expression)", "public void setWhere(net.sf.jsqlparser.expression.Expression)"], ["java.util.List<net.sf.jsqlparser.schema.Column>", "net.sf.jsqlparser.statement.update.Update.getColumns()", "public java.util.List<net.sf.jsqlparser.schema.Column> getColumns()"], ["java.util.List<net.sf.jsqlparser.expression.Expression>", "net.sf.jsqlparser.statement.update.Update.getExpressions()", "public java.util.List<net.sf.jsqlparser.expression.Expression> getExpressions()"], ["void", "net.sf.jsqlparser.statement.update.Update.setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)", "public void setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["void", "net.sf.jsqlparser.statement.update.Update.setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)", "public void setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.update.Update.getFromItem()", "public net.sf.jsqlparser.statement.select.FromItem getFromItem()"], ["void", "net.sf.jsqlparser.statement.update.Update.setFromItem(net.sf.jsqlparser.statement.select.FromItem)", "public void setFromItem(net.sf.jsqlparser.statement.select.FromItem)"], ["java.util.List<net.sf.jsqlparser.statement.select.Join>", "net.sf.jsqlparser.statement.update.Update.getJoins()", "public java.util.List<net.sf.jsqlparser.statement.select.Join> getJoins()"], ["void", "net.sf.jsqlparser.statement.update.Update.setJoins(java.util.List<net.sf.jsqlparser.statement.select.Join>)", "public void setJoins(java.util.List<net.sf.jsqlparser.statement.select.Join>)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.update.Update.getSelect()", "public net.sf.jsqlparser.statement.select.Select getSelect()"], ["void", "net.sf.jsqlparser.statement.update.Update.setSelect(net.sf.jsqlparser.statement.select.Select)", "public void setSelect(net.sf.jsqlparser.statement.select.Select)"], ["boolean", "net.sf.jsqlparser.statement.update.Update.isUseColumnsBrackets()", "public boolean isUseColumnsBrackets()"], ["void", "net.sf.jsqlparser.statement.update.Update.setUseColumnsBrackets(boolean)", "public void setUseColumnsBrackets(boolean)"], ["boolean", "net.sf.jsqlparser.statement.update.Update.isUseSelect()", "public boolean isUseSelect()"], ["void", "net.sf.jsqlparser.statement.update.Update.setUseSelect(boolean)", "public void setUseSelect(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.update.Update.toString()", "public java.lang.String toString()"], ["net.sf.jsqlparser.util.AddAliasesVisitor", "net.sf.jsqlparser.util.AddAliasesVisitor()", "public net.sf.jsqlparser.util.AddAliasesVisitor()"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.PlainSelect)", "public void visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.SetOperationList)", "public void visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.AllTableColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)", "public void visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.setPrefix(java.lang.String)", "public void setPrefix(java.lang.String)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.WithItem)", "public void visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.AllColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["net.sf.jsqlparser.util.ConnectExpressionsVisitor", "net.sf.jsqlparser.util.ConnectExpressionsVisitor()", "public net.sf.jsqlparser.util.ConnectExpressionsVisitor()"], ["net.sf.jsqlparser.util.ConnectExpressionsVisitor", "net.sf.jsqlparser.util.ConnectExpressionsVisitor(java.lang.String)", "public net.sf.jsqlparser.util.ConnectExpressionsVisitor(java.lang.String)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.PlainSelect)", "public void visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.SetOperationList)", "public void visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.WithItem)", "public void visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.AllTableColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.AllColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)", "public void visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["net.sf.jsqlparser.util.deparser.AlterDeParser", "net.sf.jsqlparser.util.deparser.AlterDeParser(java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.AlterDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.AlterDeParser.deParse(net.sf.jsqlparser.statement.alter.Alter)", "public void deParse(net.sf.jsqlparser.statement.alter.Alter)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.AlterDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.AlterDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.CreateIndexDeParser", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser(java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.CreateIndexDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser.deParse(net.sf.jsqlparser.statement.create.index.CreateIndex)", "public void deParse(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.CreateTableDeParser", "net.sf.jsqlparser.util.deparser.CreateTableDeParser(java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.CreateTableDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.CreateTableDeParser.deParse(net.sf.jsqlparser.statement.create.table.CreateTable)", "public void deParse(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.CreateTableDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.CreateTableDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.CreateViewDeParser", "net.sf.jsqlparser.util.deparser.CreateViewDeParser(java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.CreateViewDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.CreateViewDeParser.deParse(net.sf.jsqlparser.statement.create.view.CreateView)", "public void deParse(net.sf.jsqlparser.statement.create.view.CreateView)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.CreateViewDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.CreateViewDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.DeleteDeParser", "net.sf.jsqlparser.util.deparser.DeleteDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.DeleteDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.DeleteDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.DeleteDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.DeleteDeParser.deParse(net.sf.jsqlparser.statement.delete.Delete)", "public void deParse(net.sf.jsqlparser.statement.delete.Delete)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.DeleteDeParser.getExpressionVisitor()", "public net.sf.jsqlparser.expression.ExpressionVisitor getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.DeleteDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.util.deparser.ExecuteDeParser", "net.sf.jsqlparser.util.deparser.ExecuteDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.ExecuteDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.deParse(net.sf.jsqlparser.statement.execute.Execute)", "public void deParse(net.sf.jsqlparser.statement.execute.Execute)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.getExpressionVisitor()", "public net.sf.jsqlparser.expression.ExpressionVisitor getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.util.deparser.ExpressionDeParser", "net.sf.jsqlparser.util.deparser.ExpressionDeParser()", "public net.sf.jsqlparser.util.deparser.ExpressionDeParser()"], ["net.sf.jsqlparser.util.deparser.ExpressionDeParser", "net.sf.jsqlparser.util.deparser.ExpressionDeParser(net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.ExpressionDeParser(net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)", "public void visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.Between)", "public void visit(net.sf.jsqlparser.expression.operators.relational.Between)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)", "public void visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.DoubleValue)", "public void visit(net.sf.jsqlparser.expression.DoubleValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.HexValue)", "public void visit(net.sf.jsqlparser.expression.HexValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visitOldOracleJoinBinaryExpression(net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression, java.lang.String)", "public void visitOldOracleJoinBinaryExpression(net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression, java.lang.String)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)", "public void visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)", "public void visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.InExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.InExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.SignedExpression)", "public void visit(net.sf.jsqlparser.expression.SignedExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.JdbcParameter)", "public void visit(net.sf.jsqlparser.expression.JdbcParameter)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.LongValue)", "public void visit(net.sf.jsqlparser.expression.LongValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)", "public void visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.NullValue)", "public void visit(net.sf.jsqlparser.expression.NullValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)", "public void visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.Parenthesis)", "public void visit(net.sf.jsqlparser.expression.Parenthesis)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.StringValue)", "public void visit(net.sf.jsqlparser.expression.StringValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.schema.Column)", "public void visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.Function)", "public void visit(net.sf.jsqlparser.expression.Function)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.getSelectVisitor()", "public net.sf.jsqlparser.statement.select.SelectVisitor getSelectVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)", "public void setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.DateValue)", "public void visit(net.sf.jsqlparser.expression.DateValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.TimestampValue)", "public void visit(net.sf.jsqlparser.expression.TimestampValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.TimeValue)", "public void visit(net.sf.jsqlparser.expression.TimeValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.CaseExpression)", "public void visit(net.sf.jsqlparser.expression.CaseExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.WhenClause)", "public void visit(net.sf.jsqlparser.expression.WhenClause)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.AllComparisonExpression)", "public void visit(net.sf.jsqlparser.expression.AllComparisonExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.AnyComparisonExpression)", "public void visit(net.sf.jsqlparser.expression.AnyComparisonExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.Matches)", "public void visit(net.sf.jsqlparser.expression.operators.relational.Matches)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.CastExpression)", "public void visit(net.sf.jsqlparser.expression.CastExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.AnalyticExpression)", "public void visit(net.sf.jsqlparser.expression.AnalyticExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.ExtractExpression)", "public void visit(net.sf.jsqlparser.expression.ExtractExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.IntervalExpression)", "public void visit(net.sf.jsqlparser.expression.IntervalExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.JdbcNamedParameter)", "public void visit(net.sf.jsqlparser.expression.JdbcNamedParameter)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)", "public void visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)", "public void visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)", "public void visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.JsonExpression)", "public void visit(net.sf.jsqlparser.expression.JsonExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.WithinGroupExpression)", "public void visit(net.sf.jsqlparser.expression.WithinGroupExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.UserVariable)", "public void visit(net.sf.jsqlparser.expression.UserVariable)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.NumericBind)", "public void visit(net.sf.jsqlparser.expression.NumericBind)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.KeepExpression)", "public void visit(net.sf.jsqlparser.expression.KeepExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.MySQLGroupConcat)", "public void visit(net.sf.jsqlparser.expression.MySQLGroupConcat)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.RowConstructor)", "public void visit(net.sf.jsqlparser.expression.RowConstructor)"], ["net.sf.jsqlparser.util.deparser.InsertDeParser", "net.sf.jsqlparser.util.deparser.InsertDeParser()", "public net.sf.jsqlparser.util.deparser.InsertDeParser()"], ["net.sf.jsqlparser.util.deparser.InsertDeParser", "net.sf.jsqlparser.util.deparser.InsertDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.InsertDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.InsertDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.deParse(net.sf.jsqlparser.statement.insert.Insert)", "public void deParse(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.InsertDeParser.getExpressionVisitor()", "public net.sf.jsqlparser.expression.ExpressionVisitor getExpressionVisitor()"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.util.deparser.InsertDeParser.getSelectVisitor()", "public net.sf.jsqlparser.statement.select.SelectVisitor getSelectVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)", "public void setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["net.sf.jsqlparser.util.deparser.ReplaceDeParser", "net.sf.jsqlparser.util.deparser.ReplaceDeParser()", "public net.sf.jsqlparser.util.deparser.ReplaceDeParser()"], ["net.sf.jsqlparser.util.deparser.ReplaceDeParser", "net.sf.jsqlparser.util.deparser.ReplaceDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.ReplaceDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.deParse(net.sf.jsqlparser.statement.replace.Replace)", "public void deParse(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.getExpressionVisitor()", "public net.sf.jsqlparser.expression.ExpressionVisitor getExpressionVisitor()"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.getSelectVisitor()", "public net.sf.jsqlparser.statement.select.SelectVisitor getSelectVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)", "public void setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["net.sf.jsqlparser.util.deparser.SelectDeParser", "net.sf.jsqlparser.util.deparser.SelectDeParser()", "public net.sf.jsqlparser.util.deparser.SelectDeParser()"], ["net.sf.jsqlparser.util.deparser.SelectDeParser", "net.sf.jsqlparser.util.deparser.SelectDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.SelectDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.PlainSelect)", "public void visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.OrderByElement)", "public void visit(net.sf.jsqlparser.statement.select.OrderByElement)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.schema.Column)", "public void visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.AllTableColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)", "public void visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.schema.Table)", "public void visit(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.Pivot)", "public void visit(net.sf.jsqlparser.statement.select.Pivot)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.PivotXml)", "public void visit(net.sf.jsqlparser.statement.select.PivotXml)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseOrderBy(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void deparseOrderBy(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseOrderBy(boolean, java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)", "public void deparseOrderBy(boolean, java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseLimit(net.sf.jsqlparser.statement.select.Limit)", "public void deparseLimit(net.sf.jsqlparser.statement.select.Limit)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseOffset(net.sf.jsqlparser.statement.select.Offset)", "public void deparseOffset(net.sf.jsqlparser.statement.select.Offset)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseFetch(net.sf.jsqlparser.statement.select.Fetch)", "public void deparseFetch(net.sf.jsqlparser.statement.select.Fetch)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.SelectDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.SelectDeParser.getExpressionVisitor()", "public net.sf.jsqlparser.expression.ExpressionVisitor getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SubJoin)", "public void visit(net.sf.jsqlparser.statement.select.SubJoin)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseJoin(net.sf.jsqlparser.statement.select.Join)", "public void deparseJoin(net.sf.jsqlparser.statement.select.Join)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SetOperationList)", "public void visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.WithItem)", "public void visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.LateralSubSelect)", "public void visit(net.sf.jsqlparser.statement.select.LateralSubSelect)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.ValuesList)", "public void visit(net.sf.jsqlparser.statement.select.ValuesList)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.AllColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["net.sf.jsqlparser.util.deparser.SetStatementDeParser", "net.sf.jsqlparser.util.deparser.SetStatementDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.SetStatementDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.deParse(net.sf.jsqlparser.statement.SetStatement)", "public void deParse(net.sf.jsqlparser.statement.SetStatement)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.getExpressionVisitor()", "public net.sf.jsqlparser.expression.ExpressionVisitor getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.util.deparser.StatementDeParser", "net.sf.jsqlparser.util.deparser.StatementDeParser(java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.StatementDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.create.index.CreateIndex)", "public void visit(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.create.table.CreateTable)", "public void visit(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.create.view.CreateView)", "public void visit(net.sf.jsqlparser.statement.create.view.CreateView)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.delete.Delete)", "public void visit(net.sf.jsqlparser.statement.delete.Delete)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.drop.Drop)", "public void visit(net.sf.jsqlparser.statement.drop.Drop)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.insert.Insert)", "public void visit(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.replace.Replace)", "public void visit(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.select.Select)", "public void visit(net.sf.jsqlparser.statement.select.Select)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.truncate.Truncate)", "public void visit(net.sf.jsqlparser.statement.truncate.Truncate)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.update.Update)", "public void visit(net.sf.jsqlparser.statement.update.Update)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.StatementDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.alter.Alter)", "public void visit(net.sf.jsqlparser.statement.alter.Alter)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.Statements)", "public void visit(net.sf.jsqlparser.statement.Statements)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.execute.Execute)", "public void visit(net.sf.jsqlparser.statement.execute.Execute)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.SetStatement)", "public void visit(net.sf.jsqlparser.statement.SetStatement)"], ["net.sf.jsqlparser.util.deparser.UpdateDeParser", "net.sf.jsqlparser.util.deparser.UpdateDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)", "public net.sf.jsqlparser.util.deparser.UpdateDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.UpdateDeParser.getBuffer()", "public java.lang.StringBuilder getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.UpdateDeParser.setBuffer(java.lang.StringBuilder)", "public void setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.UpdateDeParser.deParse(net.sf.jsqlparser.statement.update.Update)", "public void deParse(net.sf.jsqlparser.statement.update.Update)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.UpdateDeParser.getExpressionVisitor()", "public net.sf.jsqlparser.expression.ExpressionVisitor getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.UpdateDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)", "public void setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.SelectUtils$1.visit(net.sf.jsqlparser.statement.select.PlainSelect)", "public void visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.SelectUtils$1.visit(net.sf.jsqlparser.statement.select.SetOperationList)", "public void visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.SelectUtils$1.visit(net.sf.jsqlparser.statement.select.WithItem)", "public void visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.SelectUtils$2.visit(net.sf.jsqlparser.statement.select.PlainSelect)", "public void visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.SelectUtils$2.visit(net.sf.jsqlparser.statement.select.SetOperationList)", "public void visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.SelectUtils$2.visit(net.sf.jsqlparser.statement.select.WithItem)", "public void visit(net.sf.jsqlparser.statement.select.WithItem)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTableAndExpressions(net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.expression.Expression...)", "public static net.sf.jsqlparser.statement.select.Select buildSelectFromTableAndExpressions(net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.expression.Expression...)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTableAndExpressions(net.sf.jsqlparser.schema.Table, java.lang.String...)", "public static net.sf.jsqlparser.statement.select.Select buildSelectFromTableAndExpressions(net.sf.jsqlparser.schema.Table, java.lang.String...) throws net.sf.jsqlparser.JSQLParserException"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTableAndSelectItems(net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.statement.select.SelectItem...)", "public static net.sf.jsqlparser.statement.select.Select buildSelectFromTableAndSelectItems(net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.statement.select.SelectItem...)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTable(net.sf.jsqlparser.schema.Table)", "public static net.sf.jsqlparser.statement.select.Select buildSelectFromTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.util.SelectUtils.addExpression(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.expression.Expression)", "public static void addExpression(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.util.SelectUtils.addJoin(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.expression.Expression)", "public static net.sf.jsqlparser.statement.select.Join addJoin(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.util.SelectUtils.addGroupBy(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.expression.Expression)", "public static void addGroupBy(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.util.TablesNamesFinder", "net.sf.jsqlparser.util.TablesNamesFinder()", "public net.sf.jsqlparser.util.TablesNamesFinder()"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.util.TablesNamesFinder.getTableList(net.sf.jsqlparser.statement.delete.Delete)", "public java.util.List<java.lang.String> getTableList(net.sf.jsqlparser.statement.delete.Delete)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.util.TablesNamesFinder.getTableList(net.sf.jsqlparser.statement.insert.Insert)", "public java.util.List<java.lang.String> getTableList(net.sf.jsqlparser.statement.insert.Insert)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.util.TablesNamesFinder.getTableList(net.sf.jsqlparser.statement.replace.Replace)", "public java.util.List<java.lang.String> getTableList(net.sf.jsqlparser.statement.replace.Replace)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.util.TablesNamesFinder.getTableList(net.sf.jsqlparser.statement.select.Select)", "public java.util.List<java.lang.String> getTableList(net.sf.jsqlparser.statement.select.Select)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.Select)", "public void visit(net.sf.jsqlparser.statement.select.Select)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.util.TablesNamesFinder.getTableList(net.sf.jsqlparser.statement.update.Update)", "public java.util.List<java.lang.String> getTableList(net.sf.jsqlparser.statement.update.Update)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.util.TablesNamesFinder.getTableList(net.sf.jsqlparser.statement.create.table.CreateTable)", "public java.util.List<java.lang.String> getTableList(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["java.util.List<java.lang.String>", "net.sf.jsqlparser.util.TablesNamesFinder.getTableList(net.sf.jsqlparser.expression.Expression)", "public java.util.List<java.lang.String> getTableList(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.WithItem)", "public void visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.PlainSelect)", "public void visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.schema.Table)", "public void visit(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SubSelect)", "public void visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)", "public void visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.Between)", "public void visit(net.sf.jsqlparser.expression.operators.relational.Between)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.schema.Column)", "public void visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.DoubleValue)", "public void visit(net.sf.jsqlparser.expression.DoubleValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)", "public void visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.Function)", "public void visit(net.sf.jsqlparser.expression.Function)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)", "public void visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)", "public void visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.InExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.InExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.SignedExpression)", "public void visit(net.sf.jsqlparser.expression.SignedExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.JdbcParameter)", "public void visit(net.sf.jsqlparser.expression.JdbcParameter)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.LongValue)", "public void visit(net.sf.jsqlparser.expression.LongValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)", "public void visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.NullValue)", "public void visit(net.sf.jsqlparser.expression.NullValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)", "public void visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.Parenthesis)", "public void visit(net.sf.jsqlparser.expression.Parenthesis)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.StringValue)", "public void visit(net.sf.jsqlparser.expression.StringValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visitBinaryExpression(net.sf.jsqlparser.expression.BinaryExpression)", "public void visitBinaryExpression(net.sf.jsqlparser.expression.BinaryExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.DateValue)", "public void visit(net.sf.jsqlparser.expression.DateValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.TimestampValue)", "public void visit(net.sf.jsqlparser.expression.TimestampValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.TimeValue)", "public void visit(net.sf.jsqlparser.expression.TimeValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.CaseExpression)", "public void visit(net.sf.jsqlparser.expression.CaseExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.WhenClause)", "public void visit(net.sf.jsqlparser.expression.WhenClause)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.AllComparisonExpression)", "public void visit(net.sf.jsqlparser.expression.AllComparisonExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.AnyComparisonExpression)", "public void visit(net.sf.jsqlparser.expression.AnyComparisonExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SubJoin)", "public void visit(net.sf.jsqlparser.statement.select.SubJoin)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.Matches)", "public void visit(net.sf.jsqlparser.expression.operators.relational.Matches)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.CastExpression)", "public void visit(net.sf.jsqlparser.expression.CastExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)", "public void visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.AnalyticExpression)", "public void visit(net.sf.jsqlparser.expression.AnalyticExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SetOperationList)", "public void visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.ExtractExpression)", "public void visit(net.sf.jsqlparser.expression.ExtractExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.LateralSubSelect)", "public void visit(net.sf.jsqlparser.statement.select.LateralSubSelect)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)", "public void visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.ValuesList)", "public void visit(net.sf.jsqlparser.statement.select.ValuesList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.IntervalExpression)", "public void visit(net.sf.jsqlparser.expression.IntervalExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.JdbcNamedParameter)", "public void visit(net.sf.jsqlparser.expression.JdbcNamedParameter)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)", "public void visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)", "public void visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)", "public void visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.JsonExpression)", "public void visit(net.sf.jsqlparser.expression.JsonExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.AllColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.AllTableColumns)", "public void visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)", "public void visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.WithinGroupExpression)", "public void visit(net.sf.jsqlparser.expression.WithinGroupExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.UserVariable)", "public void visit(net.sf.jsqlparser.expression.UserVariable)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.NumericBind)", "public void visit(net.sf.jsqlparser.expression.NumericBind)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.KeepExpression)", "public void visit(net.sf.jsqlparser.expression.KeepExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.MySQLGroupConcat)", "public void visit(net.sf.jsqlparser.expression.MySQLGroupConcat)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.delete.Delete)", "public void visit(net.sf.jsqlparser.statement.delete.Delete)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.update.Update)", "public void visit(net.sf.jsqlparser.statement.update.Update)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.insert.Insert)", "public void visit(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.replace.Replace)", "public void visit(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.drop.Drop)", "public void visit(net.sf.jsqlparser.statement.drop.Drop)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.truncate.Truncate)", "public void visit(net.sf.jsqlparser.statement.truncate.Truncate)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.create.index.CreateIndex)", "public void visit(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.create.table.CreateTable)", "public void visit(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.create.view.CreateView)", "public void visit(net.sf.jsqlparser.statement.create.view.CreateView)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.alter.Alter)", "public void visit(net.sf.jsqlparser.statement.alter.Alter)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.Statements)", "public void visit(net.sf.jsqlparser.statement.Statements)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.execute.Execute)", "public void visit(net.sf.jsqlparser.statement.execute.Execute)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.SetStatement)", "public void visit(net.sf.jsqlparser.statement.SetStatement)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.RowConstructor)", "public void visit(net.sf.jsqlparser.expression.RowConstructor)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.HexValue)", "public void visit(net.sf.jsqlparser.expression.HexValue)"]]}