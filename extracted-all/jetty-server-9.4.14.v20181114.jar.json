{"jetty-server-9.4.14.v20181114.jar": [["org.eclipse.jetty.server.AbstractNetworkConnector", "org.eclipse.jetty.server.AbstractNetworkConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.AbstractNetworkConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.setHost(java.lang.String)", "public void setHost(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNetworkConnector.getHost()", "public java.lang.String getHost()"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.setPort(int)", "public void setPort(int)"], ["int", "org.eclipse.jetty.server.AbstractNetworkConnector.getPort()", "public int getPort()"], ["int", "org.eclipse.jetty.server.AbstractNetworkConnector.getLocalPort()", "public int getLocalPort()"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.open()", "public void open() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AbstractNetworkConnector.close()", "public void close()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.AbstractNetworkConnector.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNetworkConnector.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$1.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.Authentication$Failed", "org.eclipse.jetty.server.Authentication$Failed(java.lang.String)", "public org.eclipse.jetty.server.Authentication$Failed(java.lang.String)"], ["org.eclipse.jetty.server.ConnectorStatistics", "org.eclipse.jetty.server.ConnectorStatistics()", "public org.eclipse.jetty.server.ConnectorStatistics()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.onOpened(org.eclipse.jetty.io.Connection)", "public void onOpened(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.onClosed(org.eclipse.jetty.io.Connection)", "public void onClosed(org.eclipse.jetty.io.Connection)"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getBytesIn()", "public int getBytesIn()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getBytesOut()", "public int getBytesOut()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getConnections()", "public int getConnections()"], ["long", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionDurationMax()", "public long getConnectionDurationMax()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionDurationMean()", "public double getConnectionDurationMean()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionDurationStdDev()", "public double getConnectionDurationStdDev()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesIn()", "public int getMessagesIn()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerConnectionMax()", "public int getMessagesInPerConnectionMax()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerConnectionMean()", "public double getMessagesInPerConnectionMean()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerConnectionStdDev()", "public double getMessagesInPerConnectionStdDev()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionsOpen()", "public int getConnectionsOpen()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getConnectionsOpenMax()", "public int getConnectionsOpenMax()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOut()", "public int getMessagesOut()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerConnectionMax()", "public int getMessagesOutPerConnectionMax()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerConnectionMean()", "public double getMessagesOutPerConnectionMean()"], ["double", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerConnectionStdDev()", "public double getMessagesOutPerConnectionStdDev()"], ["long", "org.eclipse.jetty.server.ConnectorStatistics.getStartedMillis()", "public long getStartedMillis()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesInPerSecond()", "public int getMessagesInPerSecond()"], ["int", "org.eclipse.jetty.server.ConnectorStatistics.getMessagesOutPerSecond()", "public int getMessagesOutPerSecond()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.doStart()", "public void doStart()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.doStop()", "public void doStop()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.reset()", "public void reset()"], ["java.lang.String", "org.eclipse.jetty.server.ConnectorStatistics.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ConnectorStatistics.addToAllConnectors(org.eclipse.jetty.server.Server)", "public static void addToAllConnectors(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.handler.AbstractHandler", "org.eclipse.jetty.server.handler.AbstractHandler()", "public org.eclipse.jetty.server.handler.AbstractHandler()"], ["void", "org.eclipse.jetty.server.handler.AbstractHandler.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.handler.AbstractHandler.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["void", "org.eclipse.jetty.server.handler.AbstractHandler.destroy()", "public void destroy()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler$Context.getContextHandler()", "public org.eclipse.jetty.server.handler.ContextHandler getContextHandler()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.handler.ContextHandler$Context.getContext(java.lang.String)", "public javax.servlet.ServletContext getContext(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getMimeType(java.lang.String)", "public java.lang.String getMimeType(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.handler.ContextHandler$Context.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.net.URL", "org.eclipse.jetty.server.handler.ContextHandler$Context.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.io.InputStream", "org.eclipse.jetty.server.handler.ContextHandler$Context.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$Context.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.log(java.lang.Exception, java.lang.String)", "public void log(java.lang.Exception, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$Context.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["synchronized", "org.eclipse.jetty.server.handler.ContextHandler$Context.java.lang.Object getAttribute(java.lang.String)", "public synchronized java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$Context.getAttributeNames()", "public synchronized java.util.Enumeration<java.lang.String> getAttributeNames()"], ["synchronized", "org.eclipse.jetty.server.handler.ContextHandler$Context.void setAttribute(java.lang.String, java.lang.Object)", "public synchronized void setAttribute(java.lang.String, java.lang.Object)"], ["synchronized", "org.eclipse.jetty.server.handler.ContextHandler$Context.void removeAttribute(java.lang.String)", "public synchronized void removeAttribute(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getServletContextName()", "public java.lang.String getServletContextName()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$Context.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["<T extends java.util.EventListener> void", "org.eclipse.jetty.server.handler.ContextHandler$Context.addListener(T)", "public <T extends java.util.EventListener> void addListener(T)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.addListener(java.lang.Class<? extends java.util.EventListener>)", "public void addListener(java.lang.Class<? extends java.util.EventListener>)"], ["<T extends java.util.EventListener> T", "org.eclipse.jetty.server.handler.ContextHandler$Context.createListener(java.lang.Class<T>)", "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.checkListener(java.lang.Class<? extends java.util.EventListener>)", "public void checkListener(java.lang.Class<? extends java.util.EventListener>) throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.setExtendedListenerTypes(boolean)", "public void setExtendedListenerTypes(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$Context.isExtendedListenerTypes()", "public boolean isExtendedListenerTypes()"], ["java.lang.ClassLoader", "org.eclipse.jetty.server.handler.ContextHandler$Context.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.eclipse.jetty.server.handler.ContextHandler$Context.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)", "public void setJspConfigDescriptor(javax.servlet.descriptor.JspConfigDescriptor)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.declareRoles(java.lang.String...)", "public void declareRoles(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$Context.setEnabled(boolean)", "public void setEnabled(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$Context.isEnabled()", "public boolean isEnabled()"], ["<T> T", "org.eclipse.jetty.server.handler.ContextHandler$Context.createInstance(java.lang.Class<T>)", "public <T> T createInstance(java.lang.Class<T>) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$Context.getVirtualServerName()", "public java.lang.String getVirtualServerName()"], ["org.eclipse.jetty.server.handler.HandlerList", "org.eclipse.jetty.server.handler.HandlerList()", "public org.eclipse.jetty.server.handler.HandlerList()"], ["org.eclipse.jetty.server.handler.HandlerList", "org.eclipse.jetty.server.handler.HandlerList(org.eclipse.jetty.server.Handler...)", "public org.eclipse.jetty.server.handler.HandlerList(org.eclipse.jetty.server.Handler...)"], ["void", "org.eclipse.jetty.server.handler.HandlerList.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.InetAccessHandler", "org.eclipse.jetty.server.handler.InetAccessHandler()", "public org.eclipse.jetty.server.handler.InetAccessHandler()"], ["void", "org.eclipse.jetty.server.handler.InetAccessHandler.include(java.lang.String)", "public void include(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.InetAccessHandler.include(java.lang.String...)", "public void include(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.InetAccessHandler.exclude(java.lang.String)", "public void exclude(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.InetAccessHandler.exclude(java.lang.String...)", "public void exclude(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.InetAccessHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.InetAccessHandler.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.MovedContextHandler", "org.eclipse.jetty.server.handler.MovedContextHandler()", "public org.eclipse.jetty.server.handler.MovedContextHandler()"], ["org.eclipse.jetty.server.handler.MovedContextHandler", "org.eclipse.jetty.server.handler.MovedContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.handler.MovedContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.MovedContextHandler.isDiscardPathInfo()", "public boolean isDiscardPathInfo()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setDiscardPathInfo(boolean)", "public void setDiscardPathInfo(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.MovedContextHandler.getNewContextURL()", "public java.lang.String getNewContextURL()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setNewContextURL(java.lang.String)", "public void setNewContextURL(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.MovedContextHandler.isPermanent()", "public boolean isPermanent()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setPermanent(boolean)", "public void setPermanent(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.MovedContextHandler.isDiscardQuery()", "public boolean isDiscardQuery()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setDiscardQuery(boolean)", "public void setDiscardQuery(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.MovedContextHandler.getExpires()", "public java.lang.String getExpires()"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler.setExpires(java.lang.String)", "public void setExpires(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpChannelState$1.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState$1.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.HttpChannelState$3.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState$3.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpChannelState$State[]", "org.eclipse.jetty.server.HttpChannelState$State.values()", "public static org.eclipse.jetty.server.HttpChannelState$State[] values()"], ["org.eclipse.jetty.server.HttpChannelState$State", "org.eclipse.jetty.server.HttpChannelState$State.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpChannelState$State valueOf(java.lang.String)"], ["org.eclipse.jetty.server.HttpConnection$Content", "org.eclipse.jetty.server.HttpConnection$Content(org.eclipse.jetty.server.HttpConnection, java.nio.ByteBuffer)", "public org.eclipse.jetty.server.HttpConnection$Content(org.eclipse.jetty.server.HttpConnection, java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.server.HttpConnection$Content.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpConnection$Content.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["int", "org.eclipse.jetty.server.HttpInput$3.noContent()", "public int noContent() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$3.toString()", "public java.lang.String toString()"], ["java.io.IOException", "org.eclipse.jetty.server.HttpInput$3.getError()", "public java.io.IOException getError()"], ["java.lang.Throwable", "org.eclipse.jetty.server.HttpInput$3.getError()", "public java.lang.Throwable getError()"], ["java.lang.Throwable", "org.eclipse.jetty.server.HttpInput$ErrorState.getError()", "public java.lang.Throwable getError()"], ["int", "org.eclipse.jetty.server.HttpInput$ErrorState.noContent()", "public int noContent() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$ErrorState.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpOutput$AsyncFlush", "org.eclipse.jetty.server.HttpOutput$AsyncFlush(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.HttpOutput$AsyncFlush(org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.parsedHeader(org.eclipse.jetty.http.HttpField)", "public void parsedHeader(org.eclipse.jetty.http.HttpField)"], ["boolean", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.contentComplete()", "public boolean contentComplete()"], ["boolean", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.messageComplete()", "public boolean messageComplete()"], ["boolean", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.headerComplete()", "public boolean headerComplete()"], ["int", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.getHeaderCacheSize()", "public int getHeaderCacheSize()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.earlyEOF()", "public void earlyEOF()"], ["boolean", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.content(java.nio.ByteBuffer)", "public boolean content(java.nio.ByteBuffer)"], ["boolean", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint$1.startResponse(org.eclipse.jetty.http.HttpVersion, int, java.lang.String)", "public boolean startResponse(org.eclipse.jetty.http.HttpVersion, int, java.lang.String)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.LocalConnector", "org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.LocalConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["java.lang.Object", "org.eclipse.jetty.server.LocalConnector.getTransport()", "public java.lang.Object getTransport()"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector.getResponses(java.lang.String)", "public java.lang.String getResponses(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector.getResponses(java.lang.String, long, java.util.concurrent.TimeUnit)", "public java.lang.String getResponses(java.lang.String, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector.getResponses(java.nio.ByteBuffer)", "public java.nio.ByteBuffer getResponses(java.nio.ByteBuffer) throws java.lang.Exception"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector.getResponses(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit)", "public java.nio.ByteBuffer getResponses(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["org.eclipse.jetty.server.LocalConnector$LocalEndPoint", "org.eclipse.jetty.server.LocalConnector.executeRequest(java.lang.String)", "public org.eclipse.jetty.server.LocalConnector$LocalEndPoint executeRequest(java.lang.String)"], ["org.eclipse.jetty.server.LocalConnector$LocalEndPoint", "org.eclipse.jetty.server.LocalConnector.connect()", "public org.eclipse.jetty.server.LocalConnector$LocalEndPoint connect()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector.getResponse(java.nio.ByteBuffer)", "public java.nio.ByteBuffer getResponse(java.nio.ByteBuffer) throws java.lang.Exception"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector.getResponse(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit)", "public java.nio.ByteBuffer getResponse(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector.getResponse(java.nio.ByteBuffer, boolean, long, java.util.concurrent.TimeUnit)", "public java.nio.ByteBuffer getResponse(java.nio.ByteBuffer, boolean, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector.getResponse(java.lang.String)", "public java.lang.String getResponse(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector.getResponse(java.lang.String, long, java.util.concurrent.TimeUnit)", "public java.lang.String getResponse(java.lang.String, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector.getResponse(java.lang.String, boolean, long, java.util.concurrent.TimeUnit)", "public java.lang.String getResponse(java.lang.String, boolean, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser", "org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser(java.io.InputStream, java.lang.String, javax.servlet.MultipartConfigElement, java.io.File, org.eclipse.jetty.server.Request)", "public org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser(java.io.InputStream, java.lang.String, javax.servlet.MultipartConfigElement, java.io.File, org.eclipse.jetty.server.Request) throws java.io.IOException"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts()"], ["javax.servlet.http.Part", "org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String)"], ["void", "org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser.close()", "public void close()"], ["boolean", "org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser.isEmpty()", "public boolean isEmpty()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyProtocolV1orV2Connection.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyProtocolV1orV2Connection.onFillable()", "public void onFillable()"], ["org.eclipse.jetty.server.Response", "org.eclipse.jetty.server.Response(org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.Response(org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput)"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.Response.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel getHttpChannel()"], ["org.eclipse.jetty.server.HttpOutput", "org.eclipse.jetty.server.Response.getHttpOutput()", "public org.eclipse.jetty.server.HttpOutput getHttpOutput()"], ["boolean", "org.eclipse.jetty.server.Response.isIncluding()", "public boolean isIncluding()"], ["void", "org.eclipse.jetty.server.Response.include()", "public void include()"], ["void", "org.eclipse.jetty.server.Response.included()", "public void included()"], ["void", "org.eclipse.jetty.server.Response.addCookie(org.eclipse.jetty.http.HttpCookie)", "public void addCookie(org.eclipse.jetty.http.HttpCookie)"], ["void", "org.eclipse.jetty.server.Response.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["void", "org.eclipse.jetty.server.Response.addSetRFC6265Cookie(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, boolean, boolean)", "public void addSetRFC6265Cookie(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, boolean, boolean)"], ["void", "org.eclipse.jetty.server.Response.addSetRFC2965Cookie(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.String, boolean, boolean, int)", "public void addSetRFC2965Cookie(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.String, boolean, boolean, int)"], ["boolean", "org.eclipse.jetty.server.Response.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendProcessing()", "public void sendProcessing() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendRedirect(int, java.lang.String)", "public void sendRedirect(int, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.Response.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.Response.setHeader(org.eclipse.jetty.http.HttpHeader, java.lang.String)", "public void setHeader(org.eclipse.jetty.http.HttpHeader, java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.Response.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.lang.String", "org.eclipse.jetty.server.Response.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.Response.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.Response.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.Response.setStatus(int)", "public void setStatus(int)"], ["void", "org.eclipse.jetty.server.Response.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setStatusWithReason(int, java.lang.String)", "public void setStatusWithReason(int, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Response.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["java.lang.String", "org.eclipse.jetty.server.Response.getContentType()", "public java.lang.String getContentType()"], ["javax.servlet.ServletOutputStream", "org.eclipse.jetty.server.Response.getOutputStream()", "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.server.Response.isWriting()", "public boolean isWriting()"], ["java.io.PrintWriter", "org.eclipse.jetty.server.Response.getWriter()", "public java.io.PrintWriter getWriter() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.setContentLength(int)", "public void setContentLength(int)"], ["long", "org.eclipse.jetty.server.Response.getContentLength()", "public long getContentLength()"], ["boolean", "org.eclipse.jetty.server.Response.isAllContentWritten(long)", "public boolean isAllContentWritten(long)"], ["boolean", "org.eclipse.jetty.server.Response.isContentComplete(long)", "public boolean isContentComplete(long)"], ["void", "org.eclipse.jetty.server.Response.closeOutput()", "public void closeOutput() throws java.io.IOException"], ["long", "org.eclipse.jetty.server.Response.getLongContentLength()", "public long getLongContentLength()"], ["void", "org.eclipse.jetty.server.Response.setLongContentLength(long)", "public void setLongContentLength(long)"], ["void", "org.eclipse.jetty.server.Response.setContentLengthLong(long)", "public void setContentLengthLong(long)"], ["void", "org.eclipse.jetty.server.Response.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.eclipse.jetty.server.Response.setBufferSize(int)", "public void setBufferSize(int)"], ["int", "org.eclipse.jetty.server.Response.getBufferSize()", "public int getBufferSize()"], ["void", "org.eclipse.jetty.server.Response.flushBuffer()", "public void flushBuffer() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Response.reset()", "public void reset()"], ["void", "org.eclipse.jetty.server.Response.reset(boolean)", "public void reset(boolean)"], ["void", "org.eclipse.jetty.server.Response.resetForForward()", "public void resetForForward()"], ["void", "org.eclipse.jetty.server.Response.resetBuffer()", "public void resetBuffer()"], ["void", "org.eclipse.jetty.server.Response.setTrailers(java.util.function.Supplier<org.eclipse.jetty.http.HttpFields>)", "public void setTrailers(java.util.function.Supplier<org.eclipse.jetty.http.HttpFields>)"], ["java.util.function.Supplier<org.eclipse.jetty.http.HttpFields>", "org.eclipse.jetty.server.Response.getTrailers()", "public java.util.function.Supplier<org.eclipse.jetty.http.HttpFields> getTrailers()"], ["org.eclipse.jetty.http.MetaData$Response", "org.eclipse.jetty.server.Response.getCommittedMetaData()", "public org.eclipse.jetty.http.MetaData$Response getCommittedMetaData()"], ["boolean", "org.eclipse.jetty.server.Response.isCommitted()", "public boolean isCommitted()"], ["void", "org.eclipse.jetty.server.Response.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["java.util.Locale", "org.eclipse.jetty.server.Response.getLocale()", "public java.util.Locale getLocale()"], ["int", "org.eclipse.jetty.server.Response.getStatus()", "public int getStatus()"], ["java.lang.String", "org.eclipse.jetty.server.Response.getReason()", "public java.lang.String getReason()"], ["org.eclipse.jetty.http.HttpFields", "org.eclipse.jetty.server.Response.getHttpFields()", "public org.eclipse.jetty.http.HttpFields getHttpFields()"], ["long", "org.eclipse.jetty.server.Response.getContentCount()", "public long getContentCount()"], ["java.lang.String", "org.eclipse.jetty.server.Response.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.Response.putHeaders(org.eclipse.jetty.http.HttpContent, long, boolean)", "public void putHeaders(org.eclipse.jetty.http.HttpContent, long, boolean)"], ["void", "org.eclipse.jetty.server.Response.putHeaders(javax.servlet.http.HttpServletResponse, org.eclipse.jetty.http.HttpContent, long, boolean)", "public static void putHeaders(javax.servlet.http.HttpServletResponse, org.eclipse.jetty.http.HttpContent, long, boolean)"], ["org.eclipse.jetty.server.ServletRequestHttpWrapper", "org.eclipse.jetty.server.ServletRequestHttpWrapper(javax.servlet.ServletRequest)", "public org.eclipse.jetty.server.ServletRequestHttpWrapper(javax.servlet.ServletRequest)"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getAuthType()", "public java.lang.String getAuthType()"], ["javax.servlet.http.Cookie[]", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["long", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["int", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getQueryString()", "public java.lang.String getQueryString()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRemoteUser()", "public java.lang.String getRemoteUser()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isUserInRole(java.lang.String)", "public boolean isUserInRole(java.lang.String)"], ["java.security.Principal", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRequestedSessionId()", "public java.lang.String getRequestedSessionId()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdFromCookie()", "public boolean isRequestedSessionIdFromCookie()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdFromURL()", "public boolean isRequestedSessionIdFromURL()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.isRequestedSessionIdFromUrl()", "public boolean isRequestedSessionIdFromUrl()"], ["boolean", "org.eclipse.jetty.server.ServletRequestHttpWrapper.authenticate(javax.servlet.http.HttpServletResponse)", "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.server.ServletRequestHttpWrapper.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.ServletRequestHttpWrapper.login(java.lang.String, java.lang.String)", "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.ServletRequestHttpWrapper.logout()", "public void logout() throws javax.servlet.ServletException"], ["java.lang.String", "org.eclipse.jetty.server.ServletRequestHttpWrapper.changeSessionId()", "public java.lang.String changeSessionId()"], ["<T extends javax.servlet.http.HttpUpgradeHandler> T", "org.eclipse.jetty.server.ServletRequestHttpWrapper.upgrade(java.lang.Class<T>)", "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.session.AbstractSessionDataStoreFactory", "org.eclipse.jetty.server.session.AbstractSessionDataStoreFactory()", "public org.eclipse.jetty.server.session.AbstractSessionDataStoreFactory()"], ["int", "org.eclipse.jetty.server.session.AbstractSessionDataStoreFactory.getGracePeriodSec()", "public int getGracePeriodSec()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStoreFactory.setGracePeriodSec(int)", "public void setGracePeriodSec(int)"], ["int", "org.eclipse.jetty.server.session.AbstractSessionDataStoreFactory.getSavePeriodSec()", "public int getSavePeriodSec()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStoreFactory.setSavePeriodSec(int)", "public void setSavePeriodSec(int)"], ["org.eclipse.jetty.server.session.DefaultSessionIdManager", "org.eclipse.jetty.server.session.DefaultSessionIdManager(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.session.DefaultSessionIdManager(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.session.DefaultSessionIdManager", "org.eclipse.jetty.server.session.DefaultSessionIdManager(org.eclipse.jetty.server.Server, java.util.Random)", "public org.eclipse.jetty.server.session.DefaultSessionIdManager(org.eclipse.jetty.server.Server, java.util.Random)"], ["void", "org.eclipse.jetty.server.session.DefaultSessionIdManager.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionIdManager.setSessionHouseKeeper(org.eclipse.jetty.server.session.HouseKeeper)", "public void setSessionHouseKeeper(org.eclipse.jetty.server.session.HouseKeeper)"], ["org.eclipse.jetty.server.session.HouseKeeper", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getSessionHouseKeeper()", "public org.eclipse.jetty.server.session.HouseKeeper getSessionHouseKeeper()"], ["java.lang.String", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getWorkerName()", "public java.lang.String getWorkerName()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionIdManager.setWorkerName(java.lang.String)", "public void setWorkerName(java.lang.String)"], ["java.util.Random", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getRandom()", "public java.util.Random getRandom()"], ["synchronized", "org.eclipse.jetty.server.session.DefaultSessionIdManager.void setRandom(java.util.Random)", "public synchronized void setRandom(java.util.Random)"], ["long", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getReseed()", "public long getReseed()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionIdManager.setReseed(long)", "public void setReseed(long)"], ["java.lang.String", "org.eclipse.jetty.server.session.DefaultSessionIdManager.newSessionId(javax.servlet.http.HttpServletRequest, long)", "public java.lang.String newSessionId(javax.servlet.http.HttpServletRequest, long)"], ["java.lang.String", "org.eclipse.jetty.server.session.DefaultSessionIdManager.newSessionId(long)", "public java.lang.String newSessionId(long)"], ["boolean", "org.eclipse.jetty.server.session.DefaultSessionIdManager.isIdInUse(java.lang.String)", "public boolean isIdInUse(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.DefaultSessionIdManager.initRandom()", "public void initRandom()"], ["java.lang.String", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getExtendedId(java.lang.String, javax.servlet.http.HttpServletRequest)", "public java.lang.String getExtendedId(java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getId(java.lang.String)", "public java.lang.String getId(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.DefaultSessionIdManager.expireAll(java.lang.String)", "public void expireAll(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.DefaultSessionIdManager.invalidateAll(java.lang.String)", "public void invalidateAll(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.DefaultSessionIdManager.renewSessionId(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)", "public java.lang.String renewSessionId(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.util.Set<org.eclipse.jetty.server.session.SessionHandler>", "org.eclipse.jetty.server.session.DefaultSessionIdManager.getSessionHandlers()", "public java.util.Set<org.eclipse.jetty.server.session.SessionHandler> getSessionHandlers()"], ["java.lang.String", "org.eclipse.jetty.server.session.DefaultSessionIdManager.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.session.NullSessionDataStore", "org.eclipse.jetty.server.session.NullSessionDataStore()", "public org.eclipse.jetty.server.session.NullSessionDataStore()"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.NullSessionDataStore.doLoad(java.lang.String)", "public org.eclipse.jetty.server.session.SessionData doLoad(java.lang.String) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.NullSessionDataStore.newSessionData(java.lang.String, long, long, long, long)", "public org.eclipse.jetty.server.session.SessionData newSessionData(java.lang.String, long, long, long, long)"], ["boolean", "org.eclipse.jetty.server.session.NullSessionDataStore.delete(java.lang.String)", "public boolean delete(java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.NullSessionDataStore.doStore(java.lang.String, org.eclipse.jetty.server.session.SessionData, long)", "public void doStore(java.lang.String, org.eclipse.jetty.server.session.SessionData, long) throws java.lang.Exception"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.NullSessionDataStore.doGetExpired(java.util.Set<java.lang.String>)", "public java.util.Set<java.lang.String> doGetExpired(java.util.Set<java.lang.String>)"], ["boolean", "org.eclipse.jetty.server.session.NullSessionDataStore.isPassivating()", "public boolean isPassivating()"], ["boolean", "org.eclipse.jetty.server.session.NullSessionDataStore.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.session.Session$1.hasMoreElements()", "public boolean hasMoreElements()"], ["java.lang.String", "org.eclipse.jetty.server.session.Session$1.nextElement()", "public java.lang.String nextElement()"], ["java.lang.Object", "org.eclipse.jetty.server.session.Session$1.nextElement()", "public java.lang.Object nextElement()"], ["org.eclipse.jetty.server.ShutdownMonitor", "org.eclipse.jetty.server.ShutdownMonitor.getInstance()", "public static org.eclipse.jetty.server.ShutdownMonitor getInstance()"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.register(org.eclipse.jetty.util.component.LifeCycle...)", "public static void register(org.eclipse.jetty.util.component.LifeCycle...)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.deregister(org.eclipse.jetty.util.component.LifeCycle)", "public static void deregister(org.eclipse.jetty.util.component.LifeCycle)"], ["boolean", "org.eclipse.jetty.server.ShutdownMonitor.isRegistered(org.eclipse.jetty.util.component.LifeCycle)", "public static boolean isRegistered(org.eclipse.jetty.util.component.LifeCycle)"], ["java.lang.String", "org.eclipse.jetty.server.ShutdownMonitor.getKey()", "public java.lang.String getKey()"], ["int", "org.eclipse.jetty.server.ShutdownMonitor.getPort()", "public int getPort()"], ["boolean", "org.eclipse.jetty.server.ShutdownMonitor.isExitVm()", "public boolean isExitVm()"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setDebug(boolean)", "public void setDebug(boolean)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setExitVm(boolean)", "public void setExitVm(boolean)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setKey(java.lang.String)", "public void setKey(java.lang.String)"], ["void", "org.eclipse.jetty.server.ShutdownMonitor.setPort(int)", "public void setPort(int)"], ["java.lang.String", "org.eclipse.jetty.server.ShutdownMonitor.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.AcceptRateLimit", "org.eclipse.jetty.server.AcceptRateLimit(int, long, java.util.concurrent.TimeUnit, org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.AcceptRateLimit(int, long, java.util.concurrent.TimeUnit, org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.AcceptRateLimit", "org.eclipse.jetty.server.AcceptRateLimit(int, long, java.util.concurrent.TimeUnit, org.eclipse.jetty.server.Connector...)", "public org.eclipse.jetty.server.AcceptRateLimit(int, long, java.util.concurrent.TimeUnit, org.eclipse.jetty.server.Connector...)"], ["int", "org.eclipse.jetty.server.AcceptRateLimit.getAcceptRateLimit()", "public int getAcceptRateLimit()"], ["long", "org.eclipse.jetty.server.AcceptRateLimit.getPeriod()", "public long getPeriod()"], ["java.util.concurrent.TimeUnit", "org.eclipse.jetty.server.AcceptRateLimit.getUnits()", "public java.util.concurrent.TimeUnit getUnits()"], ["int", "org.eclipse.jetty.server.AcceptRateLimit.getRate()", "public int getRate()"], ["long", "org.eclipse.jetty.server.AcceptRateLimit.getMaxRate()", "public long getMaxRate()"], ["void", "org.eclipse.jetty.server.AcceptRateLimit.reset()", "public void reset()"], ["void", "org.eclipse.jetty.server.AcceptRateLimit.onAccepting(java.nio.channels.SelectableChannel)", "public void onAccepting(java.nio.channels.SelectableChannel)"], ["void", "org.eclipse.jetty.server.AcceptRateLimit.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$4.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$5.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.DebugListener$2.requestInitialized(javax.servlet.ServletRequestEvent)", "public void requestInitialized(javax.servlet.ServletRequestEvent)"], ["void", "org.eclipse.jetty.server.DebugListener$2.requestDestroyed(javax.servlet.ServletRequestEvent)", "public void requestDestroyed(javax.servlet.ServletRequestEvent)"], ["org.eclipse.jetty.server.handler.AbstractHandlerContainer", "org.eclipse.jetty.server.handler.AbstractHandlerContainer()", "public org.eclipse.jetty.server.handler.AbstractHandlerContainer()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.getChildHandlers()", "public org.eclipse.jetty.server.Handler[] getChildHandlers()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.getChildHandlersByClass(java.lang.Class<?>)", "public org.eclipse.jetty.server.Handler[] getChildHandlersByClass(java.lang.Class<?>)"], ["<T extends org.eclipse.jetty.server.Handler> T", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.getChildHandlerByClass(java.lang.Class<T>)", "public <T extends org.eclipse.jetty.server.Handler> T getChildHandlerByClass(java.lang.Class<T>)"], ["<T extends org.eclipse.jetty.server.HandlerContainer> T", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.findContainerOf(org.eclipse.jetty.server.HandlerContainer, java.lang.Class<T>, org.eclipse.jetty.server.Handler)", "public static <T extends org.eclipse.jetty.server.HandlerContainer> T findContainerOf(org.eclipse.jetty.server.HandlerContainer, java.lang.Class<T>, org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.AbstractHandlerContainer.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.handler.ContextHandler$Availability[]", "org.eclipse.jetty.server.handler.ContextHandler$Availability.values()", "public static org.eclipse.jetty.server.handler.ContextHandler$Availability[] values()"], ["org.eclipse.jetty.server.handler.ContextHandler$Availability", "org.eclipse.jetty.server.handler.ContextHandler$Availability.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.handler.ContextHandler$Availability valueOf(java.lang.String)"], ["org.eclipse.jetty.server.handler.DebugHandler", "org.eclipse.jetty.server.handler.DebugHandler()", "public org.eclipse.jetty.server.handler.DebugHandler()"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.io.OutputStream", "org.eclipse.jetty.server.handler.DebugHandler.getOutputStream()", "public java.io.OutputStream getOutputStream()"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.setOutputStream(java.io.OutputStream)", "public void setOutputStream(java.io.OutputStream)"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.onOpened(org.eclipse.jetty.io.Connection)", "public void onOpened(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.handler.DebugHandler.onClosed(org.eclipse.jetty.io.Connection)", "public void onClosed(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHttpInputInterceptor$Decoder.decodeChunks(java.nio.ByteBuffer)", "public void decodeChunks(java.nio.ByteBuffer)"], ["org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor(org.eclipse.jetty.server.handler.gzip.GzipFactory, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor, boolean)", "public org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor(org.eclipse.jetty.server.handler.gzip.GzipFactory, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor, boolean)"], ["org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor(org.eclipse.jetty.server.handler.gzip.GzipFactory, org.eclipse.jetty.http.HttpField, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor, boolean)", "public org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor(org.eclipse.jetty.server.handler.gzip.GzipFactory, org.eclipse.jetty.http.HttpField, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor, boolean)"], ["org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor(org.eclipse.jetty.server.handler.gzip.GzipFactory, org.eclipse.jetty.http.HttpField, int, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor, boolean)", "public org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor(org.eclipse.jetty.server.handler.gzip.GzipFactory, org.eclipse.jetty.http.HttpField, int, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor, boolean)"], ["org.eclipse.jetty.server.HttpOutput$Interceptor", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor.getNextInterceptor()", "public org.eclipse.jetty.server.HttpOutput$Interceptor getNextInterceptor()"], ["boolean", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor.isOptimizedForDirectBuffers()", "public boolean isOptimizedForDirectBuffers()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor.write(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)", "public void write(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor.noCompression()", "public void noCompression()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor.noCompressionIfPossible()", "public void noCompressionIfPossible()"], ["boolean", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor.mightCompress()", "public boolean mightCompress()"], ["org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean(java.lang.Object)", "public org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean(java.lang.Object)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.getContextAttributes()", "public java.util.Map<java.lang.String, java.lang.Object> getContextAttributes()"], ["void", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.setContextAttribute(java.lang.String, java.lang.Object)", "public void setContextAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.setContextAttribute(java.lang.String, java.lang.String)", "public void setContextAttribute(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.jmx.ContextHandlerMBean.removeContextAttribute(java.lang.String)", "public void removeContextAttribute(java.lang.String)"], ["org.eclipse.jetty.server.handler.SecuredRedirectHandler", "org.eclipse.jetty.server.handler.SecuredRedirectHandler()", "public org.eclipse.jetty.server.handler.SecuredRedirectHandler()"], ["void", "org.eclipse.jetty.server.handler.SecuredRedirectHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ThreadLimitHandler$Remote", "org.eclipse.jetty.server.handler.ThreadLimitHandler$Remote(org.eclipse.jetty.server.handler.ThreadLimitHandler, java.lang.String, int)", "public org.eclipse.jetty.server.handler.ThreadLimitHandler$Remote(org.eclipse.jetty.server.handler.ThreadLimitHandler, java.lang.String, int)"], ["java.util.concurrent.CompletableFuture<java.io.Closeable>", "org.eclipse.jetty.server.handler.ThreadLimitHandler$Remote.acquire()", "public java.util.concurrent.CompletableFuture<java.io.Closeable> acquire()"], ["void", "org.eclipse.jetty.server.handler.ThreadLimitHandler$Remote.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.handler.ThreadLimitHandler$Remote.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.handler.ThreadLimitHandler", "org.eclipse.jetty.server.handler.ThreadLimitHandler()", "public org.eclipse.jetty.server.handler.ThreadLimitHandler()"], ["org.eclipse.jetty.server.handler.ThreadLimitHandler", "org.eclipse.jetty.server.handler.ThreadLimitHandler(java.lang.String)", "public org.eclipse.jetty.server.handler.ThreadLimitHandler(java.lang.String)"], ["org.eclipse.jetty.server.handler.ThreadLimitHandler", "org.eclipse.jetty.server.handler.ThreadLimitHandler(java.lang.String, boolean)", "public org.eclipse.jetty.server.handler.ThreadLimitHandler(java.lang.String, boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ThreadLimitHandler.isEnabled()", "public boolean isEnabled()"], ["void", "org.eclipse.jetty.server.handler.ThreadLimitHandler.setEnabled(boolean)", "public void setEnabled(boolean)"], ["int", "org.eclipse.jetty.server.handler.ThreadLimitHandler.getThreadLimit()", "public int getThreadLimit()"], ["void", "org.eclipse.jetty.server.handler.ThreadLimitHandler.setThreadLimit(int)", "public void setThreadLimit(int)"], ["void", "org.eclipse.jetty.server.handler.ThreadLimitHandler.include(java.lang.String)", "public void include(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ThreadLimitHandler.exclude(java.lang.String)", "public void exclude(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ThreadLimitHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.HttpChannel$Commit100Callback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.server.HttpChannelState$Async[]", "org.eclipse.jetty.server.HttpChannelState$Async.values()", "public static org.eclipse.jetty.server.HttpChannelState$Async[] values()"], ["org.eclipse.jetty.server.HttpChannelState$Async", "org.eclipse.jetty.server.HttpChannelState$Async.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpChannelState$Async valueOf(java.lang.String)"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration()"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConfiguration(org.eclipse.jetty.server.HttpConfiguration)", "public org.eclipse.jetty.server.HttpConfiguration(org.eclipse.jetty.server.HttpConfiguration)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.addCustomizer(org.eclipse.jetty.server.HttpConfiguration$Customizer)", "public void addCustomizer(org.eclipse.jetty.server.HttpConfiguration$Customizer)"], ["java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer>", "org.eclipse.jetty.server.HttpConfiguration.getCustomizers()", "public java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer> getCustomizers()"], ["<T> T", "org.eclipse.jetty.server.HttpConfiguration.getCustomizer(java.lang.Class<T>)", "public <T> T getCustomizer(java.lang.Class<T>)"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getOutputBufferSize()", "public int getOutputBufferSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getOutputAggregationSize()", "public int getOutputAggregationSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getRequestHeaderSize()", "public int getRequestHeaderSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getResponseHeaderSize()", "public int getResponseHeaderSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getHeaderCacheSize()", "public int getHeaderCacheSize()"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getSecurePort()", "public int getSecurePort()"], ["java.lang.String", "org.eclipse.jetty.server.HttpConfiguration.getSecureScheme()", "public java.lang.String getSecureScheme()"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.isPersistentConnectionsEnabled()", "public boolean isPersistentConnectionsEnabled()"], ["long", "org.eclipse.jetty.server.HttpConfiguration.getIdleTimeout()", "public long getIdleTimeout()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setIdleTimeout(long)", "public void setIdleTimeout(long)"], ["long", "org.eclipse.jetty.server.HttpConfiguration.getBlockingTimeout()", "public long getBlockingTimeout()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setBlockingTimeout(long)", "public void setBlockingTimeout(long)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setPersistentConnectionsEnabled(boolean)", "public void setPersistentConnectionsEnabled(boolean)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSendServerVersion(boolean)", "public void setSendServerVersion(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.getSendServerVersion()", "public boolean getSendServerVersion()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.writePoweredBy(java.lang.Appendable, java.lang.String, java.lang.String)", "public void writePoweredBy(java.lang.Appendable, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSendXPoweredBy(boolean)", "public void setSendXPoweredBy(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.getSendXPoweredBy()", "public boolean getSendXPoweredBy()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSendDateHeader(boolean)", "public void setSendDateHeader(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.getSendDateHeader()", "public boolean getSendDateHeader()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setDelayDispatchUntilContent(boolean)", "public void setDelayDispatchUntilContent(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.isDelayDispatchUntilContent()", "public boolean isDelayDispatchUntilContent()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setCustomizers(java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer>)", "public void setCustomizers(java.util.List<org.eclipse.jetty.server.HttpConfiguration$Customizer>)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setOutputBufferSize(int)", "public void setOutputBufferSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setOutputAggregationSize(int)", "public void setOutputAggregationSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setRequestHeaderSize(int)", "public void setRequestHeaderSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setResponseHeaderSize(int)", "public void setResponseHeaderSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setHeaderCacheSize(int)", "public void setHeaderCacheSize(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSecurePort(int)", "public void setSecurePort(int)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setSecureScheme(java.lang.String)", "public void setSecureScheme(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setFormEncodedMethods(java.lang.String...)", "public void setFormEncodedMethods(java.lang.String...)"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.HttpConfiguration.getFormEncodedMethods()", "public java.util.Set<java.lang.String> getFormEncodedMethods()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.addFormEncodedMethod(java.lang.String)", "public void addFormEncodedMethod(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.isFormEncodedMethod(java.lang.String)", "public boolean isFormEncodedMethod(java.lang.String)"], ["int", "org.eclipse.jetty.server.HttpConfiguration.getMaxErrorDispatches()", "public int getMaxErrorDispatches()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setMaxErrorDispatches(int)", "public void setMaxErrorDispatches(int)"], ["long", "org.eclipse.jetty.server.HttpConfiguration.getMinRequestDataRate()", "public long getMinRequestDataRate()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setMinRequestDataRate(long)", "public void setMinRequestDataRate(long)"], ["long", "org.eclipse.jetty.server.HttpConfiguration.getMinResponseDataRate()", "public long getMinResponseDataRate()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setMinResponseDataRate(long)", "public void setMinResponseDataRate(long)"], ["org.eclipse.jetty.http.CookieCompliance", "org.eclipse.jetty.server.HttpConfiguration.getRequestCookieCompliance()", "public org.eclipse.jetty.http.CookieCompliance getRequestCookieCompliance()"], ["org.eclipse.jetty.http.CookieCompliance", "org.eclipse.jetty.server.HttpConfiguration.getResponseCookieCompliance()", "public org.eclipse.jetty.http.CookieCompliance getResponseCookieCompliance()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setRequestCookieCompliance(org.eclipse.jetty.http.CookieCompliance)", "public void setRequestCookieCompliance(org.eclipse.jetty.http.CookieCompliance)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setResponseCookieCompliance(org.eclipse.jetty.http.CookieCompliance)", "public void setResponseCookieCompliance(org.eclipse.jetty.http.CookieCompliance)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setCookieCompliance(org.eclipse.jetty.http.CookieCompliance)", "public void setCookieCompliance(org.eclipse.jetty.http.CookieCompliance)"], ["org.eclipse.jetty.http.CookieCompliance", "org.eclipse.jetty.server.HttpConfiguration.getCookieCompliance()", "public org.eclipse.jetty.http.CookieCompliance getCookieCompliance()"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.isCookieCompliance(org.eclipse.jetty.http.CookieCompliance)", "public boolean isCookieCompliance(org.eclipse.jetty.http.CookieCompliance)"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setMultiPartFormDataCompliance(org.eclipse.jetty.server.MultiPartFormDataCompliance)", "public void setMultiPartFormDataCompliance(org.eclipse.jetty.server.MultiPartFormDataCompliance)"], ["org.eclipse.jetty.server.MultiPartFormDataCompliance", "org.eclipse.jetty.server.HttpConfiguration.getMultipartFormDataCompliance()", "public org.eclipse.jetty.server.MultiPartFormDataCompliance getMultipartFormDataCompliance()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.setNotifyRemoteAsyncErrors(boolean)", "public void setNotifyRemoteAsyncErrors(boolean)"], ["boolean", "org.eclipse.jetty.server.HttpConfiguration.isNotifyRemoteAsyncErrors()", "public boolean isNotifyRemoteAsyncErrors()"], ["java.lang.String", "org.eclipse.jetty.server.HttpConfiguration.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.server.HttpConfiguration.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.HttpConfiguration.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB", "org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB(org.eclipse.jetty.server.HttpOutput, java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)", "public org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB(org.eclipse.jetty.server.HttpOutput, java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput$ReadableByteChannelWritingCB.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.LowResourceMonitor$1.run()", "public void run()"], ["org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck", "org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor, long)", "public org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor, long)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck.isLowOnResources()", "public boolean isLowOnResources()"], ["long", "org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck.getMaxMemory()", "public long getMaxMemory()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck.setMaxMemory(long)", "public void setMaxMemory(long)"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck.getReason()", "public java.lang.String getReason()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$MemoryLowResourceCheck.toString()", "public java.lang.String toString()"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.NegotiatingServerConnection.getProtocols()", "public java.util.List<java.lang.String> getProtocols()"], ["java.lang.String", "org.eclipse.jetty.server.NegotiatingServerConnection.getDefaultProtocol()", "public java.lang.String getDefaultProtocol()"], ["org.eclipse.jetty.server.Connector", "org.eclipse.jetty.server.NegotiatingServerConnection.getConnector()", "public org.eclipse.jetty.server.Connector getConnector()"], ["javax.net.ssl.SSLEngine", "org.eclipse.jetty.server.NegotiatingServerConnection.getSSLEngine()", "public javax.net.ssl.SSLEngine getSSLEngine()"], ["java.lang.String", "org.eclipse.jetty.server.NegotiatingServerConnection.getProtocol()", "public java.lang.String getProtocol()"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnection.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnection.onFillable()", "public void onFillable()"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnection.close()", "public void close()"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.NetworkTrafficServerConnector", "org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.NetworkTrafficServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["void", "org.eclipse.jetty.server.NetworkTrafficServerConnector.addNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)", "public void addNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)"], ["void", "org.eclipse.jetty.server.NetworkTrafficServerConnector.removeNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)", "public void removeNetworkTrafficListener(org.eclipse.jetty.io.NetworkTrafficListener)"], ["org.eclipse.jetty.server.ProxyConnectionFactory$Transport[]", "org.eclipse.jetty.server.ProxyConnectionFactory$Transport.values()", "public static org.eclipse.jetty.server.ProxyConnectionFactory$Transport[] values()"], ["org.eclipse.jetty.server.ProxyConnectionFactory$Transport", "org.eclipse.jetty.server.ProxyConnectionFactory$Transport.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.ProxyConnectionFactory$Transport valueOf(java.lang.String)"], ["org.eclipse.jetty.server.Request", "org.eclipse.jetty.server.Request.getBaseRequest(javax.servlet.ServletRequest)", "public static org.eclipse.jetty.server.Request getBaseRequest(javax.servlet.ServletRequest)"], ["org.eclipse.jetty.server.Request", "org.eclipse.jetty.server.Request(org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpInput)", "public org.eclipse.jetty.server.Request(org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpInput)"], ["org.eclipse.jetty.http.HttpFields", "org.eclipse.jetty.server.Request.getHttpFields()", "public org.eclipse.jetty.http.HttpFields getHttpFields()"], ["org.eclipse.jetty.http.HttpFields", "org.eclipse.jetty.server.Request.getTrailers()", "public org.eclipse.jetty.http.HttpFields getTrailers()"], ["org.eclipse.jetty.server.HttpInput", "org.eclipse.jetty.server.Request.getHttpInput()", "public org.eclipse.jetty.server.HttpInput getHttpInput()"], ["boolean", "org.eclipse.jetty.server.Request.isPush()", "public boolean isPush()"], ["boolean", "org.eclipse.jetty.server.Request.isPushSupported()", "public boolean isPushSupported()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.Request.getPushBuilder()", "public org.eclipse.jetty.server.PushBuilder getPushBuilder()"], ["void", "org.eclipse.jetty.server.Request.addEventListener(java.util.EventListener)", "public void addEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.Request.extractFormParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)", "public void extractFormParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.Request.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.Request.getHttpChannelState()", "public org.eclipse.jetty.server.HttpChannelState getHttpChannelState()"], ["java.lang.Object", "org.eclipse.jetty.server.Request.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["org.eclipse.jetty.util.Attributes", "org.eclipse.jetty.server.Request.getAttributes()", "public org.eclipse.jetty.util.Attributes getAttributes()"], ["org.eclipse.jetty.server.Authentication", "org.eclipse.jetty.server.Request.getAuthentication()", "public org.eclipse.jetty.server.Authentication getAuthentication()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getAuthType()", "public java.lang.String getAuthType()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.Request.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel getHttpChannel()"], ["int", "org.eclipse.jetty.server.Request.getContentLength()", "public int getContentLength()"], ["long", "org.eclipse.jetty.server.Request.getContentLengthLong()", "public long getContentLengthLong()"], ["long", "org.eclipse.jetty.server.Request.getContentRead()", "public long getContentRead()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getContentType()", "public java.lang.String getContentType()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.Request.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getContextPath()", "public java.lang.String getContextPath()"], ["javax.servlet.http.Cookie[]", "org.eclipse.jetty.server.Request.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["long", "org.eclipse.jetty.server.Request.getDateHeader(java.lang.String)", "public long getDateHeader(java.lang.String)"], ["javax.servlet.DispatcherType", "org.eclipse.jetty.server.Request.getDispatcherType()", "public javax.servlet.DispatcherType getDispatcherType()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getHeaderNames()", "public java.util.Enumeration<java.lang.String> getHeaderNames()"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getHeaders(java.lang.String)", "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"], ["int", "org.eclipse.jetty.server.Request.getInputState()", "public int getInputState()"], ["javax.servlet.ServletInputStream", "org.eclipse.jetty.server.Request.getInputStream()", "public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException"], ["int", "org.eclipse.jetty.server.Request.getIntHeader(java.lang.String)", "public int getIntHeader(java.lang.String)"], ["java.util.Locale", "org.eclipse.jetty.server.Request.getLocale()", "public java.util.Locale getLocale()"], ["java.util.Enumeration<java.util.Locale>", "org.eclipse.jetty.server.Request.getLocales()", "public java.util.Enumeration<java.util.Locale> getLocales()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getLocalAddr()", "public java.lang.String getLocalAddr()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getLocalName()", "public java.lang.String getLocalName()"], ["int", "org.eclipse.jetty.server.Request.getLocalPort()", "public int getLocalPort()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getMethod()", "public java.lang.String getMethod()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.eclipse.jetty.server.Request.getParameterMap()", "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Request.getParameterNames()", "public java.util.Enumeration<java.lang.String> getParameterNames()"], ["java.lang.String[]", "org.eclipse.jetty.server.Request.getParameterValues(java.lang.String)", "public java.lang.String[] getParameterValues(java.lang.String)"], ["org.eclipse.jetty.util.MultiMap<java.lang.String>", "org.eclipse.jetty.server.Request.getQueryParameters()", "public org.eclipse.jetty.util.MultiMap<java.lang.String> getQueryParameters()"], ["void", "org.eclipse.jetty.server.Request.setQueryParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)", "public void setQueryParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)"], ["void", "org.eclipse.jetty.server.Request.setContentParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)", "public void setContentParameters(org.eclipse.jetty.util.MultiMap<java.lang.String>)"], ["void", "org.eclipse.jetty.server.Request.resetParameters()", "public void resetParameters()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getPathInfo()", "public java.lang.String getPathInfo()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getPathTranslated()", "public java.lang.String getPathTranslated()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getProtocol()", "public java.lang.String getProtocol()"], ["org.eclipse.jetty.http.HttpVersion", "org.eclipse.jetty.server.Request.getHttpVersion()", "public org.eclipse.jetty.http.HttpVersion getHttpVersion()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getQueryEncoding()", "public java.lang.String getQueryEncoding()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getQueryString()", "public java.lang.String getQueryString()"], ["java.io.BufferedReader", "org.eclipse.jetty.server.Request.getReader()", "public java.io.BufferedReader getReader() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.Request.getRemoteInetSocketAddress()", "public java.net.InetSocketAddress getRemoteInetSocketAddress()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRemoteAddr()", "public java.lang.String getRemoteAddr()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRemoteHost()", "public java.lang.String getRemoteHost()"], ["int", "org.eclipse.jetty.server.Request.getRemotePort()", "public int getRemotePort()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRemoteUser()", "public java.lang.String getRemoteUser()"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.Request.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRequestedSessionId()", "public java.lang.String getRequestedSessionId()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getRequestURI()", "public java.lang.String getRequestURI()"], ["java.lang.StringBuffer", "org.eclipse.jetty.server.Request.getRequestURL()", "public java.lang.StringBuffer getRequestURL()"], ["org.eclipse.jetty.server.Response", "org.eclipse.jetty.server.Request.getResponse()", "public org.eclipse.jetty.server.Response getResponse()"], ["java.lang.StringBuilder", "org.eclipse.jetty.server.Request.getRootURL()", "public java.lang.StringBuilder getRootURL()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getScheme()", "public java.lang.String getScheme()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getServerName()", "public java.lang.String getServerName()"], ["int", "org.eclipse.jetty.server.Request.getServerPort()", "public int getServerPort()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.Request.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getServletName()", "public java.lang.String getServletName()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getServletPath()", "public java.lang.String getServletPath()"], ["javax.servlet.ServletResponse", "org.eclipse.jetty.server.Request.getServletResponse()", "public javax.servlet.ServletResponse getServletResponse()"], ["java.lang.String", "org.eclipse.jetty.server.Request.changeSessionId()", "public java.lang.String changeSessionId()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.Request.getSession()", "public javax.servlet.http.HttpSession getSession()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.Request.getSession(boolean)", "public javax.servlet.http.HttpSession getSession(boolean)"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.Request.getSessionHandler()", "public org.eclipse.jetty.server.session.SessionHandler getSessionHandler()"], ["long", "org.eclipse.jetty.server.Request.getTimeStamp()", "public long getTimeStamp()"], ["org.eclipse.jetty.http.HttpURI", "org.eclipse.jetty.server.Request.getHttpURI()", "public org.eclipse.jetty.http.HttpURI getHttpURI()"], ["java.lang.String", "org.eclipse.jetty.server.Request.getOriginalURI()", "public java.lang.String getOriginalURI()"], ["void", "org.eclipse.jetty.server.Request.setHttpURI(org.eclipse.jetty.http.HttpURI)", "public void setHttpURI(org.eclipse.jetty.http.HttpURI)"], ["org.eclipse.jetty.server.UserIdentity", "org.eclipse.jetty.server.Request.getUserIdentity()", "public org.eclipse.jetty.server.UserIdentity getUserIdentity()"], ["org.eclipse.jetty.server.UserIdentity", "org.eclipse.jetty.server.Request.getResolvedUserIdentity()", "public org.eclipse.jetty.server.UserIdentity getResolvedUserIdentity()"], ["org.eclipse.jetty.server.UserIdentity$Scope", "org.eclipse.jetty.server.Request.getUserIdentityScope()", "public org.eclipse.jetty.server.UserIdentity$Scope getUserIdentityScope()"], ["java.security.Principal", "org.eclipse.jetty.server.Request.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["boolean", "org.eclipse.jetty.server.Request.isHandled()", "public boolean isHandled()"], ["boolean", "org.eclipse.jetty.server.Request.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "org.eclipse.jetty.server.Request.isAsyncSupported()", "public boolean isAsyncSupported()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdFromCookie()", "public boolean isRequestedSessionIdFromCookie()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdFromUrl()", "public boolean isRequestedSessionIdFromUrl()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdFromURL()", "public boolean isRequestedSessionIdFromURL()"], ["boolean", "org.eclipse.jetty.server.Request.isRequestedSessionIdValid()", "public boolean isRequestedSessionIdValid()"], ["boolean", "org.eclipse.jetty.server.Request.isSecure()", "public boolean isSecure()"], ["void", "org.eclipse.jetty.server.Request.setSecure(boolean)", "public void setSecure(boolean)"], ["boolean", "org.eclipse.jetty.server.Request.isUserInRole(java.lang.String)", "public boolean isUserInRole(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setMetaData(org.eclipse.jetty.http.MetaData$Request)", "public void setMetaData(org.eclipse.jetty.http.MetaData$Request)"], ["org.eclipse.jetty.http.MetaData$Request", "org.eclipse.jetty.server.Request.getMetaData()", "public org.eclipse.jetty.http.MetaData$Request getMetaData()"], ["boolean", "org.eclipse.jetty.server.Request.hasMetaData()", "public boolean hasMetaData()"], ["void", "org.eclipse.jetty.server.Request.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.removeEventListener(java.util.EventListener)", "public void removeEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.Request.setAsyncSupported(boolean, java.lang.String)", "public void setAsyncSupported(boolean, java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.Request.setAttributes(org.eclipse.jetty.util.Attributes)", "public void setAttributes(org.eclipse.jetty.util.Attributes)"], ["void", "org.eclipse.jetty.server.Request.setAuthentication(org.eclipse.jetty.server.Authentication)", "public void setAuthentication(org.eclipse.jetty.server.Authentication)"], ["void", "org.eclipse.jetty.server.Request.setCharacterEncoding(java.lang.String)", "public void setCharacterEncoding(java.lang.String) throws java.io.UnsupportedEncodingException"], ["void", "org.eclipse.jetty.server.Request.setCharacterEncodingUnchecked(java.lang.String)", "public void setCharacterEncodingUnchecked(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setContext(org.eclipse.jetty.server.handler.ContextHandler$Context)", "public void setContext(org.eclipse.jetty.server.handler.ContextHandler$Context)"], ["boolean", "org.eclipse.jetty.server.Request.takeNewContext()", "public boolean takeNewContext()"], ["void", "org.eclipse.jetty.server.Request.setContextPath(java.lang.String)", "public void setContextPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setCookies(javax.servlet.http.Cookie[])", "public void setCookies(javax.servlet.http.Cookie[])"], ["void", "org.eclipse.jetty.server.Request.setDispatcherType(javax.servlet.DispatcherType)", "public void setDispatcherType(javax.servlet.DispatcherType)"], ["void", "org.eclipse.jetty.server.Request.setHandled(boolean)", "public void setHandled(boolean)"], ["void", "org.eclipse.jetty.server.Request.setMethod(java.lang.String)", "public void setMethod(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setHttpVersion(org.eclipse.jetty.http.HttpVersion)", "public void setHttpVersion(org.eclipse.jetty.http.HttpVersion)"], ["boolean", "org.eclipse.jetty.server.Request.isHead()", "public boolean isHead()"], ["void", "org.eclipse.jetty.server.Request.setPathInfo(java.lang.String)", "public void setPathInfo(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setQueryEncoding(java.lang.String)", "public void setQueryEncoding(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setQueryString(java.lang.String)", "public void setQueryString(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setRemoteAddr(java.net.InetSocketAddress)", "public void setRemoteAddr(java.net.InetSocketAddress)"], ["void", "org.eclipse.jetty.server.Request.setRequestedSessionId(java.lang.String)", "public void setRequestedSessionId(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setRequestedSessionIdFromCookie(boolean)", "public void setRequestedSessionIdFromCookie(boolean)"], ["void", "org.eclipse.jetty.server.Request.setURIPathQuery(java.lang.String)", "public void setURIPathQuery(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setScheme(java.lang.String)", "public void setScheme(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setAuthority(java.lang.String, int)", "public void setAuthority(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.Request.setServletPath(java.lang.String)", "public void setServletPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.Request.setSession(javax.servlet.http.HttpSession)", "public void setSession(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.Request.setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)", "public void setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)"], ["void", "org.eclipse.jetty.server.Request.setTimeStamp(long)", "public void setTimeStamp(long)"], ["void", "org.eclipse.jetty.server.Request.setUserIdentityScope(org.eclipse.jetty.server.UserIdentity$Scope)", "public void setUserIdentityScope(org.eclipse.jetty.server.UserIdentity$Scope)"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.Request.startAsync()", "public javax.servlet.AsyncContext startAsync() throws java.lang.IllegalStateException"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.Request.startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.lang.IllegalStateException"], ["java.lang.String", "org.eclipse.jetty.server.Request.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.server.Request.authenticate(javax.servlet.http.HttpServletResponse)", "public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "org.eclipse.jetty.server.Request.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.server.Request.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Request.login(java.lang.String, java.lang.String)", "public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Request.logout()", "public void logout() throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Request.mergeQueryParameters(java.lang.String, java.lang.String, boolean)", "public void mergeQueryParameters(java.lang.String, java.lang.String, boolean)"], ["<T extends javax.servlet.http.HttpUpgradeHandler> T", "org.eclipse.jetty.server.Request.upgrade(java.lang.Class<T>)", "public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.session.AbstractSessionCache", "org.eclipse.jetty.server.session.AbstractSessionCache(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.AbstractSessionCache(org.eclipse.jetty.server.session.SessionHandler)"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.session.AbstractSessionCache.getSessionHandler()", "public org.eclipse.jetty.server.session.SessionHandler getSessionHandler()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.initialize(org.eclipse.jetty.server.session.SessionContext)", "public void initialize(org.eclipse.jetty.server.session.SessionContext)"], ["org.eclipse.jetty.server.session.SessionDataStore", "org.eclipse.jetty.server.session.AbstractSessionCache.getSessionDataStore()", "public org.eclipse.jetty.server.session.SessionDataStore getSessionDataStore()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.setSessionDataStore(org.eclipse.jetty.server.session.SessionDataStore)", "public void setSessionDataStore(org.eclipse.jetty.server.session.SessionDataStore)"], ["int", "org.eclipse.jetty.server.session.AbstractSessionCache.getEvictionPolicy()", "public int getEvictionPolicy()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.setEvictionPolicy(int)", "public void setEvictionPolicy(int)"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionCache.isSaveOnCreate()", "public boolean isSaveOnCreate()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.setSaveOnCreate(boolean)", "public void setSaveOnCreate(boolean)"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionCache.isRemoveUnloadableSessions()", "public boolean isRemoveUnloadableSessions()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.setRemoveUnloadableSessions(boolean)", "public void setRemoveUnloadableSessions(boolean)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.AbstractSessionCache.get(java.lang.String)", "public org.eclipse.jetty.server.session.Session get(java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.put(java.lang.String, org.eclipse.jetty.server.session.Session)", "public void put(java.lang.String, org.eclipse.jetty.server.session.Session) throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionCache.exists(java.lang.String)", "public boolean exists(java.lang.String) throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionCache.contains(java.lang.String)", "public boolean contains(java.lang.String) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.AbstractSessionCache.delete(java.lang.String)", "public org.eclipse.jetty.server.session.Session delete(java.lang.String) throws java.lang.Exception"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.AbstractSessionCache.checkExpiration(java.util.Set<java.lang.String>)", "public java.util.Set<java.lang.String> checkExpiration(java.util.Set<java.lang.String>)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.checkInactiveSession(org.eclipse.jetty.server.session.Session)", "public void checkInactiveSession(org.eclipse.jetty.server.session.Session)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.AbstractSessionCache.renewSessionId(java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.session.Session renewSessionId(java.lang.String, java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.AbstractSessionCache.setSaveOnInactiveEviction(boolean)", "public void setSaveOnInactiveEviction(boolean)"], ["boolean", "org.eclipse.jetty.server.session.AbstractSessionCache.isSaveOnInactiveEviction()", "public boolean isSaveOnInactiveEviction()"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.AbstractSessionCache.newSession(javax.servlet.http.HttpServletRequest, java.lang.String, long, long)", "public org.eclipse.jetty.server.session.Session newSession(javax.servlet.http.HttpServletRequest, java.lang.String, long, long)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionCache.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.session.FileSessionDataStoreFactory", "org.eclipse.jetty.server.session.FileSessionDataStoreFactory()", "public org.eclipse.jetty.server.session.FileSessionDataStoreFactory()"], ["boolean", "org.eclipse.jetty.server.session.FileSessionDataStoreFactory.isDeleteUnrestorableFiles()", "public boolean isDeleteUnrestorableFiles()"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStoreFactory.setDeleteUnrestorableFiles(boolean)", "public void setDeleteUnrestorableFiles(boolean)"], ["java.io.File", "org.eclipse.jetty.server.session.FileSessionDataStoreFactory.getStoreDir()", "public java.io.File getStoreDir()"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStoreFactory.setStoreDir(java.io.File)", "public void setStoreDir(java.io.File)"], ["org.eclipse.jetty.server.session.SessionDataStore", "org.eclipse.jetty.server.session.FileSessionDataStoreFactory.getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionDataStore getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler)"], ["org.eclipse.jetty.server.session.NullSessionCache", "org.eclipse.jetty.server.session.NullSessionCache(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.NullSessionCache(org.eclipse.jetty.server.session.SessionHandler)"], ["void", "org.eclipse.jetty.server.session.NullSessionCache.shutdown()", "public void shutdown()"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.NullSessionCache.newSession(org.eclipse.jetty.server.session.SessionData)", "public org.eclipse.jetty.server.session.Session newSession(org.eclipse.jetty.server.session.SessionData)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.NullSessionCache.newSession(javax.servlet.http.HttpServletRequest, org.eclipse.jetty.server.session.SessionData)", "public org.eclipse.jetty.server.session.Session newSession(javax.servlet.http.HttpServletRequest, org.eclipse.jetty.server.session.SessionData)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.NullSessionCache.doGet(java.lang.String)", "public org.eclipse.jetty.server.session.Session doGet(java.lang.String)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.NullSessionCache.doPutIfAbsent(java.lang.String, org.eclipse.jetty.server.session.Session)", "public org.eclipse.jetty.server.session.Session doPutIfAbsent(java.lang.String, org.eclipse.jetty.server.session.Session)"], ["boolean", "org.eclipse.jetty.server.session.NullSessionCache.doReplace(java.lang.String, org.eclipse.jetty.server.session.Session, org.eclipse.jetty.server.session.Session)", "public boolean doReplace(java.lang.String, org.eclipse.jetty.server.session.Session, org.eclipse.jetty.server.session.Session)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.NullSessionCache.doDelete(java.lang.String)", "public org.eclipse.jetty.server.session.Session doDelete(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.NullSessionCache.setEvictionPolicy(int)", "public void setEvictionPolicy(int)"], ["org.eclipse.jetty.server.session.SessionContext", "org.eclipse.jetty.server.session.SessionContext(java.lang.String, org.eclipse.jetty.server.handler.ContextHandler$Context)", "public org.eclipse.jetty.server.session.SessionContext(java.lang.String, org.eclipse.jetty.server.handler.ContextHandler$Context)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionContext.getWorkerName()", "public java.lang.String getWorkerName()"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.session.SessionContext.getSessionHandler()", "public org.eclipse.jetty.server.session.SessionHandler getSessionHandler()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.session.SessionContext.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionContext.getCanonicalContextPath()", "public java.lang.String getCanonicalContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionContext.getVhost()", "public java.lang.String getVhost()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionContext.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.session.SessionContext.run(java.lang.Runnable)", "public void run(java.lang.Runnable)"], ["org.eclipse.jetty.server.session.SessionHandler$SessionAsyncListener", "org.eclipse.jetty.server.session.SessionHandler$SessionAsyncListener(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionHandler$SessionAsyncListener(org.eclipse.jetty.server.session.SessionHandler)"], ["void", "org.eclipse.jetty.server.session.SessionHandler$SessionAsyncListener.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.session.SessionHandler$SessionAsyncListener.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.session.SessionHandler$SessionAsyncListener.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.session.SessionHandler$SessionAsyncListener.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.session.SessionHandler()", "public org.eclipse.jetty.server.session.SessionHandler()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.getSessionPath()", "public java.lang.String getSessionPath()"], ["int", "org.eclipse.jetty.server.session.SessionHandler.getMaxCookieAge()", "public int getMaxCookieAge()"], ["org.eclipse.jetty.http.HttpCookie", "org.eclipse.jetty.server.session.SessionHandler.access(javax.servlet.http.HttpSession, boolean)", "public org.eclipse.jetty.http.HttpCookie access(javax.servlet.http.HttpSession, boolean)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.addEventListener(java.util.EventListener)", "public void addEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.clearEventListeners()", "public void clearEventListeners()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.complete(javax.servlet.http.HttpSession)", "public void complete(javax.servlet.http.HttpSession)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.complete(org.eclipse.jetty.server.session.Session, org.eclipse.jetty.server.Request)", "public void complete(org.eclipse.jetty.server.session.Session, org.eclipse.jetty.server.Request)"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.getHttpOnly()", "public boolean getHttpOnly()"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.session.SessionHandler.getHttpSession(java.lang.String)", "public javax.servlet.http.HttpSession getHttpSession(java.lang.String)"], ["org.eclipse.jetty.server.SessionIdManager", "org.eclipse.jetty.server.session.SessionHandler.getSessionIdManager()", "public org.eclipse.jetty.server.SessionIdManager getSessionIdManager()"], ["int", "org.eclipse.jetty.server.session.SessionHandler.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["int", "org.eclipse.jetty.server.session.SessionHandler.getRefreshCookieAge()", "public int getRefreshCookieAge()"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.getSecureCookies()", "public boolean getSecureCookies()"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.isSecureRequestOnly()", "public boolean isSecureRequestOnly()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setSecureRequestOnly(boolean)", "public void setSecureRequestOnly(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.getSessionCookie()", "public java.lang.String getSessionCookie()"], ["org.eclipse.jetty.http.HttpCookie", "org.eclipse.jetty.server.session.SessionHandler.getSessionCookie(javax.servlet.http.HttpSession, java.lang.String, boolean)", "public org.eclipse.jetty.http.HttpCookie getSessionCookie(javax.servlet.http.HttpSession, java.lang.String, boolean)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.getSessionDomain()", "public java.lang.String getSessionDomain()"], ["int", "org.eclipse.jetty.server.session.SessionHandler.getSessionsCreated()", "public int getSessionsCreated()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.getSessionIdPathParameterName()", "public java.lang.String getSessionIdPathParameterName()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.getSessionIdPathParameterNamePrefix()", "public java.lang.String getSessionIdPathParameterNamePrefix()"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.isUsingCookies()", "public boolean isUsingCookies()"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.isValid(javax.servlet.http.HttpSession)", "public boolean isValid(javax.servlet.http.HttpSession)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.getId(javax.servlet.http.HttpSession)", "public java.lang.String getId(javax.servlet.http.HttpSession)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.getExtendedId(javax.servlet.http.HttpSession)", "public java.lang.String getExtendedId(javax.servlet.http.HttpSession)"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.session.SessionHandler.newHttpSession(javax.servlet.http.HttpServletRequest)", "public javax.servlet.http.HttpSession newHttpSession(javax.servlet.http.HttpServletRequest)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.removeEventListener(java.util.EventListener)", "public void removeEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.statsReset()", "public void statsReset()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setHttpOnly(boolean)", "public void setHttpOnly(boolean)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)", "public void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setRefreshCookieAge(int)", "public void setRefreshCookieAge(int)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setSessionCookie(java.lang.String)", "public void setSessionCookie(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setSessionIdPathParameterName(java.lang.String)", "public void setSessionIdPathParameterName(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setUsingCookies(boolean)", "public void setUsingCookies(boolean)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.SessionHandler.getSession(java.lang.String)", "public org.eclipse.jetty.server.session.Session getSession(java.lang.String)"], ["org.eclipse.jetty.server.session.SessionCache", "org.eclipse.jetty.server.session.SessionHandler.getSessionCache()", "public org.eclipse.jetty.server.session.SessionCache getSessionCache()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setSessionCache(org.eclipse.jetty.server.session.SessionCache)", "public void setSessionCache(org.eclipse.jetty.server.session.SessionCache)"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.isNodeIdInSessionId()", "public boolean isNodeIdInSessionId()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setNodeIdInSessionId(boolean)", "public void setNodeIdInSessionId(boolean)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.SessionHandler.removeSession(java.lang.String, boolean)", "public org.eclipse.jetty.server.session.Session removeSession(java.lang.String, boolean)"], ["long", "org.eclipse.jetty.server.session.SessionHandler.getSessionTimeMax()", "public long getSessionTimeMax()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.session.SessionHandler.getDefaultSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.session.SessionHandler.getEffectiveSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)", "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.isUsingURLs()", "public boolean isUsingURLs()"], ["javax.servlet.SessionCookieConfig", "org.eclipse.jetty.server.session.SessionHandler.getSessionCookieConfig()", "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"], ["long", "org.eclipse.jetty.server.session.SessionHandler.getSessionTimeTotal()", "public long getSessionTimeTotal()"], ["double", "org.eclipse.jetty.server.session.SessionHandler.getSessionTimeMean()", "public double getSessionTimeMean()"], ["double", "org.eclipse.jetty.server.session.SessionHandler.getSessionTimeStdDev()", "public double getSessionTimeStdDev()"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.isCheckingRemoteSessionIdEncoding()", "public boolean isCheckingRemoteSessionIdEncoding()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.setCheckingRemoteSessionIdEncoding(boolean)", "public void setCheckingRemoteSessionIdEncoding(boolean)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public void renewSessionId(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.invalidate(java.lang.String)", "public void invalidate(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.scavenge()", "public void scavenge()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.sessionInactivityTimerExpired(org.eclipse.jetty.server.session.Session)", "public void sessionInactivityTimerExpired(org.eclipse.jetty.server.session.Session)"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler.isIdInUse(java.lang.String)", "public boolean isIdInUse(java.lang.String) throws java.lang.Exception"], ["org.eclipse.jetty.util.thread.Scheduler", "org.eclipse.jetty.server.session.SessionHandler.getScheduler()", "public org.eclipse.jetty.util.thread.Scheduler getScheduler()"], ["void", "org.eclipse.jetty.server.session.SessionHandler.doSessionAttributeListeners(org.eclipse.jetty.server.session.Session, java.lang.String, java.lang.Object, java.lang.Object)", "public void doSessionAttributeListeners(org.eclipse.jetty.server.session.Session, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.SessionHandler.doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.session.SessionHandler.doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.AbstractNCSARequestLog", "org.eclipse.jetty.server.AbstractNCSARequestLog()", "public org.eclipse.jetty.server.AbstractNCSARequestLog()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)", "public void log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setIgnorePaths(java.lang.String[])", "public void setIgnorePaths(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.AbstractNCSARequestLog.getIgnorePaths()", "public java.lang.String[] getIgnorePaths()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogCookies(boolean)", "public void setLogCookies(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogCookies()", "public boolean getLogCookies()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogServer(boolean)", "public void setLogServer(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogServer()", "public boolean getLogServer()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogLatency(boolean)", "public void setLogLatency(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogLatency()", "public boolean getLogLatency()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogDispatch(boolean)", "public void setLogDispatch(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.isLogDispatch()", "public boolean isLogDispatch()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setPreferProxiedForAddress(boolean)", "public void setPreferProxiedForAddress(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.getPreferProxiedForAddress()", "public boolean getPreferProxiedForAddress()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setExtended(boolean)", "public void setExtended(boolean)"], ["boolean", "org.eclipse.jetty.server.AbstractNCSARequestLog.isExtended()", "public boolean isExtended()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogDateFormat(java.lang.String)", "public void setLogDateFormat(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogDateFormat()", "public java.lang.String getLogDateFormat()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogLocale(java.util.Locale)", "public void setLogLocale(java.util.Locale)"], ["java.util.Locale", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogLocale()", "public java.util.Locale getLogLocale()"], ["void", "org.eclipse.jetty.server.AbstractNCSARequestLog.setLogTimeZone(java.lang.String)", "public void setLogTimeZone(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractNCSARequestLog.getLogTimeZone()", "public java.lang.String getLogTimeZone()"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog()", "public org.eclipse.jetty.server.AsyncNCSARequestLog()"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog(java.util.concurrent.BlockingQueue<java.lang.String>)", "public org.eclipse.jetty.server.AsyncNCSARequestLog(java.util.concurrent.BlockingQueue<java.lang.String>)"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String)", "public org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String)"], ["org.eclipse.jetty.server.AsyncNCSARequestLog", "org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String, java.util.concurrent.BlockingQueue<java.lang.String>)", "public org.eclipse.jetty.server.AsyncNCSARequestLog(java.lang.String, java.util.concurrent.BlockingQueue<java.lang.String>)"], ["void", "org.eclipse.jetty.server.AsyncNCSARequestLog.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.CachedContentFactory", "org.eclipse.jetty.server.CachedContentFactory(org.eclipse.jetty.server.CachedContentFactory, org.eclipse.jetty.util.resource.ResourceFactory, org.eclipse.jetty.http.MimeTypes, boolean, boolean, org.eclipse.jetty.http.CompressedContentFormat[])", "public org.eclipse.jetty.server.CachedContentFactory(org.eclipse.jetty.server.CachedContentFactory, org.eclipse.jetty.util.resource.ResourceFactory, org.eclipse.jetty.http.MimeTypes, boolean, boolean, org.eclipse.jetty.http.CompressedContentFormat[])"], ["int", "org.eclipse.jetty.server.CachedContentFactory.getCachedSize()", "public int getCachedSize()"], ["int", "org.eclipse.jetty.server.CachedContentFactory.getCachedFiles()", "public int getCachedFiles()"], ["int", "org.eclipse.jetty.server.CachedContentFactory.getMaxCachedFileSize()", "public int getMaxCachedFileSize()"], ["void", "org.eclipse.jetty.server.CachedContentFactory.setMaxCachedFileSize(int)", "public void setMaxCachedFileSize(int)"], ["int", "org.eclipse.jetty.server.CachedContentFactory.getMaxCacheSize()", "public int getMaxCacheSize()"], ["void", "org.eclipse.jetty.server.CachedContentFactory.setMaxCacheSize(int)", "public void setMaxCacheSize(int)"], ["int", "org.eclipse.jetty.server.CachedContentFactory.getMaxCachedFiles()", "public int getMaxCachedFiles()"], ["void", "org.eclipse.jetty.server.CachedContentFactory.setMaxCachedFiles(int)", "public void setMaxCachedFiles(int)"], ["boolean", "org.eclipse.jetty.server.CachedContentFactory.isUseFileMappedBuffer()", "public boolean isUseFileMappedBuffer()"], ["void", "org.eclipse.jetty.server.CachedContentFactory.flushCache()", "public void flushCache()"], ["org.eclipse.jetty.http.HttpContent", "org.eclipse.jetty.server.CachedContentFactory.lookup(java.lang.String)", "public org.eclipse.jetty.http.HttpContent lookup(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.http.HttpContent", "org.eclipse.jetty.server.CachedContentFactory.getContent(java.lang.String, int)", "public org.eclipse.jetty.http.HttpContent getContent(java.lang.String, int) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.DebugListener$3.enterScope(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.Request, java.lang.Object)", "public void enterScope(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.Request, java.lang.Object)"], ["void", "org.eclipse.jetty.server.DebugListener$3.exitScope(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.Request)", "public void exitScope(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.Request)"], ["org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker", "org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker()", "public org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker()"], ["boolean", "org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases", "org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases()", "public org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$ApproveAliases.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandlerCollection$Branch.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.handler.ErrorHandler", "org.eclipse.jetty.server.handler.ErrorHandler()", "public org.eclipse.jetty.server.handler.ErrorHandler()"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.doError(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doError(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.handler.ErrorHandler.badMessageError(int, java.lang.String, org.eclipse.jetty.http.HttpFields)", "public java.nio.ByteBuffer badMessageError(int, java.lang.String, org.eclipse.jetty.http.HttpFields)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ErrorHandler.getCacheControl()", "public java.lang.String getCacheControl()"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.setCacheControl(java.lang.String)", "public void setCacheControl(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.ErrorHandler.isShowStacks()", "public boolean isShowStacks()"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.setShowStacks(boolean)", "public void setShowStacks(boolean)"], ["void", "org.eclipse.jetty.server.handler.ErrorHandler.setShowMessageInTitle(boolean)", "public void setShowMessageInTitle(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ErrorHandler.getShowMessageInTitle()", "public boolean getShowMessageInTitle()"], ["org.eclipse.jetty.server.handler.ErrorHandler", "org.eclipse.jetty.server.handler.ErrorHandler.getErrorHandler(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.handler.ContextHandler)", "public static org.eclipse.jetty.server.handler.ErrorHandler getErrorHandler(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.handler.ContextHandler)"], ["org.eclipse.jetty.server.handler.HandlerWrapper", "org.eclipse.jetty.server.handler.HandlerWrapper()", "public org.eclipse.jetty.server.handler.HandlerWrapper()"], ["org.eclipse.jetty.server.Handler", "org.eclipse.jetty.server.handler.HandlerWrapper.getHandler()", "public org.eclipse.jetty.server.Handler getHandler()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.HandlerWrapper.getHandlers()", "public org.eclipse.jetty.server.Handler[] getHandlers()"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.setHandler(org.eclipse.jetty.server.Handler)", "public void setHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.insertHandler(org.eclipse.jetty.server.handler.HandlerWrapper)", "public void insertHandler(org.eclipse.jetty.server.handler.HandlerWrapper)"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.HandlerWrapper.destroy()", "public void destroy()"], ["org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean", "org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean(java.lang.Object)", "public org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.handler.jmx.AbstractHandlerMBean.getObjectContextBasis()", "public java.lang.String getObjectContextBasis()"], ["org.eclipse.jetty.server.handler.RequestLogHandler", "org.eclipse.jetty.server.handler.RequestLogHandler()", "public org.eclipse.jetty.server.handler.RequestLogHandler()"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.RequestLogHandler.setRequestLog(org.eclipse.jetty.server.RequestLog)", "public void setRequestLog(org.eclipse.jetty.server.RequestLog)"], ["org.eclipse.jetty.server.RequestLog", "org.eclipse.jetty.server.handler.RequestLogHandler.getRequestLog()", "public org.eclipse.jetty.server.RequestLog getRequestLog()"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$2.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$2.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$2.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler$2.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpChannel$ContentCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpChannelState$4.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState$4.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpChannelState$State", "org.eclipse.jetty.server.HttpChannelState.getState()", "public org.eclipse.jetty.server.HttpChannelState$State getState()"], ["void", "org.eclipse.jetty.server.HttpChannelState.addListener(javax.servlet.AsyncListener)", "public void addListener(javax.servlet.AsyncListener)"], ["void", "org.eclipse.jetty.server.HttpChannelState.setTimeout(long)", "public void setTimeout(long)"], ["long", "org.eclipse.jetty.server.HttpChannelState.getTimeout()", "public long getTimeout()"], ["org.eclipse.jetty.server.AsyncContextEvent", "org.eclipse.jetty.server.HttpChannelState.getAsyncContextEvent()", "public org.eclipse.jetty.server.AsyncContextEvent getAsyncContextEvent()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState.toStringLocked()", "public java.lang.String toStringLocked()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState.getStatusString()", "public java.lang.String getStatusString()"], ["void", "org.eclipse.jetty.server.HttpChannelState.startAsync(org.eclipse.jetty.server.AsyncContextEvent)", "public void startAsync(org.eclipse.jetty.server.AsyncContextEvent)"], ["void", "org.eclipse.jetty.server.HttpChannelState.asyncError(java.lang.Throwable)", "public void asyncError(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpChannelState.dispatch(javax.servlet.ServletContext, java.lang.String)", "public void dispatch(javax.servlet.ServletContext, java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpChannelState.complete()", "public void complete()"], ["void", "org.eclipse.jetty.server.HttpChannelState.errorComplete()", "public void errorComplete()"], ["void", "org.eclipse.jetty.server.HttpChannelState.upgrade()", "public void upgrade()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isIdle()", "public boolean isIdle()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isExpired()", "public boolean isExpired()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isInitial()", "public boolean isInitial()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isSuspended()", "public boolean isSuspended()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isAsyncStarted()", "public boolean isAsyncStarted()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isAsyncComplete()", "public boolean isAsyncComplete()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.isAsync()", "public boolean isAsync()"], ["org.eclipse.jetty.server.Request", "org.eclipse.jetty.server.HttpChannelState.getBaseRequest()", "public org.eclipse.jetty.server.Request getBaseRequest()"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.HttpChannelState.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel getHttpChannel()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.HttpChannelState.getContextHandler()", "public org.eclipse.jetty.server.handler.ContextHandler getContextHandler()"], ["javax.servlet.ServletResponse", "org.eclipse.jetty.server.HttpChannelState.getServletResponse()", "public javax.servlet.ServletResponse getServletResponse()"], ["javax.servlet.ServletResponse", "org.eclipse.jetty.server.HttpChannelState.getServletResponse(org.eclipse.jetty.server.AsyncContextEvent)", "public javax.servlet.ServletResponse getServletResponse(org.eclipse.jetty.server.AsyncContextEvent)"], ["java.lang.Object", "org.eclipse.jetty.server.HttpChannelState.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpChannelState.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpChannelState.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.HttpChannelState.onReadUnready()", "public void onReadUnready()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.onContentAdded()", "public boolean onContentAdded()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.onReadReady()", "public boolean onReadReady()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.onReadPossible()", "public boolean onReadPossible()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.onReadEof()", "public boolean onReadEof()"], ["boolean", "org.eclipse.jetty.server.HttpChannelState.onWritePossible()", "public boolean onWritePossible()"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$4.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.thread.Invocable$InvocationType", "org.eclipse.jetty.server.HttpOutput$AsyncICB.getInvocationType()", "public org.eclipse.jetty.util.thread.Invocable$InvocationType getInvocationType()"], ["void", "org.eclipse.jetty.server.HttpOutput$AsyncICB.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["org.eclipse.jetty.server.HttpOutput", "org.eclipse.jetty.server.HttpOutput(org.eclipse.jetty.server.HttpChannel)", "public org.eclipse.jetty.server.HttpOutput(org.eclipse.jetty.server.HttpChannel)"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.HttpOutput.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel getHttpChannel()"], ["org.eclipse.jetty.server.HttpOutput$Interceptor", "org.eclipse.jetty.server.HttpOutput.getInterceptor()", "public org.eclipse.jetty.server.HttpOutput$Interceptor getInterceptor()"], ["void", "org.eclipse.jetty.server.HttpOutput.setInterceptor(org.eclipse.jetty.server.HttpOutput$Interceptor)", "public void setInterceptor(org.eclipse.jetty.server.HttpOutput$Interceptor)"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isWritten()", "public boolean isWritten()"], ["long", "org.eclipse.jetty.server.HttpOutput.getWritten()", "public long getWritten()"], ["void", "org.eclipse.jetty.server.HttpOutput.reopen()", "public void reopen()"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isAllContentWritten()", "public boolean isAllContentWritten()"], ["void", "org.eclipse.jetty.server.HttpOutput.close()", "public void close()"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isClosed()", "public boolean isClosed()"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isAsync()", "public boolean isAsync()"], ["void", "org.eclipse.jetty.server.HttpOutput.flush()", "public void flush() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.write(java.nio.ByteBuffer)", "public void write(java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.print(java.lang.String)", "public void print(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.ByteBuffer)", "public void sendContent(java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.io.InputStream)", "public void sendContent(java.io.InputStream) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.channels.ReadableByteChannel)", "public void sendContent(java.nio.channels.ReadableByteChannel) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(org.eclipse.jetty.http.HttpContent)", "public void sendContent(org.eclipse.jetty.http.HttpContent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.ByteBuffer, org.eclipse.jetty.util.Callback)", "public void sendContent(java.nio.ByteBuffer, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.io.InputStream, org.eclipse.jetty.util.Callback)", "public void sendContent(java.io.InputStream, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)", "public void sendContent(java.nio.channels.ReadableByteChannel, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput.sendContent(org.eclipse.jetty.http.HttpContent, org.eclipse.jetty.util.Callback)", "public void sendContent(org.eclipse.jetty.http.HttpContent, org.eclipse.jetty.util.Callback)"], ["int", "org.eclipse.jetty.server.HttpOutput.getBufferSize()", "public int getBufferSize()"], ["void", "org.eclipse.jetty.server.HttpOutput.setBufferSize(int)", "public void setBufferSize(int)"], ["void", "org.eclipse.jetty.server.HttpOutput.onFlushed(long)", "public void onFlushed(long) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpOutput.recycle()", "public void recycle()"], ["void", "org.eclipse.jetty.server.HttpOutput.resetBuffer()", "public void resetBuffer()"], ["void", "org.eclipse.jetty.server.HttpOutput.setWriteListener(javax.servlet.WriteListener)", "public void setWriteListener(javax.servlet.WriteListener)"], ["boolean", "org.eclipse.jetty.server.HttpOutput.isReady()", "public boolean isReady()"], ["void", "org.eclipse.jetty.server.HttpOutput.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.HttpOutput.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck", "org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor, int)", "public org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor, int)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck.getMaxConnections()", "public int getMaxConnections()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck.setMaxConnections(int)", "public void setMaxConnections(int)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck.isLowOnResources()", "public boolean isLowOnResources()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck.getReason()", "public java.lang.String getReason()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$MaxConnectionsLowResourceCheck.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.NCSARequestLog", "org.eclipse.jetty.server.NCSARequestLog()", "public org.eclipse.jetty.server.NCSARequestLog()"], ["org.eclipse.jetty.server.NCSARequestLog", "org.eclipse.jetty.server.NCSARequestLog(java.lang.String)", "public org.eclipse.jetty.server.NCSARequestLog(java.lang.String)"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setFilename(java.lang.String)", "public void setFilename(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.NCSARequestLog.getFilename()", "public java.lang.String getFilename()"], ["java.lang.String", "org.eclipse.jetty.server.NCSARequestLog.getDatedFilename()", "public java.lang.String getDatedFilename()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setRetainDays(int)", "public void setRetainDays(int)"], ["int", "org.eclipse.jetty.server.NCSARequestLog.getRetainDays()", "public int getRetainDays()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setAppend(boolean)", "public void setAppend(boolean)"], ["boolean", "org.eclipse.jetty.server.NCSARequestLog.isAppend()", "public boolean isAppend()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.setFilenameDateFormat(java.lang.String)", "public void setFilenameDateFormat(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.NCSARequestLog.getFilenameDateFormat()", "public java.lang.String getFilenameDateFormat()"], ["void", "org.eclipse.jetty.server.NCSARequestLog.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint(org.eclipse.jetty.io.EndPoint, java.net.InetSocketAddress, java.net.InetSocketAddress)", "public org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint(org.eclipse.jetty.io.EndPoint, java.net.InetSocketAddress, java.net.InetSocketAddress)"], ["boolean", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.isOptimizedForDirectBuffers()", "public boolean isOptimizedForDirectBuffers()"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.getLocalAddress()", "public java.net.InetSocketAddress getLocalAddress()"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.getRemoteAddress()", "public java.net.InetSocketAddress getRemoteAddress()"], ["boolean", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.isOpen()", "public boolean isOpen()"], ["long", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.getCreatedTimeStamp()", "public long getCreatedTimeStamp()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.shutdownOutput()", "public void shutdownOutput()"], ["boolean", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.isOutputShutdown()", "public boolean isOutputShutdown()"], ["boolean", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.isInputShutdown()", "public boolean isInputShutdown()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.close()", "public void close()"], ["int", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.fill(java.nio.ByteBuffer)", "public int fill(java.nio.ByteBuffer) throws java.io.IOException"], ["boolean", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.flush(java.nio.ByteBuffer...)", "public boolean flush(java.nio.ByteBuffer...) throws java.io.IOException"], ["java.lang.Object", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.getTransport()", "public java.lang.Object getTransport()"], ["long", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.getIdleTimeout()", "public long getIdleTimeout()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.setIdleTimeout(long)", "public void setIdleTimeout(long)"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.fillInterested(org.eclipse.jetty.util.Callback)", "public void fillInterested(org.eclipse.jetty.util.Callback) throws java.nio.channels.ReadPendingException"], ["boolean", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.tryFillInterested(org.eclipse.jetty.util.Callback)", "public boolean tryFillInterested(org.eclipse.jetty.util.Callback)"], ["boolean", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.isFillInterested()", "public boolean isFillInterested()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.write(org.eclipse.jetty.util.Callback, java.nio.ByteBuffer...)", "public void write(org.eclipse.jetty.util.Callback, java.nio.ByteBuffer...) throws java.nio.channels.WritePendingException"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.getConnection()", "public org.eclipse.jetty.io.Connection getConnection()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.setConnection(org.eclipse.jetty.io.Connection)", "public void setConnection(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.onClose()", "public void onClose()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyEndPoint.upgrade(org.eclipse.jetty.io.Connection)", "public void upgrade(org.eclipse.jetty.io.Connection)"], ["org.eclipse.jetty.server.ResourceContentFactory", "org.eclipse.jetty.server.ResourceContentFactory(org.eclipse.jetty.util.resource.ResourceFactory, org.eclipse.jetty.http.MimeTypes, org.eclipse.jetty.http.CompressedContentFormat[])", "public org.eclipse.jetty.server.ResourceContentFactory(org.eclipse.jetty.util.resource.ResourceFactory, org.eclipse.jetty.http.MimeTypes, org.eclipse.jetty.http.CompressedContentFormat[])"], ["org.eclipse.jetty.http.HttpContent", "org.eclipse.jetty.server.ResourceContentFactory.getContent(java.lang.String, int)", "public org.eclipse.jetty.http.HttpContent getContent(java.lang.String, int) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.ResourceContentFactory.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, int, int, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.ServerConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["boolean", "org.eclipse.jetty.server.ServerConnector.isOpen()", "public boolean isOpen()"], ["boolean", "org.eclipse.jetty.server.ServerConnector.isInheritChannel()", "public boolean isInheritChannel()"], ["void", "org.eclipse.jetty.server.ServerConnector.setInheritChannel(boolean)", "public void setInheritChannel(boolean)"], ["void", "org.eclipse.jetty.server.ServerConnector.open(java.nio.channels.ServerSocketChannel)", "public void open(java.nio.channels.ServerSocketChannel) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServerConnector.open()", "public void open() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServerConnector.close()", "public void close()"], ["void", "org.eclipse.jetty.server.ServerConnector.accept(int)", "public void accept(int) throws java.io.IOException"], ["org.eclipse.jetty.io.SelectorManager", "org.eclipse.jetty.server.ServerConnector.getSelectorManager()", "public org.eclipse.jetty.io.SelectorManager getSelectorManager()"], ["java.lang.Object", "org.eclipse.jetty.server.ServerConnector.getTransport()", "public java.lang.Object getTransport()"], ["int", "org.eclipse.jetty.server.ServerConnector.getLocalPort()", "public int getLocalPort()"], ["int", "org.eclipse.jetty.server.ServerConnector.getSoLingerTime()", "public int getSoLingerTime()"], ["void", "org.eclipse.jetty.server.ServerConnector.setSoLingerTime(int)", "public void setSoLingerTime(int)"], ["int", "org.eclipse.jetty.server.ServerConnector.getAcceptQueueSize()", "public int getAcceptQueueSize()"], ["void", "org.eclipse.jetty.server.ServerConnector.setAcceptQueueSize(int)", "public void setAcceptQueueSize(int)"], ["boolean", "org.eclipse.jetty.server.ServerConnector.getReuseAddress()", "public boolean getReuseAddress()"], ["void", "org.eclipse.jetty.server.ServerConnector.setReuseAddress(boolean)", "public void setReuseAddress(boolean)"], ["void", "org.eclipse.jetty.server.ServerConnector.setAccepting(boolean)", "public void setAccepting(boolean)"], ["org.eclipse.jetty.server.session.CachingSessionDataStoreFactory", "org.eclipse.jetty.server.session.CachingSessionDataStoreFactory()", "public org.eclipse.jetty.server.session.CachingSessionDataStoreFactory()"], ["org.eclipse.jetty.server.session.SessionDataMapFactory", "org.eclipse.jetty.server.session.CachingSessionDataStoreFactory.getMapFactory()", "public org.eclipse.jetty.server.session.SessionDataMapFactory getMapFactory()"], ["void", "org.eclipse.jetty.server.session.CachingSessionDataStoreFactory.setSessionDataMapFactory(org.eclipse.jetty.server.session.SessionDataMapFactory)", "public void setSessionDataMapFactory(org.eclipse.jetty.server.session.SessionDataMapFactory)"], ["void", "org.eclipse.jetty.server.session.CachingSessionDataStoreFactory.setSessionStoreFactory(org.eclipse.jetty.server.session.SessionDataStoreFactory)", "public void setSessionStoreFactory(org.eclipse.jetty.server.session.SessionDataStoreFactory)"], ["org.eclipse.jetty.server.session.SessionDataStore", "org.eclipse.jetty.server.session.CachingSessionDataStoreFactory.getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionDataStore getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.HouseKeeper$Runner.run()", "public void run()"], ["org.eclipse.jetty.server.session.NullSessionCacheFactory", "org.eclipse.jetty.server.session.NullSessionCacheFactory()", "public org.eclipse.jetty.server.session.NullSessionCacheFactory()"], ["boolean", "org.eclipse.jetty.server.session.NullSessionCacheFactory.isSaveOnCreate()", "public boolean isSaveOnCreate()"], ["void", "org.eclipse.jetty.server.session.NullSessionCacheFactory.setSaveOnCreate(boolean)", "public void setSaveOnCreate(boolean)"], ["boolean", "org.eclipse.jetty.server.session.NullSessionCacheFactory.isRemoveUnloadableSessions()", "public boolean isRemoveUnloadableSessions()"], ["void", "org.eclipse.jetty.server.session.NullSessionCacheFactory.setRemoveUnloadableSessions(boolean)", "public void setRemoveUnloadableSessions(boolean)"], ["org.eclipse.jetty.server.session.SessionCache", "org.eclipse.jetty.server.session.NullSessionCacheFactory.getSessionCache(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionCache getSessionCache(org.eclipse.jetty.server.session.SessionHandler)"], ["void", "org.eclipse.jetty.server.session.Session$SessionInactivityTimer$1.onTimeoutExpired()", "public void onTimeoutExpired()"], ["org.eclipse.jetty.server.session.SessionHandler$CookieConfig", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionHandler$CookieConfig(org.eclipse.jetty.server.session.SessionHandler)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.getComment()", "public java.lang.String getComment()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.getDomain()", "public java.lang.String getDomain()"], ["int", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.getMaxAge()", "public int getMaxAge()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.getPath()", "public java.lang.String getPath()"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.isHttpOnly()", "public boolean isHttpOnly()"], ["boolean", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.isSecure()", "public boolean isSecure()"], ["void", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.setComment(java.lang.String)", "public void setComment(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.setDomain(java.lang.String)", "public void setDomain(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.setHttpOnly(boolean)", "public void setHttpOnly(boolean)"], ["void", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.setMaxAge(int)", "public void setMaxAge(int)"], ["void", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionHandler$CookieConfig.setSecure(boolean)", "public void setSecure(boolean)"], ["org.eclipse.jetty.server.SslConnectionFactory", "org.eclipse.jetty.server.SslConnectionFactory()", "public org.eclipse.jetty.server.SslConnectionFactory()"], ["org.eclipse.jetty.server.SslConnectionFactory", "org.eclipse.jetty.server.SslConnectionFactory(java.lang.String)", "public org.eclipse.jetty.server.SslConnectionFactory(java.lang.String)"], ["org.eclipse.jetty.server.SslConnectionFactory", "org.eclipse.jetty.server.SslConnectionFactory(org.eclipse.jetty.util.ssl.SslContextFactory, java.lang.String)", "public org.eclipse.jetty.server.SslConnectionFactory(org.eclipse.jetty.util.ssl.SslContextFactory, java.lang.String)"], ["org.eclipse.jetty.util.ssl.SslContextFactory", "org.eclipse.jetty.server.SslConnectionFactory.getSslContextFactory()", "public org.eclipse.jetty.util.ssl.SslContextFactory getSslContextFactory()"], ["void", "org.eclipse.jetty.server.SslConnectionFactory.setDirectBuffersForEncryption(boolean)", "public void setDirectBuffersForEncryption(boolean)"], ["void", "org.eclipse.jetty.server.SslConnectionFactory.setDirectBuffersForDecryption(boolean)", "public void setDirectBuffersForDecryption(boolean)"], ["boolean", "org.eclipse.jetty.server.SslConnectionFactory.isDirectBuffersForDecryption()", "public boolean isDirectBuffersForDecryption()"], ["boolean", "org.eclipse.jetty.server.SslConnectionFactory.isDirectBuffersForEncryption()", "public boolean isDirectBuffersForEncryption()"], ["java.lang.String", "org.eclipse.jetty.server.SslConnectionFactory.getNextProtocol()", "public java.lang.String getNextProtocol()"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.SslConnectionFactory.newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["java.lang.String", "org.eclipse.jetty.server.SslConnectionFactory.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.AsyncContextState$1.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["org.eclipse.jetty.server.AsyncContextState", "org.eclipse.jetty.server.AsyncContextState(org.eclipse.jetty.server.HttpChannelState)", "public org.eclipse.jetty.server.AsyncContextState(org.eclipse.jetty.server.HttpChannelState)"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.AsyncContextState.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel getHttpChannel()"], ["void", "org.eclipse.jetty.server.AsyncContextState.addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void addListener(javax.servlet.AsyncListener, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["void", "org.eclipse.jetty.server.AsyncContextState.addListener(javax.servlet.AsyncListener)", "public void addListener(javax.servlet.AsyncListener)"], ["void", "org.eclipse.jetty.server.AsyncContextState.complete()", "public void complete()"], ["<T extends javax.servlet.AsyncListener> T", "org.eclipse.jetty.server.AsyncContextState.createListener(java.lang.Class<T>)", "public <T extends javax.servlet.AsyncListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.AsyncContextState.dispatch()", "public void dispatch()"], ["void", "org.eclipse.jetty.server.AsyncContextState.dispatch(java.lang.String)", "public void dispatch(java.lang.String)"], ["void", "org.eclipse.jetty.server.AsyncContextState.dispatch(javax.servlet.ServletContext, java.lang.String)", "public void dispatch(javax.servlet.ServletContext, java.lang.String)"], ["javax.servlet.ServletRequest", "org.eclipse.jetty.server.AsyncContextState.getRequest()", "public javax.servlet.ServletRequest getRequest()"], ["javax.servlet.ServletResponse", "org.eclipse.jetty.server.AsyncContextState.getResponse()", "public javax.servlet.ServletResponse getResponse()"], ["long", "org.eclipse.jetty.server.AsyncContextState.getTimeout()", "public long getTimeout()"], ["boolean", "org.eclipse.jetty.server.AsyncContextState.hasOriginalRequestAndResponse()", "public boolean hasOriginalRequestAndResponse()"], ["void", "org.eclipse.jetty.server.AsyncContextState.setTimeout(long)", "public void setTimeout(long)"], ["void", "org.eclipse.jetty.server.AsyncContextState.start(java.lang.Runnable)", "public void start(java.lang.Runnable)"], ["void", "org.eclipse.jetty.server.AsyncContextState.reset()", "public void reset()"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.AsyncContextState.getHttpChannelState()", "public org.eclipse.jetty.server.HttpChannelState getHttpChannelState()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getKey()", "public java.lang.String getKey()"], ["boolean", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.isCached()", "public boolean isCached()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getResource()", "public org.eclipse.jetty.util.resource.Resource getResource()"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getETag()", "public org.eclipse.jetty.http.HttpField getETag()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getETagValue()", "public java.lang.String getETagValue()"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getLastModified()", "public org.eclipse.jetty.http.HttpField getLastModified()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getLastModifiedValue()", "public java.lang.String getLastModifiedValue()"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getContentType()", "public org.eclipse.jetty.http.HttpField getContentType()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getContentTypeValue()", "public java.lang.String getContentTypeValue()"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getContentEncoding()", "public org.eclipse.jetty.http.HttpField getContentEncoding()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getContentEncodingValue()", "public java.lang.String getContentEncodingValue()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getCharacterEncoding()", "public java.lang.String getCharacterEncoding()"], ["org.eclipse.jetty.http.MimeTypes$Type", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getMimeType()", "public org.eclipse.jetty.http.MimeTypes$Type getMimeType()"], ["void", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.release()", "public void release()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getIndirectBuffer()", "public java.nio.ByteBuffer getIndirectBuffer()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getDirectBuffer()", "public java.nio.ByteBuffer getDirectBuffer()"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getContentLength()", "public org.eclipse.jetty.http.HttpField getContentLength()"], ["long", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getContentLengthValue()", "public long getContentLengthValue()"], ["java.io.InputStream", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.nio.channels.ReadableByteChannel", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getReadableByteChannel()", "public java.nio.channels.ReadableByteChannel getReadableByteChannel() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.toString()", "public java.lang.String toString()"], ["java.util.Map<org.eclipse.jetty.http.CompressedContentFormat, ? extends org.eclipse.jetty.http.HttpContent>", "org.eclipse.jetty.server.CachedContentFactory$CachedHttpContent.getPrecompressedContents()", "public java.util.Map<org.eclipse.jetty.http.CompressedContentFormat, ? extends org.eclipse.jetty.http.HttpContent> getPrecompressedContents()"], ["java.lang.Object", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.clearAttributes()", "public void clearAttributes()"], ["void", "org.eclipse.jetty.server.Dispatcher$ForwardAttributes.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["org.eclipse.jetty.server.EncodingHttpWriter", "org.eclipse.jetty.server.EncodingHttpWriter(org.eclipse.jetty.server.HttpOutput, java.lang.String)", "public org.eclipse.jetty.server.EncodingHttpWriter(org.eclipse.jetty.server.HttpOutput, java.lang.String)"], ["void", "org.eclipse.jetty.server.EncodingHttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.BufferedResponseHandler", "org.eclipse.jetty.server.handler.BufferedResponseHandler()", "public org.eclipse.jetty.server.handler.BufferedResponseHandler()"], ["org.eclipse.jetty.util.IncludeExclude<java.lang.String>", "org.eclipse.jetty.server.handler.BufferedResponseHandler.getMethodIncludeExclude()", "public org.eclipse.jetty.util.IncludeExclude<java.lang.String> getMethodIncludeExclude()"], ["org.eclipse.jetty.util.IncludeExclude<java.lang.String>", "org.eclipse.jetty.server.handler.BufferedResponseHandler.getPathIncludeExclude()", "public org.eclipse.jetty.util.IncludeExclude<java.lang.String> getPathIncludeExclude()"], ["org.eclipse.jetty.util.IncludeExclude<java.lang.String>", "org.eclipse.jetty.server.handler.BufferedResponseHandler.getMimeIncludeExclude()", "public org.eclipse.jetty.util.IncludeExclude<java.lang.String> getMimeIncludeExclude()"], ["void", "org.eclipse.jetty.server.handler.BufferedResponseHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.handler.ContextHandler.getCurrentContext()", "public static org.eclipse.jetty.server.handler.ContextHandler$Context getCurrentContext()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler.getContextHandler(javax.servlet.ServletContext)", "public static org.eclipse.jetty.server.handler.ContextHandler getContextHandler(javax.servlet.ServletContext)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getServerInfo()", "public static java.lang.String getServerInfo()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setServerInfo(java.lang.String)", "public static void setServerInfo(java.lang.String)"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler()", "public org.eclipse.jetty.server.handler.ContextHandler()"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler(java.lang.String)", "public org.eclipse.jetty.server.handler.ContextHandler(java.lang.String)"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String)", "public org.eclipse.jetty.server.handler.ContextHandler(org.eclipse.jetty.server.HandlerContainer, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.handler.ContextHandler.getServletContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getServletContext()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.getAllowNullPathInfo()", "public boolean getAllowNullPathInfo()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAllowNullPathInfo(boolean)", "public void setAllowNullPathInfo(boolean)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setServer(org.eclipse.jetty.server.Server)", "public void setServer(org.eclipse.jetty.server.Server)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isUsingSecurityManager()", "public boolean isUsingSecurityManager()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setUsingSecurityManager(boolean)", "public void setUsingSecurityManager(boolean)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setVirtualHosts(java.lang.String[])", "public void setVirtualHosts(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addVirtualHosts(java.lang.String[])", "public void addVirtualHosts(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.removeVirtualHosts(java.lang.String[])", "public void removeVirtualHosts(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ContextHandler.getVirtualHosts()", "public java.lang.String[] getVirtualHosts()"], ["java.lang.Object", "org.eclipse.jetty.server.handler.ContextHandler.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["org.eclipse.jetty.util.Attributes", "org.eclipse.jetty.server.handler.ContextHandler.getAttributes()", "public org.eclipse.jetty.util.Attributes getAttributes()"], ["java.lang.ClassLoader", "org.eclipse.jetty.server.handler.ContextHandler.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getClassPath()", "public java.lang.String getClassPath()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getContextPathEncoded()", "public java.lang.String getContextPathEncoded()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.setInitParameter(java.lang.String, java.lang.String)", "public java.lang.String setInitParameter(java.lang.String, java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getInitParams()", "public java.util.Map<java.lang.String, java.lang.String> getInitParams()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getDisplayName()", "public java.lang.String getDisplayName()"], ["java.util.EventListener[]", "org.eclipse.jetty.server.handler.ContextHandler.getEventListeners()", "public java.util.EventListener[] getEventListeners()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setEventListeners(java.util.EventListener[])", "public void setEventListeners(java.util.EventListener[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addEventListener(java.util.EventListener)", "public void addEventListener(java.util.EventListener)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.removeEventListener(java.util.EventListener)", "public void removeEventListener(java.util.EventListener)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isShutdown()", "public boolean isShutdown()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.handler.ContextHandler.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isAvailable()", "public boolean isAvailable()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAvailable(boolean)", "public void setAvailable(boolean)"], ["org.eclipse.jetty.util.log.Logger", "org.eclipse.jetty.server.handler.ContextHandler.getLogger()", "public org.eclipse.jetty.util.log.Logger getLogger()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setLogger(org.eclipse.jetty.util.log.Logger)", "public void setLogger(org.eclipse.jetty.util.log.Logger)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkVirtualHost(org.eclipse.jetty.server.Request)", "public boolean checkVirtualHost(org.eclipse.jetty.server.Request)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkContextPath(java.lang.String)", "public boolean checkContextPath(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkContext(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletResponse)", "public boolean checkContext(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletResponse) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.handle(org.eclipse.jetty.server.Request, java.lang.Runnable)", "public void handle(org.eclipse.jetty.server.Request, java.lang.Runnable)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.handle(java.lang.Runnable)", "public void handle(java.lang.Runnable)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isProtectedTarget(java.lang.String)", "public boolean isProtectedTarget(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setProtectedTargets(java.lang.String[])", "public void setProtectedTargets(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ContextHandler.getProtectedTargets()", "public java.lang.String[] getProtectedTargets()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAttributes(org.eclipse.jetty.util.Attributes)", "public void setAttributes(org.eclipse.jetty.util.Attributes)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.clearAttributes()", "public void clearAttributes()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setManagedAttribute(java.lang.String, java.lang.Object)", "public void setManagedAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setClassLoader(java.lang.ClassLoader)", "public void setClassLoader(java.lang.ClassLoader)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setContextPath(java.lang.String)", "public void setContextPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setDisplayName(java.lang.String)", "public void setDisplayName(java.lang.String)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.getBaseResource()", "public org.eclipse.jetty.util.resource.Resource getBaseResource()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getResourceBase()", "public java.lang.String getResourceBase()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setBaseResource(org.eclipse.jetty.util.resource.Resource)", "public void setBaseResource(org.eclipse.jetty.util.resource.Resource)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setResourceBase(java.lang.String)", "public void setResourceBase(java.lang.String)"], ["org.eclipse.jetty.http.MimeTypes", "org.eclipse.jetty.server.handler.ContextHandler.getMimeTypes()", "public org.eclipse.jetty.http.MimeTypes getMimeTypes()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setMimeTypes(org.eclipse.jetty.http.MimeTypes)", "public void setMimeTypes(org.eclipse.jetty.http.MimeTypes)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setWelcomeFiles(java.lang.String[])", "public void setWelcomeFiles(java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ContextHandler.getWelcomeFiles()", "public java.lang.String[] getWelcomeFiles()"], ["org.eclipse.jetty.server.handler.ErrorHandler", "org.eclipse.jetty.server.handler.ContextHandler.getErrorHandler()", "public org.eclipse.jetty.server.handler.ErrorHandler getErrorHandler()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)", "public void setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler.getMaxFormContentSize()", "public int getMaxFormContentSize()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setMaxFormContentSize(int)", "public void setMaxFormContentSize(int)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler.getMaxFormKeys()", "public int getMaxFormKeys()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setMaxFormKeys(int)", "public void setMaxFormKeys(int)"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.isCompactPath()", "public boolean isCompactPath()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setCompactPath(boolean)", "public void setCompactPath(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.toString()", "public java.lang.String toString()"], ["java.lang.Class<?>", "org.eclipse.jetty.server.handler.ContextHandler.loadClass(java.lang.String)", "public synchronized java.lang.Class<?> loadClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addLocaleEncoding(java.lang.String, java.lang.String)", "public void addLocaleEncoding(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getLocaleEncoding(java.lang.String)", "public java.lang.String getLocaleEncoding(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler.getLocaleEncoding(java.util.Locale)", "public java.lang.String getLocaleEncoding(java.util.Locale)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getLocaleEncodings()", "public java.util.Map<java.lang.String, java.lang.String> getLocaleEncodings()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.getResource(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource getResource(java.lang.String) throws java.net.MalformedURLException"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler.checkAlias(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean checkAlias(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.newResource(java.net.URL)", "public org.eclipse.jetty.util.resource.Resource newResource(java.net.URL) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.newResource(java.net.URI)", "public org.eclipse.jetty.util.resource.Resource newResource(java.net.URI) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ContextHandler.newResource(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource newResource(java.lang.String) throws java.io.IOException"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.addAliasCheck(org.eclipse.jetty.server.handler.ContextHandler$AliasCheck)", "public void addAliasCheck(org.eclipse.jetty.server.handler.ContextHandler$AliasCheck)"], ["java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck>", "org.eclipse.jetty.server.handler.ContextHandler.getAliasChecks()", "public java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck> getAliasChecks()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.setAliasChecks(java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck>)", "public void setAliasChecks(java.util.List<org.eclipse.jetty.server.handler.ContextHandler$AliasCheck>)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler.clearAliasChecks()", "public void clearAliasChecks()"], ["org.eclipse.jetty.server.handler.ScopedHandler", "org.eclipse.jetty.server.handler.ScopedHandler()", "public org.eclipse.jetty.server.handler.ScopedHandler()"], ["void", "org.eclipse.jetty.server.handler.ScopedHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public final void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ScopedHandler.doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void doScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ScopedHandler.nextScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public final void nextScope(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public final void nextHandle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.HostHeaderCustomizer", "org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String)", "public org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String)"], ["org.eclipse.jetty.server.HostHeaderCustomizer", "org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String, int)", "public org.eclipse.jetty.server.HostHeaderCustomizer(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.HostHeaderCustomizer.customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)", "public void customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.HttpChannel(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport)", "public org.eclipse.jetty.server.HttpChannel(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport)"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.HttpChannel.getState()", "public org.eclipse.jetty.server.HttpChannelState getState()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.addListener(org.eclipse.jetty.server.HttpChannel$Listener)", "public boolean addListener(org.eclipse.jetty.server.HttpChannel$Listener)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.removeListener(org.eclipse.jetty.server.HttpChannel$Listener)", "public boolean removeListener(org.eclipse.jetty.server.HttpChannel$Listener)"], ["long", "org.eclipse.jetty.server.HttpChannel.getBytesWritten()", "public long getBytesWritten()"], ["long", "org.eclipse.jetty.server.HttpChannel.getRequests()", "public long getRequests()"], ["org.eclipse.jetty.server.Connector", "org.eclipse.jetty.server.HttpChannel.getConnector()", "public org.eclipse.jetty.server.Connector getConnector()"], ["org.eclipse.jetty.server.HttpTransport", "org.eclipse.jetty.server.HttpChannel.getHttpTransport()", "public org.eclipse.jetty.server.HttpTransport getHttpTransport()"], ["org.eclipse.jetty.server.RequestLog", "org.eclipse.jetty.server.HttpChannel.getRequestLog()", "public org.eclipse.jetty.server.RequestLog getRequestLog()"], ["void", "org.eclipse.jetty.server.HttpChannel.setRequestLog(org.eclipse.jetty.server.RequestLog)", "public void setRequestLog(org.eclipse.jetty.server.RequestLog)"], ["void", "org.eclipse.jetty.server.HttpChannel.addRequestLog(org.eclipse.jetty.server.RequestLog)", "public void addRequestLog(org.eclipse.jetty.server.RequestLog)"], ["org.eclipse.jetty.http.MetaData$Response", "org.eclipse.jetty.server.HttpChannel.getCommittedMetaData()", "public org.eclipse.jetty.http.MetaData$Response getCommittedMetaData()"], ["long", "org.eclipse.jetty.server.HttpChannel.getIdleTimeout()", "public long getIdleTimeout()"], ["void", "org.eclipse.jetty.server.HttpChannel.setIdleTimeout(long)", "public void setIdleTimeout(long)"], ["org.eclipse.jetty.io.ByteBufferPool", "org.eclipse.jetty.server.HttpChannel.getByteBufferPool()", "public org.eclipse.jetty.io.ByteBufferPool getByteBufferPool()"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpChannel.getHttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration getHttpConfiguration()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.isOptimizedForDirectBuffers()", "public boolean isOptimizedForDirectBuffers()"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.HttpChannel.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["org.eclipse.jetty.server.Request", "org.eclipse.jetty.server.HttpChannel.getRequest()", "public org.eclipse.jetty.server.Request getRequest()"], ["org.eclipse.jetty.server.Response", "org.eclipse.jetty.server.HttpChannel.getResponse()", "public org.eclipse.jetty.server.Response getResponse()"], ["org.eclipse.jetty.io.EndPoint", "org.eclipse.jetty.server.HttpChannel.getEndPoint()", "public org.eclipse.jetty.io.EndPoint getEndPoint()"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.HttpChannel.getLocalAddress()", "public java.net.InetSocketAddress getLocalAddress()"], ["java.net.InetSocketAddress", "org.eclipse.jetty.server.HttpChannel.getRemoteAddress()", "public java.net.InetSocketAddress getRemoteAddress()"], ["void", "org.eclipse.jetty.server.HttpChannel.continue100(int)", "public void continue100(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpChannel.recycle()", "public void recycle()"], ["void", "org.eclipse.jetty.server.HttpChannel.onAsyncWaitForContent()", "public void onAsyncWaitForContent()"], ["void", "org.eclipse.jetty.server.HttpChannel.onBlockWaitForContent()", "public void onBlockWaitForContent()"], ["void", "org.eclipse.jetty.server.HttpChannel.onBlockWaitForContentFailure(java.lang.Throwable)", "public void onBlockWaitForContentFailure(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpChannel.run()", "public void run()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.handle()", "public boolean handle()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.isExpecting100Continue()", "public boolean isExpecting100Continue()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.isExpecting102Processing()", "public boolean isExpecting102Processing()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannel.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.HttpChannel.onRequest(org.eclipse.jetty.http.MetaData$Request)", "public void onRequest(org.eclipse.jetty.http.MetaData$Request)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.onContent(org.eclipse.jetty.server.HttpInput$Content)", "public boolean onContent(org.eclipse.jetty.server.HttpInput$Content)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.onContentComplete()", "public boolean onContentComplete()"], ["void", "org.eclipse.jetty.server.HttpChannel.onTrailers(org.eclipse.jetty.http.HttpFields)", "public void onTrailers(org.eclipse.jetty.http.HttpFields)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.onRequestComplete()", "public boolean onRequestComplete()"], ["void", "org.eclipse.jetty.server.HttpChannel.onCompleted()", "public void onCompleted()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.onEarlyEOF()", "public boolean onEarlyEOF()"], ["void", "org.eclipse.jetty.server.HttpChannel.onBadMessage(org.eclipse.jetty.http.BadMessageException)", "public void onBadMessage(org.eclipse.jetty.http.BadMessageException)"], ["boolean", "org.eclipse.jetty.server.HttpChannel.sendResponse(org.eclipse.jetty.http.MetaData$Response, java.nio.ByteBuffer, boolean)", "public boolean sendResponse(org.eclipse.jetty.http.MetaData$Response, java.nio.ByteBuffer, boolean) throws java.io.IOException"], ["boolean", "org.eclipse.jetty.server.HttpChannel.isCommitted()", "public boolean isCommitted()"], ["void", "org.eclipse.jetty.server.HttpChannel.write(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)", "public void write(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpChannel.resetBuffer()", "public void resetBuffer()"], ["org.eclipse.jetty.server.HttpOutput$Interceptor", "org.eclipse.jetty.server.HttpChannel.getNextInterceptor()", "public org.eclipse.jetty.server.HttpOutput$Interceptor getNextInterceptor()"], ["org.eclipse.jetty.util.thread.Scheduler", "org.eclipse.jetty.server.HttpChannel.getScheduler()", "public org.eclipse.jetty.util.thread.Scheduler getScheduler()"], ["boolean", "org.eclipse.jetty.server.HttpChannel.useDirectBuffers()", "public boolean useDirectBuffers()"], ["void", "org.eclipse.jetty.server.HttpChannel.abort(java.lang.Throwable)", "public void abort(java.lang.Throwable)"], ["org.eclipse.jetty.util.thread.Invocable$InvocationType", "org.eclipse.jetty.server.HttpConnection$SendCallback.getInvocationType()", "public org.eclipse.jetty.util.thread.Invocable$InvocationType getInvocationType()"], ["org.eclipse.jetty.util.IteratingCallback$Action", "org.eclipse.jetty.server.HttpConnection$SendCallback.process()", "public org.eclipse.jetty.util.IteratingCallback$Action process() throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.HttpConnection$SendCallback.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.HttpConnection$SendCallback.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpInput$Content", "org.eclipse.jetty.server.HttpInput$Content(java.nio.ByteBuffer)", "public org.eclipse.jetty.server.HttpInput$Content(java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.HttpInput$Content.getByteBuffer()", "public java.nio.ByteBuffer getByteBuffer()"], ["org.eclipse.jetty.util.thread.Invocable$InvocationType", "org.eclipse.jetty.server.HttpInput$Content.getInvocationType()", "public org.eclipse.jetty.util.thread.Invocable$InvocationType getInvocationType()"], ["int", "org.eclipse.jetty.server.HttpInput$Content.get(byte[], int, int)", "public int get(byte[], int, int)"], ["int", "org.eclipse.jetty.server.HttpInput$Content.skip(int)", "public int skip(int)"], ["boolean", "org.eclipse.jetty.server.HttpInput$Content.hasContent()", "public boolean hasContent()"], ["int", "org.eclipse.jetty.server.HttpInput$Content.remaining()", "public int remaining()"], ["boolean", "org.eclipse.jetty.server.HttpInput$Content.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$Content.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpInputOverHTTP", "org.eclipse.jetty.server.HttpInputOverHTTP(org.eclipse.jetty.server.HttpChannelState)", "public org.eclipse.jetty.server.HttpInputOverHTTP(org.eclipse.jetty.server.HttpChannelState)"], ["default", "org.eclipse.jetty.server.HttpOutput$Interceptor.void resetBuffer()", "public default void resetBuffer() throws java.lang.IllegalStateException"], ["org.eclipse.jetty.server.HttpWriter", "org.eclipse.jetty.server.HttpWriter(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.HttpWriter(org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.HttpWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.server.LowResourceMonitor$MainThreadPoolLowResourceCheck", "org.eclipse.jetty.server.LowResourceMonitor$MainThreadPoolLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor)", "public org.eclipse.jetty.server.LowResourceMonitor$MainThreadPoolLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor$MainThreadPoolLowResourceCheck.isLowOnResources()", "public boolean isLowOnResources()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$MainThreadPoolLowResourceCheck.getReason()", "public java.lang.String getReason()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$MainThreadPoolLowResourceCheck.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyProtocolV1Connection.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyProtocolV1Connection.onFillable()", "public void onFillable()"], ["void", "org.eclipse.jetty.server.Request$1.close()", "public void close() throws java.io.IOException"], ["org.eclipse.jetty.server.ResponseWriter", "org.eclipse.jetty.server.ResponseWriter(org.eclipse.jetty.server.HttpWriter, java.util.Locale, java.lang.String)", "public org.eclipse.jetty.server.ResponseWriter(org.eclipse.jetty.server.HttpWriter, java.util.Locale, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.ResponseWriter.isFor(java.util.Locale, java.lang.String)", "public boolean isFor(java.util.Locale, java.lang.String)"], ["boolean", "org.eclipse.jetty.server.ResponseWriter.checkError()", "public boolean checkError()"], ["void", "org.eclipse.jetty.server.ResponseWriter.flush()", "public void flush()"], ["void", "org.eclipse.jetty.server.ResponseWriter.close()", "public void close()"], ["void", "org.eclipse.jetty.server.ResponseWriter.write(int)", "public void write(int)"], ["void", "org.eclipse.jetty.server.ResponseWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.eclipse.jetty.server.ResponseWriter.write(char[])", "public void write(char[])"], ["void", "org.eclipse.jetty.server.ResponseWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["void", "org.eclipse.jetty.server.ResponseWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(boolean)", "public void print(boolean)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(char)", "public void print(char)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(int)", "public void print(int)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(long)", "public void print(long)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(float)", "public void print(float)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(double)", "public void print(double)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(char[])", "public void print(char[])"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(java.lang.String)", "public void print(java.lang.String)"], ["void", "org.eclipse.jetty.server.ResponseWriter.print(java.lang.Object)", "public void print(java.lang.Object)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println()", "public void println()"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(boolean)", "public void println(boolean)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(char)", "public void println(char)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(int)", "public void println(int)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(long)", "public void println(long)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(float)", "public void println(float)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(double)", "public void println(double)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(char[])", "public void println(char[])"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(java.lang.String)", "public void println(java.lang.String)"], ["void", "org.eclipse.jetty.server.ResponseWriter.println(java.lang.Object)", "public void println(java.lang.Object)"], ["java.io.PrintWriter", "org.eclipse.jetty.server.ResponseWriter.printf(java.lang.String, java.lang.Object...)", "public java.io.PrintWriter printf(java.lang.String, java.lang.Object...)"], ["java.io.PrintWriter", "org.eclipse.jetty.server.ResponseWriter.printf(java.util.Locale, java.lang.String, java.lang.Object...)", "public java.io.PrintWriter printf(java.util.Locale, java.lang.String, java.lang.Object...)"], ["java.io.PrintWriter", "org.eclipse.jetty.server.ResponseWriter.format(java.lang.String, java.lang.Object...)", "public java.io.PrintWriter format(java.lang.String, java.lang.Object...)"], ["java.io.PrintWriter", "org.eclipse.jetty.server.ResponseWriter.format(java.util.Locale, java.lang.String, java.lang.Object...)", "public java.io.PrintWriter format(java.util.Locale, java.lang.String, java.lang.Object...)"], ["org.eclipse.jetty.server.ServerConnector$ServerConnectorManager", "org.eclipse.jetty.server.ServerConnector$ServerConnectorManager(org.eclipse.jetty.server.ServerConnector, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, int)", "public org.eclipse.jetty.server.ServerConnector$ServerConnectorManager(org.eclipse.jetty.server.ServerConnector, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, int)"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.ServerConnector$ServerConnectorManager.newConnection(java.nio.channels.SelectableChannel, org.eclipse.jetty.io.EndPoint, java.lang.Object)", "public org.eclipse.jetty.io.Connection newConnection(java.nio.channels.SelectableChannel, org.eclipse.jetty.io.EndPoint, java.lang.Object) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.ServerConnector$ServerConnectorManager.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStore$2.run()", "public void run()"], ["org.eclipse.jetty.server.session.DefaultSessionCacheFactory", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory()", "public org.eclipse.jetty.server.session.DefaultSessionCacheFactory()"], ["boolean", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.isSaveOnCreate()", "public boolean isSaveOnCreate()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.setSaveOnCreate(boolean)", "public void setSaveOnCreate(boolean)"], ["boolean", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.isRemoveUnloadableSessions()", "public boolean isRemoveUnloadableSessions()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.setRemoveUnloadableSessions(boolean)", "public void setRemoveUnloadableSessions(boolean)"], ["int", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.getEvictionPolicy()", "public int getEvictionPolicy()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.setEvictionPolicy(int)", "public void setEvictionPolicy(int)"], ["boolean", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.isSaveOnInactiveEvict()", "public boolean isSaveOnInactiveEvict()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.setSaveOnInactiveEvict(boolean)", "public void setSaveOnInactiveEvict(boolean)"], ["org.eclipse.jetty.server.session.SessionCache", "org.eclipse.jetty.server.session.DefaultSessionCacheFactory.getSessionCache(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionCache getSessionCache(org.eclipse.jetty.server.session.SessionHandler)"], ["org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema()", "public org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getSchemaName()", "public java.lang.String getSchemaName()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setSchemaName(java.lang.String)", "public void setSchemaName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getTableName()", "public java.lang.String getTableName()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setTableName(java.lang.String)", "public void setTableName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getIdColumn()", "public java.lang.String getIdColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setIdColumn(java.lang.String)", "public void setIdColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getContextPathColumn()", "public java.lang.String getContextPathColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setContextPathColumn(java.lang.String)", "public void setContextPathColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getVirtualHostColumn()", "public java.lang.String getVirtualHostColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setVirtualHostColumn(java.lang.String)", "public void setVirtualHostColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getLastNodeColumn()", "public java.lang.String getLastNodeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setLastNodeColumn(java.lang.String)", "public void setLastNodeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getAccessTimeColumn()", "public java.lang.String getAccessTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setAccessTimeColumn(java.lang.String)", "public void setAccessTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getLastAccessTimeColumn()", "public java.lang.String getLastAccessTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setLastAccessTimeColumn(java.lang.String)", "public void setLastAccessTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getCreateTimeColumn()", "public java.lang.String getCreateTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setCreateTimeColumn(java.lang.String)", "public void setCreateTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getCookieTimeColumn()", "public java.lang.String getCookieTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setCookieTimeColumn(java.lang.String)", "public void setCookieTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getLastSavedTimeColumn()", "public java.lang.String getLastSavedTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setLastSavedTimeColumn(java.lang.String)", "public void setLastSavedTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getExpiryTimeColumn()", "public java.lang.String getExpiryTimeColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setExpiryTimeColumn(java.lang.String)", "public void setExpiryTimeColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getMaxIntervalColumn()", "public java.lang.String getMaxIntervalColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setMaxIntervalColumn(java.lang.String)", "public void setMaxIntervalColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getMapColumn()", "public java.lang.String getMapColumn()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.setMapColumn(java.lang.String)", "public void setMapColumn(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getCreateStatementAsString()", "public java.lang.String getCreateStatementAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getCreateIndexOverExpiryStatementAsString(java.lang.String)", "public java.lang.String getCreateIndexOverExpiryStatementAsString(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getCreateIndexOverSessionStatementAsString(java.lang.String)", "public java.lang.String getCreateIndexOverSessionStatementAsString(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getAlterTableForMaxIntervalAsString()", "public java.lang.String getAlterTableForMaxIntervalAsString()"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getInsertSessionStatementAsString()", "public java.lang.String getInsertSessionStatementAsString()"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getUpdateSessionStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext)", "public java.sql.PreparedStatement getUpdateSessionStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext) throws java.sql.SQLException"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getExpiredSessionsStatement(java.sql.Connection, java.lang.String, java.lang.String, long)", "public java.sql.PreparedStatement getExpiredSessionsStatement(java.sql.Connection, java.lang.String, java.lang.String, long) throws java.sql.SQLException"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getMyExpiredSessionsStatement(java.sql.Connection, org.eclipse.jetty.server.session.SessionContext, long)", "public java.sql.PreparedStatement getMyExpiredSessionsStatement(java.sql.Connection, org.eclipse.jetty.server.session.SessionContext, long) throws java.sql.SQLException"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getAllAncientExpiredSessionsStatement(java.sql.Connection)", "public java.sql.PreparedStatement getAllAncientExpiredSessionsStatement(java.sql.Connection) throws java.sql.SQLException"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getCheckSessionExistsStatement(java.sql.Connection, org.eclipse.jetty.server.session.SessionContext)", "public java.sql.PreparedStatement getCheckSessionExistsStatement(java.sql.Connection, org.eclipse.jetty.server.session.SessionContext) throws java.sql.SQLException"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getLoadStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext)", "public java.sql.PreparedStatement getLoadStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext) throws java.sql.SQLException"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getUpdateStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext)", "public java.sql.PreparedStatement getUpdateStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext) throws java.sql.SQLException"], ["java.sql.PreparedStatement", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.getDeleteStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext)", "public java.sql.PreparedStatement getDeleteStatement(java.sql.Connection, java.lang.String, org.eclipse.jetty.server.session.SessionContext) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.prepareTables()", "public void prepareTables() throws java.sql.SQLException"], ["java.lang.String", "org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.server.session.UnreadableSessionDataException.getId()", "public java.lang.String getId()"], ["org.eclipse.jetty.server.session.SessionContext", "org.eclipse.jetty.server.session.UnreadableSessionDataException.getSessionContext()", "public org.eclipse.jetty.server.session.SessionContext getSessionContext()"], ["org.eclipse.jetty.server.session.UnreadableSessionDataException", "org.eclipse.jetty.server.session.UnreadableSessionDataException(java.lang.String, org.eclipse.jetty.server.session.SessionContext, java.lang.Throwable)", "public org.eclipse.jetty.server.session.UnreadableSessionDataException(java.lang.String, org.eclipse.jetty.server.session.SessionContext, java.lang.Throwable)"], ["org.eclipse.jetty.server.Slf4jRequestLog", "org.eclipse.jetty.server.Slf4jRequestLog()", "public org.eclipse.jetty.server.Slf4jRequestLog()"], ["void", "org.eclipse.jetty.server.Slf4jRequestLog.setLoggerName(java.lang.String)", "public void setLoggerName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.Slf4jRequestLog.getLoggerName()", "public java.lang.String getLoggerName()"], ["void", "org.eclipse.jetty.server.Slf4jRequestLog.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnectionFactory.getProtocol()", "public java.lang.String getProtocol()"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.AbstractConnectionFactory.getProtocols()", "public java.util.List<java.lang.String> getProtocols()"], ["int", "org.eclipse.jetty.server.AbstractConnectionFactory.getInputBufferSize()", "public int getInputBufferSize()"], ["void", "org.eclipse.jetty.server.AbstractConnectionFactory.setInputBufferSize(int)", "public void setInputBufferSize(int)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnectionFactory.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.ConnectionFactory[]", "org.eclipse.jetty.server.AbstractConnectionFactory.getFactories(org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)", "public static org.eclipse.jetty.server.ConnectionFactory[] getFactories(org.eclipse.jetty.util.ssl.SslContextFactory, org.eclipse.jetty.server.ConnectionFactory...)"], ["void", "org.eclipse.jetty.server.AsyncContextState$2.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$2.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.server.Authentication$3.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.DebugListener", "org.eclipse.jetty.server.DebugListener()", "public org.eclipse.jetty.server.DebugListener()"], ["org.eclipse.jetty.server.DebugListener", "org.eclipse.jetty.server.DebugListener(boolean, boolean, boolean)", "public org.eclipse.jetty.server.DebugListener(boolean, boolean, boolean)"], ["org.eclipse.jetty.server.DebugListener", "org.eclipse.jetty.server.DebugListener(java.io.OutputStream, boolean, boolean, boolean)", "public org.eclipse.jetty.server.DebugListener(java.io.OutputStream, boolean, boolean, boolean)"], ["boolean", "org.eclipse.jetty.server.DebugListener.isRenameThread()", "public boolean isRenameThread()"], ["void", "org.eclipse.jetty.server.DebugListener.setRenameThread(boolean)", "public void setRenameThread(boolean)"], ["boolean", "org.eclipse.jetty.server.DebugListener.isShowHeaders()", "public boolean isShowHeaders()"], ["void", "org.eclipse.jetty.server.DebugListener.setShowHeaders(boolean)", "public void setShowHeaders(boolean)"], ["boolean", "org.eclipse.jetty.server.DebugListener.isDumpContext()", "public boolean isDumpContext()"], ["void", "org.eclipse.jetty.server.DebugListener.setDumpContext(boolean)", "public void setDumpContext(boolean)"], ["void", "org.eclipse.jetty.server.DebugListener.contextInitialized(javax.servlet.ServletContextEvent)", "public void contextInitialized(javax.servlet.ServletContextEvent)"], ["void", "org.eclipse.jetty.server.DebugListener.contextDestroyed(javax.servlet.ServletContextEvent)", "public void contextDestroyed(javax.servlet.ServletContextEvent)"], ["org.eclipse.jetty.server.handler.AbstractHandler$ErrorDispatchHandler", "org.eclipse.jetty.server.handler.AbstractHandler$ErrorDispatchHandler()", "public org.eclipse.jetty.server.handler.AbstractHandler$ErrorDispatchHandler()"], ["void", "org.eclipse.jetty.server.handler.AbstractHandler$ErrorDispatchHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public final void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.ClassLoader", "org.eclipse.jetty.server.handler.ContextHandler$Caller.getCallerClassLoader(int)", "public java.lang.ClassLoader getCallerClassLoader(int)"], ["org.eclipse.jetty.server.handler.DefaultHandler", "org.eclipse.jetty.server.handler.DefaultHandler()", "public org.eclipse.jetty.server.handler.DefaultHandler()"], ["void", "org.eclipse.jetty.server.handler.DefaultHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["boolean", "org.eclipse.jetty.server.handler.DefaultHandler.getServeIcon()", "public boolean getServeIcon()"], ["void", "org.eclipse.jetty.server.handler.DefaultHandler.setServeIcon(boolean)", "public void setServeIcon(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.DefaultHandler.getShowContexts()", "public boolean getShowContexts()"], ["void", "org.eclipse.jetty.server.handler.DefaultHandler.setShowContexts(boolean)", "public void setShowContexts(boolean)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHttpInputInterceptor$1.succeeded()", "public void succeeded()"], ["org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GZState[]", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GZState.values()", "public static org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GZState[] values()"], ["org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GZState", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GZState.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GZState valueOf(java.lang.String)"], ["org.eclipse.jetty.server.handler.HotSwapHandler", "org.eclipse.jetty.server.handler.HotSwapHandler()", "public org.eclipse.jetty.server.handler.HotSwapHandler()"], ["org.eclipse.jetty.server.Handler", "org.eclipse.jetty.server.handler.HotSwapHandler.getHandler()", "public org.eclipse.jetty.server.Handler getHandler()"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.HotSwapHandler.getHandlers()", "public org.eclipse.jetty.server.Handler[] getHandlers()"], ["void", "org.eclipse.jetty.server.handler.HotSwapHandler.setHandler(org.eclipse.jetty.server.Handler)", "public void setHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HotSwapHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.HotSwapHandler.destroy()", "public void destroy()"], ["org.eclipse.jetty.server.handler.StatisticsHandler", "org.eclipse.jetty.server.handler.StatisticsHandler()", "public org.eclipse.jetty.server.handler.StatisticsHandler()"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler.statsReset()", "public void statsReset()"], ["void", "org.eclipse.jetty.server.handler.StatisticsHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequests()", "public int getRequests()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestsActive()", "public int getRequestsActive()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestsActiveMax()", "public int getRequestsActiveMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeMax()", "public long getRequestTimeMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeTotal()", "public long getRequestTimeTotal()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeMean()", "public double getRequestTimeMean()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getRequestTimeStdDev()", "public double getRequestTimeStdDev()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatched()", "public int getDispatched()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedActive()", "public int getDispatchedActive()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedActiveMax()", "public int getDispatchedActiveMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeMax()", "public long getDispatchedTimeMax()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeTotal()", "public long getDispatchedTimeTotal()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeMean()", "public double getDispatchedTimeMean()"], ["double", "org.eclipse.jetty.server.handler.StatisticsHandler.getDispatchedTimeStdDev()", "public double getDispatchedTimeStdDev()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncRequests()", "public int getAsyncRequests()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncRequestsWaiting()", "public int getAsyncRequestsWaiting()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncRequestsWaitingMax()", "public int getAsyncRequestsWaitingMax()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getAsyncDispatches()", "public int getAsyncDispatches()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getExpires()", "public int getExpires()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses1xx()", "public int getResponses1xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses2xx()", "public int getResponses2xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses3xx()", "public int getResponses3xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses4xx()", "public int getResponses4xx()"], ["int", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponses5xx()", "public int getResponses5xx()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getStatsOnMs()", "public long getStatsOnMs()"], ["long", "org.eclipse.jetty.server.handler.StatisticsHandler.getResponsesBytesTotal()", "public long getResponsesBytesTotal()"], ["java.lang.String", "org.eclipse.jetty.server.handler.StatisticsHandler.toStatsHTML()", "public java.lang.String toStatsHTML()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.handler.StatisticsHandler.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["boolean", "org.eclipse.jetty.server.handler.StatisticsHandler.isShutdown()", "public boolean isShutdown()"], ["java.lang.String", "org.eclipse.jetty.server.handler.StatisticsHandler.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpChannelOverHttp", "org.eclipse.jetty.server.HttpChannelOverHttp(org.eclipse.jetty.server.HttpConnection, org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport)", "public org.eclipse.jetty.server.HttpChannelOverHttp(org.eclipse.jetty.server.HttpConnection, org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.server.HttpTransport)"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.recycle()", "public void recycle()"], ["boolean", "org.eclipse.jetty.server.HttpChannelOverHttp.isExpecting100Continue()", "public boolean isExpecting100Continue()"], ["boolean", "org.eclipse.jetty.server.HttpChannelOverHttp.isExpecting102Processing()", "public boolean isExpecting102Processing()"], ["boolean", "org.eclipse.jetty.server.HttpChannelOverHttp.startRequest(java.lang.String, java.lang.String, org.eclipse.jetty.http.HttpVersion)", "public boolean startRequest(java.lang.String, java.lang.String, org.eclipse.jetty.http.HttpVersion)"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.parsedHeader(org.eclipse.jetty.http.HttpField)", "public void parsedHeader(org.eclipse.jetty.http.HttpField)"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.parsedTrailer(org.eclipse.jetty.http.HttpField)", "public void parsedTrailer(org.eclipse.jetty.http.HttpField)"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.continue100(int)", "public void continue100(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.earlyEOF()", "public void earlyEOF()"], ["boolean", "org.eclipse.jetty.server.HttpChannelOverHttp.content(java.nio.ByteBuffer)", "public boolean content(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.onAsyncWaitForContent()", "public void onAsyncWaitForContent()"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.onBlockWaitForContent()", "public void onBlockWaitForContent()"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.onBlockWaitForContentFailure(java.lang.Throwable)", "public void onBlockWaitForContentFailure(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.badMessage(org.eclipse.jetty.http.BadMessageException)", "public void badMessage(org.eclipse.jetty.http.BadMessageException)"], ["boolean", "org.eclipse.jetty.server.HttpChannelOverHttp.headerComplete()", "public boolean headerComplete()"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.abort(java.lang.Throwable)", "public void abort(java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.server.HttpChannelOverHttp.contentComplete()", "public boolean contentComplete()"], ["boolean", "org.eclipse.jetty.server.HttpChannelOverHttp.messageComplete()", "public boolean messageComplete()"], ["int", "org.eclipse.jetty.server.HttpChannelOverHttp.getHeaderCacheSize()", "public int getHeaderCacheSize()"], ["void", "org.eclipse.jetty.server.HttpChannelOverHttp.onComplianceViolation(org.eclipse.jetty.http.HttpCompliance, org.eclipse.jetty.http.HttpComplianceSection, java.lang.String)", "public void onComplianceViolation(org.eclipse.jetty.http.HttpCompliance, org.eclipse.jetty.http.HttpComplianceSection, java.lang.String)"], ["org.eclipse.jetty.server.HttpConnection", "org.eclipse.jetty.server.HttpConnection.getCurrentConnection()", "public static org.eclipse.jetty.server.HttpConnection getCurrentConnection()"], ["org.eclipse.jetty.server.HttpConnection", "org.eclipse.jetty.server.HttpConnection(org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.http.HttpCompliance, boolean)", "public org.eclipse.jetty.server.HttpConnection(org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint, org.eclipse.jetty.http.HttpCompliance, boolean)"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConnection.getHttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration getHttpConfiguration()"], ["boolean", "org.eclipse.jetty.server.HttpConnection.isRecordHttpComplianceViolations()", "public boolean isRecordHttpComplianceViolations()"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.HttpConnection.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["org.eclipse.jetty.server.Connector", "org.eclipse.jetty.server.HttpConnection.getConnector()", "public org.eclipse.jetty.server.Connector getConnector()"], ["org.eclipse.jetty.server.HttpChannel", "org.eclipse.jetty.server.HttpConnection.getHttpChannel()", "public org.eclipse.jetty.server.HttpChannel getHttpChannel()"], ["org.eclipse.jetty.http.HttpParser", "org.eclipse.jetty.server.HttpConnection.getParser()", "public org.eclipse.jetty.http.HttpParser getParser()"], ["org.eclipse.jetty.http.HttpGenerator", "org.eclipse.jetty.server.HttpConnection.getGenerator()", "public org.eclipse.jetty.http.HttpGenerator getGenerator()"], ["boolean", "org.eclipse.jetty.server.HttpConnection.isOptimizedForDirectBuffers()", "public boolean isOptimizedForDirectBuffers()"], ["long", "org.eclipse.jetty.server.HttpConnection.getMessagesIn()", "public long getMessagesIn()"], ["long", "org.eclipse.jetty.server.HttpConnection.getMessagesOut()", "public long getMessagesOut()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.HttpConnection.onUpgradeFrom()", "public java.nio.ByteBuffer onUpgradeFrom()"], ["void", "org.eclipse.jetty.server.HttpConnection.onFlushed(long)", "public void onFlushed(long) throws java.io.IOException"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.HttpConnection.getRequestBuffer()", "public java.nio.ByteBuffer getRequestBuffer()"], ["boolean", "org.eclipse.jetty.server.HttpConnection.isRequestBufferEmpty()", "public boolean isRequestBufferEmpty()"], ["void", "org.eclipse.jetty.server.HttpConnection.onFillable()", "public void onFillable()"], ["void", "org.eclipse.jetty.server.HttpConnection.onCompleted()", "public void onCompleted()"], ["void", "org.eclipse.jetty.server.HttpConnection.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.HttpConnection.onClose()", "public void onClose()"], ["void", "org.eclipse.jetty.server.HttpConnection.run()", "public void run()"], ["void", "org.eclipse.jetty.server.HttpConnection.send(org.eclipse.jetty.http.MetaData$Response, boolean, java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)", "public void send(org.eclipse.jetty.http.MetaData$Response, boolean, java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpConnection.abort(java.lang.Throwable)", "public void abort(java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.server.HttpConnection.isPushSupported()", "public boolean isPushSupported()"], ["void", "org.eclipse.jetty.server.HttpConnection.push(org.eclipse.jetty.http.MetaData$Request)", "public void push(org.eclipse.jetty.http.MetaData$Request)"], ["void", "org.eclipse.jetty.server.HttpConnection.asyncReadFillInterested()", "public void asyncReadFillInterested()"], ["void", "org.eclipse.jetty.server.HttpConnection.blockingReadFillInterested()", "public void blockingReadFillInterested()"], ["void", "org.eclipse.jetty.server.HttpConnection.blockingReadFailure(java.lang.Throwable)", "public void blockingReadFailure(java.lang.Throwable)"], ["long", "org.eclipse.jetty.server.HttpConnection.getBytesIn()", "public long getBytesIn()"], ["long", "org.eclipse.jetty.server.HttpConnection.getBytesOut()", "public long getBytesOut()"], ["java.lang.String", "org.eclipse.jetty.server.HttpConnection.toConnectionString()", "public java.lang.String toConnectionString()"], ["void", "org.eclipse.jetty.server.HttpOutput$1.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpOutput$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.server.LocalConnector$LocalEndPoint", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint(org.eclipse.jetty.server.LocalConnector)", "public org.eclipse.jetty.server.LocalConnector$LocalEndPoint(org.eclipse.jetty.server.LocalConnector)"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.onClose()", "public void onClose()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.doShutdownOutput()", "public void doShutdownOutput()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.waitUntilClosed()", "public void waitUntilClosed()"], ["void", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.waitUntilClosedOrIdleFor(long, java.util.concurrent.TimeUnit)", "public void waitUntilClosedOrIdleFor(long, java.util.concurrent.TimeUnit)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.getResponseData()", "public java.nio.ByteBuffer getResponseData()"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.getResponse()", "public java.lang.String getResponse() throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.getResponse(boolean, long, java.util.concurrent.TimeUnit)", "public java.lang.String getResponse(boolean, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["java.nio.ByteBuffer", "org.eclipse.jetty.server.LocalConnector$LocalEndPoint.waitForResponse(boolean, long, java.util.concurrent.TimeUnit)", "public java.nio.ByteBuffer waitForResponse(boolean, long, java.util.concurrent.TimeUnit) throws java.lang.Exception"], ["org.eclipse.jetty.server.LowResourceMonitor", "org.eclipse.jetty.server.LowResourceMonitor(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.LowResourceMonitor(org.eclipse.jetty.server.Server)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor.getMonitorThreads()", "public boolean getMonitorThreads()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMonitorThreads(boolean)", "public void setMonitorThreads(boolean)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getMaxConnections()", "public int getMaxConnections()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMaxConnections(int)", "public void setMaxConnections(int)"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor.getReasons()", "public java.lang.String getReasons()"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor.isLowOnResources()", "public boolean isLowOnResources()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor.getLowResourcesReasons()", "public java.lang.String getLowResourcesReasons()"], ["long", "org.eclipse.jetty.server.LowResourceMonitor.getLowResourcesStarted()", "public long getLowResourcesStarted()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setLowResourcesStarted(long)", "public void setLowResourcesStarted(long)"], ["java.util.Collection<org.eclipse.jetty.server.Connector>", "org.eclipse.jetty.server.LowResourceMonitor.getMonitoredConnectors()", "public java.util.Collection<org.eclipse.jetty.server.Connector> getMonitoredConnectors()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMonitoredConnectors(java.util.Collection<org.eclipse.jetty.server.Connector>)", "public void setMonitoredConnectors(java.util.Collection<org.eclipse.jetty.server.Connector>)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor.isAcceptingInLowResources()", "public boolean isAcceptingInLowResources()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setAcceptingInLowResources(boolean)", "public void setAcceptingInLowResources(boolean)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getPeriod()", "public int getPeriod()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setPeriod(int)", "public void setPeriod(int)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getLowResourcesIdleTimeout()", "public int getLowResourcesIdleTimeout()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setLowResourcesIdleTimeout(int)", "public void setLowResourcesIdleTimeout(int)"], ["int", "org.eclipse.jetty.server.LowResourceMonitor.getMaxLowResourcesTime()", "public int getMaxLowResourcesTime()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMaxLowResourcesTime(int)", "public void setMaxLowResourcesTime(int)"], ["long", "org.eclipse.jetty.server.LowResourceMonitor.getMaxMemory()", "public long getMaxMemory()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setMaxMemory(long)", "public void setMaxMemory(long)"], ["java.util.Set<org.eclipse.jetty.server.LowResourceMonitor$LowResourceCheck>", "org.eclipse.jetty.server.LowResourceMonitor.getLowResourceChecks()", "public java.util.Set<org.eclipse.jetty.server.LowResourceMonitor$LowResourceCheck> getLowResourceChecks()"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.setLowResourceChecks(java.util.Set<org.eclipse.jetty.server.LowResourceMonitor$LowResourceCheck>)", "public void setLowResourceChecks(java.util.Set<org.eclipse.jetty.server.LowResourceMonitor$LowResourceCheck>)"], ["void", "org.eclipse.jetty.server.LowResourceMonitor.addLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor$LowResourceCheck)", "public void addLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor$LowResourceCheck)"], ["org.eclipse.jetty.server.NegotiatingServerConnectionFactory", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory(java.lang.String, java.lang.String...)", "public org.eclipse.jetty.server.NegotiatingServerConnectionFactory(java.lang.String, java.lang.String...)"], ["java.lang.String", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.getDefaultProtocol()", "public java.lang.String getDefaultProtocol()"], ["void", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.setDefaultProtocol(java.lang.String)", "public void setDefaultProtocol(java.lang.String)"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.getNegotiatedProtocols()", "public java.util.List<java.lang.String> getNegotiatedProtocols()"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["java.lang.String", "org.eclipse.jetty.server.NegotiatingServerConnectionFactory.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyProtocolV2Connection.onOpen()", "public void onOpen()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory$ProxyProtocolV2Connection.onFillable()", "public void onFillable()"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException()", "public org.eclipse.jetty.server.QuietServletException()"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException(java.lang.String, java.lang.Throwable)", "public org.eclipse.jetty.server.QuietServletException(java.lang.String, java.lang.Throwable)"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException(java.lang.String)", "public org.eclipse.jetty.server.QuietServletException(java.lang.String)"], ["org.eclipse.jetty.server.QuietServletException", "org.eclipse.jetty.server.QuietServletException(java.lang.Throwable)", "public org.eclipse.jetty.server.QuietServletException(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.ResourceService$1.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.ResourceService$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.ResourceService$1.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.Response$OutputType[]", "org.eclipse.jetty.server.Response$OutputType.values()", "public static org.eclipse.jetty.server.Response$OutputType[] values()"], ["org.eclipse.jetty.server.Response$OutputType", "org.eclipse.jetty.server.Response$OutputType.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.Response$OutputType valueOf(java.lang.String)"], ["org.eclipse.jetty.server.session.AbstractSessionCache$PlaceHolderSession", "org.eclipse.jetty.server.session.AbstractSessionCache$PlaceHolderSession(org.eclipse.jetty.server.session.AbstractSessionCache, org.eclipse.jetty.server.session.SessionHandler, org.eclipse.jetty.server.session.SessionData)", "public org.eclipse.jetty.server.session.AbstractSessionCache$PlaceHolderSession(org.eclipse.jetty.server.session.AbstractSessionCache, org.eclipse.jetty.server.session.SessionHandler, org.eclipse.jetty.server.session.SessionData)"], ["org.eclipse.jetty.server.session.CachingSessionDataStore", "org.eclipse.jetty.server.session.CachingSessionDataStore(org.eclipse.jetty.server.session.SessionDataMap, org.eclipse.jetty.server.session.SessionDataStore)", "public org.eclipse.jetty.server.session.CachingSessionDataStore(org.eclipse.jetty.server.session.SessionDataMap, org.eclipse.jetty.server.session.SessionDataStore)"], ["org.eclipse.jetty.server.session.SessionDataStore", "org.eclipse.jetty.server.session.CachingSessionDataStore.getSessionStore()", "public org.eclipse.jetty.server.session.SessionDataStore getSessionStore()"], ["org.eclipse.jetty.server.session.SessionDataMap", "org.eclipse.jetty.server.session.CachingSessionDataStore.getSessionDataMap()", "public org.eclipse.jetty.server.session.SessionDataMap getSessionDataMap()"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.CachingSessionDataStore.load(java.lang.String)", "public org.eclipse.jetty.server.session.SessionData load(java.lang.String) throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.CachingSessionDataStore.delete(java.lang.String)", "public boolean delete(java.lang.String) throws java.lang.Exception"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.CachingSessionDataStore.getExpired(java.util.Set<java.lang.String>)", "public java.util.Set<java.lang.String> getExpired(java.util.Set<java.lang.String>)"], ["void", "org.eclipse.jetty.server.session.CachingSessionDataStore.store(java.lang.String, org.eclipse.jetty.server.session.SessionData)", "public void store(java.lang.String, org.eclipse.jetty.server.session.SessionData) throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.CachingSessionDataStore.isPassivating()", "public boolean isPassivating()"], ["boolean", "org.eclipse.jetty.server.session.CachingSessionDataStore.exists(java.lang.String)", "public boolean exists(java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.CachingSessionDataStore.initialize(org.eclipse.jetty.server.session.SessionContext)", "public void initialize(org.eclipse.jetty.server.session.SessionContext) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.CachingSessionDataStore.newSessionData(java.lang.String, long, long, long, long)", "public org.eclipse.jetty.server.session.SessionData newSessionData(java.lang.String, long, long, long, long)"], ["org.eclipse.jetty.server.session.DefaultSessionCache", "org.eclipse.jetty.server.session.DefaultSessionCache(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.DefaultSessionCache(org.eclipse.jetty.server.session.SessionHandler)"], ["long", "org.eclipse.jetty.server.session.DefaultSessionCache.getSessionsCurrent()", "public long getSessionsCurrent()"], ["long", "org.eclipse.jetty.server.session.DefaultSessionCache.getSessionsMax()", "public long getSessionsMax()"], ["long", "org.eclipse.jetty.server.session.DefaultSessionCache.getSessionsTotal()", "public long getSessionsTotal()"], ["void", "org.eclipse.jetty.server.session.DefaultSessionCache.resetStats()", "public void resetStats()"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.DefaultSessionCache.doGet(java.lang.String)", "public org.eclipse.jetty.server.session.Session doGet(java.lang.String)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.DefaultSessionCache.doPutIfAbsent(java.lang.String, org.eclipse.jetty.server.session.Session)", "public org.eclipse.jetty.server.session.Session doPutIfAbsent(java.lang.String, org.eclipse.jetty.server.session.Session)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.DefaultSessionCache.doDelete(java.lang.String)", "public org.eclipse.jetty.server.session.Session doDelete(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.DefaultSessionCache.shutdown()", "public void shutdown()"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.DefaultSessionCache.newSession(javax.servlet.http.HttpServletRequest, org.eclipse.jetty.server.session.SessionData)", "public org.eclipse.jetty.server.session.Session newSession(javax.servlet.http.HttpServletRequest, org.eclipse.jetty.server.session.SessionData)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.DefaultSessionCache.newSession(org.eclipse.jetty.server.session.SessionData)", "public org.eclipse.jetty.server.session.Session newSession(org.eclipse.jetty.server.session.SessionData)"], ["boolean", "org.eclipse.jetty.server.session.DefaultSessionCache.doReplace(java.lang.String, org.eclipse.jetty.server.session.Session, org.eclipse.jetty.server.session.Session)", "public boolean doReplace(java.lang.String, org.eclipse.jetty.server.session.Session, org.eclipse.jetty.server.session.Session)"], ["org.eclipse.jetty.server.session.JDBCSessionDataStoreFactory", "org.eclipse.jetty.server.session.JDBCSessionDataStoreFactory()", "public org.eclipse.jetty.server.session.JDBCSessionDataStoreFactory()"], ["org.eclipse.jetty.server.session.SessionDataStore", "org.eclipse.jetty.server.session.JDBCSessionDataStoreFactory.getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionDataStore getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStoreFactory.setDatabaseAdaptor(org.eclipse.jetty.server.session.DatabaseAdaptor)", "public void setDatabaseAdaptor(org.eclipse.jetty.server.session.DatabaseAdaptor)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStoreFactory.setSessionTableSchema(org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema)", "public void setSessionTableSchema(org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema)"], ["org.eclipse.jetty.server.session.Session$State[]", "org.eclipse.jetty.server.session.Session$State.values()", "public static org.eclipse.jetty.server.session.Session$State[] values()"], ["org.eclipse.jetty.server.session.Session$State", "org.eclipse.jetty.server.session.Session$State.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.session.Session$State valueOf(java.lang.String)"], ["javax.servlet.http.HttpSession", "org.eclipse.jetty.server.session.SessionHandler$1.getSession(java.lang.String)", "public javax.servlet.http.HttpSession getSession(java.lang.String)"], ["java.util.Enumeration", "org.eclipse.jetty.server.session.SessionHandler$1.getIds()", "public java.util.Enumeration getIds()"], ["org.eclipse.jetty.server.session.UnwriteableSessionDataException", "org.eclipse.jetty.server.session.UnwriteableSessionDataException(java.lang.String, org.eclipse.jetty.server.session.SessionContext, java.lang.Throwable)", "public org.eclipse.jetty.server.session.UnwriteableSessionDataException(java.lang.String, org.eclipse.jetty.server.session.SessionContext, java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.session.UnwriteableSessionDataException.getId()", "public java.lang.String getId()"], ["org.eclipse.jetty.server.session.SessionContext", "org.eclipse.jetty.server.session.UnwriteableSessionDataException.getSessionContext()", "public org.eclipse.jetty.server.session.SessionContext getSessionContext()"], ["org.eclipse.jetty.server.SocketCustomizationListener", "org.eclipse.jetty.server.SocketCustomizationListener()", "public org.eclipse.jetty.server.SocketCustomizationListener()"], ["org.eclipse.jetty.server.SocketCustomizationListener", "org.eclipse.jetty.server.SocketCustomizationListener(boolean)", "public org.eclipse.jetty.server.SocketCustomizationListener(boolean)"], ["void", "org.eclipse.jetty.server.SocketCustomizationListener.onOpened(org.eclipse.jetty.io.Connection)", "public void onOpened(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.SocketCustomizationListener.onClosed(org.eclipse.jetty.io.Connection)", "public void onClosed(org.eclipse.jetty.io.Connection)"], ["javax.security.auth.Subject", "org.eclipse.jetty.server.UserIdentity$1.getSubject()", "public javax.security.auth.Subject getSubject()"], ["java.security.Principal", "org.eclipse.jetty.server.UserIdentity$1.getUserPrincipal()", "public java.security.Principal getUserPrincipal()"], ["boolean", "org.eclipse.jetty.server.UserIdentity$1.isUserInRole(java.lang.String, org.eclipse.jetty.server.UserIdentity$Scope)", "public boolean isUserInRole(java.lang.String, org.eclipse.jetty.server.UserIdentity$Scope)"], ["java.lang.String", "org.eclipse.jetty.server.UserIdentity$1.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.AsyncNCSARequestLog$WriterThread.run()", "public void run()"], ["org.eclipse.jetty.server.ConnectionLimit", "org.eclipse.jetty.server.ConnectionLimit(int, org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.ConnectionLimit(int, org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.ConnectionLimit", "org.eclipse.jetty.server.ConnectionLimit(int, org.eclipse.jetty.server.Connector...)", "public org.eclipse.jetty.server.ConnectionLimit(int, org.eclipse.jetty.server.Connector...)"], ["long", "org.eclipse.jetty.server.ConnectionLimit.getIdleTimeout()", "public long getIdleTimeout()"], ["void", "org.eclipse.jetty.server.ConnectionLimit.setIdleTimeout(long)", "public void setIdleTimeout(long)"], ["int", "org.eclipse.jetty.server.ConnectionLimit.getMaxConnections()", "public int getMaxConnections()"], ["void", "org.eclipse.jetty.server.ConnectionLimit.setMaxConnections(int)", "public void setMaxConnections(int)"], ["int", "org.eclipse.jetty.server.ConnectionLimit.getConnections()", "public int getConnections()"], ["void", "org.eclipse.jetty.server.ConnectionLimit.onAccepting(java.nio.channels.SelectableChannel)", "public void onAccepting(java.nio.channels.SelectableChannel)"], ["void", "org.eclipse.jetty.server.ConnectionLimit.onAcceptFailed(java.nio.channels.SelectableChannel, java.lang.Throwable)", "public void onAcceptFailed(java.nio.channels.SelectableChannel, java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.ConnectionLimit.onAccepted(java.nio.channels.SelectableChannel)", "public void onAccepted(java.nio.channels.SelectableChannel)"], ["void", "org.eclipse.jetty.server.ConnectionLimit.onOpened(org.eclipse.jetty.io.Connection)", "public void onOpened(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.ConnectionLimit.onClosed(org.eclipse.jetty.io.Connection)", "public void onClosed(org.eclipse.jetty.io.Connection)"], ["void", "org.eclipse.jetty.server.DebugListener$1.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.DebugListener$1.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.DebugListener$1.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.DebugListener$1.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["java.lang.Object", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.clearAttributes()", "public void clearAttributes()"], ["void", "org.eclipse.jetty.server.Dispatcher$IncludeAttributes.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["org.eclipse.jetty.server.handler.AsyncDelayHandler", "org.eclipse.jetty.server.handler.AsyncDelayHandler()", "public org.eclipse.jetty.server.handler.AsyncDelayHandler()"], ["void", "org.eclipse.jetty.server.handler.AsyncDelayHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases", "org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases()", "public org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$ApproveNonExistentDirectoryAliases.check(java.lang.String, org.eclipse.jetty.util.resource.Resource)", "public boolean check(java.lang.String, org.eclipse.jetty.util.resource.Resource)"], ["org.eclipse.jetty.server.handler.ContextHandlerCollection", "org.eclipse.jetty.server.handler.ContextHandlerCollection()", "public org.eclipse.jetty.server.handler.ContextHandlerCollection()"], ["org.eclipse.jetty.server.handler.ContextHandlerCollection", "org.eclipse.jetty.server.handler.ContextHandlerCollection(org.eclipse.jetty.server.handler.ContextHandler...)", "public org.eclipse.jetty.server.handler.ContextHandlerCollection(org.eclipse.jetty.server.handler.ContextHandler...)"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.mapContexts()", "public void mapContexts()"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.setHandlers(org.eclipse.jetty.server.Handler[])", "public void setHandlers(org.eclipse.jetty.server.Handler[])"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ContextHandler", "org.eclipse.jetty.server.handler.ContextHandlerCollection.addContext(java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.handler.ContextHandler addContext(java.lang.String, java.lang.String)"], ["java.lang.Class<?>", "org.eclipse.jetty.server.handler.ContextHandlerCollection.getContextClass()", "public java.lang.Class<?> getContextClass()"], ["void", "org.eclipse.jetty.server.handler.ContextHandlerCollection.setContextClass(java.lang.Class<? extends org.eclipse.jetty.server.handler.ContextHandler>)", "public void setContextClass(java.lang.Class<? extends org.eclipse.jetty.server.handler.ContextHandler>)"], ["org.eclipse.jetty.server.handler.gzip.GzipHttpInputInterceptor", "org.eclipse.jetty.server.handler.gzip.GzipHttpInputInterceptor(org.eclipse.jetty.io.ByteBufferPool, int)", "public org.eclipse.jetty.server.handler.gzip.GzipHttpInputInterceptor(org.eclipse.jetty.io.ByteBufferPool, int)"], ["org.eclipse.jetty.server.HttpInput$Content", "org.eclipse.jetty.server.handler.gzip.GzipHttpInputInterceptor.readFrom(org.eclipse.jetty.server.HttpInput$Content)", "public org.eclipse.jetty.server.HttpInput$Content readFrom(org.eclipse.jetty.server.HttpInput$Content)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHttpInputInterceptor.destroy()", "public void destroy()"], ["org.eclipse.jetty.server.handler.HandlerCollection", "org.eclipse.jetty.server.handler.HandlerCollection()", "public org.eclipse.jetty.server.handler.HandlerCollection()"], ["org.eclipse.jetty.server.handler.HandlerCollection", "org.eclipse.jetty.server.handler.HandlerCollection(org.eclipse.jetty.server.Handler...)", "public org.eclipse.jetty.server.handler.HandlerCollection(org.eclipse.jetty.server.Handler...)"], ["org.eclipse.jetty.server.handler.HandlerCollection", "org.eclipse.jetty.server.handler.HandlerCollection(boolean, org.eclipse.jetty.server.Handler...)", "public org.eclipse.jetty.server.handler.HandlerCollection(boolean, org.eclipse.jetty.server.Handler...)"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.handler.HandlerCollection.getHandlers()", "public org.eclipse.jetty.server.Handler[] getHandlers()"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.setHandlers(org.eclipse.jetty.server.Handler[])", "public void setHandlers(org.eclipse.jetty.server.Handler[])"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.addHandler(org.eclipse.jetty.server.Handler)", "public void addHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.prependHandler(org.eclipse.jetty.server.Handler)", "public void prependHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.removeHandler(org.eclipse.jetty.server.Handler)", "public void removeHandler(org.eclipse.jetty.server.Handler)"], ["void", "org.eclipse.jetty.server.handler.HandlerCollection.destroy()", "public void destroy()"], ["org.eclipse.jetty.server.handler.IPAccessHandler", "org.eclipse.jetty.server.handler.IPAccessHandler()", "public org.eclipse.jetty.server.handler.IPAccessHandler()"], ["org.eclipse.jetty.server.handler.IPAccessHandler", "org.eclipse.jetty.server.handler.IPAccessHandler(java.lang.String[], java.lang.String[])", "public org.eclipse.jetty.server.handler.IPAccessHandler(java.lang.String[], java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.addWhite(java.lang.String)", "public void addWhite(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.addBlack(java.lang.String)", "public void addBlack(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.setWhite(java.lang.String[])", "public void setWhite(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.setBlack(java.lang.String[])", "public void setBlack(java.lang.String[])"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.setWhiteListByPath(boolean)", "public void setWhiteListByPath(boolean)"], ["void", "org.eclipse.jetty.server.handler.IPAccessHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["java.lang.String", "org.eclipse.jetty.server.handler.IPAccessHandler.dump()", "public java.lang.String dump()"], ["org.eclipse.jetty.server.handler.ResourceHandler", "org.eclipse.jetty.server.handler.ResourceHandler(org.eclipse.jetty.server.ResourceService)", "public org.eclipse.jetty.server.handler.ResourceHandler(org.eclipse.jetty.server.ResourceService)"], ["org.eclipse.jetty.server.handler.ResourceHandler", "org.eclipse.jetty.server.handler.ResourceHandler()", "public org.eclipse.jetty.server.handler.ResourceHandler()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ResourceHandler.getWelcomeFile(java.lang.String)", "public java.lang.String getWelcomeFile(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.doStart()", "public void doStart() throws java.lang.Exception"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ResourceHandler.getBaseResource()", "public org.eclipse.jetty.util.resource.Resource getBaseResource()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ResourceHandler.getCacheControl()", "public java.lang.String getCacheControl()"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.handler.ResourceHandler.getGzipEquivalentFileExtensions()", "public java.util.List<java.lang.String> getGzipEquivalentFileExtensions()"], ["org.eclipse.jetty.http.MimeTypes", "org.eclipse.jetty.server.handler.ResourceHandler.getMimeTypes()", "public org.eclipse.jetty.http.MimeTypes getMimeTypes()"], ["int", "org.eclipse.jetty.server.handler.ResourceHandler.getMinAsyncContentLength()", "public int getMinAsyncContentLength()"], ["int", "org.eclipse.jetty.server.handler.ResourceHandler.getMinMemoryMappedContentLength()", "public int getMinMemoryMappedContentLength()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ResourceHandler.getResource(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource getResource(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ResourceHandler.getResourceBase()", "public java.lang.String getResourceBase()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.server.handler.ResourceHandler.getStylesheet()", "public org.eclipse.jetty.util.resource.Resource getStylesheet()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.ResourceHandler.getWelcomeFiles()", "public java.lang.String[] getWelcomeFiles()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isAcceptRanges()", "public boolean isAcceptRanges()"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isDirAllowed()", "public boolean isDirAllowed()"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isDirectoriesListed()", "public boolean isDirectoriesListed()"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isEtags()", "public boolean isEtags()"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isGzip()", "public boolean isGzip()"], ["org.eclipse.jetty.http.CompressedContentFormat[]", "org.eclipse.jetty.server.handler.ResourceHandler.getPrecompressedFormats()", "public org.eclipse.jetty.http.CompressedContentFormat[] getPrecompressedFormats()"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isPathInfoOnly()", "public boolean isPathInfoOnly()"], ["boolean", "org.eclipse.jetty.server.handler.ResourceHandler.isRedirectWelcome()", "public boolean isRedirectWelcome()"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setAcceptRanges(boolean)", "public void setAcceptRanges(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setBaseResource(org.eclipse.jetty.util.resource.Resource)", "public void setBaseResource(org.eclipse.jetty.util.resource.Resource)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setCacheControl(java.lang.String)", "public void setCacheControl(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setDirAllowed(boolean)", "public void setDirAllowed(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setDirectoriesListed(boolean)", "public void setDirectoriesListed(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setEtags(boolean)", "public void setEtags(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setGzip(boolean)", "public void setGzip(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setGzipEquivalentFileExtensions(java.util.List<java.lang.String>)", "public void setGzipEquivalentFileExtensions(java.util.List<java.lang.String>)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setPrecompressedFormats(org.eclipse.jetty.http.CompressedContentFormat[])", "public void setPrecompressedFormats(org.eclipse.jetty.http.CompressedContentFormat[])"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setMimeTypes(org.eclipse.jetty.http.MimeTypes)", "public void setMimeTypes(org.eclipse.jetty.http.MimeTypes)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setMinAsyncContentLength(int)", "public void setMinAsyncContentLength(int)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setMinMemoryMappedContentLength(int)", "public void setMinMemoryMappedContentLength(int)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setPathInfoOnly(boolean)", "public void setPathInfoOnly(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setRedirectWelcome(boolean)", "public void setRedirectWelcome(boolean)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setResourceBase(java.lang.String)", "public void setResourceBase(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setStylesheet(java.lang.String)", "public void setStylesheet(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ResourceHandler.setWelcomeFiles(java.lang.String[])", "public void setWelcomeFiles(java.lang.String[])"], ["org.eclipse.jetty.server.HttpConnectionFactory", "org.eclipse.jetty.server.HttpConnectionFactory()", "public org.eclipse.jetty.server.HttpConnectionFactory()"], ["org.eclipse.jetty.server.HttpConnectionFactory", "org.eclipse.jetty.server.HttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration)", "public org.eclipse.jetty.server.HttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration)"], ["org.eclipse.jetty.server.HttpConnectionFactory", "org.eclipse.jetty.server.HttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.http.HttpCompliance)", "public org.eclipse.jetty.server.HttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.http.HttpCompliance)"], ["org.eclipse.jetty.server.HttpConfiguration", "org.eclipse.jetty.server.HttpConnectionFactory.getHttpConfiguration()", "public org.eclipse.jetty.server.HttpConfiguration getHttpConfiguration()"], ["org.eclipse.jetty.http.HttpCompliance", "org.eclipse.jetty.server.HttpConnectionFactory.getHttpCompliance()", "public org.eclipse.jetty.http.HttpCompliance getHttpCompliance()"], ["boolean", "org.eclipse.jetty.server.HttpConnectionFactory.isRecordHttpComplianceViolations()", "public boolean isRecordHttpComplianceViolations()"], ["void", "org.eclipse.jetty.server.HttpConnectionFactory.setHttpCompliance(org.eclipse.jetty.http.HttpCompliance)", "public void setHttpCompliance(org.eclipse.jetty.http.HttpCompliance)"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.HttpConnectionFactory.newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["void", "org.eclipse.jetty.server.HttpConnectionFactory.setRecordHttpComplianceViolations(boolean)", "public void setRecordHttpComplianceViolations(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$5.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpInput$SentinelContent", "org.eclipse.jetty.server.HttpInput$SentinelContent(java.lang.String)", "public org.eclipse.jetty.server.HttpInput$SentinelContent(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$SentinelContent.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpOutput$AsyncWrite", "org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, byte[], int, int, boolean)", "public org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, byte[], int, int, boolean)"], ["org.eclipse.jetty.server.HttpOutput$AsyncWrite", "org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, java.nio.ByteBuffer, boolean)", "public org.eclipse.jetty.server.HttpOutput$AsyncWrite(org.eclipse.jetty.server.HttpOutput, java.nio.ByteBuffer, boolean)"], ["org.eclipse.jetty.server.HttpOutput$OutputState[]", "org.eclipse.jetty.server.HttpOutput$OutputState.values()", "public static org.eclipse.jetty.server.HttpOutput$OutputState[] values()"], ["org.eclipse.jetty.server.HttpOutput$OutputState", "org.eclipse.jetty.server.HttpOutput$OutputState.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpOutput$OutputState valueOf(java.lang.String)"], ["org.eclipse.jetty.server.jmx.AbstractConnectorMBean", "org.eclipse.jetty.server.jmx.AbstractConnectorMBean(java.lang.Object)", "public org.eclipse.jetty.server.jmx.AbstractConnectorMBean(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.jmx.AbstractConnectorMBean.getObjectContextBasis()", "public java.lang.String getObjectContextBasis()"], ["org.eclipse.jetty.server.LowResourceMonitor$ConnectorsThreadPoolLowResourceCheck", "org.eclipse.jetty.server.LowResourceMonitor$ConnectorsThreadPoolLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor)", "public org.eclipse.jetty.server.LowResourceMonitor$ConnectorsThreadPoolLowResourceCheck(org.eclipse.jetty.server.LowResourceMonitor)"], ["boolean", "org.eclipse.jetty.server.LowResourceMonitor$ConnectorsThreadPoolLowResourceCheck.isLowOnResources()", "public boolean isLowOnResources()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$ConnectorsThreadPoolLowResourceCheck.getReason()", "public java.lang.String getReason()"], ["java.lang.String", "org.eclipse.jetty.server.LowResourceMonitor$ConnectorsThreadPoolLowResourceCheck.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.MultiPartFormDataCompliance[]", "org.eclipse.jetty.server.MultiPartFormDataCompliance.values()", "public static org.eclipse.jetty.server.MultiPartFormDataCompliance[] values()"], ["org.eclipse.jetty.server.MultiPartFormDataCompliance", "org.eclipse.jetty.server.MultiPartFormDataCompliance.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.MultiPartFormDataCompliance valueOf(java.lang.String)"], ["org.eclipse.jetty.server.ProxyConnectionFactory", "org.eclipse.jetty.server.ProxyConnectionFactory()", "public org.eclipse.jetty.server.ProxyConnectionFactory()"], ["org.eclipse.jetty.server.ProxyConnectionFactory", "org.eclipse.jetty.server.ProxyConnectionFactory(java.lang.String)", "public org.eclipse.jetty.server.ProxyConnectionFactory(java.lang.String)"], ["int", "org.eclipse.jetty.server.ProxyConnectionFactory.getMaxProxyHeader()", "public int getMaxProxyHeader()"], ["void", "org.eclipse.jetty.server.ProxyConnectionFactory.setMaxProxyHeader(int)", "public void setMaxProxyHeader(int)"], ["org.eclipse.jetty.io.Connection", "org.eclipse.jetty.server.ProxyConnectionFactory.newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)", "public org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector, org.eclipse.jetty.io.EndPoint)"], ["org.eclipse.jetty.server.SecureRequestCustomizer", "org.eclipse.jetty.server.SecureRequestCustomizer()", "public org.eclipse.jetty.server.SecureRequestCustomizer()"], ["org.eclipse.jetty.server.SecureRequestCustomizer", "org.eclipse.jetty.server.SecureRequestCustomizer(boolean)", "public org.eclipse.jetty.server.SecureRequestCustomizer(boolean)"], ["org.eclipse.jetty.server.SecureRequestCustomizer", "org.eclipse.jetty.server.SecureRequestCustomizer(boolean, long, boolean)", "public org.eclipse.jetty.server.SecureRequestCustomizer(boolean, long, boolean)"], ["boolean", "org.eclipse.jetty.server.SecureRequestCustomizer.isSniHostCheck()", "public boolean isSniHostCheck()"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.setSniHostCheck(boolean)", "public void setSniHostCheck(boolean)"], ["long", "org.eclipse.jetty.server.SecureRequestCustomizer.getStsMaxAge()", "public long getStsMaxAge()"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.setStsMaxAge(long)", "public void setStsMaxAge(long)"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.setStsMaxAge(long, java.util.concurrent.TimeUnit)", "public void setStsMaxAge(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.eclipse.jetty.server.SecureRequestCustomizer.isStsIncludeSubDomains()", "public boolean isStsIncludeSubDomains()"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.setStsIncludeSubDomains(boolean)", "public void setStsIncludeSubDomains(boolean)"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)", "public void customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)"], ["void", "org.eclipse.jetty.server.SecureRequestCustomizer.setSslSessionAttribute(java.lang.String)", "public void setSslSessionAttribute(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.SecureRequestCustomizer.getSslSessionAttribute()", "public java.lang.String getSslSessionAttribute()"], ["java.lang.String", "org.eclipse.jetty.server.SecureRequestCustomizer.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.ServletResponseHttpWrapper", "org.eclipse.jetty.server.ServletResponseHttpWrapper(javax.servlet.ServletResponse)", "public org.eclipse.jetty.server.ServletResponseHttpWrapper(javax.servlet.ServletResponse)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addCookie(javax.servlet.http.Cookie)", "public void addCookie(javax.servlet.http.Cookie)"], ["boolean", "org.eclipse.jetty.server.ServletResponseHttpWrapper.containsHeader(java.lang.String)", "public boolean containsHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeURL(java.lang.String)", "public java.lang.String encodeURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeRedirectURL(java.lang.String)", "public java.lang.String encodeRedirectURL(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeUrl(java.lang.String)", "public java.lang.String encodeUrl(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.encodeRedirectUrl(java.lang.String)", "public java.lang.String encodeRedirectUrl(java.lang.String)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.sendError(int, java.lang.String)", "public void sendError(int, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.sendError(int)", "public void sendError(int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.sendRedirect(java.lang.String)", "public void sendRedirect(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setDateHeader(java.lang.String, long)", "public void setDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addDateHeader(java.lang.String, long)", "public void addDateHeader(java.lang.String, long)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setHeader(java.lang.String, java.lang.String)", "public void setHeader(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addHeader(java.lang.String, java.lang.String)", "public void addHeader(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setIntHeader(java.lang.String, int)", "public void setIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.addIntHeader(java.lang.String, int)", "public void addIntHeader(java.lang.String, int)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setStatus(int)", "public void setStatus(int)"], ["void", "org.eclipse.jetty.server.ServletResponseHttpWrapper.setStatus(int, java.lang.String)", "public void setStatus(int, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["int", "org.eclipse.jetty.server.ServletResponseHttpWrapper.getStatus()", "public int getStatus()"], ["org.eclipse.jetty.server.session.AbstractSessionDataStore", "org.eclipse.jetty.server.session.AbstractSessionDataStore()", "public org.eclipse.jetty.server.session.AbstractSessionDataStore()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStore.initialize(org.eclipse.jetty.server.session.SessionContext)", "public void initialize(org.eclipse.jetty.server.session.SessionContext) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.AbstractSessionDataStore.load(java.lang.String)", "public org.eclipse.jetty.server.session.SessionData load(java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStore.store(java.lang.String, org.eclipse.jetty.server.session.SessionData)", "public void store(java.lang.String, org.eclipse.jetty.server.session.SessionData) throws java.lang.Exception"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.AbstractSessionDataStore.getExpired(java.util.Set<java.lang.String>)", "public java.util.Set<java.lang.String> getExpired(java.util.Set<java.lang.String>)"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.AbstractSessionDataStore.newSessionData(java.lang.String, long, long, long, long)", "public org.eclipse.jetty.server.session.SessionData newSessionData(java.lang.String, long, long, long, long)"], ["int", "org.eclipse.jetty.server.session.AbstractSessionDataStore.getGracePeriodSec()", "public int getGracePeriodSec()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStore.setGracePeriodSec(int)", "public void setGracePeriodSec(int)"], ["int", "org.eclipse.jetty.server.session.AbstractSessionDataStore.getSavePeriodSec()", "public int getSavePeriodSec()"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStore.setSavePeriodSec(int)", "public void setSavePeriodSec(int)"], ["java.lang.String", "org.eclipse.jetty.server.session.AbstractSessionDataStore.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.session.FileSessionDataStore", "org.eclipse.jetty.server.session.FileSessionDataStore()", "public org.eclipse.jetty.server.session.FileSessionDataStore()"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStore.initialize(org.eclipse.jetty.server.session.SessionContext)", "public void initialize(org.eclipse.jetty.server.session.SessionContext) throws java.lang.Exception"], ["java.io.File", "org.eclipse.jetty.server.session.FileSessionDataStore.getStoreDir()", "public java.io.File getStoreDir()"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStore.setStoreDir(java.io.File)", "public void setStoreDir(java.io.File)"], ["boolean", "org.eclipse.jetty.server.session.FileSessionDataStore.isDeleteUnrestorableFiles()", "public boolean isDeleteUnrestorableFiles()"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStore.setDeleteUnrestorableFiles(boolean)", "public void setDeleteUnrestorableFiles(boolean)"], ["boolean", "org.eclipse.jetty.server.session.FileSessionDataStore.delete(java.lang.String)", "public boolean delete(java.lang.String) throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.FileSessionDataStore.deleteFile(java.lang.String)", "public boolean deleteFile(java.lang.String) throws java.lang.Exception"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.FileSessionDataStore.doGetExpired(java.util.Set<java.lang.String>)", "public java.util.Set<java.lang.String> doGetExpired(java.util.Set<java.lang.String>)"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStore.sweepDisk()", "public void sweepDisk()"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStore.sweepFile(long, java.nio.file.Path)", "public void sweepFile(long, java.nio.file.Path) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.FileSessionDataStore.doLoad(java.lang.String)", "public org.eclipse.jetty.server.session.SessionData doLoad(java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStore.doStore(java.lang.String, org.eclipse.jetty.server.session.SessionData, long)", "public void doStore(java.lang.String, org.eclipse.jetty.server.session.SessionData, long) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.FileSessionDataStore.initializeStore()", "public void initializeStore() throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.FileSessionDataStore.isPassivating()", "public boolean isPassivating()"], ["boolean", "org.eclipse.jetty.server.session.FileSessionDataStore.exists(java.lang.String)", "public boolean exists(java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.session.FileSessionDataStore.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.session.Session$SessionInactivityTimer", "org.eclipse.jetty.server.session.Session$SessionInactivityTimer(org.eclipse.jetty.server.session.Session)", "public org.eclipse.jetty.server.session.Session$SessionInactivityTimer(org.eclipse.jetty.server.session.Session)"], ["void", "org.eclipse.jetty.server.session.Session$SessionInactivityTimer.setTimeout(long)", "public void setTimeout(long)"], ["void", "org.eclipse.jetty.server.session.Session$SessionInactivityTimer.schedule()", "public void schedule()"], ["void", "org.eclipse.jetty.server.session.Session$SessionInactivityTimer.cancel()", "public void cancel()"], ["void", "org.eclipse.jetty.server.session.Session$SessionInactivityTimer.destroy()", "public void destroy()"], ["void", "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorRunnable.run()", "public void run()"], ["void", "org.eclipse.jetty.server.AbstractConnector$Acceptor.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector$Acceptor.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.AsyncContextEvent", "org.eclipse.jetty.server.AsyncContextEvent(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.AsyncContextState, org.eclipse.jetty.server.HttpChannelState, org.eclipse.jetty.server.Request, javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public org.eclipse.jetty.server.AsyncContextEvent(org.eclipse.jetty.server.handler.ContextHandler$Context, org.eclipse.jetty.server.AsyncContextState, org.eclipse.jetty.server.HttpChannelState, org.eclipse.jetty.server.Request, javax.servlet.ServletRequest, javax.servlet.ServletResponse)"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.AsyncContextEvent.getSuspendedContext()", "public javax.servlet.ServletContext getSuspendedContext()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.AsyncContextEvent.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.AsyncContextEvent.getDispatchContext()", "public javax.servlet.ServletContext getDispatchContext()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.AsyncContextEvent.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["java.lang.String", "org.eclipse.jetty.server.AsyncContextEvent.getPath()", "public java.lang.String getPath()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.setTimeoutTask(org.eclipse.jetty.util.thread.Scheduler$Task)", "public void setTimeoutTask(org.eclipse.jetty.util.thread.Scheduler$Task)"], ["boolean", "org.eclipse.jetty.server.AsyncContextEvent.hasTimeoutTask()", "public boolean hasTimeoutTask()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.cancelTimeoutTask()", "public void cancelTimeoutTask()"], ["javax.servlet.AsyncContext", "org.eclipse.jetty.server.AsyncContextEvent.getAsyncContext()", "public javax.servlet.AsyncContext getAsyncContext()"], ["java.lang.Throwable", "org.eclipse.jetty.server.AsyncContextEvent.getThrowable()", "public java.lang.Throwable getThrowable()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.setDispatchContext(javax.servlet.ServletContext)", "public void setDispatchContext(javax.servlet.ServletContext)"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.setDispatchPath(java.lang.String)", "public void setDispatchPath(java.lang.String)"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.completed()", "public void completed()"], ["org.eclipse.jetty.server.HttpChannelState", "org.eclipse.jetty.server.AsyncContextEvent.getHttpChannelState()", "public org.eclipse.jetty.server.HttpChannelState getHttpChannelState()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.run()", "public void run()"], ["void", "org.eclipse.jetty.server.AsyncContextEvent.addThrowable(java.lang.Throwable)", "public void addThrowable(java.lang.Throwable)"], ["org.eclipse.jetty.server.ClassLoaderDump", "org.eclipse.jetty.server.ClassLoaderDump(java.lang.ClassLoader)", "public org.eclipse.jetty.server.ClassLoaderDump(java.lang.ClassLoader)"], ["java.lang.String", "org.eclipse.jetty.server.ClassLoaderDump.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.server.ClassLoaderDump.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.server.CookieCutter", "org.eclipse.jetty.server.CookieCutter()", "public org.eclipse.jetty.server.CookieCutter()"], ["org.eclipse.jetty.server.CookieCutter", "org.eclipse.jetty.server.CookieCutter(org.eclipse.jetty.http.CookieCompliance)", "public org.eclipse.jetty.server.CookieCutter(org.eclipse.jetty.http.CookieCompliance)"], ["javax.servlet.http.Cookie[]", "org.eclipse.jetty.server.CookieCutter.getCookies()", "public javax.servlet.http.Cookie[] getCookies()"], ["void", "org.eclipse.jetty.server.CookieCutter.setCookies(javax.servlet.http.Cookie[])", "public void setCookies(javax.servlet.http.Cookie[])"], ["void", "org.eclipse.jetty.server.CookieCutter.reset()", "public void reset()"], ["void", "org.eclipse.jetty.server.CookieCutter.addCookieField(java.lang.String)", "public void addCookieField(java.lang.String)"], ["org.eclipse.jetty.server.Dispatcher", "org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, org.eclipse.jetty.http.HttpURI, java.lang.String)", "public org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, org.eclipse.jetty.http.HttpURI, java.lang.String)"], ["org.eclipse.jetty.server.Dispatcher", "org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String)", "public org.eclipse.jetty.server.Dispatcher(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String) throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.Dispatcher.forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["void", "org.eclipse.jetty.server.Dispatcher.error(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void error(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["void", "org.eclipse.jetty.server.Dispatcher.include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)", "public void include(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.Dispatcher.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.handler.BufferedResponseHandler$BufferedInterceptor", "org.eclipse.jetty.server.handler.BufferedResponseHandler$BufferedInterceptor(org.eclipse.jetty.server.handler.BufferedResponseHandler, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor)", "public org.eclipse.jetty.server.handler.BufferedResponseHandler$BufferedInterceptor(org.eclipse.jetty.server.handler.BufferedResponseHandler, org.eclipse.jetty.server.HttpChannel, org.eclipse.jetty.server.HttpOutput$Interceptor)"], ["void", "org.eclipse.jetty.server.handler.BufferedResponseHandler$BufferedInterceptor.resetBuffer()", "public void resetBuffer()"], ["void", "org.eclipse.jetty.server.handler.BufferedResponseHandler$BufferedInterceptor.write(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)", "public void write(java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)"], ["org.eclipse.jetty.server.HttpOutput$Interceptor", "org.eclipse.jetty.server.handler.BufferedResponseHandler$BufferedInterceptor.getNextInterceptor()", "public org.eclipse.jetty.server.HttpOutput$Interceptor getNextInterceptor()"], ["boolean", "org.eclipse.jetty.server.handler.BufferedResponseHandler$BufferedInterceptor.isOptimizedForDirectBuffers()", "public boolean isOptimizedForDirectBuffers()"], ["org.eclipse.jetty.server.handler.gzip.GzipHandler", "org.eclipse.jetty.server.handler.gzip.GzipHandler()", "public org.eclipse.jetty.server.handler.gzip.GzipHandler()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addExcludedAgentPatterns(java.lang.String...)", "public void addExcludedAgentPatterns(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addExcludedMethods(java.lang.String...)", "public void addExcludedMethods(java.lang.String...)"], ["java.util.EnumSet<javax.servlet.DispatcherType>", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getDispatcherTypes()", "public java.util.EnumSet<javax.servlet.DispatcherType> getDispatcherTypes()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setDispatcherTypes(java.util.EnumSet<javax.servlet.DispatcherType>)", "public void setDispatcherTypes(java.util.EnumSet<javax.servlet.DispatcherType>)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setDispatcherTypes(javax.servlet.DispatcherType...)", "public void setDispatcherTypes(javax.servlet.DispatcherType...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addExcludedMimeTypes(java.lang.String...)", "public void addExcludedMimeTypes(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addExcludedPaths(java.lang.String...)", "public void addExcludedPaths(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addIncludedAgentPatterns(java.lang.String...)", "public void addIncludedAgentPatterns(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addIncludedMethods(java.lang.String...)", "public void addIncludedMethods(java.lang.String...)"], ["boolean", "org.eclipse.jetty.server.handler.gzip.GzipHandler.isSyncFlush()", "public boolean isSyncFlush()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setSyncFlush(boolean)", "public void setSyncFlush(boolean)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addIncludedMimeTypes(java.lang.String...)", "public void addIncludedMimeTypes(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.addIncludedPaths(java.lang.String...)", "public void addIncludedPaths(java.lang.String...)"], ["boolean", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getCheckGzExists()", "public boolean getCheckGzExists()"], ["int", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getCompressionLevel()", "public int getCompressionLevel()"], ["java.util.zip.Deflater", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getDeflater(org.eclipse.jetty.server.Request, long)", "public java.util.zip.Deflater getDeflater(org.eclipse.jetty.server.Request, long)"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getExcludedAgentPatterns()", "public java.lang.String[] getExcludedAgentPatterns()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getExcludedMethods()", "public java.lang.String[] getExcludedMethods()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getExcludedMimeTypes()", "public java.lang.String[] getExcludedMimeTypes()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getExcludedPaths()", "public java.lang.String[] getExcludedPaths()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getIncludedAgentPatterns()", "public java.lang.String[] getIncludedAgentPatterns()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getIncludedMethods()", "public java.lang.String[] getIncludedMethods()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getIncludedMimeTypes()", "public java.lang.String[] getIncludedMimeTypes()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getIncludedPaths()", "public java.lang.String[] getIncludedPaths()"], ["java.lang.String[]", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getMethods()", "public java.lang.String[] getMethods()"], ["int", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getMinGzipSize()", "public int getMinGzipSize()"], ["int", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getInflateBufferSize()", "public int getInflateBufferSize()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setInflateBufferSize(int)", "public void setInflateBufferSize(int)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["boolean", "org.eclipse.jetty.server.handler.gzip.GzipHandler.isMimeTypeGzipable(java.lang.String)", "public boolean isMimeTypeGzipable(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.recycle(java.util.zip.Deflater)", "public void recycle(java.util.zip.Deflater)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setCheckGzExists(boolean)", "public void setCheckGzExists(boolean)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setCompressionLevel(int)", "public void setCompressionLevel(int)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setExcludedAgentPatterns(java.lang.String...)", "public void setExcludedAgentPatterns(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setExcludedMethods(java.lang.String...)", "public void setExcludedMethods(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setExcludedMimeTypes(java.lang.String...)", "public void setExcludedMimeTypes(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setExcludedPaths(java.lang.String...)", "public void setExcludedPaths(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setIncludedAgentPatterns(java.lang.String...)", "public void setIncludedAgentPatterns(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setIncludedMethods(java.lang.String...)", "public void setIncludedMethods(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setIncludedMimeTypes(java.lang.String...)", "public void setIncludedMimeTypes(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setIncludedPaths(java.lang.String...)", "public void setIncludedPaths(java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setMinGzipSize(int)", "public void setMinGzipSize(int)"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setIncludedMethodList(java.lang.String)", "public void setIncludedMethodList(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getIncludedMethodList()", "public java.lang.String getIncludedMethodList()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setExcludedMethodList(java.lang.String)", "public void setExcludedMethodList(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getExcludedMethodList()", "public java.lang.String getExcludedMethodList()"], ["int", "org.eclipse.jetty.server.handler.gzip.GzipHandler.getDeflaterPoolCapacity()", "public int getDeflaterPoolCapacity()"], ["void", "org.eclipse.jetty.server.handler.gzip.GzipHandler.setDeflaterPoolCapacity(int)", "public void setDeflaterPoolCapacity(int)"], ["org.eclipse.jetty.server.handler.IdleTimeoutHandler", "org.eclipse.jetty.server.handler.IdleTimeoutHandler()", "public org.eclipse.jetty.server.handler.IdleTimeoutHandler()"], ["boolean", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.isApplyToAsync()", "public boolean isApplyToAsync()"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.setApplyToAsync(boolean)", "public void setApplyToAsync(boolean)"], ["long", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.getIdleTimeoutMs()", "public long getIdleTimeoutMs()"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.setIdleTimeoutMs(long)", "public void setIdleTimeoutMs(long)"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.MovedContextHandler$Redirector.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["org.eclipse.jetty.server.handler.ShutdownHandler", "org.eclipse.jetty.server.handler.ShutdownHandler(org.eclipse.jetty.server.Server, java.lang.String)", "public org.eclipse.jetty.server.handler.ShutdownHandler(org.eclipse.jetty.server.Server, java.lang.String)"], ["org.eclipse.jetty.server.handler.ShutdownHandler", "org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String)", "public org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String)"], ["org.eclipse.jetty.server.handler.ShutdownHandler", "org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String, boolean, boolean)", "public org.eclipse.jetty.server.handler.ShutdownHandler(java.lang.String, boolean, boolean)"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.sendShutdown()", "public void sendShutdown() throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public void handle(java.lang.String, org.eclipse.jetty.server.Request, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.setExitJvm(boolean)", "public void setExitJvm(boolean)"], ["boolean", "org.eclipse.jetty.server.handler.ShutdownHandler.isSendShutdownAtStart()", "public boolean isSendShutdownAtStart()"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler.setSendShutdownAtStart(boolean)", "public void setSendShutdownAtStart(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ShutdownHandler.getShutdownToken()", "public java.lang.String getShutdownToken()"], ["boolean", "org.eclipse.jetty.server.handler.ShutdownHandler.isExitJvm()", "public boolean isExitJvm()"], ["org.eclipse.jetty.server.HomeBaseWarning", "org.eclipse.jetty.server.HomeBaseWarning()", "public org.eclipse.jetty.server.HomeBaseWarning()"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onRequestBegin(org.eclipse.jetty.server.Request)", "public default void onRequestBegin(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onBeforeDispatch(org.eclipse.jetty.server.Request)", "public default void onBeforeDispatch(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onDispatchFailure(org.eclipse.jetty.server.Request, java.lang.Throwable)", "public default void onDispatchFailure(org.eclipse.jetty.server.Request, java.lang.Throwable)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onAfterDispatch(org.eclipse.jetty.server.Request)", "public default void onAfterDispatch(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onRequestContent(org.eclipse.jetty.server.Request, java.nio.ByteBuffer)", "public default void onRequestContent(org.eclipse.jetty.server.Request, java.nio.ByteBuffer)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onRequestContentEnd(org.eclipse.jetty.server.Request)", "public default void onRequestContentEnd(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onRequestTrailers(org.eclipse.jetty.server.Request)", "public default void onRequestTrailers(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onRequestEnd(org.eclipse.jetty.server.Request)", "public default void onRequestEnd(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onRequestFailure(org.eclipse.jetty.server.Request, java.lang.Throwable)", "public default void onRequestFailure(org.eclipse.jetty.server.Request, java.lang.Throwable)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onResponseBegin(org.eclipse.jetty.server.Request)", "public default void onResponseBegin(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onResponseCommit(org.eclipse.jetty.server.Request)", "public default void onResponseCommit(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onResponseContent(org.eclipse.jetty.server.Request, java.nio.ByteBuffer)", "public default void onResponseContent(org.eclipse.jetty.server.Request, java.nio.ByteBuffer)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onResponseEnd(org.eclipse.jetty.server.Request)", "public default void onResponseEnd(org.eclipse.jetty.server.Request)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onResponseFailure(org.eclipse.jetty.server.Request, java.lang.Throwable)", "public default void onResponseFailure(org.eclipse.jetty.server.Request, java.lang.Throwable)"], ["default", "org.eclipse.jetty.server.HttpChannel$Listener.void onComplete(org.eclipse.jetty.server.Request)", "public default void onComplete(org.eclipse.jetty.server.Request)"], ["org.eclipse.jetty.server.HttpChannelState$Action[]", "org.eclipse.jetty.server.HttpChannelState$Action.values()", "public static org.eclipse.jetty.server.HttpChannelState$Action[] values()"], ["org.eclipse.jetty.server.HttpChannelState$Action", "org.eclipse.jetty.server.HttpChannelState$Action.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpChannelState$Action valueOf(java.lang.String)"], ["int", "org.eclipse.jetty.server.HttpInput$2.noContent()", "public int noContent() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$2.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.server.HttpInput$State.blockForContent(org.eclipse.jetty.server.HttpInput)", "public boolean blockForContent(org.eclipse.jetty.server.HttpInput) throws java.io.IOException"], ["int", "org.eclipse.jetty.server.HttpInput$State.noContent()", "public int noContent() throws java.io.IOException"], ["java.lang.Throwable", "org.eclipse.jetty.server.HttpInput$State.getError()", "public java.lang.Throwable getError()"], ["org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB", "org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB(org.eclipse.jetty.server.HttpOutput, java.io.InputStream, org.eclipse.jetty.util.Callback)", "public org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB(org.eclipse.jetty.server.HttpOutput, java.io.InputStream, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.HttpOutput$InputStreamWritingCB.onCompleteFailure(java.lang.Throwable)", "public void onCompleteFailure(java.lang.Throwable)"], ["org.eclipse.jetty.server.InclusiveByteRange", "org.eclipse.jetty.server.InclusiveByteRange(long, long)", "public org.eclipse.jetty.server.InclusiveByteRange(long, long)"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getFirst()", "public long getFirst()"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getLast()", "public long getLast()"], ["long", "org.eclipse.jetty.server.InclusiveByteRange.getSize()", "public long getSize()"], ["java.lang.String", "org.eclipse.jetty.server.InclusiveByteRange.toHeaderRangeString(long)", "public java.lang.String toHeaderRangeString(long)"], ["int", "org.eclipse.jetty.server.InclusiveByteRange.hashCode()", "public int hashCode()"], ["boolean", "org.eclipse.jetty.server.InclusiveByteRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.server.InclusiveByteRange.toString()", "public java.lang.String toString()"], ["java.util.List<org.eclipse.jetty.server.InclusiveByteRange>", "org.eclipse.jetty.server.InclusiveByteRange.satisfiableRanges(java.util.Enumeration<java.lang.String>, long)", "public static java.util.List<org.eclipse.jetty.server.InclusiveByteRange> satisfiableRanges(java.util.Enumeration<java.lang.String>, long)"], ["java.lang.String", "org.eclipse.jetty.server.InclusiveByteRange.to416HeaderRangeString(long)", "public static java.lang.String to416HeaderRangeString(long)"], ["void", "org.eclipse.jetty.server.MultiPartCleanerListener.requestDestroyed(javax.servlet.ServletRequestEvent)", "public void requestDestroyed(javax.servlet.ServletRequestEvent)"], ["void", "org.eclipse.jetty.server.MultiPartCleanerListener.requestInitialized(javax.servlet.ServletRequestEvent)", "public void requestInitialized(javax.servlet.ServletRequestEvent)"], ["org.eclipse.jetty.server.RequestLogCollection", "org.eclipse.jetty.server.RequestLogCollection(org.eclipse.jetty.server.RequestLog...)", "public org.eclipse.jetty.server.RequestLogCollection(org.eclipse.jetty.server.RequestLog...)"], ["void", "org.eclipse.jetty.server.RequestLogCollection.add(org.eclipse.jetty.server.RequestLog)", "public void add(org.eclipse.jetty.server.RequestLog)"], ["void", "org.eclipse.jetty.server.RequestLogCollection.log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)", "public void log(org.eclipse.jetty.server.Request, org.eclipse.jetty.server.Response)"], ["org.eclipse.jetty.server.Response$EncodingFrom[]", "org.eclipse.jetty.server.Response$EncodingFrom.values()", "public static org.eclipse.jetty.server.Response$EncodingFrom[] values()"], ["org.eclipse.jetty.server.Response$EncodingFrom", "org.eclipse.jetty.server.Response$EncodingFrom.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.Response$EncodingFrom valueOf(java.lang.String)"], ["org.eclipse.jetty.server.Server$DateField", "org.eclipse.jetty.server.Server$DateField(long, org.eclipse.jetty.http.HttpField)", "public org.eclipse.jetty.server.Server$DateField(long, org.eclipse.jetty.http.HttpField)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server()", "public org.eclipse.jetty.server.Server()"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server(int)", "public org.eclipse.jetty.server.Server(int)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server(java.net.InetSocketAddress)", "public org.eclipse.jetty.server.Server(java.net.InetSocketAddress)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.Server(org.eclipse.jetty.util.thread.ThreadPool)", "public org.eclipse.jetty.server.Server(org.eclipse.jetty.util.thread.ThreadPool)"], ["org.eclipse.jetty.server.RequestLog", "org.eclipse.jetty.server.Server.getRequestLog()", "public org.eclipse.jetty.server.RequestLog getRequestLog()"], ["org.eclipse.jetty.server.handler.ErrorHandler", "org.eclipse.jetty.server.Server.getErrorHandler()", "public org.eclipse.jetty.server.handler.ErrorHandler getErrorHandler()"], ["void", "org.eclipse.jetty.server.Server.setRequestLog(org.eclipse.jetty.server.RequestLog)", "public void setRequestLog(org.eclipse.jetty.server.RequestLog)"], ["void", "org.eclipse.jetty.server.Server.setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)", "public void setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)"], ["java.lang.String", "org.eclipse.jetty.server.Server.getVersion()", "public static java.lang.String getVersion()"], ["boolean", "org.eclipse.jetty.server.Server.getStopAtShutdown()", "public boolean getStopAtShutdown()"], ["void", "org.eclipse.jetty.server.Server.setStopTimeout(long)", "public void setStopTimeout(long)"], ["void", "org.eclipse.jetty.server.Server.setStopAtShutdown(boolean)", "public void setStopAtShutdown(boolean)"], ["org.eclipse.jetty.server.Connector[]", "org.eclipse.jetty.server.Server.getConnectors()", "public org.eclipse.jetty.server.Connector[] getConnectors()"], ["void", "org.eclipse.jetty.server.Server.addConnector(org.eclipse.jetty.server.Connector)", "public void addConnector(org.eclipse.jetty.server.Connector)"], ["void", "org.eclipse.jetty.server.Server.removeConnector(org.eclipse.jetty.server.Connector)", "public void removeConnector(org.eclipse.jetty.server.Connector)"], ["void", "org.eclipse.jetty.server.Server.setConnectors(org.eclipse.jetty.server.Connector[])", "public void setConnectors(org.eclipse.jetty.server.Connector[])"], ["org.eclipse.jetty.util.thread.ThreadPool", "org.eclipse.jetty.server.Server.getThreadPool()", "public org.eclipse.jetty.util.thread.ThreadPool getThreadPool()"], ["boolean", "org.eclipse.jetty.server.Server.isDumpAfterStart()", "public boolean isDumpAfterStart()"], ["void", "org.eclipse.jetty.server.Server.setDumpAfterStart(boolean)", "public void setDumpAfterStart(boolean)"], ["boolean", "org.eclipse.jetty.server.Server.isDumpBeforeStop()", "public boolean isDumpBeforeStop()"], ["void", "org.eclipse.jetty.server.Server.setDumpBeforeStop(boolean)", "public void setDumpBeforeStop(boolean)"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.Server.getDateField()", "public org.eclipse.jetty.http.HttpField getDateField()"], ["void", "org.eclipse.jetty.server.Server.handle(org.eclipse.jetty.server.HttpChannel)", "public void handle(org.eclipse.jetty.server.HttpChannel) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Server.handleAsync(org.eclipse.jetty.server.HttpChannel)", "public void handleAsync(org.eclipse.jetty.server.HttpChannel) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.server.Server.join()", "public void join() throws java.lang.InterruptedException"], ["org.eclipse.jetty.server.SessionIdManager", "org.eclipse.jetty.server.Server.getSessionIdManager()", "public org.eclipse.jetty.server.SessionIdManager getSessionIdManager()"], ["void", "org.eclipse.jetty.server.Server.setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)", "public void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)"], ["void", "org.eclipse.jetty.server.Server.clearAttributes()", "public void clearAttributes()"], ["java.lang.Object", "org.eclipse.jetty.server.Server.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.Server.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["void", "org.eclipse.jetty.server.Server.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.Server.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.net.URI", "org.eclipse.jetty.server.Server.getURI()", "public java.net.URI getURI()"], ["java.lang.String", "org.eclipse.jetty.server.Server.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.server.Server.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.Server.main(java.lang.String...)", "public static void main(java.lang.String...) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.DatabaseAdaptor", "org.eclipse.jetty.server.session.DatabaseAdaptor()", "public org.eclipse.jetty.server.session.DatabaseAdaptor()"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.adaptTo(java.sql.DatabaseMetaData)", "public void adaptTo(java.sql.DatabaseMetaData) throws java.sql.SQLException"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.setBlobType(java.lang.String)", "public void setBlobType(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.getBlobType()", "public java.lang.String getBlobType()"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.setLongType(java.lang.String)", "public void setLongType(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.getLongType()", "public java.lang.String getLongType()"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.setStringType(java.lang.String)", "public void setStringType(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.getStringType()", "public java.lang.String getStringType()"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.convertIdentifier(java.lang.String)", "public java.lang.String convertIdentifier(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.getDBName()", "public java.lang.String getDBName()"], ["java.io.InputStream", "org.eclipse.jetty.server.session.DatabaseAdaptor.getBlobInputStream(java.sql.ResultSet, java.lang.String)", "public java.io.InputStream getBlobInputStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException"], ["boolean", "org.eclipse.jetty.server.session.DatabaseAdaptor.isEmptyStringNull()", "public boolean isEmptyStringNull()"], ["boolean", "org.eclipse.jetty.server.session.DatabaseAdaptor.isRowIdReserved()", "public boolean isRowIdReserved()"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.setDriverInfo(java.lang.String, java.lang.String)", "public void setDriverInfo(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.setDriverInfo(java.sql.Driver, java.lang.String)", "public void setDriverInfo(java.sql.Driver, java.lang.String)"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.setDatasource(javax.sql.DataSource)", "public void setDatasource(javax.sql.DataSource)"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.setDatasourceName(java.lang.String)", "public void setDatasourceName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.getDatasourceName()", "public java.lang.String getDatasourceName()"], ["javax.sql.DataSource", "org.eclipse.jetty.server.session.DatabaseAdaptor.getDatasource()", "public javax.sql.DataSource getDatasource()"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.getDriverClassName()", "public java.lang.String getDriverClassName()"], ["java.sql.Driver", "org.eclipse.jetty.server.session.DatabaseAdaptor.getDriver()", "public java.sql.Driver getDriver()"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.getConnectionUrl()", "public java.lang.String getConnectionUrl()"], ["void", "org.eclipse.jetty.server.session.DatabaseAdaptor.initialize()", "public void initialize() throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.server.session.DatabaseAdaptor.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.session.JDBCSessionDataStore", "org.eclipse.jetty.server.session.JDBCSessionDataStore()", "public org.eclipse.jetty.server.session.JDBCSessionDataStore()"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore.initialize()", "public void initialize() throws java.lang.Exception"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.JDBCSessionDataStore.doLoad(java.lang.String)", "public org.eclipse.jetty.server.session.SessionData doLoad(java.lang.String) throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.server.session.JDBCSessionDataStore.delete(java.lang.String)", "public boolean delete(java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore.doStore(java.lang.String, org.eclipse.jetty.server.session.SessionData, long)", "public void doStore(java.lang.String, org.eclipse.jetty.server.session.SessionData, long) throws java.lang.Exception"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.JDBCSessionDataStore.doGetExpired(java.util.Set<java.lang.String>)", "public java.util.Set<java.lang.String> doGetExpired(java.util.Set<java.lang.String>)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore.setDatabaseAdaptor(org.eclipse.jetty.server.session.DatabaseAdaptor)", "public void setDatabaseAdaptor(org.eclipse.jetty.server.session.DatabaseAdaptor)"], ["void", "org.eclipse.jetty.server.session.JDBCSessionDataStore.setSessionTableSchema(org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema)", "public void setSessionTableSchema(org.eclipse.jetty.server.session.JDBCSessionDataStore$SessionTableSchema)"], ["boolean", "org.eclipse.jetty.server.session.JDBCSessionDataStore.isPassivating()", "public boolean isPassivating()"], ["boolean", "org.eclipse.jetty.server.session.JDBCSessionDataStore.exists(java.lang.String)", "public boolean exists(java.lang.String) throws java.lang.Exception"], ["void", "org.eclipse.jetty.server.session.SessionData.serializeAttributes(org.eclipse.jetty.server.session.SessionData, java.io.ObjectOutputStream)", "public static void serializeAttributes(org.eclipse.jetty.server.session.SessionData, java.io.ObjectOutputStream) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.session.SessionData.deserializeAttributes(org.eclipse.jetty.server.session.SessionData, java.io.ObjectInputStream)", "public static void deserializeAttributes(org.eclipse.jetty.server.session.SessionData, java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.SessionData(java.lang.String, java.lang.String, java.lang.String, long, long, long, long)", "public org.eclipse.jetty.server.session.SessionData(java.lang.String, java.lang.String, java.lang.String, long, long, long, long)"], ["org.eclipse.jetty.server.session.SessionData", "org.eclipse.jetty.server.session.SessionData(java.lang.String, java.lang.String, java.lang.String, long, long, long, long, java.util.Map<java.lang.String, java.lang.Object>)", "public org.eclipse.jetty.server.session.SessionData(java.lang.String, java.lang.String, java.lang.String, long, long, long, long, java.util.Map<java.lang.String, java.lang.Object>)"], ["void", "org.eclipse.jetty.server.session.SessionData.copy(org.eclipse.jetty.server.session.SessionData)", "public void copy(org.eclipse.jetty.server.session.SessionData)"], ["long", "org.eclipse.jetty.server.session.SessionData.getLastSaved()", "public long getLastSaved()"], ["void", "org.eclipse.jetty.server.session.SessionData.setLastSaved(long)", "public void setLastSaved(long)"], ["boolean", "org.eclipse.jetty.server.session.SessionData.isDirty()", "public boolean isDirty()"], ["void", "org.eclipse.jetty.server.session.SessionData.setDirty(boolean)", "public void setDirty(boolean)"], ["java.lang.Object", "org.eclipse.jetty.server.session.SessionData.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.SessionData.getKeys()", "public java.util.Set<java.lang.String> getKeys()"], ["java.lang.Object", "org.eclipse.jetty.server.session.SessionData.setAttribute(java.lang.String, java.lang.Object)", "public java.lang.Object setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.SessionData.setDirty(java.lang.String)", "public void setDirty(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.SessionData.putAllAttributes(java.util.Map<java.lang.String, java.lang.Object>)", "public void putAllAttributes(java.util.Map<java.lang.String, java.lang.Object>)"], ["void", "org.eclipse.jetty.server.session.SessionData.clearAllAttributes()", "public void clearAllAttributes()"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.eclipse.jetty.server.session.SessionData.getAllAttributes()", "public java.util.Map<java.lang.String, java.lang.Object> getAllAttributes()"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionData.getId()", "public java.lang.String getId()"], ["void", "org.eclipse.jetty.server.session.SessionData.setId(java.lang.String)", "public void setId(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionData.getContextPath()", "public java.lang.String getContextPath()"], ["void", "org.eclipse.jetty.server.session.SessionData.setContextPath(java.lang.String)", "public void setContextPath(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionData.getVhost()", "public java.lang.String getVhost()"], ["void", "org.eclipse.jetty.server.session.SessionData.setVhost(java.lang.String)", "public void setVhost(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionData.getLastNode()", "public java.lang.String getLastNode()"], ["void", "org.eclipse.jetty.server.session.SessionData.setLastNode(java.lang.String)", "public void setLastNode(java.lang.String)"], ["long", "org.eclipse.jetty.server.session.SessionData.getExpiry()", "public long getExpiry()"], ["void", "org.eclipse.jetty.server.session.SessionData.setExpiry(long)", "public void setExpiry(long)"], ["long", "org.eclipse.jetty.server.session.SessionData.calcExpiry()", "public long calcExpiry()"], ["long", "org.eclipse.jetty.server.session.SessionData.calcExpiry(long)", "public long calcExpiry(long)"], ["void", "org.eclipse.jetty.server.session.SessionData.calcAndSetExpiry(long)", "public void calcAndSetExpiry(long)"], ["void", "org.eclipse.jetty.server.session.SessionData.calcAndSetExpiry()", "public void calcAndSetExpiry()"], ["long", "org.eclipse.jetty.server.session.SessionData.getCreated()", "public long getCreated()"], ["void", "org.eclipse.jetty.server.session.SessionData.setCreated(long)", "public void setCreated(long)"], ["long", "org.eclipse.jetty.server.session.SessionData.getCookieSet()", "public long getCookieSet()"], ["void", "org.eclipse.jetty.server.session.SessionData.setCookieSet(long)", "public void setCookieSet(long)"], ["long", "org.eclipse.jetty.server.session.SessionData.getAccessed()", "public long getAccessed()"], ["void", "org.eclipse.jetty.server.session.SessionData.setAccessed(long)", "public void setAccessed(long)"], ["long", "org.eclipse.jetty.server.session.SessionData.getLastAccessed()", "public long getLastAccessed()"], ["void", "org.eclipse.jetty.server.session.SessionData.setLastAccessed(long)", "public void setLastAccessed(long)"], ["long", "org.eclipse.jetty.server.session.SessionData.getMaxInactiveMs()", "public long getMaxInactiveMs()"], ["void", "org.eclipse.jetty.server.session.SessionData.setMaxInactiveMs(long)", "public void setMaxInactiveMs(long)"], ["boolean", "org.eclipse.jetty.server.session.SessionData.isExpiredAt(long)", "public boolean isExpiredAt(long)"], ["java.lang.String", "org.eclipse.jetty.server.session.SessionData.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.AbstractConnector", "org.eclipse.jetty.server.AbstractConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.AbstractConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.Server", "org.eclipse.jetty.server.AbstractConnector.getServer()", "public org.eclipse.jetty.server.Server getServer()"], ["java.util.concurrent.Executor", "org.eclipse.jetty.server.AbstractConnector.getExecutor()", "public java.util.concurrent.Executor getExecutor()"], ["org.eclipse.jetty.io.ByteBufferPool", "org.eclipse.jetty.server.AbstractConnector.getByteBufferPool()", "public org.eclipse.jetty.io.ByteBufferPool getByteBufferPool()"], ["long", "org.eclipse.jetty.server.AbstractConnector.getIdleTimeout()", "public long getIdleTimeout()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setIdleTimeout(long)", "public void setIdleTimeout(long)"], ["int", "org.eclipse.jetty.server.AbstractConnector.getAcceptors()", "public int getAcceptors()"], ["java.util.concurrent.Future<java.lang.Void>", "org.eclipse.jetty.server.AbstractConnector.shutdown()", "public java.util.concurrent.Future<java.lang.Void> shutdown()"], ["boolean", "org.eclipse.jetty.server.AbstractConnector.isShutdown()", "public boolean isShutdown()"], ["void", "org.eclipse.jetty.server.AbstractConnector.join()", "public void join() throws java.lang.InterruptedException"], ["void", "org.eclipse.jetty.server.AbstractConnector.join(long)", "public void join(long) throws java.lang.InterruptedException"], ["boolean", "org.eclipse.jetty.server.AbstractConnector.isAccepting()", "public boolean isAccepting()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setAccepting(boolean)", "public void setAccepting(boolean)"], ["org.eclipse.jetty.server.ConnectionFactory", "org.eclipse.jetty.server.AbstractConnector.getConnectionFactory(java.lang.String)", "public org.eclipse.jetty.server.ConnectionFactory getConnectionFactory(java.lang.String)"], ["<T> T", "org.eclipse.jetty.server.AbstractConnector.getConnectionFactory(java.lang.Class<T>)", "public <T> T getConnectionFactory(java.lang.Class<T>)"], ["void", "org.eclipse.jetty.server.AbstractConnector.addConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)", "public void addConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)"], ["void", "org.eclipse.jetty.server.AbstractConnector.addFirstConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)", "public void addFirstConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)"], ["void", "org.eclipse.jetty.server.AbstractConnector.addIfAbsentConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)", "public void addIfAbsentConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.ConnectionFactory", "org.eclipse.jetty.server.AbstractConnector.removeConnectionFactory(java.lang.String)", "public org.eclipse.jetty.server.ConnectionFactory removeConnectionFactory(java.lang.String)"], ["java.util.Collection<org.eclipse.jetty.server.ConnectionFactory>", "org.eclipse.jetty.server.AbstractConnector.getConnectionFactories()", "public java.util.Collection<org.eclipse.jetty.server.ConnectionFactory> getConnectionFactories()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setConnectionFactories(java.util.Collection<org.eclipse.jetty.server.ConnectionFactory>)", "public void setConnectionFactories(java.util.Collection<org.eclipse.jetty.server.ConnectionFactory>)"], ["int", "org.eclipse.jetty.server.AbstractConnector.getAcceptorPriorityDelta()", "public int getAcceptorPriorityDelta()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setAcceptorPriorityDelta(int)", "public void setAcceptorPriorityDelta(int)"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.AbstractConnector.getProtocols()", "public java.util.List<java.lang.String> getProtocols()"], ["void", "org.eclipse.jetty.server.AbstractConnector.clearConnectionFactories()", "public void clearConnectionFactories()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector.getDefaultProtocol()", "public java.lang.String getDefaultProtocol()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setDefaultProtocol(java.lang.String)", "public void setDefaultProtocol(java.lang.String)"], ["org.eclipse.jetty.server.ConnectionFactory", "org.eclipse.jetty.server.AbstractConnector.getDefaultConnectionFactory()", "public org.eclipse.jetty.server.ConnectionFactory getDefaultConnectionFactory()"], ["java.util.Collection<org.eclipse.jetty.io.EndPoint>", "org.eclipse.jetty.server.AbstractConnector.getConnectedEndPoints()", "public java.util.Collection<org.eclipse.jetty.io.EndPoint> getConnectedEndPoints()"], ["org.eclipse.jetty.util.thread.Scheduler", "org.eclipse.jetty.server.AbstractConnector.getScheduler()", "public org.eclipse.jetty.util.thread.Scheduler getScheduler()"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector.getName()", "public java.lang.String getName()"], ["void", "org.eclipse.jetty.server.AbstractConnector.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.AbstractConnector.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.server.CachedContentFactory$CachedPrecompressedHttpContent.isValid()", "public boolean isValid()"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.CachedContentFactory$CachedPrecompressedHttpContent.getETag()", "public org.eclipse.jetty.http.HttpField getETag()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedPrecompressedHttpContent.getETagValue()", "public java.lang.String getETagValue()"], ["java.lang.String", "org.eclipse.jetty.server.CachedContentFactory$CachedPrecompressedHttpContent.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.DeflaterPool", "org.eclipse.jetty.server.DeflaterPool(int, int, boolean)", "public org.eclipse.jetty.server.DeflaterPool(int, int, boolean)"], ["java.util.zip.Deflater", "org.eclipse.jetty.server.DeflaterPool.acquire()", "public java.util.zip.Deflater acquire()"], ["void", "org.eclipse.jetty.server.DeflaterPool.release(java.util.zip.Deflater)", "public void release(java.util.zip.Deflater)"], ["org.eclipse.jetty.server.ForwardedRequestCustomizer", "org.eclipse.jetty.server.ForwardedRequestCustomizer()", "public org.eclipse.jetty.server.ForwardedRequestCustomizer()"], ["boolean", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getProxyAsAuthority()", "public boolean getProxyAsAuthority()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setProxyAsAuthority(boolean)", "public void setProxyAsAuthority(boolean)"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedOnly(boolean)", "public void setForwardedOnly(boolean)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForcedHost()", "public java.lang.String getForcedHost()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForcedHost(java.lang.String)", "public void setForcedHost(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedHeader()", "public java.lang.String getForwardedHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedHeader(java.lang.String)", "public void setForwardedHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedHostHeader()", "public java.lang.String getForwardedHostHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedHostHeader(java.lang.String)", "public void setForwardedHostHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedServerHeader()", "public java.lang.String getForwardedServerHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedServerHeader(java.lang.String)", "public void setForwardedServerHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedForHeader()", "public java.lang.String getForwardedForHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedForHeader(java.lang.String)", "public void setForwardedForHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedProtoHeader()", "public java.lang.String getForwardedProtoHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedProtoHeader(java.lang.String)", "public void setForwardedProtoHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedCipherSuiteHeader()", "public java.lang.String getForwardedCipherSuiteHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedCipherSuiteHeader(java.lang.String)", "public void setForwardedCipherSuiteHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedSslSessionIdHeader()", "public java.lang.String getForwardedSslSessionIdHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedSslSessionIdHeader(java.lang.String)", "public void setForwardedSslSessionIdHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getForwardedHttpsHeader()", "public java.lang.String getForwardedHttpsHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setForwardedHttpsHeader(java.lang.String)", "public void setForwardedHttpsHeader(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.ForwardedRequestCustomizer.isSslIsSecure()", "public boolean isSslIsSecure()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setSslIsSecure(boolean)", "public void setSslIsSecure(boolean)"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)", "public void customize(org.eclipse.jetty.server.Connector, org.eclipse.jetty.server.HttpConfiguration, org.eclipse.jetty.server.Request)"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.server.ForwardedRequestCustomizer.getHostHeader()", "public java.lang.String getHostHeader()"], ["void", "org.eclipse.jetty.server.ForwardedRequestCustomizer.setHostHeader(java.lang.String)", "public void setHostHeader(java.lang.String)"], ["org.eclipse.jetty.server.handler.ContextHandler$StaticContext", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext()", "public org.eclipse.jetty.server.handler.ContextHandler$StaticContext()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getContext(java.lang.String)", "public javax.servlet.ServletContext getContext(java.lang.String)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getMajorVersion()", "public int getMajorVersion()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getMimeType(java.lang.String)", "public java.lang.String getMimeType(java.lang.String)"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getMinorVersion()", "public int getMinorVersion()"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getNamedDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)"], ["javax.servlet.RequestDispatcher", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getRequestDispatcher(java.lang.String)", "public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getRealPath(java.lang.String)", "public java.lang.String getRealPath(java.lang.String)"], ["java.net.URL", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String) throws java.net.MalformedURLException"], ["java.io.InputStream", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getResourceAsStream(java.lang.String)", "public java.io.InputStream getResourceAsStream(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getResourcePaths(java.lang.String)", "public java.util.Set<java.lang.String> getResourcePaths(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getServerInfo()", "public java.lang.String getServerInfo()"], ["javax.servlet.Servlet", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getServlet(java.lang.String)", "public javax.servlet.Servlet getServlet(java.lang.String) throws javax.servlet.ServletException"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getServletNames()", "public java.util.Enumeration<java.lang.String> getServletNames()"], ["java.util.Enumeration<javax.servlet.Servlet>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getServlets()", "public java.util.Enumeration<javax.servlet.Servlet> getServlets()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.log(java.lang.Exception, java.lang.String)", "public void log(java.lang.Exception, java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.log(java.lang.String)", "public void log(java.lang.String)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.log(java.lang.String, java.lang.Throwable)", "public void log(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getInitParameter(java.lang.String)", "public java.lang.String getInitParameter(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getInitParameterNames()", "public java.util.Enumeration<java.lang.String> getInitParameterNames()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getServletContextName()", "public java.lang.String getServletContextName()"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getContextPath()", "public java.lang.String getContextPath()"], ["boolean", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.setInitParameter(java.lang.String, java.lang.String)", "public boolean setInitParameter(java.lang.String, java.lang.String)"], ["javax.servlet.FilterRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.Class<? extends javax.servlet.Filter>)"], ["javax.servlet.FilterRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addFilter(java.lang.String, javax.servlet.Filter)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, javax.servlet.Filter)"], ["javax.servlet.FilterRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addFilter(java.lang.String, java.lang.String)", "public javax.servlet.FilterRegistration$Dynamic addFilter(java.lang.String, java.lang.String)"], ["javax.servlet.ServletRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.Class<? extends javax.servlet.Servlet>)"], ["javax.servlet.ServletRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addServlet(java.lang.String, javax.servlet.Servlet)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, javax.servlet.Servlet)"], ["javax.servlet.ServletRegistration$Dynamic", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addServlet(java.lang.String, java.lang.String)", "public javax.servlet.ServletRegistration$Dynamic addServlet(java.lang.String, java.lang.String)"], ["<T extends javax.servlet.Filter> T", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.createFilter(java.lang.Class<T>)", "public <T extends javax.servlet.Filter> T createFilter(java.lang.Class<T>) throws javax.servlet.ServletException"], ["<T extends javax.servlet.Servlet> T", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.createServlet(java.lang.Class<T>)", "public <T extends javax.servlet.Servlet> T createServlet(java.lang.Class<T>) throws javax.servlet.ServletException"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getDefaultSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getDefaultSessionTrackingModes()"], ["java.util.Set<javax.servlet.SessionTrackingMode>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getEffectiveSessionTrackingModes()", "public java.util.Set<javax.servlet.SessionTrackingMode> getEffectiveSessionTrackingModes()"], ["javax.servlet.FilterRegistration", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getFilterRegistration(java.lang.String)", "public javax.servlet.FilterRegistration getFilterRegistration(java.lang.String)"], ["java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getFilterRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.FilterRegistration> getFilterRegistrations()"], ["javax.servlet.ServletRegistration", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getServletRegistration(java.lang.String)", "public javax.servlet.ServletRegistration getServletRegistration(java.lang.String)"], ["java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration>", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getServletRegistrations()", "public java.util.Map<java.lang.String, ? extends javax.servlet.ServletRegistration> getServletRegistrations()"], ["javax.servlet.SessionCookieConfig", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getSessionCookieConfig()", "public javax.servlet.SessionCookieConfig getSessionCookieConfig()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)", "public void setSessionTrackingModes(java.util.Set<javax.servlet.SessionTrackingMode>)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addListener(java.lang.String)", "public void addListener(java.lang.String)"], ["<T extends java.util.EventListener> void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addListener(T)", "public <T extends java.util.EventListener> void addListener(T)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.addListener(java.lang.Class<? extends java.util.EventListener>)", "public void addListener(java.lang.Class<? extends java.util.EventListener>)"], ["<T extends java.util.EventListener> T", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.createListener(java.lang.Class<T>)", "public <T extends java.util.EventListener> T createListener(java.lang.Class<T>) throws javax.servlet.ServletException"], ["java.lang.ClassLoader", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getClassLoader()", "public java.lang.ClassLoader getClassLoader()"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getEffectiveMajorVersion()", "public int getEffectiveMajorVersion()"], ["int", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getEffectiveMinorVersion()", "public int getEffectiveMinorVersion()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.setEffectiveMajorVersion(int)", "public void setEffectiveMajorVersion(int)"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.setEffectiveMinorVersion(int)", "public void setEffectiveMinorVersion(int)"], ["javax.servlet.descriptor.JspConfigDescriptor", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getJspConfigDescriptor()", "public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor()"], ["void", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.declareRoles(java.lang.String...)", "public void declareRoles(java.lang.String...)"], ["java.lang.String", "org.eclipse.jetty.server.handler.ContextHandler$StaticContext.getVirtualServerName()", "public java.lang.String getVirtualServerName()"], ["org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GzipBufferCB", "org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GzipBufferCB(org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor, java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)", "public org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor$GzipBufferCB(org.eclipse.jetty.server.handler.gzip.GzipHttpOutputInterceptor, java.nio.ByteBuffer, boolean, org.eclipse.jetty.util.Callback)"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onTimeout(javax.servlet.AsyncEvent)", "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onStartAsync(javax.servlet.AsyncEvent)", "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onError(javax.servlet.AsyncEvent)", "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.handler.IdleTimeoutHandler$1.onComplete(javax.servlet.AsyncEvent)", "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"], ["org.eclipse.jetty.server.handler.ManagedAttributeListener", "org.eclipse.jetty.server.handler.ManagedAttributeListener(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String...)", "public org.eclipse.jetty.server.handler.ManagedAttributeListener(org.eclipse.jetty.server.handler.ContextHandler, java.lang.String...)"], ["void", "org.eclipse.jetty.server.handler.ManagedAttributeListener.attributeReplaced(javax.servlet.ServletContextAttributeEvent)", "public void attributeReplaced(javax.servlet.ServletContextAttributeEvent)"], ["void", "org.eclipse.jetty.server.handler.ManagedAttributeListener.attributeRemoved(javax.servlet.ServletContextAttributeEvent)", "public void attributeRemoved(javax.servlet.ServletContextAttributeEvent)"], ["void", "org.eclipse.jetty.server.handler.ManagedAttributeListener.attributeAdded(javax.servlet.ServletContextAttributeEvent)", "public void attributeAdded(javax.servlet.ServletContextAttributeEvent)"], ["void", "org.eclipse.jetty.server.handler.ManagedAttributeListener.contextInitialized(javax.servlet.ServletContextEvent)", "public void contextInitialized(javax.servlet.ServletContextEvent)"], ["void", "org.eclipse.jetty.server.handler.ManagedAttributeListener.contextDestroyed(javax.servlet.ServletContextEvent)", "public void contextDestroyed(javax.servlet.ServletContextEvent)"], ["void", "org.eclipse.jetty.server.handler.ShutdownHandler$1.run()", "public void run()"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback$1.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpChannel$CommitCallback$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpChannelState$2.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.HttpChannelState$2.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpChannelState$AsyncRead[]", "org.eclipse.jetty.server.HttpChannelState$AsyncRead.values()", "public static org.eclipse.jetty.server.HttpChannelState$AsyncRead[] values()"], ["org.eclipse.jetty.server.HttpChannelState$AsyncRead", "org.eclipse.jetty.server.HttpChannelState$AsyncRead.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.HttpChannelState$AsyncRead valueOf(java.lang.String)"], ["void", "org.eclipse.jetty.server.HttpConnection$AsyncReadCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpConnection$AsyncReadCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpConnection$BlockingReadCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.server.HttpConnection$BlockingReadCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.util.thread.Invocable$InvocationType", "org.eclipse.jetty.server.HttpConnection$BlockingReadCallback.getInvocationType()", "public org.eclipse.jetty.util.thread.Invocable$InvocationType getInvocationType()"], ["boolean", "org.eclipse.jetty.server.HttpInput$1.blockForContent(org.eclipse.jetty.server.HttpInput)", "public boolean blockForContent(org.eclipse.jetty.server.HttpInput) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput$1.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.HttpInput$ChainedInterceptor", "org.eclipse.jetty.server.HttpInput$ChainedInterceptor(org.eclipse.jetty.server.HttpInput$Interceptor, org.eclipse.jetty.server.HttpInput$Interceptor)", "public org.eclipse.jetty.server.HttpInput$ChainedInterceptor(org.eclipse.jetty.server.HttpInput$Interceptor, org.eclipse.jetty.server.HttpInput$Interceptor)"], ["org.eclipse.jetty.server.HttpInput$Interceptor", "org.eclipse.jetty.server.HttpInput$ChainedInterceptor.getPrev()", "public org.eclipse.jetty.server.HttpInput$Interceptor getPrev()"], ["org.eclipse.jetty.server.HttpInput$Interceptor", "org.eclipse.jetty.server.HttpInput$ChainedInterceptor.getNext()", "public org.eclipse.jetty.server.HttpInput$Interceptor getNext()"], ["org.eclipse.jetty.server.HttpInput$Content", "org.eclipse.jetty.server.HttpInput$ChainedInterceptor.readFrom(org.eclipse.jetty.server.HttpInput$Content)", "public org.eclipse.jetty.server.HttpInput$Content readFrom(org.eclipse.jetty.server.HttpInput$Content)"], ["void", "org.eclipse.jetty.server.HttpInput$ChainedInterceptor.destroy()", "public void destroy()"], ["org.eclipse.jetty.server.HttpInput", "org.eclipse.jetty.server.HttpInput(org.eclipse.jetty.server.HttpChannelState)", "public org.eclipse.jetty.server.HttpInput(org.eclipse.jetty.server.HttpChannelState)"], ["void", "org.eclipse.jetty.server.HttpInput.recycle()", "public void recycle()"], ["org.eclipse.jetty.server.HttpInput$Interceptor", "org.eclipse.jetty.server.HttpInput.getInterceptor()", "public org.eclipse.jetty.server.HttpInput$Interceptor getInterceptor()"], ["void", "org.eclipse.jetty.server.HttpInput.setInterceptor(org.eclipse.jetty.server.HttpInput$Interceptor)", "public void setInterceptor(org.eclipse.jetty.server.HttpInput$Interceptor)"], ["void", "org.eclipse.jetty.server.HttpInput.addInterceptor(org.eclipse.jetty.server.HttpInput$Interceptor)", "public void addInterceptor(org.eclipse.jetty.server.HttpInput$Interceptor)"], ["int", "org.eclipse.jetty.server.HttpInput.available()", "public int available()"], ["int", "org.eclipse.jetty.server.HttpInput.read()", "public int read() throws java.io.IOException"], ["int", "org.eclipse.jetty.server.HttpInput.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.server.HttpInput.asyncReadProduce()", "public void asyncReadProduce() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.server.HttpInput.addContent(org.eclipse.jetty.server.HttpInput$Content)", "public boolean addContent(org.eclipse.jetty.server.HttpInput$Content)"], ["boolean", "org.eclipse.jetty.server.HttpInput.hasContent()", "public boolean hasContent()"], ["void", "org.eclipse.jetty.server.HttpInput.unblock()", "public void unblock()"], ["long", "org.eclipse.jetty.server.HttpInput.getContentConsumed()", "public long getContentConsumed()"], ["boolean", "org.eclipse.jetty.server.HttpInput.earlyEOF()", "public boolean earlyEOF()"], ["boolean", "org.eclipse.jetty.server.HttpInput.eof()", "public boolean eof()"], ["boolean", "org.eclipse.jetty.server.HttpInput.consumeAll()", "public boolean consumeAll()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isError()", "public boolean isError()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isAsync()", "public boolean isAsync()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isFinished()", "public boolean isFinished()"], ["boolean", "org.eclipse.jetty.server.HttpInput.isReady()", "public boolean isReady()"], ["void", "org.eclipse.jetty.server.HttpInput.setReadListener(javax.servlet.ReadListener)", "public void setReadListener(javax.servlet.ReadListener)"], ["boolean", "org.eclipse.jetty.server.HttpInput.onIdleTimeout(java.lang.Throwable)", "public boolean onIdleTimeout(java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.server.HttpInput.failed(java.lang.Throwable)", "public boolean failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.server.HttpInput.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.server.HttpInput.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.Iso88591HttpWriter", "org.eclipse.jetty.server.Iso88591HttpWriter(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.Iso88591HttpWriter(org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.Iso88591HttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.server.jmx.ServerMBean", "org.eclipse.jetty.server.jmx.ServerMBean(java.lang.Object)", "public org.eclipse.jetty.server.jmx.ServerMBean(java.lang.Object)"], ["org.eclipse.jetty.server.Handler[]", "org.eclipse.jetty.server.jmx.ServerMBean.getContexts()", "public org.eclipse.jetty.server.Handler[] getContexts()"], ["long", "org.eclipse.jetty.server.jmx.ServerMBean.getStartupTime()", "public long getStartupTime()"], ["org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser", "org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser(java.io.InputStream, java.lang.String, javax.servlet.MultipartConfigElement, java.io.File, org.eclipse.jetty.server.Request)", "public org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser(java.io.InputStream, java.lang.String, javax.servlet.MultipartConfigElement, java.io.File, org.eclipse.jetty.server.Request) throws java.io.IOException"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts()"], ["javax.servlet.http.Part", "org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String)"], ["void", "org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser.close()", "public void close()"], ["boolean", "org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser.isEmpty()", "public boolean isEmpty()"], ["org.eclipse.jetty.server.handler.ContextHandler$Context", "org.eclipse.jetty.server.MultiParts$MultiPartsUtilParser.getContext()", "public org.eclipse.jetty.server.handler.ContextHandler$Context getContext()"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.server.ConnectionFactory)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, org.eclipse.jetty.io.ByteBufferPool, int, int, org.eclipse.jetty.server.ConnectionFactory...)"], ["org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector", "org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)", "public org.eclipse.jetty.server.nio.NetworkTrafficSelectChannelConnector(org.eclipse.jetty.server.Server, org.eclipse.jetty.util.ssl.SslContextFactory)"], ["org.eclipse.jetty.server.ProxyConnectionFactory$Family[]", "org.eclipse.jetty.server.ProxyConnectionFactory$Family.values()", "public static org.eclipse.jetty.server.ProxyConnectionFactory$Family[] values()"], ["org.eclipse.jetty.server.ProxyConnectionFactory$Family", "org.eclipse.jetty.server.ProxyConnectionFactory$Family.valueOf(java.lang.String)", "public static org.eclipse.jetty.server.ProxyConnectionFactory$Family valueOf(java.lang.String)"], ["org.eclipse.jetty.server.PushBuilderImpl", "org.eclipse.jetty.server.PushBuilderImpl(org.eclipse.jetty.server.Request, org.eclipse.jetty.http.HttpFields, java.lang.String, java.lang.String, java.lang.String, boolean)", "public org.eclipse.jetty.server.PushBuilderImpl(org.eclipse.jetty.server.Request, org.eclipse.jetty.http.HttpFields, java.lang.String, java.lang.String, java.lang.String, boolean)"], ["java.lang.String", "org.eclipse.jetty.server.PushBuilderImpl.getMethod()", "public java.lang.String getMethod()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.method(java.lang.String)", "public org.eclipse.jetty.server.PushBuilder method(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.PushBuilderImpl.getQueryString()", "public java.lang.String getQueryString()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.queryString(java.lang.String)", "public org.eclipse.jetty.server.PushBuilder queryString(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.PushBuilderImpl.getSessionId()", "public java.lang.String getSessionId()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.sessionId(java.lang.String)", "public org.eclipse.jetty.server.PushBuilder sessionId(java.lang.String)"], ["boolean", "org.eclipse.jetty.server.PushBuilderImpl.isConditional()", "public boolean isConditional()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.conditional(boolean)", "public org.eclipse.jetty.server.PushBuilder conditional(boolean)"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.PushBuilderImpl.getHeaderNames()", "public java.util.Set<java.lang.String> getHeaderNames()"], ["java.lang.String", "org.eclipse.jetty.server.PushBuilderImpl.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.setHeader(java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.PushBuilder setHeader(java.lang.String, java.lang.String)"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.addHeader(java.lang.String, java.lang.String)", "public org.eclipse.jetty.server.PushBuilder addHeader(java.lang.String, java.lang.String)"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.removeHeader(java.lang.String)", "public org.eclipse.jetty.server.PushBuilder removeHeader(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.PushBuilderImpl.getPath()", "public java.lang.String getPath()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.path(java.lang.String)", "public org.eclipse.jetty.server.PushBuilder path(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.PushBuilderImpl.getEtag()", "public java.lang.String getEtag()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.etag(java.lang.String)", "public org.eclipse.jetty.server.PushBuilder etag(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.server.PushBuilderImpl.getLastModified()", "public java.lang.String getLastModified()"], ["org.eclipse.jetty.server.PushBuilder", "org.eclipse.jetty.server.PushBuilderImpl.lastModified(java.lang.String)", "public org.eclipse.jetty.server.PushBuilder lastModified(java.lang.String)"], ["void", "org.eclipse.jetty.server.PushBuilderImpl.push()", "public void push()"], ["org.eclipse.jetty.server.ResourceService", "org.eclipse.jetty.server.ResourceService()", "public org.eclipse.jetty.server.ResourceService()"], ["org.eclipse.jetty.http.HttpContent$ContentFactory", "org.eclipse.jetty.server.ResourceService.getContentFactory()", "public org.eclipse.jetty.http.HttpContent$ContentFactory getContentFactory()"], ["void", "org.eclipse.jetty.server.ResourceService.setContentFactory(org.eclipse.jetty.http.HttpContent$ContentFactory)", "public void setContentFactory(org.eclipse.jetty.http.HttpContent$ContentFactory)"], ["org.eclipse.jetty.server.ResourceService$WelcomeFactory", "org.eclipse.jetty.server.ResourceService.getWelcomeFactory()", "public org.eclipse.jetty.server.ResourceService$WelcomeFactory getWelcomeFactory()"], ["void", "org.eclipse.jetty.server.ResourceService.setWelcomeFactory(org.eclipse.jetty.server.ResourceService$WelcomeFactory)", "public void setWelcomeFactory(org.eclipse.jetty.server.ResourceService$WelcomeFactory)"], ["boolean", "org.eclipse.jetty.server.ResourceService.isAcceptRanges()", "public boolean isAcceptRanges()"], ["void", "org.eclipse.jetty.server.ResourceService.setAcceptRanges(boolean)", "public void setAcceptRanges(boolean)"], ["boolean", "org.eclipse.jetty.server.ResourceService.isDirAllowed()", "public boolean isDirAllowed()"], ["void", "org.eclipse.jetty.server.ResourceService.setDirAllowed(boolean)", "public void setDirAllowed(boolean)"], ["boolean", "org.eclipse.jetty.server.ResourceService.isRedirectWelcome()", "public boolean isRedirectWelcome()"], ["void", "org.eclipse.jetty.server.ResourceService.setRedirectWelcome(boolean)", "public void setRedirectWelcome(boolean)"], ["org.eclipse.jetty.http.CompressedContentFormat[]", "org.eclipse.jetty.server.ResourceService.getPrecompressedFormats()", "public org.eclipse.jetty.http.CompressedContentFormat[] getPrecompressedFormats()"], ["void", "org.eclipse.jetty.server.ResourceService.setPrecompressedFormats(org.eclipse.jetty.http.CompressedContentFormat[])", "public void setPrecompressedFormats(org.eclipse.jetty.http.CompressedContentFormat[])"], ["void", "org.eclipse.jetty.server.ResourceService.setEncodingCacheSize(int)", "public void setEncodingCacheSize(int)"], ["int", "org.eclipse.jetty.server.ResourceService.getEncodingCacheSize()", "public int getEncodingCacheSize()"], ["boolean", "org.eclipse.jetty.server.ResourceService.isPathInfoOnly()", "public boolean isPathInfoOnly()"], ["void", "org.eclipse.jetty.server.ResourceService.setPathInfoOnly(boolean)", "public void setPathInfoOnly(boolean)"], ["boolean", "org.eclipse.jetty.server.ResourceService.isEtags()", "public boolean isEtags()"], ["void", "org.eclipse.jetty.server.ResourceService.setEtags(boolean)", "public void setEtags(boolean)"], ["org.eclipse.jetty.http.HttpField", "org.eclipse.jetty.server.ResourceService.getCacheControl()", "public org.eclipse.jetty.http.HttpField getCacheControl()"], ["void", "org.eclipse.jetty.server.ResourceService.setCacheControl(org.eclipse.jetty.http.HttpField)", "public void setCacheControl(org.eclipse.jetty.http.HttpField)"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.server.ResourceService.getGzipEquivalentFileExtensions()", "public java.util.List<java.lang.String> getGzipEquivalentFileExtensions()"], ["void", "org.eclipse.jetty.server.ResourceService.setGzipEquivalentFileExtensions(java.util.List<java.lang.String>)", "public void setGzipEquivalentFileExtensions(java.util.List<java.lang.String>)"], ["boolean", "org.eclipse.jetty.server.ResourceService.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)", "public boolean doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException"], ["org.eclipse.jetty.server.ServerConnectionStatistics", "org.eclipse.jetty.server.ServerConnectionStatistics()", "public org.eclipse.jetty.server.ServerConnectionStatistics()"], ["void", "org.eclipse.jetty.server.ServerConnectionStatistics.addToAllConnectors(org.eclipse.jetty.server.Server)", "public static void addToAllConnectors(org.eclipse.jetty.server.Server)"], ["void", "org.eclipse.jetty.server.session.AbstractSessionDataStore$1.run()", "public void run()"], ["org.eclipse.jetty.server.session.HouseKeeper", "org.eclipse.jetty.server.session.HouseKeeper()", "public org.eclipse.jetty.server.session.HouseKeeper()"], ["void", "org.eclipse.jetty.server.session.HouseKeeper.setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)", "public void setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)"], ["void", "org.eclipse.jetty.server.session.HouseKeeper.setIntervalSec(long)", "public void setIntervalSec(long) throws java.lang.Exception"], ["long", "org.eclipse.jetty.server.session.HouseKeeper.getIntervalSec()", "public long getIntervalSec()"], ["void", "org.eclipse.jetty.server.session.HouseKeeper.scavenge()", "public void scavenge()"], ["java.lang.String", "org.eclipse.jetty.server.session.HouseKeeper.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.server.session.NullSessionDataStoreFactory", "org.eclipse.jetty.server.session.NullSessionDataStoreFactory()", "public org.eclipse.jetty.server.session.NullSessionDataStoreFactory()"], ["org.eclipse.jetty.server.session.SessionDataStore", "org.eclipse.jetty.server.session.NullSessionDataStoreFactory.getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler)", "public org.eclipse.jetty.server.session.SessionDataStore getSessionDataStore(org.eclipse.jetty.server.session.SessionHandler) throws java.lang.Exception"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.Session(org.eclipse.jetty.server.session.SessionHandler, javax.servlet.http.HttpServletRequest, org.eclipse.jetty.server.session.SessionData)", "public org.eclipse.jetty.server.session.Session(org.eclipse.jetty.server.session.SessionHandler, javax.servlet.http.HttpServletRequest, org.eclipse.jetty.server.session.SessionData)"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.Session(org.eclipse.jetty.server.session.SessionHandler, org.eclipse.jetty.server.session.SessionData)", "public org.eclipse.jetty.server.session.Session(org.eclipse.jetty.server.session.SessionHandler, org.eclipse.jetty.server.session.SessionData)"], ["long", "org.eclipse.jetty.server.session.Session.getRequests()", "public long getRequests()"], ["void", "org.eclipse.jetty.server.session.Session.setExtendedId(java.lang.String)", "public void setExtendedId(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.Session.unbindValue(java.lang.String, java.lang.Object)", "public void unbindValue(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.Session.bindValue(java.lang.String, java.lang.Object)", "public void bindValue(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.Session.didActivate()", "public void didActivate()"], ["void", "org.eclipse.jetty.server.session.Session.willPassivate()", "public void willPassivate()"], ["boolean", "org.eclipse.jetty.server.session.Session.isValid()", "public boolean isValid()"], ["long", "org.eclipse.jetty.server.session.Session.getCookieSetTime()", "public long getCookieSetTime()"], ["long", "org.eclipse.jetty.server.session.Session.getCreationTime()", "public long getCreationTime() throws java.lang.IllegalStateException"], ["java.lang.String", "org.eclipse.jetty.server.session.Session.getId()", "public java.lang.String getId()"], ["java.lang.String", "org.eclipse.jetty.server.session.Session.getExtendedId()", "public java.lang.String getExtendedId()"], ["java.lang.String", "org.eclipse.jetty.server.session.Session.getContextPath()", "public java.lang.String getContextPath()"], ["java.lang.String", "org.eclipse.jetty.server.session.Session.getVHost()", "public java.lang.String getVHost()"], ["long", "org.eclipse.jetty.server.session.Session.getLastAccessedTime()", "public long getLastAccessedTime()"], ["javax.servlet.ServletContext", "org.eclipse.jetty.server.session.Session.getServletContext()", "public javax.servlet.ServletContext getServletContext()"], ["void", "org.eclipse.jetty.server.session.Session.setMaxInactiveInterval(int)", "public void setMaxInactiveInterval(int)"], ["void", "org.eclipse.jetty.server.session.Session.updateInactivityTimer()", "public void updateInactivityTimer()"], ["int", "org.eclipse.jetty.server.session.Session.getMaxInactiveInterval()", "public int getMaxInactiveInterval()"], ["javax.servlet.http.HttpSessionContext", "org.eclipse.jetty.server.session.Session.getSessionContext()", "public javax.servlet.http.HttpSessionContext getSessionContext()"], ["org.eclipse.jetty.server.session.SessionHandler", "org.eclipse.jetty.server.session.Session.getSessionHandler()", "public org.eclipse.jetty.server.session.SessionHandler getSessionHandler()"], ["java.lang.Object", "org.eclipse.jetty.server.session.Session.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.lang.Object", "org.eclipse.jetty.server.session.Session.getValue(java.lang.String)", "public java.lang.Object getValue(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.server.session.Session.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["int", "org.eclipse.jetty.server.session.Session.getAttributes()", "public int getAttributes()"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.server.session.Session.getNames()", "public java.util.Set<java.lang.String> getNames()"], ["java.lang.String[]", "org.eclipse.jetty.server.session.Session.getValueNames()", "public java.lang.String[] getValueNames() throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.session.Session.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.Session.putValue(java.lang.String, java.lang.Object)", "public void putValue(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.server.session.Session.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.Session.removeValue(java.lang.String)", "public void removeValue(java.lang.String)"], ["void", "org.eclipse.jetty.server.session.Session.renewId(javax.servlet.http.HttpServletRequest)", "public void renewId(javax.servlet.http.HttpServletRequest)"], ["void", "org.eclipse.jetty.server.session.Session.invalidate()", "public void invalidate()"], ["org.eclipse.jetty.util.thread.Locker$Lock", "org.eclipse.jetty.server.session.Session.lock()", "public org.eclipse.jetty.util.thread.Locker$Lock lock()"], ["org.eclipse.jetty.util.thread.Locker$Lock", "org.eclipse.jetty.server.session.Session.lockIfNotHeld()", "public org.eclipse.jetty.util.thread.Locker$Lock lockIfNotHeld()"], ["boolean", "org.eclipse.jetty.server.session.Session.isNew()", "public boolean isNew() throws java.lang.IllegalStateException"], ["void", "org.eclipse.jetty.server.session.Session.setIdChanged(boolean)", "public void setIdChanged(boolean)"], ["boolean", "org.eclipse.jetty.server.session.Session.isIdChanged()", "public boolean isIdChanged()"], ["org.eclipse.jetty.server.session.Session", "org.eclipse.jetty.server.session.Session.getSession()", "public org.eclipse.jetty.server.session.Session getSession()"], ["void", "org.eclipse.jetty.server.session.Session.setResident(boolean)", "public void setResident(boolean)"], ["boolean", "org.eclipse.jetty.server.session.Session.isResident()", "public boolean isResident()"], ["org.eclipse.jetty.server.Utf8HttpWriter", "org.eclipse.jetty.server.Utf8HttpWriter(org.eclipse.jetty.server.HttpOutput)", "public org.eclipse.jetty.server.Utf8HttpWriter(org.eclipse.jetty.server.HttpOutput)"], ["void", "org.eclipse.jetty.server.Utf8HttpWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"]]}