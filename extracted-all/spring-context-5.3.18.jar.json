{
    "spring-context-5.3.18.jar": [
        [
            "org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver",
            "org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver",
            "org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.glassfish.GlassFishLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "boolean",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader$1.hasMoreElements()",
            "public boolean hasMoreElements()"
        ],
        [
            "java.net.URL",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader$1.nextElement()",
            "public java.net.URL nextElement()"
        ],
        [
            "java.lang.Object",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader$1.nextElement()",
            "public java.lang.Object nextElement()"
        ],
        [
            "org.springframework.instrument.classloading.SimpleThrowawayClassLoader",
            "org.springframework.instrument.classloading.SimpleThrowawayClassLoader(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.SimpleThrowawayClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer(java.lang.instrument.ClassFileTransformer, java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer(java.lang.instrument.ClassFileTransformer, java.lang.ClassLoader)"
        ],
        [
            "byte[]",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer.transform(java.lang.ClassLoader, java.lang.String, java.lang.Class<?>, java.security.ProtectionDomain, byte[])",
            "public byte[] transform(java.lang.ClassLoader, java.lang.String, java.lang.Class<?>, java.security.ProtectionDomain, byte[]) throws java.lang.instrument.IllegalClassFormatException"
        ],
        [
            "java.lang.String",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.instrument.classloading.websphere.WebSphereClassLoaderAdapter",
            "org.springframework.instrument.classloading.websphere.WebSphereClassLoaderAdapter(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.websphere.WebSphereClassLoaderAdapter(java.lang.ClassLoader)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.websphere.WebSphereClassLoaderAdapter.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.websphere.WebSphereClassLoaderAdapter.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.websphere.WebSphereClassLoaderAdapter.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin",
            "org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin(java.lang.instrument.ClassFileTransformer)",
            "public org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.Object",
            "org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "java.lang.String",
            "org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver",
            "org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver",
            "org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.websphere.WebSphereLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "org.springframework.instrument.classloading.WeavingTransformer",
            "org.springframework.instrument.classloading.WeavingTransformer(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.WeavingTransformer(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.WeavingTransformer.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "byte[]",
            "org.springframework.instrument.classloading.WeavingTransformer.transformIfNecessary(java.lang.String, byte[])",
            "public byte[] transformIfNecessary(java.lang.String, byte[])"
        ],
        [
            "byte[]",
            "org.springframework.instrument.classloading.WeavingTransformer.transformIfNecessary(java.lang.String, java.lang.String, byte[], java.security.ProtectionDomain)",
            "public byte[] transformIfNecessary(java.lang.String, java.lang.String, byte[], java.security.ProtectionDomain)"
        ],
        [
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.removeTransformers()",
            "public void removeTransformers()"
        ],
        [
            "boolean",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.isInstrumentationAvailable()",
            "public static boolean isInstrumentationAvailable()"
        ],
        [
            "org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter(java.lang.instrument.ClassFileTransformer, java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter(java.lang.instrument.ClassFileTransformer, java.lang.ClassLoader)"
        ],
        [
            "java.lang.Object",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter.initialize(java.util.Hashtable<?, ?>)",
            "public void initialize(java.util.Hashtable<?, ?>)"
        ],
        [
            "byte[]",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter.preProcess(java.lang.String, byte[])",
            "public byte[] preProcess(java.lang.String, byte[])"
        ],
        [
            "java.lang.String",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassPreProcessorAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver",
            "org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver",
            "org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.weblogic.WebLogicLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.weblogic.WebLogicClassLoaderAdapter.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver",
            "org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver",
            "org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "org.springframework.instrument.classloading.ShadowingClassLoader",
            "org.springframework.instrument.classloading.ShadowingClassLoader(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.ShadowingClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.instrument.classloading.ShadowingClassLoader",
            "org.springframework.instrument.classloading.ShadowingClassLoader(java.lang.ClassLoader, boolean)",
            "public org.springframework.instrument.classloading.ShadowingClassLoader(java.lang.ClassLoader, boolean)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.ShadowingClassLoader.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.ShadowingClassLoader.copyTransformers(org.springframework.instrument.classloading.ShadowingClassLoader)",
            "public void copyTransformers(org.springframework.instrument.classloading.ShadowingClassLoader)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.instrument.classloading.ShadowingClassLoader.loadClass(java.lang.String)",
            "public java.lang.Class<?> loadClass(java.lang.String) throws java.lang.ClassNotFoundException"
        ],
        [
            "java.net.URL",
            "org.springframework.instrument.classloading.ShadowingClassLoader.getResource(java.lang.String)",
            "public java.net.URL getResource(java.lang.String)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.instrument.classloading.ShadowingClassLoader.getResourceAsStream(java.lang.String)",
            "public java.io.InputStream getResourceAsStream(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.net.URL>",
            "org.springframework.instrument.classloading.ShadowingClassLoader.getResources(java.lang.String)",
            "public java.util.Enumeration<java.net.URL> getResources(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver",
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver",
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver",
            "org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver",
            "org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.tomcat.TomcatLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "java.lang.instrument.Instrumentation",
            "org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$InstrumentationAccessor.getInstrumentation()",
            "public static java.lang.instrument.Instrumentation getInstrumentation()"
        ],
        [
            "org.springframework.instrument.classloading.SimpleInstrumentableClassLoader",
            "org.springframework.instrument.classloading.SimpleInstrumentableClassLoader(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.SimpleInstrumentableClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.SimpleInstrumentableClassLoader.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader(java.lang.ClassLoader)",
            "public org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader.override(java.lang.String, java.lang.String)",
            "public void override(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader.suppress(java.lang.String)",
            "public void suppress(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader.copyOverrides(org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader)",
            "public void copyOverrides(org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader)"
        ],
        [
            "java.net.URL",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader.getResource(java.lang.String)",
            "public java.net.URL getResource(java.lang.String)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader.getResourceAsStream(java.lang.String)",
            "public java.io.InputStream getResourceAsStream(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.net.URL>",
            "org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader.getResources(java.lang.String)",
            "public java.util.Enumeration<java.net.URL> getResources(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.instrument.classloading.SimpleLoadTimeWeaver",
            "org.springframework.instrument.classloading.SimpleLoadTimeWeaver()",
            "public org.springframework.instrument.classloading.SimpleLoadTimeWeaver()"
        ],
        [
            "org.springframework.instrument.classloading.SimpleLoadTimeWeaver",
            "org.springframework.instrument.classloading.SimpleLoadTimeWeaver(org.springframework.instrument.classloading.SimpleInstrumentableClassLoader)",
            "public org.springframework.instrument.classloading.SimpleLoadTimeWeaver(org.springframework.instrument.classloading.SimpleInstrumentableClassLoader)"
        ],
        [
            "void",
            "org.springframework.instrument.classloading.SimpleLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.SimpleLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.instrument.classloading.SimpleLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "default",
            "org.springframework.context.SmartLifecycle.boolean isAutoStartup()",
            "public default boolean isAutoStartup()"
        ],
        [
            "default",
            "org.springframework.context.SmartLifecycle.void stop(java.lang.Runnable)",
            "public default void stop(java.lang.Runnable)"
        ],
        [
            "default",
            "org.springframework.context.SmartLifecycle.int getPhase()",
            "public default int getPhase()"
        ],
        [
            "org.springframework.context.NoSuchMessageException",
            "org.springframework.context.NoSuchMessageException(java.lang.String, java.util.Locale)",
            "public org.springframework.context.NoSuchMessageException(java.lang.String, java.util.Locale)"
        ],
        [
            "org.springframework.context.NoSuchMessageException",
            "org.springframework.context.NoSuchMessageException(java.lang.String)",
            "public org.springframework.context.NoSuchMessageException(java.lang.String)"
        ],
        [
            "org.springframework.context.i18n.SimpleLocaleContext",
            "org.springframework.context.i18n.SimpleLocaleContext(java.util.Locale)",
            "public org.springframework.context.i18n.SimpleLocaleContext(java.util.Locale)"
        ],
        [
            "java.util.Locale",
            "org.springframework.context.i18n.SimpleLocaleContext.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.i18n.SimpleLocaleContext.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.resetLocaleContext()",
            "public static void resetLocaleContext()"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setLocaleContext(org.springframework.context.i18n.LocaleContext)",
            "public static void setLocaleContext(org.springframework.context.i18n.LocaleContext)"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setLocaleContext(org.springframework.context.i18n.LocaleContext, boolean)",
            "public static void setLocaleContext(org.springframework.context.i18n.LocaleContext, boolean)"
        ],
        [
            "org.springframework.context.i18n.LocaleContext",
            "org.springframework.context.i18n.LocaleContextHolder.getLocaleContext()",
            "public static org.springframework.context.i18n.LocaleContext getLocaleContext()"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setLocale(java.util.Locale)",
            "public static void setLocale(java.util.Locale)"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setLocale(java.util.Locale, boolean)",
            "public static void setLocale(java.util.Locale, boolean)"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setDefaultLocale(java.util.Locale)",
            "public static void setDefaultLocale(java.util.Locale)"
        ],
        [
            "java.util.Locale",
            "org.springframework.context.i18n.LocaleContextHolder.getLocale()",
            "public static java.util.Locale getLocale()"
        ],
        [
            "java.util.Locale",
            "org.springframework.context.i18n.LocaleContextHolder.getLocale(org.springframework.context.i18n.LocaleContext)",
            "public static java.util.Locale getLocale(org.springframework.context.i18n.LocaleContext)"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setTimeZone(java.util.TimeZone)",
            "public static void setTimeZone(java.util.TimeZone)"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setTimeZone(java.util.TimeZone, boolean)",
            "public static void setTimeZone(java.util.TimeZone, boolean)"
        ],
        [
            "void",
            "org.springframework.context.i18n.LocaleContextHolder.setDefaultTimeZone(java.util.TimeZone)",
            "public static void setDefaultTimeZone(java.util.TimeZone)"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.context.i18n.LocaleContextHolder.getTimeZone()",
            "public static java.util.TimeZone getTimeZone()"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.context.i18n.LocaleContextHolder.getTimeZone(org.springframework.context.i18n.LocaleContext)",
            "public static java.util.TimeZone getTimeZone(org.springframework.context.i18n.LocaleContext)"
        ],
        [
            "org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext",
            "org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext(java.util.Locale, java.util.TimeZone)",
            "public org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext(java.util.Locale, java.util.TimeZone)"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext.getTimeZone()",
            "public java.util.TimeZone getTimeZone()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.ApplicationContextException",
            "org.springframework.context.ApplicationContextException(java.lang.String)",
            "public org.springframework.context.ApplicationContextException(java.lang.String)"
        ],
        [
            "org.springframework.context.ApplicationContextException",
            "org.springframework.context.ApplicationContextException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.context.ApplicationContextException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "boolean",
            "org.springframework.context.expression.CachedExpressionEvaluator$ExpressionKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.expression.CachedExpressionEvaluator$ExpressionKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.expression.CachedExpressionEvaluator$ExpressionKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.context.expression.CachedExpressionEvaluator$ExpressionKey.compareTo(org.springframework.context.expression.CachedExpressionEvaluator$ExpressionKey)",
            "public int compareTo(org.springframework.context.expression.CachedExpressionEvaluator$ExpressionKey)"
        ],
        [
            "int",
            "org.springframework.context.expression.CachedExpressionEvaluator$ExpressionKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.context.expression.BeanExpressionContextAccessor",
            "org.springframework.context.expression.BeanExpressionContextAccessor()",
            "public org.springframework.context.expression.BeanExpressionContextAccessor()"
        ],
        [
            "boolean",
            "org.springframework.context.expression.BeanExpressionContextAccessor.canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "org.springframework.expression.TypedValue",
            "org.springframework.context.expression.BeanExpressionContextAccessor.read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "boolean",
            "org.springframework.context.expression.BeanExpressionContextAccessor.canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "void",
            "org.springframework.context.expression.BeanExpressionContextAccessor.write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object)",
            "public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.context.expression.BeanExpressionContextAccessor.getSpecificTargetClasses()",
            "public java.lang.Class<?>[] getSpecificTargetClasses()"
        ],
        [
            "org.springframework.context.expression.BeanFactoryAccessor",
            "org.springframework.context.expression.BeanFactoryAccessor()",
            "public org.springframework.context.expression.BeanFactoryAccessor()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.context.expression.BeanFactoryAccessor.getSpecificTargetClasses()",
            "public java.lang.Class<?>[] getSpecificTargetClasses()"
        ],
        [
            "boolean",
            "org.springframework.context.expression.BeanFactoryAccessor.canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "org.springframework.expression.TypedValue",
            "org.springframework.context.expression.BeanFactoryAccessor.read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "boolean",
            "org.springframework.context.expression.BeanFactoryAccessor.canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "void",
            "org.springframework.context.expression.BeanFactoryAccessor.write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object)",
            "public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException"
        ],
        [
            "org.springframework.context.expression.MapAccessor",
            "org.springframework.context.expression.MapAccessor()",
            "public org.springframework.context.expression.MapAccessor()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.context.expression.MapAccessor.getSpecificTargetClasses()",
            "public java.lang.Class<?>[] getSpecificTargetClasses()"
        ],
        [
            "boolean",
            "org.springframework.context.expression.MapAccessor.canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "org.springframework.expression.TypedValue",
            "org.springframework.context.expression.MapAccessor.read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "boolean",
            "org.springframework.context.expression.MapAccessor.canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "void",
            "org.springframework.context.expression.MapAccessor.write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object)",
            "public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException"
        ],
        [
            "boolean",
            "org.springframework.context.expression.MapAccessor.isCompilable()",
            "public boolean isCompilable()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.expression.MapAccessor.getPropertyType()",
            "public java.lang.Class<?> getPropertyType()"
        ],
        [
            "void",
            "org.springframework.context.expression.MapAccessor.generateCode(java.lang.String, org.springframework.asm.MethodVisitor, org.springframework.expression.spel.CodeFlow)",
            "public void generateCode(java.lang.String, org.springframework.asm.MethodVisitor, org.springframework.expression.spel.CodeFlow)"
        ],
        [
            "org.springframework.context.expression.StandardBeanExpressionResolver",
            "org.springframework.context.expression.StandardBeanExpressionResolver()",
            "public org.springframework.context.expression.StandardBeanExpressionResolver()"
        ],
        [
            "org.springframework.context.expression.StandardBeanExpressionResolver",
            "org.springframework.context.expression.StandardBeanExpressionResolver(java.lang.ClassLoader)",
            "public org.springframework.context.expression.StandardBeanExpressionResolver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.context.expression.StandardBeanExpressionResolver.setExpressionPrefix(java.lang.String)",
            "public void setExpressionPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.expression.StandardBeanExpressionResolver.setExpressionSuffix(java.lang.String)",
            "public void setExpressionSuffix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.expression.StandardBeanExpressionResolver.setExpressionParser(org.springframework.expression.ExpressionParser)",
            "public void setExpressionParser(org.springframework.expression.ExpressionParser)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(java.lang.String, org.springframework.beans.factory.config.BeanExpressionContext)",
            "public java.lang.Object evaluate(java.lang.String, org.springframework.beans.factory.config.BeanExpressionContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.expression.EnvironmentAccessor",
            "org.springframework.context.expression.EnvironmentAccessor()",
            "public org.springframework.context.expression.EnvironmentAccessor()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.context.expression.EnvironmentAccessor.getSpecificTargetClasses()",
            "public java.lang.Class<?>[] getSpecificTargetClasses()"
        ],
        [
            "boolean",
            "org.springframework.context.expression.EnvironmentAccessor.canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "org.springframework.expression.TypedValue",
            "org.springframework.context.expression.EnvironmentAccessor.read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "boolean",
            "org.springframework.context.expression.EnvironmentAccessor.canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)",
            "public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "void",
            "org.springframework.context.expression.EnvironmentAccessor.write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object)",
            "public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException"
        ],
        [
            "org.springframework.context.expression.MethodBasedEvaluationContext",
            "org.springframework.context.expression.MethodBasedEvaluationContext(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.core.ParameterNameDiscoverer)",
            "public org.springframework.context.expression.MethodBasedEvaluationContext(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.expression.MethodBasedEvaluationContext.lookupVariable(java.lang.String)",
            "public java.lang.Object lookupVariable(java.lang.String)"
        ],
        [
            "org.springframework.context.expression.BeanFactoryResolver",
            "org.springframework.context.expression.BeanFactoryResolver(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.context.expression.BeanFactoryResolver(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.expression.BeanFactoryResolver.resolve(org.springframework.expression.EvaluationContext, java.lang.String)",
            "public java.lang.Object resolve(org.springframework.expression.EvaluationContext, java.lang.String) throws org.springframework.expression.AccessException"
        ],
        [
            "org.springframework.context.expression.MapAccessor$MapAccessException",
            "org.springframework.context.expression.MapAccessor$MapAccessException(java.lang.String)",
            "public org.springframework.context.expression.MapAccessor$MapAccessException(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.expression.MapAccessor$MapAccessException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "org.springframework.context.expression.AnnotatedElementKey",
            "org.springframework.context.expression.AnnotatedElementKey(java.lang.reflect.AnnotatedElement, java.lang.Class<?>)",
            "public org.springframework.context.expression.AnnotatedElementKey(java.lang.reflect.AnnotatedElement, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.context.expression.AnnotatedElementKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.expression.AnnotatedElementKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.expression.AnnotatedElementKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.context.expression.AnnotatedElementKey.compareTo(org.springframework.context.expression.AnnotatedElementKey)",
            "public int compareTo(org.springframework.context.expression.AnnotatedElementKey)"
        ],
        [
            "int",
            "org.springframework.context.expression.AnnotatedElementKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.context.expression.StandardBeanExpressionResolver$1.isTemplate()",
            "public boolean isTemplate()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.expression.StandardBeanExpressionResolver$1.getExpressionPrefix()",
            "public java.lang.String getExpressionPrefix()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.expression.StandardBeanExpressionResolver$1.getExpressionSuffix()",
            "public java.lang.String getExpressionSuffix()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.context.config.SpringConfiguredBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.context.config.ContextNamespaceHandler",
            "org.springframework.context.config.ContextNamespaceHandler()",
            "public org.springframework.context.config.ContextNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.context.config.ContextNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder(org.springframework.context.support.ReloadableResourceBundleMessageSource)",
            "public org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder(org.springframework.context.support.ReloadableResourceBundleMessageSource)"
        ],
        [
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder(org.springframework.context.support.ReloadableResourceBundleMessageSource, java.util.Properties, long)",
            "public org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder(org.springframework.context.support.ReloadableResourceBundleMessageSource, java.util.Properties, long)"
        ],
        [
            "java.util.Properties",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder.getProperties()",
            "public java.util.Properties getProperties()"
        ],
        [
            "long",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder.getFileTimestamp()",
            "public long getFileTimestamp()"
        ],
        [
            "void",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder.setRefreshTimestamp(long)",
            "public void setRefreshTimestamp(long)"
        ],
        [
            "long",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder.getRefreshTimestamp()",
            "public long getRefreshTimestamp()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.text.MessageFormat",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder.getMessageFormat(java.lang.String, java.util.Locale)",
            "public java.text.MessageFormat getMessageFormat(java.lang.String, java.util.Locale)"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext",
            "org.springframework.context.support.GenericApplicationContext()",
            "public org.springframework.context.support.GenericApplicationContext()"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext",
            "org.springframework.context.support.GenericApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory)",
            "public org.springframework.context.support.GenericApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory)"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext",
            "org.springframework.context.support.GenericApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.GenericApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext",
            "org.springframework.context.support.GenericApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory, org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.GenericApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory, org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.setParent(org.springframework.context.ApplicationContext)",
            "public void setParent(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)",
            "public void setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.setAllowBeanDefinitionOverriding(boolean)",
            "public void setAllowBeanDefinitionOverriding(boolean)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.setAllowCircularReferences(boolean)",
            "public void setAllowCircularReferences(boolean)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.context.support.GenericApplicationContext.getResource(java.lang.String)",
            "public org.springframework.core.io.Resource getResource(java.lang.String)"
        ],
        [
            "org.springframework.core.io.Resource[]",
            "org.springframework.context.support.GenericApplicationContext.getResources(java.lang.String)",
            "public org.springframework.core.io.Resource[] getResources(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.setClassLoader(java.lang.ClassLoader)",
            "public void setClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.context.support.GenericApplicationContext.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
            "org.springframework.context.support.GenericApplicationContext.getBeanFactory()",
            "public final org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory",
            "org.springframework.context.support.GenericApplicationContext.getDefaultListableBeanFactory()",
            "public final org.springframework.beans.factory.support.DefaultListableBeanFactory getDefaultListableBeanFactory()"
        ],
        [
            "org.springframework.beans.factory.config.AutowireCapableBeanFactory",
            "org.springframework.context.support.GenericApplicationContext.getAutowireCapableBeanFactory()",
            "public org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)",
            "public void registerBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition) throws org.springframework.beans.factory.BeanDefinitionStoreException"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.removeBeanDefinition(java.lang.String)",
            "public void removeBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.context.support.GenericApplicationContext.getBeanDefinition(java.lang.String)",
            "public org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.context.support.GenericApplicationContext.isBeanNameInUse(java.lang.String)",
            "public boolean isBeanNameInUse(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.registerAlias(java.lang.String, java.lang.String)",
            "public void registerAlias(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericApplicationContext.removeAlias(java.lang.String)",
            "public void removeAlias(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.context.support.GenericApplicationContext.isAlias(java.lang.String)",
            "public boolean isAlias(java.lang.String)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContext.registerBean(java.lang.Class<T>, java.lang.Object...)",
            "public <T> void registerBean(java.lang.Class<T>, java.lang.Object...)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContext.registerBean(java.lang.String, java.lang.Class<T>, java.lang.Object...)",
            "public <T> void registerBean(java.lang.String, java.lang.Class<T>, java.lang.Object...)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContext.registerBean(java.lang.Class<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public final <T> void registerBean(java.lang.Class<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContext.registerBean(java.lang.String, java.lang.Class<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public final <T> void registerBean(java.lang.String, java.lang.Class<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContext.registerBean(java.lang.Class<T>, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public final <T> void registerBean(java.lang.Class<T>, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContext.registerBean(java.lang.String, java.lang.Class<T>, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public <T> void registerBean(java.lang.String, java.lang.Class<T>, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "org.springframework.context.support.StaticApplicationContext",
            "org.springframework.context.support.StaticApplicationContext()",
            "public org.springframework.context.support.StaticApplicationContext() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.StaticApplicationContext",
            "org.springframework.context.support.StaticApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.StaticApplicationContext(org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.StaticMessageSource",
            "org.springframework.context.support.StaticApplicationContext.getStaticMessageSource()",
            "public final org.springframework.context.support.StaticMessageSource getStaticMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.StaticApplicationContext.registerSingleton(java.lang.String, java.lang.Class<?>)",
            "public void registerSingleton(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.context.support.StaticApplicationContext.registerSingleton(java.lang.String, java.lang.Class<?>, org.springframework.beans.MutablePropertyValues)",
            "public void registerSingleton(java.lang.String, java.lang.Class<?>, org.springframework.beans.MutablePropertyValues) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.context.support.StaticApplicationContext.registerPrototype(java.lang.String, java.lang.Class<?>)",
            "public void registerPrototype(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.context.support.StaticApplicationContext.registerPrototype(java.lang.String, java.lang.Class<?>, org.springframework.beans.MutablePropertyValues)",
            "public void registerPrototype(java.lang.String, java.lang.Class<?>, org.springframework.beans.MutablePropertyValues) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.context.support.StaticApplicationContext.addMessage(java.lang.String, java.util.Locale, java.lang.String)",
            "public void addMessage(java.lang.String, java.util.Locale, java.lang.String)"
        ],
        [
            "org.springframework.context.support.MessageSourceResourceBundle",
            "org.springframework.context.support.MessageSourceResourceBundle(org.springframework.context.MessageSource, java.util.Locale)",
            "public org.springframework.context.support.MessageSourceResourceBundle(org.springframework.context.MessageSource, java.util.Locale)"
        ],
        [
            "org.springframework.context.support.MessageSourceResourceBundle",
            "org.springframework.context.support.MessageSourceResourceBundle(org.springframework.context.MessageSource, java.util.Locale, java.util.ResourceBundle)",
            "public org.springframework.context.support.MessageSourceResourceBundle(org.springframework.context.MessageSource, java.util.Locale, java.util.ResourceBundle)"
        ],
        [
            "boolean",
            "org.springframework.context.support.MessageSourceResourceBundle.containsKey(java.lang.String)",
            "public boolean containsKey(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.context.support.MessageSourceResourceBundle.getKeys()",
            "public java.util.Enumeration<java.lang.String> getKeys()"
        ],
        [
            "java.util.Locale",
            "org.springframework.context.support.MessageSourceResourceBundle.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "org.springframework.context.support.AbstractRefreshableApplicationContext",
            "org.springframework.context.support.AbstractRefreshableApplicationContext()",
            "public org.springframework.context.support.AbstractRefreshableApplicationContext()"
        ],
        [
            "org.springframework.context.support.AbstractRefreshableApplicationContext",
            "org.springframework.context.support.AbstractRefreshableApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.AbstractRefreshableApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractRefreshableApplicationContext.setAllowBeanDefinitionOverriding(boolean)",
            "public void setAllowBeanDefinitionOverriding(boolean)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractRefreshableApplicationContext.setAllowCircularReferences(boolean)",
            "public void setAllowCircularReferences(boolean)"
        ],
        [
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
            "org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory()",
            "public final org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()"
        ],
        [
            "org.springframework.context.support.ContextTypeMatchClassLoader",
            "org.springframework.context.support.ContextTypeMatchClassLoader(java.lang.ClassLoader)",
            "public org.springframework.context.support.ContextTypeMatchClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.support.ContextTypeMatchClassLoader.loadClass(java.lang.String)",
            "public java.lang.Class<?> loadClass(java.lang.String) throws java.lang.ClassNotFoundException"
        ],
        [
            "boolean",
            "org.springframework.context.support.ContextTypeMatchClassLoader.isClassReloadable(java.lang.Class<?>)",
            "public boolean isClassReloadable(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.support.ContextTypeMatchClassLoader.publicDefineClass(java.lang.String, byte[], java.security.ProtectionDomain)",
            "public java.lang.Class<?> publicDefineClass(java.lang.String, byte[], java.security.ProtectionDomain)"
        ],
        [
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.context.support.MessageSourceAccessor(org.springframework.context.MessageSource)",
            "public org.springframework.context.support.MessageSourceAccessor(org.springframework.context.MessageSource)"
        ],
        [
            "org.springframework.context.support.MessageSourceAccessor",
            "org.springframework.context.support.MessageSourceAccessor(org.springframework.context.MessageSource, java.util.Locale)",
            "public org.springframework.context.support.MessageSourceAccessor(org.springframework.context.MessageSource, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String, java.lang.String)",
            "public java.lang.String getMessage(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String, java.lang.String, java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String, java.lang.Object[], java.lang.String)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String)",
            "public java.lang.String getMessage(java.lang.String) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String, java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String, java.lang.Object[])",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[]) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(java.lang.String, java.lang.Object[], java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(org.springframework.context.MessageSourceResolvable)",
            "public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.MessageSourceAccessor.getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)",
            "public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "org.springframework.context.support.ApplicationListenerDetector",
            "org.springframework.context.support.ApplicationListenerDetector(org.springframework.context.support.AbstractApplicationContext)",
            "public org.springframework.context.support.ApplicationListenerDetector(org.springframework.context.support.AbstractApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.ApplicationListenerDetector.postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)",
            "public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.ApplicationListenerDetector.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(java.lang.Object, java.lang.String)",
            "public void postProcessBeforeDestruction(java.lang.Object, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.context.support.ApplicationListenerDetector.requiresDestruction(java.lang.Object)",
            "public boolean requiresDestruction(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.context.support.ApplicationListenerDetector.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.support.ApplicationListenerDetector.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.context.support.GenericXmlApplicationContext",
            "org.springframework.context.support.GenericXmlApplicationContext()",
            "public org.springframework.context.support.GenericXmlApplicationContext()"
        ],
        [
            "org.springframework.context.support.GenericXmlApplicationContext",
            "org.springframework.context.support.GenericXmlApplicationContext(org.springframework.core.io.Resource...)",
            "public org.springframework.context.support.GenericXmlApplicationContext(org.springframework.core.io.Resource...)"
        ],
        [
            "org.springframework.context.support.GenericXmlApplicationContext",
            "org.springframework.context.support.GenericXmlApplicationContext(java.lang.String...)",
            "public org.springframework.context.support.GenericXmlApplicationContext(java.lang.String...)"
        ],
        [
            "org.springframework.context.support.GenericXmlApplicationContext",
            "org.springframework.context.support.GenericXmlApplicationContext(java.lang.Class<?>, java.lang.String...)",
            "public org.springframework.context.support.GenericXmlApplicationContext(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "org.springframework.beans.factory.xml.XmlBeanDefinitionReader",
            "org.springframework.context.support.GenericXmlApplicationContext.getReader()",
            "public final org.springframework.beans.factory.xml.XmlBeanDefinitionReader getReader()"
        ],
        [
            "void",
            "org.springframework.context.support.GenericXmlApplicationContext.setValidating(boolean)",
            "public void setValidating(boolean)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericXmlApplicationContext.setEnvironment(org.springframework.core.env.ConfigurableEnvironment)",
            "public void setEnvironment(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericXmlApplicationContext.load(org.springframework.core.io.Resource...)",
            "public void load(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericXmlApplicationContext.load(java.lang.String...)",
            "public void load(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericXmlApplicationContext.load(java.lang.Class<?>, java.lang.String...)",
            "public void load(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext()",
            "public org.springframework.context.support.ClassPathXmlApplicationContext()"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String...)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String...) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], boolean)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], boolean, org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], boolean, org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String, java.lang.Class<?>)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], java.lang.Class<?>)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], java.lang.Class<?>) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ClassPathXmlApplicationContext",
            "org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], java.lang.Class<?>, org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.ClassPathXmlApplicationContext(java.lang.String[], java.lang.Class<?>, org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.GenericGroovyApplicationContext",
            "org.springframework.context.support.GenericGroovyApplicationContext()",
            "public org.springframework.context.support.GenericGroovyApplicationContext()"
        ],
        [
            "org.springframework.context.support.GenericGroovyApplicationContext",
            "org.springframework.context.support.GenericGroovyApplicationContext(org.springframework.core.io.Resource...)",
            "public org.springframework.context.support.GenericGroovyApplicationContext(org.springframework.core.io.Resource...)"
        ],
        [
            "org.springframework.context.support.GenericGroovyApplicationContext",
            "org.springframework.context.support.GenericGroovyApplicationContext(java.lang.String...)",
            "public org.springframework.context.support.GenericGroovyApplicationContext(java.lang.String...)"
        ],
        [
            "org.springframework.context.support.GenericGroovyApplicationContext",
            "org.springframework.context.support.GenericGroovyApplicationContext(java.lang.Class<?>, java.lang.String...)",
            "public org.springframework.context.support.GenericGroovyApplicationContext(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader",
            "org.springframework.context.support.GenericGroovyApplicationContext.getReader()",
            "public final org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader getReader()"
        ],
        [
            "void",
            "org.springframework.context.support.GenericGroovyApplicationContext.setEnvironment(org.springframework.core.env.ConfigurableEnvironment)",
            "public void setEnvironment(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericGroovyApplicationContext.load(org.springframework.core.io.Resource...)",
            "public void load(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericGroovyApplicationContext.load(java.lang.String...)",
            "public void load(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericGroovyApplicationContext.load(java.lang.Class<?>, java.lang.String...)",
            "public void load(java.lang.Class<?>, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericGroovyApplicationContext.setMetaClass(groovy.lang.MetaClass)",
            "public void setMetaClass(groovy.lang.MetaClass)"
        ],
        [
            "groovy.lang.MetaClass",
            "org.springframework.context.support.GenericGroovyApplicationContext.getMetaClass()",
            "public groovy.lang.MetaClass getMetaClass()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.GenericGroovyApplicationContext.invokeMethod(java.lang.String, java.lang.Object)",
            "public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.context.support.GenericGroovyApplicationContext.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.GenericGroovyApplicationContext.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.context.support.DefaultLifecycleProcessor",
            "org.springframework.context.support.DefaultLifecycleProcessor()",
            "public org.springframework.context.support.DefaultLifecycleProcessor()"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor.setTimeoutPerShutdownPhase(long)",
            "public void setTimeoutPerShutdownPhase(long)"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor.stop()",
            "public void stop()"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor.onRefresh()",
            "public void onRefresh()"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor.onClose()",
            "public void onClose()"
        ],
        [
            "boolean",
            "org.springframework.context.support.DefaultLifecycleProcessor.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "org.springframework.context.support.MessageSourceSupport",
            "org.springframework.context.support.MessageSourceSupport()",
            "public org.springframework.context.support.MessageSourceSupport()"
        ],
        [
            "void",
            "org.springframework.context.support.MessageSourceSupport.setAlwaysUseMessageFormat(boolean)",
            "public void setAlwaysUseMessageFormat(boolean)"
        ],
        [
            "org.springframework.context.support.AbstractMessageSource",
            "org.springframework.context.support.AbstractMessageSource()",
            "public org.springframework.context.support.AbstractMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractMessageSource.setParentMessageSource(org.springframework.context.MessageSource)",
            "public void setParentMessageSource(org.springframework.context.MessageSource)"
        ],
        [
            "org.springframework.context.MessageSource",
            "org.springframework.context.support.AbstractMessageSource.getParentMessageSource()",
            "public org.springframework.context.MessageSource getParentMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractMessageSource.setCommonMessages(java.util.Properties)",
            "public void setCommonMessages(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractMessageSource.setUseCodeAsDefaultMessage(boolean)",
            "public void setUseCodeAsDefaultMessage(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractMessageSource.getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)",
            "public final java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractMessageSource.getMessage(java.lang.String, java.lang.Object[], java.util.Locale)",
            "public final java.lang.String getMessage(java.lang.String, java.lang.Object[], java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractMessageSource.getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)",
            "public final java.lang.String getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "org.springframework.context.support.SimpleThreadScope",
            "org.springframework.context.support.SimpleThreadScope()",
            "public org.springframework.context.support.SimpleThreadScope()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.SimpleThreadScope.get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)",
            "public java.lang.Object get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.SimpleThreadScope.remove(java.lang.String)",
            "public java.lang.Object remove(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.SimpleThreadScope.registerDestructionCallback(java.lang.String, java.lang.Runnable)",
            "public void registerDestructionCallback(java.lang.String, java.lang.Runnable)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.SimpleThreadScope.resolveContextualObject(java.lang.String)",
            "public java.lang.Object resolveContextualObject(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.SimpleThreadScope.getConversationId()",
            "public java.lang.String getConversationId()"
        ],
        [
            "org.springframework.context.support.StaticMessageSource$MessageHolder",
            "org.springframework.context.support.StaticMessageSource$MessageHolder(org.springframework.context.support.StaticMessageSource, java.lang.String, java.util.Locale)",
            "public org.springframework.context.support.StaticMessageSource$MessageHolder(org.springframework.context.support.StaticMessageSource, java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.StaticMessageSource$MessageHolder.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.text.MessageFormat",
            "org.springframework.context.support.StaticMessageSource$MessageHolder.getMessageFormat()",
            "public java.text.MessageFormat getMessageFormat()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.StaticMessageSource$MessageHolder.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.support.AbstractResourceBasedMessageSource",
            "org.springframework.context.support.AbstractResourceBasedMessageSource()",
            "public org.springframework.context.support.AbstractResourceBasedMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.setBasename(java.lang.String)",
            "public void setBasename(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.setBasenames(java.lang.String...)",
            "public void setBasenames(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.addBasenames(java.lang.String...)",
            "public void addBasenames(java.lang.String...)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.getBasenameSet()",
            "public java.util.Set<java.lang.String> getBasenameSet()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.setDefaultEncoding(java.lang.String)",
            "public void setDefaultEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.setFallbackToSystemLocale(boolean)",
            "public void setFallbackToSystemLocale(boolean)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.setDefaultLocale(java.util.Locale)",
            "public void setDefaultLocale(java.util.Locale)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.setCacheSeconds(int)",
            "public void setCacheSeconds(int)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractResourceBasedMessageSource.setCacheMillis(long)",
            "public void setCacheMillis(long)"
        ],
        [
            "org.springframework.context.support.ConversionServiceFactoryBean",
            "org.springframework.context.support.ConversionServiceFactoryBean()",
            "public org.springframework.context.support.ConversionServiceFactoryBean()"
        ],
        [
            "void",
            "org.springframework.context.support.ConversionServiceFactoryBean.setConverters(java.util.Set<?>)",
            "public void setConverters(java.util.Set<?>)"
        ],
        [
            "void",
            "org.springframework.context.support.ConversionServiceFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.context.support.ConversionServiceFactoryBean.getObject()",
            "public org.springframework.core.convert.ConversionService getObject()"
        ],
        [
            "java.lang.Class<? extends org.springframework.core.convert.ConversionService>",
            "org.springframework.context.support.ConversionServiceFactoryBean.getObjectType()",
            "public java.lang.Class<? extends org.springframework.core.convert.ConversionService> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.context.support.ConversionServiceFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.ConversionServiceFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer",
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer()",
            "public org.springframework.context.support.PropertySourcesPlaceholderConfigurer()"
        ],
        [
            "void",
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer.setPropertySources(org.springframework.core.env.PropertySources)",
            "public void setPropertySources(org.springframework.core.env.PropertySources)"
        ],
        [
            "void",
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer.setEnvironment(org.springframework.core.env.Environment)",
            "public void setEnvironment(org.springframework.core.env.Environment)"
        ],
        [
            "void",
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.core.env.PropertySources",
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer.getAppliedPropertySources()",
            "public org.springframework.core.env.PropertySources getAppliedPropertySources() throws java.lang.IllegalStateException"
        ],
        [
            "org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker",
            "org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, int)",
            "public org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.context.support.AbstractXmlApplicationContext",
            "org.springframework.context.support.AbstractXmlApplicationContext()",
            "public org.springframework.context.support.AbstractXmlApplicationContext()"
        ],
        [
            "org.springframework.context.support.AbstractXmlApplicationContext",
            "org.springframework.context.support.AbstractXmlApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.AbstractXmlApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractXmlApplicationContext.setValidating(boolean)",
            "public void setValidating(boolean)"
        ],
        [
            "java.util.ResourceBundle",
            "org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl.newBundle(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, boolean)",
            "public java.util.ResourceBundle newBundle(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, boolean) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.io.IOException"
        ],
        [
            "java.util.Locale",
            "org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl.getFallbackLocale(java.lang.String, java.util.Locale)",
            "public java.util.Locale getFallbackLocale(java.lang.String, java.util.Locale)"
        ],
        [
            "long",
            "org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl.getTimeToLive(java.lang.String, java.util.Locale)",
            "public long getTimeToLive(java.lang.String, java.util.Locale)"
        ],
        [
            "boolean",
            "org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl.needsReload(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, java.util.ResourceBundle, long)",
            "public boolean needsReload(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, java.util.ResourceBundle, long)"
        ],
        [
            "org.springframework.context.support.ResourceBundleMessageSource",
            "org.springframework.context.support.ResourceBundleMessageSource()",
            "public org.springframework.context.support.ResourceBundleMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.ResourceBundleMessageSource.setBundleClassLoader(java.lang.ClassLoader)",
            "public void setBundleClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.context.support.ResourceBundleMessageSource.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.ResourceBundleMessageSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.support.LiveBeansView",
            "org.springframework.context.support.LiveBeansView()",
            "public org.springframework.context.support.LiveBeansView()"
        ],
        [
            "void",
            "org.springframework.context.support.LiveBeansView.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.LiveBeansView.getSnapshotAsJson()",
            "public java.lang.String getSnapshotAsJson()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext$1.run()",
            "public void run()"
        ],
        [
            "org.springframework.context.support.EmbeddedValueResolutionSupport",
            "org.springframework.context.support.EmbeddedValueResolutionSupport()",
            "public org.springframework.context.support.EmbeddedValueResolutionSupport()"
        ],
        [
            "void",
            "org.springframework.context.support.EmbeddedValueResolutionSupport.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "org.springframework.context.support.ReloadableResourceBundleMessageSource",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource()",
            "public org.springframework.context.support.ReloadableResourceBundleMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource.setFileEncodings(java.util.Properties)",
            "public void setFileEncodings(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource.setConcurrentRefresh(boolean)",
            "public void setConcurrentRefresh(boolean)"
        ],
        [
            "void",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource.setPropertiesPersister(org.springframework.util.PropertiesPersister)",
            "public void setPropertiesPersister(org.springframework.util.PropertiesPersister)"
        ],
        [
            "void",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "void",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource.clearCache()",
            "public void clearCache()"
        ],
        [
            "void",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource.clearCacheIncludingAncestors()",
            "public void clearCacheIncludingAncestors()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.ReloadableResourceBundleMessageSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.support.DefaultMessageSourceResolvable",
            "org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String)",
            "public org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String)"
        ],
        [
            "org.springframework.context.support.DefaultMessageSourceResolvable",
            "org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[])",
            "public org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[])"
        ],
        [
            "org.springframework.context.support.DefaultMessageSourceResolvable",
            "org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[], java.lang.String)",
            "public org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[], java.lang.String)"
        ],
        [
            "org.springframework.context.support.DefaultMessageSourceResolvable",
            "org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[], java.lang.Object[])",
            "public org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[], java.lang.Object[])"
        ],
        [
            "org.springframework.context.support.DefaultMessageSourceResolvable",
            "org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[], java.lang.Object[], java.lang.String)",
            "public org.springframework.context.support.DefaultMessageSourceResolvable(java.lang.String[], java.lang.Object[], java.lang.String)"
        ],
        [
            "org.springframework.context.support.DefaultMessageSourceResolvable",
            "org.springframework.context.support.DefaultMessageSourceResolvable(org.springframework.context.MessageSourceResolvable)",
            "public org.springframework.context.support.DefaultMessageSourceResolvable(org.springframework.context.MessageSourceResolvable)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.DefaultMessageSourceResolvable.getCode()",
            "public java.lang.String getCode()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.DefaultMessageSourceResolvable.getCodes()",
            "public java.lang.String[] getCodes()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.context.support.DefaultMessageSourceResolvable.getArguments()",
            "public java.lang.Object[] getArguments()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.DefaultMessageSourceResolvable.getDefaultMessage()",
            "public java.lang.String getDefaultMessage()"
        ],
        [
            "boolean",
            "org.springframework.context.support.DefaultMessageSourceResolvable.shouldRenderDefaultMessage()",
            "public boolean shouldRenderDefaultMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.DefaultMessageSourceResolvable.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.context.support.DefaultMessageSourceResolvable.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.support.DefaultMessageSourceResolvable.hashCode()",
            "public int hashCode()"
        ],
        [
            "int",
            "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember.compareTo(org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember)",
            "public int compareTo(org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember)"
        ],
        [
            "int",
            "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroupMember.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.context.support.StaticMessageSource",
            "org.springframework.context.support.StaticMessageSource()",
            "public org.springframework.context.support.StaticMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.StaticMessageSource.addMessage(java.lang.String, java.util.Locale, java.lang.String)",
            "public void addMessage(java.lang.String, java.util.Locale, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.StaticMessageSource.addMessages(java.util.Map<java.lang.String, java.lang.String>, java.util.Locale)",
            "public void addMessages(java.util.Map<java.lang.String, java.lang.String>, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.StaticMessageSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.support.DelegatingMessageSource",
            "org.springframework.context.support.DelegatingMessageSource()",
            "public org.springframework.context.support.DelegatingMessageSource()"
        ],
        [
            "void",
            "org.springframework.context.support.DelegatingMessageSource.setParentMessageSource(org.springframework.context.MessageSource)",
            "public void setParentMessageSource(org.springframework.context.MessageSource)"
        ],
        [
            "org.springframework.context.MessageSource",
            "org.springframework.context.support.DelegatingMessageSource.getParentMessageSource()",
            "public org.springframework.context.MessageSource getParentMessageSource()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.DelegatingMessageSource.getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.DelegatingMessageSource.getMessage(java.lang.String, java.lang.Object[], java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.DelegatingMessageSource.getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)",
            "public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.DelegatingMessageSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext()",
            "public org.springframework.context.support.AbstractRefreshableConfigApplicationContext()"
        ],
        [
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.AbstractRefreshableConfigApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext.setConfigLocation(java.lang.String)",
            "public void setConfigLocation(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext.setConfigLocations(java.lang.String...)",
            "public void setConfigLocations(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext.setId(java.lang.String)",
            "public void setId(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup",
            "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup(int, long, java.util.Map<java.lang.String, ? extends org.springframework.context.Lifecycle>, boolean)",
            "public org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup(int, long, java.util.Map<java.lang.String, ? extends org.springframework.context.Lifecycle>, boolean)"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.add(java.lang.String, org.springframework.context.Lifecycle)",
            "public void add(java.lang.String, org.springframework.context.Lifecycle)"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.stop()",
            "public void stop()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer$1.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.PropertySourcesPlaceholderConfigurer$1.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader",
            "org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader(org.springframework.context.support.ContextTypeMatchClassLoader, java.lang.ClassLoader)",
            "public org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader(org.springframework.context.support.ContextTypeMatchClassLoader, java.lang.ClassLoader)"
        ],
        [
            "org.springframework.context.support.AbstractApplicationContext",
            "org.springframework.context.support.AbstractApplicationContext()",
            "public org.springframework.context.support.AbstractApplicationContext()"
        ],
        [
            "org.springframework.context.support.AbstractApplicationContext",
            "org.springframework.context.support.AbstractApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.AbstractApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.setId(java.lang.String)",
            "public void setId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractApplicationContext.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractApplicationContext.getApplicationName()",
            "public java.lang.String getApplicationName()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.setDisplayName(java.lang.String)",
            "public void setDisplayName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractApplicationContext.getDisplayName()",
            "public java.lang.String getDisplayName()"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.context.support.AbstractApplicationContext.getParent()",
            "public org.springframework.context.ApplicationContext getParent()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.setEnvironment(org.springframework.core.env.ConfigurableEnvironment)",
            "public void setEnvironment(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "org.springframework.core.env.ConfigurableEnvironment",
            "org.springframework.context.support.AbstractApplicationContext.getEnvironment()",
            "public org.springframework.core.env.ConfigurableEnvironment getEnvironment()"
        ],
        [
            "org.springframework.beans.factory.config.AutowireCapableBeanFactory",
            "org.springframework.context.support.AbstractApplicationContext.getAutowireCapableBeanFactory()",
            "public org.springframework.beans.factory.config.AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws java.lang.IllegalStateException"
        ],
        [
            "long",
            "org.springframework.context.support.AbstractApplicationContext.getStartupDate()",
            "public long getStartupDate()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.publishEvent(org.springframework.context.ApplicationEvent)",
            "public void publishEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.publishEvent(java.lang.Object)",
            "public void publishEvent(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)",
            "public void setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)"
        ],
        [
            "org.springframework.core.metrics.ApplicationStartup",
            "org.springframework.context.support.AbstractApplicationContext.getApplicationStartup()",
            "public org.springframework.core.metrics.ApplicationStartup getApplicationStartup()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.setParent(org.springframework.context.ApplicationContext)",
            "public void setParent(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.addBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)",
            "public void addBeanFactoryPostProcessor(org.springframework.beans.factory.config.BeanFactoryPostProcessor)"
        ],
        [
            "java.util.List<org.springframework.beans.factory.config.BeanFactoryPostProcessor>",
            "org.springframework.context.support.AbstractApplicationContext.getBeanFactoryPostProcessors()",
            "public java.util.List<org.springframework.beans.factory.config.BeanFactoryPostProcessor> getBeanFactoryPostProcessors()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.addApplicationListener(org.springframework.context.ApplicationListener<?>)",
            "public void addApplicationListener(org.springframework.context.ApplicationListener<?>)"
        ],
        [
            "java.util.Collection<org.springframework.context.ApplicationListener<?>>",
            "org.springframework.context.support.AbstractApplicationContext.getApplicationListeners()",
            "public java.util.Collection<org.springframework.context.ApplicationListener<?>> getApplicationListeners()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.refresh()",
            "public void refresh() throws org.springframework.beans.BeansException, java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.registerShutdownHook()",
            "public void registerShutdownHook()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.close()",
            "public void close()"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.isActive()",
            "public boolean isActive()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.AbstractApplicationContext.getBean(java.lang.String)",
            "public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.context.support.AbstractApplicationContext.getBean(java.lang.String, java.lang.Class<T>)",
            "public <T> T getBean(java.lang.String, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.AbstractApplicationContext.getBean(java.lang.String, java.lang.Object...)",
            "public java.lang.Object getBean(java.lang.String, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.context.support.AbstractApplicationContext.getBean(java.lang.Class<T>)",
            "public <T> T getBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.context.support.AbstractApplicationContext.getBean(java.lang.Class<T>, java.lang.Object...)",
            "public <T> T getBean(java.lang.Class<T>, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.context.support.AbstractApplicationContext.getBeanProvider(java.lang.Class<T>)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.context.support.AbstractApplicationContext.getBeanProvider(org.springframework.core.ResolvableType)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.containsBean(java.lang.String)",
            "public boolean containsBean(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.isSingleton(java.lang.String)",
            "public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.isPrototype(java.lang.String)",
            "public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.isTypeMatch(java.lang.String, org.springframework.core.ResolvableType)",
            "public boolean isTypeMatch(java.lang.String, org.springframework.core.ResolvableType) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.isTypeMatch(java.lang.String, java.lang.Class<?>)",
            "public boolean isTypeMatch(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.support.AbstractApplicationContext.getType(java.lang.String)",
            "public java.lang.Class<?> getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.support.AbstractApplicationContext.getType(java.lang.String, boolean)",
            "public java.lang.Class<?> getType(java.lang.String, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.AbstractApplicationContext.getAliases(java.lang.String)",
            "public java.lang.String[] getAliases(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.containsBeanDefinition(java.lang.String)",
            "public boolean containsBeanDefinition(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.context.support.AbstractApplicationContext.getBeanDefinitionCount()",
            "public int getBeanDefinitionCount()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.AbstractApplicationContext.getBeanDefinitionNames()",
            "public java.lang.String[] getBeanDefinitionNames()"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.context.support.AbstractApplicationContext.getBeanProvider(java.lang.Class<T>, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>, boolean)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.context.support.AbstractApplicationContext.getBeanProvider(org.springframework.core.ResolvableType, boolean)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(org.springframework.core.ResolvableType)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(org.springframework.core.ResolvableType, boolean, boolean)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(java.lang.Class<?>)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(java.lang.Class<?>, boolean, boolean)",
            "public java.lang.String[] getBeanNamesForType(java.lang.Class<?>, boolean, boolean)"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.context.support.AbstractApplicationContext.getBeansOfType(java.lang.Class<T>)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> java.util.Map<java.lang.String, T>",
            "org.springframework.context.support.AbstractApplicationContext.getBeansOfType(java.lang.Class<T>, boolean, boolean)",
            "public <T> java.util.Map<java.lang.String, T> getBeansOfType(java.lang.Class<T>, boolean, boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.support.AbstractApplicationContext.getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.lang.String[] getBeanNamesForAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.context.support.AbstractApplicationContext.getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public java.util.Map<java.lang.String, java.lang.Object> getBeansWithAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>) throws org.springframework.beans.BeansException"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.context.support.AbstractApplicationContext.findAnnotationOnBean(java.lang.String, java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.context.support.AbstractApplicationContext.findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean)",
            "public <A extends java.lang.annotation.Annotation> A findAnnotationOnBean(java.lang.String, java.lang.Class<A>, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "org.springframework.beans.factory.BeanFactory",
            "org.springframework.context.support.AbstractApplicationContext.getParentBeanFactory()",
            "public org.springframework.beans.factory.BeanFactory getParentBeanFactory()"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.containsLocalBean(java.lang.String)",
            "public boolean containsLocalBean(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractApplicationContext.getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractApplicationContext.getMessage(java.lang.String, java.lang.Object[], java.util.Locale)",
            "public java.lang.String getMessage(java.lang.String, java.lang.Object[], java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractApplicationContext.getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale)",
            "public java.lang.String getMessage(org.springframework.context.MessageSourceResolvable, java.util.Locale) throws org.springframework.context.NoSuchMessageException"
        ],
        [
            "org.springframework.core.io.Resource[]",
            "org.springframework.context.support.AbstractApplicationContext.getResources(java.lang.String)",
            "public org.springframework.core.io.Resource[] getResources(java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.context.support.AbstractApplicationContext.stop()",
            "public void stop()"
        ],
        [
            "boolean",
            "org.springframework.context.support.AbstractApplicationContext.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.AbstractApplicationContext.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.core.env.Environment",
            "org.springframework.context.support.AbstractApplicationContext.getEnvironment()",
            "public org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "org.springframework.context.support.FileSystemXmlApplicationContext",
            "org.springframework.context.support.FileSystemXmlApplicationContext()",
            "public org.springframework.context.support.FileSystemXmlApplicationContext()"
        ],
        [
            "org.springframework.context.support.FileSystemXmlApplicationContext",
            "org.springframework.context.support.FileSystemXmlApplicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.FileSystemXmlApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.support.FileSystemXmlApplicationContext",
            "org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String)",
            "public org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.FileSystemXmlApplicationContext",
            "org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String...)",
            "public org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String...) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.FileSystemXmlApplicationContext",
            "org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String[], org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String[], org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.FileSystemXmlApplicationContext",
            "org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String[], boolean)",
            "public org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String[], boolean) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.FileSystemXmlApplicationContext",
            "org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String[], boolean, org.springframework.context.ApplicationContext)",
            "public org.springframework.context.support.FileSystemXmlApplicationContext(java.lang.String[], boolean, org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.support.ApplicationContextAwareProcessor",
            "org.springframework.context.support.ApplicationContextAwareProcessor(org.springframework.context.ConfigurableApplicationContext)",
            "public org.springframework.context.support.ApplicationContextAwareProcessor(org.springframework.context.ConfigurableApplicationContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List<org.springframework.beans.factory.config.BeanFactoryPostProcessor>)",
            "public static void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List<org.springframework.beans.factory.config.BeanFactoryPostProcessor>)"
        ],
        [
            "void",
            "org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, org.springframework.context.support.AbstractApplicationContext)",
            "public static void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, org.springframework.context.support.AbstractApplicationContext)"
        ],
        [
            "org.springframework.context.support.ApplicationObjectSupport",
            "org.springframework.context.support.ApplicationObjectSupport()",
            "public org.springframework.context.support.ApplicationObjectSupport()"
        ],
        [
            "void",
            "org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public final void setApplicationContext(org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.context.support.ApplicationObjectSupport.getApplicationContext()",
            "public final org.springframework.context.ApplicationContext getApplicationContext() throws java.lang.IllegalStateException"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition",
            "org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition(java.lang.Class<?>)",
            "public org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition(java.lang.Class<?>)"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition",
            "org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition(org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition)",
            "public org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition(org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition)"
        ],
        [
            "java.lang.reflect.Constructor<?>[]",
            "org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition.getPreferredConstructors()",
            "public java.lang.reflect.Constructor<?>[] getPreferredConstructors()"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.RootBeanDefinition cloneBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.context.support.GenericApplicationContext$ClassDerivedBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()"
        ],
        [
            "org.springframework.context.ApplicationEvent",
            "org.springframework.context.ApplicationEvent(java.lang.Object)",
            "public org.springframework.context.ApplicationEvent(java.lang.Object)"
        ],
        [
            "org.springframework.context.ApplicationEvent",
            "org.springframework.context.ApplicationEvent(java.lang.Object, java.time.Clock)",
            "public org.springframework.context.ApplicationEvent(java.lang.Object, java.time.Clock)"
        ],
        [
            "long",
            "org.springframework.context.ApplicationEvent.getTimestamp()",
            "public final long getTimestamp()"
        ],
        [
            "org.springframework.context.annotation.ScannedGenericBeanDefinition",
            "org.springframework.context.annotation.ScannedGenericBeanDefinition(org.springframework.core.type.classreading.MetadataReader)",
            "public org.springframework.context.annotation.ScannedGenericBeanDefinition(org.springframework.core.type.classreading.MetadataReader)"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.context.annotation.ScannedGenericBeanDefinition.getMetadata()",
            "public final org.springframework.core.type.AnnotationMetadata getMetadata()"
        ],
        [
            "org.springframework.core.type.MethodMetadata",
            "org.springframework.context.annotation.ScannedGenericBeanDefinition.getFactoryMethodMetadata()",
            "public org.springframework.core.type.MethodMetadata getFactoryMethodMetadata()"
        ],
        [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$WebServiceRefElement",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$WebServiceRefElement(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor, java.lang.reflect.Member, java.lang.reflect.AnnotatedElement, java.beans.PropertyDescriptor)",
            "public org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$WebServiceRefElement(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor, java.lang.reflect.Member, java.lang.reflect.AnnotatedElement, java.beans.PropertyDescriptor)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(java.util.Set<org.springframework.context.annotation.ConfigurationClass>)",
            "public void loadBeanDefinitions(java.util.Set<org.springframework.context.annotation.ConfigurationClass>)"
        ],
        [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement(java.lang.reflect.Member, java.beans.PropertyDescriptor)",
            "public org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement(java.lang.reflect.Member, java.beans.PropertyDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement.getName()",
            "public final java.lang.String getName()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement.getLookupType()",
            "public final java.lang.Class<?> getLookupType()"
        ],
        [
            "org.springframework.beans.factory.config.DependencyDescriptor",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement.getDependencyDescriptor()",
            "public final org.springframework.beans.factory.config.DependencyDescriptor getDependencyDescriptor()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassPostProcessor",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor()",
            "public org.springframework.context.annotation.ConfigurationClassPostProcessor()"
        ],
        [
            "int",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setSourceExtractor(org.springframework.beans.factory.parsing.SourceExtractor)",
            "public void setSourceExtractor(org.springframework.beans.factory.parsing.SourceExtractor)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setProblemReporter(org.springframework.beans.factory.parsing.ProblemReporter)",
            "public void setProblemReporter(org.springframework.beans.factory.parsing.ProblemReporter)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setMetadataReaderFactory(org.springframework.core.type.classreading.MetadataReaderFactory)",
            "public void setMetadataReaderFactory(org.springframework.core.type.classreading.MetadataReaderFactory)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)",
            "public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setEnvironment(org.springframework.core.env.Environment)",
            "public void setEnvironment(org.springframework.core.env.Environment)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)",
            "public void setApplicationStartup(org.springframework.core.metrics.ApplicationStartup)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public void postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public void processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void enhanceConfigurationClasses(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ],
        [
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.context.annotation.AnnotatedBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.core.env.Environment)",
            "public org.springframework.context.annotation.AnnotatedBeanDefinitionReader(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.core.env.Environment)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionRegistry",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.getRegistry()",
            "public final org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.setEnvironment(org.springframework.core.env.Environment)",
            "public void setEnvironment(org.springframework.core.env.Environment)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)",
            "public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)",
            "public void setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.register(java.lang.Class<?>...)",
            "public void register(java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(java.lang.Class<?>)",
            "public void registerBean(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(java.lang.Class<?>, java.lang.String)",
            "public void registerBean(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>...)",
            "public void registerBean(java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>...)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(java.lang.Class<?>, java.lang.String, java.lang.Class<? extends java.lang.annotation.Annotation>...)",
            "public void registerBean(java.lang.Class<?>, java.lang.String, java.lang.Class<? extends java.lang.annotation.Annotation>...)"
        ],
        [
            "<T> void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(java.lang.Class<T>, java.util.function.Supplier<T>)",
            "public <T> void registerBean(java.lang.Class<T>, java.util.function.Supplier<T>)"
        ],
        [
            "<T> void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(java.lang.Class<T>, java.lang.String, java.util.function.Supplier<T>)",
            "public <T> void registerBean(java.lang.Class<T>, java.lang.String, java.util.function.Supplier<T>)"
        ],
        [
            "<T> void",
            "org.springframework.context.annotation.AnnotatedBeanDefinitionReader.registerBean(java.lang.Class<T>, java.lang.String, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public <T> void registerBean(java.lang.Class<T>, java.lang.String, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(java.lang.Class<?>, java.lang.ClassLoader)",
            "public java.lang.Class<?> enhance(java.lang.Class<?>, java.lang.ClassLoader)"
        ],
        [
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform[]",
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform.values()",
            "public static org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform[] values()"
        ],
        [
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform",
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform.valueOf(java.lang.String)",
            "public static org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform valueOf(java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform",
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform.get()",
            "public static org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform get()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGrouping.add(org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder)",
            "public void add(org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder)"
        ],
        [
            "java.lang.Iterable<org.springframework.context.annotation.DeferredImportSelector$Group$Entry>",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGrouping.getImports()",
            "public java.lang.Iterable<org.springframework.context.annotation.DeferredImportSelector$Group$Entry> getImports()"
        ],
        [
            "java.util.function.Predicate<java.lang.String>",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGrouping.getCandidateFilter()",
            "public java.util.function.Predicate<java.lang.String> getCandidateFilter()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor.postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)",
            "public org.springframework.beans.PropertyValues postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.DeferredImportSelector$Group$Entry",
            "org.springframework.context.annotation.DeferredImportSelector$Group$Entry(org.springframework.core.type.AnnotationMetadata, java.lang.String)",
            "public org.springframework.context.annotation.DeferredImportSelector$Group$Entry(org.springframework.core.type.AnnotationMetadata, java.lang.String)"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.context.annotation.DeferredImportSelector$Group$Entry.getMetadata()",
            "public org.springframework.core.type.AnnotationMetadata getMetadata()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.DeferredImportSelector$Group$Entry.getImportClassName()",
            "public java.lang.String getImportClassName()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.DeferredImportSelector$Group$Entry.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.annotation.DeferredImportSelector$Group$Entry.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.DeferredImportSelector$Group$Entry.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase[]",
            "org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase.values()",
            "public static org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase[] values()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase",
            "org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase.valueOf(java.lang.String)",
            "public static org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$DefaultDeferredImportSelectorGroup.process(org.springframework.core.type.AnnotationMetadata, org.springframework.context.annotation.DeferredImportSelector)",
            "public void process(org.springframework.core.type.AnnotationMetadata, org.springframework.context.annotation.DeferredImportSelector)"
        ],
        [
            "java.lang.Iterable<org.springframework.context.annotation.DeferredImportSelector$Group$Entry>",
            "org.springframework.context.annotation.ConfigurationClassParser$DefaultDeferredImportSelectorGroup.selectImports()",
            "public java.lang.Iterable<org.springframework.context.annotation.DeferredImportSelector$Group$Entry> selectImports()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass(org.springframework.context.annotation.ConfigurationClassParser, java.lang.Object)",
            "public org.springframework.context.annotation.ConfigurationClassParser$SourceClass(org.springframework.context.annotation.ConfigurationClassParser, java.lang.Object)"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getMetadata()",
            "public final org.springframework.core.type.AnnotationMetadata getMetadata()"
        ],
        [
            "int",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getOrder()",
            "public int getOrder()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.loadClass()",
            "public java.lang.Class<?> loadClass() throws java.lang.ClassNotFoundException"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.isAssignable(java.lang.Class<?>)",
            "public boolean isAssignable(java.lang.Class<?>) throws java.io.IOException"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClass",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.asConfigClass(org.springframework.context.annotation.ConfigurationClass)",
            "public org.springframework.context.annotation.ConfigurationClass asConfigClass(org.springframework.context.annotation.ConfigurationClass)"
        ],
        [
            "java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser$SourceClass>",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getMemberClasses()",
            "public java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser$SourceClass> getMemberClasses() throws java.io.IOException"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getSuperClass()",
            "public org.springframework.context.annotation.ConfigurationClassParser$SourceClass getSuperClass() throws java.io.IOException"
        ],
        [
            "java.util.Set<org.springframework.context.annotation.ConfigurationClassParser$SourceClass>",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces()",
            "public java.util.Set<org.springframework.context.annotation.ConfigurationClassParser$SourceClass> getInterfaces() throws java.io.IOException"
        ],
        [
            "java.util.Set<org.springframework.context.annotation.ConfigurationClassParser$SourceClass>",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getAnnotations()",
            "public java.util.Set<org.springframework.context.annotation.ConfigurationClassParser$SourceClass> getAnnotations()"
        ],
        [
            "java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser$SourceClass>",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getAnnotationAttributes(java.lang.String, java.lang.String)",
            "public java.util.Collection<org.springframework.context.annotation.ConfigurationClassParser$SourceClass> getAnnotationAttributes(java.lang.String, java.lang.String) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.ConfigurationClassParser$SourceClass.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.annotation.EnableLoadTimeWeaving$AspectJWeaving[]",
            "org.springframework.context.annotation.EnableLoadTimeWeaving$AspectJWeaving.values()",
            "public static org.springframework.context.annotation.EnableLoadTimeWeaving$AspectJWeaving[] values()"
        ],
        [
            "org.springframework.context.annotation.EnableLoadTimeWeaving$AspectJWeaving",
            "org.springframework.context.annotation.EnableLoadTimeWeaving$AspectJWeaving.valueOf(java.lang.String)",
            "public static org.springframework.context.annotation.EnableLoadTimeWeaving$AspectJWeaving valueOf(java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.AutoProxyRegistrar",
            "org.springframework.context.annotation.AutoProxyRegistrar()",
            "public org.springframework.context.annotation.AutoProxyRegistrar()"
        ],
        [
            "void",
            "org.springframework.context.annotation.AutoProxyRegistrar.registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public void registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "org.springframework.context.annotation.ConditionEvaluator",
            "org.springframework.context.annotation.ConditionEvaluator(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader)",
            "public org.springframework.context.annotation.ConditionEvaluator(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConditionEvaluator.shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata)",
            "public boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConditionEvaluator.shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata, org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)",
            "public boolean shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata, org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)"
        ],
        [
            "org.springframework.context.annotation.MBeanExportConfiguration",
            "org.springframework.context.annotation.MBeanExportConfiguration()",
            "public org.springframework.context.annotation.MBeanExportConfiguration()"
        ],
        [
            "void",
            "org.springframework.context.annotation.MBeanExportConfiguration.setImportMetadata(org.springframework.core.type.AnnotationMetadata)",
            "public void setImportMetadata(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "void",
            "org.springframework.context.annotation.MBeanExportConfiguration.setEnvironment(org.springframework.core.env.Environment)",
            "public void setEnvironment(org.springframework.core.env.Environment)"
        ],
        [
            "void",
            "org.springframework.context.annotation.MBeanExportConfiguration.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
            "org.springframework.context.annotation.MBeanExportConfiguration.mbeanExporter()",
            "public org.springframework.jmx.export.annotation.AnnotationMBeanExporter mbeanExporter()"
        ],
        [
            "org.springframework.context.annotation.Jsr330ScopeMetadataResolver",
            "org.springframework.context.annotation.Jsr330ScopeMetadataResolver()",
            "public org.springframework.context.annotation.Jsr330ScopeMetadataResolver()"
        ],
        [
            "void",
            "org.springframework.context.annotation.Jsr330ScopeMetadataResolver.registerScope(java.lang.Class<?>, java.lang.String)",
            "public final void registerScope(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.Jsr330ScopeMetadataResolver.registerScope(java.lang.String, java.lang.String)",
            "public final void registerScope(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.ScopeMetadata",
            "org.springframework.context.annotation.Jsr330ScopeMetadataResolver.resolveScopeMetadata(org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.context.annotation.ScopeMetadata resolveScopeMetadata(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver",
            "org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver()",
            "public org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver.getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)",
            "public java.lang.Object getLazyResolutionProxyIfNecessary(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor, java.lang.reflect.Member, java.lang.reflect.AnnotatedElement, java.beans.PropertyDescriptor)",
            "public org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor, java.lang.reflect.Member, java.lang.reflect.AnnotatedElement, java.beans.PropertyDescriptor)"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition(org.springframework.context.annotation.ConfigurationClass, org.springframework.core.type.MethodMetadata, java.lang.String)",
            "public org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition(org.springframework.context.annotation.ConfigurationClass, org.springframework.core.type.MethodMetadata, java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.context.annotation.ConfigurationClass, org.springframework.core.type.MethodMetadata, java.lang.String)",
            "public org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.context.annotation.ConfigurationClass, org.springframework.core.type.MethodMetadata, java.lang.String)"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition.getMetadata()",
            "public org.springframework.core.type.AnnotationMetadata getMetadata()"
        ],
        [
            "org.springframework.core.type.MethodMetadata",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition.getFactoryMethodMetadata()",
            "public org.springframework.core.type.MethodMetadata getFactoryMethodMetadata()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition.isFactoryMethod(java.lang.reflect.Method)",
            "public boolean isFactoryMethod(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition cloneBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.RootBeanDefinition",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.RootBeanDefinition cloneBeanDefinition()"
        ],
        [
            "org.springframework.beans.factory.support.AbstractBeanDefinition",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition.cloneBeanDefinition()",
            "public org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()"
        ],
        [
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider(boolean)",
            "public org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider(boolean)"
        ],
        [
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider(boolean, org.springframework.core.env.Environment)",
            "public org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider(boolean, org.springframework.core.env.Environment)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.setResourcePattern(java.lang.String)",
            "public void setResourcePattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.addIncludeFilter(org.springframework.core.type.filter.TypeFilter)",
            "public void addIncludeFilter(org.springframework.core.type.filter.TypeFilter)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.addExcludeFilter(org.springframework.core.type.filter.TypeFilter)",
            "public void addExcludeFilter(org.springframework.core.type.filter.TypeFilter)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.resetFilters(boolean)",
            "public void resetFilters(boolean)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.setEnvironment(org.springframework.core.env.Environment)",
            "public void setEnvironment(org.springframework.core.env.Environment)"
        ],
        [
            "org.springframework.core.env.Environment",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.getEnvironment()",
            "public final org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.core.io.ResourceLoader",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.getResourceLoader()",
            "public final org.springframework.core.io.ResourceLoader getResourceLoader()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.setMetadataReaderFactory(org.springframework.core.type.classreading.MetadataReaderFactory)",
            "public void setMetadataReaderFactory(org.springframework.core.type.classreading.MetadataReaderFactory)"
        ],
        [
            "org.springframework.core.type.classreading.MetadataReaderFactory",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.getMetadataReaderFactory()",
            "public final org.springframework.core.type.classreading.MetadataReaderFactory getMetadataReaderFactory()"
        ],
        [
            "java.util.Set<org.springframework.beans.factory.config.BeanDefinition>",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(java.lang.String)",
            "public java.util.Set<org.springframework.beans.factory.config.BeanDefinition> findCandidateComponents(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.clearCache()",
            "public void clearCache()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(org.springframework.context.annotation.ConfigurationClass)",
            "public boolean shouldSkip(org.springframework.context.annotation.ConfigurationClass)"
        ],
        [
            "org.springframework.context.annotation.FilterType[]",
            "org.springframework.context.annotation.FilterType.values()",
            "public static org.springframework.context.annotation.FilterType[] values()"
        ],
        [
            "org.springframework.context.annotation.FilterType",
            "org.springframework.context.annotation.FilterType.valueOf(java.lang.String)",
            "public static org.springframework.context.annotation.FilterType valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.handle(org.springframework.context.annotation.ConfigurationClass, org.springframework.context.annotation.DeferredImportSelector)",
            "public void handle(org.springframework.context.annotation.ConfigurationClass, org.springframework.context.annotation.DeferredImportSelector)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler.process()",
            "public void process()"
        ],
        [
            "org.springframework.context.annotation.AnnotationScopeMetadataResolver",
            "org.springframework.context.annotation.AnnotationScopeMetadataResolver()",
            "public org.springframework.context.annotation.AnnotationScopeMetadataResolver()"
        ],
        [
            "org.springframework.context.annotation.AnnotationScopeMetadataResolver",
            "org.springframework.context.annotation.AnnotationScopeMetadataResolver(org.springframework.context.annotation.ScopedProxyMode)",
            "public org.springframework.context.annotation.AnnotationScopeMetadataResolver(org.springframework.context.annotation.ScopedProxyMode)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationScopeMetadataResolver.setScopeAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setScopeAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.context.annotation.ScopeMetadata",
            "org.springframework.context.annotation.AnnotationScopeMetadataResolver.resolveScopeMetadata(org.springframework.beans.factory.config.BeanDefinition)",
            "public org.springframework.context.annotation.ScopeMetadata resolveScopeMetadata(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.context.annotation.ScopedProxyMode[]",
            "org.springframework.context.annotation.ScopedProxyMode.values()",
            "public static org.springframework.context.annotation.ScopedProxyMode[] values()"
        ],
        [
            "org.springframework.context.annotation.ScopedProxyMode",
            "org.springframework.context.annotation.ScopedProxyMode.valueOf(java.lang.String)",
            "public static org.springframework.context.annotation.ScopedProxyMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassEnhancer$ConditionalCallbackFilter",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$ConditionalCallbackFilter(org.springframework.cglib.proxy.Callback[])",
            "public org.springframework.context.annotation.ConfigurationClassEnhancer$ConditionalCallbackFilter(org.springframework.cglib.proxy.Callback[])"
        ],
        [
            "int",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$ConditionalCallbackFilter.accept(java.lang.reflect.Method)",
            "public int accept(java.lang.reflect.Method)"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$ConditionalCallbackFilter.getCallbackTypes()",
            "public java.lang.Class<?>[] getCallbackTypes()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassParser",
            "org.springframework.context.annotation.ConfigurationClassParser(org.springframework.core.type.classreading.MetadataReaderFactory, org.springframework.beans.factory.parsing.ProblemReporter, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.support.BeanNameGenerator, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.context.annotation.ConfigurationClassParser(org.springframework.core.type.classreading.MetadataReaderFactory, org.springframework.beans.factory.parsing.ProblemReporter, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.support.BeanNameGenerator, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser.parse(java.util.Set<org.springframework.beans.factory.config.BeanDefinitionHolder>)",
            "public void parse(java.util.Set<org.springframework.beans.factory.config.BeanDefinitionHolder>)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser.validate()",
            "public void validate()"
        ],
        [
            "java.util.Set<org.springframework.context.annotation.ConfigurationClass>",
            "org.springframework.context.annotation.ConfigurationClassParser.getConfigurationClasses()",
            "public java.util.Set<org.springframework.context.annotation.ConfigurationClass> getConfigurationClasses()"
        ],
        [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor()",
            "public org.springframework.context.annotation.CommonAnnotationBeanPostProcessor()"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.ignoreResourceType(java.lang.String)",
            "public void ignoreResourceType(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.setFallbackToDefaultTypeMatch(boolean)",
            "public void setFallbackToDefaultTypeMatch(boolean)"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.setAlwaysUseJndiLookup(boolean)",
            "public void setAlwaysUseJndiLookup(boolean)"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.setJndiFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setJndiFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.setResourceFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setResourceFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)",
            "public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.resetBeanDefinition(java.lang.String)",
            "public void resetBeanDefinition(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String)",
            "public java.lang.Object postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessAfterInstantiation(java.lang.Object, java.lang.String)",
            "public boolean postProcessAfterInstantiation(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)",
            "public org.springframework.beans.PropertyValues postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String)",
            "public org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String)"
        ],
        [
            "java.util.function.Predicate<java.lang.String>",
            "org.springframework.context.annotation.ImportSelector.getExclusionFilter()",
            "public default java.util.function.Predicate<java.lang.String> getExclusionFilter()"
        ],
        [
            "org.springframework.context.annotation.ScopeMetadata",
            "org.springframework.context.annotation.ScopeMetadata()",
            "public org.springframework.context.annotation.ScopeMetadata()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ScopeMetadata.setScopeName(java.lang.String)",
            "public void setScopeName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.ScopeMetadata.getScopeName()",
            "public java.lang.String getScopeName()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ScopeMetadata.setScopedProxyMode(org.springframework.context.annotation.ScopedProxyMode)",
            "public void setScopedProxyMode(org.springframework.context.annotation.ScopedProxyMode)"
        ],
        [
            "org.springframework.context.annotation.ScopedProxyMode",
            "org.springframework.context.annotation.ScopeMetadata.getScopedProxyMode()",
            "public org.springframework.context.annotation.ScopedProxyMode getScopedProxyMode()"
        ],
        [
            "org.springframework.context.annotation.AdviceMode[]",
            "org.springframework.context.annotation.AdviceMode.values()",
            "public static org.springframework.context.annotation.AdviceMode[] values()"
        ],
        [
            "org.springframework.context.annotation.AdviceMode",
            "org.springframework.context.annotation.AdviceMode.valueOf(java.lang.String)",
            "public static org.springframework.context.annotation.AdviceMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.ConfigurationMethod",
            "org.springframework.context.annotation.ConfigurationMethod(org.springframework.core.type.MethodMetadata, org.springframework.context.annotation.ConfigurationClass)",
            "public org.springframework.context.annotation.ConfigurationMethod(org.springframework.core.type.MethodMetadata, org.springframework.context.annotation.ConfigurationClass)"
        ],
        [
            "org.springframework.core.type.MethodMetadata",
            "org.springframework.context.annotation.ConfigurationMethod.getMetadata()",
            "public org.springframework.core.type.MethodMetadata getMetadata()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClass",
            "org.springframework.context.annotation.ConfigurationMethod.getConfigurationClass()",
            "public org.springframework.context.annotation.ConfigurationClass getConfigurationClass()"
        ],
        [
            "org.springframework.beans.factory.parsing.Location",
            "org.springframework.context.annotation.ConfigurationMethod.getResourceLocation()",
            "public org.springframework.beans.factory.parsing.Location getResourceLocation()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.ConfigurationMethod.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.annotation.ComponentScanAnnotationParser",
            "org.springframework.context.annotation.ComponentScanAnnotationParser(org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.support.BeanNameGenerator, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.context.annotation.ComponentScanAnnotationParser(org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.support.BeanNameGenerator, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "java.util.Set<org.springframework.beans.factory.config.BeanDefinitionHolder>",
            "org.springframework.context.annotation.ComponentScanAnnotationParser.parse(org.springframework.core.annotation.AnnotationAttributes, java.lang.String)",
            "public java.util.Set<org.springframework.beans.factory.config.BeanDefinitionHolder> parse(org.springframework.core.annotation.AnnotationAttributes, java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$EjbRefElement",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$EjbRefElement(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor, java.lang.reflect.Member, java.lang.reflect.AnnotatedElement, java.beans.PropertyDescriptor)",
            "public org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$EjbRefElement(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor, java.lang.reflect.Member, java.lang.reflect.AnnotatedElement, java.beans.PropertyDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)",
            "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.isMatch(java.lang.reflect.Method)",
            "public boolean isMatch(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.context.annotation.FullyQualifiedAnnotationBeanNameGenerator",
            "org.springframework.context.annotation.FullyQualifiedAnnotationBeanNameGenerator()",
            "public org.springframework.context.annotation.FullyQualifiedAnnotationBeanNameGenerator()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassParser$CircularImportProblem",
            "org.springframework.context.annotation.ConfigurationClassParser$CircularImportProblem(org.springframework.context.annotation.ConfigurationClass, java.util.Deque<org.springframework.context.annotation.ConfigurationClass>)",
            "public org.springframework.context.annotation.ConfigurationClassParser$CircularImportProblem(org.springframework.context.annotation.ConfigurationClass, java.util.Deque<org.springframework.context.annotation.ConfigurationClass>)"
        ],
        [
            "javax.management.MBeanServer",
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$2.getMBeanServer()",
            "public javax.management.MBeanServer getMBeanServer()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.BeanAnnotationHelper.isBeanAnnotated(java.lang.reflect.Method)",
            "public static boolean isBeanAnnotated(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.BeanAnnotationHelper.determineBeanNameFor(java.lang.reflect.Method)",
            "public static java.lang.String determineBeanNameFor(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.BeanAnnotationHelper.isScopedProxy(java.lang.reflect.Method)",
            "public static boolean isScopedProxy(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.context.annotation.ComponentScanBeanDefinitionParser",
            "org.springframework.context.annotation.ComponentScanBeanDefinitionParser()",
            "public org.springframework.context.annotation.ComponentScanBeanDefinitionParser()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.context.annotation.AdviceModeImportSelector",
            "org.springframework.context.annotation.AdviceModeImportSelector()",
            "public org.springframework.context.annotation.AdviceModeImportSelector()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.context.annotation.AdviceModeImportSelector.selectImports(org.springframework.core.type.AnnotationMetadata)",
            "public final java.lang.String[] selectImports(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.ConfigurationClass.getBeanName()",
            "public java.lang.String getBeanName()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClass.isImported()",
            "public boolean isImported()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClass.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.annotation.ConfigurationClass.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.ConfigurationClass.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser",
            "org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser()",
            "public org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "javax.management.MBeanServer",
            "org.springframework.context.annotation.MBeanExportConfiguration$SpecificPlatform$1.getMBeanServer()",
            "public javax.management.MBeanServer getMBeanServer()"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder(org.springframework.context.annotation.ConfigurationClass, org.springframework.context.annotation.DeferredImportSelector)",
            "public org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder(org.springframework.context.annotation.ConfigurationClass, org.springframework.context.annotation.DeferredImportSelector)"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClass",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder.getConfigurationClass()",
            "public org.springframework.context.annotation.ConfigurationClass getConfigurationClass()"
        ],
        [
            "org.springframework.context.annotation.DeferredImportSelector",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder.getImportSelector()",
            "public org.springframework.context.annotation.DeferredImportSelector getImportSelector()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ProfileCondition.matches(org.springframework.context.annotation.ConditionContext, org.springframework.core.type.AnnotatedTypeMetadata)",
            "public boolean matches(org.springframework.context.annotation.ConditionContext, org.springframework.core.type.AnnotatedTypeMetadata)"
        ],
        [
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareGeneratorStrategy",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareGeneratorStrategy(java.lang.ClassLoader)",
            "public org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareGeneratorStrategy(java.lang.ClassLoader)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassUtils.checkConfigurationClassCandidate(org.springframework.beans.factory.config.BeanDefinition, org.springframework.core.type.classreading.MetadataReaderFactory)",
            "public static boolean checkConfigurationClassCandidate(org.springframework.beans.factory.config.BeanDefinition, org.springframework.core.type.classreading.MetadataReaderFactory)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassUtils.isConfigurationCandidate(org.springframework.core.type.AnnotationMetadata)",
            "public static boolean isConfigurationCandidate(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.context.annotation.ConfigurationClassUtils.getOrder(org.springframework.core.type.AnnotationMetadata)",
            "public static java.lang.Integer getOrder(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "int",
            "org.springframework.context.annotation.ConfigurationClassUtils.getOrder(org.springframework.beans.factory.config.BeanDefinition)",
            "public static int getOrder(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.context.annotation.AnnotationConfigUtils",
            "org.springframework.context.annotation.AnnotationConfigUtils()",
            "public org.springframework.context.annotation.AnnotationConfigUtils()"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationConfigUtils.registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public static void registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "java.util.Set<org.springframework.beans.factory.config.BeanDefinitionHolder>",
            "org.springframework.context.annotation.AnnotationConfigUtils.registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)",
            "public static java.util.Set<org.springframework.beans.factory.config.BeanDefinitionHolder> registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationConfigUtils.processCommonDefinitionAnnotations(org.springframework.beans.factory.annotation.AnnotatedBeanDefinition)",
            "public static void processCommonDefinitionAnnotations(org.springframework.beans.factory.annotation.AnnotatedBeanDefinition)"
        ],
        [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupDependencyDescriptor",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupDependencyDescriptor(java.lang.reflect.Field, java.lang.Class<?>)",
            "public org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupDependencyDescriptor(java.lang.reflect.Field, java.lang.Class<?>)"
        ],
        [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupDependencyDescriptor",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupDependencyDescriptor(java.lang.reflect.Method, java.lang.Class<?>)",
            "public org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupDependencyDescriptor(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupDependencyDescriptor.getDependencyType()",
            "public java.lang.Class<?> getDependencyType()"
        ],
        [
            "void",
            "org.springframework.context.annotation.BeanMethod.validate(org.springframework.beans.factory.parsing.ProblemReporter)",
            "public void validate(org.springframework.beans.factory.parsing.ProblemReporter)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.BeanMethod.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.annotation.BeanMethod.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.BeanMethod.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)",
            "public org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)"
        ],
        [
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean, org.springframework.core.env.Environment)",
            "public org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean, org.springframework.core.env.Environment)"
        ],
        [
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader)",
            "public org.springframework.context.annotation.ClassPathBeanDefinitionScanner(org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionRegistry",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.getRegistry()",
            "public final org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanDefinitionDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)",
            "public void setBeanDefinitionDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionDefaults",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.getBeanDefinitionDefaults()",
            "public org.springframework.beans.factory.support.BeanDefinitionDefaults getBeanDefinitionDefaults()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setAutowireCandidatePatterns(java.lang.String...)",
            "public void setAutowireCandidatePatterns(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)",
            "public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)",
            "public void setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setScopedProxyMode(org.springframework.context.annotation.ScopedProxyMode)",
            "public void setScopedProxyMode(org.springframework.context.annotation.ScopedProxyMode)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.setIncludeAnnotationConfig(boolean)",
            "public void setIncludeAnnotationConfig(boolean)"
        ],
        [
            "int",
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner.scan(java.lang.String...)",
            "public int scan(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$ImportStack.registerImport(org.springframework.core.type.AnnotationMetadata, java.lang.String)",
            "public void registerImport(org.springframework.core.type.AnnotationMetadata, java.lang.String)"
        ],
        [
            "org.springframework.core.type.AnnotationMetadata",
            "org.springframework.context.annotation.ConfigurationClassParser$ImportStack.getImportingClassFor(java.lang.String)",
            "public org.springframework.core.type.AnnotationMetadata getImportingClassFor(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$ImportStack.removeImportingClass(java.lang.String)",
            "public void removeImportingClass(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.ConfigurationClassParser$ImportStack.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.annotation.ConflictingBeanDefinitionException",
            "org.springframework.context.annotation.ConflictingBeanDefinitionException(java.lang.String)",
            "public org.springframework.context.annotation.ConflictingBeanDefinitionException(java.lang.String)"
        ],
        [
            "org.springframework.context.annotation.LoadTimeWeavingConfiguration",
            "org.springframework.context.annotation.LoadTimeWeavingConfiguration()",
            "public org.springframework.context.annotation.LoadTimeWeavingConfiguration()"
        ],
        [
            "void",
            "org.springframework.context.annotation.LoadTimeWeavingConfiguration.setImportMetadata(org.springframework.core.type.AnnotationMetadata)",
            "public void setImportMetadata(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "void",
            "org.springframework.context.annotation.LoadTimeWeavingConfiguration.setLoadTimeWeavingConfigurer(org.springframework.context.annotation.LoadTimeWeavingConfigurer)",
            "public void setLoadTimeWeavingConfigurer(org.springframework.context.annotation.LoadTimeWeavingConfigurer)"
        ],
        [
            "void",
            "org.springframework.context.annotation.LoadTimeWeavingConfiguration.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.instrument.classloading.LoadTimeWeaver",
            "org.springframework.context.annotation.LoadTimeWeavingConfiguration.loadTimeWeaver()",
            "public org.springframework.instrument.classloading.LoadTimeWeaver loadTimeWeaver()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareMethodInterceptor.intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy)",
            "public java.lang.Object intercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.springframework.cglib.proxy.MethodProxy) throws java.lang.Throwable"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareMethodInterceptor.isMatch(java.lang.reflect.Method)",
            "public boolean isMatch(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareMethodInterceptor.isSetBeanFactory(java.lang.reflect.Method)",
            "public static boolean isSetBeanFactory(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.context.annotation.TypeFilterUtils",
            "org.springframework.context.annotation.TypeFilterUtils()",
            "public org.springframework.context.annotation.TypeFilterUtils()"
        ],
        [
            "java.util.List<org.springframework.core.type.filter.TypeFilter>",
            "org.springframework.context.annotation.TypeFilterUtils.createTypeFiltersFor(org.springframework.core.annotation.AnnotationAttributes, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public static java.util.List<org.springframework.core.type.filter.TypeFilter> createTypeFiltersFor(org.springframework.core.annotation.AnnotationAttributes, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "org.springframework.context.annotation.AnnotationBeanNameGenerator",
            "org.springframework.context.annotation.AnnotationBeanNameGenerator()",
            "public org.springframework.context.annotation.AnnotationBeanNameGenerator()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.AnnotationBeanNameGenerator.generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.register(org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder)",
            "public void register(org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHolder)"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler.processGroupImports()",
            "public void processGroupImports()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ConfigurationClassEnhancer$BeanFactoryAwareGeneratorStrategy$1.end_class()",
            "public void end_class()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinitionHolder",
            "org.springframework.context.annotation.ScopedProxyCreator.createScopedProxy(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)",
            "public static org.springframework.beans.factory.config.BeanDefinitionHolder createScopedProxy(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.annotation.ScopedProxyCreator.getTargetBeanName(java.lang.String)",
            "public static java.lang.String getTargetBeanName(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$1.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$1.isStatic()",
            "public boolean isStatic()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$1.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "void",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$1.releaseTarget(java.lang.Object)",
            "public void releaseTarget(java.lang.Object)"
        ],
        [
            "org.springframework.context.annotation.AnnotationConfigApplicationContext",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext()",
            "public org.springframework.context.annotation.AnnotationConfigApplicationContext()"
        ],
        [
            "org.springframework.context.annotation.AnnotationConfigApplicationContext",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory)",
            "public org.springframework.context.annotation.AnnotationConfigApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory)"
        ],
        [
            "org.springframework.context.annotation.AnnotationConfigApplicationContext",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext(java.lang.Class<?>...)",
            "public org.springframework.context.annotation.AnnotationConfigApplicationContext(java.lang.Class<?>...)"
        ],
        [
            "org.springframework.context.annotation.AnnotationConfigApplicationContext",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext(java.lang.String...)",
            "public org.springframework.context.annotation.AnnotationConfigApplicationContext(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext.setEnvironment(org.springframework.core.env.ConfigurableEnvironment)",
            "public void setEnvironment(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext.setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)",
            "public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext.setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)",
            "public void setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext.register(java.lang.Class<?>...)",
            "public void register(java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext.scan(java.lang.String...)",
            "public void scan(java.lang.String...)"
        ],
        [
            "<T> void",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext.registerBean(java.lang.String, java.lang.Class<T>, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public <T> void registerBean(java.lang.String, java.lang.Class<T>, java.util.function.Supplier<T>, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "void",
            "org.springframework.context.annotation.AspectJAutoProxyRegistrar.registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public void registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "default",
            "org.springframework.context.annotation.ImportBeanDefinitionRegistrar.void registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.beans.factory.support.BeanNameGenerator)",
            "public default void registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.beans.factory.support.BeanNameGenerator)"
        ],
        [
            "default",
            "org.springframework.context.annotation.ImportBeanDefinitionRegistrar.void registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public default void registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "java.lang.Class<? extends org.springframework.context.annotation.DeferredImportSelector$Group>",
            "org.springframework.context.annotation.DeferredImportSelector.getImportGroup()",
            "public default java.lang.Class<? extends org.springframework.context.annotation.DeferredImportSelector$Group> getImportGroup()"
        ],
        [
            "org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl",
            "org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader)",
            "public org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.core.env.Environment, org.springframework.core.io.ResourceLoader)"
        ],
        [
            "org.springframework.beans.factory.support.BeanDefinitionRegistry",
            "org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl.getRegistry()",
            "public org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()"
        ],
        [
            "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
            "org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl.getBeanFactory()",
            "public org.springframework.beans.factory.config.ConfigurableListableBeanFactory getBeanFactory()"
        ],
        [
            "org.springframework.core.env.Environment",
            "org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl.getEnvironment()",
            "public org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "org.springframework.core.io.ResourceLoader",
            "org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl.getResourceLoader()",
            "public org.springframework.core.io.ResourceLoader getResourceLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl.getClassLoader()",
            "public java.lang.ClassLoader getClassLoader()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "boolean",
            "org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1.isStatic()",
            "public boolean isStatic()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "void",
            "org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver$1.releaseTarget(java.lang.Object)",
            "public void releaseTarget(java.lang.Object)"
        ],
        [
            "default",
            "org.springframework.context.MessageSourceResolvable.java.lang.Object[] getArguments()",
            "public default java.lang.Object[] getArguments()"
        ],
        [
            "default",
            "org.springframework.context.MessageSourceResolvable.java.lang.String getDefaultMessage()",
            "public default java.lang.String getDefaultMessage()"
        ],
        [
            "<T> org.springframework.context.ApplicationListener<org.springframework.context.PayloadApplicationEvent<T>>",
            "org.springframework.context.ApplicationListener.forPayload(java.util.function.Consumer<T>)",
            "public static <T> org.springframework.context.ApplicationListener<org.springframework.context.PayloadApplicationEvent<T>> forPayload(java.util.function.Consumer<T>)"
        ],
        [
            "boolean",
            "org.springframework.context.index.CandidateComponentsIndex$Entry.match(java.lang.String)",
            "public boolean match(java.lang.String)"
        ],
        [
            "org.springframework.context.index.CandidateComponentsIndex",
            "org.springframework.context.index.CandidateComponentsIndexLoader.loadIndex(java.lang.ClassLoader)",
            "public static org.springframework.context.index.CandidateComponentsIndex loadIndex(java.lang.ClassLoader)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.context.index.CandidateComponentsIndex.getCandidateTypes(java.lang.String, java.lang.String)",
            "public java.util.Set<java.lang.String> getCandidateTypes(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.context.PayloadApplicationEvent",
            "org.springframework.context.PayloadApplicationEvent(java.lang.Object, T)",
            "public org.springframework.context.PayloadApplicationEvent(java.lang.Object, T)"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.context.PayloadApplicationEvent.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "T",
            "org.springframework.context.PayloadApplicationEvent.getPayload()",
            "public T getPayload()"
        ],
        [
            "default",
            "org.springframework.context.ConfigurableApplicationContext.org.springframework.core.env.Environment getEnvironment()",
            "public default org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver",
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver()",
            "public org.springframework.context.weaving.DefaultContextLoadTimeWeaver()"
        ],
        [
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver",
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver(java.lang.ClassLoader)",
            "public org.springframework.context.weaving.DefaultContextLoadTimeWeaver(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver.addTransformer(java.lang.instrument.ClassFileTransformer)",
            "public void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver.getInstrumentableClassLoader()",
            "public java.lang.ClassLoader getInstrumentableClassLoader()"
        ],
        [
            "java.lang.ClassLoader",
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver.getThrowawayClassLoader()",
            "public java.lang.ClassLoader getThrowawayClassLoader()"
        ],
        [
            "org.springframework.context.weaving.AspectJWeavingEnabler",
            "org.springframework.context.weaving.AspectJWeavingEnabler()",
            "public org.springframework.context.weaving.AspectJWeavingEnabler()"
        ],
        [
            "void",
            "org.springframework.context.weaving.AspectJWeavingEnabler.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.context.weaving.AspectJWeavingEnabler.setLoadTimeWeaver(org.springframework.instrument.classloading.LoadTimeWeaver)",
            "public void setLoadTimeWeaver(org.springframework.instrument.classloading.LoadTimeWeaver)"
        ],
        [
            "int",
            "org.springframework.context.weaving.AspectJWeavingEnabler.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.context.weaving.AspectJWeavingEnabler.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory) throws org.springframework.beans.BeansException"
        ],
        [
            "void",
            "org.springframework.context.weaving.AspectJWeavingEnabler.enableAspectJWeaving(org.springframework.instrument.classloading.LoadTimeWeaver, java.lang.ClassLoader)",
            "public static void enableAspectJWeaving(org.springframework.instrument.classloading.LoadTimeWeaver, java.lang.ClassLoader)"
        ],
        [
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor",
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor()",
            "public org.springframework.context.weaving.LoadTimeWeaverAwareProcessor()"
        ],
        [
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor",
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor(org.springframework.instrument.classloading.LoadTimeWeaver)",
            "public org.springframework.context.weaving.LoadTimeWeaverAwareProcessor(org.springframework.instrument.classloading.LoadTimeWeaver)"
        ],
        [
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor",
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.context.weaving.LoadTimeWeaverAwareProcessor(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer",
            "org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer(java.lang.instrument.ClassFileTransformer)",
            "public org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer(java.lang.instrument.ClassFileTransformer)"
        ],
        [
            "byte[]",
            "org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer.transform(java.lang.ClassLoader, java.lang.String, java.lang.Class<?>, java.security.ProtectionDomain, byte[])",
            "public byte[] transform(java.lang.ClassLoader, java.lang.String, java.lang.Class<?>, java.security.ProtectionDomain, byte[]) throws java.lang.instrument.IllegalClassFormatException"
        ],
        [
            "default",
            "org.springframework.context.ApplicationEventPublisher.void publishEvent(org.springframework.context.ApplicationEvent)",
            "public default void publishEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "org.springframework.context.event.ApplicationContextEvent",
            "org.springframework.context.event.ApplicationContextEvent(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.event.ApplicationContextEvent(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.context.event.ApplicationContextEvent.getApplicationContext()",
            "public final org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "org.springframework.context.event.EventPublicationInterceptor",
            "org.springframework.context.event.EventPublicationInterceptor()",
            "public org.springframework.context.event.EventPublicationInterceptor()"
        ],
        [
            "void",
            "org.springframework.context.event.EventPublicationInterceptor.setApplicationEventClass(java.lang.Class<?>)",
            "public void setApplicationEventClass(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.context.event.EventPublicationInterceptor.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)",
            "public void setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)"
        ],
        [
            "void",
            "org.springframework.context.event.EventPublicationInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.event.EventPublicationInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "java.util.Collection<org.springframework.context.ApplicationListener<?>>",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$CachedListenerRetriever.getApplicationListeners()",
            "public java.util.Collection<org.springframework.context.ApplicationListener<?>> getApplicationListeners()"
        ],
        [
            "void",
            "org.springframework.context.event.ApplicationListenerMethodAdapter$EventPublicationSubscriber.onSubscribe(org.reactivestreams.Subscription)",
            "public void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.context.event.ApplicationListenerMethodAdapter$EventPublicationSubscriber.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.context.event.ApplicationListenerMethodAdapter$EventPublicationSubscriber.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.context.event.ApplicationListenerMethodAdapter$EventPublicationSubscriber.onComplete()",
            "public void onComplete()"
        ],
        [
            "default",
            "org.springframework.context.event.GenericApplicationListener.boolean supportsEventType(java.lang.Class<? extends org.springframework.context.ApplicationEvent>)",
            "public default boolean supportsEventType(java.lang.Class<? extends org.springframework.context.ApplicationEvent>)"
        ],
        [
            "org.springframework.context.event.SimpleApplicationEventMulticaster",
            "org.springframework.context.event.SimpleApplicationEventMulticaster()",
            "public org.springframework.context.event.SimpleApplicationEventMulticaster()"
        ],
        [
            "org.springframework.context.event.SimpleApplicationEventMulticaster",
            "org.springframework.context.event.SimpleApplicationEventMulticaster(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.context.event.SimpleApplicationEventMulticaster(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.event.SimpleApplicationEventMulticaster.setTaskExecutor(java.util.concurrent.Executor)",
            "public void setTaskExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.context.event.SimpleApplicationEventMulticaster.setErrorHandler(org.springframework.util.ErrorHandler)",
            "public void setErrorHandler(org.springframework.util.ErrorHandler)"
        ],
        [
            "void",
            "org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(org.springframework.context.ApplicationEvent)",
            "public void multicastEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "void",
            "org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(org.springframework.context.ApplicationEvent, org.springframework.core.ResolvableType)",
            "public void multicastEvent(org.springframework.context.ApplicationEvent, org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.context.event.ContextRefreshedEvent",
            "org.springframework.context.event.ContextRefreshedEvent(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.event.ContextRefreshedEvent(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.event.EventListenerMethodProcessor",
            "org.springframework.context.event.EventListenerMethodProcessor()",
            "public org.springframework.context.event.EventListenerMethodProcessor()"
        ],
        [
            "void",
            "org.springframework.context.event.EventListenerMethodProcessor.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.event.EventListenerMethodProcessor.postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.event.EventListenerMethodProcessor.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "org.springframework.context.event.ContextStartedEvent",
            "org.springframework.context.event.ContextStartedEvent(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.event.ContextStartedEvent(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.event.AbstractApplicationEventMulticaster",
            "org.springframework.context.event.AbstractApplicationEventMulticaster()",
            "public org.springframework.context.event.AbstractApplicationEventMulticaster()"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.addApplicationListener(org.springframework.context.ApplicationListener<?>)",
            "public void addApplicationListener(org.springframework.context.ApplicationListener<?>)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.addApplicationListenerBean(java.lang.String)",
            "public void addApplicationListenerBean(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.removeApplicationListener(org.springframework.context.ApplicationListener<?>)",
            "public void removeApplicationListener(org.springframework.context.ApplicationListener<?>)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.removeApplicationListenerBean(java.lang.String)",
            "public void removeApplicationListenerBean(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.removeApplicationListeners(java.util.function.Predicate<org.springframework.context.ApplicationListener<?>>)",
            "public void removeApplicationListeners(java.util.function.Predicate<org.springframework.context.ApplicationListener<?>>)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.removeApplicationListenerBeans(java.util.function.Predicate<java.lang.String>)",
            "public void removeApplicationListenerBeans(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.context.event.AbstractApplicationEventMulticaster.removeAllListeners()",
            "public void removeAllListeners()"
        ],
        [
            "boolean",
            "org.springframework.context.event.EventExpressionEvaluator.condition(java.lang.String, org.springframework.context.ApplicationEvent, java.lang.reflect.Method, org.springframework.context.expression.AnnotatedElementKey, java.lang.Object[], org.springframework.beans.factory.BeanFactory)",
            "public boolean condition(java.lang.String, org.springframework.context.ApplicationEvent, java.lang.reflect.Method, org.springframework.context.expression.AnnotatedElementKey, java.lang.Object[], org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.context.event.ContextStoppedEvent",
            "org.springframework.context.event.ContextStoppedEvent(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.event.ContextStoppedEvent(org.springframework.context.ApplicationContext)"
        ],
        [
            "boolean",
            "org.springframework.context.event.ApplicationListenerMethodAdapter$ReactiveResultHandler.subscribeToPublisher(java.lang.Object)",
            "public boolean subscribeToPublisher(java.lang.Object)"
        ],
        [
            "org.springframework.context.event.GenericApplicationListenerAdapter",
            "org.springframework.context.event.GenericApplicationListenerAdapter(org.springframework.context.ApplicationListener<?>)",
            "public org.springframework.context.event.GenericApplicationListenerAdapter(org.springframework.context.ApplicationListener<?>)"
        ],
        [
            "void",
            "org.springframework.context.event.GenericApplicationListenerAdapter.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "boolean",
            "org.springframework.context.event.GenericApplicationListenerAdapter.supportsEventType(org.springframework.core.ResolvableType)",
            "public boolean supportsEventType(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.context.event.GenericApplicationListenerAdapter.supportsSourceType(java.lang.Class<?>)",
            "public boolean supportsSourceType(java.lang.Class<?>)"
        ],
        [
            "int",
            "org.springframework.context.event.GenericApplicationListenerAdapter.getOrder()",
            "public int getOrder()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.event.GenericApplicationListenerAdapter.getListenerId()",
            "public java.lang.String getListenerId()"
        ],
        [
            "org.springframework.context.event.ContextClosedEvent",
            "org.springframework.context.event.ContextClosedEvent(org.springframework.context.ApplicationContext)",
            "public org.springframework.context.event.ContextClosedEvent(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.event.DefaultEventListenerFactory",
            "org.springframework.context.event.DefaultEventListenerFactory()",
            "public org.springframework.context.event.DefaultEventListenerFactory()"
        ],
        [
            "void",
            "org.springframework.context.event.DefaultEventListenerFactory.setOrder(int)",
            "public void setOrder(int)"
        ],
        [
            "int",
            "org.springframework.context.event.DefaultEventListenerFactory.getOrder()",
            "public int getOrder()"
        ],
        [
            "boolean",
            "org.springframework.context.event.DefaultEventListenerFactory.supportsMethod(java.lang.reflect.Method)",
            "public boolean supportsMethod(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.context.ApplicationListener<?>",
            "org.springframework.context.event.DefaultEventListenerFactory.createApplicationListener(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)",
            "public org.springframework.context.ApplicationListener<?> createApplicationListener(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.context.event.SourceFilteringListener",
            "org.springframework.context.event.SourceFilteringListener(java.lang.Object, org.springframework.context.ApplicationListener<?>)",
            "public org.springframework.context.event.SourceFilteringListener(java.lang.Object, org.springframework.context.ApplicationListener<?>)"
        ],
        [
            "void",
            "org.springframework.context.event.SourceFilteringListener.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "boolean",
            "org.springframework.context.event.SourceFilteringListener.supportsEventType(org.springframework.core.ResolvableType)",
            "public boolean supportsEventType(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.context.event.SourceFilteringListener.supportsSourceType(java.lang.Class<?>)",
            "public boolean supportsSourceType(java.lang.Class<?>)"
        ],
        [
            "int",
            "org.springframework.context.event.SourceFilteringListener.getOrder()",
            "public int getOrder()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.event.SourceFilteringListener.getListenerId()",
            "public java.lang.String getListenerId()"
        ],
        [
            "default",
            "org.springframework.context.event.SmartApplicationListener.boolean supportsSourceType(java.lang.Class<?>)",
            "public default boolean supportsSourceType(java.lang.Class<?>)"
        ],
        [
            "default",
            "org.springframework.context.event.SmartApplicationListener.int getOrder()",
            "public default int getOrder()"
        ],
        [
            "default",
            "org.springframework.context.event.SmartApplicationListener.java.lang.String getListenerId()",
            "public default java.lang.String getListenerId()"
        ],
        [
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey(org.springframework.core.ResolvableType, java.lang.Class<?>)",
            "public org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey(org.springframework.core.ResolvableType, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey.compareTo(org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey)",
            "public int compareTo(org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey)"
        ],
        [
            "int",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerCacheKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "java.util.Collection<org.springframework.context.ApplicationListener<?>>",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$DefaultListenerRetriever.getApplicationListeners()",
            "public java.util.Collection<org.springframework.context.ApplicationListener<?>> getApplicationListeners()"
        ],
        [
            "org.springframework.context.event.ApplicationListenerMethodAdapter",
            "org.springframework.context.event.ApplicationListenerMethodAdapter(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)",
            "public org.springframework.context.event.ApplicationListenerMethodAdapter(java.lang.String, java.lang.Class<?>, java.lang.reflect.Method)"
        ],
        [
            "void",
            "org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "boolean",
            "org.springframework.context.event.ApplicationListenerMethodAdapter.supportsEventType(org.springframework.core.ResolvableType)",
            "public boolean supportsEventType(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.context.event.ApplicationListenerMethodAdapter.supportsSourceType(java.lang.Class<?>)",
            "public boolean supportsSourceType(java.lang.Class<?>)"
        ],
        [
            "int",
            "org.springframework.context.event.ApplicationListenerMethodAdapter.getOrder()",
            "public int getOrder()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.event.ApplicationListenerMethodAdapter.getListenerId()",
            "public java.lang.String getListenerId()"
        ],
        [
            "void",
            "org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(org.springframework.context.ApplicationEvent)",
            "public void processEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "java.lang.String",
            "org.springframework.context.event.ApplicationListenerMethodAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.context.event.EventExpressionRootObject",
            "org.springframework.context.event.EventExpressionRootObject(org.springframework.context.ApplicationEvent, java.lang.Object[])",
            "public org.springframework.context.event.EventExpressionRootObject(org.springframework.context.ApplicationEvent, java.lang.Object[])"
        ],
        [
            "org.springframework.context.ApplicationEvent",
            "org.springframework.context.event.EventExpressionRootObject.getEvent()",
            "public org.springframework.context.ApplicationEvent getEvent()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.context.event.EventExpressionRootObject.getArgs()",
            "public java.lang.Object[] getArgs()"
        ],
        [
            "org.springframework.scripting.config.LangNamespaceUtils",
            "org.springframework.scripting.config.LangNamespaceUtils()",
            "public org.springframework.scripting.config.LangNamespaceUtils()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.scripting.config.LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "public static org.springframework.beans.factory.config.BeanDefinition registerScriptFactoryPostProcessorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ],
        [
            "org.springframework.scripting.config.LangNamespaceHandler",
            "org.springframework.scripting.config.LangNamespaceHandler()",
            "public org.springframework.scripting.config.LangNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.scripting.config.LangNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.scripting.config.ScriptingDefaultsParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.scripting.config.ScriptBeanDefinitionParser",
            "org.springframework.scripting.config.ScriptBeanDefinitionParser(java.lang.String)",
            "public org.springframework.scripting.config.ScriptBeanDefinitionParser(java.lang.String)"
        ],
        [
            "org.springframework.scripting.support.StandardScriptUtils",
            "org.springframework.scripting.support.StandardScriptUtils()",
            "public org.springframework.scripting.support.StandardScriptUtils()"
        ],
        [
            "javax.script.ScriptEngine",
            "org.springframework.scripting.support.StandardScriptUtils.retrieveEngineByName(javax.script.ScriptEngineManager, java.lang.String)",
            "public static javax.script.ScriptEngine retrieveEngineByName(javax.script.ScriptEngineManager, java.lang.String)"
        ],
        [
            "org.springframework.scripting.support.ScriptFactoryPostProcessor",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor()",
            "public org.springframework.scripting.support.ScriptFactoryPostProcessor()"
        ],
        [
            "void",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.setDefaultRefreshCheckDelay(long)",
            "public void setDefaultRefreshCheckDelay(long)"
        ],
        [
            "void",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.setDefaultProxyTargetClass(boolean)",
            "public void setDefaultProxyTargetClass(boolean)"
        ],
        [
            "void",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.setResourceLoader(org.springframework.core.io.ResourceLoader)",
            "public void setResourceLoader(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "int",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.getOrder()",
            "public int getOrder()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.predictBeanType(java.lang.Class<?>, java.lang.String)",
            "public java.lang.Class<?> predictBeanType(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.beans.PropertyValues",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)",
            "public org.springframework.beans.PropertyValues postProcessProperties(org.springframework.beans.PropertyValues, java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String)",
            "public java.lang.Object postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.scripting.support.StaticScriptSource",
            "org.springframework.scripting.support.StaticScriptSource(java.lang.String)",
            "public org.springframework.scripting.support.StaticScriptSource(java.lang.String)"
        ],
        [
            "org.springframework.scripting.support.StaticScriptSource",
            "org.springframework.scripting.support.StaticScriptSource(java.lang.String, java.lang.String)",
            "public org.springframework.scripting.support.StaticScriptSource(java.lang.String, java.lang.String)"
        ],
        [
            "synchronized",
            "org.springframework.scripting.support.StaticScriptSource.void setScript(java.lang.String)",
            "public synchronized void setScript(java.lang.String)"
        ],
        [
            "synchronized",
            "org.springframework.scripting.support.StaticScriptSource.java.lang.String getScriptAsString()",
            "public synchronized java.lang.String getScriptAsString()"
        ],
        [
            "synchronized",
            "org.springframework.scripting.support.StaticScriptSource.boolean isModified()",
            "public synchronized boolean isModified()"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.support.StaticScriptSource.suggestedClassName()",
            "public java.lang.String suggestedClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.support.StaticScriptSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scripting.support.StandardScriptEvaluator",
            "org.springframework.scripting.support.StandardScriptEvaluator()",
            "public org.springframework.scripting.support.StandardScriptEvaluator()"
        ],
        [
            "org.springframework.scripting.support.StandardScriptEvaluator",
            "org.springframework.scripting.support.StandardScriptEvaluator(java.lang.ClassLoader)",
            "public org.springframework.scripting.support.StandardScriptEvaluator(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.scripting.support.StandardScriptEvaluator",
            "org.springframework.scripting.support.StandardScriptEvaluator(javax.script.ScriptEngineManager)",
            "public org.springframework.scripting.support.StandardScriptEvaluator(javax.script.ScriptEngineManager)"
        ],
        [
            "void",
            "org.springframework.scripting.support.StandardScriptEvaluator.setLanguage(java.lang.String)",
            "public void setLanguage(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scripting.support.StandardScriptEvaluator.setEngineName(java.lang.String)",
            "public void setEngineName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scripting.support.StandardScriptEvaluator.setGlobalBindings(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setGlobalBindings(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.scripting.support.StandardScriptEvaluator.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.support.StandardScriptEvaluator.evaluate(org.springframework.scripting.ScriptSource)",
            "public java.lang.Object evaluate(org.springframework.scripting.ScriptSource)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.support.StandardScriptEvaluator.evaluate(org.springframework.scripting.ScriptSource, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object evaluate(org.springframework.scripting.ScriptSource, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.scripting.support.ResourceScriptSource",
            "org.springframework.scripting.support.ResourceScriptSource(org.springframework.core.io.support.EncodedResource)",
            "public org.springframework.scripting.support.ResourceScriptSource(org.springframework.core.io.support.EncodedResource)"
        ],
        [
            "org.springframework.scripting.support.ResourceScriptSource",
            "org.springframework.scripting.support.ResourceScriptSource(org.springframework.core.io.Resource)",
            "public org.springframework.scripting.support.ResourceScriptSource(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.scripting.support.ResourceScriptSource.getResource()",
            "public final org.springframework.core.io.Resource getResource()"
        ],
        [
            "void",
            "org.springframework.scripting.support.ResourceScriptSource.setEncoding(java.lang.String)",
            "public void setEncoding(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.support.ResourceScriptSource.getScriptAsString()",
            "public java.lang.String getScriptAsString() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.scripting.support.ResourceScriptSource.isModified()",
            "public boolean isModified()"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.support.ResourceScriptSource.suggestedClassName()",
            "public java.lang.String suggestedClassName()"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.support.ResourceScriptSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scripting.support.StandardScriptEvalException",
            "org.springframework.scripting.support.StandardScriptEvalException(javax.script.ScriptException)",
            "public org.springframework.scripting.support.StandardScriptEvalException(javax.script.ScriptException)"
        ],
        [
            "javax.script.ScriptException",
            "org.springframework.scripting.support.StandardScriptEvalException.getScriptException()",
            "public final javax.script.ScriptException getScriptException()"
        ],
        [
            "synchronized",
            "org.springframework.scripting.support.StandardScriptEvalException.java.lang.Throwable fillInStackTrace()",
            "public synchronized java.lang.Throwable fillInStackTrace()"
        ],
        [
            "org.springframework.scripting.support.RefreshableScriptTargetSource",
            "org.springframework.scripting.support.RefreshableScriptTargetSource(org.springframework.beans.factory.BeanFactory, java.lang.String, org.springframework.scripting.ScriptFactory, org.springframework.scripting.ScriptSource, boolean)",
            "public org.springframework.scripting.support.RefreshableScriptTargetSource(org.springframework.beans.factory.BeanFactory, java.lang.String, org.springframework.scripting.ScriptFactory, org.springframework.scripting.ScriptSource, boolean)"
        ],
        [
            "org.springframework.scripting.support.StandardScriptFactory",
            "org.springframework.scripting.support.StandardScriptFactory(java.lang.String)",
            "public org.springframework.scripting.support.StandardScriptFactory(java.lang.String)"
        ],
        [
            "org.springframework.scripting.support.StandardScriptFactory",
            "org.springframework.scripting.support.StandardScriptFactory(java.lang.String, java.lang.Class<?>...)",
            "public org.springframework.scripting.support.StandardScriptFactory(java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "org.springframework.scripting.support.StandardScriptFactory",
            "org.springframework.scripting.support.StandardScriptFactory(java.lang.String, java.lang.String)",
            "public org.springframework.scripting.support.StandardScriptFactory(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.scripting.support.StandardScriptFactory",
            "org.springframework.scripting.support.StandardScriptFactory(java.lang.String, java.lang.String, java.lang.Class<?>...)",
            "public org.springframework.scripting.support.StandardScriptFactory(java.lang.String, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.scripting.support.StandardScriptFactory.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.support.StandardScriptFactory.getScriptSourceLocator()",
            "public java.lang.String getScriptSourceLocator()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.scripting.support.StandardScriptFactory.getScriptInterfaces()",
            "public java.lang.Class<?>[] getScriptInterfaces()"
        ],
        [
            "boolean",
            "org.springframework.scripting.support.StandardScriptFactory.requiresConfigInterface()",
            "public boolean requiresConfigInterface()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.support.StandardScriptFactory.getScriptedObject(org.springframework.scripting.ScriptSource, java.lang.Class<?>...)",
            "public java.lang.Object getScriptedObject(org.springframework.scripting.ScriptSource, java.lang.Class<?>...) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.scripting.support.StandardScriptFactory.getScriptedObjectType(org.springframework.scripting.ScriptSource)",
            "public java.lang.Class<?> getScriptedObjectType(org.springframework.scripting.ScriptSource) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException"
        ],
        [
            "boolean",
            "org.springframework.scripting.support.StandardScriptFactory.requiresScriptedObjectRefresh(org.springframework.scripting.ScriptSource)",
            "public boolean requiresScriptedObjectRefresh(org.springframework.scripting.ScriptSource)"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.support.StandardScriptFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scripting.ScriptCompilationException",
            "org.springframework.scripting.ScriptCompilationException(java.lang.String)",
            "public org.springframework.scripting.ScriptCompilationException(java.lang.String)"
        ],
        [
            "org.springframework.scripting.ScriptCompilationException",
            "org.springframework.scripting.ScriptCompilationException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.scripting.ScriptCompilationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.scripting.ScriptCompilationException",
            "org.springframework.scripting.ScriptCompilationException(org.springframework.scripting.ScriptSource, java.lang.String)",
            "public org.springframework.scripting.ScriptCompilationException(org.springframework.scripting.ScriptSource, java.lang.String)"
        ],
        [
            "org.springframework.scripting.ScriptCompilationException",
            "org.springframework.scripting.ScriptCompilationException(org.springframework.scripting.ScriptSource, java.lang.Throwable)",
            "public org.springframework.scripting.ScriptCompilationException(org.springframework.scripting.ScriptSource, java.lang.Throwable)"
        ],
        [
            "org.springframework.scripting.ScriptCompilationException",
            "org.springframework.scripting.ScriptCompilationException(org.springframework.scripting.ScriptSource, java.lang.String, java.lang.Throwable)",
            "public org.springframework.scripting.ScriptCompilationException(org.springframework.scripting.ScriptSource, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.scripting.ScriptSource",
            "org.springframework.scripting.ScriptCompilationException.getScriptSource()",
            "public org.springframework.scripting.ScriptSource getScriptSource()"
        ],
        [
            "org.springframework.scripting.groovy.GroovyScriptFactory$CachedResultHolder",
            "org.springframework.scripting.groovy.GroovyScriptFactory$CachedResultHolder(java.lang.Object)",
            "public org.springframework.scripting.groovy.GroovyScriptFactory$CachedResultHolder(java.lang.Object)"
        ],
        [
            "org.springframework.scripting.groovy.GroovyScriptFactory",
            "org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String)",
            "public org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String)"
        ],
        [
            "org.springframework.scripting.groovy.GroovyScriptFactory",
            "org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String, org.springframework.scripting.groovy.GroovyObjectCustomizer)",
            "public org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String, org.springframework.scripting.groovy.GroovyObjectCustomizer)"
        ],
        [
            "org.springframework.scripting.groovy.GroovyScriptFactory",
            "org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String, org.codehaus.groovy.control.CompilerConfiguration)",
            "public org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String, org.codehaus.groovy.control.CompilerConfiguration)"
        ],
        [
            "org.springframework.scripting.groovy.GroovyScriptFactory",
            "org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String, org.codehaus.groovy.control.customizers.CompilationCustomizer...)",
            "public org.springframework.scripting.groovy.GroovyScriptFactory(java.lang.String, org.codehaus.groovy.control.customizers.CompilationCustomizer...)"
        ],
        [
            "void",
            "org.springframework.scripting.groovy.GroovyScriptFactory.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.scripting.groovy.GroovyScriptFactory.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "groovy.lang.GroovyClassLoader",
            "org.springframework.scripting.groovy.GroovyScriptFactory.getGroovyClassLoader()",
            "public groovy.lang.GroovyClassLoader getGroovyClassLoader()"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.groovy.GroovyScriptFactory.getScriptSourceLocator()",
            "public java.lang.String getScriptSourceLocator()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.scripting.groovy.GroovyScriptFactory.getScriptInterfaces()",
            "public java.lang.Class<?>[] getScriptInterfaces()"
        ],
        [
            "boolean",
            "org.springframework.scripting.groovy.GroovyScriptFactory.requiresConfigInterface()",
            "public boolean requiresConfigInterface()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.groovy.GroovyScriptFactory.getScriptedObject(org.springframework.scripting.ScriptSource, java.lang.Class<?>...)",
            "public java.lang.Object getScriptedObject(org.springframework.scripting.ScriptSource, java.lang.Class<?>...) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.scripting.groovy.GroovyScriptFactory.getScriptedObjectType(org.springframework.scripting.ScriptSource)",
            "public java.lang.Class<?> getScriptedObjectType(org.springframework.scripting.ScriptSource) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException"
        ],
        [
            "boolean",
            "org.springframework.scripting.groovy.GroovyScriptFactory.requiresScriptedObjectRefresh(org.springframework.scripting.ScriptSource)",
            "public boolean requiresScriptedObjectRefresh(org.springframework.scripting.ScriptSource)"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.groovy.GroovyScriptFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scripting.groovy.GroovyScriptEvaluator",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator()",
            "public org.springframework.scripting.groovy.GroovyScriptEvaluator()"
        ],
        [
            "org.springframework.scripting.groovy.GroovyScriptEvaluator",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator(java.lang.ClassLoader)",
            "public org.springframework.scripting.groovy.GroovyScriptEvaluator(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator.setCompilerConfiguration(org.codehaus.groovy.control.CompilerConfiguration)",
            "public void setCompilerConfiguration(org.codehaus.groovy.control.CompilerConfiguration)"
        ],
        [
            "org.codehaus.groovy.control.CompilerConfiguration",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator.getCompilerConfiguration()",
            "public org.codehaus.groovy.control.CompilerConfiguration getCompilerConfiguration()"
        ],
        [
            "void",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator.setCompilationCustomizers(org.codehaus.groovy.control.customizers.CompilationCustomizer...)",
            "public void setCompilationCustomizers(org.codehaus.groovy.control.customizers.CompilationCustomizer...)"
        ],
        [
            "void",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator.evaluate(org.springframework.scripting.ScriptSource)",
            "public java.lang.Object evaluate(org.springframework.scripting.ScriptSource)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.groovy.GroovyScriptEvaluator.evaluate(org.springframework.scripting.ScriptSource, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object evaluate(org.springframework.scripting.ScriptSource, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.scripting.bsh.BshScriptEvaluator",
            "org.springframework.scripting.bsh.BshScriptEvaluator()",
            "public org.springframework.scripting.bsh.BshScriptEvaluator()"
        ],
        [
            "org.springframework.scripting.bsh.BshScriptEvaluator",
            "org.springframework.scripting.bsh.BshScriptEvaluator(java.lang.ClassLoader)",
            "public org.springframework.scripting.bsh.BshScriptEvaluator(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.scripting.bsh.BshScriptEvaluator.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.bsh.BshScriptEvaluator.evaluate(org.springframework.scripting.ScriptSource)",
            "public java.lang.Object evaluate(org.springframework.scripting.ScriptSource)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.bsh.BshScriptEvaluator.evaluate(org.springframework.scripting.ScriptSource, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object evaluate(org.springframework.scripting.ScriptSource, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.scripting.bsh.BshScriptUtils",
            "org.springframework.scripting.bsh.BshScriptUtils()",
            "public org.springframework.scripting.bsh.BshScriptUtils()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.bsh.BshScriptUtils.createBshObject(java.lang.String)",
            "public static java.lang.Object createBshObject(java.lang.String) throws bsh.EvalError"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.bsh.BshScriptUtils.createBshObject(java.lang.String, java.lang.Class<?>...)",
            "public static java.lang.Object createBshObject(java.lang.String, java.lang.Class<?>...) throws bsh.EvalError"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.bsh.BshScriptUtils.createBshObject(java.lang.String, java.lang.Class<?>[], java.lang.ClassLoader)",
            "public static java.lang.Object createBshObject(java.lang.String, java.lang.Class<?>[], java.lang.ClassLoader) throws bsh.EvalError"
        ],
        [
            "org.springframework.scripting.bsh.BshScriptFactory",
            "org.springframework.scripting.bsh.BshScriptFactory(java.lang.String)",
            "public org.springframework.scripting.bsh.BshScriptFactory(java.lang.String)"
        ],
        [
            "org.springframework.scripting.bsh.BshScriptFactory",
            "org.springframework.scripting.bsh.BshScriptFactory(java.lang.String, java.lang.Class<?>...)",
            "public org.springframework.scripting.bsh.BshScriptFactory(java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.scripting.bsh.BshScriptFactory.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.bsh.BshScriptFactory.getScriptSourceLocator()",
            "public java.lang.String getScriptSourceLocator()"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.scripting.bsh.BshScriptFactory.getScriptInterfaces()",
            "public java.lang.Class<?>[] getScriptInterfaces()"
        ],
        [
            "boolean",
            "org.springframework.scripting.bsh.BshScriptFactory.requiresConfigInterface()",
            "public boolean requiresConfigInterface()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.bsh.BshScriptFactory.getScriptedObject(org.springframework.scripting.ScriptSource, java.lang.Class<?>...)",
            "public java.lang.Object getScriptedObject(org.springframework.scripting.ScriptSource, java.lang.Class<?>...) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.scripting.bsh.BshScriptFactory.getScriptedObjectType(org.springframework.scripting.ScriptSource)",
            "public java.lang.Class<?> getScriptedObjectType(org.springframework.scripting.ScriptSource) throws java.io.IOException, org.springframework.scripting.ScriptCompilationException"
        ],
        [
            "boolean",
            "org.springframework.scripting.bsh.BshScriptFactory.requiresScriptedObjectRefresh(org.springframework.scripting.ScriptSource)",
            "public boolean requiresScriptedObjectRefresh(org.springframework.scripting.ScriptSource)"
        ],
        [
            "java.lang.String",
            "org.springframework.scripting.bsh.BshScriptFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scripting.bsh.BshScriptUtils$BshObjectInvocationHandler",
            "org.springframework.scripting.bsh.BshScriptUtils$BshObjectInvocationHandler(bsh.XThis)",
            "public org.springframework.scripting.bsh.BshScriptUtils$BshObjectInvocationHandler(bsh.XThis)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scripting.bsh.BshScriptUtils$BshObjectInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.validation.ObjectError",
            "org.springframework.validation.ObjectError(java.lang.String, java.lang.String)",
            "public org.springframework.validation.ObjectError(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.validation.ObjectError",
            "org.springframework.validation.ObjectError(java.lang.String, java.lang.String[], java.lang.Object[], java.lang.String)",
            "public org.springframework.validation.ObjectError(java.lang.String, java.lang.String[], java.lang.Object[], java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.ObjectError.getObjectName()",
            "public java.lang.String getObjectName()"
        ],
        [
            "void",
            "org.springframework.validation.ObjectError.wrap(java.lang.Object)",
            "public void wrap(java.lang.Object)"
        ],
        [
            "<T> T",
            "org.springframework.validation.ObjectError.unwrap(java.lang.Class<T>)",
            "public <T> T unwrap(java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.springframework.validation.ObjectError.contains(java.lang.Class<?>)",
            "public boolean contains(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.validation.ObjectError.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.validation.ObjectError.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.ObjectError.toString()",
            "public java.lang.String toString()"
        ],
        [
            "default",
            "org.springframework.validation.BindingResult.void recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)",
            "public default void recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "default",
            "org.springframework.validation.BindingResult.void recordSuppressedField(java.lang.String)",
            "public default void recordSuppressedField(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.validation.BindingResult.java.lang.String[] getSuppressedFields()",
            "public default java.lang.String[] getSuppressedFields()"
        ],
        [
            "org.springframework.validation.BeanPropertyBindingResult",
            "org.springframework.validation.BeanPropertyBindingResult(java.lang.Object, java.lang.String)",
            "public org.springframework.validation.BeanPropertyBindingResult(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.validation.BeanPropertyBindingResult",
            "org.springframework.validation.BeanPropertyBindingResult(java.lang.Object, java.lang.String, boolean, int)",
            "public org.springframework.validation.BeanPropertyBindingResult(java.lang.Object, java.lang.String, boolean, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.BeanPropertyBindingResult.getTarget()",
            "public final java.lang.Object getTarget()"
        ],
        [
            "org.springframework.beans.ConfigurablePropertyAccessor",
            "org.springframework.validation.BeanPropertyBindingResult.getPropertyAccessor()",
            "public final org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()"
        ],
        [
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationObjectError",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationObjectError(java.lang.String, java.lang.String[], java.lang.Object[], javax.validation.ConstraintViolation<?>, org.springframework.validation.beanvalidation.SpringValidatorAdapter)",
            "public org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationObjectError(java.lang.String, java.lang.String[], java.lang.Object[], javax.validation.ConstraintViolation<?>, org.springframework.validation.beanvalidation.SpringValidatorAdapter)"
        ],
        [
            "boolean",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationObjectError.shouldRenderDefaultMessage()",
            "public boolean shouldRenderDefaultMessage()"
        ],
        [
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter(javax.validation.Validator)",
            "public org.springframework.validation.beanvalidation.SpringValidatorAdapter(javax.validation.Validator)"
        ],
        [
            "boolean",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.supports(java.lang.Class<?>)",
            "public boolean supports(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(java.lang.Object, org.springframework.validation.Errors)",
            "public void validate(java.lang.Object, org.springframework.validation.Errors)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)",
            "public void validate(java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.validateValue(java.lang.Class<?>, java.lang.String, java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)",
            "public void validateValue(java.lang.Class<?>, java.lang.String, java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)"
        ],
        [
            "<T> java.util.Set<javax.validation.ConstraintViolation<T>>",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(T, java.lang.Class<?>...)",
            "public <T> java.util.Set<javax.validation.ConstraintViolation<T>> validate(T, java.lang.Class<?>...)"
        ],
        [
            "<T> java.util.Set<javax.validation.ConstraintViolation<T>>",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.validateProperty(T, java.lang.String, java.lang.Class<?>...)",
            "public <T> java.util.Set<javax.validation.ConstraintViolation<T>> validateProperty(T, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "<T> java.util.Set<javax.validation.ConstraintViolation<T>>",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.validateValue(java.lang.Class<T>, java.lang.String, java.lang.Object, java.lang.Class<?>...)",
            "public <T> java.util.Set<javax.validation.ConstraintViolation<T>> validateValue(java.lang.Class<T>, java.lang.String, java.lang.Object, java.lang.Class<?>...)"
        ],
        [
            "javax.validation.metadata.BeanDescriptor",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.getConstraintsForClass(java.lang.Class<?>)",
            "public javax.validation.metadata.BeanDescriptor getConstraintsForClass(java.lang.Class<?>)"
        ],
        [
            "<T> T",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.unwrap(java.lang.Class<T>)",
            "public <T> T unwrap(java.lang.Class<T>)"
        ],
        [
            "javax.validation.executable.ExecutableValidator",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables()",
            "public javax.validation.executable.ExecutableValidator forExecutables()"
        ],
        [
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationFieldError",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationFieldError(java.lang.String, java.lang.String, java.lang.Object, java.lang.String[], java.lang.Object[], javax.validation.ConstraintViolation<?>, org.springframework.validation.beanvalidation.SpringValidatorAdapter)",
            "public org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationFieldError(java.lang.String, java.lang.String, java.lang.Object, java.lang.String[], java.lang.Object[], javax.validation.ConstraintViolation<?>, org.springframework.validation.beanvalidation.SpringValidatorAdapter)"
        ],
        [
            "boolean",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ViolationFieldError.shouldRenderDefaultMessage()",
            "public boolean shouldRenderDefaultMessage()"
        ],
        [
            "org.springframework.validation.beanvalidation.MessageSourceResourceBundleLocator",
            "org.springframework.validation.beanvalidation.MessageSourceResourceBundleLocator(org.springframework.context.MessageSource)",
            "public org.springframework.validation.beanvalidation.MessageSourceResourceBundleLocator(org.springframework.context.MessageSource)"
        ],
        [
            "java.util.ResourceBundle",
            "org.springframework.validation.beanvalidation.MessageSourceResourceBundleLocator.getResourceBundle(java.util.Locale)",
            "public java.util.ResourceBundle getResourceBundle(java.util.Locale)"
        ],
        [
            "org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator",
            "org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator(javax.validation.MessageInterpolator)",
            "public org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator(javax.validation.MessageInterpolator)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator.interpolate(java.lang.String, javax.validation.MessageInterpolator$Context)",
            "public java.lang.String interpolate(java.lang.String, javax.validation.MessageInterpolator$Context)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator.interpolate(java.lang.String, javax.validation.MessageInterpolator$Context, java.util.Locale)",
            "public java.lang.String interpolate(java.lang.String, javax.validation.MessageInterpolator$Context, java.util.Locale)"
        ],
        [
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean()",
            "public org.springframework.validation.beanvalidation.LocalValidatorFactoryBean()"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setProviderClass(java.lang.Class)",
            "public void setProviderClass(java.lang.Class)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setValidationProviderResolver(javax.validation.ValidationProviderResolver)",
            "public void setValidationProviderResolver(javax.validation.ValidationProviderResolver)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setMessageInterpolator(javax.validation.MessageInterpolator)",
            "public void setMessageInterpolator(javax.validation.MessageInterpolator)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setValidationMessageSource(org.springframework.context.MessageSource)",
            "public void setValidationMessageSource(org.springframework.context.MessageSource)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setTraversableResolver(javax.validation.TraversableResolver)",
            "public void setTraversableResolver(javax.validation.TraversableResolver)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setConstraintValidatorFactory(javax.validation.ConstraintValidatorFactory)",
            "public void setConstraintValidatorFactory(javax.validation.ConstraintValidatorFactory)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setMappingLocations(org.springframework.core.io.Resource...)",
            "public void setMappingLocations(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setValidationProperties(java.util.Properties)",
            "public void setValidationProperties(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setValidationPropertyMap(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setValidationPropertyMap(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.getValidationPropertyMap()",
            "public java.util.Map<java.lang.String, java.lang.String> getValidationPropertyMap()"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.validation.Validator",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.getValidator()",
            "public javax.validation.Validator getValidator()"
        ],
        [
            "javax.validation.ValidatorContext",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.usingContext()",
            "public javax.validation.ValidatorContext usingContext()"
        ],
        [
            "javax.validation.MessageInterpolator",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.getMessageInterpolator()",
            "public javax.validation.MessageInterpolator getMessageInterpolator()"
        ],
        [
            "javax.validation.TraversableResolver",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.getTraversableResolver()",
            "public javax.validation.TraversableResolver getTraversableResolver()"
        ],
        [
            "javax.validation.ConstraintValidatorFactory",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.getConstraintValidatorFactory()",
            "public javax.validation.ConstraintValidatorFactory getConstraintValidatorFactory()"
        ],
        [
            "javax.validation.ParameterNameProvider",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.getParameterNameProvider()",
            "public javax.validation.ParameterNameProvider getParameterNameProvider()"
        ],
        [
            "<T> T",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.unwrap(java.lang.Class<T>)",
            "public <T> T unwrap(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.close()",
            "public void close()"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean",
            "org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean()",
            "public org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean()"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor",
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor()",
            "public org.springframework.validation.beanvalidation.BeanValidationPostProcessor()"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor.setValidator(javax.validation.Validator)",
            "public void setValidator(javax.validation.Validator)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor.setValidatorFactory(javax.validation.ValidatorFactory)",
            "public void setValidatorFactory(javax.validation.ValidatorFactory)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor.setAfterInitialization(boolean)",
            "public void setAfterInitialization(boolean)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.beanvalidation.BeanValidationPostProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "javax.validation.MessageInterpolator",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$HibernateValidatorDelegate.buildMessageInterpolator(org.springframework.context.MessageSource)",
            "public static javax.validation.MessageInterpolator buildMessageInterpolator(org.springframework.context.MessageSource)"
        ],
        [
            "org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory",
            "org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory(org.springframework.beans.factory.config.AutowireCapableBeanFactory)",
            "public org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory(org.springframework.beans.factory.config.AutowireCapableBeanFactory)"
        ],
        [
            "<T extends javax.validation.ConstraintValidator<?, ?>> T",
            "org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory.getInstance(java.lang.Class<T>)",
            "public <T extends javax.validation.ConstraintValidator<?, ?>> T getInstance(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory.releaseInstance(javax.validation.ConstraintValidator<?, ?>)",
            "public void releaseInstance(javax.validation.ConstraintValidator<?, ?>)"
        ],
        [
            "org.springframework.validation.beanvalidation.MethodValidationInterceptor",
            "org.springframework.validation.beanvalidation.MethodValidationInterceptor()",
            "public org.springframework.validation.beanvalidation.MethodValidationInterceptor()"
        ],
        [
            "org.springframework.validation.beanvalidation.MethodValidationInterceptor",
            "org.springframework.validation.beanvalidation.MethodValidationInterceptor(javax.validation.ValidatorFactory)",
            "public org.springframework.validation.beanvalidation.MethodValidationInterceptor(javax.validation.ValidatorFactory)"
        ],
        [
            "org.springframework.validation.beanvalidation.MethodValidationInterceptor",
            "org.springframework.validation.beanvalidation.MethodValidationInterceptor(javax.validation.Validator)",
            "public org.springframework.validation.beanvalidation.MethodValidationInterceptor(javax.validation.Validator)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute(java.lang.String)",
            "public org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute.getCodes()",
            "public java.lang.String[] getCodes()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute.getArguments()",
            "public java.lang.Object[] getArguments()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute.getDefaultMessage()",
            "public java.lang.String getDefaultMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.validation.beanvalidation.MethodValidationPostProcessor",
            "org.springframework.validation.beanvalidation.MethodValidationPostProcessor()",
            "public org.springframework.validation.beanvalidation.MethodValidationPostProcessor()"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.MethodValidationPostProcessor.setValidatedAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setValidatedAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.MethodValidationPostProcessor.setValidator(javax.validation.Validator)",
            "public void setValidator(javax.validation.Validator)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.MethodValidationPostProcessor.setValidatorFactory(javax.validation.ValidatorFactory)",
            "public void setValidatorFactory(javax.validation.ValidatorFactory)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.MethodValidationPostProcessor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1.getParameterNames(java.lang.reflect.Constructor<?>)",
            "public java.util.List<java.lang.String> getParameterNames(java.lang.reflect.Constructor<?>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1.getParameterNames(java.lang.reflect.Method)",
            "public java.util.List<java.lang.String> getParameterNames(java.lang.reflect.Method)"
        ],
        [
            "org.springframework.validation.beanvalidation.CustomValidatorBean",
            "org.springframework.validation.beanvalidation.CustomValidatorBean()",
            "public org.springframework.validation.beanvalidation.CustomValidatorBean()"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.CustomValidatorBean.setValidatorFactory(javax.validation.ValidatorFactory)",
            "public void setValidatorFactory(javax.validation.ValidatorFactory)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.CustomValidatorBean.setMessageInterpolator(javax.validation.MessageInterpolator)",
            "public void setMessageInterpolator(javax.validation.MessageInterpolator)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.CustomValidatorBean.setTraversableResolver(javax.validation.TraversableResolver)",
            "public void setTraversableResolver(javax.validation.TraversableResolver)"
        ],
        [
            "void",
            "org.springframework.validation.beanvalidation.CustomValidatorBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.validation.BindException",
            "org.springframework.validation.BindException(org.springframework.validation.BindingResult)",
            "public org.springframework.validation.BindException(org.springframework.validation.BindingResult)"
        ],
        [
            "org.springframework.validation.BindException",
            "org.springframework.validation.BindException(java.lang.Object, java.lang.String)",
            "public org.springframework.validation.BindException(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.validation.BindingResult",
            "org.springframework.validation.BindException.getBindingResult()",
            "public final org.springframework.validation.BindingResult getBindingResult()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.BindException.getObjectName()",
            "public java.lang.String getObjectName()"
        ],
        [
            "void",
            "org.springframework.validation.BindException.setNestedPath(java.lang.String)",
            "public void setNestedPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.BindException.getNestedPath()",
            "public java.lang.String getNestedPath()"
        ],
        [
            "void",
            "org.springframework.validation.BindException.pushNestedPath(java.lang.String)",
            "public void pushNestedPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.popNestedPath()",
            "public void popNestedPath() throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.validation.BindException.reject(java.lang.String)",
            "public void reject(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.reject(java.lang.String, java.lang.String)",
            "public void reject(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.reject(java.lang.String, java.lang.Object[], java.lang.String)",
            "public void reject(java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.rejectValue(java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.rejectValue(java.lang.String, java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.addAllErrors(org.springframework.validation.Errors)",
            "public void addAllErrors(org.springframework.validation.Errors)"
        ],
        [
            "boolean",
            "org.springframework.validation.BindException.hasErrors()",
            "public boolean hasErrors()"
        ],
        [
            "int",
            "org.springframework.validation.BindException.getErrorCount()",
            "public int getErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.validation.BindException.getAllErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getAllErrors()"
        ],
        [
            "boolean",
            "org.springframework.validation.BindException.hasGlobalErrors()",
            "public boolean hasGlobalErrors()"
        ],
        [
            "int",
            "org.springframework.validation.BindException.getGlobalErrorCount()",
            "public int getGlobalErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.validation.BindException.getGlobalErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getGlobalErrors()"
        ],
        [
            "org.springframework.validation.ObjectError",
            "org.springframework.validation.BindException.getGlobalError()",
            "public org.springframework.validation.ObjectError getGlobalError()"
        ],
        [
            "boolean",
            "org.springframework.validation.BindException.hasFieldErrors()",
            "public boolean hasFieldErrors()"
        ],
        [
            "int",
            "org.springframework.validation.BindException.getFieldErrorCount()",
            "public int getFieldErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.validation.BindException.getFieldErrors()",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors()"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.BindException.getFieldError()",
            "public org.springframework.validation.FieldError getFieldError()"
        ],
        [
            "boolean",
            "org.springframework.validation.BindException.hasFieldErrors(java.lang.String)",
            "public boolean hasFieldErrors(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.validation.BindException.getFieldErrorCount(java.lang.String)",
            "public int getFieldErrorCount(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.validation.BindException.getFieldErrors(java.lang.String)",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors(java.lang.String)"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.BindException.getFieldError(java.lang.String)",
            "public org.springframework.validation.FieldError getFieldError(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.BindException.getFieldValue(java.lang.String)",
            "public java.lang.Object getFieldValue(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.validation.BindException.getFieldType(java.lang.String)",
            "public java.lang.Class<?> getFieldType(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.BindException.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.validation.BindException.getModel()",
            "public java.util.Map<java.lang.String, java.lang.Object> getModel()"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.BindException.getRawFieldValue(java.lang.String)",
            "public java.lang.Object getRawFieldValue(java.lang.String)"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.validation.BindException.findEditor(java.lang.String, java.lang.Class)",
            "public java.beans.PropertyEditor findEditor(java.lang.String, java.lang.Class)"
        ],
        [
            "org.springframework.beans.PropertyEditorRegistry",
            "org.springframework.validation.BindException.getPropertyEditorRegistry()",
            "public org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.BindException.resolveMessageCodes(java.lang.String)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.BindException.resolveMessageCodes(java.lang.String, java.lang.String)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.addError(org.springframework.validation.ObjectError)",
            "public void addError(org.springframework.validation.ObjectError)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)",
            "public void recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.validation.BindException.recordSuppressedField(java.lang.String)",
            "public void recordSuppressedField(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.BindException.getSuppressedFields()",
            "public java.lang.String[] getSuppressedFields()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.BindException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "boolean",
            "org.springframework.validation.BindException.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.validation.BindException.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.validation.DirectFieldBindingResult",
            "org.springframework.validation.DirectFieldBindingResult(java.lang.Object, java.lang.String)",
            "public org.springframework.validation.DirectFieldBindingResult(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.validation.DirectFieldBindingResult",
            "org.springframework.validation.DirectFieldBindingResult(java.lang.Object, java.lang.String, boolean)",
            "public org.springframework.validation.DirectFieldBindingResult(java.lang.Object, java.lang.String, boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.DirectFieldBindingResult.getTarget()",
            "public final java.lang.Object getTarget()"
        ],
        [
            "org.springframework.beans.ConfigurablePropertyAccessor",
            "org.springframework.validation.DirectFieldBindingResult.getPropertyAccessor()",
            "public final org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor()"
        ],
        [
            "org.springframework.validation.DefaultBindingErrorProcessor",
            "org.springframework.validation.DefaultBindingErrorProcessor()",
            "public org.springframework.validation.DefaultBindingErrorProcessor()"
        ],
        [
            "void",
            "org.springframework.validation.DefaultBindingErrorProcessor.processMissingFieldError(java.lang.String, org.springframework.validation.BindingResult)",
            "public void processMissingFieldError(java.lang.String, org.springframework.validation.BindingResult)"
        ],
        [
            "void",
            "org.springframework.validation.DefaultBindingErrorProcessor.processPropertyAccessException(org.springframework.beans.PropertyAccessException, org.springframework.validation.BindingResult)",
            "public void processPropertyAccessException(org.springframework.beans.PropertyAccessException, org.springframework.validation.BindingResult)"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.FieldError(java.lang.String, java.lang.String, java.lang.String)",
            "public org.springframework.validation.FieldError(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.FieldError(java.lang.String, java.lang.String, java.lang.Object, boolean, java.lang.String[], java.lang.Object[], java.lang.String)",
            "public org.springframework.validation.FieldError(java.lang.String, java.lang.String, java.lang.Object, boolean, java.lang.String[], java.lang.Object[], java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.FieldError.getField()",
            "public java.lang.String getField()"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.FieldError.getRejectedValue()",
            "public java.lang.Object getRejectedValue()"
        ],
        [
            "boolean",
            "org.springframework.validation.FieldError.isBindingFailure()",
            "public boolean isBindingFailure()"
        ],
        [
            "boolean",
            "org.springframework.validation.FieldError.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.validation.FieldError.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.FieldError.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.validation.BindingResultUtils",
            "org.springframework.validation.BindingResultUtils()",
            "public org.springframework.validation.BindingResultUtils()"
        ],
        [
            "org.springframework.validation.BindingResult",
            "org.springframework.validation.BindingResultUtils.getBindingResult(java.util.Map<?, ?>, java.lang.String)",
            "public static org.springframework.validation.BindingResult getBindingResult(java.util.Map<?, ?>, java.lang.String)"
        ],
        [
            "org.springframework.validation.BindingResult",
            "org.springframework.validation.BindingResultUtils.getRequiredBindingResult(java.util.Map<?, ?>, java.lang.String)",
            "public static org.springframework.validation.BindingResult getRequiredBindingResult(java.util.Map<?, ?>, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractPropertyBindingResult.initConversion(org.springframework.core.convert.ConversionService)",
            "public void initConversion(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.beans.PropertyEditorRegistry",
            "org.springframework.validation.AbstractPropertyBindingResult.getPropertyEditorRegistry()",
            "public org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.validation.AbstractPropertyBindingResult.getFieldType(java.lang.String)",
            "public java.lang.Class<?> getFieldType(java.lang.String)"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.validation.AbstractPropertyBindingResult.findEditor(java.lang.String, java.lang.Class<?>)",
            "public java.beans.PropertyEditor findEditor(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.validation.DefaultMessageCodesResolver",
            "org.springframework.validation.DefaultMessageCodesResolver()",
            "public org.springframework.validation.DefaultMessageCodesResolver()"
        ],
        [
            "void",
            "org.springframework.validation.DefaultMessageCodesResolver.setPrefix(java.lang.String)",
            "public void setPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.DefaultMessageCodesResolver.setMessageCodeFormatter(org.springframework.validation.MessageCodeFormatter)",
            "public void setMessageCodeFormatter(org.springframework.validation.MessageCodeFormatter)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.DefaultMessageCodesResolver.resolveMessageCodes(java.lang.String, java.lang.String)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.DefaultMessageCodesResolver.resolveMessageCodes(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.validation.DataBinder",
            "org.springframework.validation.DataBinder(java.lang.Object)",
            "public org.springframework.validation.DataBinder(java.lang.Object)"
        ],
        [
            "org.springframework.validation.DataBinder",
            "org.springframework.validation.DataBinder(java.lang.Object, java.lang.String)",
            "public org.springframework.validation.DataBinder(java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.DataBinder.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.DataBinder.getObjectName()",
            "public java.lang.String getObjectName()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setAutoGrowNestedPaths(boolean)",
            "public void setAutoGrowNestedPaths(boolean)"
        ],
        [
            "boolean",
            "org.springframework.validation.DataBinder.isAutoGrowNestedPaths()",
            "public boolean isAutoGrowNestedPaths()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setAutoGrowCollectionLimit(int)",
            "public void setAutoGrowCollectionLimit(int)"
        ],
        [
            "int",
            "org.springframework.validation.DataBinder.getAutoGrowCollectionLimit()",
            "public int getAutoGrowCollectionLimit()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.initBeanPropertyAccess()",
            "public void initBeanPropertyAccess()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.initDirectFieldAccess()",
            "public void initDirectFieldAccess()"
        ],
        [
            "org.springframework.validation.BindingResult",
            "org.springframework.validation.DataBinder.getBindingResult()",
            "public org.springframework.validation.BindingResult getBindingResult()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setIgnoreUnknownFields(boolean)",
            "public void setIgnoreUnknownFields(boolean)"
        ],
        [
            "boolean",
            "org.springframework.validation.DataBinder.isIgnoreUnknownFields()",
            "public boolean isIgnoreUnknownFields()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setIgnoreInvalidFields(boolean)",
            "public void setIgnoreInvalidFields(boolean)"
        ],
        [
            "boolean",
            "org.springframework.validation.DataBinder.isIgnoreInvalidFields()",
            "public boolean isIgnoreInvalidFields()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setAllowedFields(java.lang.String...)",
            "public void setAllowedFields(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.DataBinder.getAllowedFields()",
            "public java.lang.String[] getAllowedFields()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setDisallowedFields(java.lang.String...)",
            "public void setDisallowedFields(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.DataBinder.getDisallowedFields()",
            "public java.lang.String[] getDisallowedFields()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setRequiredFields(java.lang.String...)",
            "public void setRequiredFields(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.DataBinder.getRequiredFields()",
            "public java.lang.String[] getRequiredFields()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)",
            "public void setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)",
            "public void setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)"
        ],
        [
            "org.springframework.validation.BindingErrorProcessor",
            "org.springframework.validation.DataBinder.getBindingErrorProcessor()",
            "public org.springframework.validation.BindingErrorProcessor getBindingErrorProcessor()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setValidator(org.springframework.validation.Validator)",
            "public void setValidator(org.springframework.validation.Validator)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.addValidators(org.springframework.validation.Validator...)",
            "public void addValidators(org.springframework.validation.Validator...)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.replaceValidators(org.springframework.validation.Validator...)",
            "public void replaceValidators(org.springframework.validation.Validator...)"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.validation.DataBinder.getValidator()",
            "public org.springframework.validation.Validator getValidator()"
        ],
        [
            "java.util.List<org.springframework.validation.Validator>",
            "org.springframework.validation.DataBinder.getValidators()",
            "public java.util.List<org.springframework.validation.Validator> getValidators()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.setConversionService(org.springframework.core.convert.ConversionService)",
            "public void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.validation.DataBinder.getConversionService()",
            "public org.springframework.core.convert.ConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.addCustomFormatter(org.springframework.format.Formatter<?>)",
            "public void addCustomFormatter(org.springframework.format.Formatter<?>)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.addCustomFormatter(org.springframework.format.Formatter<?>, java.lang.String...)",
            "public void addCustomFormatter(org.springframework.format.Formatter<?>, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.addCustomFormatter(org.springframework.format.Formatter<?>, java.lang.Class<?>...)",
            "public void addCustomFormatter(org.springframework.format.Formatter<?>, java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.registerCustomEditor(java.lang.Class<?>, java.beans.PropertyEditor)",
            "public void registerCustomEditor(java.lang.Class<?>, java.beans.PropertyEditor)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.registerCustomEditor(java.lang.Class<?>, java.lang.String, java.beans.PropertyEditor)",
            "public void registerCustomEditor(java.lang.Class<?>, java.lang.String, java.beans.PropertyEditor)"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.validation.DataBinder.findCustomEditor(java.lang.Class<?>, java.lang.String)",
            "public java.beans.PropertyEditor findCustomEditor(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.validation.DataBinder.convertIfNecessary(java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "<T> T",
            "org.springframework.validation.DataBinder.convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.MethodParameter)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.MethodParameter) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "<T> T",
            "org.springframework.validation.DataBinder.convertIfNecessary(java.lang.Object, java.lang.Class<T>, java.lang.reflect.Field)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>, java.lang.reflect.Field) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "<T> T",
            "org.springframework.validation.DataBinder.convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor)",
            "public <T> T convertIfNecessary(java.lang.Object, java.lang.Class<T>, org.springframework.core.convert.TypeDescriptor) throws org.springframework.beans.TypeMismatchException"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.bind(org.springframework.beans.PropertyValues)",
            "public void bind(org.springframework.beans.PropertyValues)"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.validate()",
            "public void validate()"
        ],
        [
            "void",
            "org.springframework.validation.DataBinder.validate(java.lang.Object...)",
            "public void validate(java.lang.Object...)"
        ],
        [
            "java.util.Map<?, ?>",
            "org.springframework.validation.DataBinder.close()",
            "public java.util.Map<?, ?> close() throws org.springframework.validation.BindException"
        ],
        [
            "org.springframework.validation.support.BindingAwareConcurrentModel",
            "org.springframework.validation.support.BindingAwareConcurrentModel()",
            "public org.springframework.validation.support.BindingAwareConcurrentModel()"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.support.BindingAwareConcurrentModel.put(java.lang.String, java.lang.Object)",
            "public java.lang.Object put(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.support.BindingAwareConcurrentModel.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.validation.support.BindingAwareModelMap",
            "org.springframework.validation.support.BindingAwareModelMap()",
            "public org.springframework.validation.support.BindingAwareModelMap()"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.support.BindingAwareModelMap.put(java.lang.String, java.lang.Object)",
            "public java.lang.Object put(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.validation.support.BindingAwareModelMap.putAll(java.util.Map<? extends java.lang.String, ?>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.support.BindingAwareModelMap.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.validation.annotation.ValidationAnnotationUtils",
            "org.springframework.validation.annotation.ValidationAnnotationUtils()",
            "public org.springframework.validation.annotation.ValidationAnnotationUtils()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.validation.annotation.ValidationAnnotationUtils.determineValidationHints(java.lang.annotation.Annotation)",
            "public static java.lang.Object[] determineValidationHints(java.lang.annotation.Annotation)"
        ],
        [
            "default",
            "org.springframework.validation.SmartValidator.void validateValue(java.lang.Class<?>, java.lang.String, java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)",
            "public default void validateValue(java.lang.Class<?>, java.lang.String, java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.DefaultMessageCodesResolver$Format$2.format(java.lang.String, java.lang.String, java.lang.String)",
            "public java.lang.String format(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.validation.AbstractErrors",
            "org.springframework.validation.AbstractErrors()",
            "public org.springframework.validation.AbstractErrors()"
        ],
        [
            "void",
            "org.springframework.validation.AbstractErrors.setNestedPath(java.lang.String)",
            "public void setNestedPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.AbstractErrors.getNestedPath()",
            "public java.lang.String getNestedPath()"
        ],
        [
            "void",
            "org.springframework.validation.AbstractErrors.pushNestedPath(java.lang.String)",
            "public void pushNestedPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractErrors.popNestedPath()",
            "public void popNestedPath() throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.validation.AbstractErrors.reject(java.lang.String)",
            "public void reject(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractErrors.reject(java.lang.String, java.lang.String)",
            "public void reject(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractErrors.rejectValue(java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractErrors.rejectValue(java.lang.String, java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.validation.AbstractErrors.hasErrors()",
            "public boolean hasErrors()"
        ],
        [
            "int",
            "org.springframework.validation.AbstractErrors.getErrorCount()",
            "public int getErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.validation.AbstractErrors.getAllErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getAllErrors()"
        ],
        [
            "boolean",
            "org.springframework.validation.AbstractErrors.hasGlobalErrors()",
            "public boolean hasGlobalErrors()"
        ],
        [
            "int",
            "org.springframework.validation.AbstractErrors.getGlobalErrorCount()",
            "public int getGlobalErrorCount()"
        ],
        [
            "org.springframework.validation.ObjectError",
            "org.springframework.validation.AbstractErrors.getGlobalError()",
            "public org.springframework.validation.ObjectError getGlobalError()"
        ],
        [
            "boolean",
            "org.springframework.validation.AbstractErrors.hasFieldErrors()",
            "public boolean hasFieldErrors()"
        ],
        [
            "int",
            "org.springframework.validation.AbstractErrors.getFieldErrorCount()",
            "public int getFieldErrorCount()"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.AbstractErrors.getFieldError()",
            "public org.springframework.validation.FieldError getFieldError()"
        ],
        [
            "boolean",
            "org.springframework.validation.AbstractErrors.hasFieldErrors(java.lang.String)",
            "public boolean hasFieldErrors(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.validation.AbstractErrors.getFieldErrorCount(java.lang.String)",
            "public int getFieldErrorCount(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.validation.AbstractErrors.getFieldErrors(java.lang.String)",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors(java.lang.String)"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.AbstractErrors.getFieldError(java.lang.String)",
            "public org.springframework.validation.FieldError getFieldError(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.validation.AbstractErrors.getFieldType(java.lang.String)",
            "public java.lang.Class<?> getFieldType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.AbstractErrors.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.validation.MapBindingResult",
            "org.springframework.validation.MapBindingResult(java.util.Map<?, ?>, java.lang.String)",
            "public org.springframework.validation.MapBindingResult(java.util.Map<?, ?>, java.lang.String)"
        ],
        [
            "java.util.Map<?, ?>",
            "org.springframework.validation.MapBindingResult.getTargetMap()",
            "public final java.util.Map<?, ?> getTargetMap()"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.MapBindingResult.getTarget()",
            "public final java.lang.Object getTarget()"
        ],
        [
            "org.springframework.validation.DefaultMessageCodesResolver$Format[]",
            "org.springframework.validation.DefaultMessageCodesResolver$Format.values()",
            "public static org.springframework.validation.DefaultMessageCodesResolver$Format[] values()"
        ],
        [
            "org.springframework.validation.DefaultMessageCodesResolver$Format",
            "org.springframework.validation.DefaultMessageCodesResolver$Format.valueOf(java.lang.String)",
            "public static org.springframework.validation.DefaultMessageCodesResolver$Format valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.DefaultMessageCodesResolver$Format.toDelimitedString(java.lang.String...)",
            "public static java.lang.String toDelimitedString(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractBindingResult.setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)",
            "public void setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)"
        ],
        [
            "org.springframework.validation.MessageCodesResolver",
            "org.springframework.validation.AbstractBindingResult.getMessageCodesResolver()",
            "public org.springframework.validation.MessageCodesResolver getMessageCodesResolver()"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.AbstractBindingResult.getObjectName()",
            "public java.lang.String getObjectName()"
        ],
        [
            "void",
            "org.springframework.validation.AbstractBindingResult.reject(java.lang.String, java.lang.Object[], java.lang.String)",
            "public void reject(java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractBindingResult.rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractBindingResult.addAllErrors(org.springframework.validation.Errors)",
            "public void addAllErrors(org.springframework.validation.Errors)"
        ],
        [
            "boolean",
            "org.springframework.validation.AbstractBindingResult.hasErrors()",
            "public boolean hasErrors()"
        ],
        [
            "int",
            "org.springframework.validation.AbstractBindingResult.getErrorCount()",
            "public int getErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.validation.AbstractBindingResult.getAllErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getAllErrors()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.validation.AbstractBindingResult.getGlobalErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getGlobalErrors()"
        ],
        [
            "org.springframework.validation.ObjectError",
            "org.springframework.validation.AbstractBindingResult.getGlobalError()",
            "public org.springframework.validation.ObjectError getGlobalError()"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.validation.AbstractBindingResult.getFieldErrors()",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors()"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.AbstractBindingResult.getFieldError()",
            "public org.springframework.validation.FieldError getFieldError()"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.validation.AbstractBindingResult.getFieldErrors(java.lang.String)",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors(java.lang.String)"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.validation.AbstractBindingResult.getFieldError(java.lang.String)",
            "public org.springframework.validation.FieldError getFieldError(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.AbstractBindingResult.getFieldValue(java.lang.String)",
            "public java.lang.Object getFieldValue(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.validation.AbstractBindingResult.getFieldType(java.lang.String)",
            "public java.lang.Class<?> getFieldType(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.validation.AbstractBindingResult.getModel()",
            "public java.util.Map<java.lang.String, java.lang.Object> getModel()"
        ],
        [
            "java.lang.Object",
            "org.springframework.validation.AbstractBindingResult.getRawFieldValue(java.lang.String)",
            "public java.lang.Object getRawFieldValue(java.lang.String)"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.validation.AbstractBindingResult.findEditor(java.lang.String, java.lang.Class<?>)",
            "public java.beans.PropertyEditor findEditor(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "org.springframework.beans.PropertyEditorRegistry",
            "org.springframework.validation.AbstractBindingResult.getPropertyEditorRegistry()",
            "public org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.AbstractBindingResult.resolveMessageCodes(java.lang.String)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.AbstractBindingResult.resolveMessageCodes(java.lang.String, java.lang.String)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractBindingResult.addError(org.springframework.validation.ObjectError)",
            "public void addError(org.springframework.validation.ObjectError)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractBindingResult.recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)",
            "public void recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.validation.AbstractBindingResult.recordSuppressedField(java.lang.String)",
            "public void recordSuppressedField(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.validation.AbstractBindingResult.getSuppressedFields()",
            "public java.lang.String[] getSuppressedFields()"
        ],
        [
            "boolean",
            "org.springframework.validation.AbstractBindingResult.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.validation.AbstractBindingResult.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.validation.ValidationUtils",
            "org.springframework.validation.ValidationUtils()",
            "public org.springframework.validation.ValidationUtils()"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.invokeValidator(org.springframework.validation.Validator, java.lang.Object, org.springframework.validation.Errors)",
            "public static void invokeValidator(org.springframework.validation.Validator, java.lang.Object, org.springframework.validation.Errors)"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.invokeValidator(org.springframework.validation.Validator, java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)",
            "public static void invokeValidator(org.springframework.validation.Validator, java.lang.Object, org.springframework.validation.Errors, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String)",
            "public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.String)",
            "public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[])",
            "public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)",
            "public static void rejectIfEmpty(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String)",
            "public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.String)",
            "public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[])",
            "public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[])"
        ],
        [
            "void",
            "org.springframework.validation.ValidationUtils.rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)",
            "public static void rejectIfEmptyOrWhitespace(org.springframework.validation.Errors, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.validation.DefaultMessageCodesResolver$Format$1.format(java.lang.String, java.lang.String, java.lang.String)",
            "public java.lang.String format(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Date",
            "org.springframework.format.datetime.DateFormatterRegistrar$CalendarToDateConverter.convert(java.util.Calendar)",
            "public java.util.Date convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.DateFormatterRegistrar$CalendarToDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.Calendar",
            "org.springframework.format.datetime.DateFormatterRegistrar$DateToCalendarConverter.convert(java.util.Date)",
            "public java.util.Calendar convert(java.util.Date)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.DateFormatterRegistrar$DateToCalendarConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.lang.Long",
            "org.springframework.format.datetime.DateFormatterRegistrar$CalendarToLongConverter.convert(java.util.Calendar)",
            "public java.lang.Long convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.DateFormatterRegistrar$CalendarToLongConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.DateFormatter",
            "org.springframework.format.datetime.DateFormatter()",
            "public org.springframework.format.datetime.DateFormatter()"
        ],
        [
            "org.springframework.format.datetime.DateFormatter",
            "org.springframework.format.datetime.DateFormatter(java.lang.String)",
            "public org.springframework.format.datetime.DateFormatter(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setSource(java.lang.Object)",
            "public void setSource(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setPattern(java.lang.String)",
            "public void setPattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setFallbackPatterns(java.lang.String...)",
            "public void setFallbackPatterns(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setIso(org.springframework.format.annotation.DateTimeFormat$ISO)",
            "public void setIso(org.springframework.format.annotation.DateTimeFormat$ISO)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setStyle(int)",
            "public void setStyle(int)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setStylePattern(java.lang.String)",
            "public void setStylePattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setTimeZone(java.util.TimeZone)",
            "public void setTimeZone(java.util.TimeZone)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatter.setLenient(boolean)",
            "public void setLenient(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.DateFormatter.print(java.util.Date, java.util.Locale)",
            "public java.lang.String print(java.util.Date, java.util.Locale)"
        ],
        [
            "java.util.Date",
            "org.springframework.format.datetime.DateFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.util.Date parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.DateFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.DateFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.joda.time.Duration",
            "org.springframework.format.datetime.joda.DurationFormatter.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.Duration parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.DurationFormatter.print(org.joda.time.Duration, java.util.Locale)",
            "public java.lang.String print(org.joda.time.Duration, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.DurationFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.DurationFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.datetime.joda.ReadableInstantPrinter",
            "org.springframework.format.datetime.joda.ReadableInstantPrinter(org.joda.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.joda.ReadableInstantPrinter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.ReadableInstantPrinter.print(org.joda.time.ReadableInstant, java.util.Locale)",
            "public java.lang.String print(org.joda.time.ReadableInstant, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.ReadableInstantPrinter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "org.springframework.format.datetime.joda.DateTimeParser",
            "org.springframework.format.datetime.joda.DateTimeParser(org.joda.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.joda.DateTimeParser(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "org.joda.time.DateTime",
            "org.springframework.format.datetime.joda.DateTimeParser.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.DateTime parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.DateTimeParser.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.util.Date",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToDateConverter.convert(org.joda.time.DateTime)",
            "public java.util.Date convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.joda.time.LocalTime",
            "org.springframework.format.datetime.joda.JodaTimeConverters$LocalDateTimeToLocalTimeConverter.convert(org.joda.time.LocalDateTime)",
            "public org.joda.time.LocalTime convert(org.joda.time.LocalDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$LocalDateTimeToLocalTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.joda.time.LocalTime",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalTimeConverter.convert(org.joda.time.DateTime)",
            "public org.joda.time.LocalTime convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean()",
            "public org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean()"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.joda.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean.getObject()",
            "public org.joda.time.format.DateTimeFormatter getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "java.lang.Long",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLongConverter.convert(org.joda.time.DateTime)",
            "public java.lang.Long convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLongConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.joda.JodaTimeContext",
            "org.springframework.format.datetime.joda.JodaTimeContext()",
            "public org.springframework.format.datetime.joda.JodaTimeContext()"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeContext.setChronology(org.joda.time.Chronology)",
            "public void setChronology(org.joda.time.Chronology)"
        ],
        [
            "org.joda.time.Chronology",
            "org.springframework.format.datetime.joda.JodaTimeContext.getChronology()",
            "public org.joda.time.Chronology getChronology()"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeContext.setTimeZone(org.joda.time.DateTimeZone)",
            "public void setTimeZone(org.joda.time.DateTimeZone)"
        ],
        [
            "org.joda.time.DateTimeZone",
            "org.springframework.format.datetime.joda.JodaTimeContext.getTimeZone()",
            "public org.joda.time.DateTimeZone getTimeZone()"
        ],
        [
            "org.joda.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.joda.JodaTimeContext.getFormatter(org.joda.time.format.DateTimeFormatter)",
            "public org.joda.time.format.DateTimeFormatter getFormatter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeContextHolder.resetJodaTimeContext()",
            "public static void resetJodaTimeContext()"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeContextHolder.setJodaTimeContext(org.springframework.format.datetime.joda.JodaTimeContext)",
            "public static void setJodaTimeContext(org.springframework.format.datetime.joda.JodaTimeContext)"
        ],
        [
            "org.springframework.format.datetime.joda.JodaTimeContext",
            "org.springframework.format.datetime.joda.JodaTimeContextHolder.getJodaTimeContext()",
            "public static org.springframework.format.datetime.joda.JodaTimeContext getJodaTimeContext()"
        ],
        [
            "org.joda.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.joda.JodaTimeContextHolder.getFormatter(org.joda.time.format.DateTimeFormatter, java.util.Locale)",
            "public static org.joda.time.format.DateTimeFormatter getFormatter(org.joda.time.format.DateTimeFormatter, java.util.Locale)"
        ],
        [
            "org.springframework.format.datetime.joda.LocalTimeParser",
            "org.springframework.format.datetime.joda.LocalTimeParser(org.joda.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.joda.LocalTimeParser(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "org.joda.time.LocalTime",
            "org.springframework.format.datetime.joda.LocalTimeParser.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.LocalTime parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.LocalTimeParser.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.joda.time.DateMidnight",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToDateMidnightConverter.convert(org.joda.time.DateTime)",
            "public org.joda.time.DateMidnight convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToDateMidnightConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.joda.time.YearMonth",
            "org.springframework.format.datetime.joda.YearMonthFormatter.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.YearMonth parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.YearMonthFormatter.print(org.joda.time.YearMonth, java.util.Locale)",
            "public java.lang.String print(org.joda.time.YearMonth, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.YearMonthFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.YearMonthFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar()",
            "public org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar()"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.setUseIsoFormat(boolean)",
            "public void setUseIsoFormat(boolean)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.setDateStyle(java.lang.String)",
            "public void setDateStyle(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.setTimeStyle(java.lang.String)",
            "public void setTimeStyle(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.setDateTimeStyle(java.lang.String)",
            "public void setDateTimeStyle(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.setDateFormatter(org.joda.time.format.DateTimeFormatter)",
            "public void setDateFormatter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.setTimeFormatter(org.joda.time.format.DateTimeFormatter)",
            "public void setTimeFormatter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.setDateTimeFormatter(org.joda.time.format.DateTimeFormatter)",
            "public void setDateTimeFormatter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar.registerFormatters(org.springframework.format.FormatterRegistry)",
            "public void registerFormatters(org.springframework.format.FormatterRegistry)"
        ],
        [
            "org.joda.time.ReadableInstant",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateToReadableInstantConverter.convert(java.util.Date)",
            "public org.joda.time.ReadableInstant convert(java.util.Date)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateToReadableInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.JodaTimeConverters.registerConverters(org.springframework.core.convert.converter.ConverterRegistry)",
            "public static void registerConverters(org.springframework.core.convert.converter.ConverterRegistry)"
        ],
        [
            "org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory",
            "org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory()",
            "public org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory()"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory.getFieldTypes()",
            "public final java.util.Set<java.lang.Class<?>> getFieldTypes()"
        ],
        [
            "org.springframework.format.Printer<?>",
            "org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory.getPrinter(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)",
            "public org.springframework.format.Printer<?> getPrinter(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser<?>",
            "org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory.getParser(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)",
            "public org.springframework.format.Parser<?> getParser(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser",
            "org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory.getParser(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Parser getParser(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.Printer",
            "org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory.getPrinter(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Printer getPrinter(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.datetime.joda.LocalDateParser",
            "org.springframework.format.datetime.joda.LocalDateParser(org.joda.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.joda.LocalDateParser(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "org.joda.time.LocalDate",
            "org.springframework.format.datetime.joda.LocalDateParser.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.LocalDate parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.LocalDateParser.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.util.Calendar",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToCalendarConverter.convert(org.joda.time.DateTime)",
            "public java.util.Calendar convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToCalendarConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.joda.time.Instant",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToInstantConverter.convert(org.joda.time.DateTime)",
            "public org.joda.time.Instant convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory()",
            "public org.springframework.format.datetime.joda.DateTimeFormatterFactory()"
        ],
        [
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory(java.lang.String)",
            "public org.springframework.format.datetime.joda.DateTimeFormatterFactory(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory.setPattern(java.lang.String)",
            "public void setPattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory.setIso(org.springframework.format.annotation.DateTimeFormat$ISO)",
            "public void setIso(org.springframework.format.annotation.DateTimeFormat$ISO)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory.setStyle(java.lang.String)",
            "public void setStyle(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory.setTimeZone(java.util.TimeZone)",
            "public void setTimeZone(java.util.TimeZone)"
        ],
        [
            "org.joda.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory.createDateTimeFormatter()",
            "public org.joda.time.format.DateTimeFormatter createDateTimeFormatter()"
        ],
        [
            "org.joda.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.joda.DateTimeFormatterFactory.createDateTimeFormatter(org.joda.time.format.DateTimeFormatter)",
            "public org.joda.time.format.DateTimeFormatter createDateTimeFormatter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "org.joda.time.LocalDateTime",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalDateTimeConverter.convert(org.joda.time.DateTime)",
            "public org.joda.time.LocalDateTime convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.joda.time.MonthDay",
            "org.springframework.format.datetime.joda.MonthDayFormatter.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.MonthDay parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.MonthDayFormatter.print(org.joda.time.MonthDay, java.util.Locale)",
            "public java.lang.String print(org.joda.time.MonthDay, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.MonthDayFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.MonthDayFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.datetime.joda.MillisecondInstantPrinter",
            "org.springframework.format.datetime.joda.MillisecondInstantPrinter(org.joda.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.joda.MillisecondInstantPrinter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.MillisecondInstantPrinter.print(java.lang.Long, java.util.Locale)",
            "public java.lang.String print(java.lang.Long, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.MillisecondInstantPrinter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "org.joda.time.ReadableInstant",
            "org.springframework.format.datetime.joda.JodaTimeConverters$CalendarToReadableInstantConverter.convert(java.util.Calendar)",
            "public org.joda.time.ReadableInstant convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$CalendarToReadableInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.joda.time.MutableDateTime",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToMutableDateTimeConverter.convert(org.joda.time.DateTime)",
            "public org.joda.time.MutableDateTime convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToMutableDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar$Type[]",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar$Type.values()",
            "public static org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar$Type[] values()"
        ],
        [
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar$Type",
            "org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar$Type.valueOf(java.lang.String)",
            "public static org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar$Type valueOf(java.lang.String)"
        ],
        [
            "org.springframework.format.datetime.joda.LocalDateTimeParser",
            "org.springframework.format.datetime.joda.LocalDateTimeParser(org.joda.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.joda.LocalDateTimeParser(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "org.joda.time.LocalDateTime",
            "org.springframework.format.datetime.joda.LocalDateTimeParser.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.LocalDateTime parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.LocalDateTimeParser.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.joda.time.Period",
            "org.springframework.format.datetime.joda.PeriodFormatter.parse(java.lang.String, java.util.Locale)",
            "public org.joda.time.Period parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.PeriodFormatter.print(org.joda.time.Period, java.util.Locale)",
            "public java.lang.String print(org.joda.time.Period, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.PeriodFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.PeriodFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.joda.time.LocalDate",
            "org.springframework.format.datetime.joda.JodaTimeConverters$LocalDateTimeToLocalDateConverter.convert(org.joda.time.LocalDateTime)",
            "public org.joda.time.LocalDate convert(org.joda.time.LocalDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$LocalDateTimeToLocalDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.joda.time.ReadableInstant",
            "org.springframework.format.datetime.joda.JodaTimeConverters$LongToReadableInstantConverter.convert(java.lang.Long)",
            "public org.joda.time.ReadableInstant convert(java.lang.Long)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$LongToReadableInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.joda.ReadablePartialPrinter",
            "org.springframework.format.datetime.joda.ReadablePartialPrinter(org.joda.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.joda.ReadablePartialPrinter(org.joda.time.format.DateTimeFormatter)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.ReadablePartialPrinter.print(org.joda.time.ReadablePartial, java.util.Locale)",
            "public java.lang.String print(org.joda.time.ReadablePartial, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.joda.ReadablePartialPrinter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "org.joda.time.LocalDate",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalDateConverter.convert(org.joda.time.DateTime)",
            "public org.joda.time.LocalDate convert(org.joda.time.DateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.joda.JodaTimeConverters$DateTimeToLocalDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.lang.Long",
            "org.springframework.format.datetime.DateFormatterRegistrar$DateToLongConverter.convert(java.util.Date)",
            "public java.lang.Long convert(java.util.Date)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.DateFormatterRegistrar$DateToLongConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.Date",
            "org.springframework.format.datetime.DateFormatterRegistrar$LongToDateConverter.convert(java.lang.Long)",
            "public java.util.Date convert(java.lang.Long)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.DateFormatterRegistrar$LongToDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.util.Calendar",
            "org.springframework.format.datetime.DateFormatterRegistrar$LongToCalendarConverter.convert(java.lang.Long)",
            "public java.util.Calendar convert(java.lang.Long)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.DateFormatterRegistrar$LongToCalendarConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.DateFormatterRegistrar",
            "org.springframework.format.datetime.DateFormatterRegistrar()",
            "public org.springframework.format.datetime.DateFormatterRegistrar()"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatterRegistrar.setFormatter(org.springframework.format.datetime.DateFormatter)",
            "public void setFormatter(org.springframework.format.datetime.DateFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatterRegistrar.registerFormatters(org.springframework.format.FormatterRegistry)",
            "public void registerFormatters(org.springframework.format.FormatterRegistry)"
        ],
        [
            "void",
            "org.springframework.format.datetime.DateFormatterRegistrar.addDateConverters(org.springframework.core.convert.converter.ConverterRegistry)",
            "public static void addDateConverters(org.springframework.core.convert.converter.ConverterRegistry)"
        ],
        [
            "org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory",
            "org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory()",
            "public org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory()"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory.getFieldTypes()",
            "public java.util.Set<java.lang.Class<?>> getFieldTypes()"
        ],
        [
            "org.springframework.format.Printer<?>",
            "org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory.getPrinter(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)",
            "public org.springframework.format.Printer<?> getPrinter(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser<?>",
            "org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory.getParser(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)",
            "public org.springframework.format.Parser<?> getParser(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser",
            "org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory.getParser(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Parser getParser(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.Printer",
            "org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory.getPrinter(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Printer getPrinter(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "java.time.Duration",
            "org.springframework.format.datetime.standard.DurationFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.time.Duration parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.DurationFormatter.print(java.time.Duration, java.util.Locale)",
            "public java.lang.String print(java.time.Duration, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.DurationFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DurationFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeConverters.registerConverters(org.springframework.core.convert.converter.ConverterRegistry)",
            "public static void registerConverters(org.springframework.core.convert.converter.ConverterRegistry)"
        ],
        [
            "java.time.LocalDateTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateTimeConverter.convert(java.time.OffsetDateTime)",
            "public java.time.LocalDateTime convert(java.time.OffsetDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.lang.Long",
            "org.springframework.format.datetime.standard.DateTimeConverters$InstantToLongConverter.convert(java.time.Instant)",
            "public java.lang.Long convert(java.time.Instant)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$InstantToLongConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.Instant",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToInstantConverter.convert(java.util.Calendar)",
            "public java.time.Instant convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.Instant",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToInstantConverter.convert(java.time.OffsetDateTime)",
            "public java.time.Instant convert(java.time.OffsetDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.Instant",
            "org.springframework.format.datetime.standard.DateTimeConverters$LongToInstantConverter.convert(java.lang.Long)",
            "public java.time.Instant convert(java.lang.Long)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$LongToInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.standard.InstantFormatter",
            "org.springframework.format.datetime.standard.InstantFormatter()",
            "public org.springframework.format.datetime.standard.InstantFormatter()"
        ],
        [
            "java.time.Instant",
            "org.springframework.format.datetime.standard.InstantFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.time.Instant parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.InstantFormatter.print(java.time.Instant, java.util.Locale)",
            "public java.lang.String print(java.time.Instant, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.InstantFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.InstantFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.time.LocalDate",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateConverter.convert(java.util.Calendar)",
            "public java.time.LocalDate convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean()",
            "public org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean()"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean.getObject()",
            "public java.time.format.DateTimeFormatter getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "java.time.Instant",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToInstantConverter.convert(java.time.ZonedDateTime)",
            "public java.time.Instant convert(java.time.ZonedDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToInstantConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.ZonedDateTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToZonedDateTimeConverter.convert(java.util.Calendar)",
            "public java.time.ZonedDateTime convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToZonedDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.LocalDateTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateTimeConverter.convert(java.util.Calendar)",
            "public java.time.LocalDateTime convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeContextHolder.resetDateTimeContext()",
            "public static void resetDateTimeContext()"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeContextHolder.setDateTimeContext(org.springframework.format.datetime.standard.DateTimeContext)",
            "public static void setDateTimeContext(org.springframework.format.datetime.standard.DateTimeContext)"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeContext",
            "org.springframework.format.datetime.standard.DateTimeContextHolder.getDateTimeContext()",
            "public static org.springframework.format.datetime.standard.DateTimeContext getDateTimeContext()"
        ],
        [
            "java.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.standard.DateTimeContextHolder.getFormatter(java.time.format.DateTimeFormatter, java.util.Locale)",
            "public static java.time.format.DateTimeFormatter getFormatter(java.time.format.DateTimeFormatter, java.util.Locale)"
        ],
        [
            "java.time.OffsetDateTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToOffsetDateTimeConverter.convert(java.time.ZonedDateTime)",
            "public java.time.OffsetDateTime convert(java.time.ZonedDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToOffsetDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.YearMonth",
            "org.springframework.format.datetime.standard.YearMonthFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.time.YearMonth parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.YearMonthFormatter.print(java.time.YearMonth, java.util.Locale)",
            "public java.lang.String print(java.time.YearMonth, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.YearMonthFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.YearMonthFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.time.LocalDate",
            "org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalDateConverter.convert(java.time.LocalDateTime)",
            "public java.time.LocalDate convert(java.time.LocalDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.ZonedDateTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToZonedDateTimeConverter.convert(java.time.OffsetDateTime)",
            "public java.time.ZonedDateTime convert(java.time.OffsetDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToZonedDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.Year",
            "org.springframework.format.datetime.standard.YearFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.time.Year parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.YearFormatter.print(java.time.Year, java.util.Locale)",
            "public java.lang.String print(java.time.Year, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.YearFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.YearFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.time.LocalTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalTimeConverter.convert(java.time.ZonedDateTime)",
            "public java.time.LocalTime convert(java.time.ZonedDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.LocalDate",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateConverter.convert(java.time.OffsetDateTime)",
            "public java.time.LocalDate convert(java.time.OffsetDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeContext",
            "org.springframework.format.datetime.standard.DateTimeContext()",
            "public org.springframework.format.datetime.standard.DateTimeContext()"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeContext.setChronology(java.time.chrono.Chronology)",
            "public void setChronology(java.time.chrono.Chronology)"
        ],
        [
            "java.time.chrono.Chronology",
            "org.springframework.format.datetime.standard.DateTimeContext.getChronology()",
            "public java.time.chrono.Chronology getChronology()"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeContext.setTimeZone(java.time.ZoneId)",
            "public void setTimeZone(java.time.ZoneId)"
        ],
        [
            "java.time.ZoneId",
            "org.springframework.format.datetime.standard.DateTimeContext.getTimeZone()",
            "public java.time.ZoneId getTimeZone()"
        ],
        [
            "java.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.standard.DateTimeContext.getFormatter(java.time.format.DateTimeFormatter)",
            "public java.time.format.DateTimeFormatter getFormatter(java.time.format.DateTimeFormatter)"
        ],
        [
            "org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory",
            "org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory()",
            "public org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory()"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory.getFieldTypes()",
            "public final java.util.Set<java.lang.Class<?>> getFieldTypes()"
        ],
        [
            "org.springframework.format.Printer<?>",
            "org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory.getPrinter(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)",
            "public org.springframework.format.Printer<?> getPrinter(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser<?>",
            "org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory.getParser(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)",
            "public org.springframework.format.Parser<?> getParser(org.springframework.format.annotation.DateTimeFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser",
            "org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory.getParser(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Parser getParser(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.Printer",
            "org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory.getPrinter(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Printer getPrinter(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "java.time.LocalDateTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateTimeConverter.convert(java.time.ZonedDateTime)",
            "public java.time.LocalDateTime convert(java.time.ZonedDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory()",
            "public org.springframework.format.datetime.standard.DateTimeFormatterFactory()"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory(java.lang.String)",
            "public org.springframework.format.datetime.standard.DateTimeFormatterFactory(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.setPattern(java.lang.String)",
            "public void setPattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.setIso(org.springframework.format.annotation.DateTimeFormat$ISO)",
            "public void setIso(org.springframework.format.annotation.DateTimeFormat$ISO)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.setDateStyle(java.time.format.FormatStyle)",
            "public void setDateStyle(java.time.format.FormatStyle)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.setTimeStyle(java.time.format.FormatStyle)",
            "public void setTimeStyle(java.time.format.FormatStyle)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.setDateTimeStyle(java.time.format.FormatStyle)",
            "public void setDateTimeStyle(java.time.format.FormatStyle)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.setStylePattern(java.lang.String)",
            "public void setStylePattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.setTimeZone(java.util.TimeZone)",
            "public void setTimeZone(java.util.TimeZone)"
        ],
        [
            "java.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.createDateTimeFormatter()",
            "public java.time.format.DateTimeFormatter createDateTimeFormatter()"
        ],
        [
            "java.time.format.DateTimeFormatter",
            "org.springframework.format.datetime.standard.DateTimeFormatterFactory.createDateTimeFormatter(java.time.format.DateTimeFormatter)",
            "public java.time.format.DateTimeFormatter createDateTimeFormatter(java.time.format.DateTimeFormatter)"
        ],
        [
            "org.springframework.format.datetime.standard.TemporalAccessorPrinter",
            "org.springframework.format.datetime.standard.TemporalAccessorPrinter(java.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.standard.TemporalAccessorPrinter(java.time.format.DateTimeFormatter)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.TemporalAccessorPrinter.print(java.time.temporal.TemporalAccessor, java.util.Locale)",
            "public java.lang.String print(java.time.temporal.TemporalAccessor, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.TemporalAccessorPrinter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.time.Month",
            "org.springframework.format.datetime.standard.MonthFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.time.Month parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.MonthFormatter.print(java.time.Month, java.util.Locale)",
            "public java.lang.String print(java.time.Month, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.MonthFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.MonthFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.time.MonthDay",
            "org.springframework.format.datetime.standard.MonthDayFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.time.MonthDay parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.MonthDayFormatter.print(java.time.MonthDay, java.util.Locale)",
            "public java.lang.String print(java.time.MonthDay, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.MonthDayFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.MonthDayFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.time.LocalDate",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateConverter.convert(java.time.ZonedDateTime)",
            "public java.time.LocalDate convert(java.time.ZonedDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar()",
            "public org.springframework.format.datetime.standard.DateTimeFormatterRegistrar()"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.setUseIsoFormat(boolean)",
            "public void setUseIsoFormat(boolean)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.setDateStyle(java.time.format.FormatStyle)",
            "public void setDateStyle(java.time.format.FormatStyle)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.setTimeStyle(java.time.format.FormatStyle)",
            "public void setTimeStyle(java.time.format.FormatStyle)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.setDateTimeStyle(java.time.format.FormatStyle)",
            "public void setDateTimeStyle(java.time.format.FormatStyle)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.setDateFormatter(java.time.format.DateTimeFormatter)",
            "public void setDateFormatter(java.time.format.DateTimeFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.setTimeFormatter(java.time.format.DateTimeFormatter)",
            "public void setTimeFormatter(java.time.format.DateTimeFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.setDateTimeFormatter(java.time.format.DateTimeFormatter)",
            "public void setDateTimeFormatter(java.time.format.DateTimeFormatter)"
        ],
        [
            "void",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar.registerFormatters(org.springframework.format.FormatterRegistry)",
            "public void registerFormatters(org.springframework.format.FormatterRegistry)"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar$Type[]",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar$Type.values()",
            "public static org.springframework.format.datetime.standard.DateTimeFormatterRegistrar$Type[] values()"
        ],
        [
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar$Type",
            "org.springframework.format.datetime.standard.DateTimeFormatterRegistrar$Type.valueOf(java.lang.String)",
            "public static org.springframework.format.datetime.standard.DateTimeFormatterRegistrar$Type valueOf(java.lang.String)"
        ],
        [
            "org.springframework.format.datetime.standard.TemporalAccessorParser",
            "org.springframework.format.datetime.standard.TemporalAccessorParser(java.lang.Class<? extends java.time.temporal.TemporalAccessor>, java.time.format.DateTimeFormatter)",
            "public org.springframework.format.datetime.standard.TemporalAccessorParser(java.lang.Class<? extends java.time.temporal.TemporalAccessor>, java.time.format.DateTimeFormatter)"
        ],
        [
            "java.time.temporal.TemporalAccessor",
            "org.springframework.format.datetime.standard.TemporalAccessorParser.parse(java.lang.String, java.util.Locale)",
            "public java.time.temporal.TemporalAccessor parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.TemporalAccessorParser.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.time.OffsetDateTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToOffsetDateTimeConverter.convert(java.util.Calendar)",
            "public java.time.OffsetDateTime convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToOffsetDateTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.Period",
            "org.springframework.format.datetime.standard.PeriodFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.time.Period parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.PeriodFormatter.print(java.time.Period, java.util.Locale)",
            "public java.lang.String print(java.time.Period, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.datetime.standard.PeriodFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.PeriodFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.time.LocalTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalTimeConverter.convert(java.util.Calendar)",
            "public java.time.LocalTime convert(java.util.Calendar)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.LocalTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalTimeConverter.convert(java.time.OffsetDateTime)",
            "public java.time.LocalTime convert(java.time.OffsetDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "java.time.LocalTime",
            "org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalTimeConverter.convert(java.time.LocalDateTime)",
            "public java.time.LocalTime convert(java.time.LocalDateTime)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalTimeConverter.convert(java.lang.Object)",
            "public java.lang.Object convert(java.lang.Object)"
        ],
        [
            "org.springframework.format.number.AbstractNumberFormatter",
            "org.springframework.format.number.AbstractNumberFormatter()",
            "public org.springframework.format.number.AbstractNumberFormatter()"
        ],
        [
            "void",
            "org.springframework.format.number.AbstractNumberFormatter.setLenient(boolean)",
            "public void setLenient(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.AbstractNumberFormatter.print(java.lang.Number, java.util.Locale)",
            "public java.lang.String print(java.lang.Number, java.util.Locale)"
        ],
        [
            "java.lang.Number",
            "org.springframework.format.number.AbstractNumberFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Number parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.AbstractNumberFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.number.AbstractNumberFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.number.PercentStyleFormatter",
            "org.springframework.format.number.PercentStyleFormatter()",
            "public org.springframework.format.number.PercentStyleFormatter()"
        ],
        [
            "org.springframework.format.number.NumberStyleFormatter",
            "org.springframework.format.number.NumberStyleFormatter()",
            "public org.springframework.format.number.NumberStyleFormatter()"
        ],
        [
            "org.springframework.format.number.NumberStyleFormatter",
            "org.springframework.format.number.NumberStyleFormatter(java.lang.String)",
            "public org.springframework.format.number.NumberStyleFormatter(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.number.NumberStyleFormatter.setPattern(java.lang.String)",
            "public void setPattern(java.lang.String)"
        ],
        [
            "java.text.NumberFormat",
            "org.springframework.format.number.NumberStyleFormatter.getNumberFormat(java.util.Locale)",
            "public java.text.NumberFormat getNumberFormat(java.util.Locale)"
        ],
        [
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory()",
            "public org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory()"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory.getFieldTypes()",
            "public java.util.Set<java.lang.Class<?>> getFieldTypes()"
        ],
        [
            "org.springframework.format.Printer<javax.money.MonetaryAmount>",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory.getPrinter(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)",
            "public org.springframework.format.Printer<javax.money.MonetaryAmount> getPrinter(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser<javax.money.MonetaryAmount>",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory.getParser(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)",
            "public org.springframework.format.Parser<javax.money.MonetaryAmount> getParser(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory.getParser(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Parser getParser(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.Printer",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory.getPrinter(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Printer getPrinter(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.number.money.CurrencyUnitFormatter",
            "org.springframework.format.number.money.CurrencyUnitFormatter()",
            "public org.springframework.format.number.money.CurrencyUnitFormatter()"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.CurrencyUnitFormatter.print(javax.money.CurrencyUnit, java.util.Locale)",
            "public java.lang.String print(javax.money.CurrencyUnit, java.util.Locale)"
        ],
        [
            "javax.money.CurrencyUnit",
            "org.springframework.format.number.money.CurrencyUnitFormatter.parse(java.lang.String, java.util.Locale)",
            "public javax.money.CurrencyUnit parse(java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.CurrencyUnitFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.number.money.CurrencyUnitFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter(java.lang.String)",
            "public org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter.print(javax.money.MonetaryAmount, java.util.Locale)",
            "public java.lang.String print(javax.money.MonetaryAmount, java.util.Locale)"
        ],
        [
            "javax.money.MonetaryAmount",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter.parse(java.lang.String, java.util.Locale)",
            "public javax.money.MonetaryAmount parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$PatternDecoratingFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$NumberDecoratingFormatter",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$NumberDecoratingFormatter(org.springframework.format.Formatter<java.lang.Number>)",
            "public org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$NumberDecoratingFormatter(org.springframework.format.Formatter<java.lang.Number>)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$NumberDecoratingFormatter.print(javax.money.MonetaryAmount, java.util.Locale)",
            "public java.lang.String print(javax.money.MonetaryAmount, java.util.Locale)"
        ],
        [
            "javax.money.MonetaryAmount",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$NumberDecoratingFormatter.parse(java.lang.String, java.util.Locale)",
            "public javax.money.MonetaryAmount parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$NumberDecoratingFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory$NumberDecoratingFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.number.money.MonetaryAmountFormatter",
            "org.springframework.format.number.money.MonetaryAmountFormatter()",
            "public org.springframework.format.number.money.MonetaryAmountFormatter()"
        ],
        [
            "org.springframework.format.number.money.MonetaryAmountFormatter",
            "org.springframework.format.number.money.MonetaryAmountFormatter(java.lang.String)",
            "public org.springframework.format.number.money.MonetaryAmountFormatter(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.format.number.money.MonetaryAmountFormatter.setFormatName(java.lang.String)",
            "public void setFormatName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.MonetaryAmountFormatter.print(javax.money.MonetaryAmount, java.util.Locale)",
            "public java.lang.String print(javax.money.MonetaryAmount, java.util.Locale)"
        ],
        [
            "javax.money.MonetaryAmount",
            "org.springframework.format.number.money.MonetaryAmountFormatter.parse(java.lang.String, java.util.Locale)",
            "public javax.money.MonetaryAmount parse(java.lang.String, java.util.Locale)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.number.money.MonetaryAmountFormatter.print(java.lang.Object, java.util.Locale)",
            "public java.lang.String print(java.lang.Object, java.util.Locale)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.number.money.MonetaryAmountFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.number.NumberFormatAnnotationFormatterFactory",
            "org.springframework.format.number.NumberFormatAnnotationFormatterFactory()",
            "public org.springframework.format.number.NumberFormatAnnotationFormatterFactory()"
        ],
        [
            "java.util.Set<java.lang.Class<?>>",
            "org.springframework.format.number.NumberFormatAnnotationFormatterFactory.getFieldTypes()",
            "public java.util.Set<java.lang.Class<?>> getFieldTypes()"
        ],
        [
            "org.springframework.format.Printer<java.lang.Number>",
            "org.springframework.format.number.NumberFormatAnnotationFormatterFactory.getPrinter(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)",
            "public org.springframework.format.Printer<java.lang.Number> getPrinter(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser<java.lang.Number>",
            "org.springframework.format.number.NumberFormatAnnotationFormatterFactory.getParser(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)",
            "public org.springframework.format.Parser<java.lang.Number> getParser(org.springframework.format.annotation.NumberFormat, java.lang.Class<?>)"
        ],
        [
            "org.springframework.format.Parser",
            "org.springframework.format.number.NumberFormatAnnotationFormatterFactory.getParser(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Parser getParser(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.Printer",
            "org.springframework.format.number.NumberFormatAnnotationFormatterFactory.getPrinter(java.lang.annotation.Annotation, java.lang.Class)",
            "public org.springframework.format.Printer getPrinter(java.lang.annotation.Annotation, java.lang.Class)"
        ],
        [
            "org.springframework.format.number.CurrencyStyleFormatter",
            "org.springframework.format.number.CurrencyStyleFormatter()",
            "public org.springframework.format.number.CurrencyStyleFormatter()"
        ],
        [
            "void",
            "org.springframework.format.number.CurrencyStyleFormatter.setFractionDigits(int)",
            "public void setFractionDigits(int)"
        ],
        [
            "void",
            "org.springframework.format.number.CurrencyStyleFormatter.setRoundingMode(java.math.RoundingMode)",
            "public void setRoundingMode(java.math.RoundingMode)"
        ],
        [
            "void",
            "org.springframework.format.number.CurrencyStyleFormatter.setCurrency(java.util.Currency)",
            "public void setCurrency(java.util.Currency)"
        ],
        [
            "void",
            "org.springframework.format.number.CurrencyStyleFormatter.setPattern(java.lang.String)",
            "public void setPattern(java.lang.String)"
        ],
        [
            "java.math.BigDecimal",
            "org.springframework.format.number.CurrencyStyleFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.math.BigDecimal parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.Number",
            "org.springframework.format.number.CurrencyStyleFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Number parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.number.CurrencyStyleFormatter.parse(java.lang.String, java.util.Locale)",
            "public java.lang.Object parse(java.lang.String, java.util.Locale) throws java.text.ParseException"
        ],
        [
            "org.springframework.format.support.FormatterPropertyEditorAdapter",
            "org.springframework.format.support.FormatterPropertyEditorAdapter(org.springframework.format.Formatter<?>)",
            "public org.springframework.format.support.FormatterPropertyEditorAdapter(org.springframework.format.Formatter<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.format.support.FormatterPropertyEditorAdapter.getFieldType()",
            "public java.lang.Class<?> getFieldType()"
        ],
        [
            "void",
            "org.springframework.format.support.FormatterPropertyEditorAdapter.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "java.lang.String",
            "org.springframework.format.support.FormatterPropertyEditorAdapter.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.format.support.FormattingConversionService$AnnotationConverterKey",
            "org.springframework.format.support.FormattingConversionService$AnnotationConverterKey(java.lang.annotation.Annotation, java.lang.Class<?>)",
            "public org.springframework.format.support.FormattingConversionService$AnnotationConverterKey(java.lang.annotation.Annotation, java.lang.Class<?>)"
        ],
        [
            "java.lang.annotation.Annotation",
            "org.springframework.format.support.FormattingConversionService$AnnotationConverterKey.getAnnotation()",
            "public java.lang.annotation.Annotation getAnnotation()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.format.support.FormattingConversionService$AnnotationConverterKey.getFieldType()",
            "public java.lang.Class<?> getFieldType()"
        ],
        [
            "boolean",
            "org.springframework.format.support.FormattingConversionService$AnnotationConverterKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.format.support.FormattingConversionService$AnnotationConverterKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter",
            "org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter(java.lang.Class<? extends java.lang.annotation.Annotation>, org.springframework.format.AnnotationFormatterFactory<?>, java.lang.Class<?>)",
            "public org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter(java.lang.Class<? extends java.lang.annotation.Annotation>, org.springframework.format.AnnotationFormatterFactory<?>, java.lang.Class<?>)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.format.support.FormattingConversionService$PrinterConverter",
            "org.springframework.format.support.FormattingConversionService$PrinterConverter(java.lang.Class<?>, org.springframework.format.Printer<?>, org.springframework.core.convert.ConversionService)",
            "public org.springframework.format.support.FormattingConversionService$PrinterConverter(java.lang.Class<?>, org.springframework.format.Printer<?>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.format.support.FormattingConversionService$PrinterConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.support.FormattingConversionService$PrinterConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.support.FormattingConversionService$PrinterConverter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.format.support.FormattingConversionService",
            "org.springframework.format.support.FormattingConversionService()",
            "public org.springframework.format.support.FormattingConversionService()"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionService.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionService.addPrinter(org.springframework.format.Printer<?>)",
            "public void addPrinter(org.springframework.format.Printer<?>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionService.addParser(org.springframework.format.Parser<?>)",
            "public void addParser(org.springframework.format.Parser<?>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionService.addFormatter(org.springframework.format.Formatter<?>)",
            "public void addFormatter(org.springframework.format.Formatter<?>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionService.addFormatterForFieldType(java.lang.Class<?>, org.springframework.format.Formatter<?>)",
            "public void addFormatterForFieldType(java.lang.Class<?>, org.springframework.format.Formatter<?>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionService.addFormatterForFieldType(java.lang.Class<?>, org.springframework.format.Printer<?>, org.springframework.format.Parser<?>)",
            "public void addFormatterForFieldType(java.lang.Class<?>, org.springframework.format.Printer<?>, org.springframework.format.Parser<?>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionService.addFormatterForFieldAnnotation(org.springframework.format.AnnotationFormatterFactory<? extends java.lang.annotation.Annotation>)",
            "public void addFormatterForFieldAnnotation(org.springframework.format.AnnotationFormatterFactory<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "org.springframework.format.support.FormattingConversionServiceFactoryBean",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean()",
            "public org.springframework.format.support.FormattingConversionServiceFactoryBean()"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.setConverters(java.util.Set<?>)",
            "public void setConverters(java.util.Set<?>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatters(java.util.Set<?>)",
            "public void setFormatters(java.util.Set<?>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.setFormatterRegistrars(java.util.Set<org.springframework.format.FormatterRegistrar>)",
            "public void setFormatterRegistrars(java.util.Set<org.springframework.format.FormatterRegistrar>)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.setRegisterDefaultFormatters(boolean)",
            "public void setRegisterDefaultFormatters(boolean)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.format.support.FormattingConversionService",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject()",
            "public org.springframework.format.support.FormattingConversionService getObject()"
        ],
        [
            "java.lang.Class<? extends org.springframework.format.support.FormattingConversionService>",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.getObjectType()",
            "public java.lang.Class<? extends org.springframework.format.support.FormattingConversionService> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.support.FormattingConversionServiceFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.format.support.FormattingConversionService$AnnotationParserConverter",
            "org.springframework.format.support.FormattingConversionService$AnnotationParserConverter(java.lang.Class<? extends java.lang.annotation.Annotation>, org.springframework.format.AnnotationFormatterFactory<?>, java.lang.Class<?>)",
            "public org.springframework.format.support.FormattingConversionService$AnnotationParserConverter(java.lang.Class<? extends java.lang.annotation.Annotation>, org.springframework.format.AnnotationFormatterFactory<?>, java.lang.Class<?>)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.format.support.FormattingConversionService$AnnotationParserConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "boolean",
            "org.springframework.format.support.FormattingConversionService$AnnotationParserConverter.matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.support.FormattingConversionService$AnnotationParserConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.support.FormattingConversionService$AnnotationParserConverter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.format.support.DefaultFormattingConversionService",
            "org.springframework.format.support.DefaultFormattingConversionService()",
            "public org.springframework.format.support.DefaultFormattingConversionService()"
        ],
        [
            "org.springframework.format.support.DefaultFormattingConversionService",
            "org.springframework.format.support.DefaultFormattingConversionService(boolean)",
            "public org.springframework.format.support.DefaultFormattingConversionService(boolean)"
        ],
        [
            "org.springframework.format.support.DefaultFormattingConversionService",
            "org.springframework.format.support.DefaultFormattingConversionService(org.springframework.util.StringValueResolver, boolean)",
            "public org.springframework.format.support.DefaultFormattingConversionService(org.springframework.util.StringValueResolver, boolean)"
        ],
        [
            "void",
            "org.springframework.format.support.DefaultFormattingConversionService.addDefaultFormatters(org.springframework.format.FormatterRegistry)",
            "public static void addDefaultFormatters(org.springframework.format.FormatterRegistry)"
        ],
        [
            "org.springframework.format.support.FormattingConversionService$ParserConverter",
            "org.springframework.format.support.FormattingConversionService$ParserConverter(java.lang.Class<?>, org.springframework.format.Parser<?>, org.springframework.core.convert.ConversionService)",
            "public org.springframework.format.support.FormattingConversionService$ParserConverter(java.lang.Class<?>, org.springframework.format.Parser<?>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair>",
            "org.springframework.format.support.FormattingConversionService$ParserConverter.getConvertibleTypes()",
            "public java.util.Set<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair> getConvertibleTypes()"
        ],
        [
            "java.lang.Object",
            "org.springframework.format.support.FormattingConversionService$ParserConverter.convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)",
            "public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)"
        ],
        [
            "java.lang.String",
            "org.springframework.format.support.FormattingConversionService$ParserConverter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.format.annotation.DateTimeFormat$ISO[]",
            "org.springframework.format.annotation.DateTimeFormat$ISO.values()",
            "public static org.springframework.format.annotation.DateTimeFormat$ISO[] values()"
        ],
        [
            "org.springframework.format.annotation.DateTimeFormat$ISO",
            "org.springframework.format.annotation.DateTimeFormat$ISO.valueOf(java.lang.String)",
            "public static org.springframework.format.annotation.DateTimeFormat$ISO valueOf(java.lang.String)"
        ],
        [
            "org.springframework.format.annotation.NumberFormat$Style[]",
            "org.springframework.format.annotation.NumberFormat$Style.values()",
            "public static org.springframework.format.annotation.NumberFormat$Style[] values()"
        ],
        [
            "org.springframework.format.annotation.NumberFormat$Style",
            "org.springframework.format.annotation.NumberFormat$Style.valueOf(java.lang.String)",
            "public static org.springframework.format.annotation.NumberFormat$Style valueOf(java.lang.String)"
        ],
        [
            "default",
            "org.springframework.scheduling.SchedulingTaskExecutor.boolean prefersShortLivedTasks()",
            "public default boolean prefersShortLivedTasks()"
        ],
        [
            "default",
            "org.springframework.scheduling.TaskScheduler.java.time.Clock getClock()",
            "public default java.time.Clock getClock()"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.TaskScheduler.schedule(java.lang.Runnable, java.time.Instant)",
            "public default java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, java.time.Instant)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.TaskScheduler.scheduleAtFixedRate(java.lang.Runnable, java.time.Instant, java.time.Duration)",
            "public default java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, java.time.Instant, java.time.Duration)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.TaskScheduler.scheduleAtFixedRate(java.lang.Runnable, java.time.Duration)",
            "public default java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, java.time.Duration)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.TaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, java.time.Instant, java.time.Duration)",
            "public default java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, java.time.Instant, java.time.Duration)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.TaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, java.time.Duration)",
            "public default java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, java.time.Duration)"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser",
            "org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser()",
            "public org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser()"
        ],
        [
            "org.springframework.scheduling.config.Task",
            "org.springframework.scheduling.config.ScheduledTask.getTask()",
            "public org.springframework.scheduling.config.Task getTask()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTask.cancel()",
            "public void cancel()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTask.cancel(boolean)",
            "public void cancel(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.config.ScheduledTask.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.config.TaskExecutorFactoryBean",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean()",
            "public org.springframework.scheduling.config.TaskExecutorFactoryBean()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.setPoolSize(java.lang.String)",
            "public void setPoolSize(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.setQueueCapacity(int)",
            "public void setQueueCapacity(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)",
            "public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.setKeepAliveSeconds(int)",
            "public void setKeepAliveSeconds(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.core.task.TaskExecutor",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.getObject()",
            "public org.springframework.core.task.TaskExecutor getObject()"
        ],
        [
            "java.lang.Class<? extends org.springframework.core.task.TaskExecutor>",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.getObjectType()",
            "public java.lang.Class<? extends org.springframework.core.task.TaskExecutor> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.destroy()",
            "public void destroy()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.config.TaskExecutorFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.scheduling.config.FixedDelayTask",
            "org.springframework.scheduling.config.FixedDelayTask(java.lang.Runnable, long, long)",
            "public org.springframework.scheduling.config.FixedDelayTask(java.lang.Runnable, long, long)"
        ],
        [
            "org.springframework.scheduling.config.Task",
            "org.springframework.scheduling.config.Task(java.lang.Runnable)",
            "public org.springframework.scheduling.config.Task(java.lang.Runnable)"
        ],
        [
            "java.lang.Runnable",
            "org.springframework.scheduling.config.Task.getRunnable()",
            "public java.lang.Runnable getRunnable()"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.config.Task.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.config.ExecutorBeanDefinitionParser",
            "org.springframework.scheduling.config.ExecutorBeanDefinitionParser()",
            "public org.springframework.scheduling.config.ExecutorBeanDefinitionParser()"
        ],
        [
            "org.springframework.scheduling.config.TaskNamespaceHandler",
            "org.springframework.scheduling.config.TaskNamespaceHandler()",
            "public org.springframework.scheduling.config.TaskNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.TaskNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.scheduling.config.TaskManagementConfigUtils",
            "org.springframework.scheduling.config.TaskManagementConfigUtils()",
            "public org.springframework.scheduling.config.TaskManagementConfigUtils()"
        ],
        [
            "org.springframework.scheduling.config.AnnotationDrivenBeanDefinitionParser",
            "org.springframework.scheduling.config.AnnotationDrivenBeanDefinitionParser()",
            "public org.springframework.scheduling.config.AnnotationDrivenBeanDefinitionParser()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.scheduling.config.AnnotationDrivenBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.scheduling.config.CronTask",
            "org.springframework.scheduling.config.CronTask(java.lang.Runnable, java.lang.String)",
            "public org.springframework.scheduling.config.CronTask(java.lang.Runnable, java.lang.String)"
        ],
        [
            "org.springframework.scheduling.config.CronTask",
            "org.springframework.scheduling.config.CronTask(java.lang.Runnable, org.springframework.scheduling.support.CronTrigger)",
            "public org.springframework.scheduling.config.CronTask(java.lang.Runnable, org.springframework.scheduling.support.CronTrigger)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.config.CronTask.getExpression()",
            "public java.lang.String getExpression()"
        ],
        [
            "org.springframework.scheduling.config.ContextLifecycleScheduledTaskRegistrar",
            "org.springframework.scheduling.config.ContextLifecycleScheduledTaskRegistrar()",
            "public org.springframework.scheduling.config.ContextLifecycleScheduledTaskRegistrar()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ContextLifecycleScheduledTaskRegistrar.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ContextLifecycleScheduledTaskRegistrar.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "org.springframework.scheduling.config.TriggerTask",
            "org.springframework.scheduling.config.TriggerTask(java.lang.Runnable, org.springframework.scheduling.Trigger)",
            "public org.springframework.scheduling.config.TriggerTask(java.lang.Runnable, org.springframework.scheduling.Trigger)"
        ],
        [
            "org.springframework.scheduling.Trigger",
            "org.springframework.scheduling.config.TriggerTask.getTrigger()",
            "public org.springframework.scheduling.Trigger getTrigger()"
        ],
        [
            "org.springframework.scheduling.config.FixedRateTask",
            "org.springframework.scheduling.config.FixedRateTask(java.lang.Runnable, long, long)",
            "public org.springframework.scheduling.config.FixedRateTask(java.lang.Runnable, long, long)"
        ],
        [
            "org.springframework.scheduling.config.IntervalTask",
            "org.springframework.scheduling.config.IntervalTask(java.lang.Runnable, long, long)",
            "public org.springframework.scheduling.config.IntervalTask(java.lang.Runnable, long, long)"
        ],
        [
            "org.springframework.scheduling.config.IntervalTask",
            "org.springframework.scheduling.config.IntervalTask(java.lang.Runnable, long)",
            "public org.springframework.scheduling.config.IntervalTask(java.lang.Runnable, long)"
        ],
        [
            "long",
            "org.springframework.scheduling.config.IntervalTask.getInterval()",
            "public long getInterval()"
        ],
        [
            "long",
            "org.springframework.scheduling.config.IntervalTask.getInitialDelay()",
            "public long getInitialDelay()"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTaskRegistrar",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar()",
            "public org.springframework.scheduling.config.ScheduledTaskRegistrar()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setTaskScheduler(org.springframework.scheduling.TaskScheduler)",
            "public void setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setScheduler(java.lang.Object)",
            "public void setScheduler(java.lang.Object)"
        ],
        [
            "org.springframework.scheduling.TaskScheduler",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.getScheduler()",
            "public org.springframework.scheduling.TaskScheduler getScheduler()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setTriggerTasks(java.util.Map<java.lang.Runnable, org.springframework.scheduling.Trigger>)",
            "public void setTriggerTasks(java.util.Map<java.lang.Runnable, org.springframework.scheduling.Trigger>)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setTriggerTasksList(java.util.List<org.springframework.scheduling.config.TriggerTask>)",
            "public void setTriggerTasksList(java.util.List<org.springframework.scheduling.config.TriggerTask>)"
        ],
        [
            "java.util.List<org.springframework.scheduling.config.TriggerTask>",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.getTriggerTaskList()",
            "public java.util.List<org.springframework.scheduling.config.TriggerTask> getTriggerTaskList()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setCronTasks(java.util.Map<java.lang.Runnable, java.lang.String>)",
            "public void setCronTasks(java.util.Map<java.lang.Runnable, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setCronTasksList(java.util.List<org.springframework.scheduling.config.CronTask>)",
            "public void setCronTasksList(java.util.List<org.springframework.scheduling.config.CronTask>)"
        ],
        [
            "java.util.List<org.springframework.scheduling.config.CronTask>",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.getCronTaskList()",
            "public java.util.List<org.springframework.scheduling.config.CronTask> getCronTaskList()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setFixedRateTasks(java.util.Map<java.lang.Runnable, java.lang.Long>)",
            "public void setFixedRateTasks(java.util.Map<java.lang.Runnable, java.lang.Long>)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setFixedRateTasksList(java.util.List<org.springframework.scheduling.config.IntervalTask>)",
            "public void setFixedRateTasksList(java.util.List<org.springframework.scheduling.config.IntervalTask>)"
        ],
        [
            "java.util.List<org.springframework.scheduling.config.IntervalTask>",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.getFixedRateTaskList()",
            "public java.util.List<org.springframework.scheduling.config.IntervalTask> getFixedRateTaskList()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setFixedDelayTasks(java.util.Map<java.lang.Runnable, java.lang.Long>)",
            "public void setFixedDelayTasks(java.util.Map<java.lang.Runnable, java.lang.Long>)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.setFixedDelayTasksList(java.util.List<org.springframework.scheduling.config.IntervalTask>)",
            "public void setFixedDelayTasksList(java.util.List<org.springframework.scheduling.config.IntervalTask>)"
        ],
        [
            "java.util.List<org.springframework.scheduling.config.IntervalTask>",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.getFixedDelayTaskList()",
            "public java.util.List<org.springframework.scheduling.config.IntervalTask> getFixedDelayTaskList()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addTriggerTask(java.lang.Runnable, org.springframework.scheduling.Trigger)",
            "public void addTriggerTask(java.lang.Runnable, org.springframework.scheduling.Trigger)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addTriggerTask(org.springframework.scheduling.config.TriggerTask)",
            "public void addTriggerTask(org.springframework.scheduling.config.TriggerTask)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addCronTask(java.lang.Runnable, java.lang.String)",
            "public void addCronTask(java.lang.Runnable, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addCronTask(org.springframework.scheduling.config.CronTask)",
            "public void addCronTask(org.springframework.scheduling.config.CronTask)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addFixedRateTask(java.lang.Runnable, long)",
            "public void addFixedRateTask(java.lang.Runnable, long)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addFixedRateTask(org.springframework.scheduling.config.IntervalTask)",
            "public void addFixedRateTask(org.springframework.scheduling.config.IntervalTask)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addFixedDelayTask(java.lang.Runnable, long)",
            "public void addFixedDelayTask(java.lang.Runnable, long)"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.addFixedDelayTask(org.springframework.scheduling.config.IntervalTask)",
            "public void addFixedDelayTask(org.springframework.scheduling.config.IntervalTask)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.hasTasks()",
            "public boolean hasTasks()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTask",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.scheduleTriggerTask(org.springframework.scheduling.config.TriggerTask)",
            "public org.springframework.scheduling.config.ScheduledTask scheduleTriggerTask(org.springframework.scheduling.config.TriggerTask)"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTask",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.scheduleCronTask(org.springframework.scheduling.config.CronTask)",
            "public org.springframework.scheduling.config.ScheduledTask scheduleCronTask(org.springframework.scheduling.config.CronTask)"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTask",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.scheduleFixedRateTask(org.springframework.scheduling.config.IntervalTask)",
            "public org.springframework.scheduling.config.ScheduledTask scheduleFixedRateTask(org.springframework.scheduling.config.IntervalTask)"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTask",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.scheduleFixedRateTask(org.springframework.scheduling.config.FixedRateTask)",
            "public org.springframework.scheduling.config.ScheduledTask scheduleFixedRateTask(org.springframework.scheduling.config.FixedRateTask)"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTask",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.scheduleFixedDelayTask(org.springframework.scheduling.config.IntervalTask)",
            "public org.springframework.scheduling.config.ScheduledTask scheduleFixedDelayTask(org.springframework.scheduling.config.IntervalTask)"
        ],
        [
            "org.springframework.scheduling.config.ScheduledTask",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.scheduleFixedDelayTask(org.springframework.scheduling.config.FixedDelayTask)",
            "public org.springframework.scheduling.config.ScheduledTask scheduleFixedDelayTask(org.springframework.scheduling.config.FixedDelayTask)"
        ],
        [
            "java.util.Set<org.springframework.scheduling.config.ScheduledTask>",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.getScheduledTasks()",
            "public java.util.Set<org.springframework.scheduling.config.ScheduledTask> getScheduledTasks()"
        ],
        [
            "void",
            "org.springframework.scheduling.config.ScheduledTaskRegistrar.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.scheduling.config.SchedulerBeanDefinitionParser",
            "org.springframework.scheduling.config.SchedulerBeanDefinitionParser()",
            "public org.springframework.scheduling.config.SchedulerBeanDefinitionParser()"
        ],
        [
            "org.springframework.scheduling.support.PeriodicTrigger",
            "org.springframework.scheduling.support.PeriodicTrigger(long)",
            "public org.springframework.scheduling.support.PeriodicTrigger(long)"
        ],
        [
            "org.springframework.scheduling.support.PeriodicTrigger",
            "org.springframework.scheduling.support.PeriodicTrigger(long, java.util.concurrent.TimeUnit)",
            "public org.springframework.scheduling.support.PeriodicTrigger(long, java.util.concurrent.TimeUnit)"
        ],
        [
            "long",
            "org.springframework.scheduling.support.PeriodicTrigger.getPeriod()",
            "public long getPeriod()"
        ],
        [
            "java.util.concurrent.TimeUnit",
            "org.springframework.scheduling.support.PeriodicTrigger.getTimeUnit()",
            "public java.util.concurrent.TimeUnit getTimeUnit()"
        ],
        [
            "void",
            "org.springframework.scheduling.support.PeriodicTrigger.setInitialDelay(long)",
            "public void setInitialDelay(long)"
        ],
        [
            "long",
            "org.springframework.scheduling.support.PeriodicTrigger.getInitialDelay()",
            "public long getInitialDelay()"
        ],
        [
            "void",
            "org.springframework.scheduling.support.PeriodicTrigger.setFixedRate(boolean)",
            "public void setFixedRate(boolean)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.PeriodicTrigger.isFixedRate()",
            "public boolean isFixedRate()"
        ],
        [
            "java.util.Date",
            "org.springframework.scheduling.support.PeriodicTrigger.nextExecutionTime(org.springframework.scheduling.TriggerContext)",
            "public java.util.Date nextExecutionTime(org.springframework.scheduling.TriggerContext)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.PeriodicTrigger.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.PeriodicTrigger.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.QuartzCronField.isQuartzDaysOfMonthField(java.lang.String)",
            "public static boolean isQuartzDaysOfMonthField(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.QuartzCronField",
            "org.springframework.scheduling.support.QuartzCronField.parseDaysOfMonth(java.lang.String)",
            "public static org.springframework.scheduling.support.QuartzCronField parseDaysOfMonth(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.QuartzCronField.isQuartzDaysOfWeekField(java.lang.String)",
            "public static boolean isQuartzDaysOfWeekField(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.QuartzCronField",
            "org.springframework.scheduling.support.QuartzCronField.parseDaysOfWeek(java.lang.String)",
            "public static org.springframework.scheduling.support.QuartzCronField parseDaysOfWeek(java.lang.String)"
        ],
        [
            "<T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T",
            "org.springframework.scheduling.support.QuartzCronField.nextOrSame(T)",
            "public <T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T nextOrSame(T)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.QuartzCronField.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.QuartzCronField.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.QuartzCronField.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.MethodInvokingRunnable",
            "org.springframework.scheduling.support.MethodInvokingRunnable()",
            "public org.springframework.scheduling.support.MethodInvokingRunnable()"
        ],
        [
            "void",
            "org.springframework.scheduling.support.MethodInvokingRunnable.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.scheduling.support.MethodInvokingRunnable.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException"
        ],
        [
            "void",
            "org.springframework.scheduling.support.MethodInvokingRunnable.run()",
            "public void run()"
        ],
        [
            "org.springframework.scheduling.support.DelegatingErrorHandlingRunnable",
            "org.springframework.scheduling.support.DelegatingErrorHandlingRunnable(java.lang.Runnable, org.springframework.util.ErrorHandler)",
            "public org.springframework.scheduling.support.DelegatingErrorHandlingRunnable(java.lang.Runnable, org.springframework.util.ErrorHandler)"
        ],
        [
            "void",
            "org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run()",
            "public void run()"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.CronField$Type[]",
            "org.springframework.scheduling.support.CronField$Type.values()",
            "public static org.springframework.scheduling.support.CronField$Type[] values()"
        ],
        [
            "org.springframework.scheduling.support.CronField$Type",
            "org.springframework.scheduling.support.CronField$Type.valueOf(java.lang.String)",
            "public static org.springframework.scheduling.support.CronField$Type valueOf(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.CronField$Type.get(java.time.temporal.Temporal)",
            "public int get(java.time.temporal.Temporal)"
        ],
        [
            "java.time.temporal.ValueRange",
            "org.springframework.scheduling.support.CronField$Type.range()",
            "public java.time.temporal.ValueRange range()"
        ],
        [
            "int",
            "org.springframework.scheduling.support.CronField$Type.checkValidValue(int)",
            "public int checkValidValue(int)"
        ],
        [
            "<T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T",
            "org.springframework.scheduling.support.CronField$Type.elapseUntil(T, int)",
            "public <T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T elapseUntil(T, int)"
        ],
        [
            "<T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T",
            "org.springframework.scheduling.support.CronField$Type.rollForward(T)",
            "public <T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T rollForward(T)"
        ],
        [
            "<T extends java.time.temporal.Temporal> T",
            "org.springframework.scheduling.support.CronField$Type.reset(T)",
            "public <T extends java.time.temporal.Temporal> T reset(T)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.CronField$Type.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CronField.zeroNanos()",
            "public static org.springframework.scheduling.support.CronField zeroNanos()"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CronField.parseSeconds(java.lang.String)",
            "public static org.springframework.scheduling.support.CronField parseSeconds(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CronField.parseMinutes(java.lang.String)",
            "public static org.springframework.scheduling.support.CronField parseMinutes(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CronField.parseHours(java.lang.String)",
            "public static org.springframework.scheduling.support.CronField parseHours(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CronField.parseDaysOfMonth(java.lang.String)",
            "public static org.springframework.scheduling.support.CronField parseDaysOfMonth(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CronField.parseMonth(java.lang.String)",
            "public static org.springframework.scheduling.support.CronField parseMonth(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CronField.parseDaysOfWeek(java.lang.String)",
            "public static org.springframework.scheduling.support.CronField parseDaysOfWeek(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronField",
            "org.springframework.scheduling.support.CompositeCronField.compose(org.springframework.scheduling.support.CronField[], org.springframework.scheduling.support.CronField$Type, java.lang.String)",
            "public static org.springframework.scheduling.support.CronField compose(org.springframework.scheduling.support.CronField[], org.springframework.scheduling.support.CronField$Type, java.lang.String)"
        ],
        [
            "<T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T",
            "org.springframework.scheduling.support.CompositeCronField.nextOrSame(T)",
            "public <T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T nextOrSame(T)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.CompositeCronField.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.CompositeCronField.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.CompositeCronField.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.TaskUtils",
            "org.springframework.scheduling.support.TaskUtils()",
            "public org.springframework.scheduling.support.TaskUtils()"
        ],
        [
            "org.springframework.scheduling.support.DelegatingErrorHandlingRunnable",
            "org.springframework.scheduling.support.TaskUtils.decorateTaskWithErrorHandler(java.lang.Runnable, org.springframework.util.ErrorHandler, boolean)",
            "public static org.springframework.scheduling.support.DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(java.lang.Runnable, org.springframework.util.ErrorHandler, boolean)"
        ],
        [
            "org.springframework.util.ErrorHandler",
            "org.springframework.scheduling.support.TaskUtils.getDefaultErrorHandler(boolean)",
            "public static org.springframework.util.ErrorHandler getDefaultErrorHandler(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.support.TaskUtils$LoggingErrorHandler.handleError(java.lang.Throwable)",
            "public void handleError(java.lang.Throwable)"
        ],
        [
            "org.springframework.scheduling.support.SimpleTriggerContext",
            "org.springframework.scheduling.support.SimpleTriggerContext()",
            "public org.springframework.scheduling.support.SimpleTriggerContext()"
        ],
        [
            "org.springframework.scheduling.support.SimpleTriggerContext",
            "org.springframework.scheduling.support.SimpleTriggerContext(java.util.Date, java.util.Date, java.util.Date)",
            "public org.springframework.scheduling.support.SimpleTriggerContext(java.util.Date, java.util.Date, java.util.Date)"
        ],
        [
            "org.springframework.scheduling.support.SimpleTriggerContext",
            "org.springframework.scheduling.support.SimpleTriggerContext(java.time.Clock)",
            "public org.springframework.scheduling.support.SimpleTriggerContext(java.time.Clock)"
        ],
        [
            "void",
            "org.springframework.scheduling.support.SimpleTriggerContext.update(java.util.Date, java.util.Date, java.util.Date)",
            "public void update(java.util.Date, java.util.Date, java.util.Date)"
        ],
        [
            "java.time.Clock",
            "org.springframework.scheduling.support.SimpleTriggerContext.getClock()",
            "public java.time.Clock getClock()"
        ],
        [
            "java.util.Date",
            "org.springframework.scheduling.support.SimpleTriggerContext.lastScheduledExecutionTime()",
            "public java.util.Date lastScheduledExecutionTime()"
        ],
        [
            "java.util.Date",
            "org.springframework.scheduling.support.SimpleTriggerContext.lastActualExecutionTime()",
            "public java.util.Date lastActualExecutionTime()"
        ],
        [
            "java.util.Date",
            "org.springframework.scheduling.support.SimpleTriggerContext.lastCompletionTime()",
            "public java.util.Date lastCompletionTime()"
        ],
        [
            "void",
            "org.springframework.scheduling.support.TaskUtils$PropagatingErrorHandler.handleError(java.lang.Throwable)",
            "public void handleError(java.lang.Throwable)"
        ],
        [
            "org.springframework.scheduling.support.CronSequenceGenerator",
            "org.springframework.scheduling.support.CronSequenceGenerator(java.lang.String)",
            "public org.springframework.scheduling.support.CronSequenceGenerator(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronSequenceGenerator",
            "org.springframework.scheduling.support.CronSequenceGenerator(java.lang.String, java.util.TimeZone)",
            "public org.springframework.scheduling.support.CronSequenceGenerator(java.lang.String, java.util.TimeZone)"
        ],
        [
            "java.util.Date",
            "org.springframework.scheduling.support.CronSequenceGenerator.next(java.util.Date)",
            "public java.util.Date next(java.util.Date)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.CronSequenceGenerator.isValidExpression(java.lang.String)",
            "public static boolean isValidExpression(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.CronSequenceGenerator.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.CronSequenceGenerator.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.CronSequenceGenerator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.BitsCronField",
            "org.springframework.scheduling.support.BitsCronField.zeroNanos()",
            "public static org.springframework.scheduling.support.BitsCronField zeroNanos()"
        ],
        [
            "org.springframework.scheduling.support.BitsCronField",
            "org.springframework.scheduling.support.BitsCronField.parseSeconds(java.lang.String)",
            "public static org.springframework.scheduling.support.BitsCronField parseSeconds(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.BitsCronField",
            "org.springframework.scheduling.support.BitsCronField.parseMinutes(java.lang.String)",
            "public static org.springframework.scheduling.support.BitsCronField parseMinutes(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.BitsCronField",
            "org.springframework.scheduling.support.BitsCronField.parseHours(java.lang.String)",
            "public static org.springframework.scheduling.support.BitsCronField parseHours(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.BitsCronField",
            "org.springframework.scheduling.support.BitsCronField.parseDaysOfMonth(java.lang.String)",
            "public static org.springframework.scheduling.support.BitsCronField parseDaysOfMonth(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.BitsCronField",
            "org.springframework.scheduling.support.BitsCronField.parseMonth(java.lang.String)",
            "public static org.springframework.scheduling.support.BitsCronField parseMonth(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.BitsCronField",
            "org.springframework.scheduling.support.BitsCronField.parseDaysOfWeek(java.lang.String)",
            "public static org.springframework.scheduling.support.BitsCronField parseDaysOfWeek(java.lang.String)"
        ],
        [
            "<T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T",
            "org.springframework.scheduling.support.BitsCronField.nextOrSame(T)",
            "public <T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T nextOrSame(T)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.BitsCronField.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.BitsCronField.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.BitsCronField.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.ScheduledMethodRunnable",
            "org.springframework.scheduling.support.ScheduledMethodRunnable(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.scheduling.support.ScheduledMethodRunnable(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.scheduling.support.ScheduledMethodRunnable",
            "org.springframework.scheduling.support.ScheduledMethodRunnable(java.lang.Object, java.lang.String)",
            "public org.springframework.scheduling.support.ScheduledMethodRunnable(java.lang.Object, java.lang.String) throws java.lang.NoSuchMethodException"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.support.ScheduledMethodRunnable.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.scheduling.support.ScheduledMethodRunnable.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "void",
            "org.springframework.scheduling.support.ScheduledMethodRunnable.run()",
            "public void run()"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.ScheduledMethodRunnable.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.CronExpression",
            "org.springframework.scheduling.support.CronExpression.parse(java.lang.String)",
            "public static org.springframework.scheduling.support.CronExpression parse(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.CronExpression.isValidExpression(java.lang.String)",
            "public static boolean isValidExpression(java.lang.String)"
        ],
        [
            "<T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T",
            "org.springframework.scheduling.support.CronExpression.next(T)",
            "public <T extends java.time.temporal.Temporal & java.lang.Comparable<? super T>> T next(T)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.CronExpression.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.CronExpression.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.CronExpression.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.scheduling.support.CronTrigger",
            "org.springframework.scheduling.support.CronTrigger(java.lang.String)",
            "public org.springframework.scheduling.support.CronTrigger(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.support.CronTrigger",
            "org.springframework.scheduling.support.CronTrigger(java.lang.String, java.util.TimeZone)",
            "public org.springframework.scheduling.support.CronTrigger(java.lang.String, java.util.TimeZone)"
        ],
        [
            "org.springframework.scheduling.support.CronTrigger",
            "org.springframework.scheduling.support.CronTrigger(java.lang.String, java.time.ZoneId)",
            "public org.springframework.scheduling.support.CronTrigger(java.lang.String, java.time.ZoneId)"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.CronTrigger.getExpression()",
            "public java.lang.String getExpression()"
        ],
        [
            "java.util.Date",
            "org.springframework.scheduling.support.CronTrigger.nextExecutionTime(org.springframework.scheduling.TriggerContext)",
            "public java.util.Date nextExecutionTime(org.springframework.scheduling.TriggerContext)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.support.CronTrigger.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.scheduling.support.CronTrigger.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.scheduling.support.CronTrigger.toString()",
            "public java.lang.String toString()"
        ],
        [
            "default",
            "org.springframework.scheduling.TriggerContext.java.time.Clock getClock()",
            "public default java.time.Clock getClock()"
        ],
        [
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor()",
            "public org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor()"
        ],
        [
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor(org.springframework.scheduling.config.ScheduledTaskRegistrar)",
            "public org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor(org.springframework.scheduling.config.ScheduledTaskRegistrar)"
        ],
        [
            "int",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.setScheduler(java.lang.Object)",
            "public void setScheduler(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)",
            "public void onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)",
            "public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "java.util.Set<org.springframework.scheduling.config.ScheduledTask>",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.getScheduledTasks()",
            "public java.util.Set<org.springframework.scheduling.config.ScheduledTask> getScheduledTasks()"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.postProcessBeforeDestruction(java.lang.Object, java.lang.String)",
            "public void postProcessBeforeDestruction(java.lang.Object, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.requiresDestruction(java.lang.Object)",
            "public boolean requiresDestruction(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncConfigurerSupport",
            "org.springframework.scheduling.annotation.AsyncConfigurerSupport()",
            "public org.springframework.scheduling.annotation.AsyncConfigurerSupport()"
        ],
        [
            "java.util.concurrent.Executor",
            "org.springframework.scheduling.annotation.AsyncConfigurerSupport.getAsyncExecutor()",
            "public java.util.concurrent.Executor getAsyncExecutor()"
        ],
        [
            "org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler",
            "org.springframework.scheduling.annotation.AsyncConfigurerSupport.getAsyncUncaughtExceptionHandler()",
            "public org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler()"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor",
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor()",
            "public org.springframework.scheduling.annotation.AsyncAnnotationAdvisor()"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor",
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)",
            "public org.springframework.scheduling.annotation.AsyncAnnotationAdvisor(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor",
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor(java.util.function.Supplier<java.util.concurrent.Executor>, java.util.function.Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler>)",
            "public org.springframework.scheduling.annotation.AsyncAnnotationAdvisor(java.util.function.Supplier<java.util.concurrent.Executor>, java.util.function.Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler>)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setAsyncAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setAsyncAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.aopalliance.aop.Advice",
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.getAdvice()",
            "public org.aopalliance.aop.Advice getAdvice()"
        ],
        [
            "org.springframework.aop.Pointcut",
            "org.springframework.scheduling.annotation.AsyncAnnotationAdvisor.getPointcut()",
            "public org.springframework.aop.Pointcut getPointcut()"
        ],
        [
            "org.springframework.scheduling.annotation.AbstractAsyncConfiguration",
            "org.springframework.scheduling.annotation.AbstractAsyncConfiguration()",
            "public org.springframework.scheduling.annotation.AbstractAsyncConfiguration()"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AbstractAsyncConfiguration.setImportMetadata(org.springframework.core.type.AnnotationMetadata)",
            "public void setImportMetadata(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "org.springframework.scheduling.annotation.SchedulingConfiguration",
            "org.springframework.scheduling.annotation.SchedulingConfiguration()",
            "public org.springframework.scheduling.annotation.SchedulingConfiguration()"
        ],
        [
            "org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor",
            "org.springframework.scheduling.annotation.SchedulingConfiguration.scheduledAnnotationProcessor()",
            "public org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor scheduledAnnotationProcessor()"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor",
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor()",
            "public org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor()"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor.configure(java.util.function.Supplier<java.util.concurrent.Executor>, java.util.function.Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler>)",
            "public void configure(java.util.function.Supplier<java.util.concurrent.Executor>, java.util.function.Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler>)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor.setExecutor(java.util.concurrent.Executor)",
            "public void setExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor.setExceptionHandler(org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)",
            "public void setExceptionHandler(org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor.setAsyncAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)",
            "public void setAsyncAnnotationType(java.lang.Class<? extends java.lang.annotation.Annotation>)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "default",
            "org.springframework.scheduling.annotation.AsyncConfigurer.java.util.concurrent.Executor getAsyncExecutor()",
            "public default java.util.concurrent.Executor getAsyncExecutor()"
        ],
        [
            "default",
            "org.springframework.scheduling.annotation.AsyncConfigurer.org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler()",
            "public default org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler()"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncConfigurationSelector",
            "org.springframework.scheduling.annotation.AsyncConfigurationSelector()",
            "public org.springframework.scheduling.annotation.AsyncConfigurationSelector()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.scheduling.annotation.AsyncConfigurationSelector.selectImports(org.springframework.context.annotation.AdviceMode)",
            "public java.lang.String[] selectImports(org.springframework.context.annotation.AdviceMode)"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncResult",
            "org.springframework.scheduling.annotation.AsyncResult(V)",
            "public org.springframework.scheduling.annotation.AsyncResult(V)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.annotation.AsyncResult.cancel(boolean)",
            "public boolean cancel(boolean)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.annotation.AsyncResult.isCancelled()",
            "public boolean isCancelled()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.annotation.AsyncResult.isDone()",
            "public boolean isDone()"
        ],
        [
            "V",
            "org.springframework.scheduling.annotation.AsyncResult.get()",
            "public V get() throws java.util.concurrent.ExecutionException"
        ],
        [
            "V",
            "org.springframework.scheduling.annotation.AsyncResult.get(long, java.util.concurrent.TimeUnit)",
            "public V get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncResult.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super V>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super V>)"
        ],
        [
            "void",
            "org.springframework.scheduling.annotation.AsyncResult.addCallback(org.springframework.util.concurrent.SuccessCallback<? super V>, org.springframework.util.concurrent.FailureCallback)",
            "public void addCallback(org.springframework.util.concurrent.SuccessCallback<? super V>, org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "java.util.concurrent.CompletableFuture<V>",
            "org.springframework.scheduling.annotation.AsyncResult.completable()",
            "public java.util.concurrent.CompletableFuture<V> completable()"
        ],
        [
            "<V> org.springframework.util.concurrent.ListenableFuture<V>",
            "org.springframework.scheduling.annotation.AsyncResult.forValue(V)",
            "public static <V> org.springframework.util.concurrent.ListenableFuture<V> forValue(V)"
        ],
        [
            "<V> org.springframework.util.concurrent.ListenableFuture<V>",
            "org.springframework.scheduling.annotation.AsyncResult.forExecutionException(java.lang.Throwable)",
            "public static <V> org.springframework.util.concurrent.ListenableFuture<V> forExecutionException(java.lang.Throwable)"
        ],
        [
            "org.springframework.scheduling.annotation.ProxyAsyncConfiguration",
            "org.springframework.scheduling.annotation.ProxyAsyncConfiguration()",
            "public org.springframework.scheduling.annotation.ProxyAsyncConfiguration()"
        ],
        [
            "org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor",
            "org.springframework.scheduling.annotation.ProxyAsyncConfiguration.asyncAdvisor()",
            "public org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor asyncAdvisor()"
        ],
        [
            "org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor",
            "org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor(java.util.concurrent.Executor)",
            "public org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor(java.util.concurrent.Executor)"
        ],
        [
            "org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor",
            "org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)",
            "public org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor(java.util.concurrent.Executor, org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler)"
        ],
        [
            "org.springframework.scheduling.SchedulingException",
            "org.springframework.scheduling.SchedulingException(java.lang.String)",
            "public org.springframework.scheduling.SchedulingException(java.lang.String)"
        ],
        [
            "org.springframework.scheduling.SchedulingException",
            "org.springframework.scheduling.SchedulingException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.scheduling.SchedulingException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable(java.util.concurrent.Callable<V>, org.springframework.util.ErrorHandler)",
            "public org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable(java.util.concurrent.Callable<V>, org.springframework.util.ErrorHandler)"
        ],
        [
            "V",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler$DelegatingErrorHandlingCallable.call()",
            "public V call() throws java.lang.Exception"
        ],
        [
            "org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor()",
            "public org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor.setJndiTemplate(org.springframework.jndi.JndiTemplate)",
            "public void setJndiTemplate(org.springframework.jndi.JndiTemplate)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor.setJndiEnvironment(java.util.Properties)",
            "public void setJndiEnvironment(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor.setResourceRef(boolean)",
            "public void setResourceRef(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor.setJndiName(java.lang.String)",
            "public void setJndiName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor()",
            "public org.springframework.scheduling.concurrent.ConcurrentTaskExecutor()"
        ],
        [
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor(java.util.concurrent.Executor)",
            "public org.springframework.scheduling.concurrent.ConcurrentTaskExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.setConcurrentExecutor(java.util.concurrent.Executor)",
            "public final void setConcurrentExecutor(java.util.concurrent.Executor)"
        ],
        [
            "java.util.concurrent.Executor",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.getConcurrentExecutor()",
            "public final java.util.concurrent.Executor getConcurrentExecutor()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.setTaskDecorator(org.springframework.core.task.TaskDecorator)",
            "public final void setTaskDecorator(org.springframework.core.task.TaskDecorator)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.execute(java.lang.Runnable, long)",
            "public void execute(java.lang.Runnable, long)"
        ],
        [
            "java.util.concurrent.Future<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.submit(java.lang.Runnable)",
            "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"
        ],
        [
            "<T> java.util.concurrent.Future<T>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.submit(java.util.concurrent.Callable<T>)",
            "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.submitListenable(java.lang.Runnable)",
            "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor.submitListenable(java.util.concurrent.Callable<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport()",
            "public org.springframework.scheduling.concurrent.ExecutorConfigurationSupport()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.setThreadFactory(java.util.concurrent.ThreadFactory)",
            "public void setThreadFactory(java.util.concurrent.ThreadFactory)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.setThreadNamePrefix(java.lang.String)",
            "public void setThreadNamePrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)",
            "public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.setWaitForTasksToCompleteOnShutdown(boolean)",
            "public void setWaitForTasksToCompleteOnShutdown(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.setAwaitTerminationSeconds(int)",
            "public void setAwaitTerminationSeconds(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.setAwaitTerminationMillis(long)",
            "public void setAwaitTerminationMillis(long)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize()",
            "public void initialize()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown()",
            "public void shutdown()"
        ],
        [
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler()",
            "public org.springframework.scheduling.concurrent.ConcurrentTaskScheduler()"
        ],
        [
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler(java.util.concurrent.ScheduledExecutorService)",
            "public org.springframework.scheduling.concurrent.ConcurrentTaskScheduler(java.util.concurrent.ScheduledExecutorService)"
        ],
        [
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler(java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService)",
            "public org.springframework.scheduling.concurrent.ConcurrentTaskScheduler(java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.setScheduledExecutor(java.util.concurrent.ScheduledExecutorService)",
            "public void setScheduledExecutor(java.util.concurrent.ScheduledExecutorService)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.setErrorHandler(org.springframework.util.ErrorHandler)",
            "public void setErrorHandler(org.springframework.util.ErrorHandler)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.setClock(java.time.Clock)",
            "public void setClock(java.time.Clock)"
        ],
        [
            "java.time.Clock",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.getClock()",
            "public java.time.Clock getClock()"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)",
            "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.schedule(java.lang.Runnable, java.util.Date)",
            "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, java.util.Date)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.scheduleAtFixedRate(java.lang.Runnable, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long)"
        ],
        [
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter(java.util.concurrent.Executor)",
            "public org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "java.util.concurrent.Future<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter.submit(java.lang.Runnable)",
            "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"
        ],
        [
            "<T> java.util.concurrent.Future<T>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter.submit(java.util.concurrent.Callable<T>)",
            "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter.submitListenable(java.lang.Runnable)",
            "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskExecutorAdapter.submitListenable(java.util.concurrent.Callable<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor$1.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean()",
            "public org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.setCorePoolSize(int)",
            "public void setCorePoolSize(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.setMaxPoolSize(int)",
            "public void setMaxPoolSize(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.setKeepAliveSeconds(int)",
            "public void setKeepAliveSeconds(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.setAllowCoreThreadTimeOut(boolean)",
            "public void setAllowCoreThreadTimeOut(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.setPrestartAllCoreThreads(boolean)",
            "public void setPrestartAllCoreThreads(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.setQueueCapacity(int)",
            "public void setQueueCapacity(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.setExposeUnconfigurableExecutor(boolean)",
            "public void setExposeUnconfigurableExecutor(boolean)"
        ],
        [
            "java.util.concurrent.ExecutorService",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.getObject()",
            "public java.util.concurrent.ExecutorService getObject()"
        ],
        [
            "java.lang.Class<? extends java.util.concurrent.ExecutorService>",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.getObjectType()",
            "public java.lang.Class<? extends java.util.concurrent.ExecutorService> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory",
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory()",
            "public org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory.setJndiTemplate(org.springframework.jndi.JndiTemplate)",
            "public void setJndiTemplate(org.springframework.jndi.JndiTemplate)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory.setJndiEnvironment(java.util.Properties)",
            "public void setJndiEnvironment(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory.setResourceRef(boolean)",
            "public void setResourceRef(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory.setJndiName(java.lang.String)",
            "public void setJndiName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "java.lang.Thread",
            "org.springframework.scheduling.concurrent.DefaultManagedAwareThreadFactory.newThread(java.lang.Runnable)",
            "public java.lang.Thread newThread(java.lang.Runnable)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler$EnterpriseConcurrentTriggerScheduler.schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)",
            "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)"
        ],
        [
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean()",
            "public org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.setPoolSize(int)",
            "public void setPoolSize(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.setScheduledExecutorTasks(org.springframework.scheduling.concurrent.ScheduledExecutorTask...)",
            "public void setScheduledExecutorTasks(org.springframework.scheduling.concurrent.ScheduledExecutorTask...)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.setRemoveOnCancelPolicy(boolean)",
            "public void setRemoveOnCancelPolicy(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.setContinueScheduledExecutionAfterException(boolean)",
            "public void setContinueScheduledExecutionAfterException(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.setExposeUnconfigurableExecutor(boolean)",
            "public void setExposeUnconfigurableExecutor(boolean)"
        ],
        [
            "java.util.concurrent.ScheduledExecutorService",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.getObject()",
            "public java.util.concurrent.ScheduledExecutorService getObject()"
        ],
        [
            "java.lang.Class<? extends java.util.concurrent.ScheduledExecutorService>",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.getObjectType()",
            "public java.lang.Class<? extends java.util.concurrent.ScheduledExecutorService> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask()",
            "public org.springframework.scheduling.concurrent.ScheduledExecutorTask()"
        ],
        [
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask(java.lang.Runnable)",
            "public org.springframework.scheduling.concurrent.ScheduledExecutorTask(java.lang.Runnable)"
        ],
        [
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask(java.lang.Runnable, long)",
            "public org.springframework.scheduling.concurrent.ScheduledExecutorTask(java.lang.Runnable, long)"
        ],
        [
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask(java.lang.Runnable, long, long, boolean)",
            "public org.springframework.scheduling.concurrent.ScheduledExecutorTask(java.lang.Runnable, long, long, boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.setRunnable(java.lang.Runnable)",
            "public void setRunnable(java.lang.Runnable)"
        ],
        [
            "java.lang.Runnable",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.getRunnable()",
            "public java.lang.Runnable getRunnable()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.setDelay(long)",
            "public void setDelay(long)"
        ],
        [
            "long",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.getDelay()",
            "public long getDelay()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.setPeriod(long)",
            "public void setPeriod(long)"
        ],
        [
            "long",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.getPeriod()",
            "public long getPeriod()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.isOneTimeTask()",
            "public boolean isOneTimeTask()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.setTimeUnit(java.util.concurrent.TimeUnit)",
            "public void setTimeUnit(java.util.concurrent.TimeUnit)"
        ],
        [
            "java.util.concurrent.TimeUnit",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.getTimeUnit()",
            "public java.util.concurrent.TimeUnit getTimeUnit()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.setFixedRate(boolean)",
            "public void setFixedRate(boolean)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ScheduledExecutorTask.isFixedRate()",
            "public boolean isFixedRate()"
        ],
        [
            "org.springframework.scheduling.concurrent.CustomizableThreadFactory",
            "org.springframework.scheduling.concurrent.CustomizableThreadFactory()",
            "public org.springframework.scheduling.concurrent.CustomizableThreadFactory()"
        ],
        [
            "org.springframework.scheduling.concurrent.CustomizableThreadFactory",
            "org.springframework.scheduling.concurrent.CustomizableThreadFactory(java.lang.String)",
            "public org.springframework.scheduling.concurrent.CustomizableThreadFactory(java.lang.String)"
        ],
        [
            "java.lang.Thread",
            "org.springframework.scheduling.concurrent.CustomizableThreadFactory.newThread(java.lang.Runnable)",
            "public java.lang.Thread newThread(java.lang.Runnable)"
        ],
        [
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor()",
            "public org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setCorePoolSize(int)",
            "public void setCorePoolSize(int)"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getCorePoolSize()",
            "public int getCorePoolSize()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setMaxPoolSize(int)",
            "public void setMaxPoolSize(int)"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getMaxPoolSize()",
            "public int getMaxPoolSize()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setKeepAliveSeconds(int)",
            "public void setKeepAliveSeconds(int)"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getKeepAliveSeconds()",
            "public int getKeepAliveSeconds()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setQueueCapacity(int)",
            "public void setQueueCapacity(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setAllowCoreThreadTimeOut(boolean)",
            "public void setAllowCoreThreadTimeOut(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setPrestartAllCoreThreads(boolean)",
            "public void setPrestartAllCoreThreads(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.setTaskDecorator(org.springframework.core.task.TaskDecorator)",
            "public void setTaskDecorator(org.springframework.core.task.TaskDecorator)"
        ],
        [
            "java.util.concurrent.ThreadPoolExecutor",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getThreadPoolExecutor()",
            "public java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor() throws java.lang.IllegalStateException"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getPoolSize()",
            "public int getPoolSize()"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.getActiveCount()",
            "public int getActiveCount()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.execute(java.lang.Runnable, long)",
            "public void execute(java.lang.Runnable, long)"
        ],
        [
            "java.util.concurrent.Future<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.submit(java.lang.Runnable)",
            "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"
        ],
        [
            "<T> java.util.concurrent.Future<T>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.submit(java.util.concurrent.Callable<T>)",
            "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.submitListenable(java.lang.Runnable)",
            "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.submitListenable(java.util.concurrent.Callable<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean()",
            "public org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.setCommonPool(boolean)",
            "public void setCommonPool(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.setParallelism(int)",
            "public void setParallelism(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.setThreadFactory(java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory)",
            "public void setThreadFactory(java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)",
            "public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.setAsyncMode(boolean)",
            "public void setAsyncMode(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.setAwaitTerminationSeconds(int)",
            "public void setAwaitTerminationSeconds(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.util.concurrent.ForkJoinPool",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.getObject()",
            "public java.util.concurrent.ForkJoinPool getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.destroy()",
            "public void destroy()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.concurrent.ForkJoinPoolFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler()",
            "public org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setPoolSize(int)",
            "public void setPoolSize(int)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setRemoveOnCancelPolicy(boolean)",
            "public void setRemoveOnCancelPolicy(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)",
            "public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)",
            "public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setErrorHandler(org.springframework.util.ErrorHandler)",
            "public void setErrorHandler(org.springframework.util.ErrorHandler)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.setClock(java.time.Clock)",
            "public void setClock(java.time.Clock)"
        ],
        [
            "java.time.Clock",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.getClock()",
            "public java.time.Clock getClock()"
        ],
        [
            "java.util.concurrent.ScheduledExecutorService",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.getScheduledExecutor()",
            "public java.util.concurrent.ScheduledExecutorService getScheduledExecutor() throws java.lang.IllegalStateException"
        ],
        [
            "java.util.concurrent.ScheduledThreadPoolExecutor",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.getScheduledThreadPoolExecutor()",
            "public java.util.concurrent.ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws java.lang.IllegalStateException"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.getPoolSize()",
            "public int getPoolSize()"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.getActiveCount()",
            "public int getActiveCount()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.isRemoveOnCancelPolicy()",
            "public boolean isRemoveOnCancelPolicy()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(java.lang.Runnable)",
            "public void execute(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.execute(java.lang.Runnable, long)",
            "public void execute(java.lang.Runnable, long)"
        ],
        [
            "java.util.concurrent.Future<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(java.lang.Runnable)",
            "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"
        ],
        [
            "<T> java.util.concurrent.Future<T>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submit(java.util.concurrent.Callable<T>)",
            "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submitListenable(java.lang.Runnable)",
            "public org.springframework.util.concurrent.ListenableFuture<?> submitListenable(java.lang.Runnable)"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.submitListenable(java.util.concurrent.Callable<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(java.util.concurrent.Callable<T>)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)",
            "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, org.springframework.scheduling.Trigger)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.schedule(java.lang.Runnable, java.util.Date)",
            "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, java.util.Date)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, java.util.Date, long)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.scheduleAtFixedRate(java.lang.Runnable, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, java.util.Date, long)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.scheduleWithFixedDelay(java.lang.Runnable, long)",
            "public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long)"
        ],
        [
            "org.springframework.scheduling.concurrent.ReschedulingRunnable",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable(java.lang.Runnable, org.springframework.scheduling.Trigger, java.time.Clock, java.util.concurrent.ScheduledExecutorService, org.springframework.util.ErrorHandler)",
            "public org.springframework.scheduling.concurrent.ReschedulingRunnable(java.lang.Runnable, org.springframework.scheduling.Trigger, java.time.Clock, java.util.concurrent.ScheduledExecutorService, org.springframework.util.ErrorHandler)"
        ],
        [
            "java.util.concurrent.ScheduledFuture<?>",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.schedule()",
            "public java.util.concurrent.ScheduledFuture<?> schedule()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.run()",
            "public void run()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.cancel(boolean)",
            "public boolean cancel(boolean)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.isCancelled()",
            "public boolean isCancelled()"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.isDone()",
            "public boolean isDone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.get()",
            "public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"
        ],
        [
            "java.lang.Object",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.get(long, java.util.concurrent.TimeUnit)",
            "public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"
        ],
        [
            "long",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.getDelay(java.util.concurrent.TimeUnit)",
            "public long getDelay(java.util.concurrent.TimeUnit)"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.compareTo(java.util.concurrent.Delayed)",
            "public int compareTo(java.util.concurrent.Delayed)"
        ],
        [
            "int",
            "org.springframework.scheduling.concurrent.ReschedulingRunnable.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "java.util.Date",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler$EnterpriseConcurrentTriggerScheduler$1.getNextRunTime(javax.enterprise.concurrent.LastExecution, java.util.Date)",
            "public java.util.Date getNextRunTime(javax.enterprise.concurrent.LastExecution, java.util.Date)"
        ],
        [
            "boolean",
            "org.springframework.scheduling.concurrent.ConcurrentTaskScheduler$EnterpriseConcurrentTriggerScheduler$1.skipRun(javax.enterprise.concurrent.LastExecution, java.util.Date)",
            "public boolean skipRun(javax.enterprise.concurrent.LastExecution, java.util.Date)"
        ],
        [
            "java.lang.Runnable",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskBuilder.buildManagedTask(java.lang.Runnable, java.lang.String)",
            "public static java.lang.Runnable buildManagedTask(java.lang.Runnable, java.lang.String)"
        ],
        [
            "<T> java.util.concurrent.Callable<T>",
            "org.springframework.scheduling.concurrent.ConcurrentTaskExecutor$ManagedTaskBuilder.buildManagedTask(java.util.concurrent.Callable<T>, java.lang.String)",
            "public static <T> java.util.concurrent.Callable<T> buildManagedTask(java.util.concurrent.Callable<T>, java.lang.String)"
        ],
        [
            "org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler()",
            "public org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler()"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler.setJndiTemplate(org.springframework.jndi.JndiTemplate)",
            "public void setJndiTemplate(org.springframework.jndi.JndiTemplate)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler.setJndiEnvironment(java.util.Properties)",
            "public void setJndiEnvironment(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler.setResourceRef(boolean)",
            "public void setResourceRef(boolean)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler.setJndiName(java.lang.String)",
            "public void setJndiName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "org.springframework.jmx.MBeanServerNotFoundException",
            "org.springframework.jmx.MBeanServerNotFoundException(java.lang.String)",
            "public org.springframework.jmx.MBeanServerNotFoundException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.MBeanServerNotFoundException",
            "org.springframework.jmx.MBeanServerNotFoundException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.MBeanServerNotFoundException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean()",
            "public org.springframework.jmx.support.MBeanServerConnectionFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.setServiceUrl(java.lang.String)",
            "public void setServiceUrl(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.setEnvironment(java.util.Properties)",
            "public void setEnvironment(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.setEnvironmentMap(java.util.Map<java.lang.String, ?>)",
            "public void setEnvironmentMap(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.setConnectOnStartup(boolean)",
            "public void setConnectOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.io.IOException"
        ],
        [
            "javax.management.MBeanServerConnection",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.getObject()",
            "public javax.management.MBeanServerConnection getObject()"
        ],
        [
            "java.lang.Class<? extends javax.management.MBeanServerConnection>",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.getObjectType()",
            "public java.lang.Class<? extends javax.management.MBeanServerConnection> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.destroy()",
            "public void destroy() throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean$JMXConnectorLazyInitTargetSource.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "org.springframework.jmx.support.MBeanServerFactoryBean",
            "org.springframework.jmx.support.MBeanServerFactoryBean()",
            "public org.springframework.jmx.support.MBeanServerFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerFactoryBean.setLocateExistingServerIfPossible(boolean)",
            "public void setLocateExistingServerIfPossible(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerFactoryBean.setAgentId(java.lang.String)",
            "public void setAgentId(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerFactoryBean.setDefaultDomain(java.lang.String)",
            "public void setDefaultDomain(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerFactoryBean.setRegisterWithFactory(boolean)",
            "public void setRegisterWithFactory(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws org.springframework.jmx.MBeanServerNotFoundException"
        ],
        [
            "javax.management.MBeanServer",
            "org.springframework.jmx.support.MBeanServerFactoryBean.getObject()",
            "public javax.management.MBeanServer getObject()"
        ],
        [
            "java.lang.Class<? extends javax.management.MBeanServer>",
            "org.springframework.jmx.support.MBeanServerFactoryBean.getObjectType()",
            "public java.lang.Class<? extends javax.management.MBeanServer> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jmx.support.MBeanServerFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanServerFactoryBean.destroy()",
            "public void destroy()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.support.MBeanServerFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.jmx.support.RegistrationPolicy[]",
            "org.springframework.jmx.support.RegistrationPolicy.values()",
            "public static org.springframework.jmx.support.RegistrationPolicy[] values()"
        ],
        [
            "org.springframework.jmx.support.RegistrationPolicy",
            "org.springframework.jmx.support.RegistrationPolicy.valueOf(java.lang.String)",
            "public static org.springframework.jmx.support.RegistrationPolicy valueOf(java.lang.String)"
        ],
        [
            "org.springframework.jmx.support.JmxUtils",
            "org.springframework.jmx.support.JmxUtils()",
            "public org.springframework.jmx.support.JmxUtils()"
        ],
        [
            "javax.management.MBeanServer",
            "org.springframework.jmx.support.JmxUtils.locateMBeanServer()",
            "public static javax.management.MBeanServer locateMBeanServer() throws org.springframework.jmx.MBeanServerNotFoundException"
        ],
        [
            "javax.management.MBeanServer",
            "org.springframework.jmx.support.JmxUtils.locateMBeanServer(java.lang.String)",
            "public static javax.management.MBeanServer locateMBeanServer(java.lang.String) throws org.springframework.jmx.MBeanServerNotFoundException"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.jmx.support.JmxUtils.parameterInfoToTypes(javax.management.MBeanParameterInfo[])",
            "public static java.lang.Class<?>[] parameterInfoToTypes(javax.management.MBeanParameterInfo[]) throws java.lang.ClassNotFoundException"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.jmx.support.JmxUtils.parameterInfoToTypes(javax.management.MBeanParameterInfo[], java.lang.ClassLoader)",
            "public static java.lang.Class<?>[] parameterInfoToTypes(javax.management.MBeanParameterInfo[], java.lang.ClassLoader) throws java.lang.ClassNotFoundException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jmx.support.JmxUtils.getMethodSignature(java.lang.reflect.Method)",
            "public static java.lang.String[] getMethodSignature(java.lang.reflect.Method)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.support.JmxUtils.getAttributeName(java.beans.PropertyDescriptor, boolean)",
            "public static java.lang.String getAttributeName(java.beans.PropertyDescriptor, boolean)"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.support.JmxUtils.appendIdentityToObjectName(javax.management.ObjectName, java.lang.Object)",
            "public static javax.management.ObjectName appendIdentityToObjectName(javax.management.ObjectName, java.lang.Object) throws javax.management.MalformedObjectNameException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jmx.support.JmxUtils.getClassToExpose(java.lang.Object)",
            "public static java.lang.Class<?> getClassToExpose(java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jmx.support.JmxUtils.getClassToExpose(java.lang.Class<?>)",
            "public static java.lang.Class<?> getClassToExpose(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.jmx.support.JmxUtils.isMBean(java.lang.Class<?>)",
            "public static boolean isMBean(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jmx.support.JmxUtils.getMBeanInterface(java.lang.Class<?>)",
            "public static java.lang.Class<?> getMBeanInterface(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jmx.support.JmxUtils.getMXBeanInterface(java.lang.Class<?>)",
            "public static java.lang.Class<?> getMXBeanInterface(java.lang.Class<?>)"
        ],
        [
            "org.springframework.jmx.support.MBeanRegistrationSupport",
            "org.springframework.jmx.support.MBeanRegistrationSupport()",
            "public org.springframework.jmx.support.MBeanRegistrationSupport()"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanRegistrationSupport.setServer(javax.management.MBeanServer)",
            "public void setServer(javax.management.MBeanServer)"
        ],
        [
            "javax.management.MBeanServer",
            "org.springframework.jmx.support.MBeanRegistrationSupport.getServer()",
            "public final javax.management.MBeanServer getServer()"
        ],
        [
            "void",
            "org.springframework.jmx.support.MBeanRegistrationSupport.setRegistrationPolicy(org.springframework.jmx.support.RegistrationPolicy)",
            "public void setRegistrationPolicy(org.springframework.jmx.support.RegistrationPolicy)"
        ],
        [
            "org.springframework.jmx.support.NotificationListenerHolder",
            "org.springframework.jmx.support.NotificationListenerHolder()",
            "public org.springframework.jmx.support.NotificationListenerHolder()"
        ],
        [
            "void",
            "org.springframework.jmx.support.NotificationListenerHolder.setNotificationListener(javax.management.NotificationListener)",
            "public void setNotificationListener(javax.management.NotificationListener)"
        ],
        [
            "javax.management.NotificationListener",
            "org.springframework.jmx.support.NotificationListenerHolder.getNotificationListener()",
            "public javax.management.NotificationListener getNotificationListener()"
        ],
        [
            "void",
            "org.springframework.jmx.support.NotificationListenerHolder.setNotificationFilter(javax.management.NotificationFilter)",
            "public void setNotificationFilter(javax.management.NotificationFilter)"
        ],
        [
            "javax.management.NotificationFilter",
            "org.springframework.jmx.support.NotificationListenerHolder.getNotificationFilter()",
            "public javax.management.NotificationFilter getNotificationFilter()"
        ],
        [
            "void",
            "org.springframework.jmx.support.NotificationListenerHolder.setHandback(java.lang.Object)",
            "public void setHandback(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.support.NotificationListenerHolder.getHandback()",
            "public java.lang.Object getHandback()"
        ],
        [
            "void",
            "org.springframework.jmx.support.NotificationListenerHolder.setMappedObjectName(java.lang.Object)",
            "public void setMappedObjectName(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jmx.support.NotificationListenerHolder.setMappedObjectNames(java.lang.Object...)",
            "public void setMappedObjectNames(java.lang.Object...)"
        ],
        [
            "javax.management.ObjectName[]",
            "org.springframework.jmx.support.NotificationListenerHolder.getResolvedObjectNames()",
            "public javax.management.ObjectName[] getResolvedObjectNames() throws javax.management.MalformedObjectNameException"
        ],
        [
            "boolean",
            "org.springframework.jmx.support.NotificationListenerHolder.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.jmx.support.NotificationListenerHolder.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.jmx.support.ConnectorServerFactoryBean",
            "org.springframework.jmx.support.ConnectorServerFactoryBean()",
            "public org.springframework.jmx.support.ConnectorServerFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.setServiceUrl(java.lang.String)",
            "public void setServiceUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.setEnvironment(java.util.Properties)",
            "public void setEnvironment(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.setEnvironmentMap(java.util.Map<java.lang.String, ?>)",
            "public void setEnvironmentMap(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.setForwarder(javax.management.remote.MBeanServerForwarder)",
            "public void setForwarder(javax.management.remote.MBeanServerForwarder)"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.setObjectName(java.lang.Object)",
            "public void setObjectName(java.lang.Object) throws javax.management.MalformedObjectNameException"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.setThreaded(boolean)",
            "public void setThreaded(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.setDaemon(boolean)",
            "public void setDaemon(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.management.JMException, java.io.IOException"
        ],
        [
            "javax.management.remote.JMXConnectorServer",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.getObject()",
            "public javax.management.remote.JMXConnectorServer getObject()"
        ],
        [
            "java.lang.Class<? extends javax.management.remote.JMXConnectorServer>",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.getObjectType()",
            "public java.lang.Class<? extends javax.management.remote.JMXConnectorServer> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.destroy()",
            "public void destroy() throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.support.ConnectorServerFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.jmx.support.MetricType[]",
            "org.springframework.jmx.support.MetricType.values()",
            "public static org.springframework.jmx.support.MetricType[] values()"
        ],
        [
            "org.springframework.jmx.support.MetricType",
            "org.springframework.jmx.support.MetricType.valueOf(java.lang.String)",
            "public static org.springframework.jmx.support.MetricType valueOf(java.lang.String)"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.support.ObjectNameManager.getInstance(java.lang.Object)",
            "public static javax.management.ObjectName getInstance(java.lang.Object) throws javax.management.MalformedObjectNameException"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.support.ObjectNameManager.getInstance(java.lang.String)",
            "public static javax.management.ObjectName getInstance(java.lang.String) throws javax.management.MalformedObjectNameException"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.support.ObjectNameManager.getInstance(java.lang.String, java.lang.String, java.lang.String)",
            "public static javax.management.ObjectName getInstance(java.lang.String, java.lang.String, java.lang.String) throws javax.management.MalformedObjectNameException"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.support.ObjectNameManager.getInstance(java.lang.String, java.util.Hashtable<java.lang.String, java.lang.String>)",
            "public static javax.management.ObjectName getInstance(java.lang.String, java.util.Hashtable<java.lang.String, java.lang.String>) throws javax.management.MalformedObjectNameException"
        ],
        [
            "org.springframework.jmx.support.WebSphereMBeanServerFactoryBean",
            "org.springframework.jmx.support.WebSphereMBeanServerFactoryBean()",
            "public org.springframework.jmx.support.WebSphereMBeanServerFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jmx.support.WebSphereMBeanServerFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws org.springframework.jmx.MBeanServerNotFoundException"
        ],
        [
            "javax.management.MBeanServer",
            "org.springframework.jmx.support.WebSphereMBeanServerFactoryBean.getObject()",
            "public javax.management.MBeanServer getObject()"
        ],
        [
            "java.lang.Class<? extends javax.management.MBeanServer>",
            "org.springframework.jmx.support.WebSphereMBeanServerFactoryBean.getObjectType()",
            "public java.lang.Class<? extends javax.management.MBeanServer> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jmx.support.WebSphereMBeanServerFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.support.WebSphereMBeanServerFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jmx.support.MBeanServerConnectionFactoryBean$MBeanServerConnectionLazyInitTargetSource.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "void",
            "org.springframework.jmx.support.ConnectorServerFactoryBean$1.run()",
            "public void run()"
        ],
        [
            "org.springframework.jmx.export.UnableToRegisterMBeanException",
            "org.springframework.jmx.export.UnableToRegisterMBeanException(java.lang.String)",
            "public org.springframework.jmx.export.UnableToRegisterMBeanException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.export.UnableToRegisterMBeanException",
            "org.springframework.jmx.export.UnableToRegisterMBeanException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.export.UnableToRegisterMBeanException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jmx.export.NotificationListenerBean",
            "org.springframework.jmx.export.NotificationListenerBean()",
            "public org.springframework.jmx.export.NotificationListenerBean()"
        ],
        [
            "org.springframework.jmx.export.NotificationListenerBean",
            "org.springframework.jmx.export.NotificationListenerBean(javax.management.NotificationListener)",
            "public org.springframework.jmx.export.NotificationListenerBean(javax.management.NotificationListener)"
        ],
        [
            "void",
            "org.springframework.jmx.export.NotificationListenerBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jmx.export.MBeanExporter",
            "org.springframework.jmx.export.MBeanExporter()",
            "public org.springframework.jmx.export.MBeanExporter()"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setBeans(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setBeans(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setAutodetect(boolean)",
            "public void setAutodetect(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setAutodetectMode(int)",
            "public void setAutodetectMode(int)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setAutodetectModeName(java.lang.String)",
            "public void setAutodetectModeName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setAllowEagerInit(boolean)",
            "public void setAllowEagerInit(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setAssembler(org.springframework.jmx.export.assembler.MBeanInfoAssembler)",
            "public void setAssembler(org.springframework.jmx.export.assembler.MBeanInfoAssembler)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setNamingStrategy(org.springframework.jmx.export.naming.ObjectNamingStrategy)",
            "public void setNamingStrategy(org.springframework.jmx.export.naming.ObjectNamingStrategy)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setEnsureUniqueRuntimeObjectNames(boolean)",
            "public void setEnsureUniqueRuntimeObjectNames(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setExposeManagedResourceClassLoader(boolean)",
            "public void setExposeManagedResourceClassLoader(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setExcludedBeans(java.lang.String...)",
            "public void setExcludedBeans(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.addExcludedBean(java.lang.String)",
            "public void addExcludedBean(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setListeners(org.springframework.jmx.export.MBeanExporterListener...)",
            "public void setListeners(org.springframework.jmx.export.MBeanExporterListener...)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setNotificationListeners(org.springframework.jmx.export.NotificationListenerBean...)",
            "public void setNotificationListeners(org.springframework.jmx.export.NotificationListenerBean...)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setNotificationListenerMappings(java.util.Map<?, ? extends javax.management.NotificationListener>)",
            "public void setNotificationListenerMappings(java.util.Map<?, ? extends javax.management.NotificationListener>)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.destroy()",
            "public void destroy()"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.export.MBeanExporter.registerManagedResource(java.lang.Object)",
            "public javax.management.ObjectName registerManagedResource(java.lang.Object) throws org.springframework.jmx.export.MBeanExportException"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.registerManagedResource(java.lang.Object, javax.management.ObjectName)",
            "public void registerManagedResource(java.lang.Object, javax.management.ObjectName) throws org.springframework.jmx.export.MBeanExportException"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter.unregisterManagedResource(javax.management.ObjectName)",
            "public void unregisterManagedResource(javax.management.ObjectName)"
        ],
        [
            "org.springframework.jmx.export.notification.UnableToSendNotificationException",
            "org.springframework.jmx.export.notification.UnableToSendNotificationException(java.lang.String)",
            "public org.springframework.jmx.export.notification.UnableToSendNotificationException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.export.notification.UnableToSendNotificationException",
            "org.springframework.jmx.export.notification.UnableToSendNotificationException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.export.notification.UnableToSendNotificationException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher",
            "org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher(javax.management.modelmbean.ModelMBeanNotificationBroadcaster, javax.management.ObjectName, java.lang.Object)",
            "public org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher(javax.management.modelmbean.ModelMBeanNotificationBroadcaster, javax.management.ObjectName, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher.sendNotification(javax.management.Notification)",
            "public void sendNotification(javax.management.Notification)"
        ],
        [
            "org.springframework.jmx.export.SpringModelMBean",
            "org.springframework.jmx.export.SpringModelMBean()",
            "public org.springframework.jmx.export.SpringModelMBean() throws javax.management.MBeanException, javax.management.RuntimeOperationsException"
        ],
        [
            "org.springframework.jmx.export.SpringModelMBean",
            "org.springframework.jmx.export.SpringModelMBean(javax.management.modelmbean.ModelMBeanInfo)",
            "public org.springframework.jmx.export.SpringModelMBean(javax.management.modelmbean.ModelMBeanInfo) throws javax.management.MBeanException, javax.management.RuntimeOperationsException"
        ],
        [
            "void",
            "org.springframework.jmx.export.SpringModelMBean.setManagedResource(java.lang.Object, java.lang.String)",
            "public void setManagedResource(java.lang.Object, java.lang.String) throws javax.management.MBeanException, javax.management.InstanceNotFoundException, javax.management.modelmbean.InvalidTargetObjectTypeException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.export.SpringModelMBean.invoke(java.lang.String, java.lang.Object[], java.lang.String[])",
            "public java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws javax.management.MBeanException, javax.management.ReflectionException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.export.SpringModelMBean.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException"
        ],
        [
            "javax.management.AttributeList",
            "org.springframework.jmx.export.SpringModelMBean.getAttributes(java.lang.String[])",
            "public javax.management.AttributeList getAttributes(java.lang.String[])"
        ],
        [
            "void",
            "org.springframework.jmx.export.SpringModelMBean.setAttribute(javax.management.Attribute)",
            "public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException"
        ],
        [
            "javax.management.AttributeList",
            "org.springframework.jmx.export.SpringModelMBean.setAttributes(javax.management.AttributeList)",
            "public javax.management.AttributeList setAttributes(javax.management.AttributeList)"
        ],
        [
            "org.springframework.jmx.export.naming.MetadataNamingStrategy",
            "org.springframework.jmx.export.naming.MetadataNamingStrategy()",
            "public org.springframework.jmx.export.naming.MetadataNamingStrategy()"
        ],
        [
            "org.springframework.jmx.export.naming.MetadataNamingStrategy",
            "org.springframework.jmx.export.naming.MetadataNamingStrategy(org.springframework.jmx.export.metadata.JmxAttributeSource)",
            "public org.springframework.jmx.export.naming.MetadataNamingStrategy(org.springframework.jmx.export.metadata.JmxAttributeSource)"
        ],
        [
            "void",
            "org.springframework.jmx.export.naming.MetadataNamingStrategy.setAttributeSource(org.springframework.jmx.export.metadata.JmxAttributeSource)",
            "public void setAttributeSource(org.springframework.jmx.export.metadata.JmxAttributeSource)"
        ],
        [
            "void",
            "org.springframework.jmx.export.naming.MetadataNamingStrategy.setDefaultDomain(java.lang.String)",
            "public void setDefaultDomain(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.export.naming.MetadataNamingStrategy.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.export.naming.MetadataNamingStrategy.getObjectName(java.lang.Object, java.lang.String)",
            "public javax.management.ObjectName getObjectName(java.lang.Object, java.lang.String) throws javax.management.MalformedObjectNameException"
        ],
        [
            "org.springframework.jmx.export.naming.IdentityNamingStrategy",
            "org.springframework.jmx.export.naming.IdentityNamingStrategy()",
            "public org.springframework.jmx.export.naming.IdentityNamingStrategy()"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.export.naming.IdentityNamingStrategy.getObjectName(java.lang.Object, java.lang.String)",
            "public javax.management.ObjectName getObjectName(java.lang.Object, java.lang.String) throws javax.management.MalformedObjectNameException"
        ],
        [
            "org.springframework.jmx.export.naming.KeyNamingStrategy",
            "org.springframework.jmx.export.naming.KeyNamingStrategy()",
            "public org.springframework.jmx.export.naming.KeyNamingStrategy()"
        ],
        [
            "void",
            "org.springframework.jmx.export.naming.KeyNamingStrategy.setMappings(java.util.Properties)",
            "public void setMappings(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.jmx.export.naming.KeyNamingStrategy.setMappingLocation(org.springframework.core.io.Resource)",
            "public void setMappingLocation(org.springframework.core.io.Resource)"
        ],
        [
            "void",
            "org.springframework.jmx.export.naming.KeyNamingStrategy.setMappingLocations(org.springframework.core.io.Resource...)",
            "public void setMappingLocations(org.springframework.core.io.Resource...)"
        ],
        [
            "void",
            "org.springframework.jmx.export.naming.KeyNamingStrategy.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.io.IOException"
        ],
        [
            "javax.management.ObjectName",
            "org.springframework.jmx.export.naming.KeyNamingStrategy.getObjectName(java.lang.Object, java.lang.String)",
            "public javax.management.ObjectName getObjectName(java.lang.Object, java.lang.String) throws javax.management.MalformedObjectNameException"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource.setModelMBean(javax.management.modelmbean.ModelMBean)",
            "public void setModelMBean(javax.management.modelmbean.ModelMBean)"
        ],
        [
            "void",
            "org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource.setObjectName(javax.management.ObjectName)",
            "public void setObjectName(javax.management.ObjectName)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "org.springframework.jmx.export.annotation.AnnotationMBeanExporter",
            "org.springframework.jmx.export.annotation.AnnotationMBeanExporter()",
            "public org.springframework.jmx.export.annotation.AnnotationMBeanExporter()"
        ],
        [
            "void",
            "org.springframework.jmx.export.annotation.AnnotationMBeanExporter.setDefaultDomain(java.lang.String)",
            "public void setDefaultDomain(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.export.annotation.AnnotationMBeanExporter.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource()",
            "public org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource()"
        ],
        [
            "void",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedResource",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedResource(java.lang.Class<?>)",
            "public org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class<?>) throws org.springframework.jmx.export.metadata.InvalidMetadataException"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedAttribute",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedAttribute(java.lang.reflect.Method)",
            "public org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedMetric",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedMetric(java.lang.reflect.Method)",
            "public org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedOperation",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedOperation(java.lang.reflect.Method)",
            "public org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedOperationParameter[]",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedOperationParameters(java.lang.reflect.Method)",
            "public org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(java.lang.reflect.Method) throws org.springframework.jmx.export.metadata.InvalidMetadataException"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedNotification[]",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource.getManagedNotifications(java.lang.Class<?>)",
            "public org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(java.lang.Class<?>) throws org.springframework.jmx.export.metadata.InvalidMetadataException"
        ],
        [
            "org.springframework.jmx.export.MBeanExportException",
            "org.springframework.jmx.export.MBeanExportException(java.lang.String)",
            "public org.springframework.jmx.export.MBeanExportException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.export.MBeanExportException",
            "org.springframework.jmx.export.MBeanExportException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.export.MBeanExportException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler()"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler.setManagedInterfaces(java.lang.Class<?>...)",
            "public void setManagedInterfaces(java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler.setInterfaceMappings(java.util.Properties)",
            "public void setInterfaceMappings(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler()"
        ],
        [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler(org.springframework.jmx.export.metadata.JmxAttributeSource)",
            "public org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler(org.springframework.jmx.export.metadata.JmxAttributeSource)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler.setAttributeSource(org.springframework.jmx.export.metadata.JmxAttributeSource)",
            "public void setAttributeSource(org.springframework.jmx.export.metadata.JmxAttributeSource)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "boolean",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler.includeBean(java.lang.Class<?>, java.lang.String)",
            "public boolean includeBean(java.lang.Class<?>, java.lang.String)"
        ],
        [
            "org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler()"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler.setIgnoredMethods(java.lang.String...)",
            "public void setIgnoredMethods(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.MethodExclusionMBeanInfoAssembler.setIgnoredMethodMappings(java.util.Properties)",
            "public void setIgnoredMethodMappings(java.util.Properties)"
        ],
        [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler()"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler.setDefaultCurrencyTimeLimit(java.lang.Integer)",
            "public void setDefaultCurrencyTimeLimit(java.lang.Integer)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler.setUseStrictCasing(boolean)",
            "public void setUseStrictCasing(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler.setExposeClassDescriptor(boolean)",
            "public void setExposeClassDescriptor(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler()"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler.setNotificationInfos(org.springframework.jmx.export.metadata.ManagedNotification[])",
            "public void setNotificationInfos(org.springframework.jmx.export.metadata.ManagedNotification[])"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.AbstractConfigurableMBeanInfoAssembler.setNotificationInfoMappings(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setNotificationInfoMappings(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler()"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler.setManagedMethods(java.lang.String...)",
            "public void setManagedMethods(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler.setMethodMappings(java.util.Properties)",
            "public void setMethodMappings(java.util.Properties)"
        ],
        [
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler()"
        ],
        [
            "javax.management.modelmbean.ModelMBeanInfo",
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler.getMBeanInfo(java.lang.Object, java.lang.String)",
            "public javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object, java.lang.String) throws javax.management.JMException"
        ],
        [
            "org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler",
            "org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler()",
            "public org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler()"
        ],
        [
            "org.springframework.jmx.export.metadata.AbstractJmxAttribute",
            "org.springframework.jmx.export.metadata.AbstractJmxAttribute()",
            "public org.springframework.jmx.export.metadata.AbstractJmxAttribute()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.AbstractJmxAttribute.setDescription(java.lang.String)",
            "public void setDescription(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.AbstractJmxAttribute.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.AbstractJmxAttribute.setCurrencyTimeLimit(int)",
            "public void setCurrencyTimeLimit(int)"
        ],
        [
            "int",
            "org.springframework.jmx.export.metadata.AbstractJmxAttribute.getCurrencyTimeLimit()",
            "public int getCurrencyTimeLimit()"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedNotification",
            "org.springframework.jmx.export.metadata.ManagedNotification()",
            "public org.springframework.jmx.export.metadata.ManagedNotification()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedNotification.setNotificationType(java.lang.String)",
            "public void setNotificationType(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedNotification.setNotificationTypes(java.lang.String...)",
            "public void setNotificationTypes(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jmx.export.metadata.ManagedNotification.getNotificationTypes()",
            "public java.lang.String[] getNotificationTypes()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedNotification.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedNotification.getName()",
            "public java.lang.String getName()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedNotification.setDescription(java.lang.String)",
            "public void setDescription(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedNotification.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "org.springframework.jmx.export.metadata.JmxMetadataUtils",
            "org.springframework.jmx.export.metadata.JmxMetadataUtils()",
            "public org.springframework.jmx.export.metadata.JmxMetadataUtils()"
        ],
        [
            "javax.management.modelmbean.ModelMBeanNotificationInfo",
            "org.springframework.jmx.export.metadata.JmxMetadataUtils.convertToModelMBeanNotificationInfo(org.springframework.jmx.export.metadata.ManagedNotification)",
            "public static javax.management.modelmbean.ModelMBeanNotificationInfo convertToModelMBeanNotificationInfo(org.springframework.jmx.export.metadata.ManagedNotification)"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedOperation",
            "org.springframework.jmx.export.metadata.ManagedOperation()",
            "public org.springframework.jmx.export.metadata.ManagedOperation()"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedOperationParameter",
            "org.springframework.jmx.export.metadata.ManagedOperationParameter()",
            "public org.springframework.jmx.export.metadata.ManagedOperationParameter()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedOperationParameter.setIndex(int)",
            "public void setIndex(int)"
        ],
        [
            "int",
            "org.springframework.jmx.export.metadata.ManagedOperationParameter.getIndex()",
            "public int getIndex()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedOperationParameter.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedOperationParameter.getName()",
            "public java.lang.String getName()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedOperationParameter.setDescription(java.lang.String)",
            "public void setDescription(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedOperationParameter.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "org.springframework.jmx.export.metadata.InvalidMetadataException",
            "org.springframework.jmx.export.metadata.InvalidMetadataException(java.lang.String)",
            "public org.springframework.jmx.export.metadata.InvalidMetadataException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedResource",
            "org.springframework.jmx.export.metadata.ManagedResource()",
            "public org.springframework.jmx.export.metadata.ManagedResource()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedResource.setObjectName(java.lang.String)",
            "public void setObjectName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedResource.getObjectName()",
            "public java.lang.String getObjectName()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedResource.setLog(boolean)",
            "public void setLog(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jmx.export.metadata.ManagedResource.isLog()",
            "public boolean isLog()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedResource.setLogFile(java.lang.String)",
            "public void setLogFile(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedResource.getLogFile()",
            "public java.lang.String getLogFile()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedResource.setPersistPolicy(java.lang.String)",
            "public void setPersistPolicy(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedResource.getPersistPolicy()",
            "public java.lang.String getPersistPolicy()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedResource.setPersistPeriod(int)",
            "public void setPersistPeriod(int)"
        ],
        [
            "int",
            "org.springframework.jmx.export.metadata.ManagedResource.getPersistPeriod()",
            "public int getPersistPeriod()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedResource.setPersistName(java.lang.String)",
            "public void setPersistName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedResource.getPersistName()",
            "public java.lang.String getPersistName()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedResource.setPersistLocation(java.lang.String)",
            "public void setPersistLocation(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedResource.getPersistLocation()",
            "public java.lang.String getPersistLocation()"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedAttribute",
            "org.springframework.jmx.export.metadata.ManagedAttribute()",
            "public org.springframework.jmx.export.metadata.ManagedAttribute()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedAttribute.setDefaultValue(java.lang.Object)",
            "public void setDefaultValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.export.metadata.ManagedAttribute.getDefaultValue()",
            "public java.lang.Object getDefaultValue()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedAttribute.setPersistPolicy(java.lang.String)",
            "public void setPersistPolicy(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedAttribute.getPersistPolicy()",
            "public java.lang.String getPersistPolicy()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedAttribute.setPersistPeriod(int)",
            "public void setPersistPeriod(int)"
        ],
        [
            "int",
            "org.springframework.jmx.export.metadata.ManagedAttribute.getPersistPeriod()",
            "public int getPersistPeriod()"
        ],
        [
            "org.springframework.jmx.export.metadata.ManagedMetric",
            "org.springframework.jmx.export.metadata.ManagedMetric()",
            "public org.springframework.jmx.export.metadata.ManagedMetric()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedMetric.setCategory(java.lang.String)",
            "public void setCategory(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedMetric.getCategory()",
            "public java.lang.String getCategory()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedMetric.setDisplayName(java.lang.String)",
            "public void setDisplayName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedMetric.getDisplayName()",
            "public java.lang.String getDisplayName()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedMetric.setMetricType(org.springframework.jmx.support.MetricType)",
            "public void setMetricType(org.springframework.jmx.support.MetricType)"
        ],
        [
            "org.springframework.jmx.support.MetricType",
            "org.springframework.jmx.export.metadata.ManagedMetric.getMetricType()",
            "public org.springframework.jmx.support.MetricType getMetricType()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedMetric.setPersistPeriod(int)",
            "public void setPersistPeriod(int)"
        ],
        [
            "int",
            "org.springframework.jmx.export.metadata.ManagedMetric.getPersistPeriod()",
            "public int getPersistPeriod()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedMetric.setPersistPolicy(java.lang.String)",
            "public void setPersistPolicy(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedMetric.getPersistPolicy()",
            "public java.lang.String getPersistPolicy()"
        ],
        [
            "void",
            "org.springframework.jmx.export.metadata.ManagedMetric.setUnit(java.lang.String)",
            "public void setUnit(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.export.metadata.ManagedMetric.getUnit()",
            "public java.lang.String getUnit()"
        ],
        [
            "org.springframework.jmx.access.MBeanProxyFactoryBean",
            "org.springframework.jmx.access.MBeanProxyFactoryBean()",
            "public org.springframework.jmx.access.MBeanProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanProxyFactoryBean.setProxyInterface(java.lang.Class<?>)",
            "public void setProxyInterface(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanProxyFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws org.springframework.jmx.MBeanServerNotFoundException, org.springframework.jmx.access.MBeanInfoRetrievalException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.access.MBeanProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jmx.access.MBeanProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jmx.access.MBeanProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.jmx.access.NotificationListenerRegistrar",
            "org.springframework.jmx.access.NotificationListenerRegistrar()",
            "public org.springframework.jmx.access.NotificationListenerRegistrar()"
        ],
        [
            "void",
            "org.springframework.jmx.access.NotificationListenerRegistrar.setServer(javax.management.MBeanServerConnection)",
            "public void setServer(javax.management.MBeanServerConnection)"
        ],
        [
            "void",
            "org.springframework.jmx.access.NotificationListenerRegistrar.setEnvironment(java.util.Map<java.lang.String, ?>)",
            "public void setEnvironment(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.jmx.access.NotificationListenerRegistrar.getEnvironment()",
            "public java.util.Map<java.lang.String, ?> getEnvironment()"
        ],
        [
            "void",
            "org.springframework.jmx.access.NotificationListenerRegistrar.setServiceUrl(java.lang.String)",
            "public void setServiceUrl(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "void",
            "org.springframework.jmx.access.NotificationListenerRegistrar.setAgentId(java.lang.String)",
            "public void setAgentId(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.access.NotificationListenerRegistrar.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jmx.access.NotificationListenerRegistrar.prepare()",
            "public void prepare()"
        ],
        [
            "void",
            "org.springframework.jmx.access.NotificationListenerRegistrar.destroy()",
            "public void destroy()"
        ],
        [
            "javax.management.MBeanServerConnection",
            "org.springframework.jmx.access.ConnectorDelegate.connect(javax.management.remote.JMXServiceURL, java.util.Map<java.lang.String, ?>, java.lang.String)",
            "public javax.management.MBeanServerConnection connect(javax.management.remote.JMXServiceURL, java.util.Map<java.lang.String, ?>, java.lang.String) throws org.springframework.jmx.MBeanServerNotFoundException"
        ],
        [
            "void",
            "org.springframework.jmx.access.ConnectorDelegate.close()",
            "public void close()"
        ],
        [
            "org.springframework.jmx.access.MBeanConnectFailureException",
            "org.springframework.jmx.access.MBeanConnectFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.access.MBeanConnectFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey",
            "org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey(java.lang.String, java.lang.Class<?>[])",
            "public org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey(java.lang.String, java.lang.Class<?>[])"
        ],
        [
            "boolean",
            "org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey.compareTo(org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey)",
            "public int compareTo(org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey)"
        ],
        [
            "int",
            "org.springframework.jmx.access.MBeanClientInterceptor$MethodCacheKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.jmx.access.MBeanClientInterceptor",
            "org.springframework.jmx.access.MBeanClientInterceptor()",
            "public org.springframework.jmx.access.MBeanClientInterceptor()"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setServer(javax.management.MBeanServerConnection)",
            "public void setServer(javax.management.MBeanServerConnection)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setServiceUrl(java.lang.String)",
            "public void setServiceUrl(java.lang.String) throws java.net.MalformedURLException"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setEnvironment(java.util.Map<java.lang.String, ?>)",
            "public void setEnvironment(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.jmx.access.MBeanClientInterceptor.getEnvironment()",
            "public java.util.Map<java.lang.String, ?> getEnvironment()"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setAgentId(java.lang.String)",
            "public void setAgentId(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setConnectOnStartup(boolean)",
            "public void setConnectOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setRefreshOnConnectFailure(boolean)",
            "public void setRefreshOnConnectFailure(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setObjectName(java.lang.Object)",
            "public void setObjectName(java.lang.Object) throws javax.management.MalformedObjectNameException"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setUseStrictCasing(boolean)",
            "public void setUseStrictCasing(boolean)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setManagementInterface(java.lang.Class<?>)",
            "public void setManagementInterface(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.prepare()",
            "public void prepare()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jmx.access.MBeanClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "void",
            "org.springframework.jmx.access.MBeanClientInterceptor.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.jmx.access.InvocationFailureException",
            "org.springframework.jmx.access.InvocationFailureException(java.lang.String)",
            "public org.springframework.jmx.access.InvocationFailureException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.access.InvocationFailureException",
            "org.springframework.jmx.access.InvocationFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.access.InvocationFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jmx.access.MBeanInfoRetrievalException",
            "org.springframework.jmx.access.MBeanInfoRetrievalException(java.lang.String)",
            "public org.springframework.jmx.access.MBeanInfoRetrievalException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.access.MBeanInfoRetrievalException",
            "org.springframework.jmx.access.MBeanInfoRetrievalException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.access.MBeanInfoRetrievalException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jmx.access.InvalidInvocationException",
            "org.springframework.jmx.access.InvalidInvocationException(java.lang.String)",
            "public org.springframework.jmx.access.InvalidInvocationException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.JmxException",
            "org.springframework.jmx.JmxException(java.lang.String)",
            "public org.springframework.jmx.JmxException(java.lang.String)"
        ],
        [
            "org.springframework.jmx.JmxException",
            "org.springframework.jmx.JmxException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jmx.JmxException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.ui.context.support.DelegatingThemeSource",
            "org.springframework.ui.context.support.DelegatingThemeSource()",
            "public org.springframework.ui.context.support.DelegatingThemeSource()"
        ],
        [
            "void",
            "org.springframework.ui.context.support.DelegatingThemeSource.setParentThemeSource(org.springframework.ui.context.ThemeSource)",
            "public void setParentThemeSource(org.springframework.ui.context.ThemeSource)"
        ],
        [
            "org.springframework.ui.context.ThemeSource",
            "org.springframework.ui.context.support.DelegatingThemeSource.getParentThemeSource()",
            "public org.springframework.ui.context.ThemeSource getParentThemeSource()"
        ],
        [
            "org.springframework.ui.context.Theme",
            "org.springframework.ui.context.support.DelegatingThemeSource.getTheme(java.lang.String)",
            "public org.springframework.ui.context.Theme getTheme(java.lang.String)"
        ],
        [
            "org.springframework.ui.context.support.ResourceBundleThemeSource",
            "org.springframework.ui.context.support.ResourceBundleThemeSource()",
            "public org.springframework.ui.context.support.ResourceBundleThemeSource()"
        ],
        [
            "void",
            "org.springframework.ui.context.support.ResourceBundleThemeSource.setParentThemeSource(org.springframework.ui.context.ThemeSource)",
            "public void setParentThemeSource(org.springframework.ui.context.ThemeSource)"
        ],
        [
            "org.springframework.ui.context.ThemeSource",
            "org.springframework.ui.context.support.ResourceBundleThemeSource.getParentThemeSource()",
            "public org.springframework.ui.context.ThemeSource getParentThemeSource()"
        ],
        [
            "void",
            "org.springframework.ui.context.support.ResourceBundleThemeSource.setBasenamePrefix(java.lang.String)",
            "public void setBasenamePrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.ui.context.support.ResourceBundleThemeSource.setDefaultEncoding(java.lang.String)",
            "public void setDefaultEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.ui.context.support.ResourceBundleThemeSource.setFallbackToSystemLocale(boolean)",
            "public void setFallbackToSystemLocale(boolean)"
        ],
        [
            "void",
            "org.springframework.ui.context.support.ResourceBundleThemeSource.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.ui.context.Theme",
            "org.springframework.ui.context.support.ResourceBundleThemeSource.getTheme(java.lang.String)",
            "public org.springframework.ui.context.Theme getTheme(java.lang.String)"
        ],
        [
            "org.springframework.ui.context.support.SimpleTheme",
            "org.springframework.ui.context.support.SimpleTheme(java.lang.String, org.springframework.context.MessageSource)",
            "public org.springframework.ui.context.support.SimpleTheme(java.lang.String, org.springframework.context.MessageSource)"
        ],
        [
            "java.lang.String",
            "org.springframework.ui.context.support.SimpleTheme.getName()",
            "public final java.lang.String getName()"
        ],
        [
            "org.springframework.context.MessageSource",
            "org.springframework.ui.context.support.SimpleTheme.getMessageSource()",
            "public final org.springframework.context.MessageSource getMessageSource()"
        ],
        [
            "org.springframework.ui.context.support.UiApplicationContextUtils",
            "org.springframework.ui.context.support.UiApplicationContextUtils()",
            "public org.springframework.ui.context.support.UiApplicationContextUtils()"
        ],
        [
            "org.springframework.ui.context.ThemeSource",
            "org.springframework.ui.context.support.UiApplicationContextUtils.initThemeSource(org.springframework.context.ApplicationContext)",
            "public static org.springframework.ui.context.ThemeSource initThemeSource(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap()",
            "public org.springframework.ui.ModelMap()"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.ModelMap(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap(java.lang.Object)",
            "public org.springframework.ui.ModelMap(java.lang.Object)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap.addAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.ModelMap addAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap.addAttribute(java.lang.Object)",
            "public org.springframework.ui.ModelMap addAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap.addAllAttributes(java.util.Collection<?>)",
            "public org.springframework.ui.ModelMap addAllAttributes(java.util.Collection<?>)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap.addAllAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.ui.ModelMap addAllAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ModelMap.mergeAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.ui.ModelMap mergeAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "boolean",
            "org.springframework.ui.ModelMap.containsAttribute(java.lang.String)",
            "public boolean containsAttribute(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.ui.ModelMap.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "org.springframework.ui.ExtendedModelMap",
            "org.springframework.ui.ExtendedModelMap()",
            "public org.springframework.ui.ExtendedModelMap()"
        ],
        [
            "org.springframework.ui.ExtendedModelMap",
            "org.springframework.ui.ExtendedModelMap.addAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.ExtendedModelMap addAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.ui.ExtendedModelMap",
            "org.springframework.ui.ExtendedModelMap.addAttribute(java.lang.Object)",
            "public org.springframework.ui.ExtendedModelMap addAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.ui.ExtendedModelMap",
            "org.springframework.ui.ExtendedModelMap.addAllAttributes(java.util.Collection<?>)",
            "public org.springframework.ui.ExtendedModelMap addAllAttributes(java.util.Collection<?>)"
        ],
        [
            "org.springframework.ui.ExtendedModelMap",
            "org.springframework.ui.ExtendedModelMap.addAllAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.ui.ExtendedModelMap addAllAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.ui.ExtendedModelMap",
            "org.springframework.ui.ExtendedModelMap.mergeAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.ui.ExtendedModelMap mergeAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.ui.ExtendedModelMap.asMap()",
            "public java.util.Map<java.lang.String, java.lang.Object> asMap()"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ExtendedModelMap.mergeAttributes(java.util.Map)",
            "public org.springframework.ui.ModelMap mergeAttributes(java.util.Map)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ExtendedModelMap.addAllAttributes(java.util.Map)",
            "public org.springframework.ui.ModelMap addAllAttributes(java.util.Map)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ExtendedModelMap.addAllAttributes(java.util.Collection)",
            "public org.springframework.ui.ModelMap addAllAttributes(java.util.Collection)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ExtendedModelMap.addAttribute(java.lang.Object)",
            "public org.springframework.ui.ModelMap addAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.ui.ExtendedModelMap.addAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.ModelMap addAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ExtendedModelMap.mergeAttributes(java.util.Map)",
            "public org.springframework.ui.Model mergeAttributes(java.util.Map)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ExtendedModelMap.addAllAttributes(java.util.Map)",
            "public org.springframework.ui.Model addAllAttributes(java.util.Map)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ExtendedModelMap.addAllAttributes(java.util.Collection)",
            "public org.springframework.ui.Model addAllAttributes(java.util.Collection)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ExtendedModelMap.addAttribute(java.lang.Object)",
            "public org.springframework.ui.Model addAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ExtendedModelMap.addAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.Model addAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel()",
            "public org.springframework.ui.ConcurrentModel()"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.ConcurrentModel(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel(java.lang.Object)",
            "public org.springframework.ui.ConcurrentModel(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.ui.ConcurrentModel.put(java.lang.String, java.lang.Object)",
            "public java.lang.Object put(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.ui.ConcurrentModel.putAll(java.util.Map<? extends java.lang.String, ?>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ?>)"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel.addAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.ConcurrentModel addAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel.addAttribute(java.lang.Object)",
            "public org.springframework.ui.ConcurrentModel addAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel.addAllAttributes(java.util.Collection<?>)",
            "public org.springframework.ui.ConcurrentModel addAllAttributes(java.util.Collection<?>)"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel.addAllAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.ui.ConcurrentModel addAllAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.ui.ConcurrentModel",
            "org.springframework.ui.ConcurrentModel.mergeAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.ui.ConcurrentModel mergeAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "boolean",
            "org.springframework.ui.ConcurrentModel.containsAttribute(java.lang.String)",
            "public boolean containsAttribute(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.ui.ConcurrentModel.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.ui.ConcurrentModel.asMap()",
            "public java.util.Map<java.lang.String, java.lang.Object> asMap()"
        ],
        [
            "java.lang.Object",
            "org.springframework.ui.ConcurrentModel.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ConcurrentModel.mergeAttributes(java.util.Map)",
            "public org.springframework.ui.Model mergeAttributes(java.util.Map)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ConcurrentModel.addAllAttributes(java.util.Map)",
            "public org.springframework.ui.Model addAllAttributes(java.util.Map)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ConcurrentModel.addAllAttributes(java.util.Collection)",
            "public org.springframework.ui.Model addAllAttributes(java.util.Collection)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ConcurrentModel.addAttribute(java.lang.Object)",
            "public org.springframework.ui.Model addAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.ui.Model",
            "org.springframework.ui.ConcurrentModel.addAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.ui.Model addAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.cache.config.CacheNamespaceHandler",
            "org.springframework.cache.config.CacheNamespaceHandler()",
            "public org.springframework.cache.config.CacheNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.cache.config.CacheNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.cache.config.CacheManagementConfigUtils",
            "org.springframework.cache.config.CacheManagementConfigUtils()",
            "public org.springframework.cache.config.CacheManagementConfigUtils()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.cache.config.AnnotationDrivenCacheBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "default",
            "org.springframework.cache.interceptor.CacheOperationSource.boolean isCandidateClass(java.lang.Class<?>)",
            "public default boolean isCandidateClass(java.lang.Class<?>)"
        ],
        [
            "org.springframework.cache.interceptor.CacheAspectSupport",
            "org.springframework.cache.interceptor.CacheAspectSupport()",
            "public org.springframework.cache.interceptor.CacheAspectSupport()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.configure(java.util.function.Supplier<org.springframework.cache.interceptor.CacheErrorHandler>, java.util.function.Supplier<org.springframework.cache.interceptor.KeyGenerator>, java.util.function.Supplier<org.springframework.cache.interceptor.CacheResolver>, java.util.function.Supplier<org.springframework.cache.CacheManager>)",
            "public void configure(java.util.function.Supplier<org.springframework.cache.interceptor.CacheErrorHandler>, java.util.function.Supplier<org.springframework.cache.interceptor.KeyGenerator>, java.util.function.Supplier<org.springframework.cache.interceptor.CacheResolver>, java.util.function.Supplier<org.springframework.cache.CacheManager>)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.setCacheOperationSources(org.springframework.cache.interceptor.CacheOperationSource...)",
            "public void setCacheOperationSources(org.springframework.cache.interceptor.CacheOperationSource...)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.setCacheOperationSource(org.springframework.cache.interceptor.CacheOperationSource)",
            "public void setCacheOperationSource(org.springframework.cache.interceptor.CacheOperationSource)"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperationSource",
            "org.springframework.cache.interceptor.CacheAspectSupport.getCacheOperationSource()",
            "public org.springframework.cache.interceptor.CacheOperationSource getCacheOperationSource()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.setKeyGenerator(org.springframework.cache.interceptor.KeyGenerator)",
            "public void setKeyGenerator(org.springframework.cache.interceptor.KeyGenerator)"
        ],
        [
            "org.springframework.cache.interceptor.KeyGenerator",
            "org.springframework.cache.interceptor.CacheAspectSupport.getKeyGenerator()",
            "public org.springframework.cache.interceptor.KeyGenerator getKeyGenerator()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.setCacheResolver(org.springframework.cache.interceptor.CacheResolver)",
            "public void setCacheResolver(org.springframework.cache.interceptor.CacheResolver)"
        ],
        [
            "org.springframework.cache.interceptor.CacheResolver",
            "org.springframework.cache.interceptor.CacheAspectSupport.getCacheResolver()",
            "public org.springframework.cache.interceptor.CacheResolver getCacheResolver()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.setCacheManager(org.springframework.cache.CacheManager)",
            "public void setCacheManager(org.springframework.cache.CacheManager)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor",
            "org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor()",
            "public org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor.setCacheOperationSource(org.springframework.cache.interceptor.CacheOperationSource)",
            "public void setCacheOperationSource(org.springframework.cache.interceptor.CacheOperationSource)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor.setClassFilter(org.springframework.aop.ClassFilter)",
            "public void setClassFilter(org.springframework.aop.ClassFilter)"
        ],
        [
            "org.springframework.aop.Pointcut",
            "org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor.getPointcut()",
            "public org.springframework.aop.Pointcut getPointcut()"
        ],
        [
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler",
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler(org.apache.commons.logging.Log, boolean)",
            "public org.springframework.cache.interceptor.LoggingCacheErrorHandler(org.apache.commons.logging.Log, boolean)"
        ],
        [
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler",
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler()",
            "public org.springframework.cache.interceptor.LoggingCacheErrorHandler()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler.handleCacheGetError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)",
            "public void handleCacheGetError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler.handleCachePutError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object, java.lang.Object)",
            "public void handleCachePutError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler.handleCacheEvictError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)",
            "public void handleCacheEvictError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.LoggingCacheErrorHandler.handleCacheClearError(java.lang.RuntimeException, org.springframework.cache.Cache)",
            "public void handleCacheClearError(java.lang.RuntimeException, org.springframework.cache.Cache)"
        ],
        [
            "org.springframework.cache.interceptor.CachePutOperation$Builder",
            "org.springframework.cache.interceptor.CachePutOperation$Builder()",
            "public org.springframework.cache.interceptor.CachePutOperation$Builder()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CachePutOperation$Builder.setUnless(java.lang.String)",
            "public void setUnless(java.lang.String)"
        ],
        [
            "org.springframework.cache.interceptor.CachePutOperation",
            "org.springframework.cache.interceptor.CachePutOperation$Builder.build()",
            "public org.springframework.cache.interceptor.CachePutOperation build()"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperation",
            "org.springframework.cache.interceptor.CachePutOperation$Builder.build()",
            "public org.springframework.cache.interceptor.CacheOperation build()"
        ],
        [
            "org.springframework.expression.EvaluationContext",
            "org.springframework.cache.interceptor.CacheOperationExpressionEvaluator.createEvaluationContext(java.util.Collection<? extends org.springframework.cache.Cache>, java.lang.reflect.Method, java.lang.Object[], java.lang.Object, java.lang.Class<?>, java.lang.reflect.Method, java.lang.Object, org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.expression.EvaluationContext createEvaluationContext(java.util.Collection<? extends org.springframework.cache.Cache>, java.lang.reflect.Method, java.lang.Object[], java.lang.Object, java.lang.Class<?>, java.lang.reflect.Method, java.lang.Object, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.interceptor.CacheOperationExpressionEvaluator.key(java.lang.String, org.springframework.context.expression.AnnotatedElementKey, org.springframework.expression.EvaluationContext)",
            "public java.lang.Object key(java.lang.String, org.springframework.context.expression.AnnotatedElementKey, org.springframework.expression.EvaluationContext)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheOperationExpressionEvaluator.condition(java.lang.String, org.springframework.context.expression.AnnotatedElementKey, org.springframework.expression.EvaluationContext)",
            "public boolean condition(java.lang.String, org.springframework.context.expression.AnnotatedElementKey, org.springframework.expression.EvaluationContext)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheOperationExpressionEvaluator.unless(java.lang.String, org.springframework.context.expression.AnnotatedElementKey, org.springframework.expression.EvaluationContext)",
            "public boolean unless(java.lang.String, org.springframework.context.expression.AnnotatedElementKey, org.springframework.expression.EvaluationContext)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey.compareTo(org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey)",
            "public int compareTo(org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey)"
        ],
        [
            "int",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationCacheKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.cache.interceptor.NamedCacheResolver",
            "org.springframework.cache.interceptor.NamedCacheResolver()",
            "public org.springframework.cache.interceptor.NamedCacheResolver()"
        ],
        [
            "org.springframework.cache.interceptor.NamedCacheResolver",
            "org.springframework.cache.interceptor.NamedCacheResolver(org.springframework.cache.CacheManager, java.lang.String...)",
            "public org.springframework.cache.interceptor.NamedCacheResolver(org.springframework.cache.CacheManager, java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.NamedCacheResolver.setCacheNames(java.util.Collection<java.lang.String>)",
            "public void setCacheNames(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheEvaluationContext.addUnavailableVariable(java.lang.String)",
            "public void addUnavailableVariable(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.interceptor.CacheEvaluationContext.lookupVariable(java.lang.String)",
            "public java.lang.Object lookupVariable(java.lang.String)"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperation$Builder",
            "org.springframework.cache.interceptor.CacheOperation$Builder()",
            "public org.springframework.cache.interceptor.CacheOperation$Builder()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setCacheName(java.lang.String)",
            "public void setCacheName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setCacheNames(java.lang.String...)",
            "public void setCacheNames(java.lang.String...)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.cache.interceptor.CacheOperation$Builder.getCacheNames()",
            "public java.util.Set<java.lang.String> getCacheNames()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setKey(java.lang.String)",
            "public void setKey(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation$Builder.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation$Builder.getKeyGenerator()",
            "public java.lang.String getKeyGenerator()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation$Builder.getCacheManager()",
            "public java.lang.String getCacheManager()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation$Builder.getCacheResolver()",
            "public java.lang.String getCacheResolver()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setKeyGenerator(java.lang.String)",
            "public void setKeyGenerator(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setCacheManager(java.lang.String)",
            "public void setCacheManager(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setCacheResolver(java.lang.String)",
            "public void setCacheResolver(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheOperation$Builder.setCondition(java.lang.String)",
            "public void setCondition(java.lang.String)"
        ],
        [
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts(java.util.Collection<? extends org.springframework.cache.interceptor.CacheOperation>, java.lang.reflect.Method, java.lang.Object[], java.lang.Object, java.lang.Class<?>)",
            "public org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts(java.util.Collection<? extends org.springframework.cache.interceptor.CacheOperation>, java.lang.reflect.Method, java.lang.Object[], java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext>",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts.get(java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation>)",
            "public java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext> get(java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation>)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContexts.isSynchronized()",
            "public boolean isSynchronized()"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheOperationSourcePointcut$CacheOperationSourceClassFilter.matches(java.lang.Class<?>)",
            "public boolean matches(java.lang.Class<?>)"
        ],
        [
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource",
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource()",
            "public org.springframework.cache.interceptor.NameMatchCacheOperationSource()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource.setNameMap(java.util.Map<java.lang.String, java.util.Collection<org.springframework.cache.interceptor.CacheOperation>>)",
            "public void setNameMap(java.util.Map<java.lang.String, java.util.Collection<org.springframework.cache.interceptor.CacheOperation>>)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource.addCacheMethod(java.lang.String, java.util.Collection<org.springframework.cache.interceptor.CacheOperation>)",
            "public void addCacheMethod(java.lang.String, java.util.Collection<org.springframework.cache.interceptor.CacheOperation>)"
        ],
        [
            "java.util.Collection<org.springframework.cache.interceptor.CacheOperation>",
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource.getCacheOperations(java.lang.reflect.Method, java.lang.Class<?>)",
            "public java.util.Collection<org.springframework.cache.interceptor.CacheOperation> getCacheOperations(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.NameMatchCacheOperationSource.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.cache.interceptor.CacheOperation.getCacheNames()",
            "public java.util.Set<java.lang.String> getCacheNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation.getKeyGenerator()",
            "public java.lang.String getKeyGenerator()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation.getCacheManager()",
            "public java.lang.String getCacheManager()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation.getCacheResolver()",
            "public java.lang.String getCacheResolver()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation.getCondition()",
            "public java.lang.String getCondition()"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheOperation.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.interceptor.CacheOperation.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperation.toString()",
            "public final java.lang.String toString()"
        ],
        [
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationMetadata",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationMetadata(org.springframework.cache.interceptor.CacheOperation, java.lang.reflect.Method, java.lang.Class<?>, org.springframework.cache.interceptor.KeyGenerator, org.springframework.cache.interceptor.CacheResolver)",
            "public org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationMetadata(org.springframework.cache.interceptor.CacheOperation, java.lang.reflect.Method, java.lang.Class<?>, org.springframework.cache.interceptor.KeyGenerator, org.springframework.cache.interceptor.CacheResolver)"
        ],
        [
            "org.springframework.cache.interceptor.CacheExpressionRootObject",
            "org.springframework.cache.interceptor.CacheExpressionRootObject(java.util.Collection<? extends org.springframework.cache.Cache>, java.lang.reflect.Method, java.lang.Object[], java.lang.Object, java.lang.Class<?>)",
            "public org.springframework.cache.interceptor.CacheExpressionRootObject(java.util.Collection<? extends org.springframework.cache.Cache>, java.lang.reflect.Method, java.lang.Object[], java.lang.Object, java.lang.Class<?>)"
        ],
        [
            "java.util.Collection<? extends org.springframework.cache.Cache>",
            "org.springframework.cache.interceptor.CacheExpressionRootObject.getCaches()",
            "public java.util.Collection<? extends org.springframework.cache.Cache> getCaches()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cache.interceptor.CacheExpressionRootObject.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheExpressionRootObject.getMethodName()",
            "public java.lang.String getMethodName()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.cache.interceptor.CacheExpressionRootObject.getArgs()",
            "public java.lang.Object[] getArgs()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.interceptor.CacheExpressionRootObject.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.cache.interceptor.CacheExpressionRootObject.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "org.springframework.cache.interceptor.AbstractFallbackCacheOperationSource",
            "org.springframework.cache.interceptor.AbstractFallbackCacheOperationSource()",
            "public org.springframework.cache.interceptor.AbstractFallbackCacheOperationSource()"
        ],
        [
            "java.util.Collection<org.springframework.cache.interceptor.CacheOperation>",
            "org.springframework.cache.interceptor.AbstractFallbackCacheOperationSource.getCacheOperations(java.lang.reflect.Method, java.lang.Class<?>)",
            "public java.util.Collection<org.springframework.cache.interceptor.CacheOperation> getCacheOperations(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "org.springframework.cache.interceptor.CacheEvictOperation$Builder",
            "org.springframework.cache.interceptor.CacheEvictOperation$Builder()",
            "public org.springframework.cache.interceptor.CacheEvictOperation$Builder()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheEvictOperation$Builder.setCacheWide(boolean)",
            "public void setCacheWide(boolean)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheEvictOperation$Builder.setBeforeInvocation(boolean)",
            "public void setBeforeInvocation(boolean)"
        ],
        [
            "org.springframework.cache.interceptor.CacheEvictOperation",
            "org.springframework.cache.interceptor.CacheEvictOperation$Builder.build()",
            "public org.springframework.cache.interceptor.CacheEvictOperation build()"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperation",
            "org.springframework.cache.interceptor.CacheEvictOperation$Builder.build()",
            "public org.springframework.cache.interceptor.CacheOperation build()"
        ],
        [
            "org.springframework.cache.interceptor.SimpleKeyGenerator",
            "org.springframework.cache.interceptor.SimpleKeyGenerator()",
            "public org.springframework.cache.interceptor.SimpleKeyGenerator()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.interceptor.SimpleKeyGenerator.generate(java.lang.Object, java.lang.reflect.Method, java.lang.Object...)",
            "public java.lang.Object generate(java.lang.Object, java.lang.reflect.Method, java.lang.Object...)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.interceptor.SimpleKeyGenerator.generateKey(java.lang.Object...)",
            "public static java.lang.Object generateKey(java.lang.Object...)"
        ],
        [
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext(org.springframework.cache.interceptor.CacheAspectSupport, org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationMetadata, java.lang.Object[], java.lang.Object)",
            "public org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext(org.springframework.cache.interceptor.CacheAspectSupport, org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationMetadata, java.lang.Object[], java.lang.Object)"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperation",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.getOperation()",
            "public org.springframework.cache.interceptor.CacheOperation getOperation()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.getArgs()",
            "public java.lang.Object[] getArgs()"
        ],
        [
            "org.springframework.cache.interceptor.BasicOperation",
            "org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext.getOperation()",
            "public org.springframework.cache.interceptor.BasicOperation getOperation()"
        ],
        [
            "org.springframework.cache.interceptor.CompositeCacheOperationSource",
            "org.springframework.cache.interceptor.CompositeCacheOperationSource(org.springframework.cache.interceptor.CacheOperationSource...)",
            "public org.springframework.cache.interceptor.CompositeCacheOperationSource(org.springframework.cache.interceptor.CacheOperationSource...)"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperationSource[]",
            "org.springframework.cache.interceptor.CompositeCacheOperationSource.getCacheOperationSources()",
            "public final org.springframework.cache.interceptor.CacheOperationSource[] getCacheOperationSources()"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CompositeCacheOperationSource.isCandidateClass(java.lang.Class<?>)",
            "public boolean isCandidateClass(java.lang.Class<?>)"
        ],
        [
            "java.util.Collection<org.springframework.cache.interceptor.CacheOperation>",
            "org.springframework.cache.interceptor.CompositeCacheOperationSource.getCacheOperations(java.lang.reflect.Method, java.lang.Class<?>)",
            "public java.util.Collection<org.springframework.cache.interceptor.CacheOperation> getCacheOperations(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.AbstractCacheInvoker.setErrorHandler(org.springframework.cache.interceptor.CacheErrorHandler)",
            "public void setErrorHandler(org.springframework.cache.interceptor.CacheErrorHandler)"
        ],
        [
            "org.springframework.cache.interceptor.CacheErrorHandler",
            "org.springframework.cache.interceptor.AbstractCacheInvoker.getErrorHandler()",
            "public org.springframework.cache.interceptor.CacheErrorHandler getErrorHandler()"
        ],
        [
            "org.springframework.cache.interceptor.VariableNotAvailableException",
            "org.springframework.cache.interceptor.VariableNotAvailableException(java.lang.String)",
            "public org.springframework.cache.interceptor.VariableNotAvailableException(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.VariableNotAvailableException.getName()",
            "public final java.lang.String getName()"
        ],
        [
            "org.springframework.cache.interceptor.CacheableOperation$Builder",
            "org.springframework.cache.interceptor.CacheableOperation$Builder()",
            "public org.springframework.cache.interceptor.CacheableOperation$Builder()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheableOperation$Builder.setUnless(java.lang.String)",
            "public void setUnless(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheableOperation$Builder.setSync(boolean)",
            "public void setSync(boolean)"
        ],
        [
            "org.springframework.cache.interceptor.CacheableOperation",
            "org.springframework.cache.interceptor.CacheableOperation$Builder.build()",
            "public org.springframework.cache.interceptor.CacheableOperation build()"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperation",
            "org.springframework.cache.interceptor.CacheableOperation$Builder.build()",
            "public org.springframework.cache.interceptor.CacheOperation build()"
        ],
        [
            "org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest",
            "org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest(org.springframework.cache.interceptor.CacheAspectSupport, org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext, java.lang.Object)",
            "public org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest(org.springframework.cache.interceptor.CacheAspectSupport, org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(java.lang.Object)",
            "public void apply(java.lang.Object)"
        ],
        [
            "org.springframework.cache.interceptor.CachePutOperation",
            "org.springframework.cache.interceptor.CachePutOperation(org.springframework.cache.interceptor.CachePutOperation$Builder)",
            "public org.springframework.cache.interceptor.CachePutOperation(org.springframework.cache.interceptor.CachePutOperation$Builder)"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CachePutOperation.getUnless()",
            "public java.lang.String getUnless()"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheOperationSourcePointcut.matches(java.lang.reflect.Method, java.lang.Class<?>)",
            "public boolean matches(java.lang.reflect.Method, java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheOperationSourcePointcut.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.interceptor.CacheOperationSourcePointcut.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheOperationSourcePointcut.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.cache.interceptor.CacheableOperation",
            "org.springframework.cache.interceptor.CacheableOperation(org.springframework.cache.interceptor.CacheableOperation$Builder)",
            "public org.springframework.cache.interceptor.CacheableOperation(org.springframework.cache.interceptor.CacheableOperation$Builder)"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.CacheableOperation.getUnless()",
            "public java.lang.String getUnless()"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheableOperation.isSync()",
            "public boolean isSync()"
        ],
        [
            "org.springframework.cache.interceptor.SimpleKey",
            "org.springframework.cache.interceptor.SimpleKey(java.lang.Object...)",
            "public org.springframework.cache.interceptor.SimpleKey(java.lang.Object...)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.SimpleKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.interceptor.SimpleKey.hashCode()",
            "public final int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.interceptor.SimpleKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.cache.interceptor.SimpleCacheResolver",
            "org.springframework.cache.interceptor.SimpleCacheResolver()",
            "public org.springframework.cache.interceptor.SimpleCacheResolver()"
        ],
        [
            "org.springframework.cache.interceptor.SimpleCacheResolver",
            "org.springframework.cache.interceptor.SimpleCacheResolver(org.springframework.cache.CacheManager)",
            "public org.springframework.cache.interceptor.SimpleCacheResolver(org.springframework.cache.CacheManager)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.AbstractCacheResolver.setCacheManager(org.springframework.cache.CacheManager)",
            "public void setCacheManager(org.springframework.cache.CacheManager)"
        ],
        [
            "org.springframework.cache.CacheManager",
            "org.springframework.cache.interceptor.AbstractCacheResolver.getCacheManager()",
            "public org.springframework.cache.CacheManager getCacheManager()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.AbstractCacheResolver.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.util.Collection<? extends org.springframework.cache.Cache>",
            "org.springframework.cache.interceptor.AbstractCacheResolver.resolveCaches(org.springframework.cache.interceptor.CacheOperationInvocationContext<?>)",
            "public java.util.Collection<? extends org.springframework.cache.Cache> resolveCaches(org.springframework.cache.interceptor.CacheOperationInvocationContext<?>)"
        ],
        [
            "org.springframework.cache.interceptor.CacheEvictOperation",
            "org.springframework.cache.interceptor.CacheEvictOperation(org.springframework.cache.interceptor.CacheEvictOperation$Builder)",
            "public org.springframework.cache.interceptor.CacheEvictOperation(org.springframework.cache.interceptor.CacheEvictOperation$Builder)"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheEvictOperation.isCacheWide()",
            "public boolean isCacheWide()"
        ],
        [
            "boolean",
            "org.springframework.cache.interceptor.CacheEvictOperation.isBeforeInvocation()",
            "public boolean isBeforeInvocation()"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper",
            "org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper(java.lang.Throwable)",
            "public org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper(java.lang.Throwable)"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper.getOriginal()",
            "public java.lang.Throwable getOriginal()"
        ],
        [
            "org.springframework.cache.interceptor.SimpleCacheErrorHandler",
            "org.springframework.cache.interceptor.SimpleCacheErrorHandler()",
            "public org.springframework.cache.interceptor.SimpleCacheErrorHandler()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.SimpleCacheErrorHandler.handleCacheGetError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)",
            "public void handleCacheGetError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.SimpleCacheErrorHandler.handleCachePutError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object, java.lang.Object)",
            "public void handleCachePutError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.SimpleCacheErrorHandler.handleCacheEvictError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)",
            "public void handleCacheEvictError(java.lang.RuntimeException, org.springframework.cache.Cache, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.SimpleCacheErrorHandler.handleCacheClearError(java.lang.RuntimeException, org.springframework.cache.Cache)",
            "public void handleCacheClearError(java.lang.RuntimeException, org.springframework.cache.Cache)"
        ],
        [
            "org.springframework.cache.interceptor.CacheProxyFactoryBean",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean()",
            "public org.springframework.cache.interceptor.CacheProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean.setCacheOperationSources(org.springframework.cache.interceptor.CacheOperationSource...)",
            "public void setCacheOperationSources(org.springframework.cache.interceptor.CacheOperationSource...)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean.setKeyGenerator(org.springframework.cache.interceptor.KeyGenerator)",
            "public void setKeyGenerator(org.springframework.cache.interceptor.KeyGenerator)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean.setCacheResolver(org.springframework.cache.interceptor.CacheResolver)",
            "public void setCacheResolver(org.springframework.cache.interceptor.CacheResolver)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean.setCacheManager(org.springframework.cache.CacheManager)",
            "public void setCacheManager(org.springframework.cache.CacheManager)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean.setPointcut(org.springframework.aop.Pointcut)",
            "public void setPointcut(org.springframework.aop.Pointcut)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.cache.interceptor.CacheProxyFactoryBean.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "org.springframework.cache.interceptor.CacheInterceptor",
            "org.springframework.cache.interceptor.CacheInterceptor()",
            "public org.springframework.cache.interceptor.CacheInterceptor()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.interceptor.CacheInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.cache.support.NoOpCacheManager",
            "org.springframework.cache.support.NoOpCacheManager()",
            "public org.springframework.cache.support.NoOpCacheManager()"
        ],
        [
            "org.springframework.cache.Cache",
            "org.springframework.cache.support.NoOpCacheManager.getCache(java.lang.String)",
            "public org.springframework.cache.Cache getCache(java.lang.String)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.cache.support.NoOpCacheManager.getCacheNames()",
            "public java.util.Collection<java.lang.String> getCacheNames()"
        ],
        [
            "org.springframework.cache.support.NoOpCache",
            "org.springframework.cache.support.NoOpCache(java.lang.String)",
            "public org.springframework.cache.support.NoOpCache(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.support.NoOpCache.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.support.NoOpCache.getNativeCache()",
            "public java.lang.Object getNativeCache()"
        ],
        [
            "org.springframework.cache.Cache$ValueWrapper",
            "org.springframework.cache.support.NoOpCache.get(java.lang.Object)",
            "public org.springframework.cache.Cache$ValueWrapper get(java.lang.Object)"
        ],
        [
            "<T> T",
            "org.springframework.cache.support.NoOpCache.get(java.lang.Object, java.lang.Class<T>)",
            "public <T> T get(java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.cache.support.NoOpCache.get(java.lang.Object, java.util.concurrent.Callable<T>)",
            "public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>)"
        ],
        [
            "void",
            "org.springframework.cache.support.NoOpCache.put(java.lang.Object, java.lang.Object)",
            "public void put(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.cache.Cache$ValueWrapper",
            "org.springframework.cache.support.NoOpCache.putIfAbsent(java.lang.Object, java.lang.Object)",
            "public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.support.NoOpCache.evict(java.lang.Object)",
            "public void evict(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.cache.support.NoOpCache.evictIfPresent(java.lang.Object)",
            "public boolean evictIfPresent(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.support.NoOpCache.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.cache.support.NoOpCache.invalidate()",
            "public boolean invalidate()"
        ],
        [
            "org.springframework.cache.support.AbstractCacheManager",
            "org.springframework.cache.support.AbstractCacheManager()",
            "public org.springframework.cache.support.AbstractCacheManager()"
        ],
        [
            "void",
            "org.springframework.cache.support.AbstractCacheManager.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.cache.support.AbstractCacheManager.initializeCaches()",
            "public void initializeCaches()"
        ],
        [
            "org.springframework.cache.Cache",
            "org.springframework.cache.support.AbstractCacheManager.getCache(java.lang.String)",
            "public org.springframework.cache.Cache getCache(java.lang.String)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.cache.support.AbstractCacheManager.getCacheNames()",
            "public java.util.Collection<java.lang.String> getCacheNames()"
        ],
        [
            "boolean",
            "org.springframework.cache.support.NullValue.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.support.NullValue.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.support.NullValue.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.cache.support.SimpleCacheManager",
            "org.springframework.cache.support.SimpleCacheManager()",
            "public org.springframework.cache.support.SimpleCacheManager()"
        ],
        [
            "void",
            "org.springframework.cache.support.SimpleCacheManager.setCaches(java.util.Collection<? extends org.springframework.cache.Cache>)",
            "public void setCaches(java.util.Collection<? extends org.springframework.cache.Cache>)"
        ],
        [
            "org.springframework.cache.support.SimpleValueWrapper",
            "org.springframework.cache.support.SimpleValueWrapper(java.lang.Object)",
            "public org.springframework.cache.support.SimpleValueWrapper(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.support.SimpleValueWrapper.get()",
            "public java.lang.Object get()"
        ],
        [
            "org.springframework.cache.support.CompositeCacheManager",
            "org.springframework.cache.support.CompositeCacheManager()",
            "public org.springframework.cache.support.CompositeCacheManager()"
        ],
        [
            "org.springframework.cache.support.CompositeCacheManager",
            "org.springframework.cache.support.CompositeCacheManager(org.springframework.cache.CacheManager...)",
            "public org.springframework.cache.support.CompositeCacheManager(org.springframework.cache.CacheManager...)"
        ],
        [
            "void",
            "org.springframework.cache.support.CompositeCacheManager.setCacheManagers(java.util.Collection<org.springframework.cache.CacheManager>)",
            "public void setCacheManagers(java.util.Collection<org.springframework.cache.CacheManager>)"
        ],
        [
            "void",
            "org.springframework.cache.support.CompositeCacheManager.setFallbackToNoOpCache(boolean)",
            "public void setFallbackToNoOpCache(boolean)"
        ],
        [
            "void",
            "org.springframework.cache.support.CompositeCacheManager.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.cache.Cache",
            "org.springframework.cache.support.CompositeCacheManager.getCache(java.lang.String)",
            "public org.springframework.cache.Cache getCache(java.lang.String)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.cache.support.CompositeCacheManager.getCacheNames()",
            "public java.util.Collection<java.lang.String> getCacheNames()"
        ],
        [
            "boolean",
            "org.springframework.cache.support.AbstractValueAdaptingCache.isAllowNullValues()",
            "public final boolean isAllowNullValues()"
        ],
        [
            "org.springframework.cache.Cache$ValueWrapper",
            "org.springframework.cache.support.AbstractValueAdaptingCache.get(java.lang.Object)",
            "public org.springframework.cache.Cache$ValueWrapper get(java.lang.Object)"
        ],
        [
            "<T> T",
            "org.springframework.cache.support.AbstractValueAdaptingCache.get(java.lang.Object, java.lang.Class<T>)",
            "public <T> T get(java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "default",
            "org.springframework.cache.Cache.org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)",
            "public default org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)"
        ],
        [
            "default",
            "org.springframework.cache.Cache.boolean evictIfPresent(java.lang.Object)",
            "public default boolean evictIfPresent(java.lang.Object)"
        ],
        [
            "default",
            "org.springframework.cache.Cache.boolean invalidate()",
            "public default boolean invalidate()"
        ],
        [
            "org.springframework.cache.annotation.AnnotationCacheOperationSource",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource()",
            "public org.springframework.cache.annotation.AnnotationCacheOperationSource()"
        ],
        [
            "org.springframework.cache.annotation.AnnotationCacheOperationSource",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource(boolean)",
            "public org.springframework.cache.annotation.AnnotationCacheOperationSource(boolean)"
        ],
        [
            "org.springframework.cache.annotation.AnnotationCacheOperationSource",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource(org.springframework.cache.annotation.CacheAnnotationParser)",
            "public org.springframework.cache.annotation.AnnotationCacheOperationSource(org.springframework.cache.annotation.CacheAnnotationParser)"
        ],
        [
            "org.springframework.cache.annotation.AnnotationCacheOperationSource",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource(org.springframework.cache.annotation.CacheAnnotationParser...)",
            "public org.springframework.cache.annotation.AnnotationCacheOperationSource(org.springframework.cache.annotation.CacheAnnotationParser...)"
        ],
        [
            "org.springframework.cache.annotation.AnnotationCacheOperationSource",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource(java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser>)",
            "public org.springframework.cache.annotation.AnnotationCacheOperationSource(java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser>)"
        ],
        [
            "boolean",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource.isCandidateClass(java.lang.Class<?>)",
            "public boolean isCandidateClass(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.annotation.AnnotationCacheOperationSource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.cache.annotation.SpringCacheAnnotationParser",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser()",
            "public org.springframework.cache.annotation.SpringCacheAnnotationParser()"
        ],
        [
            "boolean",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser.isCandidateClass(java.lang.Class<?>)",
            "public boolean isCandidateClass(java.lang.Class<?>)"
        ],
        [
            "java.util.Collection<org.springframework.cache.interceptor.CacheOperation>",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser.parseCacheAnnotations(java.lang.Class<?>)",
            "public java.util.Collection<org.springframework.cache.interceptor.CacheOperation> parseCacheAnnotations(java.lang.Class<?>)"
        ],
        [
            "java.util.Collection<org.springframework.cache.interceptor.CacheOperation>",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser.parseCacheAnnotations(java.lang.reflect.Method)",
            "public java.util.Collection<org.springframework.cache.interceptor.CacheOperation> parseCacheAnnotations(java.lang.reflect.Method)"
        ],
        [
            "boolean",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.cache.annotation.SpringCacheAnnotationParser$DefaultCacheConfig",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser$DefaultCacheConfig(java.lang.Class<?>)",
            "public org.springframework.cache.annotation.SpringCacheAnnotationParser$DefaultCacheConfig(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.cache.annotation.SpringCacheAnnotationParser$DefaultCacheConfig.applyDefault(org.springframework.cache.interceptor.CacheOperation$Builder)",
            "public void applyDefault(org.springframework.cache.interceptor.CacheOperation$Builder)"
        ],
        [
            "default",
            "org.springframework.cache.annotation.CachingConfigurer.org.springframework.cache.CacheManager cacheManager()",
            "public default org.springframework.cache.CacheManager cacheManager()"
        ],
        [
            "default",
            "org.springframework.cache.annotation.CachingConfigurer.org.springframework.cache.interceptor.CacheResolver cacheResolver()",
            "public default org.springframework.cache.interceptor.CacheResolver cacheResolver()"
        ],
        [
            "default",
            "org.springframework.cache.annotation.CachingConfigurer.org.springframework.cache.interceptor.KeyGenerator keyGenerator()",
            "public default org.springframework.cache.interceptor.KeyGenerator keyGenerator()"
        ],
        [
            "default",
            "org.springframework.cache.annotation.CachingConfigurer.org.springframework.cache.interceptor.CacheErrorHandler errorHandler()",
            "public default org.springframework.cache.interceptor.CacheErrorHandler errorHandler()"
        ],
        [
            "org.springframework.cache.annotation.ProxyCachingConfiguration",
            "org.springframework.cache.annotation.ProxyCachingConfiguration()",
            "public org.springframework.cache.annotation.ProxyCachingConfiguration()"
        ],
        [
            "org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor",
            "org.springframework.cache.annotation.ProxyCachingConfiguration.cacheAdvisor(org.springframework.cache.interceptor.CacheOperationSource, org.springframework.cache.interceptor.CacheInterceptor)",
            "public org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor cacheAdvisor(org.springframework.cache.interceptor.CacheOperationSource, org.springframework.cache.interceptor.CacheInterceptor)"
        ],
        [
            "org.springframework.cache.interceptor.CacheOperationSource",
            "org.springframework.cache.annotation.ProxyCachingConfiguration.cacheOperationSource()",
            "public org.springframework.cache.interceptor.CacheOperationSource cacheOperationSource()"
        ],
        [
            "org.springframework.cache.interceptor.CacheInterceptor",
            "org.springframework.cache.annotation.ProxyCachingConfiguration.cacheInterceptor(org.springframework.cache.interceptor.CacheOperationSource)",
            "public org.springframework.cache.interceptor.CacheInterceptor cacheInterceptor(org.springframework.cache.interceptor.CacheOperationSource)"
        ],
        [
            "org.springframework.cache.annotation.AbstractCachingConfiguration$CachingConfigurerSupplier",
            "org.springframework.cache.annotation.AbstractCachingConfiguration$CachingConfigurerSupplier(java.util.function.Supplier<org.springframework.cache.annotation.CachingConfigurer>)",
            "public org.springframework.cache.annotation.AbstractCachingConfiguration$CachingConfigurerSupplier(java.util.function.Supplier<org.springframework.cache.annotation.CachingConfigurer>)"
        ],
        [
            "<T> java.util.function.Supplier<T>",
            "org.springframework.cache.annotation.AbstractCachingConfiguration$CachingConfigurerSupplier.adapt(java.util.function.Function<org.springframework.cache.annotation.CachingConfigurer, T>)",
            "public <T> java.util.function.Supplier<T> adapt(java.util.function.Function<org.springframework.cache.annotation.CachingConfigurer, T>)"
        ],
        [
            "org.springframework.cache.annotation.AbstractCachingConfiguration",
            "org.springframework.cache.annotation.AbstractCachingConfiguration()",
            "public org.springframework.cache.annotation.AbstractCachingConfiguration()"
        ],
        [
            "void",
            "org.springframework.cache.annotation.AbstractCachingConfiguration.setImportMetadata(org.springframework.core.type.AnnotationMetadata)",
            "public void setImportMetadata(org.springframework.core.type.AnnotationMetadata)"
        ],
        [
            "org.springframework.cache.annotation.CachingConfigurationSelector",
            "org.springframework.cache.annotation.CachingConfigurationSelector()",
            "public org.springframework.cache.annotation.CachingConfigurationSelector()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.cache.annotation.CachingConfigurationSelector.selectImports(org.springframework.context.annotation.AdviceMode)",
            "public java.lang.String[] selectImports(org.springframework.context.annotation.AdviceMode)"
        ],
        [
            "org.springframework.cache.annotation.CachingConfigurerSupport",
            "org.springframework.cache.annotation.CachingConfigurerSupport()",
            "public org.springframework.cache.annotation.CachingConfigurerSupport()"
        ],
        [
            "org.springframework.cache.CacheManager",
            "org.springframework.cache.annotation.CachingConfigurerSupport.cacheManager()",
            "public org.springframework.cache.CacheManager cacheManager()"
        ],
        [
            "org.springframework.cache.interceptor.CacheResolver",
            "org.springframework.cache.annotation.CachingConfigurerSupport.cacheResolver()",
            "public org.springframework.cache.interceptor.CacheResolver cacheResolver()"
        ],
        [
            "org.springframework.cache.interceptor.KeyGenerator",
            "org.springframework.cache.annotation.CachingConfigurerSupport.keyGenerator()",
            "public org.springframework.cache.interceptor.KeyGenerator keyGenerator()"
        ],
        [
            "org.springframework.cache.interceptor.CacheErrorHandler",
            "org.springframework.cache.annotation.CachingConfigurerSupport.errorHandler()",
            "public org.springframework.cache.interceptor.CacheErrorHandler errorHandler()"
        ],
        [
            "default",
            "org.springframework.cache.annotation.CacheAnnotationParser.boolean isCandidateClass(java.lang.Class<?>)",
            "public default boolean isCandidateClass(java.lang.Class<?>)"
        ],
        [
            "org.springframework.cache.concurrent.ConcurrentMapCache",
            "org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String)",
            "public org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String)"
        ],
        [
            "org.springframework.cache.concurrent.ConcurrentMapCache",
            "org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String, boolean)",
            "public org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String, boolean)"
        ],
        [
            "org.springframework.cache.concurrent.ConcurrentMapCache",
            "org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String, java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object>, boolean)",
            "public org.springframework.cache.concurrent.ConcurrentMapCache(java.lang.String, java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object>, boolean)"
        ],
        [
            "boolean",
            "org.springframework.cache.concurrent.ConcurrentMapCache.isStoreByValue()",
            "public final boolean isStoreByValue()"
        ],
        [
            "java.lang.String",
            "org.springframework.cache.concurrent.ConcurrentMapCache.getName()",
            "public final java.lang.String getName()"
        ],
        [
            "java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object>",
            "org.springframework.cache.concurrent.ConcurrentMapCache.getNativeCache()",
            "public final java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object> getNativeCache()"
        ],
        [
            "<T> T",
            "org.springframework.cache.concurrent.ConcurrentMapCache.get(java.lang.Object, java.util.concurrent.Callable<T>)",
            "public <T> T get(java.lang.Object, java.util.concurrent.Callable<T>)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCache.put(java.lang.Object, java.lang.Object)",
            "public void put(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.cache.Cache$ValueWrapper",
            "org.springframework.cache.concurrent.ConcurrentMapCache.putIfAbsent(java.lang.Object, java.lang.Object)",
            "public org.springframework.cache.Cache$ValueWrapper putIfAbsent(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCache.evict(java.lang.Object)",
            "public void evict(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.cache.concurrent.ConcurrentMapCache.evictIfPresent(java.lang.Object)",
            "public boolean evictIfPresent(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCache.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.cache.concurrent.ConcurrentMapCache.invalidate()",
            "public boolean invalidate()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.concurrent.ConcurrentMapCache.getNativeCache()",
            "public java.lang.Object getNativeCache()"
        ],
        [
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean()",
            "public org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean()"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.setName(java.lang.String)",
            "public void setName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.setStore(java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object>)",
            "public void setStore(java.util.concurrent.ConcurrentMap<java.lang.Object, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.setAllowNullValues(boolean)",
            "public void setAllowNullValues(boolean)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.cache.concurrent.ConcurrentMapCache",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.getObject()",
            "public org.springframework.cache.concurrent.ConcurrentMapCache getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager()",
            "public org.springframework.cache.concurrent.ConcurrentMapCacheManager()"
        ],
        [
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager(java.lang.String...)",
            "public org.springframework.cache.concurrent.ConcurrentMapCacheManager(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.setCacheNames(java.util.Collection<java.lang.String>)",
            "public void setCacheNames(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.setAllowNullValues(boolean)",
            "public void setAllowNullValues(boolean)"
        ],
        [
            "boolean",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.isAllowNullValues()",
            "public boolean isAllowNullValues()"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.setStoreByValue(boolean)",
            "public void setStoreByValue(boolean)"
        ],
        [
            "boolean",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.isStoreByValue()",
            "public boolean isStoreByValue()"
        ],
        [
            "void",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "java.util.Collection<java.lang.String>",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.getCacheNames()",
            "public java.util.Collection<java.lang.String> getCacheNames()"
        ],
        [
            "org.springframework.cache.Cache",
            "org.springframework.cache.concurrent.ConcurrentMapCacheManager.getCache(java.lang.String)",
            "public org.springframework.cache.Cache getCache(java.lang.String)"
        ],
        [
            "org.springframework.cache.Cache$ValueRetrievalException",
            "org.springframework.cache.Cache$ValueRetrievalException(java.lang.Object, java.util.concurrent.Callable<?>, java.lang.Throwable)",
            "public org.springframework.cache.Cache$ValueRetrievalException(java.lang.Object, java.util.concurrent.Callable<?>, java.lang.Throwable)"
        ],
        [
            "java.lang.Object",
            "org.springframework.cache.Cache$ValueRetrievalException.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "org.springframework.ejb.config.JeeNamespaceHandler",
            "org.springframework.ejb.config.JeeNamespaceHandler()",
            "public org.springframework.ejb.config.JeeNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.ejb.config.JeeNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor",
            "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor()",
            "public org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor()"
        ],
        [
            "void",
            "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.setCacheSessionBean(boolean)",
            "public void setCacheSessionBean(boolean)"
        ],
        [
            "void",
            "org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor",
            "org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor()",
            "public org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor()"
        ],
        [
            "void",
            "org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor.setRefreshHomeOnConnectFailure(boolean)",
            "public void setRefreshHomeOnConnectFailure(boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor.invokeInContext(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invokeInContext(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean()",
            "public org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean.setBusinessInterface(java.lang.Class<?>)",
            "public void setBusinessInterface(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean.getBusinessInterface()",
            "public java.lang.Class<?> getBusinessInterface()"
        ],
        [
            "void",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.ejb.access.LocalSlsbInvokerInterceptor",
            "org.springframework.ejb.access.LocalSlsbInvokerInterceptor()",
            "public org.springframework.ejb.access.LocalSlsbInvokerInterceptor()"
        ],
        [
            "java.lang.Object",
            "org.springframework.ejb.access.LocalSlsbInvokerInterceptor.invokeInContext(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invokeInContext(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean()",
            "public org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.setBusinessInterface(java.lang.Class<?>)",
            "public void setBusinessInterface(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.getBusinessInterface()",
            "public java.lang.Class<?> getBusinessInterface()"
        ],
        [
            "void",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.ejb.access.EjbAccessException",
            "org.springframework.ejb.access.EjbAccessException(java.lang.String)",
            "public org.springframework.ejb.access.EjbAccessException(java.lang.String)"
        ],
        [
            "org.springframework.ejb.access.EjbAccessException",
            "org.springframework.ejb.access.EjbAccessException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.ejb.access.EjbAccessException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor",
            "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor()",
            "public org.springframework.ejb.access.AbstractSlsbInvokerInterceptor()"
        ],
        [
            "void",
            "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.setLookupHomeOnStartup(boolean)",
            "public void setLookupHomeOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.setCacheHome(boolean)",
            "public void setCacheHome(boolean)"
        ],
        [
            "void",
            "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.setExposeAccessContext(boolean)",
            "public void setExposeAccessContext(boolean)"
        ],
        [
            "void",
            "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jndi.JndiAccessor",
            "org.springframework.jndi.JndiAccessor()",
            "public org.springframework.jndi.JndiAccessor()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiAccessor.setJndiTemplate(org.springframework.jndi.JndiTemplate)",
            "public void setJndiTemplate(org.springframework.jndi.JndiTemplate)"
        ],
        [
            "org.springframework.jndi.JndiTemplate",
            "org.springframework.jndi.JndiAccessor.getJndiTemplate()",
            "public org.springframework.jndi.JndiTemplate getJndiTemplate()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiAccessor.setJndiEnvironment(java.util.Properties)",
            "public void setJndiEnvironment(java.util.Properties)"
        ],
        [
            "java.util.Properties",
            "org.springframework.jndi.JndiAccessor.getJndiEnvironment()",
            "public java.util.Properties getJndiEnvironment()"
        ],
        [
            "org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor",
            "org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor(org.springframework.jndi.JndiTemplate)",
            "public org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor(org.springframework.jndi.JndiTemplate)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jndi.JndiObjectFactoryBean",
            "org.springframework.jndi.JndiObjectFactoryBean()",
            "public org.springframework.jndi.JndiObjectFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setProxyInterface(java.lang.Class<?>)",
            "public void setProxyInterface(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setProxyInterfaces(java.lang.Class<?>...)",
            "public void setProxyInterfaces(java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setLookupOnStartup(boolean)",
            "public void setLookupOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setCache(boolean)",
            "public void setCache(boolean)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setExposeAccessContext(boolean)",
            "public void setExposeAccessContext(boolean)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setDefaultObject(java.lang.Object)",
            "public void setDefaultObject(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.IllegalArgumentException, javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.JndiObjectFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jndi.JndiObjectFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jndi.JndiObjectFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.jndi.JndiTemplateEditor",
            "org.springframework.jndi.JndiTemplateEditor()",
            "public org.springframework.jndi.JndiTemplateEditor()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiTemplateEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.jndi.JndiLookupFailureException",
            "org.springframework.jndi.JndiLookupFailureException(java.lang.String, javax.naming.NamingException)",
            "public org.springframework.jndi.JndiLookupFailureException(java.lang.String, javax.naming.NamingException)"
        ],
        [
            "org.springframework.jndi.JndiLocatorDelegate",
            "org.springframework.jndi.JndiLocatorDelegate()",
            "public org.springframework.jndi.JndiLocatorDelegate()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.JndiLocatorDelegate.lookup(java.lang.String)",
            "public java.lang.Object lookup(java.lang.String) throws javax.naming.NamingException"
        ],
        [
            "<T> T",
            "org.springframework.jndi.JndiLocatorDelegate.lookup(java.lang.String, java.lang.Class<T>)",
            "public <T> T lookup(java.lang.String, java.lang.Class<T>) throws javax.naming.NamingException"
        ],
        [
            "org.springframework.jndi.JndiLocatorDelegate",
            "org.springframework.jndi.JndiLocatorDelegate.createDefaultResourceRefLocator()",
            "public static org.springframework.jndi.JndiLocatorDelegate createDefaultResourceRefLocator()"
        ],
        [
            "boolean",
            "org.springframework.jndi.JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()",
            "public static boolean isDefaultJndiEnvironmentAvailable()"
        ],
        [
            "org.springframework.jndi.support.SimpleJndiBeanFactory",
            "org.springframework.jndi.support.SimpleJndiBeanFactory()",
            "public org.springframework.jndi.support.SimpleJndiBeanFactory()"
        ],
        [
            "void",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.addShareableResource(java.lang.String)",
            "public void addShareableResource(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.setShareableResources(java.lang.String...)",
            "public void setShareableResources(java.lang.String...)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getBean(java.lang.String)",
            "public java.lang.Object getBean(java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getBean(java.lang.String, java.lang.Class<T>)",
            "public <T> T getBean(java.lang.String, java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getBean(java.lang.String, java.lang.Object...)",
            "public java.lang.Object getBean(java.lang.String, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getBean(java.lang.Class<T>)",
            "public <T> T getBean(java.lang.Class<T>) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> T",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getBean(java.lang.Class<T>, java.lang.Object...)",
            "public <T> T getBean(java.lang.Class<T>, java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getBeanProvider(java.lang.Class<T>)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getBeanProvider(org.springframework.core.ResolvableType)",
            "public <T> org.springframework.beans.factory.ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.containsBean(java.lang.String)",
            "public boolean containsBean(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.isSingleton(java.lang.String)",
            "public boolean isSingleton(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.isPrototype(java.lang.String)",
            "public boolean isPrototype(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.isTypeMatch(java.lang.String, org.springframework.core.ResolvableType)",
            "public boolean isTypeMatch(java.lang.String, org.springframework.core.ResolvableType) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "boolean",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.isTypeMatch(java.lang.String, java.lang.Class<?>)",
            "public boolean isTypeMatch(java.lang.String, java.lang.Class<?>) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getType(java.lang.String)",
            "public java.lang.Class<?> getType(java.lang.String) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getType(java.lang.String, boolean)",
            "public java.lang.Class<?> getType(java.lang.String, boolean) throws org.springframework.beans.factory.NoSuchBeanDefinitionException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.jndi.support.SimpleJndiBeanFactory.getAliases(java.lang.String)",
            "public java.lang.String[] getAliases(java.lang.String)"
        ],
        [
            "T",
            "org.springframework.jndi.support.SimpleJndiBeanFactory$1.getObject()",
            "public T getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.jndi.support.SimpleJndiBeanFactory$1.getObject(java.lang.Object...)",
            "public T getObject(java.lang.Object...) throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.jndi.support.SimpleJndiBeanFactory$1.getIfAvailable()",
            "public T getIfAvailable() throws org.springframework.beans.BeansException"
        ],
        [
            "T",
            "org.springframework.jndi.support.SimpleJndiBeanFactory$1.getIfUnique()",
            "public T getIfUnique() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.jndi.TypeMismatchNamingException",
            "org.springframework.jndi.TypeMismatchNamingException(java.lang.String, java.lang.Class<?>, java.lang.Class<?>)",
            "public org.springframework.jndi.TypeMismatchNamingException(java.lang.String, java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jndi.TypeMismatchNamingException.getRequiredType()",
            "public final java.lang.Class<?> getRequiredType()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jndi.TypeMismatchNamingException.getActualType()",
            "public final java.lang.Class<?> getActualType()"
        ],
        [
            "org.springframework.jndi.JndiPropertySource",
            "org.springframework.jndi.JndiPropertySource(java.lang.String)",
            "public org.springframework.jndi.JndiPropertySource(java.lang.String)"
        ],
        [
            "org.springframework.jndi.JndiPropertySource",
            "org.springframework.jndi.JndiPropertySource(java.lang.String, org.springframework.jndi.JndiLocatorDelegate)",
            "public org.springframework.jndi.JndiPropertySource(java.lang.String, org.springframework.jndi.JndiLocatorDelegate)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.JndiPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.jndi.JndiLocatorSupport",
            "org.springframework.jndi.JndiLocatorSupport()",
            "public org.springframework.jndi.JndiLocatorSupport()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiLocatorSupport.setResourceRef(boolean)",
            "public void setResourceRef(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jndi.JndiLocatorSupport.isResourceRef()",
            "public boolean isResourceRef()"
        ],
        [
            "org.springframework.jndi.JndiTemplate",
            "org.springframework.jndi.JndiTemplate()",
            "public org.springframework.jndi.JndiTemplate()"
        ],
        [
            "org.springframework.jndi.JndiTemplate",
            "org.springframework.jndi.JndiTemplate(java.util.Properties)",
            "public org.springframework.jndi.JndiTemplate(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiTemplate.setEnvironment(java.util.Properties)",
            "public void setEnvironment(java.util.Properties)"
        ],
        [
            "java.util.Properties",
            "org.springframework.jndi.JndiTemplate.getEnvironment()",
            "public java.util.Properties getEnvironment()"
        ],
        [
            "<T> T",
            "org.springframework.jndi.JndiTemplate.execute(org.springframework.jndi.JndiCallback<T>)",
            "public <T> T execute(org.springframework.jndi.JndiCallback<T>) throws javax.naming.NamingException"
        ],
        [
            "javax.naming.Context",
            "org.springframework.jndi.JndiTemplate.getContext()",
            "public javax.naming.Context getContext() throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.jndi.JndiTemplate.releaseContext(javax.naming.Context)",
            "public void releaseContext(javax.naming.Context)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.JndiTemplate.lookup(java.lang.String)",
            "public java.lang.Object lookup(java.lang.String) throws javax.naming.NamingException"
        ],
        [
            "<T> T",
            "org.springframework.jndi.JndiTemplate.lookup(java.lang.String, java.lang.Class<T>)",
            "public <T> T lookup(java.lang.String, java.lang.Class<T>) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.jndi.JndiTemplate.bind(java.lang.String, java.lang.Object)",
            "public void bind(java.lang.String, java.lang.Object) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.jndi.JndiTemplate.rebind(java.lang.String, java.lang.Object)",
            "public void rebind(java.lang.String, java.lang.Object) throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.jndi.JndiTemplate.unbind(java.lang.String)",
            "public void unbind(java.lang.String) throws javax.naming.NamingException"
        ],
        [
            "org.springframework.jndi.JndiObjectLocator",
            "org.springframework.jndi.JndiObjectLocator()",
            "public org.springframework.jndi.JndiObjectLocator()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectLocator.setJndiName(java.lang.String)",
            "public void setJndiName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jndi.JndiObjectLocator.getJndiName()",
            "public java.lang.String getJndiName()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectLocator.setExpectedType(java.lang.Class<?>)",
            "public void setExpectedType(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jndi.JndiObjectLocator.getExpectedType()",
            "public java.lang.Class<?> getExpectedType()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectLocator.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.IllegalArgumentException, javax.naming.NamingException"
        ],
        [
            "org.springframework.jndi.JndiObjectTargetSource",
            "org.springframework.jndi.JndiObjectTargetSource()",
            "public org.springframework.jndi.JndiObjectTargetSource()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectTargetSource.setLookupOnStartup(boolean)",
            "public void setLookupOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectTargetSource.setCache(boolean)",
            "public void setCache(boolean)"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectTargetSource.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jndi.JndiObjectTargetSource.getTargetClass()",
            "public java.lang.Class<?> getTargetClass()"
        ],
        [
            "boolean",
            "org.springframework.jndi.JndiObjectTargetSource.isStatic()",
            "public boolean isStatic()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jndi.JndiObjectTargetSource.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "void",
            "org.springframework.jndi.JndiObjectTargetSource.releaseTarget(java.lang.Object)",
            "public void releaseTarget(java.lang.Object)"
        ],
        [
            "org.springframework.remoting.RemoteConnectFailureException",
            "org.springframework.remoting.RemoteConnectFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.remoting.RemoteConnectFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.remoting.RemoteAccessException",
            "org.springframework.remoting.RemoteAccessException(java.lang.String)",
            "public org.springframework.remoting.RemoteAccessException(java.lang.String)"
        ],
        [
            "org.springframework.remoting.RemoteAccessException",
            "org.springframework.remoting.RemoteAccessException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.remoting.RemoteAccessException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.remoting.RemoteTimeoutException",
            "org.springframework.remoting.RemoteTimeoutException(java.lang.String)",
            "public org.springframework.remoting.RemoteTimeoutException(java.lang.String)"
        ],
        [
            "org.springframework.remoting.RemoteTimeoutException",
            "org.springframework.remoting.RemoteTimeoutException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.remoting.RemoteTimeoutException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationUtils",
            "org.springframework.remoting.support.RemoteInvocationUtils()",
            "public org.springframework.remoting.support.RemoteInvocationUtils()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocationUtils.fillInClientStackTraceIfPossible(java.lang.Throwable)",
            "public static void fillInClientStackTraceIfPossible(java.lang.Throwable)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationResult",
            "org.springframework.remoting.support.RemoteInvocationResult(java.lang.Object)",
            "public org.springframework.remoting.support.RemoteInvocationResult(java.lang.Object)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationResult",
            "org.springframework.remoting.support.RemoteInvocationResult(java.lang.Throwable)",
            "public org.springframework.remoting.support.RemoteInvocationResult(java.lang.Throwable)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationResult",
            "org.springframework.remoting.support.RemoteInvocationResult()",
            "public org.springframework.remoting.support.RemoteInvocationResult()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocationResult.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.support.RemoteInvocationResult.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocationResult.setException(java.lang.Throwable)",
            "public void setException(java.lang.Throwable)"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.remoting.support.RemoteInvocationResult.getException()",
            "public java.lang.Throwable getException()"
        ],
        [
            "boolean",
            "org.springframework.remoting.support.RemoteInvocationResult.hasException()",
            "public boolean hasException()"
        ],
        [
            "boolean",
            "org.springframework.remoting.support.RemoteInvocationResult.hasInvocationTargetException()",
            "public boolean hasInvocationTargetException()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.support.RemoteInvocationResult.recreate()",
            "public java.lang.Object recreate() throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationBasedExporter",
            "org.springframework.remoting.support.RemoteInvocationBasedExporter()",
            "public org.springframework.remoting.support.RemoteInvocationBasedExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocationBasedExporter.setRemoteInvocationExecutor(org.springframework.remoting.support.RemoteInvocationExecutor)",
            "public void setRemoteInvocationExecutor(org.springframework.remoting.support.RemoteInvocationExecutor)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationExecutor",
            "org.springframework.remoting.support.RemoteInvocationBasedExporter.getRemoteInvocationExecutor()",
            "public org.springframework.remoting.support.RemoteInvocationExecutor getRemoteInvocationExecutor()"
        ],
        [
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean()",
            "public org.springframework.remoting.support.SimpleHttpServerFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setPort(int)",
            "public void setPort(int)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setHostname(java.lang.String)",
            "public void setHostname(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setBacklog(int)",
            "public void setBacklog(int)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setShutdownDelay(int)",
            "public void setShutdownDelay(int)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setExecutor(java.util.concurrent.Executor)",
            "public void setExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setContexts(java.util.Map<java.lang.String, com.sun.net.httpserver.HttpHandler>)",
            "public void setContexts(java.util.Map<java.lang.String, com.sun.net.httpserver.HttpHandler>)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setFilters(java.util.List<com.sun.net.httpserver.Filter>)",
            "public void setFilters(java.util.List<com.sun.net.httpserver.Filter>)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.setAuthenticator(com.sun.net.httpserver.Authenticator)",
            "public void setAuthenticator(com.sun.net.httpserver.Authenticator)"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.io.IOException"
        ],
        [
            "com.sun.net.httpserver.HttpServer",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.getObject()",
            "public com.sun.net.httpserver.HttpServer getObject()"
        ],
        [
            "java.lang.Class<? extends com.sun.net.httpserver.HttpServer>",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.getObjectType()",
            "public java.lang.Class<? extends com.sun.net.httpserver.HttpServer> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.destroy()",
            "public void destroy()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.support.SimpleHttpServerFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.remoting.support.RemoteExporter",
            "org.springframework.remoting.support.RemoteExporter()",
            "public org.springframework.remoting.support.RemoteExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteExporter.setService(java.lang.Object)",
            "public void setService(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.support.RemoteExporter.getService()",
            "public java.lang.Object getService()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteExporter.setServiceInterface(java.lang.Class<?>)",
            "public void setServiceInterface(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.support.RemoteExporter.getServiceInterface()",
            "public java.lang.Class<?> getServiceInterface()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteExporter.setRegisterTraceInterceptor(boolean)",
            "public void setRegisterTraceInterceptor(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteExporter.setInterceptors(java.lang.Object[])",
            "public void setInterceptors(java.lang.Object[])"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationBasedAccessor",
            "org.springframework.remoting.support.RemoteInvocationBasedAccessor()",
            "public org.springframework.remoting.support.RemoteInvocationBasedAccessor()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocationBasedAccessor.setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)",
            "public void setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationFactory",
            "org.springframework.remoting.support.RemoteInvocationBasedAccessor.getRemoteInvocationFactory()",
            "public org.springframework.remoting.support.RemoteInvocationFactory getRemoteInvocationFactory()"
        ],
        [
            "org.springframework.remoting.support.DefaultRemoteInvocationFactory",
            "org.springframework.remoting.support.DefaultRemoteInvocationFactory()",
            "public org.springframework.remoting.support.DefaultRemoteInvocationFactory()"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocation",
            "org.springframework.remoting.support.DefaultRemoteInvocationFactory.createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)",
            "public org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)"
        ],
        [
            "org.springframework.remoting.support.DefaultRemoteInvocationExecutor",
            "org.springframework.remoting.support.DefaultRemoteInvocationExecutor()",
            "public org.springframework.remoting.support.DefaultRemoteInvocationExecutor()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(org.springframework.remoting.support.RemoteInvocation, java.lang.Object)",
            "public java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"
        ],
        [
            "org.springframework.remoting.support.RemoteAccessor",
            "org.springframework.remoting.support.RemoteAccessor()",
            "public org.springframework.remoting.support.RemoteAccessor()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteAccessor.setServiceInterface(java.lang.Class<?>)",
            "public void setServiceInterface(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.support.RemoteAccessor.getServiceInterface()",
            "public java.lang.Class<?> getServiceInterface()"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationTraceInterceptor",
            "org.springframework.remoting.support.RemoteInvocationTraceInterceptor()",
            "public org.springframework.remoting.support.RemoteInvocationTraceInterceptor()"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationTraceInterceptor",
            "org.springframework.remoting.support.RemoteInvocationTraceInterceptor(java.lang.String)",
            "public org.springframework.remoting.support.RemoteInvocationTraceInterceptor(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.support.RemotingSupport",
            "org.springframework.remoting.support.RemotingSupport()",
            "public org.springframework.remoting.support.RemotingSupport()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemotingSupport.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.remoting.support.UrlBasedRemoteAccessor",
            "org.springframework.remoting.support.UrlBasedRemoteAccessor()",
            "public org.springframework.remoting.support.UrlBasedRemoteAccessor()"
        ],
        [
            "void",
            "org.springframework.remoting.support.UrlBasedRemoteAccessor.setServiceUrl(java.lang.String)",
            "public void setServiceUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.support.UrlBasedRemoteAccessor.getServiceUrl()",
            "public java.lang.String getServiceUrl()"
        ],
        [
            "void",
            "org.springframework.remoting.support.UrlBasedRemoteAccessor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocation",
            "org.springframework.remoting.support.RemoteInvocation(org.aopalliance.intercept.MethodInvocation)",
            "public org.springframework.remoting.support.RemoteInvocation(org.aopalliance.intercept.MethodInvocation)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocation",
            "org.springframework.remoting.support.RemoteInvocation(java.lang.String, java.lang.Class<?>[], java.lang.Object[])",
            "public org.springframework.remoting.support.RemoteInvocation(java.lang.String, java.lang.Class<?>[], java.lang.Object[])"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocation",
            "org.springframework.remoting.support.RemoteInvocation()",
            "public org.springframework.remoting.support.RemoteInvocation()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocation.setMethodName(java.lang.String)",
            "public void setMethodName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.support.RemoteInvocation.getMethodName()",
            "public java.lang.String getMethodName()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocation.setParameterTypes(java.lang.Class<?>[])",
            "public void setParameterTypes(java.lang.Class<?>[])"
        ],
        [
            "java.lang.Class<?>[]",
            "org.springframework.remoting.support.RemoteInvocation.getParameterTypes()",
            "public java.lang.Class<?>[] getParameterTypes()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocation.setArguments(java.lang.Object[])",
            "public void setArguments(java.lang.Object[])"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.remoting.support.RemoteInvocation.getArguments()",
            "public java.lang.Object[] getArguments()"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocation.addAttribute(java.lang.String, java.io.Serializable)",
            "public void addAttribute(java.lang.String, java.io.Serializable) throws java.lang.IllegalStateException"
        ],
        [
            "java.io.Serializable",
            "org.springframework.remoting.support.RemoteInvocation.getAttribute(java.lang.String)",
            "public java.io.Serializable getAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.support.RemoteInvocation.setAttributes(java.util.Map<java.lang.String, java.io.Serializable>)",
            "public void setAttributes(java.util.Map<java.lang.String, java.io.Serializable>)"
        ],
        [
            "java.util.Map<java.lang.String, java.io.Serializable>",
            "org.springframework.remoting.support.RemoteInvocation.getAttributes()",
            "public java.util.Map<java.lang.String, java.io.Serializable> getAttributes()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.support.RemoteInvocation.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.support.RemoteInvocation.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.remoting.RemoteProxyFailureException",
            "org.springframework.remoting.RemoteProxyFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.remoting.RemoteProxyFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.remoting.RemoteInvocationFailureException",
            "org.springframework.remoting.RemoteInvocationFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.remoting.RemoteInvocationFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.remoting.rmi.RmiInvocationWrapper",
            "org.springframework.remoting.rmi.RmiInvocationWrapper(java.lang.Object, org.springframework.remoting.rmi.RmiBasedExporter)",
            "public org.springframework.remoting.rmi.RmiInvocationWrapper(java.lang.Object, org.springframework.remoting.rmi.RmiBasedExporter)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.rmi.RmiInvocationWrapper.getTargetInterfaceName()",
            "public java.lang.String getTargetInterfaceName()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.rmi.RmiInvocationWrapper.invoke(org.springframework.remoting.support.RemoteInvocation)",
            "public java.lang.Object invoke(org.springframework.remoting.support.RemoteInvocation) throws java.rmi.RemoteException, java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"
        ],
        [
            "org.springframework.remoting.rmi.RmiClientInterceptor",
            "org.springframework.remoting.rmi.RmiClientInterceptor()",
            "public org.springframework.remoting.rmi.RmiClientInterceptor()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiClientInterceptor.setLookupStubOnStartup(boolean)",
            "public void setLookupStubOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiClientInterceptor.setCacheStub(boolean)",
            "public void setCacheStub(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiClientInterceptor.setRefreshStubOnConnectFailure(boolean)",
            "public void setRefreshStubOnConnectFailure(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiClientInterceptor.setRegistryClientSocketFactory(java.rmi.server.RMIClientSocketFactory)",
            "public void setRegistryClientSocketFactory(java.rmi.server.RMIClientSocketFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiClientInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiClientInterceptor.prepare()",
            "public void prepare() throws org.springframework.remoting.RemoteLookupFailureException"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.rmi.RmiClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.rmi.CodebaseAwareObjectInputStream",
            "org.springframework.remoting.rmi.CodebaseAwareObjectInputStream(java.io.InputStream, java.lang.String)",
            "public org.springframework.remoting.rmi.CodebaseAwareObjectInputStream(java.io.InputStream, java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.remoting.rmi.CodebaseAwareObjectInputStream",
            "org.springframework.remoting.rmi.CodebaseAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader, java.lang.String)",
            "public org.springframework.remoting.rmi.CodebaseAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader, java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.remoting.rmi.CodebaseAwareObjectInputStream",
            "org.springframework.remoting.rmi.CodebaseAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader, boolean)",
            "public org.springframework.remoting.rmi.CodebaseAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader, boolean) throws java.io.IOException"
        ],
        [
            "org.springframework.remoting.rmi.JndiRmiServiceExporter",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter()",
            "public org.springframework.remoting.rmi.JndiRmiServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter.setJndiTemplate(org.springframework.jndi.JndiTemplate)",
            "public void setJndiTemplate(org.springframework.jndi.JndiTemplate)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter.setJndiEnvironment(java.util.Properties)",
            "public void setJndiEnvironment(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter.setJndiName(java.lang.String)",
            "public void setJndiName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException, java.rmi.RemoteException"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter.prepare()",
            "public void prepare() throws javax.naming.NamingException, java.rmi.RemoteException"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter.rebind()",
            "public void rebind() throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiServiceExporter.destroy()",
            "public void destroy() throws javax.naming.NamingException, java.rmi.RemoteException"
        ],
        [
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor()",
            "public org.springframework.remoting.rmi.JndiRmiClientInterceptor()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.setServiceInterface(java.lang.Class<?>)",
            "public void setServiceInterface(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.getServiceInterface()",
            "public java.lang.Class<?> getServiceInterface()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)",
            "public void setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationFactory",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.getRemoteInvocationFactory()",
            "public org.springframework.remoting.support.RemoteInvocationFactory getRemoteInvocationFactory()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.setLookupStubOnStartup(boolean)",
            "public void setLookupStubOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.setCacheStub(boolean)",
            "public void setCacheStub(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.setRefreshStubOnConnectFailure(boolean)",
            "public void setRefreshStubOnConnectFailure(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.setExposeAccessContext(boolean)",
            "public void setExposeAccessContext(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.prepare()",
            "public void prepare() throws org.springframework.remoting.RemoteLookupFailureException"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.rmi.JndiRmiClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.rmi.RmiClientInterceptorUtils",
            "org.springframework.remoting.rmi.RmiClientInterceptorUtils()",
            "public org.springframework.remoting.rmi.RmiClientInterceptorUtils()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.rmi.RmiClientInterceptorUtils.invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation, java.lang.Object)",
            "public static java.lang.Object invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation, java.lang.Object) throws java.lang.reflect.InvocationTargetException"
        ],
        [
            "java.lang.Exception",
            "org.springframework.remoting.rmi.RmiClientInterceptorUtils.convertRmiAccessException(java.lang.reflect.Method, java.lang.Throwable, java.lang.String)",
            "public static java.lang.Exception convertRmiAccessException(java.lang.reflect.Method, java.lang.Throwable, java.lang.String)"
        ],
        [
            "java.lang.Exception",
            "org.springframework.remoting.rmi.RmiClientInterceptorUtils.convertRmiAccessException(java.lang.reflect.Method, java.rmi.RemoteException, java.lang.String)",
            "public static java.lang.Exception convertRmiAccessException(java.lang.reflect.Method, java.rmi.RemoteException, java.lang.String)"
        ],
        [
            "java.lang.Exception",
            "org.springframework.remoting.rmi.RmiClientInterceptorUtils.convertRmiAccessException(java.lang.reflect.Method, java.rmi.RemoteException, boolean, java.lang.String)",
            "public static java.lang.Exception convertRmiAccessException(java.lang.reflect.Method, java.rmi.RemoteException, boolean, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.remoting.rmi.RmiClientInterceptorUtils.isConnectFailure(java.rmi.RemoteException)",
            "public static boolean isConnectFailure(java.rmi.RemoteException)"
        ],
        [
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter",
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter()",
            "public org.springframework.remoting.rmi.RemoteInvocationSerializingExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.setContentType(java.lang.String)",
            "public void setContentType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.setAcceptProxyClasses(boolean)",
            "public void setAcceptProxyClasses(boolean)"
        ],
        [
            "boolean",
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.isAcceptProxyClasses()",
            "public boolean isAcceptProxyClasses()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.prepare()",
            "public void prepare()"
        ],
        [
            "org.springframework.remoting.rmi.JndiRmiProxyFactoryBean",
            "org.springframework.remoting.rmi.JndiRmiProxyFactoryBean()",
            "public org.springframework.remoting.rmi.JndiRmiProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiProxyFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.JndiRmiProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.naming.NamingException"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.rmi.JndiRmiProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.rmi.JndiRmiProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.rmi.JndiRmiProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.remoting.rmi.RmiProxyFactoryBean",
            "org.springframework.remoting.rmi.RmiProxyFactoryBean()",
            "public org.springframework.remoting.rmi.RmiProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.rmi.RmiProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.rmi.RmiProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.rmi.RmiProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean()",
            "public org.springframework.remoting.rmi.RmiRegistryFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.setHost(java.lang.String)",
            "public void setHost(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getHost()",
            "public java.lang.String getHost()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.setPort(int)",
            "public void setPort(int)"
        ],
        [
            "int",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getPort()",
            "public int getPort()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.setClientSocketFactory(java.rmi.server.RMIClientSocketFactory)",
            "public void setClientSocketFactory(java.rmi.server.RMIClientSocketFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.setServerSocketFactory(java.rmi.server.RMIServerSocketFactory)",
            "public void setServerSocketFactory(java.rmi.server.RMIServerSocketFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.setAlwaysCreate(boolean)",
            "public void setAlwaysCreate(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "java.rmi.registry.Registry",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getObject()",
            "public java.rmi.registry.Registry getObject() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<? extends java.rmi.registry.Registry>",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getObjectType()",
            "public java.lang.Class<? extends java.rmi.registry.Registry> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.destroy()",
            "public void destroy() throws java.rmi.RemoteException"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.rmi.RmiRegistryFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.remoting.rmi.RmiServiceExporter",
            "org.springframework.remoting.rmi.RmiServiceExporter()",
            "public org.springframework.remoting.rmi.RmiServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setServiceName(java.lang.String)",
            "public void setServiceName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setServicePort(int)",
            "public void setServicePort(int)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setClientSocketFactory(java.rmi.server.RMIClientSocketFactory)",
            "public void setClientSocketFactory(java.rmi.server.RMIClientSocketFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setServerSocketFactory(java.rmi.server.RMIServerSocketFactory)",
            "public void setServerSocketFactory(java.rmi.server.RMIServerSocketFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setRegistry(java.rmi.registry.Registry)",
            "public void setRegistry(java.rmi.registry.Registry)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setRegistryHost(java.lang.String)",
            "public void setRegistryHost(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setRegistryPort(int)",
            "public void setRegistryPort(int)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setRegistryClientSocketFactory(java.rmi.server.RMIClientSocketFactory)",
            "public void setRegistryClientSocketFactory(java.rmi.server.RMIClientSocketFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setRegistryServerSocketFactory(java.rmi.server.RMIServerSocketFactory)",
            "public void setRegistryServerSocketFactory(java.rmi.server.RMIServerSocketFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setAlwaysCreateRegistry(boolean)",
            "public void setAlwaysCreateRegistry(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.setReplaceExistingBinding(boolean)",
            "public void setReplaceExistingBinding(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.rmi.RemoteException"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.prepare()",
            "public void prepare() throws java.rmi.RemoteException"
        ],
        [
            "void",
            "org.springframework.remoting.rmi.RmiServiceExporter.destroy()",
            "public void destroy() throws java.rmi.RemoteException"
        ],
        [
            "org.springframework.remoting.rmi.RmiBasedExporter",
            "org.springframework.remoting.rmi.RmiBasedExporter()",
            "public org.springframework.remoting.rmi.RmiBasedExporter()"
        ],
        [
            "org.springframework.remoting.RemoteLookupFailureException",
            "org.springframework.remoting.RemoteLookupFailureException(java.lang.String)",
            "public org.springframework.remoting.RemoteLookupFailureException(java.lang.String)"
        ],
        [
            "org.springframework.remoting.RemoteLookupFailureException",
            "org.springframework.remoting.RemoteLookupFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.remoting.RemoteLookupFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$42",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$42(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function20)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$42(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function20)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$42.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$18",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$18(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function8)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$18(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function8)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$18.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$40",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$40(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function19)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$40(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function19)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$40.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$31",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$31(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function15)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$31(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function15)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$31.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$29",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$29(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function14)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$29(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function14)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$29.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$37",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$37(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function18)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$37(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function18)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$37.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$20",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$20(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function9)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$20(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function9)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$20.get()",
            "public final T get()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.BeanDefinitionDsl$environment$beans$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.context.support.BeanDefinitionDsl$environment$beans$1.invoke(org.springframework.core.env.ConfigurableEnvironment)",
            "public final boolean invoke(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "kotlin.reflect.KDeclarationContainer",
            "org.springframework.context.support.BeanDefinitionDsl$environment$beans$1.getOwner()",
            "public final kotlin.reflect.KDeclarationContainer getOwner()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.BeanDefinitionDsl$environment$beans$1.getName()",
            "public final java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.context.support.BeanDefinitionDsl$environment$beans$1.getSignature()",
            "public final java.lang.String getSignature()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$7",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$7(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function3)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$7(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function3)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$7.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$25",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$25(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function12)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$25(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function12)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$25.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$46",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$46(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function22)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$46(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function22)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$46.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$36",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$36(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function17)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$36(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function17)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$36.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext$provider$$inlined$getBeanProvider$1",
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext$provider$$inlined$getBeanProvider$1()",
            "public org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext$provider$$inlined$getBeanProvider$1()"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.children$annotations()",
            "public static void children$annotations()"
        ],
        [
            "java.util.ArrayList<org.springframework.context.support.BeanDefinitionDsl>",
            "org.springframework.context.support.BeanDefinitionDsl.getChildren()",
            "public final java.util.ArrayList<org.springframework.context.support.BeanDefinitionDsl> getChildren()"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.context$annotations()",
            "public static void context$annotations()"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext",
            "org.springframework.context.support.BeanDefinitionDsl.getContext()",
            "public final org.springframework.context.support.GenericApplicationContext getContext()"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.setContext(org.springframework.context.support.GenericApplicationContext)",
            "public final void setContext(org.springframework.context.support.GenericApplicationContext)"
        ],
        [
            "org.springframework.core.env.ConfigurableEnvironment",
            "org.springframework.context.support.BeanDefinitionDsl.getEnv()",
            "public final org.springframework.core.env.ConfigurableEnvironment getEnv()"
        ],
        [
            "<T> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T> void bean(java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext, ? extends T>)",
            "public final <T> void bean(java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext, ? extends T>)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, kotlin.jvm.functions.Function1, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, kotlin.jvm.functions.Function1, int, java.lang.Object)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function0<? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T> void bean(kotlin.jvm.functions.Function0<? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function0, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function0, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function1<? super A, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A> void bean(kotlin.jvm.functions.Function1<? super A, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function2<? super A, ? super B, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B> void bean(kotlin.jvm.functions.Function2<? super A, ? super B, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function2, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function2, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function3<? super A, ? super B, ? super C, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C> void bean(kotlin.jvm.functions.Function3<? super A, ? super B, ? super C, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function3, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function3, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function4<? super A, ? super B, ? super C, ? super D, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D> void bean(kotlin.jvm.functions.Function4<? super A, ? super B, ? super C, ? super D, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function4, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function4, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E> void bean(kotlin.jvm.functions.Function5<? super A, ? super B, ? super C, ? super D, ? super E, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function5, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function5, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F> void bean(kotlin.jvm.functions.Function6<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function6, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function6, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G> void bean(kotlin.jvm.functions.Function7<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function7, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function7, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H> void bean(kotlin.jvm.functions.Function8<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function8, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function8, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function9<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I> void bean(kotlin.jvm.functions.Function9<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function9, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function9, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function10<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J> void bean(kotlin.jvm.functions.Function10<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function10, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function10, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function11<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K> void bean(kotlin.jvm.functions.Function11<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function11, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function11, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function12<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L> void bean(kotlin.jvm.functions.Function12<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function12, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function12, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function13<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M> void bean(kotlin.jvm.functions.Function13<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function13, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function13, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function14<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N> void bean(kotlin.jvm.functions.Function14<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function14, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function14, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function15<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O> void bean(kotlin.jvm.functions.Function15<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function15, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function15, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function16<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P> void bean(kotlin.jvm.functions.Function16<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function16, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function16, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function17<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q> void bean(kotlin.jvm.functions.Function17<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function17, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function17, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function18<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R> void bean(kotlin.jvm.functions.Function18<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function18, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function18, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function19<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S> void bean(kotlin.jvm.functions.Function19<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function19, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function19, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function20<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? super U, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U> void bean(kotlin.jvm.functions.Function20<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? super U, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function20, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function20, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U, V> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function21<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? super U, ? super V, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U, V> void bean(kotlin.jvm.functions.Function21<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? super U, ? super V, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function21, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function21, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "<T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U, V, W> void",
            "org.springframework.context.support.BeanDefinitionDsl.bean(kotlin.jvm.functions.Function22<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? super U, ? super V, ? super W, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public final <T, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, U, V, W> void bean(kotlin.jvm.functions.Function22<? super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? super G, ? super H, ? super I, ? super J, ? super K, ? super L, ? super M, ? super N, ? super O, ? super P, ? super Q, ? super R, ? super S, ? super U, ? super V, ? super W, ? extends T>, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function22, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)",
            "public static void bean$default(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function22, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role, int, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.profile(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>)",
            "public final void profile(java.lang.String, kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.environment(kotlin.jvm.functions.Function1<? super org.springframework.core.env.ConfigurableEnvironment, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>)",
            "public final void environment(kotlin.jvm.functions.Function1<? super org.springframework.core.env.ConfigurableEnvironment, java.lang.Boolean>, kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.initialize(org.springframework.context.support.GenericApplicationContext)",
            "public void initialize(org.springframework.context.support.GenericApplicationContext)"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl.initialize(org.springframework.context.ConfigurableApplicationContext)",
            "public void initialize(org.springframework.context.ConfigurableApplicationContext)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl",
            "org.springframework.context.support.BeanDefinitionDsl(kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>, kotlin.jvm.functions.Function1<? super org.springframework.core.env.ConfigurableEnvironment, java.lang.Boolean>)",
            "public org.springframework.context.support.BeanDefinitionDsl(kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>, kotlin.jvm.functions.Function1<? super org.springframework.core.env.ConfigurableEnvironment, java.lang.Boolean>)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl",
            "org.springframework.context.support.BeanDefinitionDsl(kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)",
            "public org.springframework.context.support.BeanDefinitionDsl(kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$1.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$1",
            "org.springframework.context.support.BeanDefinitionDsl$bean$1(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$1(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl",
            "org.springframework.context.support.BeanDefinitionDslKt.beans(kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>)",
            "public static final org.springframework.context.support.BeanDefinitionDsl beans(kotlin.jvm.functions.Function1<? super org.springframework.context.support.BeanDefinitionDsl, kotlin.Unit>)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$28",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$28(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function13)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$28(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function13)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$28.get()",
            "public final T get()"
        ],
        [
            "<T> T",
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext.ref(java.lang.String)",
            "public final <T> T ref(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext.ref$default(org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext, java.lang.String, int, java.lang.Object)",
            "public static java.lang.Object ref$default(org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext, java.lang.String, int, java.lang.Object)"
        ],
        [
            "<T> org.springframework.beans.factory.ObjectProvider<T>",
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext.provider()",
            "public final <T> org.springframework.beans.factory.ObjectProvider<T> provider()"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext.context$annotations()",
            "public static void context$annotations()"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext",
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext.getContext()",
            "public final org.springframework.context.support.GenericApplicationContext getContext()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext",
            "org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext(org.springframework.context.support.GenericApplicationContext)",
            "public org.springframework.context.support.BeanDefinitionDsl$BeanSupplierContext(org.springframework.context.support.GenericApplicationContext)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$16",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$16(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function7)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$16(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function7)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$16.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$19",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$19(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function9)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$19(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function9)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$19.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$15",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$15(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function7)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$15(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function7)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$15.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$24",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$24(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function11)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$24(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function11)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$24.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$38",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$38(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function18)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$38(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function18)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$38.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$9",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$9(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function4)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$9(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function4)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$9.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$6",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$6(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function2)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$6(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function2)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$6.get()",
            "public final T get()"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.BeanDefinitionDsl$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.context.support.BeanDefinitionDsl$1.invoke(org.springframework.core.env.ConfigurableEnvironment)",
            "public final boolean invoke(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "java.lang.Object",
            "org.springframework.context.support.BeanDefinitionDsl$profile$beans$1.invoke(java.lang.Object)",
            "public java.lang.Object invoke(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.context.support.BeanDefinitionDsl$profile$beans$1.invoke(org.springframework.core.env.ConfigurableEnvironment)",
            "public final boolean invoke(org.springframework.core.env.ConfigurableEnvironment)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$21",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$21(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function10)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$21(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function10)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$21.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$11",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$11(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function5)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$11(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function5)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$11.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$43",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$43(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function21)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$43(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function21)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$43.get()",
            "public final T get()"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt.registerBean(org.springframework.context.support.GenericApplicationContext, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public static final <T> void registerBean(org.springframework.context.support.GenericApplicationContext, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt.registerBean(org.springframework.context.support.GenericApplicationContext, java.lang.String, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)",
            "public static final <T> void registerBean(org.springframework.context.support.GenericApplicationContext, java.lang.String, org.springframework.beans.factory.config.BeanDefinitionCustomizer...)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt.registerBean(org.springframework.context.support.GenericApplicationContext, org.springframework.beans.factory.config.BeanDefinitionCustomizer[], kotlin.jvm.functions.Function1<? super org.springframework.context.ApplicationContext, ? extends T>)",
            "public static final <T> void registerBean(org.springframework.context.support.GenericApplicationContext, org.springframework.beans.factory.config.BeanDefinitionCustomizer[], kotlin.jvm.functions.Function1<? super org.springframework.context.ApplicationContext, ? extends T>)"
        ],
        [
            "<T> void",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt.registerBean(org.springframework.context.support.GenericApplicationContext, java.lang.String, org.springframework.beans.factory.config.BeanDefinitionCustomizer[], kotlin.jvm.functions.Function1<? super org.springframework.context.ApplicationContext, ? extends T>)",
            "public static final <T> void registerBean(org.springframework.context.support.GenericApplicationContext, java.lang.String, org.springframework.beans.factory.config.BeanDefinitionCustomizer[], kotlin.jvm.functions.Function1<? super org.springframework.context.ApplicationContext, ? extends T>)"
        ],
        [
            "org.springframework.context.support.GenericApplicationContext",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt.GenericApplicationContext(kotlin.jvm.functions.Function1<? super org.springframework.context.support.GenericApplicationContext, kotlin.Unit>)",
            "public static final org.springframework.context.support.GenericApplicationContext GenericApplicationContext(kotlin.jvm.functions.Function1<? super org.springframework.context.support.GenericApplicationContext, kotlin.Unit>)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$17",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$17(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function8)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$17(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function8)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$17.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$23",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$23(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function11)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$23(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function11)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$23.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$34",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$34(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function16)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$34(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function16)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$34.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$26",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$26(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function12)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$26(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function12)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$26.get()",
            "public final T get()"
        ],
        [
            "T",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$1.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$1",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$1(org.springframework.context.support.GenericApplicationContext, kotlin.jvm.functions.Function1)",
            "public org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$1(org.springframework.context.support.GenericApplicationContext, kotlin.jvm.functions.Function1)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$5",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$5(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function2)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$5(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function2)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$5.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$2",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$2(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function0)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$2(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function0)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$2.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$Role[]",
            "org.springframework.context.support.BeanDefinitionDsl$Role.values()",
            "public static org.springframework.context.support.BeanDefinitionDsl$Role[] values()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$Role",
            "org.springframework.context.support.BeanDefinitionDsl$Role.valueOf(java.lang.String)",
            "public static org.springframework.context.support.BeanDefinitionDsl$Role valueOf(java.lang.String)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$22",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$22(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function10)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$22(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function10)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$22.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$Scope[]",
            "org.springframework.context.support.BeanDefinitionDsl$Scope.values()",
            "public static org.springframework.context.support.BeanDefinitionDsl$Scope[] values()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$Scope",
            "org.springframework.context.support.BeanDefinitionDsl$Scope.valueOf(java.lang.String)",
            "public static org.springframework.context.support.BeanDefinitionDsl$Scope valueOf(java.lang.String)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$13",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$13(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function6)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$13(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function6)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$13.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$8",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$8(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function3)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$8(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function3)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$8.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$30",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$30(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function14)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$30(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function14)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$30.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$3",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$3(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$3(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$3.get()",
            "public final T get()"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl$bean$customizer$1.customize(org.springframework.beans.factory.config.BeanDefinition)",
            "public final void customize(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$customizer$1",
            "org.springframework.context.support.BeanDefinitionDsl$bean$customizer$1(org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$customizer$1(org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$4",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$4(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$4(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function1)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$4.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$14",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$14(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function6)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$14(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function6)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$14.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$1",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$1(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function0)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$1(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function0)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$1.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$39",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$39(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function19)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$39(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function19)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$39.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$35",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$35(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function17)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$35(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function17)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$35.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$45",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$45(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function22)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$45(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function22)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$45.get()",
            "public final T get()"
        ],
        [
            "T",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$2.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$2",
            "org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$2(org.springframework.context.support.GenericApplicationContext, kotlin.jvm.functions.Function1)",
            "public org.springframework.context.support.GenericApplicationContextExtensionsKt$registerBean$2(org.springframework.context.support.GenericApplicationContext, kotlin.jvm.functions.Function1)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$41",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$41(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function20)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$41(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function20)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$41.get()",
            "public final T get()"
        ],
        [
            "void",
            "org.springframework.context.support.BeanDefinitionDsl$bean$customizer$2.customize(org.springframework.beans.factory.config.BeanDefinition)",
            "public final void customize(org.springframework.beans.factory.config.BeanDefinition)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$customizer$2",
            "org.springframework.context.support.BeanDefinitionDsl$bean$customizer$2(org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$customizer$2(org.springframework.context.support.BeanDefinitionDsl$Scope, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String, org.springframework.context.support.BeanDefinitionDsl$Role)"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$33",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$33(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function16)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$33(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function16)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$33.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$12",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$12(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function5)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$12(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function5)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$12.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$27",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$27(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function13)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$27(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function13)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$27.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$32",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$32(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function15)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$32(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function15)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$32.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$10",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$10(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function4)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$10(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function4)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$10.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$44",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$44(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function21)",
            "public org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$44(org.springframework.context.support.BeanDefinitionDsl, kotlin.jvm.functions.Function21)"
        ],
        [
            "T",
            "org.springframework.context.support.BeanDefinitionDsl$bean$$inlined$bean$44.get()",
            "public final T get()"
        ],
        [
            "org.springframework.context.annotation.AnnotationConfigApplicationContext",
            "org.springframework.context.annotation.AnnotationConfigApplicationContextExtensionsKt.AnnotationConfigApplicationContext(kotlin.jvm.functions.Function1<? super org.springframework.context.annotation.AnnotationConfigApplicationContext, kotlin.Unit>)",
            "public static final org.springframework.context.annotation.AnnotationConfigApplicationContext AnnotationConfigApplicationContext(kotlin.jvm.functions.Function1<? super org.springframework.context.annotation.AnnotationConfigApplicationContext, kotlin.Unit>)"
        ],
        [
            "void",
            "org.springframework.ui.ModelExtensionsKt.set(org.springframework.ui.Model, java.lang.String, java.lang.Object)",
            "public static final void set(org.springframework.ui.Model, java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.ui.ModelMapExtensionsKt.set(org.springframework.ui.ModelMap, java.lang.String, java.lang.Object)",
            "public static final void set(org.springframework.ui.ModelMap, java.lang.String, java.lang.Object)"
        ]
    ]
}