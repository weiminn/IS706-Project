{"lucene-core-7.0.0.jar": [["java.lang.Package", "org.apache.lucene.LucenePackage.get()", "public static java.lang.Package get()"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$1.getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)"], ["void", "org.apache.lucene.analysis.Analyzer$1.setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)", "public void setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$2.getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)"], ["void", "org.apache.lucene.analysis.Analyzer$2.setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)", "public void setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"], ["org.apache.lucene.analysis.Analyzer$ReuseStrategy", "org.apache.lucene.analysis.Analyzer$ReuseStrategy()", "public org.apache.lucene.analysis.Analyzer$ReuseStrategy()"], ["void", "org.apache.lucene.analysis.Analyzer$StringTokenStream.reset()", "public void reset()"], ["boolean", "org.apache.lucene.analysis.Analyzer$StringTokenStream.incrementToken()", "public boolean incrementToken()"], ["void", "org.apache.lucene.analysis.Analyzer$StringTokenStream.end()", "public void end() throws java.io.IOException"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenStream()", "public org.apache.lucene.analysis.TokenStream getTokenStream()"], ["org.apache.lucene.analysis.Tokenizer", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenizer()", "public org.apache.lucene.analysis.Tokenizer getTokenizer()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.analysis.Analyzer()", "public org.apache.lucene.analysis.Analyzer()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.analysis.Analyzer(org.apache.lucene.analysis.Analyzer$ReuseStrategy)", "public org.apache.lucene.analysis.Analyzer(org.apache.lucene.analysis.Analyzer$ReuseStrategy)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.Analyzer.tokenStream(java.lang.String, java.io.Reader)", "public final org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.Analyzer.tokenStream(java.lang.String, java.lang.String)", "public final org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.lang.String)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.Analyzer.normalize(java.lang.String, java.lang.String)", "public final org.apache.lucene.util.BytesRef normalize(java.lang.String, java.lang.String)"], ["int", "org.apache.lucene.analysis.Analyzer.getPositionIncrementGap(java.lang.String)", "public int getPositionIncrementGap(java.lang.String)"], ["int", "org.apache.lucene.analysis.Analyzer.getOffsetGap(java.lang.String)", "public int getOffsetGap(java.lang.String)"], ["org.apache.lucene.analysis.Analyzer$ReuseStrategy", "org.apache.lucene.analysis.Analyzer.getReuseStrategy()", "public final org.apache.lucene.analysis.Analyzer$ReuseStrategy getReuseStrategy()"], ["void", "org.apache.lucene.analysis.Analyzer.setVersion(org.apache.lucene.util.Version)", "public void setVersion(org.apache.lucene.util.Version)"], ["org.apache.lucene.util.Version", "org.apache.lucene.analysis.Analyzer.getVersion()", "public org.apache.lucene.util.Version getVersion()"], ["void", "org.apache.lucene.analysis.Analyzer.close()", "public void close()"], ["int", "org.apache.lucene.analysis.AnalyzerWrapper.getPositionIncrementGap(java.lang.String)", "public int getPositionIncrementGap(java.lang.String)"], ["int", "org.apache.lucene.analysis.AnalyzerWrapper.getOffsetGap(java.lang.String)", "public int getOffsetGap(java.lang.String)"], ["java.io.Reader", "org.apache.lucene.analysis.AnalyzerWrapper.initReader(java.lang.String, java.io.Reader)", "public final java.io.Reader initReader(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.CachingTokenFilter", "org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)"], ["void", "org.apache.lucene.analysis.CachingTokenFilter.reset()", "public void reset() throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.CachingTokenFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.CachingTokenFilter.end()", "public final void end()"], ["boolean", "org.apache.lucene.analysis.CachingTokenFilter.isCached()", "public boolean isCached()"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$1.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$1.add(java.lang.CharSequence)", "public boolean add(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$1.add(java.lang.String)", "public boolean add(java.lang.String)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$1.add(char[])", "public boolean add(char[])"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap.containsKey(char[], int, int)", "public boolean containsKey(char[], int, int)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap.containsKey(java.lang.CharSequence)", "public boolean containsKey(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap.get(char[], int, int)", "public V get(char[], int, int)"], ["V", "org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap.get(java.lang.CharSequence)", "public V get(java.lang.CharSequence)"], ["V", "org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.hasNext()", "public boolean hasNext()"], ["char[]", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.nextKey()", "public char[] nextKey()"], ["java.lang.String", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.nextKeyString()", "public java.lang.String nextKeyString()"], ["V", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.currentValue()", "public V currentValue()"], ["V", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.setValue(V)", "public V setValue(V)"], ["java.util.Map$Entry<java.lang.Object, V>", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.next()", "public java.util.Map$Entry<java.lang.Object, V> next()"], ["void", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.analysis.CharArrayMap$EntryIterator.next()", "public java.lang.Object next()"], ["org.apache.lucene.analysis.CharArrayMap<V>.EntryIterator", "org.apache.lucene.analysis.CharArrayMap$EntrySet.iterator()", "public org.apache.lucene.analysis.CharArrayMap<V>.EntryIterator iterator()"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.apache.lucene.analysis.CharArrayMap$EntrySet.size()", "public int size()"], ["void", "org.apache.lucene.analysis.CharArrayMap$EntrySet.clear()", "public void clear()"], ["java.util.Iterator", "org.apache.lucene.analysis.CharArrayMap$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["java.lang.Object", "org.apache.lucene.analysis.CharArrayMap$MapEntry.getKey()", "public java.lang.Object getKey()"], ["V", "org.apache.lucene.analysis.CharArrayMap$MapEntry.getValue()", "public V getValue()"], ["V", "org.apache.lucene.analysis.CharArrayMap$MapEntry.setValue(V)", "public V setValue(V)"], ["java.lang.String", "org.apache.lucene.analysis.CharArrayMap$MapEntry.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.clear()", "public void clear()"], ["V", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.put(java.lang.Object, V)", "public V put(java.lang.Object, V)"], ["V", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.put(char[], V)", "public V put(char[], V)"], ["V", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.put(java.lang.CharSequence, V)", "public V put(java.lang.CharSequence, V)"], ["V", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.put(java.lang.String, V)", "public V put(java.lang.String, V)"], ["V", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["java.util.Set", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap.keySet()", "public java.util.Set keySet()"], ["org.apache.lucene.analysis.CharArrayMap", "org.apache.lucene.analysis.CharArrayMap(int, boolean)", "public org.apache.lucene.analysis.CharArrayMap(int, boolean)"], ["org.apache.lucene.analysis.CharArrayMap", "org.apache.lucene.analysis.CharArrayMap(java.util.Map<?, ? extends V>, boolean)", "public org.apache.lucene.analysis.CharArrayMap(java.util.Map<?, ? extends V>, boolean)"], ["void", "org.apache.lucene.analysis.CharArrayMap.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.CharArrayMap.containsKey(char[], int, int)", "public boolean containsKey(char[], int, int)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap.containsKey(java.lang.CharSequence)", "public boolean containsKey(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArrayMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.apache.lucene.analysis.CharArrayMap.get(char[], int, int)", "public V get(char[], int, int)"], ["V", "org.apache.lucene.analysis.CharArrayMap.get(java.lang.CharSequence)", "public V get(java.lang.CharSequence)"], ["V", "org.apache.lucene.analysis.CharArrayMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.apache.lucene.analysis.CharArrayMap.put(java.lang.CharSequence, V)", "public V put(java.lang.CharSequence, V)"], ["V", "org.apache.lucene.analysis.CharArrayMap.put(java.lang.Object, V)", "public V put(java.lang.Object, V)"], ["V", "org.apache.lucene.analysis.CharArrayMap.put(java.lang.String, V)", "public V put(java.lang.String, V)"], ["V", "org.apache.lucene.analysis.CharArrayMap.put(char[], V)", "public V put(char[], V)"], ["V", "org.apache.lucene.analysis.CharArrayMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.apache.lucene.analysis.CharArrayMap.size()", "public int size()"], ["java.lang.String", "org.apache.lucene.analysis.CharArrayMap.toString()", "public java.lang.String toString()"], ["org.apache.lucene.analysis.CharArrayMap<V>.EntrySet", "org.apache.lucene.analysis.CharArrayMap.entrySet()", "public final org.apache.lucene.analysis.CharArrayMap<V>.EntrySet entrySet()"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArrayMap.keySet()", "public final org.apache.lucene.analysis.CharArraySet keySet()"], ["<V> org.apache.lucene.analysis.CharArrayMap<V>", "org.apache.lucene.analysis.CharArrayMap.unmodifiableMap(org.apache.lucene.analysis.CharArrayMap<V>)", "public static <V> org.apache.lucene.analysis.CharArrayMap<V> unmodifiableMap(org.apache.lucene.analysis.CharArrayMap<V>)"], ["<V> org.apache.lucene.analysis.CharArrayMap<V>", "org.apache.lucene.analysis.CharArrayMap.copy(java.util.Map<?, ? extends V>)", "public static <V> org.apache.lucene.analysis.CharArrayMap<V> copy(java.util.Map<?, ? extends V>)"], ["<V> org.apache.lucene.analysis.CharArrayMap<V>", "org.apache.lucene.analysis.CharArrayMap.emptyMap()", "public static <V> org.apache.lucene.analysis.CharArrayMap<V> emptyMap()"], ["java.util.Set", "org.apache.lucene.analysis.CharArrayMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "org.apache.lucene.analysis.CharArrayMap.keySet()", "public java.util.Set keySet()"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet(int, boolean)", "public org.apache.lucene.analysis.CharArraySet(int, boolean)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet(java.util.Collection<?>, boolean)", "public org.apache.lucene.analysis.CharArraySet(java.util.Collection<?>, boolean)"], ["void", "org.apache.lucene.analysis.CharArraySet.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.CharArraySet.contains(char[], int, int)", "public boolean contains(char[], int, int)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.contains(java.lang.CharSequence)", "public boolean contains(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(java.lang.CharSequence)", "public boolean add(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(java.lang.String)", "public boolean add(java.lang.String)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(char[])", "public boolean add(char[])"], ["int", "org.apache.lucene.analysis.CharArraySet.size()", "public int size()"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet.unmodifiableSet(org.apache.lucene.analysis.CharArraySet)", "public static org.apache.lucene.analysis.CharArraySet unmodifiableSet(org.apache.lucene.analysis.CharArraySet)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet.copy(java.util.Set<?>)", "public static org.apache.lucene.analysis.CharArraySet copy(java.util.Set<?>)"], ["java.util.Iterator<java.lang.Object>", "org.apache.lucene.analysis.CharArraySet.iterator()", "public java.util.Iterator<java.lang.Object> iterator()"], ["java.lang.String", "org.apache.lucene.analysis.CharArraySet.toString()", "public java.lang.String toString()"], ["org.apache.lucene.analysis.CharFilter", "org.apache.lucene.analysis.CharFilter(java.io.Reader)", "public org.apache.lucene.analysis.CharFilter(java.io.Reader)"], ["void", "org.apache.lucene.analysis.CharFilter.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.analysis.CharFilter.correctOffset(int)", "public final int correctOffset(int)"], ["char[]", "org.apache.lucene.analysis.CharacterUtils$CharacterBuffer.getBuffer()", "public char[] getBuffer()"], ["int", "org.apache.lucene.analysis.CharacterUtils$CharacterBuffer.getOffset()", "public int getOffset()"], ["int", "org.apache.lucene.analysis.CharacterUtils$CharacterBuffer.getLength()", "public int getLength()"], ["void", "org.apache.lucene.analysis.CharacterUtils$CharacterBuffer.reset()", "public void reset()"], ["org.apache.lucene.analysis.CharacterUtils$CharacterBuffer", "org.apache.lucene.analysis.CharacterUtils.newCharacterBuffer(int)", "public static org.apache.lucene.analysis.CharacterUtils$CharacterBuffer newCharacterBuffer(int)"], ["void", "org.apache.lucene.analysis.CharacterUtils.toLowerCase(char[], int, int)", "public static void toLowerCase(char[], int, int)"], ["void", "org.apache.lucene.analysis.CharacterUtils.toUpperCase(char[], int, int)", "public static void toUpperCase(char[], int, int)"], ["int", "org.apache.lucene.analysis.CharacterUtils.toCodePoints(char[], int, int, int[], int)", "public static int toCodePoints(char[], int, int, int[], int)"], ["int", "org.apache.lucene.analysis.CharacterUtils.toChars(int[], int, int, char[], int)", "public static int toChars(int[], int, int, char[], int)"], ["boolean", "org.apache.lucene.analysis.CharacterUtils.fill(org.apache.lucene.analysis.CharacterUtils$CharacterBuffer, java.io.Reader, int)", "public static boolean fill(org.apache.lucene.analysis.CharacterUtils$CharacterBuffer, java.io.Reader, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.CharacterUtils.fill(org.apache.lucene.analysis.CharacterUtils$CharacterBuffer, java.io.Reader)", "public static boolean fill(org.apache.lucene.analysis.CharacterUtils$CharacterBuffer, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.DelegatingAnalyzerWrapper$DelegatingReuseStrategy.getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)"], ["void", "org.apache.lucene.analysis.DelegatingAnalyzerWrapper$DelegatingReuseStrategy.setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)", "public void setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"], ["org.apache.lucene.analysis.FilteringTokenFilter", "org.apache.lucene.analysis.FilteringTokenFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.FilteringTokenFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.FilteringTokenFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.FilteringTokenFilter.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.FilteringTokenFilter.end()", "public void end() throws java.io.IOException"], ["org.apache.lucene.analysis.LowerCaseFilter", "org.apache.lucene.analysis.LowerCaseFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.LowerCaseFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.LowerCaseFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["int", "org.apache.lucene.analysis.ReusableStringReader.read()", "public int read()"], ["int", "org.apache.lucene.analysis.ReusableStringReader.read(char[], int, int)", "public int read(char[], int, int)"], ["void", "org.apache.lucene.analysis.ReusableStringReader.close()", "public void close()"], ["org.apache.lucene.analysis.StopFilter", "org.apache.lucene.analysis.StopFilter(org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.CharArraySet)", "public org.apache.lucene.analysis.StopFilter(org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.CharArraySet)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.lang.String...)", "public static org.apache.lucene.analysis.CharArraySet makeStopSet(java.lang.String...)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.util.List<?>)", "public static org.apache.lucene.analysis.CharArraySet makeStopSet(java.util.List<?>)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.lang.String[], boolean)", "public static org.apache.lucene.analysis.CharArraySet makeStopSet(java.lang.String[], boolean)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.util.List<?>, boolean)", "public static org.apache.lucene.analysis.CharArraySet makeStopSet(java.util.List<?>, boolean)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.StopwordAnalyzerBase.getStopwordSet()", "public org.apache.lucene.analysis.CharArraySet getStopwordSet()"], ["void", "org.apache.lucene.analysis.TokenFilter.end()", "public void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenFilter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenFilter.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.end()", "public void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStreamToAutomaton$Position.reset()", "public void reset()"], ["org.apache.lucene.analysis.TokenStreamToAutomaton", "org.apache.lucene.analysis.TokenStreamToAutomaton()", "public org.apache.lucene.analysis.TokenStreamToAutomaton()"], ["void", "org.apache.lucene.analysis.TokenStreamToAutomaton.setPreservePositionIncrements(boolean)", "public void setPreservePositionIncrements(boolean)"], ["void", "org.apache.lucene.analysis.TokenStreamToAutomaton.setFinalOffsetGapAsHole(boolean)", "public void setFinalOffsetGapAsHole(boolean)"], ["void", "org.apache.lucene.analysis.TokenStreamToAutomaton.setUnicodeArcs(boolean)", "public void setUnicodeArcs(boolean)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.analysis.TokenStreamToAutomaton.toAutomaton(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.analysis.TokenStream) throws java.io.IOException"], ["int", "org.apache.lucene.analysis.Tokenizer$1.read(char[], int, int)", "public int read(char[], int, int)"], ["void", "org.apache.lucene.analysis.Tokenizer$1.close()", "public void close()"], ["void", "org.apache.lucene.analysis.Tokenizer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.Tokenizer.setReader(java.io.Reader)", "public final void setReader(java.io.Reader)"], ["void", "org.apache.lucene.analysis.Tokenizer.reset()", "public void reset() throws java.io.IOException"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.Reader, org.apache.lucene.analysis.CharArraySet)", "public static org.apache.lucene.analysis.CharArraySet getWordSet(java.io.Reader, org.apache.lucene.analysis.CharArraySet) throws java.io.IOException"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.Reader)", "public static org.apache.lucene.analysis.CharArraySet getWordSet(java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.Reader, java.lang.String)", "public static org.apache.lucene.analysis.CharArraySet getWordSet(java.io.Reader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.Reader, java.lang.String, org.apache.lucene.analysis.CharArraySet)", "public static org.apache.lucene.analysis.CharArraySet getWordSet(java.io.Reader, java.lang.String, org.apache.lucene.analysis.CharArraySet) throws java.io.IOException"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.WordlistLoader.getSnowballWordSet(java.io.Reader, org.apache.lucene.analysis.CharArraySet)", "public static org.apache.lucene.analysis.CharArraySet getSnowballWordSet(java.io.Reader, org.apache.lucene.analysis.CharArraySet) throws java.io.IOException"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.WordlistLoader.getSnowballWordSet(java.io.Reader)", "public static org.apache.lucene.analysis.CharArraySet getSnowballWordSet(java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.CharArrayMap<java.lang.String>", "org.apache.lucene.analysis.WordlistLoader.getStemDict(java.io.Reader, org.apache.lucene.analysis.CharArrayMap<java.lang.String>)", "public static org.apache.lucene.analysis.CharArrayMap<java.lang.String> getStemDict(java.io.Reader, org.apache.lucene.analysis.CharArrayMap<java.lang.String>) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.apache.lucene.analysis.WordlistLoader.getLines(java.io.InputStream, java.nio.charset.Charset)", "public static java.util.List<java.lang.String> getLines(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"], ["org.apache.lucene.analysis.standard.StandardAnalyzer", "org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.analysis.CharArraySet)", "public org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.analysis.CharArraySet)"], ["org.apache.lucene.analysis.standard.StandardAnalyzer", "org.apache.lucene.analysis.standard.StandardAnalyzer()", "public org.apache.lucene.analysis.standard.StandardAnalyzer()"], ["org.apache.lucene.analysis.standard.StandardAnalyzer", "org.apache.lucene.analysis.standard.StandardAnalyzer(java.io.Reader)", "public org.apache.lucene.analysis.standard.StandardAnalyzer(java.io.Reader) throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardAnalyzer.setMaxTokenLength(int)", "public void setMaxTokenLength(int)"], ["int", "org.apache.lucene.analysis.standard.StandardAnalyzer.getMaxTokenLength()", "public int getMaxTokenLength()"], ["org.apache.lucene.analysis.standard.StandardFilter", "org.apache.lucene.analysis.standard.StandardFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.standard.StandardFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.standard.StandardFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.setMaxTokenLength(int)", "public void setMaxTokenLength(int)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizer.getMaxTokenLength()", "public int getMaxTokenLength()"], ["org.apache.lucene.analysis.standard.StandardTokenizer", "org.apache.lucene.analysis.standard.StandardTokenizer()", "public org.apache.lucene.analysis.standard.StandardTokenizer()"], ["org.apache.lucene.analysis.standard.StandardTokenizer", "org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.AttributeFactory)", "public org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.AttributeFactory)"], ["boolean", "org.apache.lucene.analysis.standard.StandardTokenizer.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.end()", "public final void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.reset()", "public void reset() throws java.io.IOException"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yychar()", "public final int yychar()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)", "public final void getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.setBufferSize(int)", "public final void setBufferSize(int)"], ["org.apache.lucene.analysis.standard.StandardTokenizerImpl", "org.apache.lucene.analysis.standard.StandardTokenizerImpl(java.io.Reader)", "public org.apache.lucene.analysis.standard.StandardTokenizerImpl(java.io.Reader)"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyclose()", "public final void yyclose() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyreset(java.io.Reader)", "public final void yyreset(java.io.Reader)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yystate()", "public final int yystate()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yybegin(int)", "public final void yybegin(int)"], ["java.lang.String", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yytext()", "public final java.lang.String yytext()"], ["char", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yycharat(int)", "public final char yycharat(int)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yylength()", "public final int yylength()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yypushback(int)", "public void yypushback(int)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.getNextToken()", "public int getNextToken() throws java.io.IOException"], ["org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.getBytesRef()", "public org.apache.lucene.util.BytesRef getBytesRef()"], ["void", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.setBytesRef(org.apache.lucene.util.BytesRef)", "public void setBytesRef(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["void", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["boolean", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.BytesTermAttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["default", "org.apache.lucene.analysis.tokenattributes.CharTermAttribute.java.lang.Appendable append(char)", "public default java.lang.Appendable append(char) throws java.io.IOException"], ["default", "org.apache.lucene.analysis.tokenattributes.CharTermAttribute.java.lang.Appendable append(java.lang.CharSequence, int, int)", "public default java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["default", "org.apache.lucene.analysis.tokenattributes.CharTermAttribute.java.lang.Appendable append(java.lang.CharSequence)", "public default java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyBuffer(char[], int, int)", "public final void copyBuffer(char[], int, int)"], ["char[]", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.buffer()", "public final char[] buffer()"], ["char[]", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeBuffer(int)", "public final char[] resizeBuffer(int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setLength(int)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute setLength(int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setEmpty()", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.getBytesRef()", "public org.apache.lucene.util.BytesRef getBytesRef()"], ["int", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.length()", "public final int length()"], ["char", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.charAt(int)", "public final char charAt(int)"], ["java.lang.CharSequence", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.subSequence(int, int)", "public final java.lang.CharSequence subSequence(int, int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence, int, int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(char)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.String)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.StringBuilder)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.StringBuilder)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)"], ["int", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clear()", "public void clear()"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()", "public org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl clone()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.Appendable", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()"], ["int", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.getFlags()", "public int getFlags()"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.setFlags(int)", "public void setFlags(int)"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["int", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.isKeyword()", "public boolean isKeyword()"], ["void", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.setKeyword(boolean)", "public void setKeyword(boolean)"], ["void", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.startOffset()", "public int startOffset()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(int, int)", "public void setOffset(int, int)"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.endOffset()", "public int endOffset()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setPositionIncrement(int)", "public void setPositionIncrement(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.getPositionIncrement()", "public int getPositionIncrement()"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setPositionLength(int)", "public void setPositionLength(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.getPositionLength()", "public int getPositionLength()"], ["int", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.startOffset()", "public final int startOffset()"], ["int", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.endOffset()", "public final int endOffset()"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setOffset(int, int)", "public void setOffset(int, int)"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.type()", "public final java.lang.String type()"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setType(java.lang.String)", "public final void setType(java.lang.String)"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setTermFrequency(int)", "public final void setTermFrequency(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.getTermFrequency()", "public final int getTermFrequency()"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.end()", "public void end()"], ["org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()", "public org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl clone()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()", "public org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl clone()"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.setPayload(org.apache.lucene.util.BytesRef)", "public void setPayload(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clear()", "public void clear()"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl clone()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.setPositionIncrement(int)", "public void setPositionIncrement(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.getPositionIncrement()", "public int getPositionIncrement()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.end()", "public void end()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.setPositionLength(int)", "public void setPositionLength(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.getPositionLength()", "public int getPositionLength()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.setTermFrequency(int)", "public void setTermFrequency(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.getTermFrequency()", "public int getTermFrequency()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.end()", "public void end()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.TermFrequencyAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()"], ["org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)", "public org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.type()", "public java.lang.String type()"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.setType(java.lang.String)", "public void setType(java.lang.String)"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["void", "org.apache.lucene.codecs.BlockTermState.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["java.lang.String", "org.apache.lucene.codecs.BlockTermState.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.codecs.Codec.getName()", "public final java.lang.String getName()"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.codecs.Codec.forName(java.lang.String)", "public static org.apache.lucene.codecs.Codec forName(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.codecs.Codec.availableCodecs()", "public static java.util.Set<java.lang.String> availableCodecs()"], ["void", "org.apache.lucene.codecs.Codec.reloadCodecs(java.lang.ClassLoader)", "public static void reloadCodecs(java.lang.ClassLoader)"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.codecs.Codec.getDefault()", "public static org.apache.lucene.codecs.Codec getDefault()"], ["void", "org.apache.lucene.codecs.Codec.setDefault(org.apache.lucene.codecs.Codec)", "public static void setDefault(org.apache.lucene.codecs.Codec)"], ["java.lang.String", "org.apache.lucene.codecs.Codec.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.CodecUtil.writeHeader(org.apache.lucene.store.DataOutput, java.lang.String, int)", "public static void writeHeader(org.apache.lucene.store.DataOutput, java.lang.String, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.CodecUtil.writeIndexHeader(org.apache.lucene.store.DataOutput, java.lang.String, int, byte[], java.lang.String)", "public static void writeIndexHeader(org.apache.lucene.store.DataOutput, java.lang.String, int, byte[], java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.CodecUtil.headerLength(java.lang.String)", "public static int headerLength(java.lang.String)"], ["int", "org.apache.lucene.codecs.CodecUtil.indexHeaderLength(java.lang.String, java.lang.String)", "public static int indexHeaderLength(java.lang.String, java.lang.String)"], ["int", "org.apache.lucene.codecs.CodecUtil.checkHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int)", "public static int checkHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.CodecUtil.checkHeaderNoMagic(org.apache.lucene.store.DataInput, java.lang.String, int, int)", "public static int checkHeaderNoMagic(org.apache.lucene.store.DataInput, java.lang.String, int, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.CodecUtil.checkIndexHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int, byte[], java.lang.String)", "public static int checkIndexHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int, byte[], java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.CodecUtil.verifyAndCopyIndexHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.store.DataOutput, byte[])", "public static void verifyAndCopyIndexHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.store.DataOutput, byte[]) throws java.io.IOException"], ["byte[]", "org.apache.lucene.codecs.CodecUtil.readIndexHeader(org.apache.lucene.store.IndexInput)", "public static byte[] readIndexHeader(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["byte[]", "org.apache.lucene.codecs.CodecUtil.readFooter(org.apache.lucene.store.IndexInput)", "public static byte[] readFooter(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["byte[]", "org.apache.lucene.codecs.CodecUtil.checkIndexHeaderID(org.apache.lucene.store.DataInput, byte[])", "public static byte[] checkIndexHeaderID(org.apache.lucene.store.DataInput, byte[]) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.CodecUtil.checkIndexHeaderSuffix(org.apache.lucene.store.DataInput, java.lang.String)", "public static java.lang.String checkIndexHeaderSuffix(org.apache.lucene.store.DataInput, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.CodecUtil.writeFooter(org.apache.lucene.store.IndexOutput)", "public static void writeFooter(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.CodecUtil.footerLength()", "public static int footerLength()"], ["long", "org.apache.lucene.codecs.CodecUtil.checkFooter(org.apache.lucene.store.ChecksumIndexInput)", "public static long checkFooter(org.apache.lucene.store.ChecksumIndexInput) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.CodecUtil.checkFooter(org.apache.lucene.store.ChecksumIndexInput, java.lang.Throwable)", "public static void checkFooter(org.apache.lucene.store.ChecksumIndexInput, java.lang.Throwable) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.CodecUtil.retrieveChecksum(org.apache.lucene.store.IndexInput)", "public static long retrieveChecksum(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.CodecUtil.checksumEntireFile(org.apache.lucene.store.IndexInput)", "public static long checksumEntireFile(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["org.apache.lucene.codecs.CompoundFormat", "org.apache.lucene.codecs.CompoundFormat()", "public org.apache.lucene.codecs.CompoundFormat()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$1$1.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$1$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$1$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.DocValuesConsumer$1$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$1$1.cost()", "public long cost()"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$1$1.longValue()", "public long longValue() throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.codecs.DocValuesConsumer$1.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$2$1.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$2$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$2$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.DocValuesConsumer$2$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$2$1.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesConsumer$2$1.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.codecs.DocValuesConsumer$2.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$3$1.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$3$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$3$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.DocValuesConsumer$3$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$3$1.docValueCount()", "public int docValueCount()"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$3$1.cost()", "public long cost()"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$3$1.nextValue()", "public long nextValue() throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.codecs.DocValuesConsumer$3.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$4$1.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$4$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$4$1.ordValue()", "public int ordValue()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$4$1.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.codecs.DocValuesConsumer$4$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$4$1.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$4$1.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesConsumer$4$1.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.codecs.DocValuesConsumer$4.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$5$1.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$5$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$5$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.DocValuesConsumer$5$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$5$1.nextOrd()", "public long nextOrd() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$5$1.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesConsumer$5$1.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.DocValuesConsumer$5$1.getValueCount()", "public long getValueCount()"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.codecs.DocValuesConsumer$5.getSortedSet(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.DocValuesConsumer$6$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.DocValuesConsumer$6$1.next()", "public java.lang.Number next()"], ["void", "org.apache.lucene.codecs.DocValuesConsumer$6$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.codecs.DocValuesConsumer$6$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.DocValuesConsumer$6.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["org.apache.lucene.codecs.DocValuesConsumer$BinaryDocValuesSub", "org.apache.lucene.codecs.DocValuesConsumer$BinaryDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.BinaryDocValues)", "public org.apache.lucene.codecs.DocValuesConsumer$BinaryDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.BinaryDocValues)"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$BinaryDocValuesSub.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesConsumer$NumericDocValuesSub", "org.apache.lucene.codecs.DocValuesConsumer$NumericDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.NumericDocValues)", "public org.apache.lucene.codecs.DocValuesConsumer$NumericDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.NumericDocValues)"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$NumericDocValuesSub.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesConsumer$SortedDocValuesSub", "org.apache.lucene.codecs.DocValuesConsumer$SortedDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.SortedDocValues, org.apache.lucene.util.LongValues)", "public org.apache.lucene.codecs.DocValuesConsumer$SortedDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.SortedDocValues, org.apache.lucene.util.LongValues)"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$SortedDocValuesSub.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesConsumer$SortedNumericDocValuesSub", "org.apache.lucene.codecs.DocValuesConsumer$SortedNumericDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.SortedNumericDocValues)", "public org.apache.lucene.codecs.DocValuesConsumer$SortedNumericDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.SortedNumericDocValues)"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$SortedNumericDocValuesSub.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesConsumer$SortedSetDocValuesSub", "org.apache.lucene.codecs.DocValuesConsumer$SortedSetDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.SortedSetDocValues, org.apache.lucene.util.LongValues)", "public org.apache.lucene.codecs.DocValuesConsumer$SortedSetDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.SortedSetDocValues, org.apache.lucene.util.LongValues)"], ["int", "org.apache.lucene.codecs.DocValuesConsumer$SortedSetDocValuesSub.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.DocValuesConsumer$SortedSetDocValuesSub.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.DocValuesConsumer.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.DocValuesConsumer.mergeNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState)", "public void mergeNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.DocValuesConsumer.mergeBinaryField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState)", "public void mergeBinaryField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.DocValuesConsumer.mergeSortedNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState)", "public void mergeSortedNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.DocValuesConsumer.mergeSortedField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState)", "public void mergeSortedField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.DocValuesConsumer.mergeSortedSetField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState)", "public void mergeSortedSetField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.DocValuesConsumer.isSingleValued(java.lang.Iterable<java.lang.Number>)", "public static boolean isSingleValued(java.lang.Iterable<java.lang.Number>)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.DocValuesConsumer.singletonView(java.lang.Iterable<java.lang.Number>, java.lang.Iterable<java.lang.Number>, java.lang.Number)", "public static java.lang.Iterable<java.lang.Number> singletonView(java.lang.Iterable<java.lang.Number>, java.lang.Iterable<java.lang.Number>, java.lang.Number)"], ["java.lang.String", "org.apache.lucene.codecs.DocValuesFormat.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.lucene.codecs.DocValuesFormat.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.DocValuesFormat.forName(java.lang.String)", "public static org.apache.lucene.codecs.DocValuesFormat forName(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.codecs.DocValuesFormat.availableDocValuesFormats()", "public static java.util.Set<java.lang.String> availableDocValuesFormats()"], ["void", "org.apache.lucene.codecs.DocValuesFormat.reloadDocValuesFormats(java.lang.ClassLoader)", "public static void reloadDocValuesFormats(java.lang.ClassLoader)"], ["org.apache.lucene.codecs.DocValuesProducer", "org.apache.lucene.codecs.DocValuesProducer.getMergeInstance()", "public org.apache.lucene.codecs.DocValuesProducer getMergeInstance() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.FieldsConsumer.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.codecs.FieldsProducer.getMergeInstance()", "public org.apache.lucene.codecs.FieldsProducer getMergeInstance() throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.FilterCodec.docValuesFormat()", "public org.apache.lucene.codecs.DocValuesFormat docValuesFormat()"], ["org.apache.lucene.codecs.FieldInfosFormat", "org.apache.lucene.codecs.FilterCodec.fieldInfosFormat()", "public org.apache.lucene.codecs.FieldInfosFormat fieldInfosFormat()"], ["org.apache.lucene.codecs.LiveDocsFormat", "org.apache.lucene.codecs.FilterCodec.liveDocsFormat()", "public org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()"], ["org.apache.lucene.codecs.NormsFormat", "org.apache.lucene.codecs.FilterCodec.normsFormat()", "public org.apache.lucene.codecs.NormsFormat normsFormat()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.FilterCodec.postingsFormat()", "public org.apache.lucene.codecs.PostingsFormat postingsFormat()"], ["org.apache.lucene.codecs.SegmentInfoFormat", "org.apache.lucene.codecs.FilterCodec.segmentInfoFormat()", "public org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()"], ["org.apache.lucene.codecs.StoredFieldsFormat", "org.apache.lucene.codecs.FilterCodec.storedFieldsFormat()", "public org.apache.lucene.codecs.StoredFieldsFormat storedFieldsFormat()"], ["org.apache.lucene.codecs.TermVectorsFormat", "org.apache.lucene.codecs.FilterCodec.termVectorsFormat()", "public org.apache.lucene.codecs.TermVectorsFormat termVectorsFormat()"], ["org.apache.lucene.codecs.CompoundFormat", "org.apache.lucene.codecs.FilterCodec.compoundFormat()", "public org.apache.lucene.codecs.CompoundFormat compoundFormat()"], ["org.apache.lucene.codecs.PointsFormat", "org.apache.lucene.codecs.FilterCodec.pointsFormat()", "public org.apache.lucene.codecs.PointsFormat pointsFormat()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$1$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.LegacyDocValuesIterables$1$1.next()", "public org.apache.lucene.util.BytesRef next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$1$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.LegacyDocValuesIterables$1.iterator()", "public java.util.Iterator<org.apache.lucene.util.BytesRef> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$10$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.LegacyDocValuesIterables$10$1.next()", "public java.lang.Number next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$10$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables$10.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$2$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.LegacyDocValuesIterables$2$1.next()", "public org.apache.lucene.util.BytesRef next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$2$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.LegacyDocValuesIterables$2.iterator()", "public java.util.Iterator<org.apache.lucene.util.BytesRef> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$3$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.LegacyDocValuesIterables$3$1.next()", "public java.lang.Number next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$3$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables$3.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$4$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.LegacyDocValuesIterables$4$1.next()", "public java.lang.Number next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$4$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables$4.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$5$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.LegacyDocValuesIterables$5$1.next()", "public java.lang.Number next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$5$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables$5.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$6$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.LegacyDocValuesIterables$6$1.next()", "public java.lang.Number next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$6$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables$6.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$7$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.LegacyDocValuesIterables$7$1.next()", "public java.lang.Number next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$7$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables$7.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$8$1.hasNext()", "public boolean hasNext()"], ["java.lang.Number", "org.apache.lucene.codecs.LegacyDocValuesIterables$8$1.next()", "public java.lang.Number next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$8$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables$8.iterator()", "public java.util.Iterator<java.lang.Number> iterator()"], ["boolean", "org.apache.lucene.codecs.LegacyDocValuesIterables$9$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.LegacyDocValuesIterables$9$1.next()", "public org.apache.lucene.util.BytesRef next()"], ["java.lang.Object", "org.apache.lucene.codecs.LegacyDocValuesIterables$9$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.LegacyDocValuesIterables$9.iterator()", "public java.util.Iterator<org.apache.lucene.util.BytesRef> iterator()"], ["java.lang.Iterable<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.LegacyDocValuesIterables.valuesIterable(org.apache.lucene.index.SortedDocValues)", "public static java.lang.Iterable<org.apache.lucene.util.BytesRef> valuesIterable(org.apache.lucene.index.SortedDocValues)"], ["java.lang.Iterable<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.LegacyDocValuesIterables.valuesIterable(org.apache.lucene.index.SortedSetDocValues)", "public static java.lang.Iterable<org.apache.lucene.util.BytesRef> valuesIterable(org.apache.lucene.index.SortedSetDocValues)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables.sortedOrdIterable(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo, int)", "public static java.lang.Iterable<java.lang.Number> sortedOrdIterable(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo, int)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables.sortedSetOrdCountIterable(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo, int)", "public static java.lang.Iterable<java.lang.Number> sortedSetOrdCountIterable(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo, int)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables.sortedSetOrdsIterable(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo)", "public static java.lang.Iterable<java.lang.Number> sortedSetOrdsIterable(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables.sortedNumericToDocCount(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo, int)", "public static java.lang.Iterable<java.lang.Number> sortedNumericToDocCount(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo, int)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables.sortedNumericToValues(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo)", "public static java.lang.Iterable<java.lang.Number> sortedNumericToValues(org.apache.lucene.codecs.DocValuesProducer, org.apache.lucene.index.FieldInfo)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables.normsIterable(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.NormsProducer, int)", "public static java.lang.Iterable<java.lang.Number> normsIterable(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.NormsProducer, int)"], ["java.lang.Iterable<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.LegacyDocValuesIterables.binaryIterable(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer, int)", "public static java.lang.Iterable<org.apache.lucene.util.BytesRef> binaryIterable(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer, int)"], ["java.lang.Iterable<java.lang.Number>", "org.apache.lucene.codecs.LegacyDocValuesIterables.numericIterable(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer, int)", "public static java.lang.Iterable<java.lang.Number> numericIterable(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer, int)"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.close()", "public void close()"], ["long", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.length()", "public long length()"], ["byte", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.seek(long)", "public void seek(long)"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.MultiLevelSkipListReader.getDoc()", "public int getDoc()"], ["int", "org.apache.lucene.codecs.MultiLevelSkipListReader.skipTo(int)", "public int skipTo(int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader.init(long, int)", "public void init(long, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListWriter.bufferSkip(int)", "public void bufferSkip(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.MultiLevelSkipListWriter.writeSkip(org.apache.lucene.store.IndexOutput)", "public long writeSkip(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.NormsConsumer$1$1.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.NormsConsumer$1$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.NormsConsumer$1$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.NormsConsumer$1$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.NormsConsumer$1$1.cost()", "public long cost()"], ["long", "org.apache.lucene.codecs.NormsConsumer$1$1.longValue()", "public long longValue() throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.codecs.NormsConsumer$1.getNorms(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNorms(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.NormsConsumer$1.checkIntegrity()", "public void checkIntegrity()"], ["void", "org.apache.lucene.codecs.NormsConsumer$1.close()", "public void close()"], ["long", "org.apache.lucene.codecs.NormsConsumer$1.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.codecs.NormsConsumer$NumericDocValuesSub", "org.apache.lucene.codecs.NormsConsumer$NumericDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.NumericDocValues)", "public org.apache.lucene.codecs.NormsConsumer$NumericDocValuesSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.index.NumericDocValues)"], ["int", "org.apache.lucene.codecs.NormsConsumer$NumericDocValuesSub.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.NormsConsumer.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.NormsConsumer.mergeNormsField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState)", "public void mergeNormsField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState) throws java.io.IOException"], ["org.apache.lucene.codecs.NormsProducer", "org.apache.lucene.codecs.NormsProducer.getMergeInstance()", "public org.apache.lucene.codecs.NormsProducer getMergeInstance() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.PointsFormat$1$1.close()", "public void close()"], ["long", "org.apache.lucene.codecs.PointsFormat$1$1.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.codecs.PointsFormat$1$1.checkIntegrity()", "public void checkIntegrity()"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.codecs.PointsFormat$1$1.getValues(java.lang.String)", "public org.apache.lucene.index.PointValues getValues(java.lang.String)"], ["org.apache.lucene.codecs.PointsWriter", "org.apache.lucene.codecs.PointsFormat$1.fieldsWriter(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.PointsWriter fieldsWriter(org.apache.lucene.index.SegmentWriteState)"], ["org.apache.lucene.codecs.PointsReader", "org.apache.lucene.codecs.PointsFormat$1.fieldsReader(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.PointsReader fieldsReader(org.apache.lucene.index.SegmentReadState)"], ["org.apache.lucene.codecs.PointsReader", "org.apache.lucene.codecs.PointsReader.getMergeInstance()", "public org.apache.lucene.codecs.PointsReader getMergeInstance() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.PointsWriter$1$1$1.visit(int)", "public void visit(int)"], ["void", "org.apache.lucene.codecs.PointsWriter$1$1$1.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.codecs.PointsWriter$1$1$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["void", "org.apache.lucene.codecs.PointsWriter$1$1.intersect(org.apache.lucene.index.PointValues$IntersectVisitor)", "public void intersect(org.apache.lucene.index.PointValues$IntersectVisitor) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.PointsWriter$1$1.estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)", "public long estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)"], ["byte[]", "org.apache.lucene.codecs.PointsWriter$1$1.getMinPackedValue()", "public byte[] getMinPackedValue()"], ["byte[]", "org.apache.lucene.codecs.PointsWriter$1$1.getMaxPackedValue()", "public byte[] getMaxPackedValue()"], ["int", "org.apache.lucene.codecs.PointsWriter$1$1.getNumDimensions()", "public int getNumDimensions()"], ["int", "org.apache.lucene.codecs.PointsWriter$1$1.getBytesPerDimension()", "public int getBytesPerDimension()"], ["long", "org.apache.lucene.codecs.PointsWriter$1$1.size()", "public long size()"], ["int", "org.apache.lucene.codecs.PointsWriter$1$1.getDocCount()", "public int getDocCount()"], ["long", "org.apache.lucene.codecs.PointsWriter$1.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.codecs.PointsWriter$1.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.codecs.PointsWriter$1.getValues(java.lang.String)", "public org.apache.lucene.index.PointValues getValues(java.lang.String)"], ["void", "org.apache.lucene.codecs.PointsWriter$1.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.PointsWriter.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.PostingsFormat.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.lucene.codecs.PostingsFormat.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.PostingsFormat.forName(java.lang.String)", "public static org.apache.lucene.codecs.PostingsFormat forName(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.codecs.PostingsFormat.availablePostingsFormats()", "public static java.util.Set<java.lang.String> availablePostingsFormats()"], ["void", "org.apache.lucene.codecs.PostingsFormat.reloadPostingsFormats(java.lang.ClassLoader)", "public static void reloadPostingsFormats(java.lang.ClassLoader)"], ["int", "org.apache.lucene.codecs.PushPostingsWriterBase.setField(org.apache.lucene.index.FieldInfo)", "public int setField(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.codecs.BlockTermState", "org.apache.lucene.codecs.PushPostingsWriterBase.writeTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermsEnum, org.apache.lucene.util.FixedBitSet)", "public final org.apache.lucene.codecs.BlockTermState writeTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermsEnum, org.apache.lucene.util.FixedBitSet) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.StoredFieldsReader.getMergeInstance()", "public org.apache.lucene.codecs.StoredFieldsReader getMergeInstance() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.codecs.StoredFieldsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor(org.apache.lucene.codecs.StoredFieldsWriter, org.apache.lucene.index.MergeState, int)", "public org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor(org.apache.lucene.codecs.StoredFieldsWriter, org.apache.lucene.index.MergeState, int)"], ["void", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])", "public void binaryField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.stringField(org.apache.lucene.index.FieldInfo, byte[])", "public void stringField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.intField(org.apache.lucene.index.FieldInfo, int)", "public void intField(org.apache.lucene.index.FieldInfo, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.longField(org.apache.lucene.index.FieldInfo, long)", "public void longField(org.apache.lucene.index.FieldInfo, long) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.floatField(org.apache.lucene.index.FieldInfo, float)", "public void floatField(org.apache.lucene.index.FieldInfo, float) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)", "public void doubleField(org.apache.lucene.index.FieldInfo, double) throws java.io.IOException"], ["org.apache.lucene.index.StoredFieldVisitor$Status", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.needsField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.StoredFieldVisitor$Status needsField(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.name()", "public java.lang.String name()"], ["org.apache.lucene.index.IndexableFieldType", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.fieldType()", "public org.apache.lucene.index.IndexableFieldType fieldType()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["java.lang.String", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.stringValue()", "public java.lang.String stringValue()"], ["java.lang.Number", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.numericValue()", "public java.lang.Number numericValue()"], ["java.io.Reader", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.readerValue()", "public java.io.Reader readerValue()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.TokenStream tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.codecs.StoredFieldsWriter$StoredFieldsMergeSub", "org.apache.lucene.codecs.StoredFieldsWriter$StoredFieldsMergeSub(org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor, org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.codecs.StoredFieldsReader, int)", "public org.apache.lucene.codecs.StoredFieldsWriter$StoredFieldsMergeSub(org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor, org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.codecs.StoredFieldsReader, int)"], ["int", "org.apache.lucene.codecs.StoredFieldsWriter$StoredFieldsMergeSub.nextDoc()", "public int nextDoc()"], ["void", "org.apache.lucene.codecs.StoredFieldsWriter.finishDocument()", "public void finishDocument() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.StoredFieldsWriter.merge(org.apache.lucene.index.MergeState)", "public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["org.apache.lucene.codecs.TermStats", "org.apache.lucene.codecs.TermStats(int, long)", "public org.apache.lucene.codecs.TermStats(int, long)"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.codecs.TermVectorsReader.getMergeInstance()", "public org.apache.lucene.codecs.TermVectorsReader getMergeInstance() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.codecs.TermVectorsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.TermVectorsWriter$TermVectorsMergeSub", "org.apache.lucene.codecs.TermVectorsWriter$TermVectorsMergeSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.codecs.TermVectorsReader, int)", "public org.apache.lucene.codecs.TermVectorsWriter$TermVectorsMergeSub(org.apache.lucene.index.MergeState$DocMap, org.apache.lucene.codecs.TermVectorsReader, int)"], ["int", "org.apache.lucene.codecs.TermVectorsWriter$TermVectorsMergeSub.nextDoc()", "public int nextDoc()"], ["void", "org.apache.lucene.codecs.TermVectorsWriter.finishDocument()", "public void finishDocument() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.TermVectorsWriter.finishField()", "public void finishField() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.TermVectorsWriter.finishTerm()", "public void finishTerm() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.TermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)", "public void addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.TermVectorsWriter.merge(org.apache.lucene.index.MergeState)", "public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["int", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.nextPosition()", "public int nextPosition()"], ["int", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.codecs.blocktree.BitSetPostingsEnum.endOffset()", "public int endOffset()"], ["org.apache.lucene.codecs.blocktree.BitSetTermsEnum", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum(org.apache.lucene.util.BitSet)", "public org.apache.lucene.codecs.blocktree.BitSetTermsEnum(org.apache.lucene.util.BitSet)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.seekExact(long)", "public void seekExact(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.next()", "public org.apache.lucene.util.BytesRef next()"], ["long", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.ord()", "public long ord()"], ["int", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.blocktree.BitSetTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int)"], ["org.apache.lucene.codecs.blocktree.BlockTreeTermsReader", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader(org.apache.lucene.codecs.PostingsReaderBase, org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.blocktree.BlockTreeTermsReader(org.apache.lucene.codecs.PostingsReaderBase, org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.close()", "public void close() throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.size()", "public int size()"], ["long", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$FieldMetaData", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$FieldMetaData(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.BytesRef, long, long, long, long, int, int, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$FieldMetaData(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.BytesRef, long, long, long, long, int, int, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock(org.apache.lucene.util.BytesRef, long, boolean, boolean, int, java.util.List<org.apache.lucene.util.fst.FST<org.apache.lucene.util.BytesRef>>)", "public org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock(org.apache.lucene.util.BytesRef, long, boolean, boolean, int, java.util.List<org.apache.lucene.util.fst.FST<org.apache.lucene.util.BytesRef>>)"], ["java.lang.String", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock.compileIndex(java.util.List<org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock>, org.apache.lucene.store.RAMOutputStream, org.apache.lucene.util.IntsRefBuilder)", "public void compileIndex(java.util.List<org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock>, org.apache.lucene.store.RAMOutputStream, org.apache.lucene.util.IntsRefBuilder) throws java.io.IOException"], ["org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingTerm", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.BlockTermState)", "public org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.BlockTermState)"], ["java.lang.String", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingTerm.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$TermsWriter.write(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermsEnum)", "public void write(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$TermsWriter.finish()", "public void finish() throws java.io.IOException"], ["org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.PostingsWriterBase, int, int)", "public org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.PostingsWriterBase, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter.validateSettings(int, int)", "public static void validateSettings(int, int)"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter.write(org.apache.lucene.index.Fields)", "public void write(org.apache.lucene.index.Fields) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.FieldReader.getMin()", "public org.apache.lucene.util.BytesRef getMin() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.FieldReader.getMax()", "public org.apache.lucene.util.BytesRef getMax() throws java.io.IOException"], ["org.apache.lucene.codecs.blocktree.Stats", "org.apache.lucene.codecs.blocktree.FieldReader.getStats()", "public org.apache.lucene.codecs.blocktree.Stats getStats() throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.blocktree.FieldReader.hasFreqs()", "public boolean hasFreqs()"], ["boolean", "org.apache.lucene.codecs.blocktree.FieldReader.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.codecs.blocktree.FieldReader.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.codecs.blocktree.FieldReader.hasPayloads()", "public boolean hasPayloads()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.blocktree.FieldReader.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.blocktree.FieldReader.size()", "public long size()"], ["long", "org.apache.lucene.codecs.blocktree.FieldReader.getSumTotalTermFreq()", "public long getSumTotalTermFreq()"], ["long", "org.apache.lucene.codecs.blocktree.FieldReader.getSumDocFreq()", "public long getSumDocFreq()"], ["int", "org.apache.lucene.codecs.blocktree.FieldReader.getDocCount()", "public int getDocCount()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.blocktree.FieldReader.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.blocktree.FieldReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.blocktree.FieldReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["java.lang.String", "org.apache.lucene.codecs.blocktree.FieldReader.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.codecs.blocktree.FieldReader.getStats()", "public java.lang.Object getStats() throws java.io.IOException"], ["java.lang.Throwable", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum$NoMoreTermsException.fillInStackTrace()", "public java.lang.Throwable fillInStackTrace()"], ["org.apache.lucene.codecs.blocktree.IntersectTermsEnum", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum(org.apache.lucene.codecs.blocktree.FieldReader, org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.RunAutomaton, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, int)", "public org.apache.lucene.codecs.blocktree.IntersectTermsEnum(org.apache.lucene.codecs.blocktree.FieldReader, org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.RunAutomaton, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["int", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.seekExact(long)", "public void seekExact(long)"], ["long", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.ord()", "public long ord()"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame", "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame(org.apache.lucene.codecs.blocktree.IntersectTermsEnum, int)", "public org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame(org.apache.lucene.codecs.blocktree.IntersectTermsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.setState(int)", "public void setState(int)"], ["boolean", "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next()", "public boolean next()"], ["void", "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.nextLeaf()", "public void nextLeaf()"], ["boolean", "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.nextNonLeaf()", "public boolean nextNonLeaf()"], ["int", "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.getTermBlockOrd()", "public int getTermBlockOrd()"], ["void", "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData()", "public void decodeMetaData() throws java.io.IOException"], ["org.apache.lucene.codecs.blocktree.SegmentTermsEnum", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum(org.apache.lucene.codecs.blocktree.FieldReader)", "public org.apache.lucene.codecs.blocktree.SegmentTermsEnum(org.apache.lucene.codecs.blocktree.FieldReader) throws java.io.IOException"], ["org.apache.lucene.codecs.blocktree.Stats", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.computeBlockStats()", "public org.apache.lucene.codecs.blocktree.Stats computeBlockStats() throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["int", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"], ["org.apache.lucene.index.TermState", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekExact(long)", "public void seekExact(long)"], ["long", "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.ord()", "public long ord()"], ["org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame(org.apache.lucene.codecs.blocktree.SegmentTermsEnum, int)", "public org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame(org.apache.lucene.codecs.blocktree.SegmentTermsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.setFloorData(org.apache.lucene.store.ByteArrayDataInput, org.apache.lucene.util.BytesRef)", "public void setFloorData(org.apache.lucene.store.ByteArrayDataInput, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd()", "public int getTermBlockOrd()"], ["boolean", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next()", "public boolean next() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.nextLeaf()", "public void nextLeaf()"], ["boolean", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.nextNonLeaf()", "public boolean nextNonLeaf() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(org.apache.lucene.util.BytesRef)", "public void scanToFloorFrame(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData()", "public void decodeMetaData() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToSubBlock(long)", "public void scanToSubBlock(long)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus scanToTerm(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTermLeaf(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus scanToTermLeaf(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTermNonLeaf(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus scanToTermNonLeaf(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.blocktree.Stats.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat(java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)", "public org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat(java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)"], ["org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat(java.lang.String, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)", "public org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat(java.lang.String, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsReader fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsWriter", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsWriter fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.clone()", "public org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader clone()"], ["long", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.close()", "public void close() throws java.io.IOException"], ["byte", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$BlockState$1.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$BlockState$1.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode)", "public org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)", "public void visitDocument(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.clone()", "public org.apache.lucene.codecs.StoredFieldsReader clone()"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getMergeInstance()", "public org.apache.lucene.codecs.StoredFieldsReader getMergeInstance()"], ["long", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter$CompressingStoredFieldsMergeSub", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter$CompressingStoredFieldsMergeSub(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader, org.apache.lucene.index.MergeState$DocMap, int)", "public org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter$CompressingStoredFieldsMergeSub(org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader, org.apache.lucene.index.MergeState$DocMap, int)"], ["int", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter$CompressingStoredFieldsMergeSub.nextDoc()", "public int nextDoc()"], ["org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)", "public org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.startDocument()", "public void startDocument() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.finishDocument()", "public void finishDocument() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.IndexableField)", "public void writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.finish(org.apache.lucene.index.FieldInfos, int)", "public void finish(org.apache.lucene.index.FieldInfos, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.merge(org.apache.lucene.index.MergeState)", "public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat", "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat(java.lang.String, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int)", "public org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat(java.lang.String, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int)"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat.vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public final org.apache.lucene.codecs.TermVectorsReader vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.TermVectorsWriter", "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat.vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public final org.apache.lucene.codecs.TermVectorsWriter vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.hasNext()", "public boolean hasNext()"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.next()", "public java.lang.String next()"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.next()", "public java.lang.Object next()"], ["org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader, int[], int[], int[], int[], int[], int[][], int[][], int[][], int[][], int[][], int[][], int[][], org.apache.lucene.util.BytesRef, int[][], org.apache.lucene.util.BytesRef)", "public org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader, int[], int[], int[], int[], int[], int[][], int[][], int[][], int[][], int[][], int[][], int[][], org.apache.lucene.util.BytesRef, int[][], org.apache.lucene.util.BytesRef)"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields.size()", "public int size()"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.reset(int, int, int[], int[], int[], org.apache.lucene.util.BytesRef, int[])", "public void reset(int, int, int[], int[], int[], org.apache.lucene.util.BytesRef, int[])"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.cost()", "public long cost()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.size()", "public long size() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.getSumDocFreq()", "public long getSumDocFreq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.getDocCount()", "public int getDocCount() throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasFreqs()", "public boolean hasFreqs()"], ["boolean", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasPayloads()", "public boolean hasPayloads()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public final org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["org.apache.lucene.codecs.compressing.CompressingTermVectorsReader", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode)", "public org.apache.lucene.codecs.compressing.CompressingTermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.clone()", "public org.apache.lucene.codecs.TermVectorsReader clone()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.get(int)", "public org.apache.lucene.index.Fields get(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int)", "public org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.startDocument(int)", "public void startDocument(int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.finishDocument()", "public void finishDocument() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean)", "public void startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.finishField()", "public void finishField() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.startTerm(org.apache.lucene.util.BytesRef, int)", "public void startTerm(org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.addPosition(int, int, int, org.apache.lucene.util.BytesRef)", "public void addPosition(int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.finish(org.apache.lucene.index.FieldInfos, int)", "public void finish(org.apache.lucene.index.FieldInfos, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)", "public void addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.merge(org.apache.lucene.index.MergeState)", "public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["org.apache.lucene.codecs.compressing.Compressor", "org.apache.lucene.codecs.compressing.CompressionMode$1.newCompressor()", "public org.apache.lucene.codecs.compressing.Compressor newCompressor()"], ["org.apache.lucene.codecs.compressing.Decompressor", "org.apache.lucene.codecs.compressing.CompressionMode$1.newDecompressor()", "public org.apache.lucene.codecs.compressing.Decompressor newDecompressor()"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressionMode$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.compressing.Compressor", "org.apache.lucene.codecs.compressing.CompressionMode$2.newCompressor()", "public org.apache.lucene.codecs.compressing.Compressor newCompressor()"], ["org.apache.lucene.codecs.compressing.Decompressor", "org.apache.lucene.codecs.compressing.CompressionMode$2.newDecompressor()", "public org.apache.lucene.codecs.compressing.Decompressor newDecompressor()"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressionMode$2.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.compressing.Compressor", "org.apache.lucene.codecs.compressing.CompressionMode$3.newCompressor()", "public org.apache.lucene.codecs.compressing.Compressor newCompressor()"], ["org.apache.lucene.codecs.compressing.Decompressor", "org.apache.lucene.codecs.compressing.CompressionMode$3.newDecompressor()", "public org.apache.lucene.codecs.compressing.Decompressor newDecompressor()"], ["java.lang.String", "org.apache.lucene.codecs.compressing.CompressionMode$3.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$4.decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef)", "public void decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.codecs.compressing.Decompressor", "org.apache.lucene.codecs.compressing.CompressionMode$4.clone()", "public org.apache.lucene.codecs.compressing.Decompressor clone()"], ["java.lang.Object", "org.apache.lucene.codecs.compressing.CompressionMode$4.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor.compress(byte[], int, int, org.apache.lucene.store.DataOutput)", "public void compress(byte[], int, int, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor.decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef)", "public void decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.codecs.compressing.Decompressor", "org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor.clone()", "public org.apache.lucene.codecs.compressing.Decompressor clone()"], ["java.lang.Object", "org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$LZ4FastCompressor.compress(byte[], int, int, org.apache.lucene.store.DataOutput)", "public void compress(byte[], int, int, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$LZ4FastCompressor.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$LZ4HighCompressor.compress(byte[], int, int, org.apache.lucene.store.DataOutput)", "public void compress(byte[], int, int, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.CompressionMode$LZ4HighCompressor.close()", "public void close() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.codecs.compressing.Decompressor.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.codecs.compressing.LZ4.decompress(org.apache.lucene.store.DataInput, int, byte[], int)", "public static int decompress(org.apache.lucene.store.DataInput, int, byte[], int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.LZ4.compress(byte[], int, int, org.apache.lucene.store.DataOutput, org.apache.lucene.codecs.compressing.LZ4$HashTable)", "public static void compress(byte[], int, int, org.apache.lucene.store.DataOutput, org.apache.lucene.codecs.compressing.LZ4$HashTable) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.compressing.LZ4.compressHC(byte[], int, int, org.apache.lucene.store.DataOutput, org.apache.lucene.codecs.compressing.LZ4$HCHashTable)", "public static void compressHC(byte[], int, int, org.apache.lucene.store.DataOutput, org.apache.lucene.codecs.compressing.LZ4$HCHashTable) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat", "org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat()", "public org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat.getCompoundReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory getCompoundReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public void write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50CompoundReader$FileEntry", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader$FileEntry()", "public org.apache.lucene.codecs.lucene50.Lucene50CompoundReader$FileEntry()"], ["org.apache.lucene.codecs.lucene50.Lucene50CompoundReader", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene50.Lucene50CompoundReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.listAll()", "public java.lang.String[] listAll()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String)"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String)"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.syncMetaData()", "public void syncMetaData()"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>)"], ["org.apache.lucene.store.Lock", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.obtainLock(java.lang.String)", "public org.apache.lucene.store.Lock obtainLock(java.lang.String)"], ["java.lang.String", "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat", "org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat()", "public org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat.read(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.FieldInfos read(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public void write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat", "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat()", "public org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat()"], ["org.apache.lucene.util.MutableBits", "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.newLiveDocs(int)", "public org.apache.lucene.util.MutableBits newLiveDocs(int) throws java.io.IOException"], ["org.apache.lucene.util.MutableBits", "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.newLiveDocs(org.apache.lucene.util.Bits)", "public org.apache.lucene.util.MutableBits newLiveDocs(org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.readLiveDocs(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.util.Bits readLiveDocs(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.writeLiveDocs(org.apache.lucene.util.MutableBits, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentCommitInfo, int, org.apache.lucene.store.IOContext)", "public void writeLiveDocs(org.apache.lucene.util.MutableBits, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentCommitInfo, int, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.files(org.apache.lucene.index.SegmentCommitInfo, java.util.Collection<java.lang.String>)", "public void files(org.apache.lucene.index.SegmentCommitInfo, java.util.Collection<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.clone()", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState clone()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["java.lang.String", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.TermState", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.clone()", "public org.apache.lucene.index.TermState clone()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat()", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat()"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat(int, int)", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat(int, int)"], ["java.lang.String", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.FieldsConsumer", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.FieldsConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.FieldsProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)", "public boolean canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.reset(org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState, int)", "public org.apache.lucene.index.PostingsEnum reset(org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.cost()", "public long cost()"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)", "public boolean canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.reset(org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState)", "public org.apache.lucene.index.PostingsEnum reset(org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.endOffset()", "public int endOffset()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.cost()", "public long cost()"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)", "public boolean canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.reset(org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState, int)", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum reset(org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.endOffset()", "public int endOffset()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.cost()", "public long cost()"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsReader", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsReader(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.init(org.apache.lucene.store.IndexInput, org.apache.lucene.index.SegmentReadState)", "public void init(org.apache.lucene.store.IndexInput, org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTermState", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.newTermState()", "public org.apache.lucene.codecs.BlockTermState newTermState()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.decodeTerm(long[], org.apache.lucene.store.DataInput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, boolean)", "public void decodeTerm(long[], org.apache.lucene.store.DataInput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, boolean) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.postings(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.newTermState()", "public org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState newTermState()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.init(org.apache.lucene.store.IndexOutput, org.apache.lucene.index.SegmentWriteState)", "public void init(org.apache.lucene.store.IndexOutput, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.setField(org.apache.lucene.index.FieldInfo)", "public int setField(org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.startTerm()", "public void startTerm()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.startDoc(int, int)", "public void startDoc(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.addPosition(int, org.apache.lucene.util.BytesRef, int, int)", "public void addPosition(int, org.apache.lucene.util.BytesRef, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.finishDoc()", "public void finishDoc() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.finishTerm(org.apache.lucene.codecs.BlockTermState)", "public void finishTerm(org.apache.lucene.codecs.BlockTermState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.encodeTerm(long[], org.apache.lucene.store.DataOutput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, boolean)", "public void encodeTerm(long[], org.apache.lucene.store.DataOutput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTermState", "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.newTermState()", "public org.apache.lucene.codecs.BlockTermState newTermState() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50SkipReader", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader(org.apache.lucene.store.IndexInput, int, boolean, boolean, boolean)", "public org.apache.lucene.codecs.lucene50.Lucene50SkipReader(org.apache.lucene.store.IndexInput, int, boolean, boolean, boolean)"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.init(long, long, long, long, int)", "public void init(long, long, long, long, int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getDocPointer()", "public long getDocPointer()"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPosPointer()", "public long getPosPointer()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPosBufferUpto()", "public int getPosBufferUpto()"], ["long", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPayPointer()", "public long getPayPointer()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPayloadByteUpto()", "public int getPayloadByteUpto()"], ["int", "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getNextSkipDoc()", "public int getNextSkipDoc()"], ["org.apache.lucene.codecs.lucene50.Lucene50SkipWriter", "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter(int, int, int, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput)", "public org.apache.lucene.codecs.lucene50.Lucene50SkipWriter(int, int, int, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput)"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.setField(boolean, boolean, boolean)", "public void setField(boolean, boolean, boolean)"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.resetSkip()", "public void resetSkip()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.initSkip()", "public void initSkip()"], ["void", "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.bufferSkip(int, int, long, long, int, int)", "public void bufferSkip(int, int, long, long, int, int) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode[]", "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode.values()", "public static org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode[] values()"], ["org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode", "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode.valueOf(java.lang.String)", "public static org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode valueOf(java.lang.String)"], ["org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat", "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat()", "public org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat()"], ["org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat", "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat(org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode)", "public org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat(org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode)"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsReader fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsWriter", "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsWriter fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene50.Lucene50TermVectorsFormat", "org.apache.lucene.codecs.lucene50.Lucene50TermVectorsFormat()", "public org.apache.lucene.codecs.lucene50.Lucene50TermVectorsFormat()"], ["org.apache.lucene.codecs.lucene60.Lucene60FieldInfosFormat", "org.apache.lucene.codecs.lucene60.Lucene60FieldInfosFormat()", "public org.apache.lucene.codecs.lucene60.Lucene60FieldInfosFormat()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.codecs.lucene60.Lucene60FieldInfosFormat.read(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.FieldInfos read(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60FieldInfosFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public void write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene60.Lucene60PointsFormat", "org.apache.lucene.codecs.lucene60.Lucene60PointsFormat()", "public org.apache.lucene.codecs.lucene60.Lucene60PointsFormat()"], ["org.apache.lucene.codecs.PointsWriter", "org.apache.lucene.codecs.lucene60.Lucene60PointsFormat.fieldsWriter(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.PointsWriter fieldsWriter(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.PointsReader", "org.apache.lucene.codecs.lucene60.Lucene60PointsFormat.fieldsReader(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.PointsReader fieldsReader(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene60.Lucene60PointsReader", "org.apache.lucene.codecs.lucene60.Lucene60PointsReader(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.lucene60.Lucene60PointsReader(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.codecs.lucene60.Lucene60PointsReader.getValues(java.lang.String)", "public org.apache.lucene.index.PointValues getValues(java.lang.String)"], ["long", "org.apache.lucene.codecs.lucene60.Lucene60PointsReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.lucene60.Lucene60PointsReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter$1.visit(int)", "public void visit(int)"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter$1.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.codecs.lucene60.Lucene60PointsWriter", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter(org.apache.lucene.index.SegmentWriteState, int, double)", "public org.apache.lucene.codecs.lucene60.Lucene60PointsWriter(org.apache.lucene.index.SegmentWriteState, int, double) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene60.Lucene60PointsWriter", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.lucene60.Lucene60PointsWriter(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter.writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.PointsReader)", "public void writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.PointsReader) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter.finish()", "public void finish() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene60.Lucene60PointsWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene62.Lucene62SegmentInfoFormat", "org.apache.lucene.codecs.lucene62.Lucene62SegmentInfoFormat()", "public org.apache.lucene.codecs.lucene62.Lucene62SegmentInfoFormat()"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.codecs.lucene62.Lucene62SegmentInfoFormat.read(org.apache.lucene.store.Directory, java.lang.String, byte[], org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentInfo read(org.apache.lucene.store.Directory, java.lang.String, byte[], org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene62.Lucene62SegmentInfoFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public void write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene70.IndexedDISI$Method[]", "org.apache.lucene.codecs.lucene70.IndexedDISI$Method.values()", "public static org.apache.lucene.codecs.lucene70.IndexedDISI$Method[] values()"], ["org.apache.lucene.codecs.lucene70.IndexedDISI$Method", "org.apache.lucene.codecs.lucene70.IndexedDISI$Method.valueOf(java.lang.String)", "public static org.apache.lucene.codecs.lucene70.IndexedDISI$Method valueOf(java.lang.String)"], ["int", "org.apache.lucene.codecs.lucene70.IndexedDISI.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene70.IndexedDISI.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.IndexedDISI.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.IndexedDISI.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.IndexedDISI.index()", "public int index()"], ["long", "org.apache.lucene.codecs.lucene70.IndexedDISI.cost()", "public long cost()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec$1.getPostingsFormatForField(java.lang.String)", "public org.apache.lucene.codecs.PostingsFormat getPostingsFormatForField(java.lang.String)"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec$2.getDocValuesFormatForField(java.lang.String)", "public org.apache.lucene.codecs.DocValuesFormat getDocValuesFormatForField(java.lang.String)"], ["org.apache.lucene.codecs.lucene70.Lucene70Codec", "org.apache.lucene.codecs.lucene70.Lucene70Codec()", "public org.apache.lucene.codecs.lucene70.Lucene70Codec()"], ["org.apache.lucene.codecs.lucene70.Lucene70Codec", "org.apache.lucene.codecs.lucene70.Lucene70Codec(org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode)", "public org.apache.lucene.codecs.lucene70.Lucene70Codec(org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode)"], ["org.apache.lucene.codecs.StoredFieldsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.storedFieldsFormat()", "public final org.apache.lucene.codecs.StoredFieldsFormat storedFieldsFormat()"], ["org.apache.lucene.codecs.TermVectorsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.termVectorsFormat()", "public final org.apache.lucene.codecs.TermVectorsFormat termVectorsFormat()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.postingsFormat()", "public final org.apache.lucene.codecs.PostingsFormat postingsFormat()"], ["org.apache.lucene.codecs.FieldInfosFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.fieldInfosFormat()", "public final org.apache.lucene.codecs.FieldInfosFormat fieldInfosFormat()"], ["org.apache.lucene.codecs.SegmentInfoFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.segmentInfoFormat()", "public final org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()"], ["org.apache.lucene.codecs.LiveDocsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.liveDocsFormat()", "public final org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()"], ["org.apache.lucene.codecs.CompoundFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.compoundFormat()", "public final org.apache.lucene.codecs.CompoundFormat compoundFormat()"], ["org.apache.lucene.codecs.PointsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.pointsFormat()", "public final org.apache.lucene.codecs.PointsFormat pointsFormat()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.getPostingsFormatForField(java.lang.String)", "public org.apache.lucene.codecs.PostingsFormat getPostingsFormatForField(java.lang.String)"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.getDocValuesFormatForField(java.lang.String)", "public org.apache.lucene.codecs.DocValuesFormat getDocValuesFormatForField(java.lang.String)"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.docValuesFormat()", "public final org.apache.lucene.codecs.DocValuesFormat docValuesFormat()"], ["org.apache.lucene.codecs.NormsFormat", "org.apache.lucene.codecs.lucene70.Lucene70Codec.normsFormat()", "public final org.apache.lucene.codecs.NormsFormat normsFormat()"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer$1.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer$2.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer(org.apache.lucene.index.SegmentWriteState, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer(org.apache.lucene.index.SegmentWriteState, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer.addNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer.addBinaryField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addBinaryField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer.addSortedField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addSortedField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer.addSortedNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addSortedNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesConsumer.addSortedSetField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addSortedSetField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene70.Lucene70DocValuesFormat", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesFormat()", "public org.apache.lucene.codecs.lucene70.Lucene70DocValuesFormat()"], ["org.apache.lucene.codecs.DocValuesConsumer", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.DocValuesConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesProducer", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.DocValuesProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$1.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$10.get(long)", "public long get(long)"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$11.get(long)", "public long get(long)"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$12.get(long)", "public long get(long)"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$13.get(long)", "public long get(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$14.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$15.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$16.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$17.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$18.get(long)", "public long get(long)"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$19.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$19.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$19.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$19.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$19.advanceExact(int)", "public boolean advanceExact(int)"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$19.ordValue()", "public int ordValue()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$2.longValue()", "public long longValue() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$20.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$20.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$20.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$20.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$20.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$20.ordValue()", "public int ordValue()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$21.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$21.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$21.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$21.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$21.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$21.nextValue()", "public long nextValue() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$21.docValueCount()", "public int docValueCount()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$22.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$22.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$22.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$22.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$22.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$22.nextValue()", "public long nextValue() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$22.docValueCount()", "public int docValueCount()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$23.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$23.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$23.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$23.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$23.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$23.nextOrd()", "public long nextOrd() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$24.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$24.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$24.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$24.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$24.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$24.nextOrd()", "public long nextOrd() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$3.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$4.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$5.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$6.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$7.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$8.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$9.get(long)", "public long get(long)"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedDocValues.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedDocValues.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedDocValues.lookupTerm(org.apache.lucene.util.BytesRef)", "public int lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedDocValues.termsEnum()", "public org.apache.lucene.index.TermsEnum termsEnum() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedSetDocValues.getValueCount()", "public long getValueCount()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedSetDocValues.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedSetDocValues.lookupTerm(org.apache.lucene.util.BytesRef)", "public long lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$BaseSortedSetDocValues.termsEnum()", "public org.apache.lucene.index.TermsEnum termsEnum() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseBinaryDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseBinaryDocValues.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseBinaryDocValues.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseBinaryDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseBinaryDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseNumericDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseNumericDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseNumericDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseNumericDocValues.advanceExact(int)", "public boolean advanceExact(int)"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$DenseNumericDocValues.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseBinaryDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseBinaryDocValues.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseBinaryDocValues.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseBinaryDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseBinaryDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseNumericDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseNumericDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseNumericDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseNumericDocValues.docID()", "public int docID()"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$SparseNumericDocValues.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.ord()", "public long ord() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer$TermsDict.docFreq()", "public int docFreq() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.getSortedSet(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70DocValuesProducer.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70NormsConsumer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70NormsConsumer.addNormsField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.NormsProducer)", "public void addNormsField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.NormsProducer) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene70.Lucene70NormsFormat", "org.apache.lucene.codecs.lucene70.Lucene70NormsFormat()", "public org.apache.lucene.codecs.lucene70.Lucene70NormsFormat()"], ["org.apache.lucene.codecs.NormsConsumer", "org.apache.lucene.codecs.lucene70.Lucene70NormsFormat.normsConsumer(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.NormsConsumer normsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.NormsProducer", "org.apache.lucene.codecs.lucene70.Lucene70NormsFormat.normsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.NormsProducer normsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$1.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$10.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$2.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$3.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$4.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$5.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$6.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$7.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$8.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$9.longValue()", "public long longValue() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$DenseNormsIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$DenseNormsIterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$DenseNormsIterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$DenseNormsIterator.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$DenseNormsIterator.cost()", "public long cost()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$SparseNormsIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$SparseNormsIterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$SparseNormsIterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$SparseNormsIterator.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer$SparseNormsIterator.cost()", "public long cost()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer.getNorms(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNorms(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.lucene70.Lucene70NormsProducer.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.lucene70.Lucene70SegmentInfoFormat", "org.apache.lucene.codecs.lucene70.Lucene70SegmentInfoFormat()", "public org.apache.lucene.codecs.lucene70.Lucene70SegmentInfoFormat()"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.codecs.lucene70.Lucene70SegmentInfoFormat.read(org.apache.lucene.store.Directory, java.lang.String, byte[], org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentInfo read(org.apache.lucene.store.Directory, java.lang.String, byte[], org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene70.Lucene70SegmentInfoFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public void write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$ConsumerAndSuffix.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader(org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat, org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader(org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat, org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getSortedSet(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesProducer", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getMergeInstance()", "public org.apache.lucene.codecs.DocValuesProducer getMergeInstance() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat, org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat, org.apache.lucene.index.SegmentWriteState)"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addBinaryField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addBinaryField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addSortedField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addSortedField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addSortedNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addSortedNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addSortedSetField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer)", "public void addSortedSetField(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.DocValuesProducer) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat()", "public org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat()"], ["org.apache.lucene.codecs.DocValuesConsumer", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)", "public final org.apache.lucene.codecs.DocValuesConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesProducer", "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)", "public final org.apache.lucene.codecs.DocValuesProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["java.util.Iterator<org.apache.lucene.index.FieldInfo>", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.iterator()", "public java.util.Iterator<org.apache.lucene.index.FieldInfo> iterator()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasFreq()", "public boolean hasFreq()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasProx()", "public boolean hasProx()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasPayloads()", "public boolean hasPayloads()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasVectors()", "public boolean hasVectors()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasNorms()", "public boolean hasNorms()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasDocValues()", "public boolean hasDocValues()"], ["boolean", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.hasPointValues()", "public boolean hasPointValues()"], ["int", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.size()", "public int size()"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.fieldInfo(java.lang.String)", "public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldInfos.fieldInfo(int)", "public org.apache.lucene.index.FieldInfo fieldInfo(int)"], ["long", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldsProducer.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldsProducer.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldsProducer.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldsProducer.size()", "public int size()"], ["void", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldsProducer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldMergeState$FilterFieldsProducer.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.size()", "public int size()"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.getMergeInstance()", "public org.apache.lucene.codecs.FieldsProducer getMergeInstance() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter$1.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentWriteState)"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.write(org.apache.lucene.index.Fields)", "public void write(org.apache.lucene.index.Fields) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.perfield.PerFieldPostingsFormat", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat()", "public org.apache.lucene.codecs.perfield.PerFieldPostingsFormat()"], ["org.apache.lucene.codecs.FieldsConsumer", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)", "public final org.apache.lucene.codecs.FieldsConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)", "public final org.apache.lucene.codecs.FieldsProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.document.BinaryDocValuesField", "org.apache.lucene.document.BinaryDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.BinaryDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.document.BinaryPoint$2.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "org.apache.lucene.document.BinaryPoint$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.BinaryPoint$3.next()", "public org.apache.lucene.util.BytesRef next()"], ["org.apache.lucene.document.BinaryPoint", "org.apache.lucene.document.BinaryPoint(java.lang.String, byte[]...)", "public org.apache.lucene.document.BinaryPoint(java.lang.String, byte[]...)"], ["org.apache.lucene.document.BinaryPoint", "org.apache.lucene.document.BinaryPoint(java.lang.String, byte[], org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.BinaryPoint(java.lang.String, byte[], org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.BinaryPoint.newExactQuery(java.lang.String, byte[])", "public static org.apache.lucene.search.Query newExactQuery(java.lang.String, byte[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.BinaryPoint.newRangeQuery(java.lang.String, byte[], byte[])", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, byte[], byte[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.BinaryPoint.newRangeQuery(java.lang.String, byte[][], byte[][])", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, byte[][], byte[][])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.BinaryPoint.newSetQuery(java.lang.String, byte[]...)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, byte[]...)"], ["org.apache.lucene.document.DateTools$Resolution[]", "org.apache.lucene.document.DateTools$Resolution.values()", "public static org.apache.lucene.document.DateTools$Resolution[] values()"], ["org.apache.lucene.document.DateTools$Resolution", "org.apache.lucene.document.DateTools$Resolution.valueOf(java.lang.String)", "public static org.apache.lucene.document.DateTools$Resolution valueOf(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.DateTools$Resolution.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.document.DateTools.dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)", "public static java.lang.String dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"], ["java.lang.String", "org.apache.lucene.document.DateTools.timeToString(long, org.apache.lucene.document.DateTools$Resolution)", "public static java.lang.String timeToString(long, org.apache.lucene.document.DateTools$Resolution)"], ["long", "org.apache.lucene.document.DateTools.stringToTime(java.lang.String)", "public static long stringToTime(java.lang.String) throws java.text.ParseException"], ["java.util.Date", "org.apache.lucene.document.DateTools.stringToDate(java.lang.String)", "public static java.util.Date stringToDate(java.lang.String) throws java.text.ParseException"], ["java.util.Date", "org.apache.lucene.document.DateTools.round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)", "public static java.util.Date round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"], ["long", "org.apache.lucene.document.DateTools.round(long, org.apache.lucene.document.DateTools$Resolution)", "public static long round(long, org.apache.lucene.document.DateTools$Resolution)"], ["org.apache.lucene.document.Document", "org.apache.lucene.document.Document()", "public org.apache.lucene.document.Document()"], ["java.util.Iterator<org.apache.lucene.index.IndexableField>", "org.apache.lucene.document.Document.iterator()", "public java.util.Iterator<org.apache.lucene.index.IndexableField> iterator()"], ["void", "org.apache.lucene.document.Document.add(org.apache.lucene.index.IndexableField)", "public final void add(org.apache.lucene.index.IndexableField)"], ["void", "org.apache.lucene.document.Document.removeField(java.lang.String)", "public final void removeField(java.lang.String)"], ["void", "org.apache.lucene.document.Document.removeFields(java.lang.String)", "public final void removeFields(java.lang.String)"], ["org.apache.lucene.util.BytesRef[]", "org.apache.lucene.document.Document.getBinaryValues(java.lang.String)", "public final org.apache.lucene.util.BytesRef[] getBinaryValues(java.lang.String)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.Document.getBinaryValue(java.lang.String)", "public final org.apache.lucene.util.BytesRef getBinaryValue(java.lang.String)"], ["org.apache.lucene.index.IndexableField", "org.apache.lucene.document.Document.getField(java.lang.String)", "public final org.apache.lucene.index.IndexableField getField(java.lang.String)"], ["org.apache.lucene.index.IndexableField[]", "org.apache.lucene.document.Document.getFields(java.lang.String)", "public org.apache.lucene.index.IndexableField[] getFields(java.lang.String)"], ["java.util.List<org.apache.lucene.index.IndexableField>", "org.apache.lucene.document.Document.getFields()", "public final java.util.List<org.apache.lucene.index.IndexableField> getFields()"], ["java.lang.String[]", "org.apache.lucene.document.Document.getValues(java.lang.String)", "public final java.lang.String[] getValues(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.Document.get(java.lang.String)", "public final java.lang.String get(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.Document.toString()", "public final java.lang.String toString()"], ["void", "org.apache.lucene.document.Document.clear()", "public void clear()"], ["org.apache.lucene.document.DocumentStoredFieldVisitor", "org.apache.lucene.document.DocumentStoredFieldVisitor(java.util.Set<java.lang.String>)", "public org.apache.lucene.document.DocumentStoredFieldVisitor(java.util.Set<java.lang.String>)"], ["org.apache.lucene.document.DocumentStoredFieldVisitor", "org.apache.lucene.document.DocumentStoredFieldVisitor(java.lang.String...)", "public org.apache.lucene.document.DocumentStoredFieldVisitor(java.lang.String...)"], ["org.apache.lucene.document.DocumentStoredFieldVisitor", "org.apache.lucene.document.DocumentStoredFieldVisitor()", "public org.apache.lucene.document.DocumentStoredFieldVisitor()"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])", "public void binaryField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, byte[])", "public void stringField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)", "public void intField(org.apache.lucene.index.FieldInfo, int)"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)", "public void longField(org.apache.lucene.index.FieldInfo, long)"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)", "public void floatField(org.apache.lucene.index.FieldInfo, float)"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)", "public void doubleField(org.apache.lucene.index.FieldInfo, double)"], ["org.apache.lucene.index.StoredFieldVisitor$Status", "org.apache.lucene.document.DocumentStoredFieldVisitor.needsField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.StoredFieldVisitor$Status needsField(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument()", "public org.apache.lucene.document.Document getDocument()"], ["org.apache.lucene.document.DoubleDocValuesField", "org.apache.lucene.document.DoubleDocValuesField(java.lang.String, double)", "public org.apache.lucene.document.DoubleDocValuesField(java.lang.String, double)"], ["void", "org.apache.lucene.document.DoubleDocValuesField.setDoubleValue(double)", "public void setDoubleValue(double)"], ["void", "org.apache.lucene.document.DoubleDocValuesField.setLongValue(long)", "public void setLongValue(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.DoublePoint$2.next()", "public org.apache.lucene.util.BytesRef next()"], ["double", "org.apache.lucene.document.DoublePoint.nextUp(double)", "public static double nextUp(double)"], ["double", "org.apache.lucene.document.DoublePoint.nextDown(double)", "public static double nextDown(double)"], ["void", "org.apache.lucene.document.DoublePoint.setDoubleValue(double)", "public void setDoubleValue(double)"], ["void", "org.apache.lucene.document.DoublePoint.setDoubleValues(double...)", "public void setDoubleValues(double...)"], ["void", "org.apache.lucene.document.DoublePoint.setBytesValue(org.apache.lucene.util.BytesRef)", "public void setBytesValue(org.apache.lucene.util.BytesRef)"], ["java.lang.Number", "org.apache.lucene.document.DoublePoint.numericValue()", "public java.lang.Number numericValue()"], ["org.apache.lucene.document.DoublePoint", "org.apache.lucene.document.DoublePoint(java.lang.String, double...)", "public org.apache.lucene.document.DoublePoint(java.lang.String, double...)"], ["java.lang.String", "org.apache.lucene.document.DoublePoint.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.document.DoublePoint.encodeDimension(double, byte[], int)", "public static void encodeDimension(double, byte[], int)"], ["double", "org.apache.lucene.document.DoublePoint.decodeDimension(byte[], int)", "public static double decodeDimension(byte[], int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoublePoint.newExactQuery(java.lang.String, double)", "public static org.apache.lucene.search.Query newExactQuery(java.lang.String, double)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoublePoint.newRangeQuery(java.lang.String, double, double)", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, double, double)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoublePoint.newRangeQuery(java.lang.String, double[], double[])", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, double[], double[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoublePoint.newSetQuery(java.lang.String, double...)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, double...)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoublePoint.newSetQuery(java.lang.String, java.util.Collection<java.lang.Double>)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, java.util.Collection<java.lang.Double>)"], ["org.apache.lucene.document.DoubleRange", "org.apache.lucene.document.DoubleRange(java.lang.String, double[], double[])", "public org.apache.lucene.document.DoubleRange(java.lang.String, double[], double[])"], ["void", "org.apache.lucene.document.DoubleRange.setRangeValues(double[], double[])", "public void setRangeValues(double[], double[])"], ["double", "org.apache.lucene.document.DoubleRange.getMin(int)", "public double getMin(int)"], ["double", "org.apache.lucene.document.DoubleRange.getMax(int)", "public double getMax(int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoubleRange.newIntersectsQuery(java.lang.String, double[], double[])", "public static org.apache.lucene.search.Query newIntersectsQuery(java.lang.String, double[], double[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoubleRange.newContainsQuery(java.lang.String, double[], double[])", "public static org.apache.lucene.search.Query newContainsQuery(java.lang.String, double[], double[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoubleRange.newWithinQuery(java.lang.String, double[], double[])", "public static org.apache.lucene.search.Query newWithinQuery(java.lang.String, double[], double[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.DoubleRange.newCrossesQuery(java.lang.String, double[], double[])", "public static org.apache.lucene.search.Query newCrossesQuery(java.lang.String, double[], double[])"], ["java.lang.String", "org.apache.lucene.document.DoubleRange.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.document.Field$BinaryTokenStream.setValue(org.apache.lucene.util.BytesRef)", "public void setValue(org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.document.Field$BinaryTokenStream.incrementToken()", "public boolean incrementToken()"], ["void", "org.apache.lucene.document.Field$BinaryTokenStream.reset()", "public void reset()"], ["void", "org.apache.lucene.document.Field$BinaryTokenStream.close()", "public void close()"], ["org.apache.lucene.document.Field$Store[]", "org.apache.lucene.document.Field$Store.values()", "public static org.apache.lucene.document.Field$Store[] values()"], ["org.apache.lucene.document.Field$Store", "org.apache.lucene.document.Field$Store.valueOf(java.lang.String)", "public static org.apache.lucene.document.Field$Store valueOf(java.lang.String)"], ["boolean", "org.apache.lucene.document.Field$StringTokenStream.incrementToken()", "public boolean incrementToken()"], ["void", "org.apache.lucene.document.Field$StringTokenStream.end()", "public void end() throws java.io.IOException"], ["void", "org.apache.lucene.document.Field$StringTokenStream.reset()", "public void reset()"], ["void", "org.apache.lucene.document.Field$StringTokenStream.close()", "public void close()"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.index.IndexableFieldType)"], ["java.lang.String", "org.apache.lucene.document.Field.stringValue()", "public java.lang.String stringValue()"], ["java.io.Reader", "org.apache.lucene.document.Field.readerValue()", "public java.io.Reader readerValue()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.document.Field.tokenStreamValue()", "public org.apache.lucene.analysis.TokenStream tokenStreamValue()"], ["void", "org.apache.lucene.document.Field.setStringValue(java.lang.String)", "public void setStringValue(java.lang.String)"], ["void", "org.apache.lucene.document.Field.setReaderValue(java.io.Reader)", "public void setReaderValue(java.io.Reader)"], ["void", "org.apache.lucene.document.Field.setBytesValue(byte[])", "public void setBytesValue(byte[])"], ["void", "org.apache.lucene.document.Field.setBytesValue(org.apache.lucene.util.BytesRef)", "public void setBytesValue(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.document.Field.setByteValue(byte)", "public void setByteValue(byte)"], ["void", "org.apache.lucene.document.Field.setShortValue(short)", "public void setShortValue(short)"], ["void", "org.apache.lucene.document.Field.setIntValue(int)", "public void setIntValue(int)"], ["void", "org.apache.lucene.document.Field.setLongValue(long)", "public void setLongValue(long)"], ["void", "org.apache.lucene.document.Field.setFloatValue(float)", "public void setFloatValue(float)"], ["void", "org.apache.lucene.document.Field.setDoubleValue(double)", "public void setDoubleValue(double)"], ["void", "org.apache.lucene.document.Field.setTokenStream(org.apache.lucene.analysis.TokenStream)", "public void setTokenStream(org.apache.lucene.analysis.TokenStream)"], ["java.lang.String", "org.apache.lucene.document.Field.name()", "public java.lang.String name()"], ["java.lang.Number", "org.apache.lucene.document.Field.numericValue()", "public java.lang.Number numericValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.Field.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["java.lang.String", "org.apache.lucene.document.Field.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.IndexableFieldType", "org.apache.lucene.document.Field.fieldType()", "public org.apache.lucene.index.IndexableFieldType fieldType()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.document.Field.tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.TokenStream tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.document.FieldType", "org.apache.lucene.document.FieldType(org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.document.FieldType(org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.document.FieldType", "org.apache.lucene.document.FieldType()", "public org.apache.lucene.document.FieldType()"], ["void", "org.apache.lucene.document.FieldType.freeze()", "public void freeze()"], ["boolean", "org.apache.lucene.document.FieldType.stored()", "public boolean stored()"], ["void", "org.apache.lucene.document.FieldType.setStored(boolean)", "public void setStored(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.tokenized()", "public boolean tokenized()"], ["void", "org.apache.lucene.document.FieldType.setTokenized(boolean)", "public void setTokenized(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectors()", "public boolean storeTermVectors()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectors(boolean)", "public void setStoreTermVectors(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectorOffsets()", "public boolean storeTermVectorOffsets()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectorOffsets(boolean)", "public void setStoreTermVectorOffsets(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectorPositions()", "public boolean storeTermVectorPositions()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectorPositions(boolean)", "public void setStoreTermVectorPositions(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectorPayloads()", "public boolean storeTermVectorPayloads()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectorPayloads(boolean)", "public void setStoreTermVectorPayloads(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.omitNorms()", "public boolean omitNorms()"], ["void", "org.apache.lucene.document.FieldType.setOmitNorms(boolean)", "public void setOmitNorms(boolean)"], ["org.apache.lucene.index.IndexOptions", "org.apache.lucene.document.FieldType.indexOptions()", "public org.apache.lucene.index.IndexOptions indexOptions()"], ["void", "org.apache.lucene.document.FieldType.setIndexOptions(org.apache.lucene.index.IndexOptions)", "public void setIndexOptions(org.apache.lucene.index.IndexOptions)"], ["void", "org.apache.lucene.document.FieldType.setDimensions(int, int)", "public void setDimensions(int, int)"], ["int", "org.apache.lucene.document.FieldType.pointDimensionCount()", "public int pointDimensionCount()"], ["int", "org.apache.lucene.document.FieldType.pointNumBytes()", "public int pointNumBytes()"], ["java.lang.String", "org.apache.lucene.document.FieldType.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.DocValuesType", "org.apache.lucene.document.FieldType.docValuesType()", "public org.apache.lucene.index.DocValuesType docValuesType()"], ["void", "org.apache.lucene.document.FieldType.setDocValuesType(org.apache.lucene.index.DocValuesType)", "public void setDocValuesType(org.apache.lucene.index.DocValuesType)"], ["int", "org.apache.lucene.document.FieldType.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.document.FieldType.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.document.FloatDocValuesField", "org.apache.lucene.document.FloatDocValuesField(java.lang.String, float)", "public org.apache.lucene.document.FloatDocValuesField(java.lang.String, float)"], ["void", "org.apache.lucene.document.FloatDocValuesField.setFloatValue(float)", "public void setFloatValue(float)"], ["void", "org.apache.lucene.document.FloatDocValuesField.setLongValue(long)", "public void setLongValue(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.FloatPoint$2.next()", "public org.apache.lucene.util.BytesRef next()"], ["float", "org.apache.lucene.document.FloatPoint.nextUp(float)", "public static float nextUp(float)"], ["float", "org.apache.lucene.document.FloatPoint.nextDown(float)", "public static float nextDown(float)"], ["void", "org.apache.lucene.document.FloatPoint.setFloatValue(float)", "public void setFloatValue(float)"], ["void", "org.apache.lucene.document.FloatPoint.setFloatValues(float...)", "public void setFloatValues(float...)"], ["void", "org.apache.lucene.document.FloatPoint.setBytesValue(org.apache.lucene.util.BytesRef)", "public void setBytesValue(org.apache.lucene.util.BytesRef)"], ["java.lang.Number", "org.apache.lucene.document.FloatPoint.numericValue()", "public java.lang.Number numericValue()"], ["org.apache.lucene.document.FloatPoint", "org.apache.lucene.document.FloatPoint(java.lang.String, float...)", "public org.apache.lucene.document.FloatPoint(java.lang.String, float...)"], ["java.lang.String", "org.apache.lucene.document.FloatPoint.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.document.FloatPoint.encodeDimension(float, byte[], int)", "public static void encodeDimension(float, byte[], int)"], ["float", "org.apache.lucene.document.FloatPoint.decodeDimension(byte[], int)", "public static float decodeDimension(byte[], int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatPoint.newExactQuery(java.lang.String, float)", "public static org.apache.lucene.search.Query newExactQuery(java.lang.String, float)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatPoint.newRangeQuery(java.lang.String, float, float)", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, float, float)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatPoint.newRangeQuery(java.lang.String, float[], float[])", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, float[], float[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatPoint.newSetQuery(java.lang.String, float...)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, float...)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatPoint.newSetQuery(java.lang.String, java.util.Collection<java.lang.Float>)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, java.util.Collection<java.lang.Float>)"], ["org.apache.lucene.document.FloatRange", "org.apache.lucene.document.FloatRange(java.lang.String, float[], float[])", "public org.apache.lucene.document.FloatRange(java.lang.String, float[], float[])"], ["void", "org.apache.lucene.document.FloatRange.setRangeValues(float[], float[])", "public void setRangeValues(float[], float[])"], ["float", "org.apache.lucene.document.FloatRange.getMin(int)", "public float getMin(int)"], ["float", "org.apache.lucene.document.FloatRange.getMax(int)", "public float getMax(int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatRange.newIntersectsQuery(java.lang.String, float[], float[])", "public static org.apache.lucene.search.Query newIntersectsQuery(java.lang.String, float[], float[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatRange.newContainsQuery(java.lang.String, float[], float[])", "public static org.apache.lucene.search.Query newContainsQuery(java.lang.String, float[], float[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatRange.newWithinQuery(java.lang.String, float[], float[])", "public static org.apache.lucene.search.Query newWithinQuery(java.lang.String, float[], float[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.FloatRange.newCrossesQuery(java.lang.String, float[], float[])", "public static org.apache.lucene.search.Query newCrossesQuery(java.lang.String, float[], float[])"], ["java.lang.String", "org.apache.lucene.document.FloatRange.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.IntPoint$2.next()", "public org.apache.lucene.util.BytesRef next()"], ["void", "org.apache.lucene.document.IntPoint.setIntValue(int)", "public void setIntValue(int)"], ["void", "org.apache.lucene.document.IntPoint.setIntValues(int...)", "public void setIntValues(int...)"], ["void", "org.apache.lucene.document.IntPoint.setBytesValue(org.apache.lucene.util.BytesRef)", "public void setBytesValue(org.apache.lucene.util.BytesRef)"], ["java.lang.Number", "org.apache.lucene.document.IntPoint.numericValue()", "public java.lang.Number numericValue()"], ["org.apache.lucene.document.IntPoint", "org.apache.lucene.document.IntPoint(java.lang.String, int...)", "public org.apache.lucene.document.IntPoint(java.lang.String, int...)"], ["java.lang.String", "org.apache.lucene.document.IntPoint.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.document.IntPoint.encodeDimension(int, byte[], int)", "public static void encodeDimension(int, byte[], int)"], ["int", "org.apache.lucene.document.IntPoint.decodeDimension(byte[], int)", "public static int decodeDimension(byte[], int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntPoint.newExactQuery(java.lang.String, int)", "public static org.apache.lucene.search.Query newExactQuery(java.lang.String, int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntPoint.newRangeQuery(java.lang.String, int, int)", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, int, int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntPoint.newRangeQuery(java.lang.String, int[], int[])", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, int[], int[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntPoint.newSetQuery(java.lang.String, int...)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, int...)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntPoint.newSetQuery(java.lang.String, java.util.Collection<java.lang.Integer>)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, java.util.Collection<java.lang.Integer>)"], ["org.apache.lucene.document.IntRange", "org.apache.lucene.document.IntRange(java.lang.String, int[], int[])", "public org.apache.lucene.document.IntRange(java.lang.String, int[], int[])"], ["void", "org.apache.lucene.document.IntRange.setRangeValues(int[], int[])", "public void setRangeValues(int[], int[])"], ["int", "org.apache.lucene.document.IntRange.getMin(int)", "public int getMin(int)"], ["int", "org.apache.lucene.document.IntRange.getMax(int)", "public int getMax(int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntRange.newIntersectsQuery(java.lang.String, int[], int[])", "public static org.apache.lucene.search.Query newIntersectsQuery(java.lang.String, int[], int[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntRange.newContainsQuery(java.lang.String, int[], int[])", "public static org.apache.lucene.search.Query newContainsQuery(java.lang.String, int[], int[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntRange.newWithinQuery(java.lang.String, int[], int[])", "public static org.apache.lucene.search.Query newWithinQuery(java.lang.String, int[], int[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.IntRange.newCrossesQuery(java.lang.String, int[], int[])", "public static org.apache.lucene.search.Query newCrossesQuery(java.lang.String, int[], int[])"], ["java.lang.String", "org.apache.lucene.document.IntRange.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.LongPoint$2.next()", "public org.apache.lucene.util.BytesRef next()"], ["void", "org.apache.lucene.document.LongPoint.setLongValue(long)", "public void setLongValue(long)"], ["void", "org.apache.lucene.document.LongPoint.setLongValues(long...)", "public void setLongValues(long...)"], ["void", "org.apache.lucene.document.LongPoint.setBytesValue(org.apache.lucene.util.BytesRef)", "public void setBytesValue(org.apache.lucene.util.BytesRef)"], ["java.lang.Number", "org.apache.lucene.document.LongPoint.numericValue()", "public java.lang.Number numericValue()"], ["org.apache.lucene.document.LongPoint", "org.apache.lucene.document.LongPoint(java.lang.String, long...)", "public org.apache.lucene.document.LongPoint(java.lang.String, long...)"], ["java.lang.String", "org.apache.lucene.document.LongPoint.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.document.LongPoint.encodeDimension(long, byte[], int)", "public static void encodeDimension(long, byte[], int)"], ["long", "org.apache.lucene.document.LongPoint.decodeDimension(byte[], int)", "public static long decodeDimension(byte[], int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongPoint.newExactQuery(java.lang.String, long)", "public static org.apache.lucene.search.Query newExactQuery(java.lang.String, long)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongPoint.newRangeQuery(java.lang.String, long, long)", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, long, long)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongPoint.newRangeQuery(java.lang.String, long[], long[])", "public static org.apache.lucene.search.Query newRangeQuery(java.lang.String, long[], long[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongPoint.newSetQuery(java.lang.String, long...)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, long...)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongPoint.newSetQuery(java.lang.String, java.util.Collection<java.lang.Long>)", "public static org.apache.lucene.search.Query newSetQuery(java.lang.String, java.util.Collection<java.lang.Long>)"], ["org.apache.lucene.document.LongRange", "org.apache.lucene.document.LongRange(java.lang.String, long[], long[])", "public org.apache.lucene.document.LongRange(java.lang.String, long[], long[])"], ["void", "org.apache.lucene.document.LongRange.setRangeValues(long[], long[])", "public void setRangeValues(long[], long[])"], ["long", "org.apache.lucene.document.LongRange.getMin(int)", "public long getMin(int)"], ["long", "org.apache.lucene.document.LongRange.getMax(int)", "public long getMax(int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongRange.newIntersectsQuery(java.lang.String, long[], long[])", "public static org.apache.lucene.search.Query newIntersectsQuery(java.lang.String, long[], long[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongRange.newContainsQuery(java.lang.String, long[], long[])", "public static org.apache.lucene.search.Query newContainsQuery(java.lang.String, long[], long[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongRange.newWithinQuery(java.lang.String, long[], long[])", "public static org.apache.lucene.search.Query newWithinQuery(java.lang.String, long[], long[])"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.LongRange.newCrossesQuery(java.lang.String, long[], long[])", "public static org.apache.lucene.search.Query newCrossesQuery(java.lang.String, long[], long[])"], ["java.lang.String", "org.apache.lucene.document.LongRange.toString()", "public java.lang.String toString()"], ["org.apache.lucene.document.NumericDocValuesField", "org.apache.lucene.document.NumericDocValuesField(java.lang.String, long)", "public org.apache.lucene.document.NumericDocValuesField(java.lang.String, long)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.NumericDocValuesField.newSlowRangeQuery(java.lang.String, long, long)", "public static org.apache.lucene.search.Query newSlowRangeQuery(java.lang.String, long, long)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.NumericDocValuesField.newSlowExactQuery(java.lang.String, long)", "public static org.apache.lucene.search.Query newSlowExactQuery(java.lang.String, long)"], ["void", "org.apache.lucene.document.RangeFieldQuery$1$1.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.document.RangeFieldQuery$1$1.visit(int)", "public void visit(int) throws java.io.IOException"], ["void", "org.apache.lucene.document.RangeFieldQuery$1$1.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.document.RangeFieldQuery$1$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.document.RangeFieldQuery$1$2.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean)"], ["long", "org.apache.lucene.document.RangeFieldQuery$1$2.cost()", "public long cost()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.document.RangeFieldQuery$1$3.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean) throws java.io.IOException"], ["long", "org.apache.lucene.document.RangeFieldQuery$1$3.cost()", "public long cost()"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.document.RangeFieldQuery$1.scorerSupplier(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.ScorerSupplier scorerSupplier(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.document.RangeFieldQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.document.RangeFieldQuery$QueryType[]", "org.apache.lucene.document.RangeFieldQuery$QueryType.values()", "public static org.apache.lucene.document.RangeFieldQuery$QueryType[] values()"], ["org.apache.lucene.document.RangeFieldQuery$QueryType", "org.apache.lucene.document.RangeFieldQuery$QueryType.valueOf(java.lang.String)", "public static org.apache.lucene.document.RangeFieldQuery$QueryType valueOf(java.lang.String)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.document.RangeFieldQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public final org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["int", "org.apache.lucene.document.RangeFieldQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.document.RangeFieldQuery.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.document.RangeFieldQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.document.SortedDocValuesField", "org.apache.lucene.document.SortedDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.SortedDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedDocValuesField.newSlowRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)", "public static org.apache.lucene.search.Query newSlowRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedDocValuesField.newSlowExactQuery(java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.search.Query newSlowExactQuery(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.document.SortedNumericDocValuesField", "org.apache.lucene.document.SortedNumericDocValuesField(java.lang.String, long)", "public org.apache.lucene.document.SortedNumericDocValuesField(java.lang.String, long)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedNumericDocValuesField.newSlowRangeQuery(java.lang.String, long, long)", "public static org.apache.lucene.search.Query newSlowRangeQuery(java.lang.String, long, long)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedNumericDocValuesField.newSlowExactQuery(java.lang.String, long)", "public static org.apache.lucene.search.Query newSlowExactQuery(java.lang.String, long)"], ["boolean", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery$1$1.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery$1$1.matchCost()", "public float matchCost()"], ["boolean", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery$1$2.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery$1$2.matchCost()", "public float matchCost()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.document.SortedNumericDocValuesRangeQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.document.SortedSetDocValuesField", "org.apache.lucene.document.SortedSetDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.SortedSetDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedSetDocValuesField.newSlowRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)", "public static org.apache.lucene.search.Query newSlowRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedSetDocValuesField.newSlowExactQuery(java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.search.Query newSlowExactQuery(java.lang.String, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.document.SortedSetDocValuesRangeQuery$1$1.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.document.SortedSetDocValuesRangeQuery$1$1.matchCost()", "public float matchCost()"], ["boolean", "org.apache.lucene.document.SortedSetDocValuesRangeQuery$1$2.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.document.SortedSetDocValuesRangeQuery$1$2.matchCost()", "public float matchCost()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.document.SortedSetDocValuesRangeQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.document.SortedSetDocValuesRangeQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.document.SortedSetDocValuesRangeQuery.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.document.SortedSetDocValuesRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.Query", "org.apache.lucene.document.SortedSetDocValuesRangeQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.document.SortedSetDocValuesRangeQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, byte[])", "public org.apache.lucene.document.StoredField(java.lang.String, byte[])"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, byte[], int, int)", "public org.apache.lucene.document.StoredField(java.lang.String, byte[], int, int)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, java.lang.String)", "public org.apache.lucene.document.StoredField(java.lang.String, java.lang.String)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, java.lang.String, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.StoredField(java.lang.String, java.lang.String, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, int)", "public org.apache.lucene.document.StoredField(java.lang.String, int)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, float)", "public org.apache.lucene.document.StoredField(java.lang.String, float)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, long)", "public org.apache.lucene.document.StoredField(java.lang.String, long)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, double)", "public org.apache.lucene.document.StoredField(java.lang.String, double)"], ["org.apache.lucene.document.StringField", "org.apache.lucene.document.StringField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.StringField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.StringField", "org.apache.lucene.document.StringField(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.StringField(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.TextField", "org.apache.lucene.document.TextField(java.lang.String, java.io.Reader)", "public org.apache.lucene.document.TextField(java.lang.String, java.io.Reader)"], ["org.apache.lucene.document.TextField", "org.apache.lucene.document.TextField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.TextField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.TextField", "org.apache.lucene.document.TextField(java.lang.String, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.document.TextField(java.lang.String, org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.geo.GeoEncodingUtils$DistancePredicate.test(int, int)", "public boolean test(int, int)"], ["boolean", "org.apache.lucene.geo.GeoEncodingUtils$PolygonPredicate.test(int, int)", "public boolean test(int, int)"], ["int", "org.apache.lucene.geo.GeoEncodingUtils.encodeLatitude(double)", "public static int encodeLatitude(double)"], ["int", "org.apache.lucene.geo.GeoEncodingUtils.encodeLatitudeCeil(double)", "public static int encodeLatitudeCeil(double)"], ["int", "org.apache.lucene.geo.GeoEncodingUtils.encodeLongitude(double)", "public static int encodeLongitude(double)"], ["int", "org.apache.lucene.geo.GeoEncodingUtils.encodeLongitudeCeil(double)", "public static int encodeLongitudeCeil(double)"], ["double", "org.apache.lucene.geo.GeoEncodingUtils.decodeLatitude(int)", "public static double decodeLatitude(int)"], ["double", "org.apache.lucene.geo.GeoEncodingUtils.decodeLatitude(byte[], int)", "public static double decodeLatitude(byte[], int)"], ["double", "org.apache.lucene.geo.GeoEncodingUtils.decodeLongitude(int)", "public static double decodeLongitude(int)"], ["double", "org.apache.lucene.geo.GeoEncodingUtils.decodeLongitude(byte[], int)", "public static double decodeLongitude(byte[], int)"], ["org.apache.lucene.geo.GeoEncodingUtils$DistancePredicate", "org.apache.lucene.geo.GeoEncodingUtils.createDistancePredicate(double, double, double)", "public static org.apache.lucene.geo.GeoEncodingUtils$DistancePredicate createDistancePredicate(double, double, double)"], ["org.apache.lucene.geo.GeoEncodingUtils$PolygonPredicate", "org.apache.lucene.geo.GeoEncodingUtils.createPolygonPredicate(org.apache.lucene.geo.Polygon[], org.apache.lucene.geo.Polygon2D)", "public static org.apache.lucene.geo.GeoEncodingUtils$PolygonPredicate createPolygonPredicate(org.apache.lucene.geo.Polygon[], org.apache.lucene.geo.Polygon2D)"], ["void", "org.apache.lucene.geo.GeoUtils.checkLatitude(double)", "public static void checkLatitude(double)"], ["void", "org.apache.lucene.geo.GeoUtils.checkLongitude(double)", "public static void checkLongitude(double)"], ["double", "org.apache.lucene.geo.GeoUtils.sloppySin(double)", "public static double sloppySin(double)"], ["double", "org.apache.lucene.geo.GeoUtils.distanceQuerySortKey(double)", "public static double distanceQuerySortKey(double)"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.geo.GeoUtils.relate(double, double, double, double, double, double, double, double)", "public static org.apache.lucene.index.PointValues$Relation relate(double, double, double, double, double, double, double, double)"], ["org.apache.lucene.geo.Polygon", "org.apache.lucene.geo.Polygon(double[], double[], org.apache.lucene.geo.Polygon...)", "public org.apache.lucene.geo.Polygon(double[], double[], org.apache.lucene.geo.Polygon...)"], ["double[]", "org.apache.lucene.geo.Polygon.getPolyLats()", "public double[] getPolyLats()"], ["double[]", "org.apache.lucene.geo.Polygon.getPolyLons()", "public double[] getPolyLons()"], ["org.apache.lucene.geo.Polygon[]", "org.apache.lucene.geo.Polygon.getHoles()", "public org.apache.lucene.geo.Polygon[] getHoles()"], ["int", "org.apache.lucene.geo.Polygon.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.geo.Polygon.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.geo.Polygon.toString()", "public java.lang.String toString()"], ["org.apache.lucene.geo.Polygon[]", "org.apache.lucene.geo.Polygon.fromGeoJSON(java.lang.String)", "public static org.apache.lucene.geo.Polygon[] fromGeoJSON(java.lang.String) throws java.text.ParseException"], ["boolean", "org.apache.lucene.geo.Polygon2D.contains(double, double)", "public boolean contains(double, double)"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.geo.Polygon2D.relate(double, double, double, double)", "public org.apache.lucene.index.PointValues$Relation relate(double, double, double, double)"], ["org.apache.lucene.geo.Polygon2D", "org.apache.lucene.geo.Polygon2D.create(org.apache.lucene.geo.Polygon...)", "public static org.apache.lucene.geo.Polygon2D create(org.apache.lucene.geo.Polygon...)"], ["org.apache.lucene.geo.Rectangle", "org.apache.lucene.geo.Rectangle(double, double, double, double)", "public org.apache.lucene.geo.Rectangle(double, double, double, double)"], ["java.lang.String", "org.apache.lucene.geo.Rectangle.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.geo.Rectangle.crossesDateline()", "public boolean crossesDateline()"], ["org.apache.lucene.geo.Rectangle", "org.apache.lucene.geo.Rectangle.fromPointDistance(double, double, double)", "public static org.apache.lucene.geo.Rectangle fromPointDistance(double, double, double)"], ["double", "org.apache.lucene.geo.Rectangle.axisLat(double, double)", "public static double axisLat(double, double)"], ["org.apache.lucene.geo.Rectangle", "org.apache.lucene.geo.Rectangle.fromPolygon(org.apache.lucene.geo.Polygon[])", "public static org.apache.lucene.geo.Rectangle fromPolygon(org.apache.lucene.geo.Polygon[])"], ["boolean", "org.apache.lucene.geo.Rectangle.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.geo.Rectangle.hashCode()", "public int hashCode()"], ["org.apache.lucene.geo.SimpleGeoJSONPolygonParser", "org.apache.lucene.geo.SimpleGeoJSONPolygonParser(java.lang.String)", "public org.apache.lucene.geo.SimpleGeoJSONPolygonParser(java.lang.String)"], ["org.apache.lucene.geo.Polygon[]", "org.apache.lucene.geo.SimpleGeoJSONPolygonParser.parse()", "public org.apache.lucene.geo.Polygon[] parse() throws java.text.ParseException"], ["org.apache.lucene.index.AbortingException", "org.apache.lucene.index.AbortingException.wrap(java.lang.Throwable)", "public static org.apache.lucene.index.AbortingException wrap(java.lang.Throwable)"], ["org.apache.lucene.index.AutomatonTermsEnum", "org.apache.lucene.index.AutomatonTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton)", "public org.apache.lucene.index.AutomatonTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton)"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.BaseCompositeReader.getTermVectors(int)", "public final org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.BaseCompositeReader.numDocs()", "public final int numDocs()"], ["int", "org.apache.lucene.index.BaseCompositeReader.maxDoc()", "public final int maxDoc()"], ["void", "org.apache.lucene.index.BaseCompositeReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public final void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["int", "org.apache.lucene.index.BaseCompositeReader.docFreq(org.apache.lucene.index.Term)", "public final int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["long", "org.apache.lucene.index.BaseCompositeReader.totalTermFreq(org.apache.lucene.index.Term)", "public final long totalTermFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["long", "org.apache.lucene.index.BaseCompositeReader.getSumDocFreq(java.lang.String)", "public final long getSumDocFreq(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.BaseCompositeReader.getDocCount(java.lang.String)", "public final int getDocCount(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.index.BaseCompositeReader.getSumTotalTermFreq(java.lang.String)", "public final long getSumTotalTermFreq(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValuesFieldUpdates", "org.apache.lucene.index.BinaryDocValuesFieldUpdates(long, java.lang.String, int)", "public org.apache.lucene.index.BinaryDocValuesFieldUpdates(long, java.lang.String, int)"], ["int", "org.apache.lucene.index.BinaryDocValuesFieldUpdates.size()", "public int size()"], ["synchronized", "org.apache.lucene.index.BinaryDocValuesFieldUpdates.void add(int, java.lang.Object)", "public synchronized void add(int, java.lang.Object)"], ["void", "org.apache.lucene.index.BinaryDocValuesFieldUpdates.finish()", "public void finish()"], ["org.apache.lucene.index.BinaryDocValuesFieldUpdates$Iterator", "org.apache.lucene.index.BinaryDocValuesFieldUpdates.iterator()", "public org.apache.lucene.index.BinaryDocValuesFieldUpdates$Iterator iterator()"], ["boolean", "org.apache.lucene.index.BinaryDocValuesFieldUpdates.any()", "public boolean any()"], ["long", "org.apache.lucene.index.BinaryDocValuesFieldUpdates.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.DocValuesFieldUpdates$Iterator", "org.apache.lucene.index.BinaryDocValuesFieldUpdates.iterator()", "public org.apache.lucene.index.DocValuesFieldUpdates$Iterator iterator()"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.BinaryDocValuesWriter$1.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo)"], ["int", "org.apache.lucene.index.BinaryDocValuesWriter$BufferedBinaryDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.BinaryDocValuesWriter$BufferedBinaryDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.BinaryDocValuesWriter$BufferedBinaryDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.BinaryDocValuesWriter$BufferedBinaryDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.BinaryDocValuesWriter$BufferedBinaryDocValues.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.BinaryDocValuesWriter$BufferedBinaryDocValues.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["org.apache.lucene.index.BinaryDocValuesWriter", "org.apache.lucene.index.BinaryDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)", "public org.apache.lucene.index.BinaryDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.index.BinaryDocValuesWriter.addValue(int, org.apache.lucene.util.BytesRef)", "public void addValue(int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.index.BinaryDocValuesWriter.finish(int)", "public void finish(int)"], ["void", "org.apache.lucene.index.BinaryDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer)", "public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer) throws java.io.IOException"], ["org.apache.lucene.index.BitsSlice", "org.apache.lucene.index.BitsSlice(org.apache.lucene.util.Bits, org.apache.lucene.index.ReaderSlice)", "public org.apache.lucene.index.BitsSlice(org.apache.lucene.util.Bits, org.apache.lucene.index.ReaderSlice)"], ["boolean", "org.apache.lucene.index.BitsSlice.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.index.BitsSlice.length()", "public int length()"], ["org.apache.lucene.index.BufferedUpdates", "org.apache.lucene.index.BufferedUpdates(java.lang.String)", "public org.apache.lucene.index.BufferedUpdates(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.BufferedUpdates.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.BufferedUpdates.addQuery(org.apache.lucene.search.Query, int)", "public void addQuery(org.apache.lucene.search.Query, int)"], ["void", "org.apache.lucene.index.BufferedUpdates.addDocID(int)", "public void addDocID(int)"], ["void", "org.apache.lucene.index.BufferedUpdates.addTerm(org.apache.lucene.index.Term, int)", "public void addTerm(org.apache.lucene.index.Term, int)"], ["void", "org.apache.lucene.index.BufferedUpdates.addNumericUpdate(org.apache.lucene.index.DocValuesUpdate$NumericDocValuesUpdate, int)", "public void addNumericUpdate(org.apache.lucene.index.DocValuesUpdate$NumericDocValuesUpdate, int)"], ["void", "org.apache.lucene.index.BufferedUpdates.addBinaryUpdate(org.apache.lucene.index.DocValuesUpdate$BinaryDocValuesUpdate, int)", "public void addBinaryUpdate(org.apache.lucene.index.DocValuesUpdate$BinaryDocValuesUpdate, int)"], ["org.apache.lucene.index.BufferedUpdatesStream$FinishedSegments", "org.apache.lucene.index.BufferedUpdatesStream$FinishedSegments(org.apache.lucene.util.InfoStream)", "public org.apache.lucene.index.BufferedUpdatesStream$FinishedSegments(org.apache.lucene.util.InfoStream)"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream$FinishedSegments.void clear()", "public synchronized void clear()"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream$FinishedSegments.boolean stillRunning(long)", "public synchronized boolean stillRunning(long)"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream$FinishedSegments.long getCompletedDelGen()", "public synchronized long getCompletedDelGen()"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream$FinishedSegments.void finishedSegment(long)", "public synchronized void finishedSegment(long)"], ["org.apache.lucene.index.BufferedUpdatesStream$SegmentState", "org.apache.lucene.index.BufferedUpdatesStream$SegmentState(org.apache.lucene.index.IndexWriter$ReaderPool, org.apache.lucene.index.SegmentCommitInfo)", "public org.apache.lucene.index.BufferedUpdatesStream$SegmentState(org.apache.lucene.index.IndexWriter$ReaderPool, org.apache.lucene.index.SegmentCommitInfo) throws java.io.IOException"], ["void", "org.apache.lucene.index.BufferedUpdatesStream$SegmentState.finish(org.apache.lucene.index.IndexWriter$ReaderPool)", "public void finish(org.apache.lucene.index.IndexWriter$ReaderPool) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.BufferedUpdatesStream$SegmentState.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.BufferedUpdatesStream", "org.apache.lucene.index.BufferedUpdatesStream(org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.BufferedUpdatesStream(org.apache.lucene.index.IndexWriter)"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream.long push(org.apache.lucene.index.FrozenBufferedUpdates)", "public synchronized long push(org.apache.lucene.index.FrozenBufferedUpdates)"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream.int getPendingUpdatesCount()", "public synchronized int getPendingUpdatesCount()"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream.void clear()", "public synchronized void clear()"], ["boolean", "org.apache.lucene.index.BufferedUpdatesStream.any()", "public boolean any()"], ["int", "org.apache.lucene.index.BufferedUpdatesStream.numTerms()", "public int numTerms()"], ["long", "org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.index.BufferedUpdatesStream.waitApplyAll()", "public void waitApplyAll() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.BufferedUpdatesStream.stillRunning(long)", "public boolean stillRunning(long)"], ["void", "org.apache.lucene.index.BufferedUpdatesStream.finishedSegment(long)", "public void finishedSegment(long)"], ["synchronized", "org.apache.lucene.index.BufferedUpdatesStream.void finished(org.apache.lucene.index.FrozenBufferedUpdates)", "public synchronized void finished(org.apache.lucene.index.FrozenBufferedUpdates)"], ["long", "org.apache.lucene.index.BufferedUpdatesStream.getCompletedDelGen()", "public long getCompletedDelGen()"], ["void", "org.apache.lucene.index.BufferedUpdatesStream.waitApplyForMerge(java.util.List<org.apache.lucene.index.SegmentCommitInfo>)", "public void waitApplyForMerge(java.util.List<org.apache.lucene.index.SegmentCommitInfo>) throws java.io.IOException"], ["org.apache.lucene.index.BufferedUpdatesStream$SegmentState[]", "org.apache.lucene.index.BufferedUpdatesStream.openSegmentStates(org.apache.lucene.index.IndexWriter$ReaderPool, java.util.List<org.apache.lucene.index.SegmentCommitInfo>, java.util.Set<org.apache.lucene.index.SegmentCommitInfo>, long)", "public org.apache.lucene.index.BufferedUpdatesStream$SegmentState[] openSegmentStates(org.apache.lucene.index.IndexWriter$ReaderPool, java.util.List<org.apache.lucene.index.SegmentCommitInfo>, java.util.Set<org.apache.lucene.index.SegmentCommitInfo>, long) throws java.io.IOException"], ["org.apache.lucene.index.BufferedUpdatesStream$ApplyDeletesResult", "org.apache.lucene.index.BufferedUpdatesStream.closeSegmentStates(org.apache.lucene.index.IndexWriter$ReaderPool, org.apache.lucene.index.BufferedUpdatesStream$SegmentState[], boolean)", "public org.apache.lucene.index.BufferedUpdatesStream$ApplyDeletesResult closeSegmentStates(org.apache.lucene.index.IndexWriter$ReaderPool, org.apache.lucene.index.BufferedUpdatesStream$SegmentState[], boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.ByteSliceReader.init(org.apache.lucene.util.ByteBlockPool, int, int)", "public void init(org.apache.lucene.util.ByteBlockPool, int, int)"], ["boolean", "org.apache.lucene.index.ByteSliceReader.eof()", "public boolean eof()"], ["byte", "org.apache.lucene.index.ByteSliceReader.readByte()", "public byte readByte()"], ["long", "org.apache.lucene.index.ByteSliceReader.writeTo(org.apache.lucene.store.DataOutput)", "public long writeTo(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.index.ByteSliceReader.nextSlice()", "public void nextSlice()"], ["void", "org.apache.lucene.index.ByteSliceReader.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["org.apache.lucene.index.ByteSliceWriter", "org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.util.ByteBlockPool)", "public org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.util.ByteBlockPool)"], ["void", "org.apache.lucene.index.ByteSliceWriter.init(int)", "public void init(int)"], ["void", "org.apache.lucene.index.ByteSliceWriter.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.index.ByteSliceWriter.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["int", "org.apache.lucene.index.ByteSliceWriter.getAddress()", "public int getAddress()"], ["void", "org.apache.lucene.index.CheckIndex$ConstantRelationIntersectVisitor.visit(int)", "public void visit(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex$ConstantRelationIntersectVisitor.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.index.CheckIndex$ConstantRelationIntersectVisitor.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.index.CheckIndex$Options", "org.apache.lucene.index.CheckIndex$Options()", "public org.apache.lucene.index.CheckIndex$Options()"], ["java.lang.String", "org.apache.lucene.index.CheckIndex$Options.getDirImpl()", "public java.lang.String getDirImpl()"], ["java.lang.String", "org.apache.lucene.index.CheckIndex$Options.getIndexPath()", "public java.lang.String getIndexPath()"], ["void", "org.apache.lucene.index.CheckIndex$Options.setOut(java.io.PrintStream)", "public void setOut(java.io.PrintStream)"], ["org.apache.lucene.index.CheckIndex$VerifyPointsVisitor", "org.apache.lucene.index.CheckIndex$VerifyPointsVisitor(java.lang.String, int, org.apache.lucene.index.PointValues)", "public org.apache.lucene.index.CheckIndex$VerifyPointsVisitor(java.lang.String, int, org.apache.lucene.index.PointValues) throws java.io.IOException"], ["long", "org.apache.lucene.index.CheckIndex$VerifyPointsVisitor.getPointCountSeen()", "public long getPointCountSeen()"], ["long", "org.apache.lucene.index.CheckIndex$VerifyPointsVisitor.getDocCountSeen()", "public long getDocCountSeen()"], ["void", "org.apache.lucene.index.CheckIndex$VerifyPointsVisitor.visit(int)", "public void visit(int)"], ["void", "org.apache.lucene.index.CheckIndex$VerifyPointsVisitor.visit(int, byte[])", "public void visit(int, byte[])"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.index.CheckIndex$VerifyPointsVisitor.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.index.CheckIndex", "org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex", "org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory, org.apache.lucene.store.Lock)", "public org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory, org.apache.lucene.store.Lock) throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex.setCrossCheckTermVectors(boolean)", "public void setCrossCheckTermVectors(boolean)"], ["boolean", "org.apache.lucene.index.CheckIndex.getCrossCheckTermVectors()", "public boolean getCrossCheckTermVectors()"], ["void", "org.apache.lucene.index.CheckIndex.setFailFast(boolean)", "public void setFailFast(boolean)"], ["boolean", "org.apache.lucene.index.CheckIndex.getFailFast()", "public boolean getFailFast()"], ["boolean", "org.apache.lucene.index.CheckIndex.getChecksumsOnly()", "public boolean getChecksumsOnly()"], ["void", "org.apache.lucene.index.CheckIndex.setChecksumsOnly(boolean)", "public void setChecksumsOnly(boolean)"], ["void", "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream, boolean)", "public void setInfoStream(java.io.PrintStream, boolean)"], ["void", "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream)", "public void setInfoStream(java.io.PrintStream)"], ["org.apache.lucene.index.CheckIndex$Status", "org.apache.lucene.index.CheckIndex.checkIndex()", "public org.apache.lucene.index.CheckIndex$Status checkIndex() throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status", "org.apache.lucene.index.CheckIndex.checkIndex(java.util.List<java.lang.String>)", "public org.apache.lucene.index.CheckIndex$Status checkIndex(java.util.List<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$IndexSortStatus", "org.apache.lucene.index.CheckIndex.testSort(org.apache.lucene.index.CodecReader, org.apache.lucene.search.Sort, java.io.PrintStream, boolean)", "public static org.apache.lucene.index.CheckIndex$Status$IndexSortStatus testSort(org.apache.lucene.index.CodecReader, org.apache.lucene.search.Sort, java.io.PrintStream, boolean) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$LiveDocStatus", "org.apache.lucene.index.CheckIndex.testLiveDocs(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)", "public static org.apache.lucene.index.CheckIndex$Status$LiveDocStatus testLiveDocs(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$FieldInfoStatus", "org.apache.lucene.index.CheckIndex.testFieldInfos(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)", "public static org.apache.lucene.index.CheckIndex$Status$FieldInfoStatus testFieldInfos(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$FieldNormStatus", "org.apache.lucene.index.CheckIndex.testFieldNorms(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)", "public static org.apache.lucene.index.CheckIndex$Status$FieldNormStatus testFieldNorms(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$TermIndexStatus", "org.apache.lucene.index.CheckIndex.testPostings(org.apache.lucene.index.CodecReader, java.io.PrintStream, org.apache.lucene.util.Version)", "public static org.apache.lucene.index.CheckIndex$Status$TermIndexStatus testPostings(org.apache.lucene.index.CodecReader, java.io.PrintStream, org.apache.lucene.util.Version) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$TermIndexStatus", "org.apache.lucene.index.CheckIndex.testPostings(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean, boolean, org.apache.lucene.util.Version)", "public static org.apache.lucene.index.CheckIndex$Status$TermIndexStatus testPostings(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean, boolean, org.apache.lucene.util.Version) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$PointsStatus", "org.apache.lucene.index.CheckIndex.testPoints(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)", "public static org.apache.lucene.index.CheckIndex$Status$PointsStatus testPoints(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$StoredFieldStatus", "org.apache.lucene.index.CheckIndex.testStoredFields(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)", "public static org.apache.lucene.index.CheckIndex$Status$StoredFieldStatus testStoredFields(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$DocValuesStatus", "org.apache.lucene.index.CheckIndex.testDocValues(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)", "public static org.apache.lucene.index.CheckIndex$Status$DocValuesStatus testDocValues(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$TermVectorStatus", "org.apache.lucene.index.CheckIndex.testTermVectors(org.apache.lucene.index.CodecReader, java.io.PrintStream, org.apache.lucene.util.Version)", "public static org.apache.lucene.index.CheckIndex$Status$TermVectorStatus testTermVectors(org.apache.lucene.index.CodecReader, java.io.PrintStream, org.apache.lucene.util.Version) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$TermVectorStatus", "org.apache.lucene.index.CheckIndex.testTermVectors(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean, boolean, boolean, org.apache.lucene.util.Version)", "public static org.apache.lucene.index.CheckIndex$Status$TermVectorStatus testTermVectors(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean, boolean, boolean, org.apache.lucene.util.Version) throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex.exorciseIndex(org.apache.lucene.index.CheckIndex$Status)", "public void exorciseIndex(org.apache.lucene.index.CheckIndex$Status) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.CheckIndex.assertsOn()", "public static boolean assertsOn()"], ["void", "org.apache.lucene.index.CheckIndex.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException, java.lang.InterruptedException"], ["org.apache.lucene.index.CheckIndex$Options", "org.apache.lucene.index.CheckIndex.parseOptions(java.lang.String[])", "public static org.apache.lucene.index.CheckIndex$Options parseOptions(java.lang.String[])"], ["int", "org.apache.lucene.index.CheckIndex.doCheck(org.apache.lucene.index.CheckIndex$Options)", "public int doCheck(org.apache.lucene.index.CheckIndex$Options) throws java.io.IOException, java.lang.InterruptedException"], ["void", "org.apache.lucene.index.CodecReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public final void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.CodecReader.getTermVectors(int)", "public final org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.CodecReader.terms(java.lang.String)", "public final org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.CodecReader.getNumericDocValues(java.lang.String)", "public final org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.CodecReader.getBinaryDocValues(java.lang.String)", "public final org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.CodecReader.getSortedDocValues(java.lang.String)", "public final org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.CodecReader.getSortedNumericDocValues(java.lang.String)", "public final org.apache.lucene.index.SortedNumericDocValues getSortedNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.CodecReader.getSortedSetDocValues(java.lang.String)", "public final org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.CodecReader.getNormValues(java.lang.String)", "public final org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.index.CodecReader.getPointValues(java.lang.String)", "public final org.apache.lucene.index.PointValues getPointValues(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.index.CodecReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.index.CodecReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.index.CodecReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.CompositeReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.CompositeReaderContext", "org.apache.lucene.index.CompositeReader.getContext()", "public final org.apache.lucene.index.CompositeReaderContext getContext()"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.index.CompositeReader.getContext()", "public org.apache.lucene.index.IndexReaderContext getContext()"], ["org.apache.lucene.index.CompositeReaderContext$Builder", "org.apache.lucene.index.CompositeReaderContext$Builder(org.apache.lucene.index.CompositeReader)", "public org.apache.lucene.index.CompositeReaderContext$Builder(org.apache.lucene.index.CompositeReader)"], ["org.apache.lucene.index.CompositeReaderContext", "org.apache.lucene.index.CompositeReaderContext$Builder.build()", "public org.apache.lucene.index.CompositeReaderContext build()"], ["java.util.List<org.apache.lucene.index.LeafReaderContext>", "org.apache.lucene.index.CompositeReaderContext.leaves()", "public java.util.List<org.apache.lucene.index.LeafReaderContext> leaves() throws java.lang.UnsupportedOperationException"], ["java.util.List<org.apache.lucene.index.IndexReaderContext>", "org.apache.lucene.index.CompositeReaderContext.children()", "public java.util.List<org.apache.lucene.index.IndexReaderContext> children()"], ["org.apache.lucene.index.CompositeReader", "org.apache.lucene.index.CompositeReaderContext.reader()", "public org.apache.lucene.index.CompositeReader reader()"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.CompositeReaderContext.reader()", "public org.apache.lucene.index.IndexReader reader()"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.index.ConcurrentMergeScheduler$1.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge)", "public org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge)"], ["int", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.compareTo(org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread)", "public int compareTo(org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread)"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run()", "public void run()"], ["int", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.ConcurrentMergeScheduler", "org.apache.lucene.index.ConcurrentMergeScheduler()", "public org.apache.lucene.index.ConcurrentMergeScheduler()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void setMaxMergesAndThreads(int, int)", "public synchronized void setMaxMergesAndThreads(int, int)"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void setDefaultMaxMergesAndThreads(boolean)", "public synchronized void setDefaultMaxMergesAndThreads(boolean)"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void setForceMergeMBPerSec(double)", "public synchronized void setForceMergeMBPerSec(double)"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.double getForceMergeMBPerSec()", "public synchronized double getForceMergeMBPerSec()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void enableAutoIOThrottle()", "public synchronized void enableAutoIOThrottle()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void disableAutoIOThrottle()", "public synchronized void disableAutoIOThrottle()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.boolean getAutoIOThrottle()", "public synchronized boolean getAutoIOThrottle()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.double getIORateLimitMBPerSec()", "public synchronized double getIORateLimitMBPerSec()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.int getMaxThreadCount()", "public synchronized int getMaxThreadCount()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.int getMaxMergeCount()", "public synchronized int getMaxMergeCount()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.ConcurrentMergeScheduler.wrapForMerge(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)", "public org.apache.lucene.store.Directory wrapForMerge(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.close()", "public void close()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.sync()", "public void sync()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.int mergeThreadCount()", "public synchronized int mergeThreadCount()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean)", "public synchronized void merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.ConcurrentMergeScheduler.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataInput)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataInput)"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataOutput)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataOutput)"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataInput, java.lang.Throwable)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataInput, java.lang.Throwable)"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataOutput, java.lang.Throwable)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataOutput, java.lang.Throwable)"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String, java.lang.String)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String, java.lang.String)"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String, java.lang.String, java.lang.Throwable)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.apache.lucene.index.CorruptIndexException.getResourceDescription()", "public java.lang.String getResourceDescription()"], ["java.lang.String", "org.apache.lucene.index.CorruptIndexException.getOriginalMessage()", "public java.lang.String getOriginalMessage()"], ["org.apache.lucene.index.DefaultIndexingChain$PerField", "org.apache.lucene.index.DefaultIndexingChain$PerField(org.apache.lucene.index.DefaultIndexingChain, int, org.apache.lucene.index.FieldInfo, boolean)", "public org.apache.lucene.index.DefaultIndexingChain$PerField(org.apache.lucene.index.DefaultIndexingChain, int, org.apache.lucene.index.FieldInfo, boolean)"], ["int", "org.apache.lucene.index.DefaultIndexingChain$PerField.compareTo(org.apache.lucene.index.DefaultIndexingChain$PerField)", "public int compareTo(org.apache.lucene.index.DefaultIndexingChain$PerField)"], ["void", "org.apache.lucene.index.DefaultIndexingChain$PerField.finish()", "public void finish() throws java.io.IOException"], ["void", "org.apache.lucene.index.DefaultIndexingChain$PerField.invert(org.apache.lucene.index.IndexableField, boolean)", "public void invert(org.apache.lucene.index.IndexableField, boolean) throws java.io.IOException, org.apache.lucene.index.AbortingException"], ["int", "org.apache.lucene.index.DefaultIndexingChain$PerField.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.DefaultIndexingChain", "org.apache.lucene.index.DefaultIndexingChain(org.apache.lucene.index.DocumentsWriterPerThread)", "public org.apache.lucene.index.DefaultIndexingChain(org.apache.lucene.index.DocumentsWriterPerThread) throws java.io.IOException"], ["org.apache.lucene.index.Sorter$DocMap", "org.apache.lucene.index.DefaultIndexingChain.flush(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.index.Sorter$DocMap flush(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException, org.apache.lucene.index.AbortingException"], ["void", "org.apache.lucene.index.DefaultIndexingChain.abort()", "public void abort()"], ["void", "org.apache.lucene.index.DefaultIndexingChain.processDocument()", "public void processDocument() throws java.io.IOException, org.apache.lucene.index.AbortingException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.store.Directory)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexWriter)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexWriter, boolean, boolean)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexCommit)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader)", "public static org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexCommit)", "public static org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter)", "public static org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter, boolean)", "public static org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter, boolean) throws java.io.IOException"], ["java.util.List<org.apache.lucene.index.IndexCommit>", "org.apache.lucene.index.DirectoryReader.listCommits(org.apache.lucene.store.Directory)", "public static java.util.List<org.apache.lucene.index.IndexCommit> listCommits(org.apache.lucene.store.Directory) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader.indexExists(org.apache.lucene.store.Directory)", "public static boolean indexExists(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.DirectoryReader.directory()", "public final org.apache.lucene.store.Directory directory()"], ["void", "org.apache.lucene.index.DocIDMerger$SequentialDocIDMerger.reset()", "public void reset() throws java.io.IOException"], ["T", "org.apache.lucene.index.DocIDMerger$SequentialDocIDMerger.next()", "public T next() throws java.io.IOException"], ["void", "org.apache.lucene.index.DocIDMerger$SortedDocIDMerger.reset()", "public void reset() throws java.io.IOException"], ["T", "org.apache.lucene.index.DocIDMerger$SortedDocIDMerger.next()", "public T next() throws java.io.IOException"], ["org.apache.lucene.index.DocIDMerger$Sub", "org.apache.lucene.index.DocIDMerger$Sub(org.apache.lucene.index.MergeState$DocMap)", "public org.apache.lucene.index.DocIDMerger$Sub(org.apache.lucene.index.MergeState$DocMap)"], ["<T extends org.apache.lucene.index.DocIDMerger$Sub> org.apache.lucene.index.DocIDMerger<T>", "org.apache.lucene.index.DocIDMerger.of(java.util.List<T>, int, boolean)", "public static <T extends org.apache.lucene.index.DocIDMerger$Sub> org.apache.lucene.index.DocIDMerger<T> of(java.util.List<T>, int, boolean) throws java.io.IOException"], ["<T extends org.apache.lucene.index.DocIDMerger$Sub> org.apache.lucene.index.DocIDMerger<T>", "org.apache.lucene.index.DocIDMerger.of(java.util.List<T>, boolean)", "public static <T extends org.apache.lucene.index.DocIDMerger$Sub> org.apache.lucene.index.DocIDMerger<T> of(java.util.List<T>, boolean) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValues$1.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.DocValues$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValues$1.docID()", "public int docID()"], ["int", "org.apache.lucene.index.DocValues$1.nextDoc()", "public int nextDoc()"], ["long", "org.apache.lucene.index.DocValues$1.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$1.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["int", "org.apache.lucene.index.DocValues$2.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.DocValues$2.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValues$2.docID()", "public int docID()"], ["int", "org.apache.lucene.index.DocValues$2.nextDoc()", "public int nextDoc()"], ["long", "org.apache.lucene.index.DocValues$2.cost()", "public long cost()"], ["long", "org.apache.lucene.index.DocValues$2.longValue()", "public long longValue()"], ["int", "org.apache.lucene.index.DocValues$3.getOrd(int)", "public int getOrd(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$3.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int)"], ["int", "org.apache.lucene.index.DocValues$3.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.index.DocValues$4.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.DocValues$4.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValues$4.docID()", "public int docID()"], ["int", "org.apache.lucene.index.DocValues$4.nextDoc()", "public int nextDoc()"], ["long", "org.apache.lucene.index.DocValues$4.cost()", "public long cost()"], ["int", "org.apache.lucene.index.DocValues$4.ordValue()", "public int ordValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$4.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int)"], ["int", "org.apache.lucene.index.DocValues$4.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.index.DocValues$5.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.DocValues$5.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValues$5.docID()", "public int docID()"], ["int", "org.apache.lucene.index.DocValues$5.nextDoc()", "public int nextDoc()"], ["long", "org.apache.lucene.index.DocValues$5.cost()", "public long cost()"], ["int", "org.apache.lucene.index.DocValues$5.docValueCount()", "public int docValueCount()"], ["long", "org.apache.lucene.index.DocValues$5.nextValue()", "public long nextValue()"], ["int", "org.apache.lucene.index.DocValues$6.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.DocValues$6.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValues$6.docID()", "public int docID()"], ["int", "org.apache.lucene.index.DocValues$6.nextDoc()", "public int nextDoc()"], ["long", "org.apache.lucene.index.DocValues$6.cost()", "public long cost()"], ["long", "org.apache.lucene.index.DocValues$6.nextOrd()", "public long nextOrd()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$6.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long)"], ["long", "org.apache.lucene.index.DocValues$6.getValueCount()", "public long getValueCount()"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.DocValues.emptyBinary()", "public static final org.apache.lucene.index.BinaryDocValues emptyBinary()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.DocValues.emptyNumeric()", "public static final org.apache.lucene.index.NumericDocValues emptyNumeric()"], ["org.apache.lucene.index.LegacySortedDocValues", "org.apache.lucene.index.DocValues.emptyLegacySorted()", "public static final org.apache.lucene.index.LegacySortedDocValues emptyLegacySorted()"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.DocValues.emptySorted()", "public static final org.apache.lucene.index.SortedDocValues emptySorted()"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.DocValues.emptySortedNumeric(int)", "public static final org.apache.lucene.index.SortedNumericDocValues emptySortedNumeric(int)"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.DocValues.emptySortedSet()", "public static final org.apache.lucene.index.SortedSetDocValues emptySortedSet()"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.DocValues.singleton(org.apache.lucene.index.SortedDocValues)", "public static org.apache.lucene.index.SortedSetDocValues singleton(org.apache.lucene.index.SortedDocValues)"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.DocValues.unwrapSingleton(org.apache.lucene.index.SortedSetDocValues)", "public static org.apache.lucene.index.SortedDocValues unwrapSingleton(org.apache.lucene.index.SortedSetDocValues)"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.DocValues.unwrapSingleton(org.apache.lucene.index.SortedNumericDocValues)", "public static org.apache.lucene.index.NumericDocValues unwrapSingleton(org.apache.lucene.index.SortedNumericDocValues)"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.DocValues.singleton(org.apache.lucene.index.NumericDocValues)", "public static org.apache.lucene.index.SortedNumericDocValues singleton(org.apache.lucene.index.NumericDocValues)"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.DocValues.getNumeric(org.apache.lucene.index.LeafReader, java.lang.String)", "public static org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.LeafReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.DocValues.getBinary(org.apache.lucene.index.LeafReader, java.lang.String)", "public static org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.LeafReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.DocValues.getSorted(org.apache.lucene.index.LeafReader, java.lang.String)", "public static org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.LeafReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.DocValues.getSortedNumeric(org.apache.lucene.index.LeafReader, java.lang.String)", "public static org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.LeafReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.DocValues.getSortedSet(org.apache.lucene.index.LeafReader, java.lang.String)", "public static org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.LeafReader, java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValuesFieldUpdates$2.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.DocValuesFieldUpdates$2.doc()", "public int doc()"], ["java.lang.Object", "org.apache.lucene.index.DocValuesFieldUpdates$2.value()", "public java.lang.Object value()"], ["long", "org.apache.lucene.index.DocValuesFieldUpdates$2.delGen()", "public long delGen()"], ["org.apache.lucene.index.DocValuesFieldUpdates$Iterator", "org.apache.lucene.index.DocValuesFieldUpdates.mergedIterator(org.apache.lucene.index.DocValuesFieldUpdates$Iterator[])", "public static org.apache.lucene.index.DocValuesFieldUpdates$Iterator mergedIterator(org.apache.lucene.index.DocValuesFieldUpdates$Iterator[])"], ["boolean", "org.apache.lucene.index.DocValuesFieldUpdates.getFinished()", "public boolean getFinished()"], ["org.apache.lucene.index.DocValuesType[]", "org.apache.lucene.index.DocValuesType.values()", "public static org.apache.lucene.index.DocValuesType[] values()"], ["org.apache.lucene.index.DocValuesType", "org.apache.lucene.index.DocValuesType.valueOf(java.lang.String)", "public static org.apache.lucene.index.DocValuesType valueOf(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.DocValuesUpdate.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.index.DocsWithFieldSet.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.index.DocsWithFieldSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["void", "org.apache.lucene.index.DocumentsWriter$ApplyDeletesEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)", "public void process(org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.index.DocumentsWriter$DeleteNewFilesEvent", "org.apache.lucene.index.DocumentsWriter$DeleteNewFilesEvent(java.util.Collection<java.lang.String>)", "public org.apache.lucene.index.DocumentsWriter$DeleteNewFilesEvent(java.util.Collection<java.lang.String>)"], ["void", "org.apache.lucene.index.DocumentsWriter$DeleteNewFilesEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)", "public void process(org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.index.DocumentsWriter$FlushFailedEvent", "org.apache.lucene.index.DocumentsWriter$FlushFailedEvent(org.apache.lucene.index.SegmentInfo)", "public org.apache.lucene.index.DocumentsWriter$FlushFailedEvent(org.apache.lucene.index.SegmentInfo)"], ["void", "org.apache.lucene.index.DocumentsWriter$FlushFailedEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)", "public void process(org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocumentsWriter$ForcedPurgeEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)", "public void process(org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocumentsWriter$ResolveUpdatesEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)", "public void process(org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["long", "org.apache.lucene.index.DocumentsWriter.getMaxCompletedSequenceNumber()", "public long getMaxCompletedSequenceNumber()"], ["int", "org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize()", "public int getBufferedDeleteTermsSize()"], ["int", "org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms()", "public int getNumBufferedDeleteTerms()"], ["boolean", "org.apache.lucene.index.DocumentsWriter.anyDeletions()", "public boolean anyDeletions()"], ["void", "org.apache.lucene.index.DocumentsWriter.close()", "public void close()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.DocumentsWriter.getIndexWriterConfig()", "public org.apache.lucene.index.LiveIndexWriterConfig getIndexWriterConfig()"], ["long", "org.apache.lucene.index.DocumentsWriter.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Queue<org.apache.lucene.index.IndexWriter$Event>", "org.apache.lucene.index.DocumentsWriter.eventQueue()", "public java.util.Queue<org.apache.lucene.index.IndexWriter$Event> eventQueue()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterDeleteQueue$DocValuesUpdatesNode.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermArrayNode.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermNode.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.DocumentsWriterDeleteQueue.numGlobalTermDeletes()", "public int numGlobalTermDeletes()"], ["int", "org.apache.lucene.index.DocumentsWriterDeleteQueue.getBufferedUpdatesTermsSize()", "public int getBufferedUpdatesTermsSize()"], ["long", "org.apache.lucene.index.DocumentsWriterDeleteQueue.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterDeleteQueue.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.index.DocumentsWriterDeleteQueue.getNextSequenceNumber()", "public long getNextSequenceNumber()"], ["long", "org.apache.lucene.index.DocumentsWriterDeleteQueue.getLastSequenceNumber()", "public long getLastSequenceNumber()"], ["void", "org.apache.lucene.index.DocumentsWriterDeleteQueue.skipSequenceNumbers(long)", "public void skipSequenceNumbers(long)"], ["boolean", "org.apache.lucene.index.DocumentsWriterFlushControl$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState", "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()", "public org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState next()"], ["void", "org.apache.lucene.index.DocumentsWriterFlushControl$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()", "public java.lang.Object next()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.long activeBytes()", "public synchronized long activeBytes()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.long flushBytes()", "public synchronized long flushBytes()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.long netBytes()", "public synchronized long netBytes()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.void waitForFlush()", "public synchronized void waitForFlush()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.void setFlushPending(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public synchronized void setFlushPending(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterFlushControl.toString()", "public java.lang.String toString()"], ["java.util.Iterator<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState>", "org.apache.lucene.index.DocumentsWriterFlushControl.allActiveThreadStates()", "public java.util.Iterator<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState> allActiveThreadStates()"], ["long", "org.apache.lucene.index.DocumentsWriterFlushControl.getDeleteBytesUsed()", "public long getDeleteBytesUsed()"], ["long", "org.apache.lucene.index.DocumentsWriterFlushControl.ramBytesUsed()", "public long ramBytesUsed()"], ["boolean", "org.apache.lucene.index.DocumentsWriterFlushControl.getAndResetApplyAllDeletes()", "public boolean getAndResetApplyAllDeletes()"], ["void", "org.apache.lucene.index.DocumentsWriterFlushControl.setApplyAllDeletes()", "public void setApplyAllDeletes()"], ["org.apache.lucene.util.InfoStream", "org.apache.lucene.index.DocumentsWriterFlushControl.getInfoStream()", "public org.apache.lucene.util.InfoStream getInfoStream()"], ["int", "org.apache.lucene.index.DocumentsWriterFlushQueue.getTicketCount()", "public int getTicketCount()"], ["void", "org.apache.lucene.index.DocumentsWriterPerThread$DocState.testPoint(java.lang.String)", "public void testPoint(java.lang.String)"], ["void", "org.apache.lucene.index.DocumentsWriterPerThread$DocState.clear()", "public void clear()"], ["org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator", "org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator(org.apache.lucene.util.Counter)", "public org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator(org.apache.lucene.util.Counter)"], ["int[]", "org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator.getIntBlock()", "public int[] getIntBlock()"], ["void", "org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator.recycleIntBlocks(int[][], int, int)", "public void recycleIntBlocks(int[][], int, int)"], ["org.apache.lucene.index.DocumentsWriterPerThread", "org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.index.IndexWriter, java.lang.String, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, org.apache.lucene.index.LiveIndexWriterConfig, org.apache.lucene.util.InfoStream, org.apache.lucene.index.DocumentsWriterDeleteQueue, org.apache.lucene.index.FieldInfos$Builder, java.util.concurrent.atomic.AtomicLong, boolean)", "public org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.index.IndexWriter, java.lang.String, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, org.apache.lucene.index.LiveIndexWriterConfig, org.apache.lucene.util.InfoStream, org.apache.lucene.index.DocumentsWriterDeleteQueue, org.apache.lucene.index.FieldInfos$Builder, java.util.concurrent.atomic.AtomicLong, boolean) throws java.io.IOException"], ["org.apache.lucene.index.FieldInfos$Builder", "org.apache.lucene.index.DocumentsWriterPerThread.getFieldInfosBuilder()", "public org.apache.lucene.index.FieldInfos$Builder getFieldInfosBuilder()"], ["int", "org.apache.lucene.index.DocumentsWriterPerThread.getIndexCreatedVersionMajor()", "public int getIndexCreatedVersionMajor()"], ["long", "org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)", "public long updateDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term) throws java.io.IOException, org.apache.lucene.index.AbortingException"], ["long", "org.apache.lucene.index.DocumentsWriterPerThread.updateDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)", "public long updateDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term) throws java.io.IOException, org.apache.lucene.index.AbortingException"], ["int", "org.apache.lucene.index.DocumentsWriterPerThread.numDeleteTerms()", "public int numDeleteTerms()"], ["int", "org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM()", "public int getNumDocsInRAM()"], ["java.util.Set<java.lang.String>", "org.apache.lucene.index.DocumentsWriterPerThread.pendingFilesToDelete()", "public java.util.Set<java.lang.String> pendingFilesToDelete()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterPerThread.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getBytesUsedPerThread()", "public long getBytesUsedPerThread()"], ["org.apache.lucene.index.DocumentsWriterPerThread", "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getDocumentsWriterPerThread()", "public org.apache.lucene.index.DocumentsWriterPerThread getDocumentsWriterPerThread()"], ["boolean", "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.isFlushPending()", "public boolean isFlushPending()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.EmptyDocValuesProducer.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.EmptyDocValuesProducer.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.EmptyDocValuesProducer.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.EmptyDocValuesProducer.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.EmptyDocValuesProducer.getSortedSet(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.index.EmptyDocValuesProducer.checkIntegrity()", "public void checkIntegrity()"], ["void", "org.apache.lucene.index.EmptyDocValuesProducer.close()", "public void close()"], ["long", "org.apache.lucene.index.EmptyDocValuesProducer.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader", "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader(org.apache.lucene.index.LeafReader, org.apache.lucene.index.QueryTimeout)", "public org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader(org.apache.lucene.index.LeafReader, org.apache.lucene.index.QueryTimeout)"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader.getCoreCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getCoreCacheHelper()"], ["org.apache.lucene.index.ExitableDirectoryReader$ExitableSubReaderWrapper", "org.apache.lucene.index.ExitableDirectoryReader$ExitableSubReaderWrapper(org.apache.lucene.index.QueryTimeout)", "public org.apache.lucene.index.ExitableDirectoryReader$ExitableSubReaderWrapper(org.apache.lucene.index.QueryTimeout)"], ["org.apache.lucene.index.LeafReader", "org.apache.lucene.index.ExitableDirectoryReader$ExitableSubReaderWrapper.wrap(org.apache.lucene.index.LeafReader)", "public org.apache.lucene.index.LeafReader wrap(org.apache.lucene.index.LeafReader)"], ["org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms", "org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms(org.apache.lucene.index.Terms, org.apache.lucene.index.QueryTimeout)", "public org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms(org.apache.lucene.index.Terms, org.apache.lucene.index.QueryTimeout)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum", "org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.index.QueryTimeout)", "public org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.index.QueryTimeout)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.index.ExitableDirectoryReader", "org.apache.lucene.index.ExitableDirectoryReader(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.QueryTimeout)", "public org.apache.lucene.index.ExitableDirectoryReader(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.QueryTimeout) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.ExitableDirectoryReader.wrap(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.QueryTimeout)", "public static org.apache.lucene.index.DirectoryReader wrap(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.QueryTimeout) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.ExitableDirectoryReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["java.lang.String", "org.apache.lucene.index.ExitableDirectoryReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfo(java.lang.String, int, boolean, boolean, boolean, org.apache.lucene.index.IndexOptions, org.apache.lucene.index.DocValuesType, long, java.util.Map<java.lang.String, java.lang.String>, int, int)", "public org.apache.lucene.index.FieldInfo(java.lang.String, int, boolean, boolean, boolean, org.apache.lucene.index.IndexOptions, org.apache.lucene.index.DocValuesType, long, java.util.Map<java.lang.String, java.lang.String>, int, int)"], ["boolean", "org.apache.lucene.index.FieldInfo.checkConsistency()", "public boolean checkConsistency()"], ["void", "org.apache.lucene.index.FieldInfo.setPointDimensions(int, int)", "public void setPointDimensions(int, int)"], ["int", "org.apache.lucene.index.FieldInfo.getPointDimensionCount()", "public int getPointDimensionCount()"], ["int", "org.apache.lucene.index.FieldInfo.getPointNumBytes()", "public int getPointNumBytes()"], ["void", "org.apache.lucene.index.FieldInfo.setDocValuesType(org.apache.lucene.index.DocValuesType)", "public void setDocValuesType(org.apache.lucene.index.DocValuesType)"], ["org.apache.lucene.index.IndexOptions", "org.apache.lucene.index.FieldInfo.getIndexOptions()", "public org.apache.lucene.index.IndexOptions getIndexOptions()"], ["void", "org.apache.lucene.index.FieldInfo.setIndexOptions(org.apache.lucene.index.IndexOptions)", "public void setIndexOptions(org.apache.lucene.index.IndexOptions)"], ["org.apache.lucene.index.DocValuesType", "org.apache.lucene.index.FieldInfo.getDocValuesType()", "public org.apache.lucene.index.DocValuesType getDocValuesType()"], ["long", "org.apache.lucene.index.FieldInfo.getDocValuesGen()", "public long getDocValuesGen()"], ["boolean", "org.apache.lucene.index.FieldInfo.omitsNorms()", "public boolean omitsNorms()"], ["void", "org.apache.lucene.index.FieldInfo.setOmitsNorms()", "public void setOmitsNorms()"], ["boolean", "org.apache.lucene.index.FieldInfo.hasNorms()", "public boolean hasNorms()"], ["boolean", "org.apache.lucene.index.FieldInfo.hasPayloads()", "public boolean hasPayloads()"], ["boolean", "org.apache.lucene.index.FieldInfo.hasVectors()", "public boolean hasVectors()"], ["java.lang.String", "org.apache.lucene.index.FieldInfo.getAttribute(java.lang.String)", "public java.lang.String getAttribute(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.FieldInfo.putAttribute(java.lang.String, java.lang.String)", "public java.lang.String putAttribute(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.FieldInfo.attributes()", "public java.util.Map<java.lang.String, java.lang.String> attributes()"], ["void", "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfos)", "public void add(org.apache.lucene.index.FieldInfos)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos$Builder.getOrAdd(java.lang.String)", "public org.apache.lucene.index.FieldInfo getOrAdd(java.lang.String)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.FieldInfo add(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos$Builder.fieldInfo(java.lang.String)", "public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)"], ["org.apache.lucene.index.FieldInfos$FieldDimensions", "org.apache.lucene.index.FieldInfos$FieldDimensions(int, int)", "public org.apache.lucene.index.FieldInfos$FieldDimensions(int, int)"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.FieldInfos(org.apache.lucene.index.FieldInfo[])", "public org.apache.lucene.index.FieldInfos(org.apache.lucene.index.FieldInfo[])"], ["boolean", "org.apache.lucene.index.FieldInfos.hasFreq()", "public boolean hasFreq()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasProx()", "public boolean hasProx()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasPayloads()", "public boolean hasPayloads()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasVectors()", "public boolean hasVectors()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasNorms()", "public boolean hasNorms()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasDocValues()", "public boolean hasDocValues()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasPointValues()", "public boolean hasPointValues()"], ["int", "org.apache.lucene.index.FieldInfos.size()", "public int size()"], ["java.util.Iterator<org.apache.lucene.index.FieldInfo>", "org.apache.lucene.index.FieldInfos.iterator()", "public java.util.Iterator<org.apache.lucene.index.FieldInfo> iterator()"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos.fieldInfo(java.lang.String)", "public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos.fieldInfo(int)", "public org.apache.lucene.index.FieldInfo fieldInfo(int)"], ["org.apache.lucene.index.FieldInvertState", "org.apache.lucene.index.FieldInvertState(int, java.lang.String)", "public org.apache.lucene.index.FieldInvertState(int, java.lang.String)"], ["org.apache.lucene.index.FieldInvertState", "org.apache.lucene.index.FieldInvertState(int, java.lang.String, int, int, int, int)", "public org.apache.lucene.index.FieldInvertState(int, java.lang.String, int, int, int, int)"], ["int", "org.apache.lucene.index.FieldInvertState.getPosition()", "public int getPosition()"], ["int", "org.apache.lucene.index.FieldInvertState.getLength()", "public int getLength()"], ["void", "org.apache.lucene.index.FieldInvertState.setLength(int)", "public void setLength(int)"], ["int", "org.apache.lucene.index.FieldInvertState.getNumOverlap()", "public int getNumOverlap()"], ["void", "org.apache.lucene.index.FieldInvertState.setNumOverlap(int)", "public void setNumOverlap(int)"], ["int", "org.apache.lucene.index.FieldInvertState.getOffset()", "public int getOffset()"], ["int", "org.apache.lucene.index.FieldInvertState.getMaxTermFrequency()", "public int getMaxTermFrequency()"], ["int", "org.apache.lucene.index.FieldInvertState.getUniqueTermCount()", "public int getUniqueTermCount()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FieldInvertState.getAttributeSource()", "public org.apache.lucene.util.AttributeSource getAttributeSource()"], ["java.lang.String", "org.apache.lucene.index.FieldInvertState.getName()", "public java.lang.String getName()"], ["int", "org.apache.lucene.index.FieldInvertState.getIndexCreatedVersionMajor()", "public int getIndexCreatedVersionMajor()"], ["int", "org.apache.lucene.index.FilterBinaryDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.FilterBinaryDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterBinaryDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterBinaryDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterBinaryDocValues.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilterBinaryDocValues.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["org.apache.lucene.index.FilterCodecReader", "org.apache.lucene.index.FilterCodecReader(org.apache.lucene.index.CodecReader)", "public org.apache.lucene.index.FilterCodecReader(org.apache.lucene.index.CodecReader)"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.index.FilterCodecReader.getFieldsReader()", "public org.apache.lucene.codecs.StoredFieldsReader getFieldsReader()"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.index.FilterCodecReader.getTermVectorsReader()", "public org.apache.lucene.codecs.TermVectorsReader getTermVectorsReader()"], ["org.apache.lucene.codecs.NormsProducer", "org.apache.lucene.index.FilterCodecReader.getNormsReader()", "public org.apache.lucene.codecs.NormsProducer getNormsReader()"], ["org.apache.lucene.codecs.DocValuesProducer", "org.apache.lucene.index.FilterCodecReader.getDocValuesReader()", "public org.apache.lucene.codecs.DocValuesProducer getDocValuesReader()"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.index.FilterCodecReader.getPostingsReader()", "public org.apache.lucene.codecs.FieldsProducer getPostingsReader()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.FilterCodecReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.FilterCodecReader.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.codecs.PointsReader", "org.apache.lucene.index.FilterCodecReader.getPointsReader()", "public org.apache.lucene.codecs.PointsReader getPointsReader()"], ["int", "org.apache.lucene.index.FilterCodecReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.FilterCodecReader.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.index.LeafMetaData", "org.apache.lucene.index.FilterCodecReader.getMetaData()", "public org.apache.lucene.index.LeafMetaData getMetaData()"], ["long", "org.apache.lucene.index.FilterCodecReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.index.FilterCodecReader.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.index.FilterCodecReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper", "org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper()", "public org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper()"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.FilterDirectoryReader.unwrap(org.apache.lucene.index.DirectoryReader)", "public static org.apache.lucene.index.DirectoryReader unwrap(org.apache.lucene.index.DirectoryReader)"], ["org.apache.lucene.index.FilterDirectoryReader", "org.apache.lucene.index.FilterDirectoryReader(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper)", "public org.apache.lucene.index.FilterDirectoryReader(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper) throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterDirectoryReader.getVersion()", "public long getVersion()"], ["boolean", "org.apache.lucene.index.FilterDirectoryReader.isCurrent()", "public boolean isCurrent() throws java.io.IOException"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.FilterDirectoryReader.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit() throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.FilterDirectoryReader.getDelegate()", "public org.apache.lucene.index.DirectoryReader getDelegate()"], ["org.apache.lucene.index.FilterLeafReader$FilterFields", "org.apache.lucene.index.FilterLeafReader$FilterFields(org.apache.lucene.index.Fields)", "public org.apache.lucene.index.FilterLeafReader$FilterFields(org.apache.lucene.index.Fields)"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.FilterLeafReader$FilterFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.FilterLeafReader$FilterFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterFields.size()", "public int size()"], ["org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum(org.apache.lucene.index.PostingsEnum)", "public org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum(org.apache.lucene.index.PostingsEnum)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.cost()", "public long cost()"], ["org.apache.lucene.index.FilterLeafReader$FilterTerms", "org.apache.lucene.index.FilterLeafReader$FilterTerms(org.apache.lucene.index.Terms)", "public org.apache.lucene.index.FilterLeafReader$FilterTerms(org.apache.lucene.index.Terms)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.FilterLeafReader$FilterTerms.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterLeafReader$FilterTerms.size()", "public long size() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterLeafReader$FilterTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterLeafReader$FilterTerms.getSumDocFreq()", "public long getSumDocFreq() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterTerms.getDocCount()", "public int getDocCount() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasFreqs()", "public boolean hasFreqs()"], ["boolean", "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasPayloads()", "public boolean hasPayloads()"], ["java.lang.Object", "org.apache.lucene.index.FilterLeafReader$FilterTerms.getStats()", "public java.lang.Object getStats() throws java.io.IOException"], ["org.apache.lucene.index.FilterLeafReader$FilterTermsEnum", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.FilterLeafReader$FilterTermsEnum(org.apache.lucene.index.TermsEnum)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.LeafReader", "org.apache.lucene.index.FilterLeafReader.unwrap(org.apache.lucene.index.LeafReader)", "public static org.apache.lucene.index.LeafReader unwrap(org.apache.lucene.index.LeafReader)"], ["org.apache.lucene.index.FilterLeafReader", "org.apache.lucene.index.FilterLeafReader(org.apache.lucene.index.LeafReader)", "public org.apache.lucene.index.FilterLeafReader(org.apache.lucene.index.LeafReader)"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.FilterLeafReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.FilterLeafReader.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.index.FilterLeafReader.getPointValues(java.lang.String)", "public org.apache.lucene.index.PointValues getPointValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.FilterLeafReader.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterLeafReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.FilterLeafReader.maxDoc()", "public int maxDoc()"], ["void", "org.apache.lucene.index.FilterLeafReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.FilterLeafReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.FilterLeafReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.FilterLeafReader.getNumericDocValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.FilterLeafReader.getBinaryDocValues(java.lang.String)", "public org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.FilterLeafReader.getSortedDocValues(java.lang.String)", "public org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.FilterLeafReader.getSortedNumericDocValues(java.lang.String)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.FilterLeafReader.getSortedSetDocValues(java.lang.String)", "public org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.FilterLeafReader.getNormValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.LeafMetaData", "org.apache.lucene.index.FilterLeafReader.getMetaData()", "public org.apache.lucene.index.LeafMetaData getMetaData()"], ["void", "org.apache.lucene.index.FilterLeafReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["org.apache.lucene.index.LeafReader", "org.apache.lucene.index.FilterLeafReader.getDelegate()", "public org.apache.lucene.index.LeafReader getDelegate()"], ["int", "org.apache.lucene.index.FilterNumericDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.FilterNumericDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterNumericDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterNumericDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterNumericDocValues.cost()", "public long cost()"], ["long", "org.apache.lucene.index.FilterNumericDocValues.longValue()", "public long longValue() throws java.io.IOException"], ["org.apache.lucene.index.FilteredTermsEnum$AcceptStatus[]", "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.values()", "public static org.apache.lucene.index.FilteredTermsEnum$AcceptStatus[] values()"], ["org.apache.lucene.index.FilteredTermsEnum$AcceptStatus", "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.valueOf(java.lang.String)", "public static org.apache.lucene.index.FilteredTermsEnum$AcceptStatus valueOf(java.lang.String)"], ["org.apache.lucene.index.FilteredTermsEnum", "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum)"], ["org.apache.lucene.index.FilteredTermsEnum", "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum, boolean)", "public org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum, boolean)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FilteredTermsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilteredTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilteredTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilteredTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.FilteredTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilteredTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["long", "org.apache.lucene.index.FilteredTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.FilteredTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.FilteredTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilteredTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["void", "org.apache.lucene.index.FlushByRamOrCountsPolicy.onDelete(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public void onDelete(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["void", "org.apache.lucene.index.FlushByRamOrCountsPolicy.onInsert(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public void onInsert(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["void", "org.apache.lucene.index.FlushPolicy.onUpdate(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public void onUpdate(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField, org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray)", "public org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField, org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray)"], ["void", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.reset(int)", "public void reset(int)"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.freq()", "public int freq()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.advance(int)", "public int advance(int)"], ["long", "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.cost()", "public long cost()"], ["org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField, org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray)", "public org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField, org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray)"], ["void", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.reset(int)", "public void reset(int)"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.freq()", "public int freq()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.advance(int)", "public int advance(int)"], ["long", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.cost()", "public long cost()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.endOffset()", "public int endOffset()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["org.apache.lucene.index.FreqProxFields$FreqProxTerms", "org.apache.lucene.index.FreqProxFields$FreqProxTerms(org.apache.lucene.index.FreqProxTermsWriterPerField)", "public org.apache.lucene.index.FreqProxFields$FreqProxTerms(org.apache.lucene.index.FreqProxTermsWriterPerField)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.iterator()", "public org.apache.lucene.index.TermsEnum iterator()"], ["long", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.size()", "public long size()"], ["long", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq()"], ["long", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.getSumDocFreq()", "public long getSumDocFreq()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.getDocCount()", "public int getDocCount()"], ["boolean", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasFreqs()", "public boolean hasFreqs()"], ["boolean", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasPayloads()", "public boolean hasPayloads()"], ["void", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum$1.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField)", "public org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField)"], ["void", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.reset()", "public void reset()"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.seekExact(long)", "public void seekExact(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.next()", "public org.apache.lucene.util.BytesRef next()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["long", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.ord()", "public long ord()"], ["int", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int)"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.index.FreqProxFields", "org.apache.lucene.index.FreqProxFields(java.util.List<org.apache.lucene.index.FreqProxTermsWriterPerField>)", "public org.apache.lucene.index.FreqProxFields(java.util.List<org.apache.lucene.index.FreqProxTermsWriterPerField>)"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.FreqProxFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.FreqProxFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.FreqProxFields.size()", "public int size()"], ["org.apache.lucene.index.FreqProxTermsWriter", "org.apache.lucene.index.FreqProxTermsWriter(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.TermsHash)", "public org.apache.lucene.index.FreqProxTermsWriter(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.TermsHash)"], ["void", "org.apache.lucene.index.FreqProxTermsWriter.flush(java.util.Map<java.lang.String, org.apache.lucene.index.TermsHashPerField>, org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap)", "public void flush(java.util.Map<java.lang.String, org.apache.lucene.index.TermsHashPerField>, org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap) throws java.io.IOException"], ["org.apache.lucene.index.TermsHashPerField", "org.apache.lucene.index.FreqProxTermsWriter.addField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashPerField addField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray", "org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray(int, boolean, boolean, boolean)", "public org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray(int, boolean, boolean, boolean)"], ["org.apache.lucene.index.FreqProxTermsWriterPerField", "org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermsHash, org.apache.lucene.index.FieldInfo, org.apache.lucene.index.TermsHashPerField)", "public org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermsHash, org.apache.lucene.index.FieldInfo, org.apache.lucene.index.TermsHashPerField)"], ["void", "org.apache.lucene.index.FreqProxTermsWriterPerField.newPostingsArray()", "public void newPostingsArray()"], ["org.apache.lucene.index.FrozenBufferedUpdates", "org.apache.lucene.index.FrozenBufferedUpdates(org.apache.lucene.util.InfoStream, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.index.SegmentCommitInfo)", "public org.apache.lucene.index.FrozenBufferedUpdates(org.apache.lucene.util.InfoStream, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.index.SegmentCommitInfo) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.FrozenBufferedUpdates.void apply(org.apache.lucene.index.IndexWriter)", "public synchronized void apply(org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["void", "org.apache.lucene.index.FrozenBufferedUpdates.setDelGen(long)", "public void setDelGen(long)"], ["long", "org.apache.lucene.index.FrozenBufferedUpdates.delGen()", "public long delGen()"], ["java.lang.String", "org.apache.lucene.index.FrozenBufferedUpdates.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.index.IndexCommit.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.IndexCommit.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.index.IndexCommit.compareTo(org.apache.lucene.index.IndexCommit)", "public int compareTo(org.apache.lucene.index.IndexCommit)"], ["int", "org.apache.lucene.index.IndexCommit.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.IndexFileDeleter$CommitPoint", "org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentCount()", "public int getSegmentCount()"], ["java.lang.String", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["long", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getGeneration()", "public long getGeneration()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["void", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.delete()", "public void delete()"], ["boolean", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.isDeleted()", "public boolean isDeleted()"], ["int", "org.apache.lucene.index.IndexFileDeleter$RefCount.IncRef()", "public int IncRef()"], ["int", "org.apache.lucene.index.IndexFileDeleter$RefCount.DecRef()", "public int DecRef()"], ["org.apache.lucene.index.IndexFileDeleter", "org.apache.lucene.index.IndexFileDeleter(java.lang.String[], org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, org.apache.lucene.util.InfoStream, org.apache.lucene.index.IndexWriter, boolean, boolean)", "public org.apache.lucene.index.IndexFileDeleter(java.lang.String[], org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, org.apache.lucene.util.InfoStream, org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.IndexFileDeleter.getLastSegmentInfos()", "public org.apache.lucene.index.SegmentInfos getLastSegmentInfos()"], ["void", "org.apache.lucene.index.IndexFileDeleter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.checkpoint(org.apache.lucene.index.SegmentInfos, boolean)", "public void checkpoint(org.apache.lucene.index.SegmentInfos, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexFileDeleter.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.fileNameFromGeneration(java.lang.String, java.lang.String, long)", "public static java.lang.String fileNameFromGeneration(java.lang.String, java.lang.String, long)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.segmentFileName(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String segmentFileName(java.lang.String, java.lang.String, java.lang.String)"], ["boolean", "org.apache.lucene.index.IndexFileNames.matchesExtension(java.lang.String, java.lang.String)", "public static boolean matchesExtension(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.stripSegmentName(java.lang.String)", "public static java.lang.String stripSegmentName(java.lang.String)"], ["long", "org.apache.lucene.index.IndexFileNames.parseGeneration(java.lang.String)", "public static long parseGeneration(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.parseSegmentName(java.lang.String)", "public static java.lang.String parseSegmentName(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.stripExtension(java.lang.String)", "public static java.lang.String stripExtension(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.getExtension(java.lang.String)", "public static java.lang.String getExtension(java.lang.String)"], ["org.apache.lucene.index.IndexFormatTooNewException", "org.apache.lucene.index.IndexFormatTooNewException(java.lang.String, int, int, int)", "public org.apache.lucene.index.IndexFormatTooNewException(java.lang.String, int, int, int)"], ["org.apache.lucene.index.IndexFormatTooNewException", "org.apache.lucene.index.IndexFormatTooNewException(org.apache.lucene.store.DataInput, int, int, int)", "public org.apache.lucene.index.IndexFormatTooNewException(org.apache.lucene.store.DataInput, int, int, int)"], ["java.lang.String", "org.apache.lucene.index.IndexFormatTooNewException.getResourceDescription()", "public java.lang.String getResourceDescription()"], ["int", "org.apache.lucene.index.IndexFormatTooNewException.getVersion()", "public int getVersion()"], ["int", "org.apache.lucene.index.IndexFormatTooNewException.getMaxVersion()", "public int getMaxVersion()"], ["int", "org.apache.lucene.index.IndexFormatTooNewException.getMinVersion()", "public int getMinVersion()"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, java.lang.String)", "public org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, java.lang.String)"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, java.lang.String)", "public org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, java.lang.String)"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, int, int, int)", "public org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, int, int, int)"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, int, int, int)", "public org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, int, int, int)"], ["java.lang.String", "org.apache.lucene.index.IndexFormatTooOldException.getResourceDescription()", "public java.lang.String getResourceDescription()"], ["java.lang.String", "org.apache.lucene.index.IndexFormatTooOldException.getReason()", "public java.lang.String getReason()"], ["java.lang.Integer", "org.apache.lucene.index.IndexFormatTooOldException.getVersion()", "public java.lang.Integer getVersion()"], ["java.lang.Integer", "org.apache.lucene.index.IndexFormatTooOldException.getMaxVersion()", "public java.lang.Integer getMaxVersion()"], ["java.lang.Integer", "org.apache.lucene.index.IndexFormatTooOldException.getMinVersion()", "public java.lang.Integer getMinVersion()"], ["org.apache.lucene.index.IndexNotFoundException", "org.apache.lucene.index.IndexNotFoundException(java.lang.String)", "public org.apache.lucene.index.IndexNotFoundException(java.lang.String)"], ["org.apache.lucene.index.IndexOptions[]", "org.apache.lucene.index.IndexOptions.values()", "public static org.apache.lucene.index.IndexOptions[] values()"], ["org.apache.lucene.index.IndexOptions", "org.apache.lucene.index.IndexOptions.valueOf(java.lang.String)", "public static org.apache.lucene.index.IndexOptions valueOf(java.lang.String)"], ["void", "org.apache.lucene.index.IndexReader.registerParentReader(org.apache.lucene.index.IndexReader)", "public final void registerParentReader(org.apache.lucene.index.IndexReader)"], ["int", "org.apache.lucene.index.IndexReader.getRefCount()", "public final int getRefCount()"], ["void", "org.apache.lucene.index.IndexReader.incRef()", "public final void incRef()"], ["boolean", "org.apache.lucene.index.IndexReader.tryIncRef()", "public final boolean tryIncRef()"], ["void", "org.apache.lucene.index.IndexReader.decRef()", "public final void decRef() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexReader.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.IndexReader.hashCode()", "public final int hashCode()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.IndexReader.getTermVector(int, java.lang.String)", "public final org.apache.lucene.index.Terms getTermVector(int, java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.IndexReader.numDeletedDocs()", "public final int numDeletedDocs()"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.IndexReader.document(int)", "public final org.apache.lucene.document.Document document(int) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.IndexReader.document(int, java.util.Set<java.lang.String>)", "public final org.apache.lucene.document.Document document(int, java.util.Set<java.lang.String>) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexReader.hasDeletions()", "public boolean hasDeletions()"], ["synchronized", "org.apache.lucene.index.IndexReader.void close()", "public final synchronized void close() throws java.io.IOException"], ["java.util.List<org.apache.lucene.index.LeafReaderContext>", "org.apache.lucene.index.IndexReader.leaves()", "public final java.util.List<org.apache.lucene.index.LeafReaderContext> leaves()"], ["java.lang.Object", "org.apache.lucene.index.IndexReaderContext.id()", "public java.lang.Object id()"], ["void", "org.apache.lucene.index.IndexUpgrader.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException"], ["org.apache.lucene.index.IndexUpgrader", "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.IndexUpgrader", "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.InfoStream, boolean)", "public org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.InfoStream, boolean)"], ["org.apache.lucene.index.IndexUpgrader", "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig, boolean)", "public org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig, boolean)"], ["void", "org.apache.lucene.index.IndexUpgrader.upgrade()", "public void upgrade() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.boolean assertInfoIsLive(org.apache.lucene.index.SegmentCommitInfo)", "public synchronized boolean assertInfoIsLive(org.apache.lucene.index.SegmentCommitInfo)"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void drop(org.apache.lucene.index.SegmentCommitInfo)", "public synchronized void drop(org.apache.lucene.index.SegmentCommitInfo) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.long ramBytesUsed()", "public synchronized long ramBytesUsed()"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.boolean anyPendingDeletes()", "public synchronized boolean anyPendingDeletes()"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.ReadersAndUpdates)", "public synchronized void release(org.apache.lucene.index.ReadersAndUpdates) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.ReadersAndUpdates, boolean)", "public synchronized void release(org.apache.lucene.index.ReadersAndUpdates, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter$ReaderPool.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void commit(org.apache.lucene.index.SegmentInfos)", "public synchronized void commit(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.boolean anyChanges()", "public synchronized boolean anyChanges()"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.ReadersAndUpdates get(org.apache.lucene.index.SegmentCommitInfo, boolean)", "public synchronized org.apache.lucene.index.ReadersAndUpdates get(org.apache.lucene.index.SegmentCommitInfo, boolean)"], ["long", "org.apache.lucene.index.IndexWriter.ramBytesUsed()", "public final long ramBytesUsed()"], ["int", "org.apache.lucene.index.IndexWriter.numDeletedDocs(org.apache.lucene.index.SegmentCommitInfo)", "public int numDeletedDocs(org.apache.lucene.index.SegmentCommitInfo)"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig)", "public org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig) throws java.io.IOException"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriter.getConfig()", "public org.apache.lucene.index.LiveIndexWriterConfig getConfig()"], ["void", "org.apache.lucene.index.IndexWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.IndexWriter.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.index.IndexWriter.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["synchronized", "org.apache.lucene.index.IndexWriter.int maxDoc()", "public synchronized int maxDoc()"], ["synchronized", "org.apache.lucene.index.IndexWriter.void advanceSegmentInfosVersion(long)", "public synchronized void advanceSegmentInfosVersion(long)"], ["synchronized", "org.apache.lucene.index.IndexWriter.int numDocs()", "public synchronized int numDocs()"], ["synchronized", "org.apache.lucene.index.IndexWriter.boolean hasDeletions()", "public synchronized boolean hasDeletions()"], ["long", "org.apache.lucene.index.IndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)", "public long addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)", "public long addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)", "public long updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.long tryDeleteDocument(org.apache.lucene.index.IndexReader, int)", "public synchronized long tryDeleteDocument(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term...)", "public long deleteDocuments(org.apache.lucene.index.Term...) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query...)", "public long deleteDocuments(org.apache.lucene.search.Query...) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)", "public long updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.updateNumericDocValue(org.apache.lucene.index.Term, java.lang.String, long)", "public long updateNumericDocValue(org.apache.lucene.index.Term, java.lang.String, long) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.updateBinaryDocValue(org.apache.lucene.index.Term, java.lang.String, org.apache.lucene.util.BytesRef)", "public long updateBinaryDocValue(org.apache.lucene.index.Term, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.updateDocValues(org.apache.lucene.index.Term, org.apache.lucene.document.Field...)", "public long updateDocValues(org.apache.lucene.index.Term, org.apache.lucene.document.Field...) throws java.io.IOException"], ["java.util.Set<java.lang.String>", "org.apache.lucene.index.IndexWriter.getFieldNames()", "public java.util.Set<java.lang.String> getFieldNames()"], ["void", "org.apache.lucene.index.IndexWriter.forceMerge(int)", "public void forceMerge(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.forceMerge(int, boolean)", "public void forceMerge(int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean)", "public void forceMergeDeletes(boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.forceMergeDeletes()", "public void forceMergeDeletes() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.maybeMerge()", "public final void maybeMerge() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.index.SegmentCommitInfo>", "org.apache.lucene.index.IndexWriter.getMergingSegments()", "public synchronized java.util.Collection<org.apache.lucene.index.SegmentCommitInfo> getMergingSegments()"], ["synchronized", "org.apache.lucene.index.IndexWriter.org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()", "public synchronized org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()"], ["synchronized", "org.apache.lucene.index.IndexWriter.boolean hasPendingMerges()", "public synchronized boolean hasPendingMerges()"], ["void", "org.apache.lucene.index.IndexWriter.rollback()", "public void rollback() throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.deleteAll()", "public long deleteAll() throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.store.Directory...)", "public long addIndexes(org.apache.lucene.store.Directory...) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.index.CodecReader...)", "public long addIndexes(org.apache.lucene.index.CodecReader...) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.prepareCommit()", "public final long prepareCommit() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void setLiveCommitData(java.lang.Iterable<java.util.Map$Entry<java.lang.String, java.lang.String>>)", "public final synchronized void setLiveCommitData(java.lang.Iterable<java.util.Map$Entry<java.lang.String, java.lang.String>>)"], ["synchronized", "org.apache.lucene.index.IndexWriter.void setLiveCommitData(java.lang.Iterable<java.util.Map$Entry<java.lang.String, java.lang.String>>, boolean)", "public final synchronized void setLiveCommitData(java.lang.Iterable<java.util.Map$Entry<java.lang.String, java.lang.String>>, boolean)"], ["java.lang.Iterable<java.util.Map$Entry<java.lang.String, java.lang.String>>", "org.apache.lucene.index.IndexWriter.getLiveCommitData()", "public final synchronized java.lang.Iterable<java.util.Map$Entry<java.lang.String, java.lang.String>> getLiveCommitData()"], ["long", "org.apache.lucene.index.IndexWriter.commit()", "public final long commit() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexWriter.hasUncommittedChanges()", "public final boolean hasUncommittedChanges()"], ["void", "org.apache.lucene.index.IndexWriter.flush()", "public final void flush() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.int numRamDocs()", "public final synchronized int numRamDocs()"], ["void", "org.apache.lucene.index.IndexWriter.merge(org.apache.lucene.index.MergePolicy$OneMerge)", "public void merge(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException"], ["java.lang.Throwable", "org.apache.lucene.index.IndexWriter.getTragicException()", "public java.lang.Throwable getTragicException()"], ["boolean", "org.apache.lucene.index.IndexWriter.isOpen()", "public boolean isOpen()"], ["synchronized", "org.apache.lucene.index.IndexWriter.void deleteUnusedFiles()", "public synchronized void deleteUnusedFiles() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void incRefDeleter(org.apache.lucene.index.SegmentInfos)", "public synchronized void incRefDeleter(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void decRefDeleter(org.apache.lucene.index.SegmentInfos)", "public synchronized void decRefDeleter(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.getMaxCompletedSequenceNumber()", "public long getMaxCompletedSequenceNumber()"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode[]", "org.apache.lucene.index.IndexWriterConfig$OpenMode.values()", "public static org.apache.lucene.index.IndexWriterConfig$OpenMode[] values()"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode", "org.apache.lucene.index.IndexWriterConfig$OpenMode.valueOf(java.lang.String)", "public static org.apache.lucene.index.IndexWriterConfig$OpenMode valueOf(java.lang.String)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig()", "public org.apache.lucene.index.IndexWriterConfig()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig(org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.index.IndexWriterConfig(org.apache.lucene.analysis.Analyzer)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)", "public org.apache.lucene.index.IndexWriterConfig setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode", "org.apache.lucene.index.IndexWriterConfig.getOpenMode()", "public org.apache.lucene.index.IndexWriterConfig$OpenMode getOpenMode()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setIndexDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)", "public org.apache.lucene.index.IndexWriterConfig setIndexDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"], ["org.apache.lucene.index.IndexDeletionPolicy", "org.apache.lucene.index.IndexWriterConfig.getIndexDeletionPolicy()", "public org.apache.lucene.index.IndexDeletionPolicy getIndexDeletionPolicy()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setIndexCommit(org.apache.lucene.index.IndexCommit)", "public org.apache.lucene.index.IndexWriterConfig setIndexCommit(org.apache.lucene.index.IndexCommit)"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.IndexWriterConfig.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setSimilarity(org.apache.lucene.search.similarities.Similarity)", "public org.apache.lucene.index.IndexWriterConfig setSimilarity(org.apache.lucene.search.similarities.Similarity)"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.index.IndexWriterConfig.getSimilarity()", "public org.apache.lucene.search.similarities.Similarity getSimilarity()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(org.apache.lucene.index.MergeScheduler)", "public org.apache.lucene.index.IndexWriterConfig setMergeScheduler(org.apache.lucene.index.MergeScheduler)"], ["org.apache.lucene.index.MergeScheduler", "org.apache.lucene.index.IndexWriterConfig.getMergeScheduler()", "public org.apache.lucene.index.MergeScheduler getMergeScheduler()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setCodec(org.apache.lucene.codecs.Codec)", "public org.apache.lucene.index.IndexWriterConfig setCodec(org.apache.lucene.codecs.Codec)"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.index.IndexWriterConfig.getCodec()", "public org.apache.lucene.codecs.Codec getCodec()"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.IndexWriterConfig.getMergePolicy()", "public org.apache.lucene.index.MergePolicy getMergePolicy()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean)", "public org.apache.lucene.index.IndexWriterConfig setReaderPooling(boolean)"], ["boolean", "org.apache.lucene.index.IndexWriterConfig.getReaderPooling()", "public boolean getReaderPooling()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setRAMPerThreadHardLimitMB(int)", "public org.apache.lucene.index.IndexWriterConfig setRAMPerThreadHardLimitMB(int)"], ["int", "org.apache.lucene.index.IndexWriterConfig.getRAMPerThreadHardLimitMB()", "public int getRAMPerThreadHardLimitMB()"], ["org.apache.lucene.util.InfoStream", "org.apache.lucene.index.IndexWriterConfig.getInfoStream()", "public org.apache.lucene.util.InfoStream getInfoStream()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.index.IndexWriterConfig.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["int", "org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs()", "public int getMaxBufferedDocs()"], ["org.apache.lucene.index.IndexWriter$IndexReaderWarmer", "org.apache.lucene.index.IndexWriterConfig.getMergedSegmentWarmer()", "public org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()"], ["double", "org.apache.lucene.index.IndexWriterConfig.getRAMBufferSizeMB()", "public double getRAMBufferSizeMB()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setInfoStream(org.apache.lucene.util.InfoStream)", "public org.apache.lucene.index.IndexWriterConfig setInfoStream(org.apache.lucene.util.InfoStream)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setInfoStream(java.io.PrintStream)", "public org.apache.lucene.index.IndexWriterConfig setInfoStream(java.io.PrintStream)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)", "public org.apache.lucene.index.IndexWriterConfig setMergePolicy(org.apache.lucene.index.MergePolicy)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)", "public org.apache.lucene.index.IndexWriterConfig setMaxBufferedDocs(int)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)", "public org.apache.lucene.index.IndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)", "public org.apache.lucene.index.IndexWriterConfig setRAMBufferSizeMB(double)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean)", "public org.apache.lucene.index.IndexWriterConfig setUseCompoundFile(boolean)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setCommitOnClose(boolean)", "public org.apache.lucene.index.IndexWriterConfig setCommitOnClose(boolean)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setIndexSort(org.apache.lucene.search.Sort)", "public org.apache.lucene.index.IndexWriterConfig setIndexSort(org.apache.lucene.search.Sort)"], ["java.lang.String", "org.apache.lucene.index.IndexWriterConfig.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean)", "public org.apache.lucene.index.LiveIndexWriterConfig setUseCompoundFile(boolean)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)", "public org.apache.lucene.index.LiveIndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)", "public org.apache.lucene.index.LiveIndexWriterConfig setMergePolicy(org.apache.lucene.index.MergePolicy)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)", "public org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)"], ["org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()", "public org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()"], ["void", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["void", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["org.apache.lucene.index.LeafMetaData", "org.apache.lucene.index.LeafMetaData(int, org.apache.lucene.util.Version, org.apache.lucene.search.Sort)", "public org.apache.lucene.index.LeafMetaData(int, org.apache.lucene.util.Version, org.apache.lucene.search.Sort)"], ["int", "org.apache.lucene.index.LeafMetaData.getCreatedVersionMajor()", "public int getCreatedVersionMajor()"], ["org.apache.lucene.util.Version", "org.apache.lucene.index.LeafMetaData.getMinVersion()", "public org.apache.lucene.util.Version getMinVersion()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.index.LeafMetaData.getSort()", "public org.apache.lucene.search.Sort getSort()"], ["org.apache.lucene.index.LeafReaderContext", "org.apache.lucene.index.LeafReader.getContext()", "public final org.apache.lucene.index.LeafReaderContext getContext()"], ["int", "org.apache.lucene.index.LeafReader.docFreq(org.apache.lucene.index.Term)", "public final int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["long", "org.apache.lucene.index.LeafReader.totalTermFreq(org.apache.lucene.index.Term)", "public final long totalTermFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["long", "org.apache.lucene.index.LeafReader.getSumDocFreq(java.lang.String)", "public final long getSumDocFreq(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.LeafReader.getDocCount(java.lang.String)", "public final int getDocCount(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.index.LeafReader.getSumTotalTermFreq(java.lang.String)", "public final long getSumTotalTermFreq(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.LeafReader.postings(org.apache.lucene.index.Term, int)", "public final org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.Term, int) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.LeafReader.postings(org.apache.lucene.index.Term)", "public final org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.index.LeafReader.getContext()", "public org.apache.lucene.index.IndexReaderContext getContext()"], ["java.util.List<org.apache.lucene.index.LeafReaderContext>", "org.apache.lucene.index.LeafReaderContext.leaves()", "public java.util.List<org.apache.lucene.index.LeafReaderContext> leaves()"], ["java.util.List<org.apache.lucene.index.IndexReaderContext>", "org.apache.lucene.index.LeafReaderContext.children()", "public java.util.List<org.apache.lucene.index.IndexReaderContext> children()"], ["org.apache.lucene.index.LeafReader", "org.apache.lucene.index.LeafReaderContext.reader()", "public org.apache.lucene.index.LeafReader reader()"], ["java.lang.String", "org.apache.lucene.index.LeafReaderContext.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.LeafReaderContext.reader()", "public org.apache.lucene.index.IndexReader reader()"], ["org.apache.lucene.index.LegacyBinaryDocValuesWrapper", "org.apache.lucene.index.LegacyBinaryDocValuesWrapper(org.apache.lucene.util.Bits, org.apache.lucene.index.LegacyBinaryDocValues)", "public org.apache.lucene.index.LegacyBinaryDocValuesWrapper(org.apache.lucene.util.Bits, org.apache.lucene.index.LegacyBinaryDocValues)"], ["int", "org.apache.lucene.index.LegacyBinaryDocValuesWrapper.docID()", "public int docID()"], ["int", "org.apache.lucene.index.LegacyBinaryDocValuesWrapper.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.LegacyBinaryDocValuesWrapper.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.LegacyBinaryDocValuesWrapper.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.LegacyBinaryDocValuesWrapper.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.LegacyBinaryDocValuesWrapper.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["org.apache.lucene.index.LegacyNumericDocValuesWrapper", "org.apache.lucene.index.LegacyNumericDocValuesWrapper(org.apache.lucene.util.Bits, org.apache.lucene.index.LegacyNumericDocValues)", "public org.apache.lucene.index.LegacyNumericDocValuesWrapper(org.apache.lucene.util.Bits, org.apache.lucene.index.LegacyNumericDocValues)"], ["int", "org.apache.lucene.index.LegacyNumericDocValuesWrapper.docID()", "public int docID()"], ["int", "org.apache.lucene.index.LegacyNumericDocValuesWrapper.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.LegacyNumericDocValuesWrapper.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.LegacyNumericDocValuesWrapper.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.LegacyNumericDocValuesWrapper.cost()", "public long cost()"], ["long", "org.apache.lucene.index.LegacyNumericDocValuesWrapper.longValue()", "public long longValue()"], ["java.lang.String", "org.apache.lucene.index.LegacyNumericDocValuesWrapper.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.LegacySortedDocValues.get(int)", "public org.apache.lucene.util.BytesRef get(int)"], ["int", "org.apache.lucene.index.LegacySortedDocValues.lookupTerm(org.apache.lucene.util.BytesRef)", "public int lookupTerm(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.LegacySortedDocValues.termsEnum()", "public org.apache.lucene.index.TermsEnum termsEnum()"], ["org.apache.lucene.index.LegacySortedDocValuesWrapper", "org.apache.lucene.index.LegacySortedDocValuesWrapper(org.apache.lucene.index.LegacySortedDocValues, int)", "public org.apache.lucene.index.LegacySortedDocValuesWrapper(org.apache.lucene.index.LegacySortedDocValues, int)"], ["int", "org.apache.lucene.index.LegacySortedDocValuesWrapper.docID()", "public int docID()"], ["int", "org.apache.lucene.index.LegacySortedDocValuesWrapper.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.LegacySortedDocValuesWrapper.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.LegacySortedDocValuesWrapper.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.LegacySortedDocValuesWrapper.cost()", "public long cost()"], ["int", "org.apache.lucene.index.LegacySortedDocValuesWrapper.ordValue()", "public int ordValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.LegacySortedDocValuesWrapper.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int)"], ["int", "org.apache.lucene.index.LegacySortedDocValuesWrapper.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.index.LegacySortedNumericDocValuesWrapper", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper(org.apache.lucene.index.LegacySortedNumericDocValues, int)", "public org.apache.lucene.index.LegacySortedNumericDocValuesWrapper(org.apache.lucene.index.LegacySortedNumericDocValues, int)"], ["int", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper.docID()", "public int docID()"], ["int", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper.cost()", "public long cost()"], ["long", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper.nextValue()", "public long nextValue()"], ["int", "org.apache.lucene.index.LegacySortedNumericDocValuesWrapper.docValueCount()", "public int docValueCount()"], ["long", "org.apache.lucene.index.LegacySortedSetDocValues.lookupTerm(org.apache.lucene.util.BytesRef)", "public long lookupTerm(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.LegacySortedSetDocValues.termsEnum()", "public org.apache.lucene.index.TermsEnum termsEnum() throws java.io.IOException"], ["org.apache.lucene.index.LegacySortedSetDocValuesWrapper", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper(org.apache.lucene.index.LegacySortedSetDocValues, int)", "public org.apache.lucene.index.LegacySortedSetDocValuesWrapper(org.apache.lucene.index.LegacySortedSetDocValues, int)"], ["int", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.docID()", "public int docID()"], ["int", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.cost()", "public long cost()"], ["long", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.nextOrd()", "public long nextOrd()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long)"], ["long", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.getValueCount()", "public long getValueCount()"], ["java.lang.String", "org.apache.lucene.index.LegacySortedSetDocValuesWrapper.toString()", "public java.lang.String toString()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.index.LiveIndexWriterConfig.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["synchronized", "org.apache.lucene.index.LiveIndexWriterConfig.org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)", "public synchronized org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)"], ["double", "org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB()", "public double getRAMBufferSizeMB()"], ["synchronized", "org.apache.lucene.index.LiveIndexWriterConfig.org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)", "public synchronized org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getMaxBufferedDocs()", "public int getMaxBufferedDocs()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)", "public org.apache.lucene.index.LiveIndexWriterConfig setMergePolicy(org.apache.lucene.index.MergePolicy)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)", "public org.apache.lucene.index.LiveIndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"], ["org.apache.lucene.index.IndexWriter$IndexReaderWarmer", "org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer()", "public org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode", "org.apache.lucene.index.LiveIndexWriterConfig.getOpenMode()", "public org.apache.lucene.index.IndexWriterConfig$OpenMode getOpenMode()"], ["org.apache.lucene.index.IndexDeletionPolicy", "org.apache.lucene.index.LiveIndexWriterConfig.getIndexDeletionPolicy()", "public org.apache.lucene.index.IndexDeletionPolicy getIndexDeletionPolicy()"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.LiveIndexWriterConfig.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit()"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.index.LiveIndexWriterConfig.getSimilarity()", "public org.apache.lucene.search.similarities.Similarity getSimilarity()"], ["org.apache.lucene.index.MergeScheduler", "org.apache.lucene.index.LiveIndexWriterConfig.getMergeScheduler()", "public org.apache.lucene.index.MergeScheduler getMergeScheduler()"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.index.LiveIndexWriterConfig.getCodec()", "public org.apache.lucene.codecs.Codec getCodec()"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy()", "public org.apache.lucene.index.MergePolicy getMergePolicy()"], ["boolean", "org.apache.lucene.index.LiveIndexWriterConfig.getReaderPooling()", "public boolean getReaderPooling()"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getRAMPerThreadHardLimitMB()", "public int getRAMPerThreadHardLimitMB()"], ["org.apache.lucene.util.InfoStream", "org.apache.lucene.index.LiveIndexWriterConfig.getInfoStream()", "public org.apache.lucene.util.InfoStream getInfoStream()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setUseCompoundFile(boolean)", "public org.apache.lucene.index.LiveIndexWriterConfig setUseCompoundFile(boolean)"], ["boolean", "org.apache.lucene.index.LiveIndexWriterConfig.getUseCompoundFile()", "public boolean getUseCompoundFile()"], ["boolean", "org.apache.lucene.index.LiveIndexWriterConfig.getCommitOnClose()", "public boolean getCommitOnClose()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.index.LiveIndexWriterConfig.getIndexSort()", "public org.apache.lucene.search.Sort getIndexSort()"], ["java.util.Set<java.lang.String>", "org.apache.lucene.index.LiveIndexWriterConfig.getIndexSortFields()", "public java.util.Set<java.lang.String> getIndexSortFields()"], ["java.lang.String", "org.apache.lucene.index.LiveIndexWriterConfig.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.LogByteSizeMergePolicy", "org.apache.lucene.index.LogByteSizeMergePolicy()", "public org.apache.lucene.index.LogByteSizeMergePolicy()"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMB(double)", "public void setMaxMergeMB(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMB()", "public double getMaxMergeMB()"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForForcedMerge(double)", "public void setMaxMergeMBForForcedMerge(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForForcedMerge()", "public double getMaxMergeMBForForcedMerge()"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMinMergeMB(double)", "public void setMinMergeMB(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMinMergeMB()", "public double getMinMergeMB()"], ["org.apache.lucene.index.LogDocMergePolicy", "org.apache.lucene.index.LogDocMergePolicy()", "public org.apache.lucene.index.LogDocMergePolicy()"], ["void", "org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int)", "public void setMinMergeDocs(int)"], ["int", "org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs()", "public int getMinMergeDocs()"], ["org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel", "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel(org.apache.lucene.index.SegmentCommitInfo, float)", "public org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel(org.apache.lucene.index.SegmentCommitInfo, float)"], ["int", "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel)", "public int compareTo(org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel)"], ["int", "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.LogMergePolicy", "org.apache.lucene.index.LogMergePolicy()", "public org.apache.lucene.index.LogMergePolicy()"], ["int", "org.apache.lucene.index.LogMergePolicy.getMergeFactor()", "public int getMergeFactor()"], ["void", "org.apache.lucene.index.LogMergePolicy.setMergeFactor(int)", "public void setMergeFactor(int)"], ["void", "org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean)", "public void setCalibrateSizeByDeletes(boolean)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.getCalibrateSizeByDeletes()", "public boolean getCalibrateSizeByDeletes()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["void", "org.apache.lucene.index.LogMergePolicy.setMaxMergeDocs(int)", "public void setMaxMergeDocs(int)"], ["int", "org.apache.lucene.index.LogMergePolicy.getMaxMergeDocs()", "public int getMaxMergeDocs()"], ["java.lang.String", "org.apache.lucene.index.LogMergePolicy.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MappedMultiFields$MappedMultiTerms", "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms(java.lang.String, org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiTerms)", "public org.apache.lucene.index.MappedMultiFields$MappedMultiTerms(java.lang.String, org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiTerms)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["long", "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.size()", "public long size() throws java.io.IOException"], ["long", "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.getSumDocFreq()", "public long getSumDocFreq() throws java.io.IOException"], ["int", "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.getDocCount()", "public int getDocCount() throws java.io.IOException"], ["org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum", "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum(java.lang.String, org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiTermsEnum)", "public org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum(java.lang.String, org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiTermsEnum)"], ["int", "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.MappedMultiFields", "org.apache.lucene.index.MappedMultiFields(org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiFields)", "public org.apache.lucene.index.MappedMultiFields(org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiFields)"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.MappedMultiFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.MappingMultiPostingsEnum$MappingPostingsSub", "org.apache.lucene.index.MappingMultiPostingsEnum$MappingPostingsSub(org.apache.lucene.index.MergeState$DocMap)", "public org.apache.lucene.index.MappingMultiPostingsEnum$MappingPostingsSub(org.apache.lucene.index.MergeState$DocMap)"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum$MappingPostingsSub.nextDoc()", "public int nextDoc()"], ["org.apache.lucene.index.MappingMultiPostingsEnum", "org.apache.lucene.index.MappingMultiPostingsEnum(java.lang.String, org.apache.lucene.index.MergeState)", "public org.apache.lucene.index.MappingMultiPostingsEnum(java.lang.String, org.apache.lucene.index.MergeState) throws java.io.IOException"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.MappingMultiPostingsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MappingMultiPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["long", "org.apache.lucene.index.MappingMultiPostingsEnum.cost()", "public long cost()"], ["org.apache.lucene.index.MergePolicy$MergeAbortedException", "org.apache.lucene.index.MergePolicy$MergeAbortedException()", "public org.apache.lucene.index.MergePolicy$MergeAbortedException()"], ["org.apache.lucene.index.MergePolicy$MergeAbortedException", "org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)", "public org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)"], ["org.apache.lucene.index.MergePolicy$MergeException", "org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.MergePolicy$MergeException", "org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.MergePolicy$MergeException.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.MergePolicy$MergeSpecification()", "public org.apache.lucene.index.MergePolicy$MergeSpecification()"], ["void", "org.apache.lucene.index.MergePolicy$MergeSpecification.add(org.apache.lucene.index.MergePolicy$OneMerge)", "public void add(org.apache.lucene.index.MergePolicy$OneMerge)"], ["java.lang.String", "org.apache.lucene.index.MergePolicy$MergeSpecification.segString(org.apache.lucene.store.Directory)", "public java.lang.String segString(org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.MergePolicy$OneMerge", "org.apache.lucene.index.MergePolicy$OneMerge(java.util.List<org.apache.lucene.index.SegmentCommitInfo>)", "public org.apache.lucene.index.MergePolicy$OneMerge(java.util.List<org.apache.lucene.index.SegmentCommitInfo>)"], ["void", "org.apache.lucene.index.MergePolicy$OneMerge.mergeInit()", "public void mergeInit() throws java.io.IOException"], ["void", "org.apache.lucene.index.MergePolicy$OneMerge.mergeFinished()", "public void mergeFinished() throws java.io.IOException"], ["org.apache.lucene.index.CodecReader", "org.apache.lucene.index.MergePolicy$OneMerge.wrapForMerge(org.apache.lucene.index.CodecReader)", "public org.apache.lucene.index.CodecReader wrapForMerge(org.apache.lucene.index.CodecReader) throws java.io.IOException"], ["void", "org.apache.lucene.index.MergePolicy$OneMerge.setMergeInfo(org.apache.lucene.index.SegmentCommitInfo)", "public void setMergeInfo(org.apache.lucene.index.SegmentCommitInfo)"], ["org.apache.lucene.index.SegmentCommitInfo", "org.apache.lucene.index.MergePolicy$OneMerge.getMergeInfo()", "public org.apache.lucene.index.SegmentCommitInfo getMergeInfo()"], ["java.lang.String", "org.apache.lucene.index.MergePolicy$OneMerge.segString()", "public java.lang.String segString()"], ["long", "org.apache.lucene.index.MergePolicy$OneMerge.totalBytesSize()", "public long totalBytesSize() throws java.io.IOException"], ["int", "org.apache.lucene.index.MergePolicy$OneMerge.totalNumDocs()", "public int totalNumDocs() throws java.io.IOException"], ["org.apache.lucene.store.MergeInfo", "org.apache.lucene.index.MergePolicy$OneMerge.getStoreMergeInfo()", "public org.apache.lucene.store.MergeInfo getStoreMergeInfo()"], ["boolean", "org.apache.lucene.index.MergePolicy$OneMerge.isAborted()", "public boolean isAborted()"], ["void", "org.apache.lucene.index.MergePolicy$OneMerge.setAborted()", "public void setAborted()"], ["void", "org.apache.lucene.index.MergePolicy$OneMerge.checkAborted()", "public void checkAborted() throws org.apache.lucene.index.MergePolicy$MergeAbortedException"], ["org.apache.lucene.index.MergePolicy$OneMergeProgress", "org.apache.lucene.index.MergePolicy$OneMerge.getMergeProgress()", "public org.apache.lucene.index.MergePolicy$OneMergeProgress getMergeProgress()"], ["org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason[]", "org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason.values()", "public static org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason[] values()"], ["org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason", "org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason.valueOf(java.lang.String)", "public static org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason valueOf(java.lang.String)"], ["org.apache.lucene.index.MergePolicy$OneMergeProgress", "org.apache.lucene.index.MergePolicy$OneMergeProgress()", "public org.apache.lucene.index.MergePolicy$OneMergeProgress()"], ["void", "org.apache.lucene.index.MergePolicy$OneMergeProgress.abort()", "public void abort()"], ["boolean", "org.apache.lucene.index.MergePolicy$OneMergeProgress.isAborted()", "public boolean isAborted()"], ["void", "org.apache.lucene.index.MergePolicy$OneMergeProgress.pauseNanos(long, org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason, java.util.function.BooleanSupplier)", "public void pauseNanos(long, org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason, java.util.function.BooleanSupplier) throws java.lang.InterruptedException"], ["void", "org.apache.lucene.index.MergePolicy$OneMergeProgress.wakeup()", "public void wakeup()"], ["java.util.Map<org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason, java.lang.Long>", "org.apache.lucene.index.MergePolicy$OneMergeProgress.getPauseTimes()", "public java.util.Map<org.apache.lucene.index.MergePolicy$OneMergeProgress$PauseReason, java.lang.Long> getPauseTimes()"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.MergePolicy()", "public org.apache.lucene.index.MergePolicy()"], ["boolean", "org.apache.lucene.index.MergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["double", "org.apache.lucene.index.MergePolicy.getNoCFSRatio()", "public double getNoCFSRatio()"], ["void", "org.apache.lucene.index.MergePolicy.setNoCFSRatio(double)", "public void setNoCFSRatio(double)"], ["double", "org.apache.lucene.index.MergePolicy.getMaxCFSSegmentSizeMB()", "public final double getMaxCFSSegmentSizeMB()"], ["void", "org.apache.lucene.index.MergePolicy.setMaxCFSSegmentSizeMB(double)", "public void setMaxCFSSegmentSizeMB(double)"], ["org.apache.lucene.index.MergePolicyWrapper", "org.apache.lucene.index.MergePolicyWrapper(org.apache.lucene.index.MergePolicy)", "public org.apache.lucene.index.MergePolicyWrapper(org.apache.lucene.index.MergePolicy)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.MergePolicyWrapper.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.MergePolicyWrapper.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.MergePolicyWrapper.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MergePolicyWrapper.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["double", "org.apache.lucene.index.MergePolicyWrapper.getNoCFSRatio()", "public double getNoCFSRatio()"], ["void", "org.apache.lucene.index.MergePolicyWrapper.setNoCFSRatio(double)", "public final void setNoCFSRatio(double)"], ["void", "org.apache.lucene.index.MergePolicyWrapper.setMaxCFSSegmentSizeMB(double)", "public final void setMaxCFSSegmentSizeMB(double)"], ["java.lang.String", "org.apache.lucene.index.MergePolicyWrapper.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MergeRateLimiter", "org.apache.lucene.index.MergeRateLimiter(org.apache.lucene.index.MergePolicy$OneMergeProgress)", "public org.apache.lucene.index.MergeRateLimiter(org.apache.lucene.index.MergePolicy$OneMergeProgress)"], ["void", "org.apache.lucene.index.MergeRateLimiter.setMBPerSec(double)", "public void setMBPerSec(double)"], ["double", "org.apache.lucene.index.MergeRateLimiter.getMBPerSec()", "public double getMBPerSec()"], ["long", "org.apache.lucene.index.MergeRateLimiter.getTotalBytesWritten()", "public long getTotalBytesWritten()"], ["long", "org.apache.lucene.index.MergeRateLimiter.pause(long)", "public long pause(long) throws org.apache.lucene.index.MergePolicy$MergeAbortedException"], ["long", "org.apache.lucene.index.MergeRateLimiter.getTotalStoppedNS()", "public long getTotalStoppedNS()"], ["long", "org.apache.lucene.index.MergeRateLimiter.getTotalPausedNS()", "public long getTotalPausedNS()"], ["long", "org.apache.lucene.index.MergeRateLimiter.getMinPauseCheckBytes()", "public long getMinPauseCheckBytes()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.MergeReaderWrapper.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.MergeReaderWrapper.getNumericDocValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.MergeReaderWrapper.getBinaryDocValues(java.lang.String)", "public org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.MergeReaderWrapper.getSortedDocValues(java.lang.String)", "public org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.MergeReaderWrapper.getSortedNumericDocValues(java.lang.String)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.MergeReaderWrapper.getSortedSetDocValues(java.lang.String)", "public org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.MergeReaderWrapper.getNormValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.MergeReaderWrapper.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.MergeReaderWrapper.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["void", "org.apache.lucene.index.MergeReaderWrapper.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.MergeReaderWrapper.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.index.MergeReaderWrapper.getPointValues(java.lang.String)", "public org.apache.lucene.index.PointValues getPointValues(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.MergeReaderWrapper.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.MergeReaderWrapper.maxDoc()", "public int maxDoc()"], ["void", "org.apache.lucene.index.MergeReaderWrapper.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.MergeReaderWrapper.getCoreCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getCoreCacheHelper()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.MergeReaderWrapper.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["java.lang.String", "org.apache.lucene.index.MergeReaderWrapper.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.LeafMetaData", "org.apache.lucene.index.MergeReaderWrapper.getMetaData()", "public org.apache.lucene.index.LeafMetaData getMetaData()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.MergeScheduler.wrapForMerge(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)", "public org.apache.lucene.store.Directory wrapForMerge(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)"], ["int", "org.apache.lucene.index.MergeState$1.get(int)", "public int get(int)"], ["int", "org.apache.lucene.index.MergeState$2.get(int)", "public int get(int)"], ["int", "org.apache.lucene.index.MergeState$3.get(int)", "public int get(int)"], ["org.apache.lucene.index.MergeState$DocMap", "org.apache.lucene.index.MergeState$DocMap()", "public org.apache.lucene.index.MergeState$DocMap()"], ["org.apache.lucene.index.MergeTrigger[]", "org.apache.lucene.index.MergeTrigger.values()", "public static org.apache.lucene.index.MergeTrigger[] values()"], ["org.apache.lucene.index.MergeTrigger", "org.apache.lucene.index.MergeTrigger.valueOf(java.lang.String)", "public static org.apache.lucene.index.MergeTrigger valueOf(java.lang.String)"], ["org.apache.lucene.index.MultiBits$SubResult", "org.apache.lucene.index.MultiBits$SubResult()", "public org.apache.lucene.index.MultiBits$SubResult()"], ["org.apache.lucene.index.MultiBits", "org.apache.lucene.index.MultiBits(org.apache.lucene.util.Bits[], int[], boolean)", "public org.apache.lucene.index.MultiBits(org.apache.lucene.util.Bits[], int[], boolean)"], ["boolean", "org.apache.lucene.index.MultiBits.get(int)", "public boolean get(int)"], ["java.lang.String", "org.apache.lucene.index.MultiBits.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MultiBits$SubResult", "org.apache.lucene.index.MultiBits.getMatchingSub(org.apache.lucene.index.ReaderSlice)", "public org.apache.lucene.index.MultiBits$SubResult getMatchingSub(org.apache.lucene.index.ReaderSlice)"], ["int", "org.apache.lucene.index.MultiBits.length()", "public int length()"], ["int", "org.apache.lucene.index.MultiDocValues$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$1.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocValues$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$1.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$1.cost()", "public long cost()"], ["int", "org.apache.lucene.index.MultiDocValues$2.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocValues$2.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$2.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$2.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$2.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$2.cost()", "public long cost()"], ["int", "org.apache.lucene.index.MultiDocValues$3.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$3.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocValues$3.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$3.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$3.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$3.cost()", "public long cost()"], ["int", "org.apache.lucene.index.MultiDocValues$4.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$4.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocValues$4.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$4.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$4.cost()", "public long cost()"], ["int", "org.apache.lucene.index.MultiDocValues$4.docValueCount()", "public int docValueCount()"], ["long", "org.apache.lucene.index.MultiDocValues$4.nextValue()", "public long nextValue() throws java.io.IOException"], ["org.apache.lucene.index.MultiDocValues$MultiSortedDocValues", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues(org.apache.lucene.index.SortedDocValues[], int[], org.apache.lucene.index.MultiDocValues$OrdinalMap, long)", "public org.apache.lucene.index.MultiDocValues$MultiSortedDocValues(org.apache.lucene.index.SortedDocValues[], int[], org.apache.lucene.index.MultiDocValues$OrdinalMap, long) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.ordValue()", "public int ordValue() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.getValueCount()", "public int getValueCount()"], ["long", "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.cost()", "public long cost()"], ["org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues(org.apache.lucene.index.SortedSetDocValues[], int[], org.apache.lucene.index.MultiDocValues$OrdinalMap, long)", "public org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues(org.apache.lucene.index.SortedSetDocValues[], int[], org.apache.lucene.index.MultiDocValues$OrdinalMap, long) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.nextOrd()", "public long nextOrd() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long) throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.getValueCount()", "public long getValueCount()"], ["long", "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.cost()", "public long cost()"], ["long", "org.apache.lucene.index.MultiDocValues$OrdinalMap$1.get(long)", "public long get(long)"], ["long", "org.apache.lucene.index.MultiDocValues$OrdinalMap$2.get(long)", "public long get(long)"], ["long", "org.apache.lucene.index.MultiDocValues$OrdinalMap$SegmentMap.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.MultiDocValues$OrdinalMap", "org.apache.lucene.index.MultiDocValues$OrdinalMap.build(org.apache.lucene.index.IndexReader$CacheKey, org.apache.lucene.index.SortedDocValues[], float)", "public static org.apache.lucene.index.MultiDocValues$OrdinalMap build(org.apache.lucene.index.IndexReader$CacheKey, org.apache.lucene.index.SortedDocValues[], float) throws java.io.IOException"], ["org.apache.lucene.index.MultiDocValues$OrdinalMap", "org.apache.lucene.index.MultiDocValues$OrdinalMap.build(org.apache.lucene.index.IndexReader$CacheKey, org.apache.lucene.index.SortedSetDocValues[], float)", "public static org.apache.lucene.index.MultiDocValues$OrdinalMap build(org.apache.lucene.index.IndexReader$CacheKey, org.apache.lucene.index.SortedSetDocValues[], float) throws java.io.IOException"], ["org.apache.lucene.index.MultiDocValues$OrdinalMap", "org.apache.lucene.index.MultiDocValues$OrdinalMap.build(org.apache.lucene.index.IndexReader$CacheKey, org.apache.lucene.index.TermsEnum[], long[], float)", "public static org.apache.lucene.index.MultiDocValues$OrdinalMap build(org.apache.lucene.index.IndexReader$CacheKey, org.apache.lucene.index.TermsEnum[], long[], float) throws java.io.IOException"], ["org.apache.lucene.util.LongValues", "org.apache.lucene.index.MultiDocValues$OrdinalMap.getGlobalOrds(int)", "public org.apache.lucene.util.LongValues getGlobalOrds(int)"], ["long", "org.apache.lucene.index.MultiDocValues$OrdinalMap.getFirstSegmentOrd(long)", "public long getFirstSegmentOrd(long)"], ["int", "org.apache.lucene.index.MultiDocValues$OrdinalMap.getFirstSegmentNumber(long)", "public int getFirstSegmentNumber(long)"], ["long", "org.apache.lucene.index.MultiDocValues$OrdinalMap.getValueCount()", "public long getValueCount()"], ["long", "org.apache.lucene.index.MultiDocValues$OrdinalMap.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.index.MultiDocValues$OrdinalMap.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.MultiDocValues.getNormValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.NumericDocValues getNormValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.MultiDocValues.getNumericValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.NumericDocValues getNumericValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.MultiDocValues.getBinaryValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.BinaryDocValues getBinaryValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.MultiDocValues.getSortedNumericValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.SortedNumericDocValues getSortedNumericValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.MultiDocValues.getSortedValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.SortedDocValues getSortedValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.MultiDocValues.getSortedSetValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.SortedSetDocValues getSortedSetValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.MultiFields$LeafReaderFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["int", "org.apache.lucene.index.MultiFields$LeafReaderFields.size()", "public int size()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.MultiFields$LeafReaderFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.MultiFields.getFields(org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.index.Fields getFields(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.MultiFields.getLiveDocs(org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.util.Bits getLiveDocs(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.MultiFields.getTerms(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.Terms getTerms(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.index.PostingsEnum getTermDocsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef, int)", "public static org.apache.lucene.index.PostingsEnum getTermDocsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.index.PostingsEnum getTermPositionsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef, int)", "public static org.apache.lucene.index.PostingsEnum getTermPositionsEnum(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["org.apache.lucene.index.MultiFields", "org.apache.lucene.index.MultiFields(org.apache.lucene.index.Fields[], org.apache.lucene.index.ReaderSlice[])", "public org.apache.lucene.index.MultiFields(org.apache.lucene.index.Fields[], org.apache.lucene.index.ReaderSlice[])"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.MultiFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.MultiFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiFields.size()", "public int size()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.MultiFields.getMergedFieldInfos(org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.index.FieldInfos getMergedFieldInfos(org.apache.lucene.index.IndexReader)"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.MultiFields.getIndexedFields(org.apache.lucene.index.IndexReader)", "public static java.util.Collection<java.lang.String> getIndexedFields(org.apache.lucene.index.IndexReader)"], ["java.lang.String", "org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MultiPostingsEnum", "org.apache.lucene.index.MultiPostingsEnum(org.apache.lucene.index.MultiTermsEnum, int)", "public org.apache.lucene.index.MultiPostingsEnum(org.apache.lucene.index.MultiTermsEnum, int)"], ["boolean", "org.apache.lucene.index.MultiPostingsEnum.canReuse(org.apache.lucene.index.MultiTermsEnum)", "public boolean canReuse(org.apache.lucene.index.MultiTermsEnum)"], ["org.apache.lucene.index.MultiPostingsEnum", "org.apache.lucene.index.MultiPostingsEnum.reset(org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice[], int)", "public org.apache.lucene.index.MultiPostingsEnum reset(org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice[], int)"], ["int", "org.apache.lucene.index.MultiPostingsEnum.getNumSubs()", "public int getNumSubs()"], ["org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice[]", "org.apache.lucene.index.MultiPostingsEnum.getSubs()", "public org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice[] getSubs()"], ["int", "org.apache.lucene.index.MultiPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiPostingsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiPostingsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiPostingsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiPostingsEnum.cost()", "public long cost()"], ["java.lang.String", "org.apache.lucene.index.MultiPostingsEnum.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MultiReader", "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...)", "public org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...) throws java.io.IOException"], ["org.apache.lucene.index.MultiReader", "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean)", "public org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.MultiReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["boolean", "org.apache.lucene.index.MultiSorter$1.lessThan(org.apache.lucene.index.MultiSorter$LeafAndDocID, org.apache.lucene.index.MultiSorter$LeafAndDocID)", "public boolean lessThan(org.apache.lucene.index.MultiSorter$LeafAndDocID, org.apache.lucene.index.MultiSorter$LeafAndDocID)"], ["boolean", "org.apache.lucene.index.MultiSorter$1.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.index.MultiSorter$2.get(int)", "public int get(int)"], ["java.lang.Comparable", "org.apache.lucene.index.MultiSorter$3.getComparable(int)", "public java.lang.Comparable getComparable(int) throws java.io.IOException"], ["java.lang.Comparable", "org.apache.lucene.index.MultiSorter$4.getComparable(int)", "public java.lang.Comparable getComparable(int) throws java.io.IOException"], ["java.lang.Comparable", "org.apache.lucene.index.MultiSorter$5.getComparable(int)", "public java.lang.Comparable getComparable(int) throws java.io.IOException"], ["java.lang.Comparable", "org.apache.lucene.index.MultiSorter$6.getComparable(int)", "public java.lang.Comparable getComparable(int) throws java.io.IOException"], ["java.lang.Comparable", "org.apache.lucene.index.MultiSorter$7.getComparable(int)", "public java.lang.Comparable getComparable(int) throws java.io.IOException"], ["org.apache.lucene.index.MultiSorter$LeafAndDocID", "org.apache.lucene.index.MultiSorter$LeafAndDocID(int, org.apache.lucene.util.Bits, int, int)", "public org.apache.lucene.index.MultiSorter$LeafAndDocID(int, org.apache.lucene.util.Bits, int, int)"], ["org.apache.lucene.index.MultiTerms", "org.apache.lucene.index.MultiTerms(org.apache.lucene.index.Terms[], org.apache.lucene.index.ReaderSlice[])", "public org.apache.lucene.index.MultiTerms(org.apache.lucene.index.Terms[], org.apache.lucene.index.ReaderSlice[]) throws java.io.IOException"], ["org.apache.lucene.index.Terms[]", "org.apache.lucene.index.MultiTerms.getSubTerms()", "public org.apache.lucene.index.Terms[] getSubTerms()"], ["org.apache.lucene.index.ReaderSlice[]", "org.apache.lucene.index.MultiTerms.getSubSlices()", "public org.apache.lucene.index.ReaderSlice[] getSubSlices()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.MultiTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiTerms.getMin()", "public org.apache.lucene.util.BytesRef getMin() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiTerms.getMax()", "public org.apache.lucene.util.BytesRef getMax() throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.MultiTerms.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiTerms.size()", "public long size()"], ["long", "org.apache.lucene.index.MultiTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiTerms.getSumDocFreq()", "public long getSumDocFreq() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiTerms.getDocCount()", "public int getDocCount() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiTerms.hasFreqs()", "public boolean hasFreqs()"], ["boolean", "org.apache.lucene.index.MultiTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.index.MultiTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.index.MultiTerms.hasPayloads()", "public boolean hasPayloads()"], ["int", "org.apache.lucene.index.MultiTermsEnum$1.compare(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice, org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)", "public int compare(org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice, org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice)"], ["int", "org.apache.lucene.index.MultiTermsEnum$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex", "org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex(org.apache.lucene.index.TermsEnum, int)", "public org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex(org.apache.lucene.index.TermsEnum, int)"], ["org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice", "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice(int, org.apache.lucene.index.ReaderSlice)", "public org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice(int, org.apache.lucene.index.ReaderSlice)"], ["void", "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.reset(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)", "public void reset(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.MultiTermsEnum.getMatchCount()", "public int getMatchCount()"], ["org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[]", "org.apache.lucene.index.MultiTermsEnum.getMatchArray()", "public org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] getMatchArray()"], ["org.apache.lucene.index.MultiTermsEnum", "org.apache.lucene.index.MultiTermsEnum(org.apache.lucene.index.ReaderSlice[])", "public org.apache.lucene.index.MultiTermsEnum(org.apache.lucene.index.ReaderSlice[])"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.MultiTermsEnum.reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[])", "public org.apache.lucene.index.TermsEnum reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiTermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.MultiTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.MultiTermsEnum.seekExact(long)", "public void seekExact(long)"], ["long", "org.apache.lucene.index.MultiTermsEnum.ord()", "public long ord()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.MultiTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.MultiTermsEnum.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.NoDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["void", "org.apache.lucene.index.NoDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["org.apache.lucene.index.IndexDeletionPolicy", "org.apache.lucene.index.NoDeletionPolicy.clone()", "public org.apache.lucene.index.IndexDeletionPolicy clone()"], ["java.lang.Object", "org.apache.lucene.index.NoDeletionPolicy.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.NoMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.NoMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.NoMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"], ["boolean", "org.apache.lucene.index.NoMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter)"], ["double", "org.apache.lucene.index.NoMergePolicy.getNoCFSRatio()", "public double getNoCFSRatio()"], ["void", "org.apache.lucene.index.NoMergePolicy.setMaxCFSSegmentSizeMB(double)", "public void setMaxCFSSegmentSizeMB(double)"], ["void", "org.apache.lucene.index.NoMergePolicy.setNoCFSRatio(double)", "public void setNoCFSRatio(double)"], ["java.lang.String", "org.apache.lucene.index.NoMergePolicy.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.NoMergeScheduler.close()", "public void close()"], ["void", "org.apache.lucene.index.NoMergeScheduler.merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean)", "public void merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.NoMergeScheduler.wrapForMerge(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)", "public org.apache.lucene.store.Directory wrapForMerge(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.MergeScheduler", "org.apache.lucene.index.NoMergeScheduler.clone()", "public org.apache.lucene.index.MergeScheduler clone()"], ["java.lang.Object", "org.apache.lucene.index.NoMergeScheduler.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.NormValuesWriter$1.getNorms(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNorms(org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.NormValuesWriter$1.checkIntegrity()", "public void checkIntegrity()"], ["void", "org.apache.lucene.index.NormValuesWriter$1.close()", "public void close()"], ["long", "org.apache.lucene.index.NormValuesWriter$1.ramBytesUsed()", "public long ramBytesUsed()"], ["int", "org.apache.lucene.index.NormValuesWriter$BufferedNorms.docID()", "public int docID()"], ["int", "org.apache.lucene.index.NormValuesWriter$BufferedNorms.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.NormValuesWriter$BufferedNorms.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.NormValuesWriter$BufferedNorms.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.NormValuesWriter$BufferedNorms.cost()", "public long cost()"], ["long", "org.apache.lucene.index.NormValuesWriter$BufferedNorms.longValue()", "public long longValue()"], ["org.apache.lucene.index.NormValuesWriter", "org.apache.lucene.index.NormValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)", "public org.apache.lucene.index.NormValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.index.NormValuesWriter.addValue(int, long)", "public void addValue(int, long)"], ["void", "org.apache.lucene.index.NormValuesWriter.finish(int)", "public void finish(int)"], ["void", "org.apache.lucene.index.NormValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.NormsConsumer)", "public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.NormsConsumer) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValuesFieldUpdates", "org.apache.lucene.index.NumericDocValuesFieldUpdates(long, java.lang.String, int)", "public org.apache.lucene.index.NumericDocValuesFieldUpdates(long, java.lang.String, int)"], ["int", "org.apache.lucene.index.NumericDocValuesFieldUpdates.size()", "public int size()"], ["synchronized", "org.apache.lucene.index.NumericDocValuesFieldUpdates.void add(int, java.lang.Object)", "public synchronized void add(int, java.lang.Object)"], ["void", "org.apache.lucene.index.NumericDocValuesFieldUpdates.finish()", "public void finish()"], ["org.apache.lucene.index.NumericDocValuesFieldUpdates$Iterator", "org.apache.lucene.index.NumericDocValuesFieldUpdates.iterator()", "public org.apache.lucene.index.NumericDocValuesFieldUpdates$Iterator iterator()"], ["boolean", "org.apache.lucene.index.NumericDocValuesFieldUpdates.any()", "public boolean any()"], ["long", "org.apache.lucene.index.NumericDocValuesFieldUpdates.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.DocValuesFieldUpdates$Iterator", "org.apache.lucene.index.NumericDocValuesFieldUpdates.iterator()", "public org.apache.lucene.index.DocValuesFieldUpdates$Iterator iterator()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.NumericDocValuesWriter$1.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo)"], ["int", "org.apache.lucene.index.NumericDocValuesWriter$BufferedNumericDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.NumericDocValuesWriter$BufferedNumericDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.NumericDocValuesWriter$BufferedNumericDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.NumericDocValuesWriter$BufferedNumericDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.NumericDocValuesWriter$BufferedNumericDocValues.cost()", "public long cost()"], ["long", "org.apache.lucene.index.NumericDocValuesWriter$BufferedNumericDocValues.longValue()", "public long longValue()"], ["org.apache.lucene.index.NumericDocValuesWriter", "org.apache.lucene.index.NumericDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)", "public org.apache.lucene.index.NumericDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.index.NumericDocValuesWriter.addValue(int, long)", "public void addValue(int, long)"], ["void", "org.apache.lucene.index.NumericDocValuesWriter.finish(int)", "public void finish(int)"], ["void", "org.apache.lucene.index.NumericDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer)", "public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer) throws java.io.IOException"], ["org.apache.lucene.index.OneMergeWrappingMergePolicy", "org.apache.lucene.index.OneMergeWrappingMergePolicy(org.apache.lucene.index.MergePolicy, java.util.function.UnaryOperator<org.apache.lucene.index.MergePolicy$OneMerge>)", "public org.apache.lucene.index.OneMergeWrappingMergePolicy(org.apache.lucene.index.MergePolicy, java.util.function.UnaryOperator<org.apache.lucene.index.MergePolicy$OneMerge>)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.OneMergeWrappingMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.OneMergeWrappingMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.OneMergeWrappingMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.OrdTermState", "org.apache.lucene.index.OrdTermState()", "public org.apache.lucene.index.OrdTermState()"], ["void", "org.apache.lucene.index.OrdTermState.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["java.lang.String", "org.apache.lucene.index.OrdTermState.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.ParallelCompositeReader", "org.apache.lucene.index.ParallelCompositeReader(org.apache.lucene.index.CompositeReader...)", "public org.apache.lucene.index.ParallelCompositeReader(org.apache.lucene.index.CompositeReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelCompositeReader", "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader...)", "public org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelCompositeReader", "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[])", "public org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[]) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.ParallelCompositeReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.ParallelLeafReader$ParallelFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.ParallelLeafReader$ParallelFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String)"], ["int", "org.apache.lucene.index.ParallelLeafReader$ParallelFields.size()", "public int size()"], ["org.apache.lucene.index.ParallelLeafReader", "org.apache.lucene.index.ParallelLeafReader(org.apache.lucene.index.LeafReader...)", "public org.apache.lucene.index.ParallelLeafReader(org.apache.lucene.index.LeafReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelLeafReader", "org.apache.lucene.index.ParallelLeafReader(boolean, org.apache.lucene.index.LeafReader...)", "public org.apache.lucene.index.ParallelLeafReader(boolean, org.apache.lucene.index.LeafReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelLeafReader", "org.apache.lucene.index.ParallelLeafReader(boolean, org.apache.lucene.index.LeafReader[], org.apache.lucene.index.LeafReader[])", "public org.apache.lucene.index.ParallelLeafReader(boolean, org.apache.lucene.index.LeafReader[], org.apache.lucene.index.LeafReader[]) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.ParallelLeafReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.ParallelLeafReader.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.ParallelLeafReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.ParallelLeafReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.ParallelLeafReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.ParallelLeafReader.maxDoc()", "public int maxDoc()"], ["void", "org.apache.lucene.index.ParallelLeafReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.ParallelLeafReader.getCoreCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getCoreCacheHelper()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.ParallelLeafReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.ParallelLeafReader.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.ParallelLeafReader.getNumericDocValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.ParallelLeafReader.getBinaryDocValues(java.lang.String)", "public org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.ParallelLeafReader.getSortedDocValues(java.lang.String)", "public org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.ParallelLeafReader.getSortedNumericDocValues(java.lang.String)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.ParallelLeafReader.getSortedSetDocValues(java.lang.String)", "public org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.ParallelLeafReader.getNormValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.index.ParallelLeafReader.getPointValues(java.lang.String)", "public org.apache.lucene.index.PointValues getPointValues(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelLeafReader.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["org.apache.lucene.index.LeafReader[]", "org.apache.lucene.index.ParallelLeafReader.getParallelReaders()", "public org.apache.lucene.index.LeafReader[] getParallelReaders()"], ["org.apache.lucene.index.LeafMetaData", "org.apache.lucene.index.ParallelLeafReader.getMetaData()", "public org.apache.lucene.index.LeafMetaData getMetaData()"], ["org.apache.lucene.index.PersistentSnapshotDeletionPolicy", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.PersistentSnapshotDeletionPolicy", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig$OpenMode)", "public org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig$OpenMode) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot()", "public synchronized org.apache.lucene.index.IndexCommit snapshot() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void release(org.apache.lucene.index.IndexCommit)", "public synchronized void release(org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void release(long)", "public synchronized void release(long) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.getLastSaveFile()", "public java.lang.String getLastSaveFile()"], ["default", "org.apache.lucene.index.PointValues$IntersectVisitor.void grow(int)", "public default void grow(int)"], ["org.apache.lucene.index.PointValues$Relation[]", "org.apache.lucene.index.PointValues$Relation.values()", "public static org.apache.lucene.index.PointValues$Relation[] values()"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.index.PointValues$Relation.valueOf(java.lang.String)", "public static org.apache.lucene.index.PointValues$Relation valueOf(java.lang.String)"], ["long", "org.apache.lucene.index.PointValues.size(org.apache.lucene.index.IndexReader, java.lang.String)", "public static long size(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.PointValues.getDocCount(org.apache.lucene.index.IndexReader, java.lang.String)", "public static int getDocCount(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["byte[]", "org.apache.lucene.index.PointValues.getMinPackedValue(org.apache.lucene.index.IndexReader, java.lang.String)", "public static byte[] getMinPackedValue(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["byte[]", "org.apache.lucene.index.PointValues.getMaxPackedValue(org.apache.lucene.index.IndexReader, java.lang.String)", "public static byte[] getMaxPackedValue(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.PointValuesWriter$1.intersect(org.apache.lucene.index.PointValues$IntersectVisitor)", "public void intersect(org.apache.lucene.index.PointValues$IntersectVisitor) throws java.io.IOException"], ["long", "org.apache.lucene.index.PointValuesWriter$1.estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)", "public long estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)"], ["byte[]", "org.apache.lucene.index.PointValuesWriter$1.getMinPackedValue()", "public byte[] getMinPackedValue()"], ["byte[]", "org.apache.lucene.index.PointValuesWriter$1.getMaxPackedValue()", "public byte[] getMaxPackedValue()"], ["int", "org.apache.lucene.index.PointValuesWriter$1.getNumDimensions()", "public int getNumDimensions()"], ["int", "org.apache.lucene.index.PointValuesWriter$1.getBytesPerDimension()", "public int getBytesPerDimension()"], ["long", "org.apache.lucene.index.PointValuesWriter$1.size()", "public long size()"], ["int", "org.apache.lucene.index.PointValuesWriter$1.getDocCount()", "public int getDocCount()"], ["void", "org.apache.lucene.index.PointValuesWriter$1.swap(int, int)", "public void swap(int, int)"], ["int", "org.apache.lucene.index.PointValuesWriter$1.getDocID(int)", "public int getDocID(int)"], ["void", "org.apache.lucene.index.PointValuesWriter$1.getValue(int, org.apache.lucene.util.BytesRef)", "public void getValue(int, org.apache.lucene.util.BytesRef)"], ["byte", "org.apache.lucene.index.PointValuesWriter$1.getByteAt(int, int)", "public byte getByteAt(int, int)"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.index.PointValuesWriter$2.getValues(java.lang.String)", "public org.apache.lucene.index.PointValues getValues(java.lang.String)"], ["void", "org.apache.lucene.index.PointValuesWriter$2.checkIntegrity()", "public void checkIntegrity()"], ["long", "org.apache.lucene.index.PointValuesWriter$2.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.index.PointValuesWriter$2.close()", "public void close()"], ["void", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues$1.visit(int)", "public void visit(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues$1.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues(org.apache.lucene.codecs.MutablePointValues, org.apache.lucene.index.Sorter$DocMap)", "public org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues(org.apache.lucene.codecs.MutablePointValues, org.apache.lucene.index.Sorter$DocMap)"], ["void", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.intersect(org.apache.lucene.index.PointValues$IntersectVisitor)", "public void intersect(org.apache.lucene.index.PointValues$IntersectVisitor) throws java.io.IOException"], ["long", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)", "public long estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)"], ["byte[]", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getMinPackedValue()", "public byte[] getMinPackedValue() throws java.io.IOException"], ["byte[]", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getMaxPackedValue()", "public byte[] getMaxPackedValue() throws java.io.IOException"], ["int", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getNumDimensions()", "public int getNumDimensions() throws java.io.IOException"], ["int", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getBytesPerDimension()", "public int getBytesPerDimension() throws java.io.IOException"], ["long", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.size()", "public long size()"], ["int", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getDocCount()", "public int getDocCount()"], ["void", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getValue(int, org.apache.lucene.util.BytesRef)", "public void getValue(int, org.apache.lucene.util.BytesRef)"], ["byte", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getByteAt(int, int)", "public byte getByteAt(int, int)"], ["int", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.getDocID(int)", "public int getDocID(int)"], ["void", "org.apache.lucene.index.PointValuesWriter$MutableSortingPointValues.swap(int, int)", "public void swap(int, int)"], ["org.apache.lucene.index.PointValuesWriter", "org.apache.lucene.index.PointValuesWriter(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.PointValuesWriter(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.PointValuesWriter.addPackedValue(int, org.apache.lucene.util.BytesRef)", "public void addPackedValue(int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.index.PointValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.PointsWriter)", "public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.PointsWriter) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.PostingsEnum.featureRequested(int, short)", "public static boolean featureRequested(int, short)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.PostingsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.index.PrefixCodedTerms$Builder", "org.apache.lucene.index.PrefixCodedTerms$Builder()", "public org.apache.lucene.index.PrefixCodedTerms$Builder()"], ["void", "org.apache.lucene.index.PrefixCodedTerms$Builder.add(org.apache.lucene.index.Term)", "public void add(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.index.PrefixCodedTerms$Builder.add(java.lang.String, org.apache.lucene.util.BytesRef)", "public void add(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.PrefixCodedTerms", "org.apache.lucene.index.PrefixCodedTerms$Builder.finish()", "public org.apache.lucene.index.PrefixCodedTerms finish()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.PrefixCodedTerms$TermIterator.next()", "public org.apache.lucene.util.BytesRef next()"], ["java.lang.String", "org.apache.lucene.index.PrefixCodedTerms$TermIterator.field()", "public java.lang.String field()"], ["long", "org.apache.lucene.index.PrefixCodedTerms$TermIterator.delGen()", "public long delGen()"], ["long", "org.apache.lucene.index.PrefixCodedTerms.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.index.PrefixCodedTerms.setDelGen(long)", "public void setDelGen(long)"], ["org.apache.lucene.index.PrefixCodedTerms$TermIterator", "org.apache.lucene.index.PrefixCodedTerms.iterator()", "public org.apache.lucene.index.PrefixCodedTerms$TermIterator iterator()"], ["long", "org.apache.lucene.index.PrefixCodedTerms.size()", "public long size()"], ["int", "org.apache.lucene.index.PrefixCodedTerms.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.index.PrefixCodedTerms.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["default", "org.apache.lucene.index.QueryTimeout.boolean isTimeoutEnabled()", "public default boolean isTimeoutEnabled()"], ["org.apache.lucene.index.QueryTimeoutImpl", "org.apache.lucene.index.QueryTimeoutImpl(long)", "public org.apache.lucene.index.QueryTimeoutImpl(long)"], ["java.lang.Long", "org.apache.lucene.index.QueryTimeoutImpl.getTimeoutAt()", "public java.lang.Long getTimeoutAt()"], ["boolean", "org.apache.lucene.index.QueryTimeoutImpl.shouldExit()", "public boolean shouldExit()"], ["void", "org.apache.lucene.index.QueryTimeoutImpl.reset()", "public void reset()"], ["java.lang.String", "org.apache.lucene.index.QueryTimeoutImpl.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.ReaderManager", "org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.ReaderManager", "org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter, boolean, boolean)", "public org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.index.ReaderManager", "org.apache.lucene.index.ReaderManager(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.ReaderManager(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.ReaderManager", "org.apache.lucene.index.ReaderManager(org.apache.lucene.index.DirectoryReader)", "public org.apache.lucene.index.ReaderManager(org.apache.lucene.index.DirectoryReader) throws java.io.IOException"], ["org.apache.lucene.index.ReaderSlice", "org.apache.lucene.index.ReaderSlice(int, int, int)", "public org.apache.lucene.index.ReaderSlice(int, int, int)"], ["java.lang.String", "org.apache.lucene.index.ReaderSlice.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.index.ReaderUtil.getTopLevelContext(org.apache.lucene.index.IndexReaderContext)", "public static org.apache.lucene.index.IndexReaderContext getTopLevelContext(org.apache.lucene.index.IndexReaderContext)"], ["int", "org.apache.lucene.index.ReaderUtil.subIndex(int, int[])", "public static int subIndex(int, int[])"], ["int", "org.apache.lucene.index.ReaderUtil.subIndex(int, java.util.List<org.apache.lucene.index.LeafReaderContext>)", "public static int subIndex(int, java.util.List<org.apache.lucene.index.LeafReaderContext>)"], ["int", "org.apache.lucene.index.ReadersAndUpdates$1$1.docID()", "public int docID()"], ["int", "org.apache.lucene.index.ReadersAndUpdates$1$1.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.ReadersAndUpdates$1$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.ReadersAndUpdates$1$1.cost()", "public long cost()"], ["long", "org.apache.lucene.index.ReadersAndUpdates$1$1.longValue()", "public long longValue()"], ["int", "org.apache.lucene.index.ReadersAndUpdates$1$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.ReadersAndUpdates$1.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["int", "org.apache.lucene.index.ReadersAndUpdates$2$1.docID()", "public int docID()"], ["int", "org.apache.lucene.index.ReadersAndUpdates$2$1.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.ReadersAndUpdates$2$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.ReadersAndUpdates$2$1.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.ReadersAndUpdates$2$1.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["int", "org.apache.lucene.index.ReadersAndUpdates$2$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.ReadersAndUpdates$2.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.ReadersAndUpdates", "org.apache.lucene.index.ReadersAndUpdates(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentCommitInfo)", "public org.apache.lucene.index.ReadersAndUpdates(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentCommitInfo)"], ["org.apache.lucene.index.ReadersAndUpdates", "org.apache.lucene.index.ReadersAndUpdates(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentReader)", "public org.apache.lucene.index.ReadersAndUpdates(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentReader)"], ["void", "org.apache.lucene.index.ReadersAndUpdates.incRef()", "public void incRef()"], ["void", "org.apache.lucene.index.ReadersAndUpdates.decRef()", "public void decRef()"], ["int", "org.apache.lucene.index.ReadersAndUpdates.refCount()", "public int refCount()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.int getPendingDeleteCount()", "public synchronized int getPendingDeleteCount()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.void addDVUpdate(org.apache.lucene.index.DocValuesFieldUpdates)", "public synchronized void addDVUpdate(org.apache.lucene.index.DocValuesFieldUpdates)"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.long getNumDVUpdates()", "public synchronized long getNumDVUpdates()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.boolean verifyDocCounts()", "public synchronized boolean verifyDocCounts()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.void release(org.apache.lucene.index.SegmentReader)", "public synchronized void release(org.apache.lucene.index.SegmentReader) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.boolean delete(int)", "public synchronized boolean delete(int) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.void dropReaders()", "public synchronized void dropReaders() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.org.apache.lucene.util.Bits getLiveDocs()", "public synchronized org.apache.lucene.util.Bits getLiveDocs()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.org.apache.lucene.util.Bits getReadOnlyLiveDocs()", "public synchronized org.apache.lucene.util.Bits getReadOnlyLiveDocs()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.void dropChanges()", "public synchronized void dropChanges()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.boolean writeLiveDocs(org.apache.lucene.store.Directory)", "public synchronized boolean writeLiveDocs(org.apache.lucene.store.Directory) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.boolean writeFieldUpdates(org.apache.lucene.store.Directory, long, org.apache.lucene.util.InfoStream)", "public synchronized boolean writeFieldUpdates(org.apache.lucene.store.Directory, long, org.apache.lucene.util.InfoStream) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.void setIsMerging()", "public synchronized void setIsMerging()"], ["synchronized", "org.apache.lucene.index.ReadersAndUpdates.void dropMergingUpdates()", "public synchronized void dropMergingUpdates()"], ["java.util.Map<java.lang.String, java.util.List<org.apache.lucene.index.DocValuesFieldUpdates>>", "org.apache.lucene.index.ReadersAndUpdates.getMergingDVUpdates()", "public synchronized java.util.Map<java.lang.String, java.util.List<org.apache.lucene.index.DocValuesFieldUpdates>> getMergingDVUpdates()"], ["java.lang.String", "org.apache.lucene.index.ReadersAndUpdates.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.SegmentCommitInfo", "org.apache.lucene.index.SegmentCommitInfo(org.apache.lucene.index.SegmentInfo, int, long, long, long)", "public org.apache.lucene.index.SegmentCommitInfo(org.apache.lucene.index.SegmentInfo, int, long, long, long)"], ["java.util.Map<java.lang.Integer, java.util.Set<java.lang.String>>", "org.apache.lucene.index.SegmentCommitInfo.getDocValuesUpdatesFiles()", "public java.util.Map<java.lang.Integer, java.util.Set<java.lang.String>> getDocValuesUpdatesFiles()"], ["void", "org.apache.lucene.index.SegmentCommitInfo.setDocValuesUpdatesFiles(java.util.Map<java.lang.Integer, java.util.Set<java.lang.String>>)", "public void setDocValuesUpdatesFiles(java.util.Map<java.lang.Integer, java.util.Set<java.lang.String>>)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.index.SegmentCommitInfo.getFieldInfosFiles()", "public java.util.Set<java.lang.String> getFieldInfosFiles()"], ["void", "org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(java.util.Set<java.lang.String>)", "public void setFieldInfosFiles(java.util.Set<java.lang.String>)"], ["long", "org.apache.lucene.index.SegmentCommitInfo.sizeInBytes()", "public long sizeInBytes() throws java.io.IOException"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SegmentCommitInfo.files()", "public java.util.Collection<java.lang.String> files() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentCommitInfo.hasDeletions()", "public boolean hasDeletions()"], ["boolean", "org.apache.lucene.index.SegmentCommitInfo.hasFieldUpdates()", "public boolean hasFieldUpdates()"], ["long", "org.apache.lucene.index.SegmentCommitInfo.getNextFieldInfosGen()", "public long getNextFieldInfosGen()"], ["long", "org.apache.lucene.index.SegmentCommitInfo.getFieldInfosGen()", "public long getFieldInfosGen()"], ["long", "org.apache.lucene.index.SegmentCommitInfo.getNextDocValuesGen()", "public long getNextDocValuesGen()"], ["long", "org.apache.lucene.index.SegmentCommitInfo.getDocValuesGen()", "public long getDocValuesGen()"], ["long", "org.apache.lucene.index.SegmentCommitInfo.getNextDelGen()", "public long getNextDelGen()"], ["long", "org.apache.lucene.index.SegmentCommitInfo.getDelGen()", "public long getDelGen()"], ["int", "org.apache.lucene.index.SegmentCommitInfo.getDelCount()", "public int getDelCount()"], ["java.lang.String", "org.apache.lucene.index.SegmentCommitInfo.toString(int)", "public java.lang.String toString(int)"], ["java.lang.String", "org.apache.lucene.index.SegmentCommitInfo.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.SegmentCommitInfo", "org.apache.lucene.index.SegmentCommitInfo.clone()", "public org.apache.lucene.index.SegmentCommitInfo clone()"], ["java.lang.Object", "org.apache.lucene.index.SegmentCommitInfo.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.IndexReader$CacheKey", "org.apache.lucene.index.SegmentCoreReaders$3.getKey()", "public org.apache.lucene.index.IndexReader$CacheKey getKey()"], ["void", "org.apache.lucene.index.SegmentCoreReaders$3.addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)", "public void addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)"], ["java.lang.String", "org.apache.lucene.index.SegmentCoreReaders.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.SegmentDocValuesProducer.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.SegmentDocValuesProducer.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.SegmentDocValuesProducer.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.SegmentDocValuesProducer.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.SegmentDocValuesProducer.getSortedSet(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentDocValuesProducer.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentDocValuesProducer.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.index.SegmentDocValuesProducer.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.index.SegmentDocValuesProducer.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["java.lang.String", "org.apache.lucene.index.SegmentDocValuesProducer.toString()", "public java.lang.String toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfo.getDiagnostics()", "public java.util.Map<java.lang.String, java.lang.String> getDiagnostics()"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.index.SegmentInfo(org.apache.lucene.store.Directory, org.apache.lucene.util.Version, org.apache.lucene.util.Version, java.lang.String, int, boolean, org.apache.lucene.codecs.Codec, java.util.Map<java.lang.String, java.lang.String>, byte[], java.util.Map<java.lang.String, java.lang.String>, org.apache.lucene.search.Sort)", "public org.apache.lucene.index.SegmentInfo(org.apache.lucene.store.Directory, org.apache.lucene.util.Version, org.apache.lucene.util.Version, java.lang.String, int, boolean, org.apache.lucene.codecs.Codec, java.util.Map<java.lang.String, java.lang.String>, byte[], java.util.Map<java.lang.String, java.lang.String>, org.apache.lucene.search.Sort)"], ["boolean", "org.apache.lucene.index.SegmentInfo.getUseCompoundFile()", "public boolean getUseCompoundFile()"], ["void", "org.apache.lucene.index.SegmentInfo.setCodec(org.apache.lucene.codecs.Codec)", "public void setCodec(org.apache.lucene.codecs.Codec)"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.index.SegmentInfo.getCodec()", "public org.apache.lucene.codecs.Codec getCodec()"], ["int", "org.apache.lucene.index.SegmentInfo.maxDoc()", "public int maxDoc()"], ["java.util.Set<java.lang.String>", "org.apache.lucene.index.SegmentInfo.files()", "public java.util.Set<java.lang.String> files()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.toString(int)", "public java.lang.String toString(int)"], ["boolean", "org.apache.lucene.index.SegmentInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.SegmentInfo.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.Version", "org.apache.lucene.index.SegmentInfo.getVersion()", "public org.apache.lucene.util.Version getVersion()"], ["org.apache.lucene.util.Version", "org.apache.lucene.index.SegmentInfo.getMinVersion()", "public org.apache.lucene.util.Version getMinVersion()"], ["byte[]", "org.apache.lucene.index.SegmentInfo.getId()", "public byte[] getId()"], ["void", "org.apache.lucene.index.SegmentInfo.setFiles(java.util.Collection<java.lang.String>)", "public void setFiles(java.util.Collection<java.lang.String>)"], ["void", "org.apache.lucene.index.SegmentInfo.addFiles(java.util.Collection<java.lang.String>)", "public void addFiles(java.util.Collection<java.lang.String>)"], ["void", "org.apache.lucene.index.SegmentInfo.addFile(java.lang.String)", "public void addFile(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.getAttribute(java.lang.String)", "public java.lang.String getAttribute(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.putAttribute(java.lang.String, java.lang.String)", "public java.lang.String putAttribute(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfo.getAttributes()", "public java.util.Map<java.lang.String, java.lang.String> getAttributes()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.index.SegmentInfo.getIndexSort()", "public org.apache.lucene.search.Sort getIndexSort()"], ["org.apache.lucene.index.SegmentInfos$FindSegmentsFile", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)"], ["T", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run()", "public T run() throws java.io.IOException"], ["T", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(org.apache.lucene.index.IndexCommit)", "public T run(org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos(int)", "public org.apache.lucene.index.SegmentInfos(int)"], ["org.apache.lucene.index.SegmentCommitInfo", "org.apache.lucene.index.SegmentInfos.info(int)", "public org.apache.lucene.index.SegmentCommitInfo info(int)"], ["long", "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(java.lang.String[])", "public static long getLastCommitGeneration(java.lang.String[])"], ["long", "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(org.apache.lucene.store.Directory)", "public static long getLastCommitGeneration(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(java.lang.String[])", "public static java.lang.String getLastCommitSegmentsFileName(java.lang.String[])"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(org.apache.lucene.store.Directory)", "public static java.lang.String getLastCommitSegmentsFileName(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["long", "org.apache.lucene.index.SegmentInfos.generationFromSegmentsFileName(java.lang.String)", "public static long generationFromSegmentsFileName(java.lang.String)"], ["byte[]", "org.apache.lucene.index.SegmentInfos.getId()", "public byte[] getId()"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos.readCommit(org.apache.lucene.store.Directory, java.lang.String)", "public static final org.apache.lucene.index.SegmentInfos readCommit(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos.readCommit(org.apache.lucene.store.Directory, org.apache.lucene.store.ChecksumIndexInput, long)", "public static final org.apache.lucene.index.SegmentInfos readCommit(org.apache.lucene.store.Directory, org.apache.lucene.store.ChecksumIndexInput, long) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos.readLatestCommit(org.apache.lucene.store.Directory)", "public static final org.apache.lucene.index.SegmentInfos readLatestCommit(org.apache.lucene.store.Directory) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentInfos.write(org.apache.lucene.store.Directory, org.apache.lucene.store.IndexOutput)", "public void write(org.apache.lucene.store.Directory, org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos.clone()", "public org.apache.lucene.index.SegmentInfos clone()"], ["long", "org.apache.lucene.index.SegmentInfos.getVersion()", "public long getVersion()"], ["long", "org.apache.lucene.index.SegmentInfos.getGeneration()", "public long getGeneration()"], ["long", "org.apache.lucene.index.SegmentInfos.getLastGeneration()", "public long getLastGeneration()"], ["void", "org.apache.lucene.index.SegmentInfos.setInfoStream(java.io.PrintStream)", "public static void setInfoStream(java.io.PrintStream)"], ["java.io.PrintStream", "org.apache.lucene.index.SegmentInfos.getInfoStream()", "public static java.io.PrintStream getInfoStream()"], ["void", "org.apache.lucene.index.SegmentInfos.updateGeneration(org.apache.lucene.index.SegmentInfos)", "public void updateGeneration(org.apache.lucene.index.SegmentInfos)"], ["void", "org.apache.lucene.index.SegmentInfos.setNextWriteGeneration(long)", "public void setNextWriteGeneration(long)"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SegmentInfos.files(boolean)", "public java.util.Collection<java.lang.String> files(boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentInfos.commit(org.apache.lucene.store.Directory)", "public final void commit(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.toString()", "public java.lang.String toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfos.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["void", "org.apache.lucene.index.SegmentInfos.setUserData(java.util.Map<java.lang.String, java.lang.String>, boolean)", "public void setUserData(java.util.Map<java.lang.String, java.lang.String>, boolean)"], ["int", "org.apache.lucene.index.SegmentInfos.totalMaxDoc()", "public int totalMaxDoc()"], ["void", "org.apache.lucene.index.SegmentInfos.changed()", "public void changed()"], ["java.util.Iterator<org.apache.lucene.index.SegmentCommitInfo>", "org.apache.lucene.index.SegmentInfos.iterator()", "public java.util.Iterator<org.apache.lucene.index.SegmentCommitInfo> iterator()"], ["java.util.List<org.apache.lucene.index.SegmentCommitInfo>", "org.apache.lucene.index.SegmentInfos.asList()", "public java.util.List<org.apache.lucene.index.SegmentCommitInfo> asList()"], ["int", "org.apache.lucene.index.SegmentInfos.size()", "public int size()"], ["void", "org.apache.lucene.index.SegmentInfos.add(org.apache.lucene.index.SegmentCommitInfo)", "public void add(org.apache.lucene.index.SegmentCommitInfo)"], ["void", "org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable<org.apache.lucene.index.SegmentCommitInfo>)", "public void addAll(java.lang.Iterable<org.apache.lucene.index.SegmentCommitInfo>)"], ["void", "org.apache.lucene.index.SegmentInfos.clear()", "public void clear()"], ["void", "org.apache.lucene.index.SegmentInfos.remove(org.apache.lucene.index.SegmentCommitInfo)", "public void remove(org.apache.lucene.index.SegmentCommitInfo)"], ["org.apache.lucene.util.Version", "org.apache.lucene.index.SegmentInfos.getCommitLuceneVersion()", "public org.apache.lucene.util.Version getCommitLuceneVersion()"], ["org.apache.lucene.util.Version", "org.apache.lucene.index.SegmentInfos.getMinSegmentLuceneVersion()", "public org.apache.lucene.util.Version getMinSegmentLuceneVersion()"], ["int", "org.apache.lucene.index.SegmentInfos.getIndexCreatedVersionMajor()", "public int getIndexCreatedVersionMajor()"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfos.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.index.SegmentMerger.mergeFieldInfos()", "public void mergeFieldInfos() throws java.io.IOException"], ["org.apache.lucene.index.SegmentReadState", "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.index.SegmentReadState", "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String)", "public org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String)"], ["org.apache.lucene.index.SegmentReadState", "org.apache.lucene.index.SegmentReadState(org.apache.lucene.index.SegmentReadState, java.lang.String)", "public org.apache.lucene.index.SegmentReadState(org.apache.lucene.index.SegmentReadState, java.lang.String)"], ["org.apache.lucene.index.IndexReader$CacheKey", "org.apache.lucene.index.SegmentReader$1.getKey()", "public org.apache.lucene.index.IndexReader$CacheKey getKey()"], ["void", "org.apache.lucene.index.SegmentReader$1.addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)", "public void addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)"], ["org.apache.lucene.index.IndexReader$CacheKey", "org.apache.lucene.index.SegmentReader$2.getKey()", "public org.apache.lucene.index.IndexReader$CacheKey getKey()"], ["void", "org.apache.lucene.index.SegmentReader$2.addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)", "public void addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)"], ["org.apache.lucene.index.SegmentReader", "org.apache.lucene.index.SegmentReader(org.apache.lucene.index.SegmentCommitInfo, int, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentReader(org.apache.lucene.index.SegmentCommitInfo, int, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.SegmentReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.SegmentReader.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["int", "org.apache.lucene.index.SegmentReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.SegmentReader.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.index.SegmentReader.getTermVectorsReader()", "public org.apache.lucene.codecs.TermVectorsReader getTermVectorsReader()"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.index.SegmentReader.getFieldsReader()", "public org.apache.lucene.codecs.StoredFieldsReader getFieldsReader()"], ["org.apache.lucene.codecs.PointsReader", "org.apache.lucene.index.SegmentReader.getPointsReader()", "public org.apache.lucene.codecs.PointsReader getPointsReader()"], ["org.apache.lucene.codecs.NormsProducer", "org.apache.lucene.index.SegmentReader.getNormsReader()", "public org.apache.lucene.codecs.NormsProducer getNormsReader()"], ["org.apache.lucene.codecs.DocValuesProducer", "org.apache.lucene.index.SegmentReader.getDocValuesReader()", "public org.apache.lucene.codecs.DocValuesProducer getDocValuesReader()"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.index.SegmentReader.getPostingsReader()", "public org.apache.lucene.codecs.FieldsProducer getPostingsReader()"], ["java.lang.String", "org.apache.lucene.index.SegmentReader.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.SegmentReader.getSegmentName()", "public java.lang.String getSegmentName()"], ["org.apache.lucene.index.SegmentCommitInfo", "org.apache.lucene.index.SegmentReader.getSegmentInfo()", "public org.apache.lucene.index.SegmentCommitInfo getSegmentInfo()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.SegmentReader.directory()", "public org.apache.lucene.store.Directory directory()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.SegmentReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.SegmentReader.getCoreCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getCoreCacheHelper()"], ["org.apache.lucene.index.LeafMetaData", "org.apache.lucene.index.SegmentReader.getMetaData()", "public org.apache.lucene.index.LeafMetaData getMetaData()"], ["org.apache.lucene.index.SegmentWriteState", "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.index.SegmentWriteState", "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.store.IOContext, java.lang.String)", "public org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.store.IOContext, java.lang.String)"], ["org.apache.lucene.index.SegmentWriteState", "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.SegmentWriteState, java.lang.String)", "public org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.SegmentWriteState, java.lang.String)"], ["org.apache.lucene.index.SerialMergeScheduler", "org.apache.lucene.index.SerialMergeScheduler()", "public org.apache.lucene.index.SerialMergeScheduler()"], ["synchronized", "org.apache.lucene.index.SerialMergeScheduler.void merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean)", "public synchronized void merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.SerialMergeScheduler.close()", "public void close()"], ["org.apache.lucene.index.SimpleMergedSegmentWarmer", "org.apache.lucene.index.SimpleMergedSegmentWarmer(org.apache.lucene.util.InfoStream)", "public org.apache.lucene.index.SimpleMergedSegmentWarmer(org.apache.lucene.util.InfoStream)"], ["void", "org.apache.lucene.index.SimpleMergedSegmentWarmer.warm(org.apache.lucene.index.LeafReader)", "public void warm(org.apache.lucene.index.LeafReader) throws java.io.IOException"], ["org.apache.lucene.index.SingleTermsEnum", "org.apache.lucene.index.SingleTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.SingleTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.SingletonSortedNumericDocValues", "org.apache.lucene.index.SingletonSortedNumericDocValues(org.apache.lucene.index.NumericDocValues)", "public org.apache.lucene.index.SingletonSortedNumericDocValues(org.apache.lucene.index.NumericDocValues)"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.SingletonSortedNumericDocValues.getNumericDocValues()", "public org.apache.lucene.index.NumericDocValues getNumericDocValues()"], ["int", "org.apache.lucene.index.SingletonSortedNumericDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SingletonSortedNumericDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.SingletonSortedNumericDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SingletonSortedNumericDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.SingletonSortedNumericDocValues.cost()", "public long cost()"], ["long", "org.apache.lucene.index.SingletonSortedNumericDocValues.nextValue()", "public long nextValue() throws java.io.IOException"], ["int", "org.apache.lucene.index.SingletonSortedNumericDocValues.docValueCount()", "public int docValueCount()"], ["org.apache.lucene.index.SingletonSortedSetDocValues", "org.apache.lucene.index.SingletonSortedSetDocValues(org.apache.lucene.index.SortedDocValues)", "public org.apache.lucene.index.SingletonSortedSetDocValues(org.apache.lucene.index.SortedDocValues)"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.SingletonSortedSetDocValues.getSortedDocValues()", "public org.apache.lucene.index.SortedDocValues getSortedDocValues()"], ["int", "org.apache.lucene.index.SingletonSortedSetDocValues.docID()", "public int docID()"], ["long", "org.apache.lucene.index.SingletonSortedSetDocValues.nextOrd()", "public long nextOrd()"], ["int", "org.apache.lucene.index.SingletonSortedSetDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.SingletonSortedSetDocValues.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SingletonSortedSetDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SingletonSortedSetDocValues.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long) throws java.io.IOException"], ["long", "org.apache.lucene.index.SingletonSortedSetDocValues.getValueCount()", "public long getValueCount()"], ["long", "org.apache.lucene.index.SingletonSortedSetDocValues.lookupTerm(org.apache.lucene.util.BytesRef)", "public long lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.SingletonSortedSetDocValues.termsEnum()", "public org.apache.lucene.index.TermsEnum termsEnum() throws java.io.IOException"], ["long", "org.apache.lucene.index.SingletonSortedSetDocValues.cost()", "public long cost()"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getTermVectorsReader()", "public org.apache.lucene.codecs.TermVectorsReader getTermVectorsReader()"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getFieldsReader()", "public org.apache.lucene.codecs.StoredFieldsReader getFieldsReader()"], ["org.apache.lucene.codecs.NormsProducer", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getNormsReader()", "public org.apache.lucene.codecs.NormsProducer getNormsReader()"], ["org.apache.lucene.codecs.DocValuesProducer", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getDocValuesReader()", "public org.apache.lucene.codecs.DocValuesProducer getDocValuesReader()"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getPostingsReader()", "public org.apache.lucene.codecs.FieldsProducer getPostingsReader()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.codecs.PointsReader", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getPointsReader()", "public org.apache.lucene.codecs.PointsReader getPointsReader()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["int", "org.apache.lucene.index.SlowCodecReaderWrapper$1.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.SlowCodecReaderWrapper$1.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getCoreCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getCoreCacheHelper()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["java.lang.String", "org.apache.lucene.index.SlowCodecReaderWrapper$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.LeafMetaData", "org.apache.lucene.index.SlowCodecReaderWrapper$1.getMetaData()", "public org.apache.lucene.index.LeafMetaData getMetaData()"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.index.SlowCodecReaderWrapper$2.getValues(java.lang.String)", "public org.apache.lucene.index.PointValues getValues(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$2.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$2.close()", "public void close()"], ["long", "org.apache.lucene.index.SlowCodecReaderWrapper$2.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.SlowCodecReaderWrapper$3.getNorms(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNorms(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$3.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$3.close()", "public void close()"], ["long", "org.apache.lucene.index.SlowCodecReaderWrapper$3.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.SlowCodecReaderWrapper$4.getNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.SlowCodecReaderWrapper$4.getBinary(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.SlowCodecReaderWrapper$4.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.SlowCodecReaderWrapper$4.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.SlowCodecReaderWrapper$4.getSortedSet(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$4.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$4.close()", "public void close()"], ["long", "org.apache.lucene.index.SlowCodecReaderWrapper$4.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$5.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)", "public void visitDocument(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.index.SlowCodecReaderWrapper$5.clone()", "public org.apache.lucene.codecs.StoredFieldsReader clone()"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$5.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$5.close()", "public void close()"], ["long", "org.apache.lucene.index.SlowCodecReaderWrapper$5.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.Object", "org.apache.lucene.index.SlowCodecReaderWrapper$5.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.SlowCodecReaderWrapper$6.get(int)", "public org.apache.lucene.index.Fields get(int) throws java.io.IOException"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.index.SlowCodecReaderWrapper$6.clone()", "public org.apache.lucene.codecs.TermVectorsReader clone()"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$6.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$6.close()", "public void close()"], ["long", "org.apache.lucene.index.SlowCodecReaderWrapper$6.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.Object", "org.apache.lucene.index.SlowCodecReaderWrapper$6.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.SlowCodecReaderWrapper$7.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.SlowCodecReaderWrapper$7.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.SlowCodecReaderWrapper$7.size()", "public int size()"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$7.checkIntegrity()", "public void checkIntegrity() throws java.io.IOException"], ["void", "org.apache.lucene.index.SlowCodecReaderWrapper$7.close()", "public void close()"], ["long", "org.apache.lucene.index.SlowCodecReaderWrapper$7.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.index.CodecReader", "org.apache.lucene.index.SlowCodecReaderWrapper.wrap(org.apache.lucene.index.LeafReader)", "public static org.apache.lucene.index.CodecReader wrap(org.apache.lucene.index.LeafReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.delete()", "public void delete()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames() throws java.io.IOException"], ["long", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getGeneration()", "public long getGeneration()"], ["java.lang.String", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.isDeleted()", "public boolean isDeleted()"], ["int", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentCount()", "public int getSegmentCount()"], ["org.apache.lucene.index.SnapshotDeletionPolicy", "org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)", "public org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public synchronized void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public synchronized void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void release(org.apache.lucene.index.IndexCommit)", "public synchronized void release(org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot()", "public synchronized org.apache.lucene.index.IndexCommit snapshot() throws java.io.IOException"], ["java.util.List<org.apache.lucene.index.IndexCommit>", "org.apache.lucene.index.SnapshotDeletionPolicy.getSnapshots()", "public synchronized java.util.List<org.apache.lucene.index.IndexCommit> getSnapshots()"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.int getSnapshotCount()", "public synchronized int getSnapshotCount()"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit getIndexCommit(long)", "public synchronized org.apache.lucene.index.IndexCommit getIndexCommit(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedDocValues.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortedDocValues.lookupTerm(org.apache.lucene.util.BytesRef)", "public int lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.SortedDocValues.termsEnum()", "public org.apache.lucene.index.TermsEnum termsEnum() throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.SortedDocValues.intersect(org.apache.lucene.util.automaton.CompiledAutomaton)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValuesTermsEnum", "org.apache.lucene.index.SortedDocValuesTermsEnum(org.apache.lucene.index.SortedDocValues)", "public org.apache.lucene.index.SortedDocValuesTermsEnum(org.apache.lucene.index.SortedDocValues)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.SortedDocValuesTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SortedDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortedDocValuesTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedDocValuesTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedDocValuesTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["long", "org.apache.lucene.index.SortedDocValuesTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortedDocValuesTermsEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.index.SortedDocValuesTermsEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.SortedDocValuesTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortedDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.SortedDocValuesTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.SortedDocValuesWriter$1.getSorted(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues(org.apache.lucene.util.BytesRefHash, int, org.apache.lucene.util.packed.PackedLongValues, int[], int[], org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues(org.apache.lucene.util.BytesRefHash, int, org.apache.lucene.util.packed.PackedLongValues, int[], int[], org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.cost()", "public long cost()"], ["int", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.ordValue()", "public int ordValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int)"], ["int", "org.apache.lucene.index.SortedDocValuesWriter$BufferedSortedDocValues.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.index.SortedDocValuesWriter", "org.apache.lucene.index.SortedDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)", "public org.apache.lucene.index.SortedDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.index.SortedDocValuesWriter.addValue(int, org.apache.lucene.util.BytesRef)", "public void addValue(int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.index.SortedDocValuesWriter.finish(int)", "public void finish(int)"], ["void", "org.apache.lucene.index.SortedDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer)", "public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.SortedNumericDocValuesWriter$1.getSortedNumeric(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumeric(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues(org.apache.lucene.util.packed.PackedLongValues, org.apache.lucene.util.packed.PackedLongValues, org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues(org.apache.lucene.util.packed.PackedLongValues, org.apache.lucene.util.packed.PackedLongValues, org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues.docValueCount()", "public int docValueCount()"], ["long", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues.nextValue()", "public long nextValue()"], ["long", "org.apache.lucene.index.SortedNumericDocValuesWriter$BufferedSortedNumericDocValues.cost()", "public long cost()"], ["org.apache.lucene.index.SortedNumericDocValuesWriter", "org.apache.lucene.index.SortedNumericDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)", "public org.apache.lucene.index.SortedNumericDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.index.SortedNumericDocValuesWriter.addValue(int, long)", "public void addValue(int, long)"], ["void", "org.apache.lucene.index.SortedNumericDocValuesWriter.finish(int)", "public void finish(int)"], ["void", "org.apache.lucene.index.SortedNumericDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer)", "public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortedSetDocValues.lookupTerm(org.apache.lucene.util.BytesRef)", "public long lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.SortedSetDocValues.termsEnum()", "public org.apache.lucene.index.TermsEnum termsEnum() throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.SortedSetDocValues.intersect(org.apache.lucene.util.automaton.CompiledAutomaton)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValuesTermsEnum", "org.apache.lucene.index.SortedSetDocValuesTermsEnum(org.apache.lucene.index.SortedSetDocValues)", "public org.apache.lucene.index.SortedSetDocValuesTermsEnum(org.apache.lucene.index.SortedSetDocValues)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["long", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.SortedSetDocValuesTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.SortedSetDocValuesWriter$1.getSortedSet(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues(int[], int[], org.apache.lucene.util.BytesRefHash, org.apache.lucene.util.packed.PackedLongValues, org.apache.lucene.util.packed.PackedLongValues, int, org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues(int[], int[], org.apache.lucene.util.BytesRefHash, org.apache.lucene.util.packed.PackedLongValues, org.apache.lucene.util.packed.PackedLongValues, int, org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["long", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.nextOrd()", "public long nextOrd()"], ["long", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.cost()", "public long cost()"], ["int", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.getValueCount()", "public long getValueCount()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedSetDocValuesWriter$BufferedSortedSetDocValues.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long)"], ["org.apache.lucene.index.SortedSetDocValuesWriter", "org.apache.lucene.index.SortedSetDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)", "public org.apache.lucene.index.SortedSetDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.index.SortedSetDocValuesWriter.addValue(int, org.apache.lucene.util.BytesRef)", "public void addValue(int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.index.SortedSetDocValuesWriter.finish(int)", "public void finish(int)"], ["void", "org.apache.lucene.index.SortedSetDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer)", "public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.codecs.DocValuesConsumer) throws java.io.IOException"], ["int", "org.apache.lucene.index.Sorter$1.oldToNew(int)", "public int oldToNew(int)"], ["int", "org.apache.lucene.index.Sorter$1.newToOld(int)", "public int newToOld(int)"], ["int", "org.apache.lucene.index.Sorter$1.size()", "public int size()"], ["int", "org.apache.lucene.index.Sorter$2.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.index.Sorter$3.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.index.Sorter$4.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.index.Sorter$5.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.index.Sorter$6.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.index.Sorter$7.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.index.Sorter$8.docID()", "public int docID()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.index.Sorter$8.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["int", "org.apache.lucene.index.Sorter$8.freq()", "public int freq() throws java.io.IOException"], ["float", "org.apache.lucene.index.Sorter$8.score()", "public float score() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.Sorter.getID()", "public java.lang.String getID()"], ["java.lang.String", "org.apache.lucene.index.Sorter.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.SortingLeafReader$CachedBinaryDVs", "org.apache.lucene.index.SortingLeafReader$CachedBinaryDVs(org.apache.lucene.util.BytesRef[], org.apache.lucene.util.BitSet)", "public org.apache.lucene.index.SortingLeafReader$CachedBinaryDVs(org.apache.lucene.util.BytesRef[], org.apache.lucene.util.BitSet)"], ["org.apache.lucene.index.SortingLeafReader$CachedNumericDVs", "org.apache.lucene.index.SortingLeafReader$CachedNumericDVs(long[], org.apache.lucene.util.BitSet)", "public org.apache.lucene.index.SortingLeafReader$CachedNumericDVs(long[], org.apache.lucene.util.BitSet)"], ["org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues", "org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues(org.apache.lucene.index.SortingLeafReader$CachedBinaryDVs)", "public org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues(org.apache.lucene.index.SortingLeafReader$CachedBinaryDVs)"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingBinaryDocValues.cost()", "public long cost()"], ["org.apache.lucene.index.SortingLeafReader$SortingBits", "org.apache.lucene.index.SortingLeafReader$SortingBits(org.apache.lucene.util.Bits, org.apache.lucene.index.Sorter$DocMap)", "public org.apache.lucene.index.SortingLeafReader$SortingBits(org.apache.lucene.util.Bits, org.apache.lucene.index.Sorter$DocMap)"], ["boolean", "org.apache.lucene.index.SortingLeafReader$SortingBits.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingBits.length()", "public int length()"], ["org.apache.lucene.index.SortingLeafReader$SortingDocsEnum$DocFreqSorter", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum$DocFreqSorter(int)", "public org.apache.lucene.index.SortingLeafReader$SortingDocsEnum$DocFreqSorter(int)"], ["void", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum$DocFreqSorter.reset(int[], int[])", "public void reset(int[], int[])"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortingLeafReader$SortingDocsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["org.apache.lucene.index.SortingLeafReader$SortingFields", "org.apache.lucene.index.SortingLeafReader$SortingFields(org.apache.lucene.index.Fields, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.Sorter$DocMap)", "public org.apache.lucene.index.SortingLeafReader$SortingFields(org.apache.lucene.index.Fields, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.Sorter$DocMap)"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.SortingLeafReader$SortingFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues", "org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues(org.apache.lucene.index.SortingLeafReader$CachedNumericDVs)", "public org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues(org.apache.lucene.index.SortingLeafReader$CachedNumericDVs)"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues.longValue()", "public long longValue()"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingNumericDocValues.cost()", "public long cost()"], ["void", "org.apache.lucene.index.SortingLeafReader$SortingPointValues$1.visit(int)", "public void visit(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortingLeafReader$SortingPointValues$1.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.index.SortingLeafReader$SortingPointValues$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.index.SortingLeafReader$SortingPointValues", "org.apache.lucene.index.SortingLeafReader$SortingPointValues(org.apache.lucene.index.PointValues, org.apache.lucene.index.Sorter$DocMap)", "public org.apache.lucene.index.SortingLeafReader$SortingPointValues(org.apache.lucene.index.PointValues, org.apache.lucene.index.Sorter$DocMap)"], ["void", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.intersect(org.apache.lucene.index.PointValues$IntersectVisitor)", "public void intersect(org.apache.lucene.index.PointValues$IntersectVisitor) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)", "public long estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)"], ["byte[]", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.getMinPackedValue()", "public byte[] getMinPackedValue() throws java.io.IOException"], ["byte[]", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.getMaxPackedValue()", "public byte[] getMaxPackedValue() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.getNumDimensions()", "public int getNumDimensions() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.getBytesPerDimension()", "public int getBytesPerDimension() throws java.io.IOException"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.size()", "public long size()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPointValues.getDocCount()", "public int getDocCount()"], ["org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum$DocOffsetSorter", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum$DocOffsetSorter(int)", "public org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum$DocOffsetSorter(int)"], ["void", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum$DocOffsetSorter.reset(int[], long[])", "public void reset(int[], long[])"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingPostingsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.ordValue()", "public int ordValue()"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedDocValues.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedNumericDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedNumericDocValues.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedNumericDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortingLeafReader$SortingSortedNumericDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingSortedNumericDocValues.nextValue()", "public long nextValue()"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingSortedNumericDocValues.cost()", "public long cost()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedNumericDocValues.docValueCount()", "public int docValueCount()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.docID()", "public int docID()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.nextOrd()", "public long nextOrd()"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.cost()", "public long cost()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.lookupOrd(long)", "public org.apache.lucene.util.BytesRef lookupOrd(long) throws java.io.IOException"], ["long", "org.apache.lucene.index.SortingLeafReader$SortingSortedSetDocValues.getValueCount()", "public long getValueCount()"], ["org.apache.lucene.index.SortingLeafReader$SortingTerms", "org.apache.lucene.index.SortingLeafReader$SortingTerms(org.apache.lucene.index.Terms, org.apache.lucene.index.IndexOptions, org.apache.lucene.index.Sorter$DocMap)", "public org.apache.lucene.index.SortingLeafReader$SortingTerms(org.apache.lucene.index.Terms, org.apache.lucene.index.IndexOptions, org.apache.lucene.index.Sorter$DocMap)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.SortingLeafReader$SortingTerms.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.SortingLeafReader$SortingTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.SortingLeafReader$SortingTermsEnum", "org.apache.lucene.index.SortingLeafReader$SortingTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.index.IndexOptions, boolean)", "public org.apache.lucene.index.SortingLeafReader$SortingTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.index.Sorter$DocMap, org.apache.lucene.index.IndexOptions, boolean)"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.SortingLeafReader$SortingTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.LeafReader", "org.apache.lucene.index.SortingLeafReader.wrap(org.apache.lucene.index.LeafReader, org.apache.lucene.search.Sort)", "public static org.apache.lucene.index.LeafReader wrap(org.apache.lucene.index.LeafReader, org.apache.lucene.search.Sort) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortingLeafReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.SortingLeafReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.BinaryDocValues", "org.apache.lucene.index.SortingLeafReader.getBinaryDocValues(java.lang.String)", "public org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.SortingLeafReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.PointValues", "org.apache.lucene.index.SortingLeafReader.getPointValues(java.lang.String)", "public org.apache.lucene.index.PointValues getPointValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.SortingLeafReader.getNormValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.index.SortingLeafReader.getNumericDocValues(java.lang.String)", "public org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedNumericDocValues", "org.apache.lucene.index.SortingLeafReader.getSortedNumericDocValues(java.lang.String)", "public org.apache.lucene.index.SortedNumericDocValues getSortedNumericDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.index.SortingLeafReader.getSortedDocValues(java.lang.String)", "public org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedSetDocValues", "org.apache.lucene.index.SortingLeafReader.getSortedSetDocValues(java.lang.String)", "public org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.SortingLeafReader.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SortingLeafReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.SortingLeafReader.getCoreCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getCoreCacheHelper()"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.SortingLeafReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["void", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])", "public void binaryField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.stringField(org.apache.lucene.index.FieldInfo, byte[])", "public void stringField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.intField(org.apache.lucene.index.FieldInfo, int)", "public void intField(org.apache.lucene.index.FieldInfo, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.longField(org.apache.lucene.index.FieldInfo, long)", "public void longField(org.apache.lucene.index.FieldInfo, long) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.floatField(org.apache.lucene.index.FieldInfo, float)", "public void floatField(org.apache.lucene.index.FieldInfo, float) throws java.io.IOException"], ["void", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)", "public void doubleField(org.apache.lucene.index.FieldInfo, double) throws java.io.IOException"], ["org.apache.lucene.index.StoredFieldVisitor$Status", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.needsField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.StoredFieldVisitor$Status needsField(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.name()", "public java.lang.String name()"], ["org.apache.lucene.index.IndexableFieldType", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.fieldType()", "public org.apache.lucene.index.IndexableFieldType fieldType()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["java.lang.String", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.stringValue()", "public java.lang.String stringValue()"], ["java.lang.Number", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.numericValue()", "public java.lang.Number numericValue()"], ["java.io.Reader", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.readerValue()", "public java.io.Reader readerValue()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.index.SortingStoredFieldsConsumer$CopyVisitor.tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.TokenStream tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.index.SortingTermVectorsConsumer", "org.apache.lucene.index.SortingTermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)", "public org.apache.lucene.index.SortingTermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"], ["void", "org.apache.lucene.index.SortingTermVectorsConsumer.abort()", "public void abort()"], ["org.apache.lucene.index.IndexReader$CacheKey", "org.apache.lucene.index.StandardDirectoryReader$3.getKey()", "public org.apache.lucene.index.IndexReader$CacheKey getKey()"], ["void", "org.apache.lucene.index.StandardDirectoryReader$3.addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)", "public void addClosedListener(org.apache.lucene.index.IndexReader$ClosedListener)"], ["java.lang.String", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentCount()", "public int getSegmentCount()"], ["java.lang.String", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["long", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getGeneration()", "public long getGeneration()"], ["boolean", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.isDeleted()", "public boolean isDeleted()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["void", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.delete()", "public void delete()"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.StandardDirectoryReader.open(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos, java.util.List<? extends org.apache.lucene.index.LeafReader>)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos, java.util.List<? extends org.apache.lucene.index.LeafReader>) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.StandardDirectoryReader.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.index.StandardDirectoryReader.getVersion()", "public long getVersion()"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.StandardDirectoryReader.getSegmentInfos()", "public org.apache.lucene.index.SegmentInfos getSegmentInfos()"], ["boolean", "org.apache.lucene.index.StandardDirectoryReader.isCurrent()", "public boolean isCurrent() throws java.io.IOException"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.StandardDirectoryReader.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit() throws java.io.IOException"], ["org.apache.lucene.index.IndexReader$CacheHelper", "org.apache.lucene.index.StandardDirectoryReader.getReaderCacheHelper()", "public org.apache.lucene.index.IndexReader$CacheHelper getReaderCacheHelper()"], ["org.apache.lucene.index.StoredFieldVisitor$Status[]", "org.apache.lucene.index.StoredFieldVisitor$Status.values()", "public static org.apache.lucene.index.StoredFieldVisitor$Status[] values()"], ["org.apache.lucene.index.StoredFieldVisitor$Status", "org.apache.lucene.index.StoredFieldVisitor$Status.valueOf(java.lang.String)", "public static org.apache.lucene.index.StoredFieldVisitor$Status valueOf(java.lang.String)"], ["void", "org.apache.lucene.index.StoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])", "public void binaryField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, byte[])", "public void stringField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)", "public void intField(org.apache.lucene.index.FieldInfo, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)", "public void longField(org.apache.lucene.index.FieldInfo, long) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)", "public void floatField(org.apache.lucene.index.FieldInfo, float) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)", "public void doubleField(org.apache.lucene.index.FieldInfo, double) throws java.io.IOException"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRefBuilder)", "public org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRefBuilder)"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String, java.lang.String)", "public org.apache.lucene.index.Term(java.lang.String, java.lang.String)"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String)", "public org.apache.lucene.index.Term(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.Term.field()", "public final java.lang.String field()"], ["java.lang.String", "org.apache.lucene.index.Term.text()", "public final java.lang.String text()"], ["java.lang.String", "org.apache.lucene.index.Term.toString(org.apache.lucene.util.BytesRef)", "public static final java.lang.String toString(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.Term.bytes()", "public final org.apache.lucene.util.BytesRef bytes()"], ["boolean", "org.apache.lucene.index.Term.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.Term.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.index.Term.compareTo(org.apache.lucene.index.Term)", "public final int compareTo(org.apache.lucene.index.Term)"], ["java.lang.String", "org.apache.lucene.index.Term.toString()", "public final java.lang.String toString()"], ["int", "org.apache.lucene.index.Term.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.TermContext", "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext)", "public org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext)"], ["boolean", "org.apache.lucene.index.TermContext.wasBuiltFor(org.apache.lucene.index.IndexReaderContext)", "public boolean wasBuiltFor(org.apache.lucene.index.IndexReaderContext)"], ["org.apache.lucene.index.TermContext", "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.TermState, int, int, long)", "public org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.TermState, int, int, long)"], ["org.apache.lucene.index.TermContext", "org.apache.lucene.index.TermContext.build(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.Term)", "public static org.apache.lucene.index.TermContext build(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermContext.clear()", "public void clear()"], ["void", "org.apache.lucene.index.TermContext.register(org.apache.lucene.index.TermState, int, int, long)", "public void register(org.apache.lucene.index.TermState, int, int, long)"], ["void", "org.apache.lucene.index.TermContext.register(org.apache.lucene.index.TermState, int)", "public void register(org.apache.lucene.index.TermState, int)"], ["void", "org.apache.lucene.index.TermContext.accumulateStatistics(int, long)", "public void accumulateStatistics(int, long)"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermContext.get(int)", "public org.apache.lucene.index.TermState get(int)"], ["int", "org.apache.lucene.index.TermContext.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.index.TermContext.totalTermFreq()", "public long totalTermFreq()"], ["java.lang.String", "org.apache.lucene.index.TermContext.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermState.clone()", "public org.apache.lucene.index.TermState clone()"], ["java.lang.String", "org.apache.lucene.index.TermState.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.index.TermState.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.TermVectorsConsumer", "org.apache.lucene.index.TermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)", "public org.apache.lucene.index.TermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"], ["void", "org.apache.lucene.index.TermVectorsConsumer.abort()", "public void abort()"], ["org.apache.lucene.index.TermsHashPerField", "org.apache.lucene.index.TermVectorsConsumer.addField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashPerField addField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray", "org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray(int)", "public org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray(int)"], ["org.apache.lucene.index.TermVectorsConsumerPerField", "org.apache.lucene.index.TermVectorsConsumerPerField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermVectorsConsumer, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermVectorsConsumerPerField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermVectorsConsumer, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.TermVectorsConsumerPerField.newPostingsArray()", "public void newPostingsArray()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.Terms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.Terms.getMin()", "public org.apache.lucene.util.BytesRef getMin() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.Terms.getMax()", "public org.apache.lucene.util.BytesRef getMax() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.index.Terms.getStats()", "public java.lang.Object getStats() throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsEnum$1.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.TermsEnum$2.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.index.TermsEnum$2.seekExact(long)", "public void seekExact(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.TermsEnum$2.term()", "public org.apache.lucene.util.BytesRef term()"], ["int", "org.apache.lucene.index.TermsEnum$2.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.index.TermsEnum$2.totalTermFreq()", "public long totalTermFreq()"], ["long", "org.apache.lucene.index.TermsEnum$2.ord()", "public long ord()"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.TermsEnum$2.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.TermsEnum$2.next()", "public org.apache.lucene.util.BytesRef next()"], ["synchronized", "org.apache.lucene.index.TermsEnum$2.org.apache.lucene.util.AttributeSource attributes()", "public synchronized org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermsEnum$2.termState()", "public org.apache.lucene.index.TermState termState()"], ["void", "org.apache.lucene.index.TermsEnum$2.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"], ["org.apache.lucene.index.TermsEnum$SeekStatus[]", "org.apache.lucene.index.TermsEnum$SeekStatus.values()", "public static org.apache.lucene.index.TermsEnum$SeekStatus[] values()"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.TermsEnum$SeekStatus.valueOf(java.lang.String)", "public static org.apache.lucene.index.TermsEnum$SeekStatus valueOf(java.lang.String)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.TermsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["boolean", "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.index.TermsEnum.postings(org.apache.lucene.index.PostingsEnum)", "public final org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsHash.abort()", "public void abort()"], ["int[]", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.init()", "public int[] init()"], ["int[]", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.clear()", "public int[] clear()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.bytesUsed()", "public org.apache.lucene.util.Counter bytesUsed()"], ["org.apache.lucene.index.TermsHashPerField", "org.apache.lucene.index.TermsHashPerField(int, org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashPerField(int, org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.TermsHashPerField.initReader(org.apache.lucene.index.ByteSliceReader, int, int)", "public void initReader(org.apache.lucene.index.ByteSliceReader, int, int)"], ["int[]", "org.apache.lucene.index.TermsHashPerField.sortPostings()", "public int[] sortPostings()"], ["void", "org.apache.lucene.index.TermsHashPerField.add(int)", "public void add(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsHashPerField.writeBytes(int, byte[], int, int)", "public void writeBytes(int, byte[], int, int)"], ["int", "org.apache.lucene.index.TermsHashPerField.compareTo(org.apache.lucene.index.TermsHashPerField)", "public int compareTo(org.apache.lucene.index.TermsHashPerField)"], ["int", "org.apache.lucene.index.TermsHashPerField.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["double", "org.apache.lucene.index.TieredMergePolicy$1.getScore()", "public double getScore()"], ["java.lang.String", "org.apache.lucene.index.TieredMergePolicy$1.getExplanation()", "public java.lang.String getExplanation()"], ["int", "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.SegmentCommitInfo)", "public int compare(org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.SegmentCommitInfo)"], ["int", "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy()", "public org.apache.lucene.index.TieredMergePolicy()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int)", "public org.apache.lucene.index.TieredMergePolicy setMaxMergeAtOnce(int)"], ["int", "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce()", "public int getMaxMergeAtOnce()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int)", "public org.apache.lucene.index.TieredMergePolicy setMaxMergeAtOnceExplicit(int)"], ["int", "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnceExplicit()", "public int getMaxMergeAtOnceExplicit()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double)", "public org.apache.lucene.index.TieredMergePolicy setMaxMergedSegmentMB(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB()", "public double getMaxMergedSegmentMB()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double)", "public org.apache.lucene.index.TieredMergePolicy setReclaimDeletesWeight(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getReclaimDeletesWeight()", "public double getReclaimDeletesWeight()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double)", "public org.apache.lucene.index.TieredMergePolicy setFloorSegmentMB(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB()", "public double getFloorSegmentMB()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double)", "public org.apache.lucene.index.TieredMergePolicy setForceMergeDeletesPctAllowed(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getForceMergeDeletesPctAllowed()", "public double getForceMergeDeletesPctAllowed()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double)", "public org.apache.lucene.index.TieredMergePolicy setSegmentsPerTier(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier()", "public double getSegmentsPerTier()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.TieredMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.TieredMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.TieredMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.TieredMergePolicy.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.index.TrackingTmpOutputDirectoryWrapper.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.index.TrackingTmpOutputDirectoryWrapper.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.TrackingTmpOutputDirectoryWrapper.getTemporaryFiles()", "public java.util.Map<java.lang.String, java.lang.String> getTemporaryFiles()"], ["org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException", "org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)", "public org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"], ["org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException", "org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)", "public org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"], ["void", "org.apache.lucene.index.TwoPhaseCommitTool.execute(org.apache.lucene.index.TwoPhaseCommit...)", "public static void execute(org.apache.lucene.index.TwoPhaseCommit...) throws org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException, org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException"], ["org.apache.lucene.index.UpgradeIndexMergePolicy", "org.apache.lucene.index.UpgradeIndexMergePolicy(org.apache.lucene.index.MergePolicy)", "public org.apache.lucene.index.UpgradeIndexMergePolicy(org.apache.lucene.index.MergePolicy)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.UpgradeIndexMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.search.AutomatonQuery", "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.search.AutomatonQuery", "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton, int)", "public org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.search.AutomatonQuery", "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton, int, boolean)", "public org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton, int, boolean)"], ["int", "org.apache.lucene.search.AutomatonQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.AutomatonQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.AutomatonQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.search.AutomatonQuery.getAutomaton()", "public org.apache.lucene.util.automaton.Automaton getAutomaton()"], ["boolean", "org.apache.lucene.search.AutomatonQuery.isAutomatonBinary()", "public boolean isAutomatonBinary()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BlendedTermQuery$1.rewrite(org.apache.lucene.search.Query[])", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query[])"], ["org.apache.lucene.search.BlendedTermQuery$Builder", "org.apache.lucene.search.BlendedTermQuery$Builder()", "public org.apache.lucene.search.BlendedTermQuery$Builder()"], ["org.apache.lucene.search.BlendedTermQuery$Builder", "org.apache.lucene.search.BlendedTermQuery$Builder.setRewriteMethod(org.apache.lucene.search.BlendedTermQuery$RewriteMethod)", "public org.apache.lucene.search.BlendedTermQuery$Builder setRewriteMethod(org.apache.lucene.search.BlendedTermQuery$RewriteMethod)"], ["org.apache.lucene.search.BlendedTermQuery$Builder", "org.apache.lucene.search.BlendedTermQuery$Builder.add(org.apache.lucene.index.Term)", "public org.apache.lucene.search.BlendedTermQuery$Builder add(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.BlendedTermQuery$Builder", "org.apache.lucene.search.BlendedTermQuery$Builder.add(org.apache.lucene.index.Term, float)", "public org.apache.lucene.search.BlendedTermQuery$Builder add(org.apache.lucene.index.Term, float)"], ["org.apache.lucene.search.BlendedTermQuery$Builder", "org.apache.lucene.search.BlendedTermQuery$Builder.add(org.apache.lucene.index.Term, float, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.BlendedTermQuery$Builder add(org.apache.lucene.index.Term, float, org.apache.lucene.index.TermContext)"], ["org.apache.lucene.search.BlendedTermQuery", "org.apache.lucene.search.BlendedTermQuery$Builder.build()", "public org.apache.lucene.search.BlendedTermQuery build()"], ["org.apache.lucene.search.BlendedTermQuery$DisjunctionMaxRewrite", "org.apache.lucene.search.BlendedTermQuery$DisjunctionMaxRewrite(float)", "public org.apache.lucene.search.BlendedTermQuery$DisjunctionMaxRewrite(float)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BlendedTermQuery$DisjunctionMaxRewrite.rewrite(org.apache.lucene.search.Query[])", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query[])"], ["boolean", "org.apache.lucene.search.BlendedTermQuery$DisjunctionMaxRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BlendedTermQuery$DisjunctionMaxRewrite.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.BlendedTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BlendedTermQuery.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.search.BlendedTermQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BlendedTermQuery.rewrite(org.apache.lucene.index.IndexReader)", "public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["float", "org.apache.lucene.search.Boolean2ScorerSupplier$1.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.Boolean2ScorerSupplier$1.freq()", "public int freq() throws java.io.IOException"], ["long", "org.apache.lucene.search.Boolean2ScorerSupplier.cost()", "public long cost()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.Boolean2ScorerSupplier.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$1.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$2.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$3.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$4.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.BooleanClause$Occur[]", "org.apache.lucene.search.BooleanClause$Occur.values()", "public static org.apache.lucene.search.BooleanClause$Occur[] values()"], ["org.apache.lucene.search.BooleanClause$Occur", "org.apache.lucene.search.BooleanClause$Occur.valueOf(java.lang.String)", "public static org.apache.lucene.search.BooleanClause$Occur valueOf(java.lang.String)"], ["org.apache.lucene.search.BooleanClause", "org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)", "public org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"], ["org.apache.lucene.search.BooleanClause$Occur", "org.apache.lucene.search.BooleanClause.getOccur()", "public org.apache.lucene.search.BooleanClause$Occur getOccur()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanClause.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["boolean", "org.apache.lucene.search.BooleanClause.isProhibited()", "public boolean isProhibited()"], ["boolean", "org.apache.lucene.search.BooleanClause.isRequired()", "public boolean isRequired()"], ["boolean", "org.apache.lucene.search.BooleanClause.isScoring()", "public boolean isScoring()"], ["boolean", "org.apache.lucene.search.BooleanClause.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BooleanClause.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.BooleanQuery$Builder", "org.apache.lucene.search.BooleanQuery$Builder()", "public org.apache.lucene.search.BooleanQuery$Builder()"], ["org.apache.lucene.search.BooleanQuery$Builder", "org.apache.lucene.search.BooleanQuery$Builder.setMinimumNumberShouldMatch(int)", "public org.apache.lucene.search.BooleanQuery$Builder setMinimumNumberShouldMatch(int)"], ["org.apache.lucene.search.BooleanQuery$Builder", "org.apache.lucene.search.BooleanQuery$Builder.add(org.apache.lucene.search.BooleanClause)", "public org.apache.lucene.search.BooleanQuery$Builder add(org.apache.lucene.search.BooleanClause)"], ["org.apache.lucene.search.BooleanQuery$Builder", "org.apache.lucene.search.BooleanQuery$Builder.add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)", "public org.apache.lucene.search.BooleanQuery$Builder add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"], ["org.apache.lucene.search.BooleanQuery", "org.apache.lucene.search.BooleanQuery$Builder.build()", "public org.apache.lucene.search.BooleanQuery build()"], ["org.apache.lucene.search.BooleanQuery$TooManyClauses", "org.apache.lucene.search.BooleanQuery$TooManyClauses()", "public org.apache.lucene.search.BooleanQuery$TooManyClauses()"], ["int", "org.apache.lucene.search.BooleanQuery.getMaxClauseCount()", "public static int getMaxClauseCount()"], ["void", "org.apache.lucene.search.BooleanQuery.setMaxClauseCount(int)", "public static void setMaxClauseCount(int)"], ["int", "org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch()", "public int getMinimumNumberShouldMatch()"], ["java.util.List<org.apache.lucene.search.BooleanClause>", "org.apache.lucene.search.BooleanQuery.clauses()", "public java.util.List<org.apache.lucene.search.BooleanClause> clauses()"], ["java.util.Iterator<org.apache.lucene.search.BooleanClause>", "org.apache.lucene.search.BooleanQuery.iterator()", "public final java.util.Iterator<org.apache.lucene.search.BooleanClause> iterator()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.BooleanQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.BooleanQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.BooleanQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BooleanQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.BooleanScorer$HeadPriorityQueue", "org.apache.lucene.search.BooleanScorer$HeadPriorityQueue(int)", "public org.apache.lucene.search.BooleanScorer$HeadPriorityQueue(int)"], ["void", "org.apache.lucene.search.BooleanScorer$OrCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["void", "org.apache.lucene.search.BooleanScorer$OrCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.BooleanScorer$TailPriorityQueue", "org.apache.lucene.search.BooleanScorer$TailPriorityQueue(int)", "public org.apache.lucene.search.BooleanScorer$TailPriorityQueue(int)"], ["org.apache.lucene.search.BooleanScorer$BulkScorerAndDoc", "org.apache.lucene.search.BooleanScorer$TailPriorityQueue.get(int)", "public org.apache.lucene.search.BooleanScorer$BulkScorerAndDoc get(int)"], ["long", "org.apache.lucene.search.BooleanScorer.cost()", "public long cost()"], ["int", "org.apache.lucene.search.BooleanScorer.score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int)", "public int score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanWeight$1$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanWeight$1$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanWeight$1.score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int)", "public int score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int) throws java.io.IOException"], ["long", "org.apache.lucene.search.BooleanWeight$1.cost()", "public long cost()"], ["void", "org.apache.lucene.search.BooleanWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.BooleanWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.BooleanWeight.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.BooleanWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.search.BooleanWeight.scorerSupplier(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.ScorerSupplier scorerSupplier(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.BoostAttributeImpl", "org.apache.lucene.search.BoostAttributeImpl()", "public org.apache.lucene.search.BoostAttributeImpl()"], ["void", "org.apache.lucene.search.BoostAttributeImpl.setBoost(float)", "public void setBoost(float)"], ["float", "org.apache.lucene.search.BoostAttributeImpl.getBoost()", "public float getBoost()"], ["void", "org.apache.lucene.search.BoostAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.search.BoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.search.BoostAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.search.BoostQuery", "org.apache.lucene.search.BoostQuery(org.apache.lucene.search.Query, float)", "public org.apache.lucene.search.BoostQuery(org.apache.lucene.search.Query, float)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BoostQuery.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.BoostQuery.getBoost()", "public float getBoost()"], ["boolean", "org.apache.lucene.search.BoostQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BoostQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BoostQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.BoostQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.BoostQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.BulkScorer()", "public org.apache.lucene.search.BulkScorer()"], ["void", "org.apache.lucene.search.BulkScorer.score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits)", "public void score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits) throws java.io.IOException"], ["void", "org.apache.lucene.search.CachingCollector$1.collect(int)", "public void collect(int)"], ["boolean", "org.apache.lucene.search.CachingCollector$1.needsScores()", "public boolean needsScores()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.CachingCollector$CachedScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["float", "org.apache.lucene.search.CachingCollector$CachedScorer.score()", "public final float score()"], ["int", "org.apache.lucene.search.CachingCollector$CachedScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.CachingCollector$CachedScorer.freq()", "public final int freq()"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.replay(org.apache.lucene.search.Collector)", "public void replay(org.apache.lucene.search.Collector) throws java.io.IOException"], ["void", "org.apache.lucene.search.CachingCollector$NoScoreCachingLeafCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.needsScores()", "public boolean needsScores()"], ["void", "org.apache.lucene.search.CachingCollector$ScoreCachingLeafCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.CachingCollector", "org.apache.lucene.search.CachingCollector.create(boolean, double)", "public static org.apache.lucene.search.CachingCollector create(boolean, double)"], ["org.apache.lucene.search.CachingCollector", "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, double)", "public static org.apache.lucene.search.CachingCollector create(org.apache.lucene.search.Collector, boolean, double)"], ["org.apache.lucene.search.CachingCollector", "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, int)", "public static org.apache.lucene.search.CachingCollector create(org.apache.lucene.search.Collector, boolean, int)"], ["boolean", "org.apache.lucene.search.CachingCollector.isCached()", "public final boolean isCached()"], ["org.apache.lucene.search.CollectionStatistics", "org.apache.lucene.search.CollectionStatistics(java.lang.String, long, long, long, long)", "public org.apache.lucene.search.CollectionStatistics(java.lang.String, long, long, long, long)"], ["java.lang.String", "org.apache.lucene.search.CollectionStatistics.field()", "public final java.lang.String field()"], ["long", "org.apache.lucene.search.CollectionStatistics.maxDoc()", "public final long maxDoc()"], ["long", "org.apache.lucene.search.CollectionStatistics.docCount()", "public final long docCount()"], ["long", "org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq()", "public final long sumTotalTermFreq()"], ["long", "org.apache.lucene.search.CollectionStatistics.sumDocFreq()", "public final long sumDocFreq()"], ["org.apache.lucene.search.CollectionTerminatedException", "org.apache.lucene.search.CollectionTerminatedException()", "public org.apache.lucene.search.CollectionTerminatedException()"], ["int", "org.apache.lucene.search.ConjunctionDISI$1.compare(org.apache.lucene.search.DocIdSetIterator, org.apache.lucene.search.DocIdSetIterator)", "public int compare(org.apache.lucene.search.DocIdSetIterator, org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.search.ConjunctionDISI$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.search.ConjunctionDISI$BitSetConjunctionDISI.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ConjunctionDISI$BitSetConjunctionDISI.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionDISI$BitSetConjunctionDISI.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.ConjunctionDISI$BitSetConjunctionDISI.cost()", "public long cost()"], ["int", "org.apache.lucene.search.ConjunctionDISI$ConjunctionTwoPhaseIterator$1.compare(org.apache.lucene.search.TwoPhaseIterator, org.apache.lucene.search.TwoPhaseIterator)", "public int compare(org.apache.lucene.search.TwoPhaseIterator, org.apache.lucene.search.TwoPhaseIterator)"], ["int", "org.apache.lucene.search.ConjunctionDISI$ConjunctionTwoPhaseIterator$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.lucene.search.ConjunctionDISI$ConjunctionTwoPhaseIterator.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.ConjunctionDISI$ConjunctionTwoPhaseIterator.matchCost()", "public float matchCost()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ConjunctionDISI.intersectScorers(java.util.Collection<org.apache.lucene.search.Scorer>)", "public static org.apache.lucene.search.DocIdSetIterator intersectScorers(java.util.Collection<org.apache.lucene.search.Scorer>)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ConjunctionDISI.intersectIterators(java.util.List<org.apache.lucene.search.DocIdSetIterator>)", "public static org.apache.lucene.search.DocIdSetIterator intersectIterators(java.util.List<org.apache.lucene.search.DocIdSetIterator>)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ConjunctionDISI.intersectSpans(java.util.List<org.apache.lucene.search.spans.Spans>)", "public static org.apache.lucene.search.DocIdSetIterator intersectSpans(java.util.List<org.apache.lucene.search.spans.Spans>)"], ["int", "org.apache.lucene.search.ConjunctionDISI.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionDISI.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ConjunctionDISI.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["long", "org.apache.lucene.search.ConjunctionDISI.cost()", "public long cost()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.ConjunctionScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ConjunctionScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["int", "org.apache.lucene.search.ConjunctionScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ConjunctionScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionScorer.freq()", "public int freq()"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ConjunctionScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["float", "org.apache.lucene.search.ConstantScoreQuery$1$1$1.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreQuery$1$1$1.freq()", "public int freq() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ConstantScoreQuery$1$1$1.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.ConstantScoreQuery$1$1.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean) throws java.io.IOException"], ["long", "org.apache.lucene.search.ConstantScoreQuery$1$1.cost()", "public long cost()"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.ConstantScoreQuery$1.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.search.ConstantScoreQuery$1.scorerSupplier(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.ScorerSupplier scorerSupplier(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.ConstantScoreQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["float", "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer$1$1.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer$1$1.freq()", "public int freq() throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer", "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer(org.apache.lucene.search.BulkScorer, org.apache.lucene.search.Weight, float)", "public org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer(org.apache.lucene.search.BulkScorer, org.apache.lucene.search.Weight, float)"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer.score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int)", "public int score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int) throws java.io.IOException"], ["long", "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer.cost()", "public long cost()"], ["org.apache.lucene.search.ConstantScoreQuery", "org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Query)", "public org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Query)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreQuery.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.ConstantScoreQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.ConstantScoreQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.ConstantScoreQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.ConstantScoreQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.ConstantScoreScorer", "org.apache.lucene.search.ConstantScoreScorer(org.apache.lucene.search.Weight, float, org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.search.ConstantScoreScorer(org.apache.lucene.search.Weight, float, org.apache.lucene.search.DocIdSetIterator)"], ["org.apache.lucene.search.ConstantScoreScorer", "org.apache.lucene.search.ConstantScoreScorer(org.apache.lucene.search.Weight, float, org.apache.lucene.search.TwoPhaseIterator)", "public org.apache.lucene.search.ConstantScoreScorer(org.apache.lucene.search.Weight, float, org.apache.lucene.search.TwoPhaseIterator)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ConstantScoreScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.ConstantScoreScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["int", "org.apache.lucene.search.ConstantScoreScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ConstantScoreScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreScorer.freq()", "public int freq() throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.ConstantScoreWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.ControlledRealTimeReopenThread$HandleRefresh.beforeRefresh()", "public void beforeRefresh()"], ["void", "org.apache.lucene.search.ControlledRealTimeReopenThread$HandleRefresh.afterRefresh(boolean)", "public void afterRefresh(boolean)"], ["org.apache.lucene.search.ControlledRealTimeReopenThread", "org.apache.lucene.search.ControlledRealTimeReopenThread(org.apache.lucene.index.IndexWriter, org.apache.lucene.search.ReferenceManager<T>, double, double)", "public org.apache.lucene.search.ControlledRealTimeReopenThread(org.apache.lucene.index.IndexWriter, org.apache.lucene.search.ReferenceManager<T>, double, double)"], ["synchronized", "org.apache.lucene.search.ControlledRealTimeReopenThread.void close()", "public synchronized void close()"], ["void", "org.apache.lucene.search.ControlledRealTimeReopenThread.waitForGeneration(long)", "public void waitForGeneration(long) throws java.lang.InterruptedException"], ["synchronized", "org.apache.lucene.search.ControlledRealTimeReopenThread.boolean waitForGeneration(long, int)", "public synchronized boolean waitForGeneration(long, int) throws java.lang.InterruptedException"], ["void", "org.apache.lucene.search.ControlledRealTimeReopenThread.run()", "public void run()"], ["long", "org.apache.lucene.search.ControlledRealTimeReopenThread.getSearchingGen()", "public long getSearchingGen()"], ["org.apache.lucene.search.DisiPriorityQueue", "org.apache.lucene.search.DisiPriorityQueue(int)", "public org.apache.lucene.search.DisiPriorityQueue(int)"], ["int", "org.apache.lucene.search.DisiPriorityQueue.size()", "public int size()"], ["org.apache.lucene.search.DisiWrapper", "org.apache.lucene.search.DisiPriorityQueue.top()", "public org.apache.lucene.search.DisiWrapper top()"], ["org.apache.lucene.search.DisiWrapper", "org.apache.lucene.search.DisiPriorityQueue.topList()", "public org.apache.lucene.search.DisiWrapper topList()"], ["org.apache.lucene.search.DisiWrapper", "org.apache.lucene.search.DisiPriorityQueue.add(org.apache.lucene.search.DisiWrapper)", "public org.apache.lucene.search.DisiWrapper add(org.apache.lucene.search.DisiWrapper)"], ["org.apache.lucene.search.DisiWrapper", "org.apache.lucene.search.DisiPriorityQueue.pop()", "public org.apache.lucene.search.DisiWrapper pop()"], ["org.apache.lucene.search.DisiWrapper", "org.apache.lucene.search.DisiPriorityQueue.updateTop()", "public org.apache.lucene.search.DisiWrapper updateTop()"], ["java.util.Iterator<org.apache.lucene.search.DisiWrapper>", "org.apache.lucene.search.DisiPriorityQueue.iterator()", "public java.util.Iterator<org.apache.lucene.search.DisiWrapper> iterator()"], ["org.apache.lucene.search.DisiWrapper", "org.apache.lucene.search.DisiWrapper(org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.DisiWrapper(org.apache.lucene.search.Scorer)"], ["org.apache.lucene.search.DisiWrapper", "org.apache.lucene.search.DisiWrapper(org.apache.lucene.search.spans.Spans)", "public org.apache.lucene.search.DisiWrapper(org.apache.lucene.search.spans.Spans)"], ["org.apache.lucene.search.DisjunctionDISIApproximation", "org.apache.lucene.search.DisjunctionDISIApproximation(org.apache.lucene.search.DisiPriorityQueue)", "public org.apache.lucene.search.DisjunctionDISIApproximation(org.apache.lucene.search.DisiPriorityQueue)"], ["long", "org.apache.lucene.search.DisjunctionDISIApproximation.cost()", "public long cost()"], ["int", "org.apache.lucene.search.DisjunctionDISIApproximation.docID()", "public int docID()"], ["int", "org.apache.lucene.search.DisjunctionDISIApproximation.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionDISIApproximation.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionMaxQuery", "org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)", "public org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)"], ["java.util.Iterator<org.apache.lucene.search.Query>", "org.apache.lucene.search.DisjunctionMaxQuery.iterator()", "public java.util.Iterator<org.apache.lucene.search.Query> iterator()"], ["java.util.List<org.apache.lucene.search.Query>", "org.apache.lucene.search.DisjunctionMaxQuery.getDisjuncts()", "public java.util.List<org.apache.lucene.search.Query> getDisjuncts()"], ["float", "org.apache.lucene.search.DisjunctionMaxQuery.getTieBreakerMultiplier()", "public float getTieBreakerMultiplier()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.DisjunctionMaxQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.DisjunctionMaxQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.DisjunctionMaxQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.DisjunctionMaxQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.DisjunctionMaxQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.DisjunctionScorer$TwoPhase.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.DisjunctionScorer$TwoPhase.matchCost()", "public float matchCost()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DisjunctionScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.DisjunctionScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["int", "org.apache.lucene.search.DisjunctionScorer.docID()", "public final int docID()"], ["int", "org.apache.lucene.search.DisjunctionScorer.freq()", "public final int freq() throws java.io.IOException"], ["float", "org.apache.lucene.search.DisjunctionScorer.score()", "public final float score() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.DisjunctionScorer.getChildren()", "public final java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren() throws java.io.IOException"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSet$1.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.search.DocIdSet$1.bits()", "public org.apache.lucene.util.Bits bits()"], ["long", "org.apache.lucene.search.DocIdSet$1.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.DocIdSet()", "public org.apache.lucene.search.DocIdSet()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.search.DocIdSet.bits()", "public org.apache.lucene.util.Bits bits() throws java.io.IOException"], ["int", "org.apache.lucene.search.DocIdSetIterator$1.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.search.DocIdSetIterator$1.docID()", "public int docID()"], ["int", "org.apache.lucene.search.DocIdSetIterator$1.nextDoc()", "public int nextDoc()"], ["long", "org.apache.lucene.search.DocIdSetIterator$1.cost()", "public long cost()"], ["int", "org.apache.lucene.search.DocIdSetIterator$2.docID()", "public int docID()"], ["int", "org.apache.lucene.search.DocIdSetIterator$2.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.DocIdSetIterator$2.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.DocIdSetIterator$2.cost()", "public long cost()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSetIterator()", "public org.apache.lucene.search.DocIdSetIterator()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSetIterator.empty()", "public static final org.apache.lucene.search.DocIdSetIterator empty()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSetIterator.all(int)", "public static final org.apache.lucene.search.DocIdSetIterator all(int)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.DocValuesFieldExistsQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.DocValuesFieldExistsQuery", "org.apache.lucene.search.DocValuesFieldExistsQuery(java.lang.String)", "public org.apache.lucene.search.DocValuesFieldExistsQuery(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.DocValuesFieldExistsQuery.getField()", "public java.lang.String getField()"], ["boolean", "org.apache.lucene.search.DocValuesFieldExistsQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.DocValuesFieldExistsQuery.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.search.DocValuesFieldExistsQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.DocValuesFieldExistsQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.iterator()", "public org.apache.lucene.index.TermsEnum iterator() throws java.io.IOException"], ["long", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.getSumTotalTermFreq()", "public long getSumTotalTermFreq()"], ["long", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.getSumDocFreq()", "public long getSumDocFreq()"], ["int", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.getDocCount()", "public int getDocCount()"], ["long", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.size()", "public long size()"], ["boolean", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasFreqs()", "public boolean hasFreqs()"], ["boolean", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasPayloads()", "public boolean hasPayloads()"], ["boolean", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$2.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$2.matchCost()", "public float matchCost()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.getField()", "public final java.lang.String getField()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.DocValuesRewriteMethod", "org.apache.lucene.search.DocValuesRewriteMethod()", "public org.apache.lucene.search.DocValuesRewriteMethod()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.DocValuesRewriteMethod.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"], ["boolean", "org.apache.lucene.search.DocValuesRewriteMethod.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.DocValuesRewriteMethod.hashCode()", "public int hashCode()"], ["double", "org.apache.lucene.search.DoubleValues$1.doubleValue()", "public double doubleValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValues$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["org.apache.lucene.search.DoubleValues", "org.apache.lucene.search.DoubleValues()", "public org.apache.lucene.search.DoubleValues()"], ["org.apache.lucene.search.DoubleValues", "org.apache.lucene.search.DoubleValues.withDefault(org.apache.lucene.search.DoubleValues, double)", "public static org.apache.lucene.search.DoubleValues withDefault(org.apache.lucene.search.DoubleValues, double)"], ["org.apache.lucene.search.DoubleValues", "org.apache.lucene.search.DoubleValuesSource$1.getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues)", "public org.apache.lucene.search.DoubleValues getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$1.needsScores()", "public boolean needsScores()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.DoubleValuesSource$1.explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation)"], ["int", "org.apache.lucene.search.DoubleValuesSource$1.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.DoubleValuesSource$1.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.search.DoubleValuesSource$2.doubleValue()", "public double doubleValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$2.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.DoubleValuesSource$3.longValue()", "public long longValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$3.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.DoubleValuesSource$3.docID()", "public int docID()"], ["int", "org.apache.lucene.search.DoubleValuesSource$3.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.DoubleValuesSource$3.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.DoubleValuesSource$3.cost()", "public long cost()"], ["double", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource$1.doubleValue()", "public double doubleValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["org.apache.lucene.search.DoubleValues", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource.getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues)", "public org.apache.lucene.search.DoubleValues getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource.needsScores()", "public boolean needsScores()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource.explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation)"], ["int", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.DoubleValuesSource$ConstantValuesSource.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.search.DoubleValuesSource$DoubleValuesComparatorSource$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.DoubleValuesSource$DoubleValuesComparatorSource", "org.apache.lucene.search.DoubleValuesSource$DoubleValuesComparatorSource(org.apache.lucene.search.DoubleValuesSource)", "public org.apache.lucene.search.DoubleValuesSource$DoubleValuesComparatorSource(org.apache.lucene.search.DoubleValuesSource)"], ["org.apache.lucene.search.FieldComparator<java.lang.Double>", "org.apache.lucene.search.DoubleValuesSource$DoubleValuesComparatorSource.newComparator(java.lang.String, int, int, boolean)", "public org.apache.lucene.search.FieldComparator<java.lang.Double> newComparator(java.lang.String, int, int, boolean)"], ["org.apache.lucene.search.DoubleValuesSource$DoubleValuesSortField", "org.apache.lucene.search.DoubleValuesSource$DoubleValuesSortField(org.apache.lucene.search.DoubleValuesSource, boolean)", "public org.apache.lucene.search.DoubleValuesSource$DoubleValuesSortField(org.apache.lucene.search.DoubleValuesSource, boolean)"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$DoubleValuesSortField.needsScores()", "public boolean needsScores()"], ["java.lang.String", "org.apache.lucene.search.DoubleValuesSource$DoubleValuesSortField.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource$1.doubleValue()", "public double doubleValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.DoubleValues", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource.getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues)", "public org.apache.lucene.search.DoubleValues getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource.needsScores()", "public boolean needsScores()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.DoubleValuesSource$FieldValuesSource.explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["long", "org.apache.lucene.search.DoubleValuesSource$LongDoubleValuesSource$1.longValue()", "public long longValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$LongDoubleValuesSource$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["org.apache.lucene.search.LongValues", "org.apache.lucene.search.DoubleValuesSource$LongDoubleValuesSource.getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues)", "public org.apache.lucene.search.LongValues getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$LongDoubleValuesSource.needsScores()", "public boolean needsScores()"], ["boolean", "org.apache.lucene.search.DoubleValuesSource$LongDoubleValuesSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.DoubleValuesSource$LongDoubleValuesSource.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.search.DoubleValuesSource$LongDoubleValuesSource.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.DoubleValuesSource", "org.apache.lucene.search.DoubleValuesSource()", "public org.apache.lucene.search.DoubleValuesSource()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.DoubleValuesSource.explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.DoubleValuesSource.getSortField(boolean)", "public org.apache.lucene.search.SortField getSortField(boolean)"], ["org.apache.lucene.search.LongValuesSource", "org.apache.lucene.search.DoubleValuesSource.toLongValuesSource()", "public final org.apache.lucene.search.LongValuesSource toLongValuesSource()"], ["org.apache.lucene.search.DoubleValuesSource", "org.apache.lucene.search.DoubleValuesSource.fromField(java.lang.String, java.util.function.LongToDoubleFunction)", "public static org.apache.lucene.search.DoubleValuesSource fromField(java.lang.String, java.util.function.LongToDoubleFunction)"], ["org.apache.lucene.search.DoubleValuesSource", "org.apache.lucene.search.DoubleValuesSource.fromDoubleField(java.lang.String)", "public static org.apache.lucene.search.DoubleValuesSource fromDoubleField(java.lang.String)"], ["org.apache.lucene.search.DoubleValuesSource", "org.apache.lucene.search.DoubleValuesSource.fromFloatField(java.lang.String)", "public static org.apache.lucene.search.DoubleValuesSource fromFloatField(java.lang.String)"], ["org.apache.lucene.search.DoubleValuesSource", "org.apache.lucene.search.DoubleValuesSource.fromLongField(java.lang.String)", "public static org.apache.lucene.search.DoubleValuesSource fromLongField(java.lang.String)"], ["org.apache.lucene.search.DoubleValuesSource", "org.apache.lucene.search.DoubleValuesSource.fromIntField(java.lang.String)", "public static org.apache.lucene.search.DoubleValuesSource fromIntField(java.lang.String)"], ["org.apache.lucene.search.DoubleValuesSource", "org.apache.lucene.search.DoubleValuesSource.constant(double)", "public static org.apache.lucene.search.DoubleValuesSource constant(double)"], ["org.apache.lucene.search.DoubleValues", "org.apache.lucene.search.DoubleValuesSource.fromScorer(org.apache.lucene.search.Scorer)", "public static org.apache.lucene.search.DoubleValues fromScorer(org.apache.lucene.search.Scorer)"], ["void", "org.apache.lucene.search.EarlyTerminatingSortingCollector$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.EarlyTerminatingSortingCollector.canEarlyTerminate(org.apache.lucene.search.Sort, org.apache.lucene.search.Sort)", "public static boolean canEarlyTerminate(org.apache.lucene.search.Sort, org.apache.lucene.search.Sort)"], ["org.apache.lucene.search.EarlyTerminatingSortingCollector", "org.apache.lucene.search.EarlyTerminatingSortingCollector(org.apache.lucene.search.Collector, org.apache.lucene.search.Sort, int)", "public org.apache.lucene.search.EarlyTerminatingSortingCollector(org.apache.lucene.search.Collector, org.apache.lucene.search.Sort, int)"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.EarlyTerminatingSortingCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.EarlyTerminatingSortingCollector.terminatedEarly()", "public boolean terminatedEarly()"], ["boolean", "org.apache.lucene.search.ExactPhraseScorer$1.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.ExactPhraseScorer$1.matchCost()", "public float matchCost()"], ["org.apache.lucene.search.ExactPhraseScorer$PostingsAndPosition", "org.apache.lucene.search.ExactPhraseScorer$PostingsAndPosition(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.search.ExactPhraseScorer$PostingsAndPosition(org.apache.lucene.index.PostingsEnum, int)"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.ExactPhraseScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ExactPhraseScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["java.lang.String", "org.apache.lucene.search.ExactPhraseScorer.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.ExactPhraseScorer.freq()", "public int freq()"], ["int", "org.apache.lucene.search.ExactPhraseScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ExactPhraseScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation.match(float, java.lang.String, java.util.Collection<org.apache.lucene.search.Explanation>)", "public static org.apache.lucene.search.Explanation match(float, java.lang.String, java.util.Collection<org.apache.lucene.search.Explanation>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation.match(float, java.lang.String, org.apache.lucene.search.Explanation...)", "public static org.apache.lucene.search.Explanation match(float, java.lang.String, org.apache.lucene.search.Explanation...)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation.noMatch(java.lang.String, java.util.Collection<org.apache.lucene.search.Explanation>)", "public static org.apache.lucene.search.Explanation noMatch(java.lang.String, java.util.Collection<org.apache.lucene.search.Explanation>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation.noMatch(java.lang.String, org.apache.lucene.search.Explanation...)", "public static org.apache.lucene.search.Explanation noMatch(java.lang.String, org.apache.lucene.search.Explanation...)"], ["boolean", "org.apache.lucene.search.Explanation.isMatch()", "public boolean isMatch()"], ["float", "org.apache.lucene.search.Explanation.getValue()", "public float getValue()"], ["java.lang.String", "org.apache.lucene.search.Explanation.getDescription()", "public java.lang.String getDescription()"], ["org.apache.lucene.search.Explanation[]", "org.apache.lucene.search.Explanation.getDetails()", "public org.apache.lucene.search.Explanation[] getDetails()"], ["java.lang.String", "org.apache.lucene.search.Explanation.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.Explanation.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.Explanation.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.FakeScorer", "org.apache.lucene.search.FakeScorer()", "public org.apache.lucene.search.FakeScorer()"], ["int", "org.apache.lucene.search.FakeScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FakeScorer.freq()", "public int freq()"], ["float", "org.apache.lucene.search.FakeScorer.score()", "public float score()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FakeScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.FakeScorer.getWeight()", "public org.apache.lucene.search.Weight getWeight()"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.FakeScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.FieldComparator$DocComparator", "org.apache.lucene.search.FieldComparator$DocComparator(int)", "public org.apache.lucene.search.FieldComparator$DocComparator(int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.LeafFieldComparator", "org.apache.lucene.search.FieldComparator$DocComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafFieldComparator getLeafComparator(org.apache.lucene.index.LeafReaderContext)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.setTopValue(java.lang.Integer)", "public void setTopValue(java.lang.Integer)"], ["java.lang.Integer", "org.apache.lucene.search.FieldComparator$DocComparator.value(int)", "public java.lang.Integer value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compareTop(int)", "public int compareTop(int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$DocComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator$DoubleComparator", "org.apache.lucene.search.FieldComparator$DoubleComparator(int, java.lang.String, java.lang.Double)", "public org.apache.lucene.search.FieldComparator$DoubleComparator(int, java.lang.String, java.lang.Double)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.setTopValue(java.lang.Double)", "public void setTopValue(java.lang.Double)"], ["java.lang.Double", "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)", "public java.lang.Double value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator$FloatComparator", "org.apache.lucene.search.FieldComparator$FloatComparator(int, java.lang.String, java.lang.Float)", "public org.apache.lucene.search.FieldComparator$FloatComparator(int, java.lang.String, java.lang.Float)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.setTopValue(java.lang.Float)", "public void setTopValue(java.lang.Float)"], ["java.lang.Float", "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)", "public java.lang.Float value(int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator$IntComparator", "org.apache.lucene.search.FieldComparator$IntComparator(int, java.lang.String, java.lang.Integer)", "public org.apache.lucene.search.FieldComparator$IntComparator(int, java.lang.String, java.lang.Integer)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.setTopValue(java.lang.Integer)", "public void setTopValue(java.lang.Integer)"], ["java.lang.Integer", "org.apache.lucene.search.FieldComparator$IntComparator.value(int)", "public java.lang.Integer value(int)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$IntComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator$LongComparator", "org.apache.lucene.search.FieldComparator$LongComparator(int, java.lang.String, java.lang.Long)", "public org.apache.lucene.search.FieldComparator$LongComparator(int, java.lang.String, java.lang.Long)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.setTopValue(java.lang.Long)", "public void setTopValue(java.lang.Long)"], ["java.lang.Long", "org.apache.lucene.search.FieldComparator$LongComparator.value(int)", "public java.lang.Long value(int)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$LongComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator$NumericComparator", "org.apache.lucene.search.FieldComparator$NumericComparator(java.lang.String, T)", "public org.apache.lucene.search.FieldComparator$NumericComparator(java.lang.String, T)"], ["org.apache.lucene.search.FieldComparator$RelevanceComparator", "org.apache.lucene.search.FieldComparator$RelevanceComparator(int)", "public org.apache.lucene.search.FieldComparator$RelevanceComparator(int)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["org.apache.lucene.search.LeafFieldComparator", "org.apache.lucene.search.FieldComparator$RelevanceComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafFieldComparator getLeafComparator(org.apache.lucene.index.LeafReaderContext)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setTopValue(java.lang.Float)", "public void setTopValue(java.lang.Float)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["java.lang.Float", "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)", "public java.lang.Float value(int)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Float, java.lang.Float)", "public int compareValues(java.lang.Float, java.lang.Float)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator$TermOrdValComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String)", "public org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String)"], ["org.apache.lucene.search.FieldComparator$TermOrdValComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String, boolean)", "public org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String, boolean)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["org.apache.lucene.search.LeafFieldComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafFieldComparator getLeafComparator(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setBottom(int)", "public void setBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setTopValue(org.apache.lucene.util.BytesRef)", "public void setTopValue(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator$TermValComparator", "org.apache.lucene.search.FieldComparator$TermValComparator(int, java.lang.String, boolean)", "public org.apache.lucene.search.FieldComparator$TermValComparator(int, java.lang.String, boolean)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermValComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["org.apache.lucene.search.LeafFieldComparator", "org.apache.lucene.search.FieldComparator$TermValComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafFieldComparator getLeafComparator(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermValComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermValComparator.setTopValue(org.apache.lucene.util.BytesRef)", "public void setTopValue(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermValComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)", "public java.lang.Object value(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermValComparator.setTopValue(java.lang.Object)", "public void setTopValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator", "org.apache.lucene.search.FieldComparator()", "public org.apache.lucene.search.FieldComparator()"], ["int", "org.apache.lucene.search.FieldComparator.compareValues(T, T)", "public int compareValues(T, T)"], ["org.apache.lucene.search.FieldComparatorSource", "org.apache.lucene.search.FieldComparatorSource()", "public org.apache.lucene.search.FieldComparatorSource()"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float)", "public org.apache.lucene.search.FieldDoc(int, float)"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[])", "public org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[])"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[], int)", "public org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[], int)"], ["java.lang.String", "org.apache.lucene.search.FieldDoc.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldValueHitQueue$Entry", "org.apache.lucene.search.FieldValueHitQueue$Entry(int, int, float)", "public org.apache.lucene.search.FieldValueHitQueue$Entry(int, int, float)"], ["java.lang.String", "org.apache.lucene.search.FieldValueHitQueue$Entry.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue", "org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int)", "public org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int)"], ["org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue", "org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int)", "public org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int)"], ["<T extends org.apache.lucene.search.FieldValueHitQueue$Entry> org.apache.lucene.search.FieldValueHitQueue<T>", "org.apache.lucene.search.FieldValueHitQueue.create(org.apache.lucene.search.SortField[], int)", "public static <T extends org.apache.lucene.search.FieldValueHitQueue$Entry> org.apache.lucene.search.FieldValueHitQueue<T> create(org.apache.lucene.search.SortField[], int)"], ["org.apache.lucene.search.FieldComparator<?>[]", "org.apache.lucene.search.FieldValueHitQueue.getComparators()", "public org.apache.lucene.search.FieldComparator<?>[] getComparators()"], ["int[]", "org.apache.lucene.search.FieldValueHitQueue.getReverseMul()", "public int[] getReverseMul()"], ["org.apache.lucene.search.LeafFieldComparator[]", "org.apache.lucene.search.FieldValueHitQueue.getComparators(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafFieldComparator[] getComparators(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.FilterCollector", "org.apache.lucene.search.FilterCollector(org.apache.lucene.search.Collector)", "public org.apache.lucene.search.FilterCollector(org.apache.lucene.search.Collector)"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.FilterCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.FilterCollector.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.FilterCollector.needsScores()", "public boolean needsScores()"], ["org.apache.lucene.search.FilterLeafCollector", "org.apache.lucene.search.FilterLeafCollector(org.apache.lucene.search.LeafCollector)", "public org.apache.lucene.search.FilterLeafCollector(org.apache.lucene.search.LeafCollector)"], ["void", "org.apache.lucene.search.FilterLeafCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.FilterLeafCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.FilterLeafCollector.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FilterScorer", "org.apache.lucene.search.FilterScorer(org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.FilterScorer(org.apache.lucene.search.Scorer)"], ["org.apache.lucene.search.FilterScorer", "org.apache.lucene.search.FilterScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Weight)", "public org.apache.lucene.search.FilterScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Weight)"], ["float", "org.apache.lucene.search.FilterScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.FilterScorer.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.FilterScorer.docID()", "public final int docID()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FilterScorer.iterator()", "public final org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.FilterScorer.twoPhaseIterator()", "public final org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["void", "org.apache.lucene.search.FilterWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.FilterWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.FilterWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.FilteredDocIdSetIterator", "org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FilteredDocIdSetIterator.getDelegate()", "public org.apache.lucene.search.DocIdSetIterator getDelegate()"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.FilteredDocIdSetIterator.cost()", "public long cost()"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int, int, boolean)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int, int, boolean)"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int)"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)"], ["int", "org.apache.lucene.search.FuzzyQuery.getMaxEdits()", "public int getMaxEdits()"], ["int", "org.apache.lucene.search.FuzzyQuery.getPrefixLength()", "public int getPrefixLength()"], ["boolean", "org.apache.lucene.search.FuzzyQuery.getTranspositions()", "public boolean getTranspositions()"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.FuzzyQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["java.lang.String", "org.apache.lucene.search.FuzzyQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.FuzzyQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.FuzzyQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FuzzyQuery.floatToEdits(float, int)", "public static int floatToEdits(float, int)"], ["org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl()", "public org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl()"], ["org.apache.lucene.util.automaton.CompiledAutomaton[]", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.automata()", "public org.apache.lucene.util.automaton.CompiledAutomaton[] automata()"], ["void", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.setAutomata(org.apache.lucene.util.automaton.CompiledAutomaton[])", "public void setAutomata(org.apache.lucene.util.automaton.CompiledAutomaton[])"], ["void", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.clear()", "public void clear()"], ["int", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.search.FuzzyTermsEnum", "org.apache.lucene.search.FuzzyTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource, org.apache.lucene.index.Term, int, int, boolean)", "public org.apache.lucene.search.FuzzyTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource, org.apache.lucene.index.Term, int, int, boolean) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FuzzyTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["int", "org.apache.lucene.search.FuzzyTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.search.FuzzyTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.search.FuzzyTermsEnum.postings(org.apache.lucene.index.PostingsEnum, int)", "public org.apache.lucene.index.PostingsEnum postings(org.apache.lucene.index.PostingsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.search.FuzzyTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["long", "org.apache.lucene.search.FuzzyTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef)", "public boolean seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.search.FuzzyTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.search.FuzzyTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FuzzyTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.IndexOrDocValuesQuery$1$1.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean) throws java.io.IOException"], ["long", "org.apache.lucene.search.IndexOrDocValuesQuery$1$1.cost()", "public long cost()"], ["void", "org.apache.lucene.search.IndexOrDocValuesQuery$1.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.IndexOrDocValuesQuery$1.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.IndexOrDocValuesQuery$1.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.search.IndexOrDocValuesQuery$1.scorerSupplier(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.ScorerSupplier scorerSupplier(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.IndexOrDocValuesQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.IndexOrDocValuesQuery", "org.apache.lucene.search.IndexOrDocValuesQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Query)", "public org.apache.lucene.search.IndexOrDocValuesQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Query)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.IndexOrDocValuesQuery.getIndexQuery()", "public org.apache.lucene.search.Query getIndexQuery()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.IndexOrDocValuesQuery.getRandomAccessQuery()", "public org.apache.lucene.search.Query getRandomAccessQuery()"], ["java.lang.String", "org.apache.lucene.search.IndexOrDocValuesQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.IndexOrDocValuesQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.IndexOrDocValuesQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.IndexOrDocValuesQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.IndexOrDocValuesQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["float", "org.apache.lucene.search.IndexSearcher$1$2.score(int, float)", "public float score(int, float)"], ["float", "org.apache.lucene.search.IndexSearcher$1$2.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.IndexSearcher$1$2.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.search.IndexSearcher$1.computeNorm(org.apache.lucene.index.FieldInvertState)", "public long computeNorm(org.apache.lucene.index.FieldInvertState)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.IndexSearcher$1.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.IndexSearcher$1.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.similarities.Similarity$SimScorer simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.TotalHitCountCollector", "org.apache.lucene.search.IndexSearcher$2.newCollector()", "public org.apache.lucene.search.TotalHitCountCollector newCollector() throws java.io.IOException"], ["java.lang.Integer", "org.apache.lucene.search.IndexSearcher$2.reduce(java.util.Collection<org.apache.lucene.search.TotalHitCountCollector>)", "public java.lang.Integer reduce(java.util.Collection<org.apache.lucene.search.TotalHitCountCollector>) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.IndexSearcher$2.reduce(java.util.Collection)", "public java.lang.Object reduce(java.util.Collection) throws java.io.IOException"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.IndexSearcher$2.newCollector()", "public org.apache.lucene.search.Collector newCollector() throws java.io.IOException"], ["org.apache.lucene.search.TopScoreDocCollector", "org.apache.lucene.search.IndexSearcher$3.newCollector()", "public org.apache.lucene.search.TopScoreDocCollector newCollector() throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher$3.reduce(java.util.Collection<org.apache.lucene.search.TopScoreDocCollector>)", "public org.apache.lucene.search.TopDocs reduce(java.util.Collection<org.apache.lucene.search.TopScoreDocCollector>) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.IndexSearcher$3.reduce(java.util.Collection)", "public java.lang.Object reduce(java.util.Collection) throws java.io.IOException"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.IndexSearcher$3.newCollector()", "public org.apache.lucene.search.Collector newCollector() throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector", "org.apache.lucene.search.IndexSearcher$4.newCollector()", "public org.apache.lucene.search.TopFieldCollector newCollector() throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher$4.reduce(java.util.Collection<org.apache.lucene.search.TopFieldCollector>)", "public org.apache.lucene.search.TopFieldDocs reduce(java.util.Collection<org.apache.lucene.search.TopFieldCollector>) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.IndexSearcher$4.reduce(java.util.Collection)", "public java.lang.Object reduce(java.util.Collection) throws java.io.IOException"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.IndexSearcher$4.newCollector()", "public org.apache.lucene.search.Collector newCollector() throws java.io.IOException"], ["C", "org.apache.lucene.search.IndexSearcher$5.call()", "public C call() throws java.lang.Exception"], ["java.lang.Object", "org.apache.lucene.search.IndexSearcher$5.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.lucene.search.IndexSearcher$LeafSlice", "org.apache.lucene.search.IndexSearcher$LeafSlice(org.apache.lucene.index.LeafReaderContext...)", "public org.apache.lucene.search.IndexSearcher$LeafSlice(org.apache.lucene.index.LeafReaderContext...)"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.search.IndexSearcher.getDefaultSimilarity()", "public static org.apache.lucene.search.similarities.Similarity getDefaultSimilarity()"], ["org.apache.lucene.search.QueryCache", "org.apache.lucene.search.IndexSearcher.getDefaultQueryCache()", "public static org.apache.lucene.search.QueryCache getDefaultQueryCache()"], ["void", "org.apache.lucene.search.IndexSearcher.setDefaultQueryCache(org.apache.lucene.search.QueryCache)", "public static void setDefaultQueryCache(org.apache.lucene.search.QueryCache)"], ["org.apache.lucene.search.QueryCachingPolicy", "org.apache.lucene.search.IndexSearcher.getDefaultQueryCachingPolicy()", "public static org.apache.lucene.search.QueryCachingPolicy getDefaultQueryCachingPolicy()"], ["void", "org.apache.lucene.search.IndexSearcher.setDefaultQueryCachingPolicy(org.apache.lucene.search.QueryCachingPolicy)", "public static void setDefaultQueryCachingPolicy(org.apache.lucene.search.QueryCachingPolicy)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, java.util.concurrent.ExecutorService)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, java.util.concurrent.ExecutorService)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext, java.util.concurrent.ExecutorService)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext, java.util.concurrent.ExecutorService)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext)"], ["void", "org.apache.lucene.search.IndexSearcher.setQueryCache(org.apache.lucene.search.QueryCache)", "public void setQueryCache(org.apache.lucene.search.QueryCache)"], ["org.apache.lucene.search.QueryCache", "org.apache.lucene.search.IndexSearcher.getQueryCache()", "public org.apache.lucene.search.QueryCache getQueryCache()"], ["void", "org.apache.lucene.search.IndexSearcher.setQueryCachingPolicy(org.apache.lucene.search.QueryCachingPolicy)", "public void setQueryCachingPolicy(org.apache.lucene.search.QueryCachingPolicy)"], ["org.apache.lucene.search.QueryCachingPolicy", "org.apache.lucene.search.IndexSearcher.getQueryCachingPolicy()", "public org.apache.lucene.search.QueryCachingPolicy getQueryCachingPolicy()"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.search.IndexSearcher.getIndexReader()", "public org.apache.lucene.index.IndexReader getIndexReader()"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.IndexSearcher.doc(int)", "public org.apache.lucene.document.Document doc(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.doc(int, org.apache.lucene.index.StoredFieldVisitor)", "public void doc(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.IndexSearcher.doc(int, java.util.Set<java.lang.String>)", "public org.apache.lucene.document.Document doc(int, java.util.Set<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.setSimilarity(org.apache.lucene.search.similarities.Similarity)", "public void setSimilarity(org.apache.lucene.search.similarities.Similarity)"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.search.IndexSearcher.getSimilarity(boolean)", "public org.apache.lucene.search.similarities.Similarity getSimilarity(boolean)"], ["int", "org.apache.lucene.search.IndexSearcher.count(org.apache.lucene.search.Query)", "public int count(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.TopDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort, boolean, boolean)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort, boolean, boolean)", "public org.apache.lucene.search.TopFieldDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort, boolean, boolean) throws java.io.IOException"], ["<C extends org.apache.lucene.search.Collector, T> T", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.CollectorManager<C, T>)", "public <C extends org.apache.lucene.search.Collector, T> T search(org.apache.lucene.search.Query, org.apache.lucene.search.CollectorManager<C, T>) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.IndexSearcher.rewrite(org.apache.lucene.search.Query)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.IndexSearcher.explain(org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.Query, int) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.IndexSearcher.createNormalizedWeight(org.apache.lucene.search.Query, boolean)", "public org.apache.lucene.search.Weight createNormalizedWeight(org.apache.lucene.search.Query, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.IndexSearcher.createWeight(org.apache.lucene.search.Query, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Query, boolean, float) throws java.io.IOException"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.search.IndexSearcher.getTopReaderContext()", "public org.apache.lucene.index.IndexReaderContext getTopReaderContext()"], ["java.lang.String", "org.apache.lucene.search.IndexSearcher.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.TermStatistics", "org.apache.lucene.search.IndexSearcher.termStatistics(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TermStatistics termStatistics(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext) throws java.io.IOException"], ["org.apache.lucene.search.CollectionStatistics", "org.apache.lucene.search.IndexSearcher.collectionStatistics(java.lang.String)", "public org.apache.lucene.search.CollectionStatistics collectionStatistics(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.search.LRUQueryCache$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.LRUQueryCache$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.LRUQueryCache$2.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.LRUQueryCache$2.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$1.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean) throws java.io.IOException"], ["long", "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$1.cost()", "public long cost()"], ["void", "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.scorerSupplier(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.ScorerSupplier scorerSupplier(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["long", "org.apache.lucene.search.LRUQueryCache$LeafCache.ramBytesUsed()", "public long ramBytesUsed()"], ["boolean", "org.apache.lucene.search.LRUQueryCache$MinSegmentSizePredicate.test(org.apache.lucene.index.LeafReaderContext)", "public boolean test(org.apache.lucene.index.LeafReaderContext)"], ["boolean", "org.apache.lucene.search.LRUQueryCache$MinSegmentSizePredicate.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["org.apache.lucene.search.LRUQueryCache", "org.apache.lucene.search.LRUQueryCache(int, long, java.util.function.Predicate<org.apache.lucene.index.LeafReaderContext>)", "public org.apache.lucene.search.LRUQueryCache(int, long, java.util.function.Predicate<org.apache.lucene.index.LeafReaderContext>)"], ["org.apache.lucene.search.LRUQueryCache", "org.apache.lucene.search.LRUQueryCache(int, long)", "public org.apache.lucene.search.LRUQueryCache(int, long)"], ["void", "org.apache.lucene.search.LRUQueryCache.clearCoreCacheKey(java.lang.Object)", "public void clearCoreCacheKey(java.lang.Object)"], ["void", "org.apache.lucene.search.LRUQueryCache.clearQuery(org.apache.lucene.search.Query)", "public void clearQuery(org.apache.lucene.search.Query)"], ["void", "org.apache.lucene.search.LRUQueryCache.clear()", "public void clear()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.LRUQueryCache.doCache(org.apache.lucene.search.Weight, org.apache.lucene.search.QueryCachingPolicy)", "public org.apache.lucene.search.Weight doCache(org.apache.lucene.search.Weight, org.apache.lucene.search.QueryCachingPolicy)"], ["long", "org.apache.lucene.search.LRUQueryCache.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.search.LRUQueryCache.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["long", "org.apache.lucene.search.LRUQueryCache.getTotalCount()", "public final long getTotalCount()"], ["long", "org.apache.lucene.search.LRUQueryCache.getHitCount()", "public final long getHitCount()"], ["long", "org.apache.lucene.search.LRUQueryCache.getMissCount()", "public final long getMissCount()"], ["long", "org.apache.lucene.search.LRUQueryCache.getCacheSize()", "public final long getCacheSize()"], ["long", "org.apache.lucene.search.LRUQueryCache.getCacheCount()", "public final long getCacheCount()"], ["long", "org.apache.lucene.search.LRUQueryCache.getEvictionCount()", "public final long getEvictionCount()"], ["org.apache.lucene.search.LiveFieldValues", "org.apache.lucene.search.LiveFieldValues(org.apache.lucene.search.ReferenceManager<S>, T)", "public org.apache.lucene.search.LiveFieldValues(org.apache.lucene.search.ReferenceManager<S>, T)"], ["void", "org.apache.lucene.search.LiveFieldValues.close()", "public void close()"], ["void", "org.apache.lucene.search.LiveFieldValues.beforeRefresh()", "public void beforeRefresh() throws java.io.IOException"], ["void", "org.apache.lucene.search.LiveFieldValues.afterRefresh(boolean)", "public void afterRefresh(boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.LiveFieldValues.add(java.lang.String, T)", "public void add(java.lang.String, T)"], ["void", "org.apache.lucene.search.LiveFieldValues.delete(java.lang.String)", "public void delete(java.lang.String)"], ["int", "org.apache.lucene.search.LiveFieldValues.size()", "public int size()"], ["T", "org.apache.lucene.search.LiveFieldValues.get(java.lang.String)", "public T get(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.search.LongValues", "org.apache.lucene.search.LongValues()", "public org.apache.lucene.search.LongValues()"], ["long", "org.apache.lucene.search.LongValuesSource$1.longValue()", "public long longValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.LongValuesSource$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.LongValuesSource$2.longValue()", "public long longValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.LongValuesSource$2.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.LongValuesSource$2.docID()", "public int docID()"], ["int", "org.apache.lucene.search.LongValuesSource$2.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.LongValuesSource$2.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.LongValuesSource$2.cost()", "public long cost()"], ["long", "org.apache.lucene.search.LongValuesSource$ConstantLongValuesSource$1.longValue()", "public long longValue() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.LongValuesSource$ConstantLongValuesSource$1.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["org.apache.lucene.search.LongValues", "org.apache.lucene.search.LongValuesSource$ConstantLongValuesSource.getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues)", "public org.apache.lucene.search.LongValues getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.LongValuesSource$ConstantLongValuesSource.needsScores()", "public boolean needsScores()"], ["int", "org.apache.lucene.search.LongValuesSource$ConstantLongValuesSource.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.LongValuesSource$ConstantLongValuesSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.LongValuesSource$ConstantLongValuesSource.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.LongValuesSource$FieldValuesSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.LongValuesSource$FieldValuesSource.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.LongValuesSource$FieldValuesSource.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.LongValues", "org.apache.lucene.search.LongValuesSource$FieldValuesSource.getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues)", "public org.apache.lucene.search.LongValues getValues(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DoubleValues) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.LongValuesSource$FieldValuesSource.needsScores()", "public boolean needsScores()"], ["void", "org.apache.lucene.search.LongValuesSource$LongValuesComparatorSource$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.LongValuesSource$LongValuesComparatorSource", "org.apache.lucene.search.LongValuesSource$LongValuesComparatorSource(org.apache.lucene.search.LongValuesSource)", "public org.apache.lucene.search.LongValuesSource$LongValuesComparatorSource(org.apache.lucene.search.LongValuesSource)"], ["org.apache.lucene.search.FieldComparator<java.lang.Long>", "org.apache.lucene.search.LongValuesSource$LongValuesComparatorSource.newComparator(java.lang.String, int, int, boolean)", "public org.apache.lucene.search.FieldComparator<java.lang.Long> newComparator(java.lang.String, int, int, boolean)"], ["org.apache.lucene.search.LongValuesSource$LongValuesSortField", "org.apache.lucene.search.LongValuesSource$LongValuesSortField(org.apache.lucene.search.LongValuesSource, boolean)", "public org.apache.lucene.search.LongValuesSource$LongValuesSortField(org.apache.lucene.search.LongValuesSource, boolean)"], ["boolean", "org.apache.lucene.search.LongValuesSource$LongValuesSortField.needsScores()", "public boolean needsScores()"], ["java.lang.String", "org.apache.lucene.search.LongValuesSource$LongValuesSortField.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.LongValuesSource", "org.apache.lucene.search.LongValuesSource()", "public org.apache.lucene.search.LongValuesSource()"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.LongValuesSource.getSortField(boolean)", "public org.apache.lucene.search.SortField getSortField(boolean)"], ["org.apache.lucene.search.LongValuesSource", "org.apache.lucene.search.LongValuesSource.fromLongField(java.lang.String)", "public static org.apache.lucene.search.LongValuesSource fromLongField(java.lang.String)"], ["org.apache.lucene.search.LongValuesSource", "org.apache.lucene.search.LongValuesSource.fromIntField(java.lang.String)", "public static org.apache.lucene.search.LongValuesSource fromIntField(java.lang.String)"], ["org.apache.lucene.search.LongValuesSource", "org.apache.lucene.search.LongValuesSource.constant(long)", "public static org.apache.lucene.search.LongValuesSource constant(long)"], ["int", "org.apache.lucene.search.MatchAllDocsQuery$1$1.score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int)", "public int score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int) throws java.io.IOException"], ["long", "org.apache.lucene.search.MatchAllDocsQuery$1$1.cost()", "public long cost()"], ["java.lang.String", "org.apache.lucene.search.MatchAllDocsQuery$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MatchAllDocsQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.MatchAllDocsQuery$1.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.MatchAllDocsQuery", "org.apache.lucene.search.MatchAllDocsQuery()", "public org.apache.lucene.search.MatchAllDocsQuery()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MatchAllDocsQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)"], ["java.lang.String", "org.apache.lucene.search.MatchAllDocsQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MatchAllDocsQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MatchAllDocsQuery.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.search.MatchNoDocsQuery$1.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MatchNoDocsQuery$1.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MatchNoDocsQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.MatchNoDocsQuery", "org.apache.lucene.search.MatchNoDocsQuery()", "public org.apache.lucene.search.MatchNoDocsQuery()"], ["org.apache.lucene.search.MatchNoDocsQuery", "org.apache.lucene.search.MatchNoDocsQuery(java.lang.String)", "public org.apache.lucene.search.MatchNoDocsQuery(java.lang.String)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MatchNoDocsQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.MatchNoDocsQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MatchNoDocsQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MatchNoDocsQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl()", "public org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setMaxNonCompetitiveBoost(float)", "public void setMaxNonCompetitiveBoost(float)"], ["float", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getMaxNonCompetitiveBoost()", "public float getMaxNonCompetitiveBoost()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setCompetitiveTerm(org.apache.lucene.util.BytesRef)", "public void setCompetitiveTerm(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getCompetitiveTerm()", "public org.apache.lucene.util.BytesRef getCompetitiveTerm()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["int", "org.apache.lucene.search.MinShouldMatchSumScorer$2.docID()", "public int docID()"], ["int", "org.apache.lucene.search.MinShouldMatchSumScorer$2.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.MinShouldMatchSumScorer$2.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.MinShouldMatchSumScorer$2.cost()", "public long cost()"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.MinShouldMatchSumScorer.getChildren()", "public final java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren() throws java.io.IOException"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.MinShouldMatchSumScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["int", "org.apache.lucene.search.MinShouldMatchSumScorer.freq()", "public int freq() throws java.io.IOException"], ["float", "org.apache.lucene.search.MinShouldMatchSumScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.MinShouldMatchSumScorer.docID()", "public int docID()"], ["void", "org.apache.lucene.search.MultiCollector$MultiLeafCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiCollector$MultiLeafCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.MultiCollector.wrap(org.apache.lucene.search.Collector...)", "public static org.apache.lucene.search.Collector wrap(org.apache.lucene.search.Collector...)"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.MultiCollector.wrap(java.lang.Iterable<? extends org.apache.lucene.search.Collector>)", "public static org.apache.lucene.search.Collector wrap(java.lang.Iterable<? extends org.apache.lucene.search.Collector>)"], ["boolean", "org.apache.lucene.search.MultiCollector.needsScores()", "public boolean needsScores()"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.MultiCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiCollectorManager$Collectors$LeafCollectors.setScorer(org.apache.lucene.search.Scorer)", "public final void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiCollectorManager$Collectors$LeafCollectors.collect(int)", "public final void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.MultiCollectorManager$Collectors.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public final org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.MultiCollectorManager$Collectors.needsScores()", "public final boolean needsScores()"], ["org.apache.lucene.search.MultiCollectorManager", "org.apache.lucene.search.MultiCollectorManager(org.apache.lucene.search.CollectorManager<? extends org.apache.lucene.search.Collector, ?>...)", "public org.apache.lucene.search.MultiCollectorManager(org.apache.lucene.search.CollectorManager<? extends org.apache.lucene.search.Collector, ?>...)"], ["org.apache.lucene.search.MultiCollectorManager$Collectors", "org.apache.lucene.search.MultiCollectorManager.newCollector()", "public org.apache.lucene.search.MultiCollectorManager$Collectors newCollector() throws java.io.IOException"], ["java.lang.Object[]", "org.apache.lucene.search.MultiCollectorManager.reduce(java.util.Collection<org.apache.lucene.search.MultiCollectorManager$Collectors>)", "public java.lang.Object[] reduce(java.util.Collection<org.apache.lucene.search.MultiCollectorManager$Collectors>) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.MultiCollectorManager.reduce(java.util.Collection)", "public java.lang.Object reduce(java.util.Collection) throws java.io.IOException"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.MultiCollectorManager.newCollector()", "public org.apache.lucene.search.Collector newCollector() throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiLeafFieldComparator.setBottom(int)", "public void setBottom(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiLeafFieldComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiLeafFieldComparator.compareTop(int)", "public int compareTop(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiLeafFieldComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiLeafFieldComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.MultiPhraseQuery$Builder", "org.apache.lucene.search.MultiPhraseQuery$Builder()", "public org.apache.lucene.search.MultiPhraseQuery$Builder()"], ["org.apache.lucene.search.MultiPhraseQuery$Builder", "org.apache.lucene.search.MultiPhraseQuery$Builder(org.apache.lucene.search.MultiPhraseQuery)", "public org.apache.lucene.search.MultiPhraseQuery$Builder(org.apache.lucene.search.MultiPhraseQuery)"], ["org.apache.lucene.search.MultiPhraseQuery$Builder", "org.apache.lucene.search.MultiPhraseQuery$Builder.setSlop(int)", "public org.apache.lucene.search.MultiPhraseQuery$Builder setSlop(int)"], ["org.apache.lucene.search.MultiPhraseQuery$Builder", "org.apache.lucene.search.MultiPhraseQuery$Builder.add(org.apache.lucene.index.Term)", "public org.apache.lucene.search.MultiPhraseQuery$Builder add(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.MultiPhraseQuery$Builder", "org.apache.lucene.search.MultiPhraseQuery$Builder.add(org.apache.lucene.index.Term[])", "public org.apache.lucene.search.MultiPhraseQuery$Builder add(org.apache.lucene.index.Term[])"], ["org.apache.lucene.search.MultiPhraseQuery$Builder", "org.apache.lucene.search.MultiPhraseQuery$Builder.add(org.apache.lucene.index.Term[], int)", "public org.apache.lucene.search.MultiPhraseQuery$Builder add(org.apache.lucene.index.Term[], int)"], ["org.apache.lucene.search.MultiPhraseQuery", "org.apache.lucene.search.MultiPhraseQuery$Builder.build()", "public org.apache.lucene.search.MultiPhraseQuery build()"], ["org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum$DocsQueue.lessThan(org.apache.lucene.index.PostingsEnum, org.apache.lucene.index.PostingsEnum)", "public final boolean lessThan(org.apache.lucene.index.PostingsEnum, org.apache.lucene.index.PostingsEnum)"], ["boolean", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum$DocsQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.cost()", "public long cost()"], ["int", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.MultiPhraseQuery$UnionPostingsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiPhraseQuery.getSlop()", "public int getSlop()"], ["org.apache.lucene.index.Term[][]", "org.apache.lucene.search.MultiPhraseQuery.getTermArrays()", "public org.apache.lucene.index.Term[][] getTermArrays()"], ["int[]", "org.apache.lucene.search.MultiPhraseQuery.getPositions()", "public int[] getPositions()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MultiPhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.MultiPhraseQuery.toString(java.lang.String)", "public final java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MultiPhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MultiPhraseQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"], ["org.apache.lucene.search.MultiTermQuery$RewriteMethod", "org.apache.lucene.search.MultiTermQuery$RewriteMethod()", "public org.apache.lucene.search.MultiTermQuery$RewriteMethod()"], ["org.apache.lucene.search.MultiTermQuery$TopTermsBlendedFreqScoringRewrite", "org.apache.lucene.search.MultiTermQuery$TopTermsBlendedFreqScoringRewrite(int)", "public org.apache.lucene.search.MultiTermQuery$TopTermsBlendedFreqScoringRewrite(int)"], ["org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite", "org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(int)", "public org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(int)"], ["org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite", "org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite(int)", "public org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite(int)"], ["org.apache.lucene.search.MultiTermQuery", "org.apache.lucene.search.MultiTermQuery(java.lang.String)", "public org.apache.lucene.search.MultiTermQuery(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.MultiTermQuery.getField()", "public final java.lang.String getField()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery.rewrite(org.apache.lucene.index.IndexReader)", "public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.MultiTermQuery$RewriteMethod", "org.apache.lucene.search.MultiTermQuery.getRewriteMethod()", "public org.apache.lucene.search.MultiTermQuery$RewriteMethod getRewriteMethod()"], ["void", "org.apache.lucene.search.MultiTermQuery.setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)", "public void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)"], ["int", "org.apache.lucene.search.MultiTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.MultiTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.hashCode()", "public final int hashCode()"], ["Q", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.getQuery()", "public Q getQuery()"], ["java.lang.String", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.getField()", "public final java.lang.String getField()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.Multiset$1.hasNext()", "public boolean hasNext()"], ["T", "org.apache.lucene.search.Multiset$1.next()", "public T next()"], ["java.util.Iterator<T>", "org.apache.lucene.search.Multiset.iterator()", "public java.util.Iterator<T> iterator()"], ["int", "org.apache.lucene.search.Multiset.size()", "public int size()"], ["void", "org.apache.lucene.search.Multiset.clear()", "public void clear()"], ["boolean", "org.apache.lucene.search.Multiset.add(T)", "public boolean add(T)"], ["boolean", "org.apache.lucene.search.Multiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.apache.lucene.search.Multiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.apache.lucene.search.Multiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.Multiset.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.NGramPhraseQuery", "org.apache.lucene.search.NGramPhraseQuery(int, org.apache.lucene.search.PhraseQuery)", "public org.apache.lucene.search.NGramPhraseQuery(int, org.apache.lucene.search.PhraseQuery)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.NGramPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.NGramPhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.NGramPhraseQuery.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.search.NGramPhraseQuery.getN()", "public int getN()"], ["org.apache.lucene.index.Term[]", "org.apache.lucene.search.NGramPhraseQuery.getTerms()", "public org.apache.lucene.index.Term[] getTerms()"], ["int[]", "org.apache.lucene.search.NGramPhraseQuery.getPositions()", "public int[] getPositions()"], ["java.lang.String", "org.apache.lucene.search.NGramPhraseQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.PhrasePositions.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.PhraseQuery$Builder", "org.apache.lucene.search.PhraseQuery$Builder()", "public org.apache.lucene.search.PhraseQuery$Builder()"], ["org.apache.lucene.search.PhraseQuery$Builder", "org.apache.lucene.search.PhraseQuery$Builder.setSlop(int)", "public org.apache.lucene.search.PhraseQuery$Builder setSlop(int)"], ["org.apache.lucene.search.PhraseQuery$Builder", "org.apache.lucene.search.PhraseQuery$Builder.add(org.apache.lucene.index.Term)", "public org.apache.lucene.search.PhraseQuery$Builder add(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.PhraseQuery$Builder", "org.apache.lucene.search.PhraseQuery$Builder.add(org.apache.lucene.index.Term, int)", "public org.apache.lucene.search.PhraseQuery$Builder add(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.search.PhraseQuery", "org.apache.lucene.search.PhraseQuery$Builder.build()", "public org.apache.lucene.search.PhraseQuery build()"], ["org.apache.lucene.search.PhraseQuery$PhraseWeight", "org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.PhraseQuery$PhraseWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.PhraseQuery$PhraseWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.PhraseQuery$PhraseWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.PhraseQuery$PhraseWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.PhraseQuery$PostingsAndFreq", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq(org.apache.lucene.index.PostingsEnum, int, org.apache.lucene.index.Term...)", "public org.apache.lucene.search.PhraseQuery$PostingsAndFreq(org.apache.lucene.index.PostingsEnum, int, org.apache.lucene.index.Term...)"], ["int", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(org.apache.lucene.search.PhraseQuery$PostingsAndFreq)", "public int compareTo(org.apache.lucene.search.PhraseQuery$PostingsAndFreq)"], ["int", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.search.PhraseQuery", "org.apache.lucene.search.PhraseQuery(int, java.lang.String, java.lang.String...)", "public org.apache.lucene.search.PhraseQuery(int, java.lang.String, java.lang.String...)"], ["org.apache.lucene.search.PhraseQuery", "org.apache.lucene.search.PhraseQuery(java.lang.String, java.lang.String...)", "public org.apache.lucene.search.PhraseQuery(java.lang.String, java.lang.String...)"], ["org.apache.lucene.search.PhraseQuery", "org.apache.lucene.search.PhraseQuery(int, java.lang.String, org.apache.lucene.util.BytesRef...)", "public org.apache.lucene.search.PhraseQuery(int, java.lang.String, org.apache.lucene.util.BytesRef...)"], ["org.apache.lucene.search.PhraseQuery", "org.apache.lucene.search.PhraseQuery(java.lang.String, org.apache.lucene.util.BytesRef...)", "public org.apache.lucene.search.PhraseQuery(java.lang.String, org.apache.lucene.util.BytesRef...)"], ["int", "org.apache.lucene.search.PhraseQuery.getSlop()", "public int getSlop()"], ["org.apache.lucene.index.Term[]", "org.apache.lucene.search.PhraseQuery.getTerms()", "public org.apache.lucene.index.Term[] getTerms()"], ["int[]", "org.apache.lucene.search.PhraseQuery.getPositions()", "public int[] getPositions()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.PhraseQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.PhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.PhraseQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.PhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.PhraseQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.PointInSetQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.PointInSetQuery$2$1.hasNext()", "public boolean hasNext()"], ["byte[]", "org.apache.lucene.search.PointInSetQuery$2$1.next()", "public byte[] next()"], ["java.lang.Object", "org.apache.lucene.search.PointInSetQuery$2$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<byte[]>", "org.apache.lucene.search.PointInSetQuery$2.iterator()", "public java.util.Iterator<byte[]> iterator()"], ["int", "org.apache.lucene.search.PointInSetQuery$2.size()", "public int size()"], ["org.apache.lucene.search.PointInSetQuery$MergePointVisitor", "org.apache.lucene.search.PointInSetQuery$MergePointVisitor(org.apache.lucene.search.PointInSetQuery, org.apache.lucene.index.PrefixCodedTerms, org.apache.lucene.util.DocIdSetBuilder)", "public org.apache.lucene.search.PointInSetQuery$MergePointVisitor(org.apache.lucene.search.PointInSetQuery, org.apache.lucene.index.PrefixCodedTerms, org.apache.lucene.util.DocIdSetBuilder) throws java.io.IOException"], ["void", "org.apache.lucene.search.PointInSetQuery$MergePointVisitor.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.search.PointInSetQuery$MergePointVisitor.visit(int)", "public void visit(int)"], ["void", "org.apache.lucene.search.PointInSetQuery$MergePointVisitor.visit(int, byte[])", "public void visit(int, byte[])"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.search.PointInSetQuery$MergePointVisitor.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.search.PointInSetQuery$SinglePointVisitor", "org.apache.lucene.search.PointInSetQuery$SinglePointVisitor(org.apache.lucene.search.PointInSetQuery, org.apache.lucene.util.DocIdSetBuilder)", "public org.apache.lucene.search.PointInSetQuery$SinglePointVisitor(org.apache.lucene.search.PointInSetQuery, org.apache.lucene.util.DocIdSetBuilder)"], ["void", "org.apache.lucene.search.PointInSetQuery$SinglePointVisitor.setPoint(org.apache.lucene.util.BytesRef)", "public void setPoint(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.search.PointInSetQuery$SinglePointVisitor.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.search.PointInSetQuery$SinglePointVisitor.visit(int)", "public void visit(int)"], ["void", "org.apache.lucene.search.PointInSetQuery$SinglePointVisitor.visit(int, byte[])", "public void visit(int, byte[])"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.search.PointInSetQuery$SinglePointVisitor.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.search.PointInSetQuery$Stream", "org.apache.lucene.search.PointInSetQuery$Stream()", "public org.apache.lucene.search.PointInSetQuery$Stream()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.PointInSetQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public final org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.PointInSetQuery.getPackedPoints()", "public java.util.Collection<byte[]> getPackedPoints()"], ["java.lang.String", "org.apache.lucene.search.PointInSetQuery.getField()", "public java.lang.String getField()"], ["int", "org.apache.lucene.search.PointInSetQuery.getNumDims()", "public int getNumDims()"], ["int", "org.apache.lucene.search.PointInSetQuery.getBytesPerDim()", "public int getBytesPerDim()"], ["int", "org.apache.lucene.search.PointInSetQuery.hashCode()", "public final int hashCode()"], ["boolean", "org.apache.lucene.search.PointInSetQuery.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.PointInSetQuery.toString(java.lang.String)", "public final java.lang.String toString(java.lang.String)"], ["void", "org.apache.lucene.search.PointRangeQuery$1$1.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.search.PointRangeQuery$1$1.visit(int)", "public void visit(int)"], ["void", "org.apache.lucene.search.PointRangeQuery$1$1.visit(int, byte[])", "public void visit(int, byte[])"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.search.PointRangeQuery$1$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["void", "org.apache.lucene.search.PointRangeQuery$1$2.visit(int)", "public void visit(int)"], ["void", "org.apache.lucene.search.PointRangeQuery$1$2.visit(int, byte[])", "public void visit(int, byte[])"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.search.PointRangeQuery$1$2.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.PointRangeQuery$1$3.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean)"], ["long", "org.apache.lucene.search.PointRangeQuery$1$3.cost()", "public long cost()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.PointRangeQuery$1$4.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean) throws java.io.IOException"], ["long", "org.apache.lucene.search.PointRangeQuery$1$4.cost()", "public long cost()"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.search.PointRangeQuery$1.scorerSupplier(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.ScorerSupplier scorerSupplier(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.PointRangeQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.PointRangeQuery.checkArgs(java.lang.String, java.lang.Object, java.lang.Object)", "public static void checkArgs(java.lang.String, java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.PointRangeQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public final org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.PointRangeQuery.getField()", "public java.lang.String getField()"], ["int", "org.apache.lucene.search.PointRangeQuery.getNumDims()", "public int getNumDims()"], ["int", "org.apache.lucene.search.PointRangeQuery.getBytesPerDim()", "public int getBytesPerDim()"], ["byte[]", "org.apache.lucene.search.PointRangeQuery.getLowerPoint()", "public byte[] getLowerPoint()"], ["byte[]", "org.apache.lucene.search.PointRangeQuery.getUpperPoint()", "public byte[] getUpperPoint()"], ["int", "org.apache.lucene.search.PointRangeQuery.hashCode()", "public final int hashCode()"], ["boolean", "org.apache.lucene.search.PointRangeQuery.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.PointRangeQuery.toString(java.lang.String)", "public final java.lang.String toString(java.lang.String)"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.PositiveScoresOnlyCollector", "org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)", "public org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.PositiveScoresOnlyCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.PrefixQuery", "org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.search.PrefixQuery.toAutomaton(org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.PrefixQuery.getPrefix()", "public org.apache.lucene.index.Term getPrefix()"], ["java.lang.String", "org.apache.lucene.search.PrefixQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.PrefixQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.PrefixQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query()", "public org.apache.lucene.search.Query()"], ["java.lang.String", "org.apache.lucene.search.Query.toString()", "public final java.lang.String toString()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Query.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.QueryCachingPolicy$1.onUse(org.apache.lucene.search.Query)", "public void onUse(org.apache.lucene.search.Query)"], ["boolean", "org.apache.lucene.search.QueryCachingPolicy$1.shouldCache(org.apache.lucene.search.Query)", "public boolean shouldCache(org.apache.lucene.search.Query) throws java.io.IOException"], ["int", "org.apache.lucene.search.QueryRescorer$1.compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)", "public int compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)"], ["int", "org.apache.lucene.search.QueryRescorer$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.search.QueryRescorer$2.compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)", "public int compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)"], ["int", "org.apache.lucene.search.QueryRescorer$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.QueryRescorer", "org.apache.lucene.search.QueryRescorer(org.apache.lucene.search.Query)", "public org.apache.lucene.search.QueryRescorer(org.apache.lucene.search.Query)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.QueryRescorer.rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, int)", "public org.apache.lucene.search.TopDocs rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, int) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.QueryRescorer.explain(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.Explanation, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.Explanation, int) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.QueryRescorer.rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, org.apache.lucene.search.Query, double, int)", "public static org.apache.lucene.search.TopDocs rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, org.apache.lucene.search.Query, double, int) throws java.io.IOException"], ["org.apache.lucene.search.ReferenceManager", "org.apache.lucene.search.ReferenceManager()", "public org.apache.lucene.search.ReferenceManager()"], ["G", "org.apache.lucene.search.ReferenceManager.acquire()", "public final G acquire() throws java.io.IOException"], ["synchronized", "org.apache.lucene.search.ReferenceManager.void close()", "public final synchronized void close() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.ReferenceManager.maybeRefresh()", "public final boolean maybeRefresh() throws java.io.IOException"], ["void", "org.apache.lucene.search.ReferenceManager.maybeRefreshBlocking()", "public final void maybeRefreshBlocking() throws java.io.IOException"], ["void", "org.apache.lucene.search.ReferenceManager.release(G)", "public final void release(G) throws java.io.IOException"], ["void", "org.apache.lucene.search.ReferenceManager.addListener(org.apache.lucene.search.ReferenceManager$RefreshListener)", "public void addListener(org.apache.lucene.search.ReferenceManager$RefreshListener)"], ["void", "org.apache.lucene.search.ReferenceManager.removeListener(org.apache.lucene.search.ReferenceManager$RefreshListener)", "public void removeListener(org.apache.lucene.search.ReferenceManager$RefreshListener)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.search.RegexpQuery$1.getAutomaton(java.lang.String)", "public org.apache.lucene.util.automaton.Automaton getAutomaton(java.lang.String)"], ["org.apache.lucene.search.RegexpQuery", "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.RegexpQuery", "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int)", "public org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.search.RegexpQuery", "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, int)", "public org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, int)"], ["org.apache.lucene.search.RegexpQuery", "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, org.apache.lucene.util.automaton.AutomatonProvider, int)", "public org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, org.apache.lucene.util.automaton.AutomatonProvider, int)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.RegexpQuery.getRegexp()", "public org.apache.lucene.index.Term getRegexp()"], ["java.lang.String", "org.apache.lucene.search.RegexpQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.ReqExclBulkScorer.score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int)", "public int score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int) throws java.io.IOException"], ["long", "org.apache.lucene.search.ReqExclBulkScorer.cost()", "public long cost()"], ["boolean", "org.apache.lucene.search.ReqExclScorer$1.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.ReqExclScorer$1.matchCost()", "public float matchCost()"], ["boolean", "org.apache.lucene.search.ReqExclScorer$2.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.ReqExclScorer$2.matchCost()", "public float matchCost()"], ["org.apache.lucene.search.ReqExclScorer", "org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ReqExclScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["int", "org.apache.lucene.search.ReqExclScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ReqExclScorer.freq()", "public int freq() throws java.io.IOException"], ["float", "org.apache.lucene.search.ReqExclScorer.score()", "public float score() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ReqExclScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.ReqExclScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["org.apache.lucene.search.ReqOptSumScorer", "org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.ReqOptSumScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.ReqOptSumScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["int", "org.apache.lucene.search.ReqOptSumScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ReqOptSumScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqOptSumScorer.freq()", "public int freq() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ReqOptSumScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.Rescorer", "org.apache.lucene.search.Rescorer()", "public org.apache.lucene.search.Rescorer()"], ["org.apache.lucene.search.ScoreCachingWrappingScorer", "org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)"], ["float", "org.apache.lucene.search.ScoreCachingWrappingScorer.score()", "public float score() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ScoreCachingWrappingScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.ScoreDoc", "org.apache.lucene.search.ScoreDoc(int, float)", "public org.apache.lucene.search.ScoreDoc(int, float)"], ["org.apache.lucene.search.ScoreDoc", "org.apache.lucene.search.ScoreDoc(int, float, int)", "public org.apache.lucene.search.ScoreDoc(int, float, int)"], ["java.lang.String", "org.apache.lucene.search.ScoreDoc.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Scorer$ChildScorer", "org.apache.lucene.search.Scorer$ChildScorer(org.apache.lucene.search.Scorer, java.lang.String)", "public org.apache.lucene.search.Scorer$ChildScorer(org.apache.lucene.search.Scorer, java.lang.String)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Scorer.getWeight()", "public org.apache.lucene.search.Weight getWeight()"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.Scorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren() throws java.io.IOException"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.Scorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.search.ScorerSupplier()", "public org.apache.lucene.search.ScorerSupplier()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ScoringRewrite$2.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["void", "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.setNextEnum(org.apache.lucene.index.TermsEnum)", "public void setNextEnum(org.apache.lucene.index.TermsEnum)"], ["boolean", "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.collect(org.apache.lucene.util.BytesRef)", "public boolean collect(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart(int)", "public org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart(int)"], ["int[]", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.init()", "public int[] init()"], ["int[]", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.clear()", "public int[] clear()"], ["org.apache.lucene.search.ScoringRewrite", "org.apache.lucene.search.ScoringRewrite()", "public org.apache.lucene.search.ScoringRewrite()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ScoringRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.SearcherFactory", "org.apache.lucene.search.SearcherFactory()", "public org.apache.lucene.search.SearcherFactory()"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.SearcherFactory.newSearcher(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.IndexSearcher newSearcher(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.SearcherLifetimeManager$PruneByAge", "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge(double)", "public org.apache.lucene.search.SearcherLifetimeManager$PruneByAge(double)"], ["boolean", "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge.doPrune(double, org.apache.lucene.search.IndexSearcher)", "public boolean doPrune(double, org.apache.lucene.search.IndexSearcher)"], ["org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker(org.apache.lucene.search.IndexSearcher)"], ["int", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker)", "public int compareTo(org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker)"], ["synchronized", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.void close()", "public synchronized void close() throws java.io.IOException"], ["int", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.search.SearcherLifetimeManager", "org.apache.lucene.search.SearcherLifetimeManager()", "public org.apache.lucene.search.SearcherLifetimeManager()"], ["long", "org.apache.lucene.search.SearcherLifetimeManager.record(org.apache.lucene.search.IndexSearcher)", "public long record(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.SearcherLifetimeManager.acquire(long)", "public org.apache.lucene.search.IndexSearcher acquire(long)"], ["void", "org.apache.lucene.search.SearcherLifetimeManager.release(org.apache.lucene.search.IndexSearcher)", "public void release(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["synchronized", "org.apache.lucene.search.SearcherLifetimeManager.void prune(org.apache.lucene.search.SearcherLifetimeManager$Pruner)", "public synchronized void prune(org.apache.lucene.search.SearcherLifetimeManager$Pruner) throws java.io.IOException"], ["synchronized", "org.apache.lucene.search.SearcherLifetimeManager.void close()", "public synchronized void close() throws java.io.IOException"], ["org.apache.lucene.search.SearcherManager", "org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, org.apache.lucene.search.SearcherFactory)", "public org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, org.apache.lucene.search.SearcherFactory) throws java.io.IOException"], ["org.apache.lucene.search.SearcherManager", "org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, boolean, boolean, org.apache.lucene.search.SearcherFactory)", "public org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, boolean, boolean, org.apache.lucene.search.SearcherFactory) throws java.io.IOException"], ["org.apache.lucene.search.SearcherManager", "org.apache.lucene.search.SearcherManager(org.apache.lucene.store.Directory, org.apache.lucene.search.SearcherFactory)", "public org.apache.lucene.search.SearcherManager(org.apache.lucene.store.Directory, org.apache.lucene.search.SearcherFactory) throws java.io.IOException"], ["org.apache.lucene.search.SearcherManager", "org.apache.lucene.search.SearcherManager(org.apache.lucene.index.DirectoryReader, org.apache.lucene.search.SearcherFactory)", "public org.apache.lucene.search.SearcherManager(org.apache.lucene.index.DirectoryReader, org.apache.lucene.search.SearcherFactory) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SearcherManager.isSearcherCurrent()", "public boolean isSearcherCurrent() throws java.io.IOException"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.SearcherManager.getSearcher(org.apache.lucene.search.SearcherFactory, org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.search.IndexSearcher getSearcher(org.apache.lucene.search.SearcherFactory, org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.SimpleCollector", "org.apache.lucene.search.SimpleCollector()", "public org.apache.lucene.search.SimpleCollector()"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.SimpleCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public final org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.SimpleCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.SimpleFieldComparator", "org.apache.lucene.search.SimpleFieldComparator()", "public org.apache.lucene.search.SimpleFieldComparator()"], ["org.apache.lucene.search.LeafFieldComparator", "org.apache.lucene.search.SimpleFieldComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)", "public final org.apache.lucene.search.LeafFieldComparator getLeafComparator(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.SimpleFieldComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["int", "org.apache.lucene.search.SloppyPhraseScorer$1.compare(org.apache.lucene.search.PhrasePositions, org.apache.lucene.search.PhrasePositions)", "public int compare(org.apache.lucene.search.PhrasePositions, org.apache.lucene.search.PhrasePositions)"], ["int", "org.apache.lucene.search.SloppyPhraseScorer$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.lucene.search.SloppyPhraseScorer$2.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.SloppyPhraseScorer$2.matchCost()", "public float matchCost()"], ["java.lang.String", "org.apache.lucene.search.SloppyPhraseScorer$2.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.SloppyPhraseScorer.freq()", "public int freq()"], ["int", "org.apache.lucene.search.SloppyPhraseScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.SloppyPhraseScorer.score()", "public float score() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.SloppyPhraseScorer.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.SloppyPhraseScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.SloppyPhraseScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort()", "public org.apache.lucene.search.Sort()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)", "public org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)", "public org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)"], ["void", "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField)", "public void setSort(org.apache.lucene.search.SortField)"], ["void", "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField...)", "public void setSort(org.apache.lucene.search.SortField...)"], ["org.apache.lucene.search.SortField[]", "org.apache.lucene.search.Sort.getSort()", "public org.apache.lucene.search.SortField[] getSort()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort.rewrite(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Sort rewrite(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.Sort.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.Sort.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.Sort.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.Sort.needsScores()", "public boolean needsScores()"], ["java.lang.String", "org.apache.lucene.search.SortField$1.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.SortField$2.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.SortField$Type[]", "org.apache.lucene.search.SortField$Type.values()", "public static org.apache.lucene.search.SortField$Type[] values()"], ["org.apache.lucene.search.SortField$Type", "org.apache.lucene.search.SortField$Type.valueOf(java.lang.String)", "public static org.apache.lucene.search.SortField$Type valueOf(java.lang.String)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)"], ["java.lang.Object", "org.apache.lucene.search.SortField.getMissingValue()", "public java.lang.Object getMissingValue()"], ["void", "org.apache.lucene.search.SortField.setMissingValue(java.lang.Object)", "public void setMissingValue(java.lang.Object)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)"], ["java.lang.String", "org.apache.lucene.search.SortField.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.SortField$Type", "org.apache.lucene.search.SortField.getType()", "public org.apache.lucene.search.SortField$Type getType()"], ["boolean", "org.apache.lucene.search.SortField.getReverse()", "public boolean getReverse()"], ["org.apache.lucene.search.FieldComparatorSource", "org.apache.lucene.search.SortField.getComparatorSource()", "public org.apache.lucene.search.FieldComparatorSource getComparatorSource()"], ["java.lang.String", "org.apache.lucene.search.SortField.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.SortField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.SortField.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.search.SortField.setBytesComparator(java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public void setBytesComparator(java.util.Comparator<org.apache.lucene.util.BytesRef>)"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.SortField.getBytesComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getBytesComparator()"], ["org.apache.lucene.search.FieldComparator<?>", "org.apache.lucene.search.SortField.getComparator(int, int)", "public org.apache.lucene.search.FieldComparator<?> getComparator(int, int)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField.rewrite(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.SortField rewrite(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SortField.needsScores()", "public boolean needsScores()"], ["int", "org.apache.lucene.search.SortRescorer$1.compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)", "public int compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)"], ["int", "org.apache.lucene.search.SortRescorer$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.SortRescorer", "org.apache.lucene.search.SortRescorer(org.apache.lucene.search.Sort)", "public org.apache.lucene.search.SortRescorer(org.apache.lucene.search.Sort)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.SortRescorer.rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, int)", "public org.apache.lucene.search.TopDocs rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, int) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.SortRescorer.explain(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.Explanation, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.Explanation, int) throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedNumericSelector$1.longValue()", "public long longValue() throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedNumericSelector$2.longValue()", "public long longValue() throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedNumericSelector$MaxValue.docID()", "public int docID()"], ["int", "org.apache.lucene.search.SortedNumericSelector$MaxValue.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedNumericSelector$MaxValue.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SortedNumericSelector$MaxValue.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedNumericSelector$MaxValue.cost()", "public long cost()"], ["long", "org.apache.lucene.search.SortedNumericSelector$MaxValue.longValue()", "public long longValue()"], ["int", "org.apache.lucene.search.SortedNumericSelector$MinValue.docID()", "public int docID()"], ["int", "org.apache.lucene.search.SortedNumericSelector$MinValue.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedNumericSelector$MinValue.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SortedNumericSelector$MinValue.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedNumericSelector$MinValue.cost()", "public long cost()"], ["long", "org.apache.lucene.search.SortedNumericSelector$MinValue.longValue()", "public long longValue()"], ["org.apache.lucene.search.SortedNumericSelector$Type[]", "org.apache.lucene.search.SortedNumericSelector$Type.values()", "public static org.apache.lucene.search.SortedNumericSelector$Type[] values()"], ["org.apache.lucene.search.SortedNumericSelector$Type", "org.apache.lucene.search.SortedNumericSelector$Type.valueOf(java.lang.String)", "public static org.apache.lucene.search.SortedNumericSelector$Type valueOf(java.lang.String)"], ["org.apache.lucene.search.SortedNumericSelector", "org.apache.lucene.search.SortedNumericSelector()", "public org.apache.lucene.search.SortedNumericSelector()"], ["org.apache.lucene.index.NumericDocValues", "org.apache.lucene.search.SortedNumericSelector.wrap(org.apache.lucene.index.SortedNumericDocValues, org.apache.lucene.search.SortedNumericSelector$Type, org.apache.lucene.search.SortField$Type)", "public static org.apache.lucene.index.NumericDocValues wrap(org.apache.lucene.index.SortedNumericDocValues, org.apache.lucene.search.SortedNumericSelector$Type, org.apache.lucene.search.SortField$Type)"], ["org.apache.lucene.search.SortedNumericSortField", "org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type)", "public org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type)"], ["org.apache.lucene.search.SortedNumericSortField", "org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)", "public org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)"], ["org.apache.lucene.search.SortedNumericSortField", "org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean, org.apache.lucene.search.SortedNumericSelector$Type)", "public org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean, org.apache.lucene.search.SortedNumericSelector$Type)"], ["org.apache.lucene.search.SortField$Type", "org.apache.lucene.search.SortedNumericSortField.getNumericType()", "public org.apache.lucene.search.SortField$Type getNumericType()"], ["org.apache.lucene.search.SortedNumericSelector$Type", "org.apache.lucene.search.SortedNumericSortField.getSelector()", "public org.apache.lucene.search.SortedNumericSelector$Type getSelector()"], ["int", "org.apache.lucene.search.SortedNumericSortField.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.SortedNumericSortField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.SortedNumericSortField.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.search.SortedNumericSortField.setMissingValue(java.lang.Object)", "public void setMissingValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator<?>", "org.apache.lucene.search.SortedNumericSortField.getComparator(int, int)", "public org.apache.lucene.search.FieldComparator<?> getComparator(int, int)"], ["int", "org.apache.lucene.search.SortedSetSelector$MaxValue.docID()", "public int docID()"], ["int", "org.apache.lucene.search.SortedSetSelector$MaxValue.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MaxValue.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SortedSetSelector$MaxValue.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedSetSelector$MaxValue.cost()", "public long cost()"], ["int", "org.apache.lucene.search.SortedSetSelector$MaxValue.ordValue()", "public int ordValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.SortedSetSelector$MaxValue.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MaxValue.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.search.SortedSetSelector$MaxValue.lookupTerm(org.apache.lucene.util.BytesRef)", "public int lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.docID()", "public int docID()"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.cost()", "public long cost()"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.ordValue()", "public int ordValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.lookupTerm(org.apache.lucene.util.BytesRef)", "public int lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.docID()", "public int docID()"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.cost()", "public long cost()"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.ordValue()", "public int ordValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.lookupTerm(org.apache.lucene.util.BytesRef)", "public int lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MinValue.docID()", "public int docID()"], ["int", "org.apache.lucene.search.SortedSetSelector$MinValue.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MinValue.advance(int)", "public int advance(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SortedSetSelector$MinValue.advanceExact(int)", "public boolean advanceExact(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.SortedSetSelector$MinValue.cost()", "public long cost()"], ["int", "org.apache.lucene.search.SortedSetSelector$MinValue.ordValue()", "public int ordValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.SortedSetSelector$MinValue.lookupOrd(int)", "public org.apache.lucene.util.BytesRef lookupOrd(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.SortedSetSelector$MinValue.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.search.SortedSetSelector$MinValue.lookupTerm(org.apache.lucene.util.BytesRef)", "public int lookupTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.search.SortedSetSelector$Type[]", "org.apache.lucene.search.SortedSetSelector$Type.values()", "public static org.apache.lucene.search.SortedSetSelector$Type[] values()"], ["org.apache.lucene.search.SortedSetSelector$Type", "org.apache.lucene.search.SortedSetSelector$Type.valueOf(java.lang.String)", "public static org.apache.lucene.search.SortedSetSelector$Type valueOf(java.lang.String)"], ["org.apache.lucene.search.SortedSetSelector", "org.apache.lucene.search.SortedSetSelector()", "public org.apache.lucene.search.SortedSetSelector()"], ["org.apache.lucene.index.SortedDocValues", "org.apache.lucene.search.SortedSetSelector.wrap(org.apache.lucene.index.SortedSetDocValues, org.apache.lucene.search.SortedSetSelector$Type)", "public static org.apache.lucene.index.SortedDocValues wrap(org.apache.lucene.index.SortedSetDocValues, org.apache.lucene.search.SortedSetSelector$Type)"], ["org.apache.lucene.search.SortedSetSortField", "org.apache.lucene.search.SortedSetSortField(java.lang.String, boolean)", "public org.apache.lucene.search.SortedSetSortField(java.lang.String, boolean)"], ["org.apache.lucene.search.SortedSetSortField", "org.apache.lucene.search.SortedSetSortField(java.lang.String, boolean, org.apache.lucene.search.SortedSetSelector$Type)", "public org.apache.lucene.search.SortedSetSortField(java.lang.String, boolean, org.apache.lucene.search.SortedSetSelector$Type)"], ["org.apache.lucene.search.SortedSetSelector$Type", "org.apache.lucene.search.SortedSetSortField.getSelector()", "public org.apache.lucene.search.SortedSetSelector$Type getSelector()"], ["int", "org.apache.lucene.search.SortedSetSortField.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.SortedSetSortField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.SortedSetSortField.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.search.SortedSetSortField.setMissingValue(java.lang.Object)", "public void setMissingValue(java.lang.Object)"], ["org.apache.lucene.search.FieldComparator<?>", "org.apache.lucene.search.SortedSetSortField.getComparator(int, int)", "public org.apache.lucene.search.FieldComparator<?> getComparator(int, int)"], ["void", "org.apache.lucene.search.SynonymQuery$SynonymWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.SynonymQuery$SynonymWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.SynonymQuery$SynonymWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.SynonymQuery", "org.apache.lucene.search.SynonymQuery(org.apache.lucene.index.Term...)", "public org.apache.lucene.search.SynonymQuery(org.apache.lucene.index.Term...)"], ["java.util.List<org.apache.lucene.index.Term>", "org.apache.lucene.search.SynonymQuery.getTerms()", "public java.util.List<org.apache.lucene.index.Term> getTerms()"], ["java.lang.String", "org.apache.lucene.search.SynonymQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.SynonymQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.SynonymQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.SynonymQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.SynonymQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.TermCollectingRewrite$TermCollector.setReaderContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.LeafReaderContext)", "public void setReaderContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.LeafReaderContext)"], ["void", "org.apache.lucene.search.TermInSetQuery$1.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.TermInSetQuery$1.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.TermInSetQuery$1.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.TermInSetQuery", "org.apache.lucene.search.TermInSetQuery(java.lang.String, java.util.Collection<org.apache.lucene.util.BytesRef>)", "public org.apache.lucene.search.TermInSetQuery(java.lang.String, java.util.Collection<org.apache.lucene.util.BytesRef>)"], ["org.apache.lucene.search.TermInSetQuery", "org.apache.lucene.search.TermInSetQuery(java.lang.String, org.apache.lucene.util.BytesRef...)", "public org.apache.lucene.search.TermInSetQuery(java.lang.String, org.apache.lucene.util.BytesRef...)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.TermInSetQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TermInSetQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.TermInSetQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.index.PrefixCodedTerms", "org.apache.lucene.search.TermInSetQuery.getTermData()", "public org.apache.lucene.index.PrefixCodedTerms getTermData()"], ["java.lang.String", "org.apache.lucene.search.TermInSetQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["long", "org.apache.lucene.search.TermInSetQuery.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.search.TermInSetQuery.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.TermInSetQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.TermQuery$TermWeight", "org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.IndexSearcher, boolean, float, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.IndexSearcher, boolean, float, org.apache.lucene.index.TermContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.TermQuery$TermWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.TermQuery$TermWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.TermQuery$TermWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.TermQuery$TermWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.TermQuery", "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.TermQuery", "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.TermQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.TermQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.TermQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.TermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.TermQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.TermRangeQuery", "org.apache.lucene.search.TermRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)", "public org.apache.lucene.search.TermRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.search.TermRangeQuery.toAutomaton(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)", "public static org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"], ["org.apache.lucene.search.TermRangeQuery", "org.apache.lucene.search.TermRangeQuery.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public static org.apache.lucene.search.TermRangeQuery newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermRangeQuery.getLowerTerm()", "public org.apache.lucene.util.BytesRef getLowerTerm()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermRangeQuery.getUpperTerm()", "public org.apache.lucene.util.BytesRef getUpperTerm()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.includesLower()", "public boolean includesLower()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.includesUpper()", "public boolean includesUpper()"], ["java.lang.String", "org.apache.lucene.search.TermRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.TermRangeQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.TermScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.TermScorer.freq()", "public int freq() throws java.io.IOException"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.TermScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["float", "org.apache.lucene.search.TermScorer.score()", "public float score() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.TermScorer.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.TermStatistics", "org.apache.lucene.search.TermStatistics(org.apache.lucene.util.BytesRef, long, long)", "public org.apache.lucene.search.TermStatistics(org.apache.lucene.util.BytesRef, long, long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermStatistics.term()", "public final org.apache.lucene.util.BytesRef term()"], ["long", "org.apache.lucene.search.TermStatistics.docFreq()", "public final long docFreq()"], ["long", "org.apache.lucene.search.TermStatistics.totalTermFreq()", "public final long totalTermFreq()"], ["void", "org.apache.lucene.search.TimeLimitingCollector$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeAllowed()", "public long getTimeAllowed()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeElapsed()", "public long getTimeElapsed()"], ["int", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getLastDocCollected()", "public int getLastDocCollected()"], ["org.apache.lucene.search.TimeLimitingCollector$TimerThread", "org.apache.lucene.search.TimeLimitingCollector$TimerThread(long, org.apache.lucene.util.Counter)", "public org.apache.lucene.search.TimeLimitingCollector$TimerThread(long, org.apache.lucene.util.Counter)"], ["org.apache.lucene.search.TimeLimitingCollector$TimerThread", "org.apache.lucene.search.TimeLimitingCollector$TimerThread(org.apache.lucene.util.Counter)", "public org.apache.lucene.search.TimeLimitingCollector$TimerThread(org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.run()", "public void run()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getMilliseconds()", "public long getMilliseconds()"], ["void", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.stopTimer()", "public void stopTimer()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getResolution()", "public long getResolution()"], ["void", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.setResolution(long)", "public void setResolution(long)"], ["org.apache.lucene.search.TimeLimitingCollector", "org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, org.apache.lucene.util.Counter, long)", "public org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, org.apache.lucene.util.Counter, long)"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setBaseline(long)", "public void setBaseline(long)"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setBaseline()", "public void setBaseline()"], ["boolean", "org.apache.lucene.search.TimeLimitingCollector.isGreedy()", "public boolean isGreedy()"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean)", "public void setGreedy(boolean)"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.TimeLimitingCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TimeLimitingCollector.needsScores()", "public boolean needsScores()"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setCollector(org.apache.lucene.search.Collector)", "public void setCollector(org.apache.lucene.search.Collector)"], ["org.apache.lucene.util.Counter", "org.apache.lucene.search.TimeLimitingCollector.getGlobalCounter()", "public static org.apache.lucene.util.Counter getGlobalCounter()"], ["org.apache.lucene.search.TimeLimitingCollector$TimerThread", "org.apache.lucene.search.TimeLimitingCollector.getGlobalTimerThread()", "public static org.apache.lucene.search.TimeLimitingCollector$TimerThread getGlobalTimerThread()"], ["org.apache.lucene.search.TopDocs$MergeSortQueue", "org.apache.lucene.search.TopDocs$MergeSortQueue(org.apache.lucene.search.Sort, org.apache.lucene.search.TopDocs[])", "public org.apache.lucene.search.TopDocs$MergeSortQueue(org.apache.lucene.search.Sort, org.apache.lucene.search.TopDocs[])"], ["boolean", "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)", "public boolean lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"], ["boolean", "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.TopDocs$ScoreMergeSortQueue", "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue(org.apache.lucene.search.TopDocs[])", "public org.apache.lucene.search.TopDocs$ScoreMergeSortQueue(org.apache.lucene.search.TopDocs[])"], ["boolean", "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)", "public boolean lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"], ["boolean", "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.TopDocs$ShardRef.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.TopDocs.getMaxScore()", "public float getMaxScore()"], ["void", "org.apache.lucene.search.TopDocs.setMaxScore(float)", "public void setMaxScore(float)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocs(long, org.apache.lucene.search.ScoreDoc[], float)", "public org.apache.lucene.search.TopDocs(long, org.apache.lucene.search.ScoreDoc[], float)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocs.merge(int, org.apache.lucene.search.TopDocs[])", "public static org.apache.lucene.search.TopDocs merge(int, org.apache.lucene.search.TopDocs[])"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocs.merge(int, int, org.apache.lucene.search.TopDocs[], boolean)", "public static org.apache.lucene.search.TopDocs merge(int, int, org.apache.lucene.search.TopDocs[], boolean)"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.TopDocs.merge(org.apache.lucene.search.Sort, int, org.apache.lucene.search.TopFieldDocs[])", "public static org.apache.lucene.search.TopFieldDocs merge(org.apache.lucene.search.Sort, int, org.apache.lucene.search.TopFieldDocs[])"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.TopDocs.merge(org.apache.lucene.search.Sort, int, int, org.apache.lucene.search.TopFieldDocs[], boolean)", "public static org.apache.lucene.search.TopFieldDocs merge(org.apache.lucene.search.Sort, int, int, org.apache.lucene.search.TopFieldDocs[], boolean)"], ["int", "org.apache.lucene.search.TopDocsCollector.getTotalHits()", "public int getTotalHits()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs()", "public org.apache.lucene.search.TopDocs topDocs()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs(int)", "public org.apache.lucene.search.TopDocs topDocs(int)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs(int, int)", "public org.apache.lucene.search.TopDocs topDocs(int, int)"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorLeafCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$PagingFieldCollector", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, org.apache.lucene.search.FieldDoc, int, boolean, boolean, boolean)", "public org.apache.lucene.search.TopFieldCollector$PagingFieldCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, org.apache.lucene.search.FieldDoc, int, boolean, boolean, boolean)"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.topDocs()", "public org.apache.lucene.search.TopDocs topDocs()"], ["void", "org.apache.lucene.search.TopFieldCollector$SimpleFieldCollector$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$SimpleFieldCollector", "org.apache.lucene.search.TopFieldCollector$SimpleFieldCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean, boolean, boolean)", "public org.apache.lucene.search.TopFieldCollector$SimpleFieldCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean, boolean, boolean)"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.TopFieldCollector$SimpleFieldCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopFieldCollector$SimpleFieldCollector.topDocs()", "public org.apache.lucene.search.TopDocs topDocs()"], ["boolean", "org.apache.lucene.search.TopFieldCollector.needsScores()", "public boolean needsScores()"], ["org.apache.lucene.search.TopFieldCollector", "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean)", "public static org.apache.lucene.search.TopFieldCollector create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean)"], ["org.apache.lucene.search.TopFieldCollector", "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, org.apache.lucene.search.FieldDoc, boolean, boolean, boolean)", "public static org.apache.lucene.search.TopFieldCollector create(org.apache.lucene.search.Sort, int, org.apache.lucene.search.FieldDoc, boolean, boolean, boolean)"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.TopFieldCollector.topDocs()", "public org.apache.lucene.search.TopFieldDocs topDocs()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopFieldCollector.topDocs()", "public org.apache.lucene.search.TopDocs topDocs()"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.TopFieldDocs(long, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)", "public org.apache.lucene.search.TopFieldDocs(long, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)"], ["void", "org.apache.lucene.search.TopScoreDocCollector$PagingTopScoreDocCollector$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.TopScoreDocCollector$PagingTopScoreDocCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopScoreDocCollector$ScorerLeafCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopScoreDocCollector$SimpleTopScoreDocCollector$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["org.apache.lucene.search.LeafCollector", "org.apache.lucene.search.TopScoreDocCollector$SimpleTopScoreDocCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.LeafCollector getLeafCollector(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.TopScoreDocCollector", "org.apache.lucene.search.TopScoreDocCollector.create(int)", "public static org.apache.lucene.search.TopScoreDocCollector create(int)"], ["org.apache.lucene.search.TopScoreDocCollector", "org.apache.lucene.search.TopScoreDocCollector.create(int, org.apache.lucene.search.ScoreDoc)", "public static org.apache.lucene.search.TopScoreDocCollector create(int, org.apache.lucene.search.ScoreDoc)"], ["boolean", "org.apache.lucene.search.TopScoreDocCollector.needsScores()", "public boolean needsScores()"], ["void", "org.apache.lucene.search.TopTermsRewrite$1.setNextEnum(org.apache.lucene.index.TermsEnum)", "public void setNextEnum(org.apache.lucene.index.TermsEnum)"], ["boolean", "org.apache.lucene.search.TopTermsRewrite$1.collect(org.apache.lucene.util.BytesRef)", "public boolean collect(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["int", "org.apache.lucene.search.TopTermsRewrite$2.compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm, org.apache.lucene.search.TopTermsRewrite$ScoreTerm)", "public int compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm, org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"], ["int", "org.apache.lucene.search.TopTermsRewrite$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.TopTermsRewrite$ScoreTerm", "org.apache.lucene.search.TopTermsRewrite$ScoreTerm(org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TopTermsRewrite$ScoreTerm(org.apache.lucene.index.TermContext)"], ["int", "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(org.apache.lucene.search.TopTermsRewrite$ScoreTerm)", "public int compareTo(org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"], ["int", "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.search.TopTermsRewrite", "org.apache.lucene.search.TopTermsRewrite(int)", "public org.apache.lucene.search.TopTermsRewrite(int)"], ["int", "org.apache.lucene.search.TopTermsRewrite.getSize()", "public int getSize()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.TopTermsRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["int", "org.apache.lucene.search.TopTermsRewrite.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.TopTermsRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.TotalHitCountCollector", "org.apache.lucene.search.TotalHitCountCollector()", "public org.apache.lucene.search.TotalHitCountCollector()"], ["int", "org.apache.lucene.search.TotalHitCountCollector.getTotalHits()", "public int getTotalHits()"], ["void", "org.apache.lucene.search.TotalHitCountCollector.collect(int)", "public void collect(int)"], ["boolean", "org.apache.lucene.search.TotalHitCountCollector.needsScores()", "public boolean needsScores()"], ["int", "org.apache.lucene.search.TwoPhaseIterator$TwoPhaseIteratorAsDocIdSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.search.TwoPhaseIterator$TwoPhaseIteratorAsDocIdSetIterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.TwoPhaseIterator$TwoPhaseIteratorAsDocIdSetIterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.TwoPhaseIterator$TwoPhaseIteratorAsDocIdSetIterator.cost()", "public long cost()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.TwoPhaseIterator.asDocIdSetIterator(org.apache.lucene.search.TwoPhaseIterator)", "public static org.apache.lucene.search.DocIdSetIterator asDocIdSetIterator(org.apache.lucene.search.TwoPhaseIterator)"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.TwoPhaseIterator.unwrap(org.apache.lucene.search.DocIdSetIterator)", "public static org.apache.lucene.search.TwoPhaseIterator unwrap(org.apache.lucene.search.DocIdSetIterator)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.TwoPhaseIterator.approximation()", "public org.apache.lucene.search.DocIdSetIterator approximation()"], ["org.apache.lucene.search.UsageTrackingQueryCachingPolicy", "org.apache.lucene.search.UsageTrackingQueryCachingPolicy(int)", "public org.apache.lucene.search.UsageTrackingQueryCachingPolicy(int)"], ["org.apache.lucene.search.UsageTrackingQueryCachingPolicy", "org.apache.lucene.search.UsageTrackingQueryCachingPolicy()", "public org.apache.lucene.search.UsageTrackingQueryCachingPolicy()"], ["void", "org.apache.lucene.search.UsageTrackingQueryCachingPolicy.onUse(org.apache.lucene.search.Query)", "public void onUse(org.apache.lucene.search.Query)"], ["boolean", "org.apache.lucene.search.UsageTrackingQueryCachingPolicy.shouldCache(org.apache.lucene.search.Query)", "public boolean shouldCache(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.Weight$1.get(boolean)", "public org.apache.lucene.search.Scorer get(boolean)"], ["long", "org.apache.lucene.search.Weight$1.cost()", "public long cost()"], ["org.apache.lucene.search.Weight$DefaultBulkScorer", "org.apache.lucene.search.Weight$DefaultBulkScorer(org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.Weight$DefaultBulkScorer(org.apache.lucene.search.Scorer)"], ["long", "org.apache.lucene.search.Weight$DefaultBulkScorer.cost()", "public long cost()"], ["int", "org.apache.lucene.search.Weight$DefaultBulkScorer.score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int)", "public int score(org.apache.lucene.search.LeafCollector, org.apache.lucene.util.Bits, int, int) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Weight.getQuery()", "public final org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.ScorerSupplier", "org.apache.lucene.search.Weight.scorerSupplier(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.ScorerSupplier scorerSupplier(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.BulkScorer", "org.apache.lucene.search.Weight.bulkScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.BulkScorer bulkScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.WildcardQuery", "org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.WildcardQuery", "org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term, int)", "public org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.search.WildcardQuery.toAutomaton(org.apache.lucene.index.Term)", "public static org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.WildcardQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["java.lang.String", "org.apache.lucene.search.WildcardQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect()", "public org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect()"], ["float", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AfterEffect", "org.apache.lucene.search.similarities.AfterEffect()", "public org.apache.lucene.search.similarities.AfterEffect()"], ["org.apache.lucene.search.similarities.AfterEffectB", "org.apache.lucene.search.similarities.AfterEffectB()", "public org.apache.lucene.search.similarities.AfterEffectB()"], ["float", "org.apache.lucene.search.similarities.AfterEffectB.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.AfterEffectB.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.AfterEffectB.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AfterEffectL", "org.apache.lucene.search.similarities.AfterEffectL()", "public org.apache.lucene.search.similarities.AfterEffectL()"], ["float", "org.apache.lucene.search.similarities.AfterEffectL.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.AfterEffectL.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.AfterEffectL.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Axiomatic", "org.apache.lucene.search.similarities.Axiomatic(float, int, float)", "public org.apache.lucene.search.similarities.Axiomatic(float, int, float)"], ["org.apache.lucene.search.similarities.Axiomatic", "org.apache.lucene.search.similarities.Axiomatic(float)", "public org.apache.lucene.search.similarities.Axiomatic(float)"], ["org.apache.lucene.search.similarities.Axiomatic", "org.apache.lucene.search.similarities.Axiomatic(float, int)", "public org.apache.lucene.search.similarities.Axiomatic(float, int)"], ["org.apache.lucene.search.similarities.Axiomatic", "org.apache.lucene.search.similarities.Axiomatic()", "public org.apache.lucene.search.similarities.Axiomatic()"], ["float", "org.apache.lucene.search.similarities.Axiomatic.score(org.apache.lucene.search.similarities.BasicStats, float, float)", "public float score(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["org.apache.lucene.search.similarities.AxiomaticF1EXP", "org.apache.lucene.search.similarities.AxiomaticF1EXP(float, float)", "public org.apache.lucene.search.similarities.AxiomaticF1EXP(float, float)"], ["org.apache.lucene.search.similarities.AxiomaticF1EXP", "org.apache.lucene.search.similarities.AxiomaticF1EXP(float)", "public org.apache.lucene.search.similarities.AxiomaticF1EXP(float)"], ["org.apache.lucene.search.similarities.AxiomaticF1EXP", "org.apache.lucene.search.similarities.AxiomaticF1EXP()", "public org.apache.lucene.search.similarities.AxiomaticF1EXP()"], ["java.lang.String", "org.apache.lucene.search.similarities.AxiomaticF1EXP.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AxiomaticF1LOG", "org.apache.lucene.search.similarities.AxiomaticF1LOG(float)", "public org.apache.lucene.search.similarities.AxiomaticF1LOG(float)"], ["org.apache.lucene.search.similarities.AxiomaticF1LOG", "org.apache.lucene.search.similarities.AxiomaticF1LOG()", "public org.apache.lucene.search.similarities.AxiomaticF1LOG()"], ["java.lang.String", "org.apache.lucene.search.similarities.AxiomaticF1LOG.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AxiomaticF2EXP", "org.apache.lucene.search.similarities.AxiomaticF2EXP(float, float)", "public org.apache.lucene.search.similarities.AxiomaticF2EXP(float, float)"], ["org.apache.lucene.search.similarities.AxiomaticF2EXP", "org.apache.lucene.search.similarities.AxiomaticF2EXP(float)", "public org.apache.lucene.search.similarities.AxiomaticF2EXP(float)"], ["org.apache.lucene.search.similarities.AxiomaticF2EXP", "org.apache.lucene.search.similarities.AxiomaticF2EXP()", "public org.apache.lucene.search.similarities.AxiomaticF2EXP()"], ["java.lang.String", "org.apache.lucene.search.similarities.AxiomaticF2EXP.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AxiomaticF2LOG", "org.apache.lucene.search.similarities.AxiomaticF2LOG(float)", "public org.apache.lucene.search.similarities.AxiomaticF2LOG(float)"], ["org.apache.lucene.search.similarities.AxiomaticF2LOG", "org.apache.lucene.search.similarities.AxiomaticF2LOG()", "public org.apache.lucene.search.similarities.AxiomaticF2LOG()"], ["java.lang.String", "org.apache.lucene.search.similarities.AxiomaticF2LOG.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AxiomaticF3EXP", "org.apache.lucene.search.similarities.AxiomaticF3EXP(float, int, float)", "public org.apache.lucene.search.similarities.AxiomaticF3EXP(float, int, float)"], ["org.apache.lucene.search.similarities.AxiomaticF3EXP", "org.apache.lucene.search.similarities.AxiomaticF3EXP(float, int)", "public org.apache.lucene.search.similarities.AxiomaticF3EXP(float, int)"], ["java.lang.String", "org.apache.lucene.search.similarities.AxiomaticF3EXP.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AxiomaticF3LOG", "org.apache.lucene.search.similarities.AxiomaticF3LOG(float, int)", "public org.apache.lucene.search.similarities.AxiomaticF3LOG(float, int)"], ["java.lang.String", "org.apache.lucene.search.similarities.AxiomaticF3LOG.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.score(int, float)", "public float score(int, float) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.similarities.BM25Similarity", "org.apache.lucene.search.similarities.BM25Similarity(float, float)", "public org.apache.lucene.search.similarities.BM25Similarity(float, float)"], ["org.apache.lucene.search.similarities.BM25Similarity", "org.apache.lucene.search.similarities.BM25Similarity()", "public org.apache.lucene.search.similarities.BM25Similarity()"], ["void", "org.apache.lucene.search.similarities.BM25Similarity.setDiscountOverlaps(boolean)", "public void setDiscountOverlaps(boolean)"], ["boolean", "org.apache.lucene.search.similarities.BM25Similarity.getDiscountOverlaps()", "public boolean getDiscountOverlaps()"], ["long", "org.apache.lucene.search.similarities.BM25Similarity.computeNorm(org.apache.lucene.index.FieldInvertState)", "public final long computeNorm(org.apache.lucene.index.FieldInvertState)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.BM25Similarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.similarities.BM25Similarity.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$SimScorer simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.similarities.BM25Similarity.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.BM25Similarity.getK1()", "public final float getK1()"], ["float", "org.apache.lucene.search.similarities.BM25Similarity.getB()", "public final float getB()"], ["org.apache.lucene.search.similarities.BasicModel", "org.apache.lucene.search.similarities.BasicModel()", "public org.apache.lucene.search.similarities.BasicModel()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BasicModel.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.similarities.BasicModelBE", "org.apache.lucene.search.similarities.BasicModelBE()", "public org.apache.lucene.search.similarities.BasicModelBE()"], ["float", "org.apache.lucene.search.similarities.BasicModelBE.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelBE.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelD", "org.apache.lucene.search.similarities.BasicModelD()", "public org.apache.lucene.search.similarities.BasicModelD()"], ["float", "org.apache.lucene.search.similarities.BasicModelD.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelD.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelG", "org.apache.lucene.search.similarities.BasicModelG()", "public org.apache.lucene.search.similarities.BasicModelG()"], ["float", "org.apache.lucene.search.similarities.BasicModelG.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelG.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelIF", "org.apache.lucene.search.similarities.BasicModelIF()", "public org.apache.lucene.search.similarities.BasicModelIF()"], ["float", "org.apache.lucene.search.similarities.BasicModelIF.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelIF.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelIn", "org.apache.lucene.search.similarities.BasicModelIn()", "public org.apache.lucene.search.similarities.BasicModelIn()"], ["float", "org.apache.lucene.search.similarities.BasicModelIn.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BasicModelIn.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelIn.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelIne", "org.apache.lucene.search.similarities.BasicModelIne()", "public org.apache.lucene.search.similarities.BasicModelIne()"], ["float", "org.apache.lucene.search.similarities.BasicModelIne.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelIne.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelP", "org.apache.lucene.search.similarities.BasicModelP()", "public org.apache.lucene.search.similarities.BasicModelP()"], ["float", "org.apache.lucene.search.similarities.BasicModelP.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelP.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicStats", "org.apache.lucene.search.similarities.BasicStats(java.lang.String, float)", "public org.apache.lucene.search.similarities.BasicStats(java.lang.String, float)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getNumberOfDocuments()", "public long getNumberOfDocuments()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setNumberOfDocuments(long)", "public void setNumberOfDocuments(long)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getNumberOfFieldTokens()", "public long getNumberOfFieldTokens()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setNumberOfFieldTokens(long)", "public void setNumberOfFieldTokens(long)"], ["float", "org.apache.lucene.search.similarities.BasicStats.getAvgFieldLength()", "public float getAvgFieldLength()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setAvgFieldLength(float)", "public void setAvgFieldLength(float)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getDocFreq()", "public long getDocFreq()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setDocFreq(long)", "public void setDocFreq(long)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getTotalTermFreq()", "public long getTotalTermFreq()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setTotalTermFreq(long)", "public void setTotalTermFreq(long)"], ["float", "org.apache.lucene.search.similarities.BasicStats.getBoost()", "public float getBoost()"], ["float", "org.apache.lucene.search.similarities.BooleanSimilarity$1.score(int, float)", "public float score(int, float) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BooleanSimilarity$1.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["float", "org.apache.lucene.search.similarities.BooleanSimilarity$1.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.BooleanSimilarity$1.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.similarities.BooleanSimilarity", "org.apache.lucene.search.similarities.BooleanSimilarity()", "public org.apache.lucene.search.similarities.BooleanSimilarity()"], ["long", "org.apache.lucene.search.similarities.BooleanSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState)", "public long computeNorm(org.apache.lucene.index.FieldInvertState)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.BooleanSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.similarities.BooleanSimilarity.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.similarities.Similarity$SimScorer simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.ClassicSimilarity", "org.apache.lucene.search.similarities.ClassicSimilarity()", "public org.apache.lucene.search.similarities.ClassicSimilarity()"], ["float", "org.apache.lucene.search.similarities.ClassicSimilarity.lengthNorm(int)", "public float lengthNorm(int)"], ["float", "org.apache.lucene.search.similarities.ClassicSimilarity.tf(float)", "public float tf(float)"], ["float", "org.apache.lucene.search.similarities.ClassicSimilarity.sloppyFreq(int)", "public float sloppyFreq(int)"], ["float", "org.apache.lucene.search.similarities.ClassicSimilarity.scorePayload(int, int, int, org.apache.lucene.util.BytesRef)", "public float scorePayload(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.ClassicSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"], ["float", "org.apache.lucene.search.similarities.ClassicSimilarity.idf(long, long)", "public float idf(long, long)"], ["java.lang.String", "org.apache.lucene.search.similarities.ClassicSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.DFISimilarity", "org.apache.lucene.search.similarities.DFISimilarity(org.apache.lucene.search.similarities.Independence)", "public org.apache.lucene.search.similarities.DFISimilarity(org.apache.lucene.search.similarities.Independence)"], ["org.apache.lucene.search.similarities.Independence", "org.apache.lucene.search.similarities.DFISimilarity.getIndependence()", "public org.apache.lucene.search.similarities.Independence getIndependence()"], ["java.lang.String", "org.apache.lucene.search.similarities.DFISimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.DFRSimilarity", "org.apache.lucene.search.similarities.DFRSimilarity(org.apache.lucene.search.similarities.BasicModel, org.apache.lucene.search.similarities.AfterEffect, org.apache.lucene.search.similarities.Normalization)", "public org.apache.lucene.search.similarities.DFRSimilarity(org.apache.lucene.search.similarities.BasicModel, org.apache.lucene.search.similarities.AfterEffect, org.apache.lucene.search.similarities.Normalization)"], ["java.lang.String", "org.apache.lucene.search.similarities.DFRSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModel", "org.apache.lucene.search.similarities.DFRSimilarity.getBasicModel()", "public org.apache.lucene.search.similarities.BasicModel getBasicModel()"], ["org.apache.lucene.search.similarities.AfterEffect", "org.apache.lucene.search.similarities.DFRSimilarity.getAfterEffect()", "public org.apache.lucene.search.similarities.AfterEffect getAfterEffect()"], ["org.apache.lucene.search.similarities.Normalization", "org.apache.lucene.search.similarities.DFRSimilarity.getNormalization()", "public org.apache.lucene.search.similarities.Normalization getNormalization()"], ["org.apache.lucene.search.similarities.Distribution", "org.apache.lucene.search.similarities.Distribution()", "public org.apache.lucene.search.similarities.Distribution()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Distribution.explain(org.apache.lucene.search.similarities.BasicStats, float, float)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["org.apache.lucene.search.similarities.DistributionLL", "org.apache.lucene.search.similarities.DistributionLL()", "public org.apache.lucene.search.similarities.DistributionLL()"], ["float", "org.apache.lucene.search.similarities.DistributionLL.score(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.DistributionLL.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.DistributionSPL", "org.apache.lucene.search.similarities.DistributionSPL()", "public org.apache.lucene.search.similarities.DistributionSPL()"], ["float", "org.apache.lucene.search.similarities.DistributionSPL.score(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.DistributionSPL.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.IBSimilarity", "org.apache.lucene.search.similarities.IBSimilarity(org.apache.lucene.search.similarities.Distribution, org.apache.lucene.search.similarities.Lambda, org.apache.lucene.search.similarities.Normalization)", "public org.apache.lucene.search.similarities.IBSimilarity(org.apache.lucene.search.similarities.Distribution, org.apache.lucene.search.similarities.Lambda, org.apache.lucene.search.similarities.Normalization)"], ["java.lang.String", "org.apache.lucene.search.similarities.IBSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Distribution", "org.apache.lucene.search.similarities.IBSimilarity.getDistribution()", "public org.apache.lucene.search.similarities.Distribution getDistribution()"], ["org.apache.lucene.search.similarities.Lambda", "org.apache.lucene.search.similarities.IBSimilarity.getLambda()", "public org.apache.lucene.search.similarities.Lambda getLambda()"], ["org.apache.lucene.search.similarities.Normalization", "org.apache.lucene.search.similarities.IBSimilarity.getNormalization()", "public org.apache.lucene.search.similarities.Normalization getNormalization()"], ["org.apache.lucene.search.similarities.Independence", "org.apache.lucene.search.similarities.Independence()", "public org.apache.lucene.search.similarities.Independence()"], ["org.apache.lucene.search.similarities.IndependenceChiSquared", "org.apache.lucene.search.similarities.IndependenceChiSquared()", "public org.apache.lucene.search.similarities.IndependenceChiSquared()"], ["float", "org.apache.lucene.search.similarities.IndependenceChiSquared.score(float, float)", "public float score(float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.IndependenceChiSquared.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.IndependenceSaturated", "org.apache.lucene.search.similarities.IndependenceSaturated()", "public org.apache.lucene.search.similarities.IndependenceSaturated()"], ["float", "org.apache.lucene.search.similarities.IndependenceSaturated.score(float, float)", "public float score(float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.IndependenceSaturated.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.IndependenceStandardized", "org.apache.lucene.search.similarities.IndependenceStandardized()", "public org.apache.lucene.search.similarities.IndependenceStandardized()"], ["float", "org.apache.lucene.search.similarities.IndependenceStandardized.score(float, float)", "public float score(float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.IndependenceStandardized.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)", "public org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity(float)", "public org.apache.lucene.search.similarities.LMDirichletSimilarity(float)"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)", "public org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity()", "public org.apache.lucene.search.similarities.LMDirichletSimilarity()"], ["float", "org.apache.lucene.search.similarities.LMDirichletSimilarity.getMu()", "public float getMu()"], ["java.lang.String", "org.apache.lucene.search.similarities.LMDirichletSimilarity.getName()", "public java.lang.String getName()"], ["org.apache.lucene.search.similarities.LMJelinekMercerSimilarity", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)", "public org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"], ["org.apache.lucene.search.similarities.LMJelinekMercerSimilarity", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(float)", "public org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(float)"], ["float", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getLambda()", "public float getLambda()"], ["java.lang.String", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getName()", "public java.lang.String getName()"], ["org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel", "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel()", "public org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel()"], ["float", "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.computeProbability(org.apache.lucene.search.similarities.BasicStats)", "public float computeProbability(org.apache.lucene.search.similarities.BasicStats)"], ["java.lang.String", "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.getName()", "public java.lang.String getName()"], ["org.apache.lucene.search.similarities.LMSimilarity$LMStats", "org.apache.lucene.search.similarities.LMSimilarity$LMStats(java.lang.String, float)", "public org.apache.lucene.search.similarities.LMSimilarity$LMStats(java.lang.String, float)"], ["float", "org.apache.lucene.search.similarities.LMSimilarity$LMStats.getCollectionProbability()", "public final float getCollectionProbability()"], ["void", "org.apache.lucene.search.similarities.LMSimilarity$LMStats.setCollectionProbability(float)", "public final void setCollectionProbability(float)"], ["org.apache.lucene.search.similarities.LMSimilarity", "org.apache.lucene.search.similarities.LMSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)", "public org.apache.lucene.search.similarities.LMSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"], ["org.apache.lucene.search.similarities.LMSimilarity", "org.apache.lucene.search.similarities.LMSimilarity()", "public org.apache.lucene.search.similarities.LMSimilarity()"], ["java.lang.String", "org.apache.lucene.search.similarities.LMSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Lambda", "org.apache.lucene.search.similarities.Lambda()", "public org.apache.lucene.search.similarities.Lambda()"], ["org.apache.lucene.search.similarities.LambdaDF", "org.apache.lucene.search.similarities.LambdaDF()", "public org.apache.lucene.search.similarities.LambdaDF()"], ["float", "org.apache.lucene.search.similarities.LambdaDF.lambda(org.apache.lucene.search.similarities.BasicStats)", "public final float lambda(org.apache.lucene.search.similarities.BasicStats)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.LambdaDF.explain(org.apache.lucene.search.similarities.BasicStats)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats)"], ["java.lang.String", "org.apache.lucene.search.similarities.LambdaDF.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.LambdaTTF", "org.apache.lucene.search.similarities.LambdaTTF()", "public org.apache.lucene.search.similarities.LambdaTTF()"], ["float", "org.apache.lucene.search.similarities.LambdaTTF.lambda(org.apache.lucene.search.similarities.BasicStats)", "public final float lambda(org.apache.lucene.search.similarities.BasicStats)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.LambdaTTF.explain(org.apache.lucene.search.similarities.BasicStats)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats)"], ["java.lang.String", "org.apache.lucene.search.similarities.LambdaTTF.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.score(int, float)", "public float score(int, float) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.similarities.MultiSimilarity", "org.apache.lucene.search.similarities.MultiSimilarity(org.apache.lucene.search.similarities.Similarity[])", "public org.apache.lucene.search.similarities.MultiSimilarity(org.apache.lucene.search.similarities.Similarity[])"], ["long", "org.apache.lucene.search.similarities.MultiSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState)", "public long computeNorm(org.apache.lucene.index.FieldInvertState)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.MultiSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.similarities.MultiSimilarity.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.similarities.Similarity$SimScorer simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Normalization$NoNormalization", "org.apache.lucene.search.similarities.Normalization$NoNormalization()", "public org.apache.lucene.search.similarities.Normalization$NoNormalization()"], ["float", "org.apache.lucene.search.similarities.Normalization$NoNormalization.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Normalization$NoNormalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.Normalization$NoNormalization.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Normalization", "org.apache.lucene.search.similarities.Normalization()", "public org.apache.lucene.search.similarities.Normalization()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Normalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["org.apache.lucene.search.similarities.NormalizationH1", "org.apache.lucene.search.similarities.NormalizationH1(float)", "public org.apache.lucene.search.similarities.NormalizationH1(float)"], ["org.apache.lucene.search.similarities.NormalizationH1", "org.apache.lucene.search.similarities.NormalizationH1()", "public org.apache.lucene.search.similarities.NormalizationH1()"], ["float", "org.apache.lucene.search.similarities.NormalizationH1.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationH1.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationH1.getC()", "public float getC()"], ["org.apache.lucene.search.similarities.NormalizationH2", "org.apache.lucene.search.similarities.NormalizationH2(float)", "public org.apache.lucene.search.similarities.NormalizationH2(float)"], ["org.apache.lucene.search.similarities.NormalizationH2", "org.apache.lucene.search.similarities.NormalizationH2()", "public org.apache.lucene.search.similarities.NormalizationH2()"], ["float", "org.apache.lucene.search.similarities.NormalizationH2.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationH2.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationH2.getC()", "public float getC()"], ["org.apache.lucene.search.similarities.NormalizationH3", "org.apache.lucene.search.similarities.NormalizationH3()", "public org.apache.lucene.search.similarities.NormalizationH3()"], ["org.apache.lucene.search.similarities.NormalizationH3", "org.apache.lucene.search.similarities.NormalizationH3(float)", "public org.apache.lucene.search.similarities.NormalizationH3(float)"], ["float", "org.apache.lucene.search.similarities.NormalizationH3.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationH3.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationH3.getMu()", "public float getMu()"], ["org.apache.lucene.search.similarities.NormalizationZ", "org.apache.lucene.search.similarities.NormalizationZ()", "public org.apache.lucene.search.similarities.NormalizationZ()"], ["org.apache.lucene.search.similarities.NormalizationZ", "org.apache.lucene.search.similarities.NormalizationZ(float)", "public org.apache.lucene.search.similarities.NormalizationZ(float)"], ["float", "org.apache.lucene.search.similarities.NormalizationZ.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationZ.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationZ.getZ()", "public float getZ()"], ["org.apache.lucene.search.similarities.PerFieldSimilarityWrapper", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper()", "public org.apache.lucene.search.similarities.PerFieldSimilarityWrapper()"], ["long", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeNorm(org.apache.lucene.index.FieldInvertState)", "public final long computeNorm(org.apache.lucene.index.FieldInvertState)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$SimScorer simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.similarities.Similarity$SimScorer()", "public org.apache.lucene.search.similarities.Similarity$SimScorer()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Similarity$SimScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.Similarity$SimWeight()", "public org.apache.lucene.search.similarities.Similarity$SimWeight()"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.search.similarities.Similarity()", "public org.apache.lucene.search.similarities.Similarity()"], ["float", "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.score(int, float)", "public float score(int, float) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["float", "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.similarities.SimilarityBase", "org.apache.lucene.search.similarities.SimilarityBase()", "public org.apache.lucene.search.similarities.SimilarityBase()"], ["void", "org.apache.lucene.search.similarities.SimilarityBase.setDiscountOverlaps(boolean)", "public void setDiscountOverlaps(boolean)"], ["boolean", "org.apache.lucene.search.similarities.SimilarityBase.getDiscountOverlaps()", "public boolean getDiscountOverlaps()"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.SimilarityBase.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.similarities.SimilarityBase.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$SimScorer simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["long", "org.apache.lucene.search.similarities.SimilarityBase.computeNorm(org.apache.lucene.index.FieldInvertState)", "public final long computeNorm(org.apache.lucene.index.FieldInvertState)"], ["double", "org.apache.lucene.search.similarities.SimilarityBase.log2(double)", "public static double log2(double)"], ["org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats", "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats(java.lang.String, float, org.apache.lucene.search.Explanation, float[])", "public org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats(java.lang.String, float, org.apache.lucene.search.Explanation, float[])"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.score(int, float)", "public float score(int, float) throws java.io.IOException"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["org.apache.lucene.search.similarities.TFIDFSimilarity", "org.apache.lucene.search.similarities.TFIDFSimilarity()", "public org.apache.lucene.search.similarities.TFIDFSimilarity()"], ["void", "org.apache.lucene.search.similarities.TFIDFSimilarity.setDiscountOverlaps(boolean)", "public void setDiscountOverlaps(boolean)"], ["boolean", "org.apache.lucene.search.similarities.TFIDFSimilarity.getDiscountOverlaps()", "public boolean getDiscountOverlaps()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"], ["long", "org.apache.lucene.search.similarities.TFIDFSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState)", "public final long computeNorm(org.apache.lucene.index.FieldInvertState)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.TFIDFSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.similarities.TFIDFSimilarity.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$SimScorer simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.ConjunctionSpans$1.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.spans.ConjunctionSpans$1.matchCost()", "public float matchCost()"], ["int", "org.apache.lucene.search.spans.ConjunctionSpans.docID()", "public int docID()"], ["long", "org.apache.lucene.search.spans.ConjunctionSpans.cost()", "public long cost()"], ["int", "org.apache.lucene.search.spans.ConjunctionSpans.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.ConjunctionSpans.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.spans.ConjunctionSpans.asTwoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator asTwoPhaseIterator()"], ["float", "org.apache.lucene.search.spans.ConjunctionSpans.positionsCost()", "public float positionsCost()"], ["org.apache.lucene.search.spans.Spans[]", "org.apache.lucene.search.spans.ConjunctionSpans.getSubSpans()", "public org.apache.lucene.search.spans.Spans[] getSubSpans()"], ["int", "org.apache.lucene.search.spans.ContainSpans.startPosition()", "public int startPosition()"], ["int", "org.apache.lucene.search.spans.ContainSpans.endPosition()", "public int endPosition()"], ["int", "org.apache.lucene.search.spans.ContainSpans.width()", "public int width()"], ["void", "org.apache.lucene.search.spans.ContainSpans.collect(org.apache.lucene.search.spans.SpanCollector)", "public void collect(org.apache.lucene.search.spans.SpanCollector) throws java.io.IOException"], ["org.apache.lucene.search.spans.FieldMaskingSpanQuery", "org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)", "public org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getMaskedQuery()", "public org.apache.lucene.search.spans.SpanQuery getMaskedQuery()"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.FilterSpans$1.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.spans.FilterSpans$1.matchCost()", "public float matchCost()"], ["java.lang.String", "org.apache.lucene.search.spans.FilterSpans$1.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.spans.FilterSpans$2.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.spans.FilterSpans$2.matchCost()", "public float matchCost()"], ["java.lang.String", "org.apache.lucene.search.spans.FilterSpans$2.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.FilterSpans$AcceptStatus[]", "org.apache.lucene.search.spans.FilterSpans$AcceptStatus.values()", "public static org.apache.lucene.search.spans.FilterSpans$AcceptStatus[] values()"], ["org.apache.lucene.search.spans.FilterSpans$AcceptStatus", "org.apache.lucene.search.spans.FilterSpans$AcceptStatus.valueOf(java.lang.String)", "public static org.apache.lucene.search.spans.FilterSpans$AcceptStatus valueOf(java.lang.String)"], ["int", "org.apache.lucene.search.spans.FilterSpans.nextDoc()", "public final int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.FilterSpans.advance(int)", "public final int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.FilterSpans.docID()", "public final int docID()"], ["int", "org.apache.lucene.search.spans.FilterSpans.nextStartPosition()", "public final int nextStartPosition() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.FilterSpans.startPosition()", "public final int startPosition()"], ["int", "org.apache.lucene.search.spans.FilterSpans.endPosition()", "public final int endPosition()"], ["int", "org.apache.lucene.search.spans.FilterSpans.width()", "public int width()"], ["void", "org.apache.lucene.search.spans.FilterSpans.collect(org.apache.lucene.search.spans.SpanCollector)", "public void collect(org.apache.lucene.search.spans.SpanCollector) throws java.io.IOException"], ["long", "org.apache.lucene.search.spans.FilterSpans.cost()", "public final long cost()"], ["java.lang.String", "org.apache.lucene.search.spans.FilterSpans.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.spans.FilterSpans.asTwoPhaseIterator()", "public final org.apache.lucene.search.TwoPhaseIterator asTwoPhaseIterator()"], ["float", "org.apache.lucene.search.spans.FilterSpans.positionsCost()", "public float positionsCost()"], ["org.apache.lucene.search.spans.NearSpansOrdered", "org.apache.lucene.search.spans.NearSpansOrdered(int, java.util.List<org.apache.lucene.search.spans.Spans>)", "public org.apache.lucene.search.spans.NearSpansOrdered(int, java.util.List<org.apache.lucene.search.spans.Spans>) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.nextStartPosition()", "public int nextStartPosition() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.startPosition()", "public int startPosition()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.endPosition()", "public int endPosition()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.width()", "public int width()"], ["void", "org.apache.lucene.search.spans.NearSpansOrdered.collect(org.apache.lucene.search.spans.SpanCollector)", "public void collect(org.apache.lucene.search.spans.SpanCollector) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans[]", "org.apache.lucene.search.spans.NearSpansOrdered.getSubSpans()", "public org.apache.lucene.search.spans.Spans[] getSubSpans()"], ["float", "org.apache.lucene.search.spans.NearSpansOrdered.positionsCost()", "public float positionsCost()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.spans.NearSpansOrdered.asTwoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator asTwoPhaseIterator()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["long", "org.apache.lucene.search.spans.NearSpansOrdered.cost()", "public long cost()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.docID()", "public int docID()"], ["org.apache.lucene.search.spans.NearSpansUnordered$SpanTotalLengthEndPositionWindow", "org.apache.lucene.search.spans.NearSpansUnordered$SpanTotalLengthEndPositionWindow(org.apache.lucene.search.spans.NearSpansUnordered)", "public org.apache.lucene.search.spans.NearSpansUnordered$SpanTotalLengthEndPositionWindow(org.apache.lucene.search.spans.NearSpansUnordered)"], ["org.apache.lucene.search.spans.NearSpansUnordered", "org.apache.lucene.search.spans.NearSpansUnordered(int, java.util.List<org.apache.lucene.search.spans.Spans>)", "public org.apache.lucene.search.spans.NearSpansUnordered(int, java.util.List<org.apache.lucene.search.spans.Spans>) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.nextStartPosition()", "public int nextStartPosition() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.startPosition()", "public int startPosition()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.endPosition()", "public int endPosition()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.width()", "public int width()"], ["void", "org.apache.lucene.search.spans.NearSpansUnordered.collect(org.apache.lucene.search.spans.SpanCollector)", "public void collect(org.apache.lucene.search.spans.SpanCollector) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans[]", "org.apache.lucene.search.spans.NearSpansUnordered.getSubSpans()", "public org.apache.lucene.search.spans.Spans[] getSubSpans()"], ["float", "org.apache.lucene.search.spans.NearSpansUnordered.positionsCost()", "public float positionsCost()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.spans.NearSpansUnordered.asTwoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator asTwoPhaseIterator()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["long", "org.apache.lucene.search.spans.NearSpansUnordered.cost()", "public long cost()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.docID()", "public int docID()"], ["org.apache.lucene.search.spans.SpanBoostQuery", "org.apache.lucene.search.spans.SpanBoostQuery(org.apache.lucene.search.spans.SpanQuery, float)", "public org.apache.lucene.search.spans.SpanBoostQuery(org.apache.lucene.search.spans.SpanQuery, float)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanBoostQuery.getQuery()", "public org.apache.lucene.search.spans.SpanQuery getQuery()"], ["float", "org.apache.lucene.search.spans.SpanBoostQuery.getBoost()", "public float getBoost()"], ["boolean", "org.apache.lucene.search.spans.SpanBoostQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanBoostQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanBoostQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanBoostQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanBoostQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanBoostQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanBoostQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanContainQuery$SpanContainWeight", "org.apache.lucene.search.spans.SpanContainQuery$SpanContainWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float)", "public org.apache.lucene.search.spans.SpanContainQuery$SpanContainWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanContainQuery$SpanContainWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["void", "org.apache.lucene.search.spans.SpanContainQuery$SpanContainWeight.extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public void extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanContainQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanContainQuery.getBig()", "public org.apache.lucene.search.spans.SpanQuery getBig()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanContainQuery.getLittle()", "public org.apache.lucene.search.spans.SpanQuery getLittle()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanContainQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanContainQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanContainQuery.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.search.spans.SpanContainingQuery$SpanContainingWeight$1.nextStartPosition()", "public int nextStartPosition() throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanContainingQuery$SpanContainingWeight", "org.apache.lucene.search.spans.SpanContainingQuery$SpanContainingWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float)", "public org.apache.lucene.search.spans.SpanContainingQuery$SpanContainingWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanContainingQuery$SpanContainingWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanContainingQuery", "org.apache.lucene.search.spans.SpanContainingQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanContainingQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanContainingQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanContainingQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanContainingQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanContainingQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanContainingQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanContainingQuery.getLittle()", "public org.apache.lucene.search.spans.SpanQuery getLittle()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanContainingQuery.getBig()", "public org.apache.lucene.search.spans.SpanQuery getBig()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanContainingQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanContainingQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanFirstQuery", "org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)", "public org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanFirstQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.spans.SpanQuery rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod()", "public org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(int)", "public org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(int)"], ["int", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.getSize()", "public int getSize()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.spans.SpanQuery rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper(Q)", "public org.apache.lucene.search.spans.SpanMultiTermQueryWrapper(Q)"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getRewriteMethod()", "public final org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod getRewriteMethod()"], ["void", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)", "public final void setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getWrappedQuery()", "public org.apache.lucene.search.Query getWrappedQuery()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanNearQuery$Builder", "org.apache.lucene.search.spans.SpanNearQuery$Builder(java.lang.String, boolean)", "public org.apache.lucene.search.spans.SpanNearQuery$Builder(java.lang.String, boolean)"], ["org.apache.lucene.search.spans.SpanNearQuery$Builder", "org.apache.lucene.search.spans.SpanNearQuery$Builder.addClause(org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanNearQuery$Builder addClause(org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.spans.SpanNearQuery$Builder", "org.apache.lucene.search.spans.SpanNearQuery$Builder.addGap(int)", "public org.apache.lucene.search.spans.SpanNearQuery$Builder addGap(int)"], ["org.apache.lucene.search.spans.SpanNearQuery$Builder", "org.apache.lucene.search.spans.SpanNearQuery$Builder.setSlop(int)", "public org.apache.lucene.search.spans.SpanNearQuery$Builder setSlop(int)"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.spans.SpanNearQuery$Builder.build()", "public org.apache.lucene.search.spans.SpanNearQuery build()"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.nextStartPosition()", "public int nextStartPosition() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.skipToPosition(int)", "public int skipToPosition(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.startPosition()", "public int startPosition()"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.endPosition()", "public int endPosition()"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.width()", "public int width()"], ["void", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.collect(org.apache.lucene.search.spans.SpanCollector)", "public void collect(org.apache.lucene.search.spans.SpanCollector) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.docID()", "public int docID()"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.cost()", "public long cost()"], ["float", "org.apache.lucene.search.spans.SpanNearQuery$GapSpans.positionsCost()", "public float positionsCost()"], ["void", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery$SpanGapWeight.extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public void extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery$SpanGapWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery$SpanGapWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery(java.lang.String, int)", "public org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery(java.lang.String, int)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanNearQuery$SpanGapQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight", "org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight(java.util.List<org.apache.lucene.search.spans.SpanWeight>, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float)", "public org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight(java.util.List<org.apache.lucene.search.spans.SpanWeight>, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight.extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public void extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.spans.SpanNearQuery$Builder", "org.apache.lucene.search.spans.SpanNearQuery.newOrderedNearQuery(java.lang.String)", "public static org.apache.lucene.search.spans.SpanNearQuery$Builder newOrderedNearQuery(java.lang.String)"], ["org.apache.lucene.search.spans.SpanNearQuery$Builder", "org.apache.lucene.search.spans.SpanNearQuery.newUnorderedNearQuery(java.lang.String)", "public static org.apache.lucene.search.spans.SpanNearQuery$Builder newUnorderedNearQuery(java.lang.String)"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)", "public org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"], ["org.apache.lucene.search.spans.SpanQuery[]", "org.apache.lucene.search.spans.SpanNearQuery.getClauses()", "public org.apache.lucene.search.spans.SpanQuery[] getClauses()"], ["int", "org.apache.lucene.search.spans.SpanNearQuery.getSlop()", "public int getSlop()"], ["boolean", "org.apache.lucene.search.spans.SpanNearQuery.isInOrder()", "public boolean isInOrder()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanNearQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNearQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNearQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNearQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanNearQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanNotQuery$SpanNotWeight", "org.apache.lucene.search.spans.SpanNotQuery$SpanNotWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float)", "public org.apache.lucene.search.spans.SpanNotQuery$SpanNotWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanNotQuery$SpanNotWeight.extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public void extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanNotQuery$SpanNotWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanNotQuery$SpanNotWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.spans.SpanNotQuery", "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.spans.SpanNotQuery", "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery, int)", "public org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery, int)"], ["org.apache.lucene.search.spans.SpanNotQuery", "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery, int, int)", "public org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery, int, int)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanNotQuery.getInclude()", "public org.apache.lucene.search.spans.SpanQuery getInclude()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanNotQuery.getExclude()", "public org.apache.lucene.search.spans.SpanQuery getExclude()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanNotQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNotQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNotQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanNotQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1$1.matches()", "public boolean matches() throws java.io.IOException"], ["float", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1$1.matchCost()", "public float matchCost()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.docID()", "public int docID()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.asTwoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator asTwoPhaseIterator()"], ["float", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.positionsCost()", "public float positionsCost()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.nextStartPosition()", "public int nextStartPosition() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.startPosition()", "public int startPosition()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.endPosition()", "public int endPosition()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.width()", "public int width()"], ["void", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.collect(org.apache.lucene.search.spans.SpanCollector)", "public void collect(org.apache.lucene.search.spans.SpanCollector) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight$1.cost()", "public long cost()"], ["org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, java.util.List<org.apache.lucene.search.spans.SpanWeight>, float)", "public org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, java.util.List<org.apache.lucene.search.spans.SpanWeight>, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["void", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight.extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public void extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanOrQuery", "org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)", "public org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)"], ["org.apache.lucene.search.spans.SpanQuery[]", "org.apache.lucene.search.spans.SpanOrQuery.getClauses()", "public org.apache.lucene.search.spans.SpanQuery[] getClauses()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanOrQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanOrQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanOrQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanOrQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanPositionCheckQuery$SpanPositionCheckWeight", "org.apache.lucene.search.spans.SpanPositionCheckQuery$SpanPositionCheckWeight(org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float)", "public org.apache.lucene.search.spans.SpanPositionCheckQuery$SpanPositionCheckWeight(org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanPositionCheckQuery$SpanPositionCheckWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["void", "org.apache.lucene.search.spans.SpanPositionCheckQuery$SpanPositionCheckWeight.extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public void extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanPositionCheckQuery$SpanPositionCheckWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanPositionCheckQuery", "org.apache.lucene.search.spans.SpanPositionCheckQuery(org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanPositionCheckQuery(org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanPositionCheckQuery.getMatch()", "public org.apache.lucene.search.spans.SpanQuery getMatch()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanPositionCheckQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanPositionCheckQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanPositionCheckQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanPositionCheckQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanPositionCheckQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanPositionCheckQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanPositionRangeQuery", "org.apache.lucene.search.spans.SpanPositionRangeQuery(org.apache.lucene.search.spans.SpanQuery, int, int)", "public org.apache.lucene.search.spans.SpanPositionRangeQuery(org.apache.lucene.search.spans.SpanQuery, int, int)"], ["int", "org.apache.lucene.search.spans.SpanPositionRangeQuery.getStart()", "public int getStart()"], ["int", "org.apache.lucene.search.spans.SpanPositionRangeQuery.getEnd()", "public int getEnd()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanPositionRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.spans.SpanPositionRangeQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanPositionRangeQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanQuery()", "public org.apache.lucene.search.spans.SpanQuery()"], ["java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>", "org.apache.lucene.search.spans.SpanQuery.getTermContexts(org.apache.lucene.search.spans.SpanWeight...)", "public static java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext> getTermContexts(org.apache.lucene.search.spans.SpanWeight...)"], ["java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>", "org.apache.lucene.search.spans.SpanQuery.getTermContexts(java.util.Collection<org.apache.lucene.search.spans.SpanWeight>)", "public static java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext> getTermContexts(java.util.Collection<org.apache.lucene.search.spans.SpanWeight>)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanScorer", "org.apache.lucene.search.spans.SpanScorer(org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.Spans, org.apache.lucene.search.similarities.Similarity$SimScorer)", "public org.apache.lucene.search.spans.SpanScorer(org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.Spans, org.apache.lucene.search.similarities.Similarity$SimScorer)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanScorer.getSpans()", "public org.apache.lucene.search.spans.Spans getSpans()"], ["int", "org.apache.lucene.search.spans.SpanScorer.docID()", "public int docID()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.spans.SpanScorer.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.spans.SpanScorer.twoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator twoPhaseIterator()"], ["float", "org.apache.lucene.search.spans.SpanScorer.score()", "public final float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanScorer.freq()", "public final int freq() throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight", "org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight(org.apache.lucene.index.TermContext, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float)", "public org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight(org.apache.lucene.index.TermContext, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["void", "org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight.extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public void extractTermContexts(java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanTermQuery", "org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.spans.SpanTermQuery", "org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.spans.SpanTermQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanTermQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanTermQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanTermQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.spans.SpanTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanTermQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanWeight$Postings$1.getRequiredPostings()", "public int getRequiredPostings()"], ["int", "org.apache.lucene.search.spans.SpanWeight$Postings$2.getRequiredPostings()", "public int getRequiredPostings()"], ["int", "org.apache.lucene.search.spans.SpanWeight$Postings$3.getRequiredPostings()", "public int getRequiredPostings()"], ["org.apache.lucene.search.spans.SpanWeight$Postings[]", "org.apache.lucene.search.spans.SpanWeight$Postings.values()", "public static org.apache.lucene.search.spans.SpanWeight$Postings[] values()"], ["org.apache.lucene.search.spans.SpanWeight$Postings", "org.apache.lucene.search.spans.SpanWeight$Postings.valueOf(java.lang.String)", "public static org.apache.lucene.search.spans.SpanWeight$Postings valueOf(java.lang.String)"], ["org.apache.lucene.search.spans.SpanWeight$Postings", "org.apache.lucene.search.spans.SpanWeight$Postings.atLeast(org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.SpanWeight$Postings atLeast(org.apache.lucene.search.spans.SpanWeight$Postings)"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float)", "public org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanScorer", "org.apache.lucene.search.spans.SpanWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.spans.SpanScorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SimScorer", "org.apache.lucene.search.spans.SpanWeight.getSimScorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.similarities.Similarity$SimScorer getSimScorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.spans.SpanWeight.explain(org.apache.lucene.index.LeafReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.LeafReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.spans.SpanWeight.scorer(org.apache.lucene.index.LeafReaderContext)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.LeafReaderContext) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanWithinQuery$SpanWithinWeight$1.nextStartPosition()", "public int nextStartPosition() throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanWithinQuery$SpanWithinWeight", "org.apache.lucene.search.spans.SpanWithinQuery$SpanWithinWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float)", "public org.apache.lucene.search.spans.SpanWithinQuery$SpanWithinWeight(org.apache.lucene.search.IndexSearcher, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.search.spans.SpanWeight, org.apache.lucene.search.spans.SpanWeight, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanWithinQuery$SpanWithinWeight.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.spans.SpanWeight$Postings) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanWithinQuery", "org.apache.lucene.search.spans.SpanWithinQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanWithinQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanWithinQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanWithinQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.spans.SpanWeight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanWithinQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanWithinQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanWithinQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanWithinQuery.getLittle()", "public org.apache.lucene.search.spans.SpanQuery getLittle()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanWithinQuery.getBig()", "public org.apache.lucene.search.spans.SpanQuery getBig()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanWithinQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanWithinQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean, float)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher, boolean, float) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.Spans()", "public org.apache.lucene.search.spans.Spans()"], ["org.apache.lucene.search.TwoPhaseIterator", "org.apache.lucene.search.spans.Spans.asTwoPhaseIterator()", "public org.apache.lucene.search.TwoPhaseIterator asTwoPhaseIterator()"], ["java.lang.String", "org.apache.lucene.search.spans.Spans.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.TermSpans", "org.apache.lucene.search.spans.TermSpans(org.apache.lucene.search.similarities.Similarity$SimScorer, org.apache.lucene.index.PostingsEnum, org.apache.lucene.index.Term, float)", "public org.apache.lucene.search.spans.TermSpans(org.apache.lucene.search.similarities.Similarity$SimScorer, org.apache.lucene.index.PostingsEnum, org.apache.lucene.index.Term, float)"], ["int", "org.apache.lucene.search.spans.TermSpans.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.TermSpans.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.TermSpans.docID()", "public int docID()"], ["int", "org.apache.lucene.search.spans.TermSpans.nextStartPosition()", "public int nextStartPosition() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.TermSpans.startPosition()", "public int startPosition()"], ["int", "org.apache.lucene.search.spans.TermSpans.endPosition()", "public int endPosition()"], ["int", "org.apache.lucene.search.spans.TermSpans.width()", "public int width()"], ["long", "org.apache.lucene.search.spans.TermSpans.cost()", "public long cost()"], ["void", "org.apache.lucene.search.spans.TermSpans.collect(org.apache.lucene.search.spans.SpanCollector)", "public void collect(org.apache.lucene.search.spans.SpanCollector) throws java.io.IOException"], ["float", "org.apache.lucene.search.spans.TermSpans.positionsCost()", "public float positionsCost()"], ["java.lang.String", "org.apache.lucene.search.spans.TermSpans.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.PostingsEnum", "org.apache.lucene.search.spans.TermSpans.getPostings()", "public org.apache.lucene.index.PostingsEnum getPostings()"], ["org.apache.lucene.store.AlreadyClosedException", "org.apache.lucene.store.AlreadyClosedException(java.lang.String)", "public org.apache.lucene.store.AlreadyClosedException(java.lang.String)"], ["org.apache.lucene.store.AlreadyClosedException", "org.apache.lucene.store.AlreadyClosedException(java.lang.String, java.lang.Throwable)", "public org.apache.lucene.store.AlreadyClosedException(java.lang.String, java.lang.Throwable)"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.BaseDirectory.obtainLock(java.lang.String)", "public final org.apache.lucene.store.Lock obtainLock(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.BaseDirectory.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.BufferedChecksum", "org.apache.lucene.store.BufferedChecksum(java.util.zip.Checksum)", "public org.apache.lucene.store.BufferedChecksum(java.util.zip.Checksum)"], ["org.apache.lucene.store.BufferedChecksum", "org.apache.lucene.store.BufferedChecksum(java.util.zip.Checksum, int)", "public org.apache.lucene.store.BufferedChecksum(java.util.zip.Checksum, int)"], ["void", "org.apache.lucene.store.BufferedChecksum.update(int)", "public void update(int)"], ["void", "org.apache.lucene.store.BufferedChecksum.update(byte[], int, int)", "public void update(byte[], int, int)"], ["long", "org.apache.lucene.store.BufferedChecksum.getValue()", "public long getValue()"], ["void", "org.apache.lucene.store.BufferedChecksum.reset()", "public void reset()"], ["org.apache.lucene.store.BufferedChecksumIndexInput", "org.apache.lucene.store.BufferedChecksumIndexInput(org.apache.lucene.store.IndexInput)", "public org.apache.lucene.store.BufferedChecksumIndexInput(org.apache.lucene.store.IndexInput)"], ["byte", "org.apache.lucene.store.BufferedChecksumIndexInput.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedChecksumIndexInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedChecksumIndexInput.getChecksum()", "public long getChecksum()"], ["void", "org.apache.lucene.store.BufferedChecksumIndexInput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedChecksumIndexInput.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.store.BufferedChecksumIndexInput.length()", "public long length()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.BufferedChecksumIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.BufferedChecksumIndexInput.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.BufferedChecksumIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.BufferedChecksumIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput", "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput clone()"], ["void", "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.length()", "public long length()"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["byte", "org.apache.lucene.store.BufferedIndexInput.readByte()", "public final byte readByte() throws java.io.IOException"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput(java.lang.String)", "public org.apache.lucene.store.BufferedIndexInput(java.lang.String)"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.BufferedIndexInput(java.lang.String, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput(java.lang.String, int)", "public org.apache.lucene.store.BufferedIndexInput(java.lang.String, int)"], ["void", "org.apache.lucene.store.BufferedIndexInput.setBufferSize(int)", "public final void setBufferSize(int)"], ["int", "org.apache.lucene.store.BufferedIndexInput.getBufferSize()", "public final int getBufferSize()"], ["void", "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int)", "public final void readBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int, boolean)", "public final void readBytes(byte[], int, int, boolean) throws java.io.IOException"], ["short", "org.apache.lucene.store.BufferedIndexInput.readShort()", "public final short readShort() throws java.io.IOException"], ["int", "org.apache.lucene.store.BufferedIndexInput.readInt()", "public final int readInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.readLong()", "public final long readLong() throws java.io.IOException"], ["int", "org.apache.lucene.store.BufferedIndexInput.readVInt()", "public final int readVInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.readVLong()", "public final long readVLong() throws java.io.IOException"], ["byte", "org.apache.lucene.store.BufferedIndexInput.readByte(long)", "public final byte readByte(long) throws java.io.IOException"], ["short", "org.apache.lucene.store.BufferedIndexInput.readShort(long)", "public final short readShort(long) throws java.io.IOException"], ["int", "org.apache.lucene.store.BufferedIndexInput.readInt(long)", "public final int readInt(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.readLong(long)", "public final long readLong(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.getFilePointer()", "public final long getFilePointer()"], ["void", "org.apache.lucene.store.BufferedIndexInput.seek(long)", "public final void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.BufferedIndexInput.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["int", "org.apache.lucene.store.BufferedIndexInput.bufferSize(org.apache.lucene.store.IOContext)", "public static int bufferSize(org.apache.lucene.store.IOContext)"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput.wrap(java.lang.String, org.apache.lucene.store.IndexInput, long, long)", "public static org.apache.lucene.store.BufferedIndexInput wrap(java.lang.String, org.apache.lucene.store.IndexInput, long, long)"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.BufferedIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.BufferedIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.BufferedIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.ByteArrayDataInput", "org.apache.lucene.store.ByteArrayDataInput(byte[])", "public org.apache.lucene.store.ByteArrayDataInput(byte[])"], ["org.apache.lucene.store.ByteArrayDataInput", "org.apache.lucene.store.ByteArrayDataInput(byte[], int, int)", "public org.apache.lucene.store.ByteArrayDataInput(byte[], int, int)"], ["org.apache.lucene.store.ByteArrayDataInput", "org.apache.lucene.store.ByteArrayDataInput()", "public org.apache.lucene.store.ByteArrayDataInput()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.reset(byte[])", "public void reset(byte[])"], ["void", "org.apache.lucene.store.ByteArrayDataInput.rewind()", "public void rewind()"], ["int", "org.apache.lucene.store.ByteArrayDataInput.getPosition()", "public int getPosition()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.setPosition(int)", "public void setPosition(int)"], ["void", "org.apache.lucene.store.ByteArrayDataInput.reset(byte[], int, int)", "public void reset(byte[], int, int)"], ["int", "org.apache.lucene.store.ByteArrayDataInput.length()", "public int length()"], ["boolean", "org.apache.lucene.store.ByteArrayDataInput.eof()", "public boolean eof()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.skipBytes(long)", "public void skipBytes(long)"], ["short", "org.apache.lucene.store.ByteArrayDataInput.readShort()", "public short readShort()"], ["int", "org.apache.lucene.store.ByteArrayDataInput.readInt()", "public int readInt()"], ["long", "org.apache.lucene.store.ByteArrayDataInput.readLong()", "public long readLong()"], ["int", "org.apache.lucene.store.ByteArrayDataInput.readVInt()", "public int readVInt()"], ["long", "org.apache.lucene.store.ByteArrayDataInput.readVLong()", "public long readVLong()"], ["byte", "org.apache.lucene.store.ByteArrayDataInput.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["org.apache.lucene.store.ByteArrayDataOutput", "org.apache.lucene.store.ByteArrayDataOutput(byte[])", "public org.apache.lucene.store.ByteArrayDataOutput(byte[])"], ["org.apache.lucene.store.ByteArrayDataOutput", "org.apache.lucene.store.ByteArrayDataOutput(byte[], int, int)", "public org.apache.lucene.store.ByteArrayDataOutput(byte[], int, int)"], ["org.apache.lucene.store.ByteArrayDataOutput", "org.apache.lucene.store.ByteArrayDataOutput()", "public org.apache.lucene.store.ByteArrayDataOutput()"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[])", "public void reset(byte[])"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[], int, int)", "public void reset(byte[], int, int)"], ["int", "org.apache.lucene.store.ByteArrayDataOutput.getPosition()", "public int getPosition()"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["org.apache.lucene.store.ByteArrayIndexInput", "org.apache.lucene.store.ByteArrayIndexInput(java.lang.String, byte[])", "public org.apache.lucene.store.ByteArrayIndexInput(java.lang.String, byte[])"], ["long", "org.apache.lucene.store.ByteArrayIndexInput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.ByteArrayIndexInput.seek(long)", "public void seek(long)"], ["void", "org.apache.lucene.store.ByteArrayIndexInput.reset(byte[], int, int)", "public void reset(byte[], int, int)"], ["long", "org.apache.lucene.store.ByteArrayIndexInput.length()", "public long length()"], ["boolean", "org.apache.lucene.store.ByteArrayIndexInput.eof()", "public boolean eof()"], ["void", "org.apache.lucene.store.ByteArrayIndexInput.skipBytes(long)", "public void skipBytes(long)"], ["short", "org.apache.lucene.store.ByteArrayIndexInput.readShort()", "public short readShort()"], ["int", "org.apache.lucene.store.ByteArrayIndexInput.readInt()", "public int readInt()"], ["long", "org.apache.lucene.store.ByteArrayIndexInput.readLong()", "public long readLong()"], ["int", "org.apache.lucene.store.ByteArrayIndexInput.readVInt()", "public int readVInt()"], ["long", "org.apache.lucene.store.ByteArrayIndexInput.readVLong()", "public long readVLong()"], ["byte", "org.apache.lucene.store.ByteArrayIndexInput.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.store.ByteArrayIndexInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["void", "org.apache.lucene.store.ByteArrayIndexInput.close()", "public void close()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteArrayIndexInput.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.ByteBufferGuard", "org.apache.lucene.store.ByteBufferGuard(java.lang.String, org.apache.lucene.store.ByteBufferGuard$BufferCleaner)", "public org.apache.lucene.store.ByteBufferGuard(java.lang.String, org.apache.lucene.store.ByteBufferGuard$BufferCleaner)"], ["void", "org.apache.lucene.store.ByteBufferGuard.invalidateAndUnmap(java.nio.ByteBuffer...)", "public void invalidateAndUnmap(java.nio.ByteBuffer...) throws java.io.IOException"], ["void", "org.apache.lucene.store.ByteBufferGuard.getBytes(java.nio.ByteBuffer, byte[], int, int)", "public void getBytes(java.nio.ByteBuffer, byte[], int, int)"], ["byte", "org.apache.lucene.store.ByteBufferGuard.getByte(java.nio.ByteBuffer)", "public byte getByte(java.nio.ByteBuffer)"], ["short", "org.apache.lucene.store.ByteBufferGuard.getShort(java.nio.ByteBuffer)", "public short getShort(java.nio.ByteBuffer)"], ["int", "org.apache.lucene.store.ByteBufferGuard.getInt(java.nio.ByteBuffer)", "public int getInt(java.nio.ByteBuffer)"], ["long", "org.apache.lucene.store.ByteBufferGuard.getLong(java.nio.ByteBuffer)", "public long getLong(java.nio.ByteBuffer)"], ["byte", "org.apache.lucene.store.ByteBufferGuard.getByte(java.nio.ByteBuffer, int)", "public byte getByte(java.nio.ByteBuffer, int)"], ["short", "org.apache.lucene.store.ByteBufferGuard.getShort(java.nio.ByteBuffer, int)", "public short getShort(java.nio.ByteBuffer, int)"], ["int", "org.apache.lucene.store.ByteBufferGuard.getInt(java.nio.ByteBuffer, int)", "public int getInt(java.nio.ByteBuffer, int)"], ["long", "org.apache.lucene.store.ByteBufferGuard.getLong(java.nio.ByteBuffer, int)", "public long getLong(java.nio.ByteBuffer, int)"], ["void", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.getFilePointer()", "public long getFilePointer()"], ["byte", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.readByte(long)", "public byte readByte(long) throws java.io.IOException"], ["short", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.readShort(long)", "public short readShort(long) throws java.io.IOException"], ["int", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.readInt(long)", "public int readInt(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.readLong(long)", "public long readLong(long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.ByteBufferIndexInput$MultiBufferImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.getFilePointer()", "public long getFilePointer()"], ["byte", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readByte(long)", "public byte readByte(long) throws java.io.IOException"], ["short", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readShort(long)", "public short readShort(long) throws java.io.IOException"], ["int", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readInt(long)", "public int readInt(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readLong(long)", "public long readLong(long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.ByteBufferIndexInput", "org.apache.lucene.store.ByteBufferIndexInput.newInstance(java.lang.String, java.nio.ByteBuffer[], long, int, org.apache.lucene.store.ByteBufferGuard)", "public static org.apache.lucene.store.ByteBufferIndexInput newInstance(java.lang.String, java.nio.ByteBuffer[], long, int, org.apache.lucene.store.ByteBufferGuard)"], ["byte", "org.apache.lucene.store.ByteBufferIndexInput.readByte()", "public final byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.ByteBufferIndexInput.readBytes(byte[], int, int)", "public final void readBytes(byte[], int, int) throws java.io.IOException"], ["short", "org.apache.lucene.store.ByteBufferIndexInput.readShort()", "public final short readShort() throws java.io.IOException"], ["int", "org.apache.lucene.store.ByteBufferIndexInput.readInt()", "public final int readInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput.readLong()", "public final long readLong() throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.ByteBufferIndexInput.seek(long)", "public void seek(long) throws java.io.IOException"], ["byte", "org.apache.lucene.store.ByteBufferIndexInput.readByte(long)", "public byte readByte(long) throws java.io.IOException"], ["short", "org.apache.lucene.store.ByteBufferIndexInput.readShort(long)", "public short readShort(long) throws java.io.IOException"], ["int", "org.apache.lucene.store.ByteBufferIndexInput.readInt(long)", "public int readInt(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput.readLong(long)", "public long readLong(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput.length()", "public final long length()"], ["org.apache.lucene.store.ByteBufferIndexInput", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public final org.apache.lucene.store.ByteBufferIndexInput clone()"], ["org.apache.lucene.store.ByteBufferIndexInput", "org.apache.lucene.store.ByteBufferIndexInput.slice(java.lang.String, long, long)", "public final org.apache.lucene.store.ByteBufferIndexInput slice(java.lang.String, long, long)"], ["void", "org.apache.lucene.store.ByteBufferIndexInput.close()", "public final void close() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteBufferIndexInput.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.store.ChecksumIndexInput.seek(long)", "public void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.DataInput()", "public org.apache.lucene.store.DataInput()"], ["void", "org.apache.lucene.store.DataInput.readBytes(byte[], int, int, boolean)", "public void readBytes(byte[], int, int, boolean) throws java.io.IOException"], ["short", "org.apache.lucene.store.DataInput.readShort()", "public short readShort() throws java.io.IOException"], ["int", "org.apache.lucene.store.DataInput.readInt()", "public int readInt() throws java.io.IOException"], ["int", "org.apache.lucene.store.DataInput.readVInt()", "public int readVInt() throws java.io.IOException"], ["int", "org.apache.lucene.store.DataInput.readZInt()", "public int readZInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.DataInput.readLong()", "public long readLong() throws java.io.IOException"], ["long", "org.apache.lucene.store.DataInput.readVLong()", "public long readVLong() throws java.io.IOException"], ["long", "org.apache.lucene.store.DataInput.readZLong()", "public long readZLong() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.DataInput.readString()", "public java.lang.String readString() throws java.io.IOException"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.DataInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.store.DataInput.readMapOfStrings()", "public java.util.Map<java.lang.String, java.lang.String> readMapOfStrings() throws java.io.IOException"], ["java.util.Set<java.lang.String>", "org.apache.lucene.store.DataInput.readSetOfStrings()", "public java.util.Set<java.lang.String> readSetOfStrings() throws java.io.IOException"], ["void", "org.apache.lucene.store.DataInput.skipBytes(long)", "public void skipBytes(long) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.store.DataInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.DataOutput", "org.apache.lucene.store.DataOutput()", "public org.apache.lucene.store.DataOutput()"], ["void", "org.apache.lucene.store.DataOutput.writeBytes(byte[], int)", "public void writeBytes(byte[], int) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeInt(int)", "public void writeInt(int) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeShort(short)", "public void writeShort(short) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeVInt(int)", "public final void writeVInt(int) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeZInt(int)", "public final void writeZInt(int) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeLong(long)", "public void writeLong(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeVLong(long)", "public final void writeVLong(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeZLong(long)", "public final void writeZLong(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeString(java.lang.String)", "public void writeString(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.copyBytes(org.apache.lucene.store.DataInput, long)", "public void copyBytes(org.apache.lucene.store.DataInput, long) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeMapOfStrings(java.util.Map<java.lang.String, java.lang.String>)", "public void writeMapOfStrings(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeSetOfStrings(java.util.Set<java.lang.String>)", "public void writeSetOfStrings(java.util.Set<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.Directory()", "public org.apache.lucene.store.Directory()"], ["org.apache.lucene.store.ChecksumIndexInput", "org.apache.lucene.store.Directory.openChecksumInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.ChecksumIndexInput openChecksumInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.Directory.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.Directory.copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public void copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory$FSIndexOutput$1.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["org.apache.lucene.store.FSDirectory$FSIndexOutput", "org.apache.lucene.store.FSDirectory$FSIndexOutput(org.apache.lucene.store.FSDirectory, java.lang.String)", "public org.apache.lucene.store.FSDirectory$FSIndexOutput(org.apache.lucene.store.FSDirectory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.store.FSDirectory.open(java.nio.file.Path)", "public static org.apache.lucene.store.FSDirectory open(java.nio.file.Path) throws java.io.IOException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.store.FSDirectory.open(java.nio.file.Path, org.apache.lucene.store.LockFactory)", "public static org.apache.lucene.store.FSDirectory open(java.nio.file.Path, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FSDirectory.listAll(java.nio.file.Path)", "public static java.lang.String[] listAll(java.nio.file.Path) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FSDirectory.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["long", "org.apache.lucene.store.FSDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FSDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FSDirectory.createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory.syncMetaData()", "public void syncMetaData() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.FSDirectory.void close()", "public synchronized void close() throws java.io.IOException"], ["java.nio.file.Path", "org.apache.lucene.store.FSDirectory.getDirectory()", "public java.nio.file.Path getDirectory()"], ["java.lang.String", "org.apache.lucene.store.FSDirectory.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.FSDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["boolean", "org.apache.lucene.store.FSDirectory.checkPendingDeletions()", "public boolean checkPendingDeletions() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.FSDirectory.void deletePendingFiles()", "public synchronized void deletePendingFiles() throws java.io.IOException"], ["org.apache.lucene.store.FSLockFactory", "org.apache.lucene.store.FSLockFactory()", "public org.apache.lucene.store.FSLockFactory()"], ["org.apache.lucene.store.FSLockFactory", "org.apache.lucene.store.FSLockFactory.getDefault()", "public static final org.apache.lucene.store.FSLockFactory getDefault()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.FSLockFactory.obtainLock(org.apache.lucene.store.Directory, java.lang.String)", "public final org.apache.lucene.store.Lock obtainLock(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.FileSwitchDirectory", "org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)", "public org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FileSwitchDirectory.getPrimaryDir()", "public org.apache.lucene.store.Directory getPrimaryDir()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FileSwitchDirectory.getSecondaryDir()", "public org.apache.lucene.store.Directory getSecondaryDir()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.FileSwitchDirectory.obtainLock(java.lang.String)", "public org.apache.lucene.store.Lock obtainLock(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.close()", "public void close() throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FileSwitchDirectory.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.FileSwitchDirectory.getExtension(java.lang.String)", "public static java.lang.String getExtension(java.lang.String)"], ["void", "org.apache.lucene.store.FileSwitchDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.FileSwitchDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FileSwitchDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FileSwitchDirectory.createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.syncMetaData()", "public void syncMetaData() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.FileSwitchDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FilterDirectory.unwrap(org.apache.lucene.store.Directory)", "public static org.apache.lucene.store.Directory unwrap(org.apache.lucene.store.Directory)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FilterDirectory.getDelegate()", "public final org.apache.lucene.store.Directory getDelegate()"], ["java.lang.String[]", "org.apache.lucene.store.FilterDirectory.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["void", "org.apache.lucene.store.FilterDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.FilterDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FilterDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FilterDirectory.createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.FilterDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.FilterDirectory.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FilterDirectory.syncMetaData()", "public void syncMetaData() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.FilterDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.FilterDirectory.obtainLock(java.lang.String)", "public org.apache.lucene.store.Lock obtainLock(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FilterDirectory.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.FilterDirectory.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.FlushInfo", "org.apache.lucene.store.FlushInfo(int, long)", "public org.apache.lucene.store.FlushInfo(int, long)"], ["int", "org.apache.lucene.store.FlushInfo.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.store.FlushInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.store.FlushInfo.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.GrowableByteArrayDataOutput", "org.apache.lucene.store.GrowableByteArrayDataOutput(int)", "public org.apache.lucene.store.GrowableByteArrayDataOutput(int)"], ["void", "org.apache.lucene.store.GrowableByteArrayDataOutput.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.store.GrowableByteArrayDataOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["void", "org.apache.lucene.store.GrowableByteArrayDataOutput.writeString(java.lang.String)", "public void writeString(java.lang.String) throws java.io.IOException"], ["byte[]", "org.apache.lucene.store.GrowableByteArrayDataOutput.getBytes()", "public byte[] getBytes()"], ["int", "org.apache.lucene.store.GrowableByteArrayDataOutput.getPosition()", "public int getPosition()"], ["void", "org.apache.lucene.store.GrowableByteArrayDataOutput.reset()", "public void reset()"], ["org.apache.lucene.store.IOContext$Context[]", "org.apache.lucene.store.IOContext$Context.values()", "public static org.apache.lucene.store.IOContext$Context[] values()"], ["org.apache.lucene.store.IOContext$Context", "org.apache.lucene.store.IOContext$Context.valueOf(java.lang.String)", "public static org.apache.lucene.store.IOContext$Context valueOf(java.lang.String)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext()", "public org.apache.lucene.store.IOContext()"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.FlushInfo)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.FlushInfo)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext$Context)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext$Context)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.MergeInfo)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.MergeInfo)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext, boolean)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext, boolean)"], ["int", "org.apache.lucene.store.IOContext.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.store.IOContext.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.store.IOContext.toString()", "public java.lang.String toString()"], ["byte", "org.apache.lucene.store.IndexInput$1.readByte(long)", "public byte readByte(long) throws java.io.IOException"], ["short", "org.apache.lucene.store.IndexInput$1.readShort(long)", "public short readShort(long) throws java.io.IOException"], ["int", "org.apache.lucene.store.IndexInput$1.readInt(long)", "public int readInt(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.IndexInput$1.readLong(long)", "public long readLong(long) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.IndexInput$1.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.store.IndexInput.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.IndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.RandomAccessInput", "org.apache.lucene.store.IndexInput.randomAccessSlice(long, long)", "public org.apache.lucene.store.RandomAccessInput randomAccessSlice(long, long) throws java.io.IOException"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.IndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.IndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.String", "org.apache.lucene.store.IndexOutput.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.lucene.store.IndexOutput.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.InputStreamDataInput", "org.apache.lucene.store.InputStreamDataInput(java.io.InputStream)", "public org.apache.lucene.store.InputStreamDataInput(java.io.InputStream)"], ["byte", "org.apache.lucene.store.InputStreamDataInput.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.InputStreamDataInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.InputStreamDataInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.Lock()", "public org.apache.lucene.store.Lock()"], ["org.apache.lucene.store.LockFactory", "org.apache.lucene.store.LockFactory()", "public org.apache.lucene.store.LockFactory()"], ["org.apache.lucene.store.LockObtainFailedException", "org.apache.lucene.store.LockObtainFailedException(java.lang.String)", "public org.apache.lucene.store.LockObtainFailedException(java.lang.String)"], ["org.apache.lucene.store.LockObtainFailedException", "org.apache.lucene.store.LockObtainFailedException(java.lang.String, java.lang.Throwable)", "public org.apache.lucene.store.LockObtainFailedException(java.lang.String, java.lang.Throwable)"], ["org.apache.lucene.store.LockReleaseFailedException", "org.apache.lucene.store.LockReleaseFailedException(java.lang.String)", "public org.apache.lucene.store.LockReleaseFailedException(java.lang.String)"], ["org.apache.lucene.store.LockReleaseFailedException", "org.apache.lucene.store.LockReleaseFailedException(java.lang.String, java.lang.Throwable)", "public org.apache.lucene.store.LockReleaseFailedException(java.lang.String, java.lang.Throwable)"], ["org.apache.lucene.store.LockStressTest", "org.apache.lucene.store.LockStressTest()", "public org.apache.lucene.store.LockStressTest()"], ["void", "org.apache.lucene.store.LockStressTest.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["org.apache.lucene.store.LockValidatingDirectoryWrapper", "org.apache.lucene.store.LockValidatingDirectoryWrapper(org.apache.lucene.store.Directory, org.apache.lucene.store.Lock)", "public org.apache.lucene.store.LockValidatingDirectoryWrapper(org.apache.lucene.store.Directory, org.apache.lucene.store.Lock)"], ["void", "org.apache.lucene.store.LockValidatingDirectoryWrapper.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.LockValidatingDirectoryWrapper.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.LockValidatingDirectoryWrapper.copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public void copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.LockValidatingDirectoryWrapper.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.LockValidatingDirectoryWrapper.syncMetaData()", "public void syncMetaData() throws java.io.IOException"], ["void", "org.apache.lucene.store.LockValidatingDirectoryWrapper.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.LockVerifyServer$1.run()", "public void run()"], ["org.apache.lucene.store.LockVerifyServer", "org.apache.lucene.store.LockVerifyServer()", "public org.apache.lucene.store.LockVerifyServer()"], ["void", "org.apache.lucene.store.LockVerifyServer.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.MMapDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.nio.file.Path)", "public org.apache.lucene.store.MMapDirectory(java.nio.file.Path) throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.nio.file.Path, int)", "public org.apache.lucene.store.MMapDirectory(java.nio.file.Path, int) throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory, int)", "public org.apache.lucene.store.MMapDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.MMapDirectory.setUseUnmap(boolean)", "public void setUseUnmap(boolean)"], ["boolean", "org.apache.lucene.store.MMapDirectory.getUseUnmap()", "public boolean getUseUnmap()"], ["void", "org.apache.lucene.store.MMapDirectory.setPreload(boolean)", "public void setPreload(boolean)"], ["boolean", "org.apache.lucene.store.MMapDirectory.getPreload()", "public boolean getPreload()"], ["int", "org.apache.lucene.store.MMapDirectory.getMaxChunkSize()", "public final int getMaxChunkSize()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.MMapDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.MergeInfo", "org.apache.lucene.store.MergeInfo(int, long, boolean, int)", "public org.apache.lucene.store.MergeInfo(int, long, boolean, int)"], ["int", "org.apache.lucene.store.MergeInfo.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.store.MergeInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.store.MergeInfo.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.nio.channels.FileChannel, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.nio.channels.FileChannel, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.nio.channels.FileChannel, long, long, int)", "public org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.nio.channels.FileChannel, long, long, int)"], ["void", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()", "public org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["long", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.length()", "public final long length()"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.NIOFSDirectory", "org.apache.lucene.store.NIOFSDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.NIOFSDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory", "org.apache.lucene.store.NIOFSDirectory(java.nio.file.Path)", "public org.apache.lucene.store.NIOFSDirectory(java.nio.file.Path) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.NIOFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.NRTCachingDirectory", "org.apache.lucene.store.NRTCachingDirectory(org.apache.lucene.store.Directory, double, double)", "public org.apache.lucene.store.NRTCachingDirectory(org.apache.lucene.store.Directory, double, double)"], ["java.lang.String", "org.apache.lucene.store.NRTCachingDirectory.toString()", "public java.lang.String toString()"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.java.lang.String[] listAll()", "public synchronized java.lang.String[] listAll() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.void deleteFile(java.lang.String)", "public synchronized void deleteFile(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.long fileLength(java.lang.String)", "public synchronized long fileLength(java.lang.String) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.NRTCachingDirectory.listCachedFiles()", "public java.lang.String[] listCachedFiles()"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.NRTCachingDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.NRTCachingDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.NRTCachingDirectory.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.NRTCachingDirectory.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.NRTCachingDirectory.createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["long", "org.apache.lucene.store.NRTCachingDirectory.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.store.NRTCachingDirectory.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.ensureValid()", "public void ensureValid() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.void close()", "public synchronized void close() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.NoLockFactory$NoLock.close()", "public void close()"], ["void", "org.apache.lucene.store.NoLockFactory$NoLock.ensureValid()", "public void ensureValid() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.NoLockFactory$NoLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.NoLockFactory.obtainLock(org.apache.lucene.store.Directory, java.lang.String)", "public org.apache.lucene.store.Lock obtainLock(org.apache.lucene.store.Directory, java.lang.String)"], ["org.apache.lucene.store.OutputStreamDataOutput", "org.apache.lucene.store.OutputStreamDataOutput(java.io.OutputStream)", "public org.apache.lucene.store.OutputStreamDataOutput(java.io.OutputStream)"], ["void", "org.apache.lucene.store.OutputStreamDataOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.OutputStreamDataOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.OutputStreamDataOutput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.OutputStreamIndexOutput", "org.apache.lucene.store.OutputStreamIndexOutput(java.lang.String, java.lang.String, java.io.OutputStream, int)", "public org.apache.lucene.store.OutputStreamIndexOutput(java.lang.String, java.lang.String, java.io.OutputStream, int)"], ["void", "org.apache.lucene.store.OutputStreamIndexOutput.writeByte(byte)", "public final void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.OutputStreamIndexOutput.writeBytes(byte[], int, int)", "public final void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.OutputStreamIndexOutput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.OutputStreamIndexOutput.getFilePointer()", "public final long getFilePointer()"], ["long", "org.apache.lucene.store.OutputStreamIndexOutput.getChecksum()", "public final long getChecksum() throws java.io.IOException"], ["org.apache.lucene.store.RAMDirectory", "org.apache.lucene.store.RAMDirectory()", "public org.apache.lucene.store.RAMDirectory()"], ["org.apache.lucene.store.RAMDirectory", "org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.LockFactory)"], ["org.apache.lucene.store.RAMDirectory", "org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.FSDirectory, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.FSDirectory, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.RAMDirectory.listAll()", "public final java.lang.String[] listAll()"], ["boolean", "org.apache.lucene.store.RAMDirectory.fileNameExists(java.lang.String)", "public final boolean fileNameExists(java.lang.String)"], ["long", "org.apache.lucene.store.RAMDirectory.fileLength(java.lang.String)", "public final long fileLength(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMDirectory.ramBytesUsed()", "public final long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.store.RAMDirectory.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["void", "org.apache.lucene.store.RAMDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.RAMDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.RAMDirectory.createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.syncMetaData()", "public void syncMetaData() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.RAMDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.close()", "public void close()"], ["org.apache.lucene.store.RAMFile", "org.apache.lucene.store.RAMFile()", "public org.apache.lucene.store.RAMFile()"], ["synchronized", "org.apache.lucene.store.RAMFile.long getLength()", "public synchronized long getLength()"], ["synchronized", "org.apache.lucene.store.RAMFile.long ramBytesUsed()", "public synchronized long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.store.RAMFile.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.store.RAMFile.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.store.RAMFile.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.apache.lucene.store.RAMInputStream$1.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMInputStream$1.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.store.RAMInputStream$1.length()", "public long length()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.RAMInputStream$1.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.RAMInputStream", "org.apache.lucene.store.RAMInputStream(java.lang.String, org.apache.lucene.store.RAMFile)", "public org.apache.lucene.store.RAMInputStream(java.lang.String, org.apache.lucene.store.RAMFile) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMInputStream.close()", "public void close()"], ["long", "org.apache.lucene.store.RAMInputStream.length()", "public long length()"], ["byte", "org.apache.lucene.store.RAMInputStream.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMInputStream.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMInputStream.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.RAMInputStream.seek(long)", "public void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.RAMInputStream.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.RAMOutputStream", "org.apache.lucene.store.RAMOutputStream()", "public org.apache.lucene.store.RAMOutputStream()"], ["org.apache.lucene.store.RAMOutputStream", "org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile, boolean)", "public org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile, boolean)"], ["org.apache.lucene.store.RAMOutputStream", "org.apache.lucene.store.RAMOutputStream(java.lang.String, org.apache.lucene.store.RAMFile, boolean)", "public org.apache.lucene.store.RAMOutputStream(java.lang.String, org.apache.lucene.store.RAMFile, boolean)"], ["void", "org.apache.lucene.store.RAMOutputStream.writeTo(org.apache.lucene.store.DataOutput)", "public void writeTo(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.writeTo(byte[], int)", "public void writeTo(byte[], int) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.reset()", "public void reset()"], ["void", "org.apache.lucene.store.RAMOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMOutputStream.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.store.RAMOutputStream.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.store.RAMOutputStream.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["long", "org.apache.lucene.store.RAMOutputStream.getChecksum()", "public long getChecksum() throws java.io.IOException"], ["org.apache.lucene.store.RateLimitedIndexOutput", "org.apache.lucene.store.RateLimitedIndexOutput(org.apache.lucene.store.RateLimiter, org.apache.lucene.store.IndexOutput)", "public org.apache.lucene.store.RateLimitedIndexOutput(org.apache.lucene.store.RateLimiter, org.apache.lucene.store.IndexOutput)"], ["void", "org.apache.lucene.store.RateLimitedIndexOutput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.RateLimitedIndexOutput.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.store.RateLimitedIndexOutput.getChecksum()", "public long getChecksum() throws java.io.IOException"], ["void", "org.apache.lucene.store.RateLimitedIndexOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.RateLimitedIndexOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["org.apache.lucene.store.RateLimiter$SimpleRateLimiter", "org.apache.lucene.store.RateLimiter$SimpleRateLimiter(double)", "public org.apache.lucene.store.RateLimiter$SimpleRateLimiter(double)"], ["void", "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.setMBPerSec(double)", "public void setMBPerSec(double)"], ["long", "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.getMinPauseCheckBytes()", "public long getMinPauseCheckBytes()"], ["double", "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.getMBPerSec()", "public double getMBPerSec()"], ["long", "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.pause(long)", "public long pause(long)"], ["org.apache.lucene.store.RateLimiter", "org.apache.lucene.store.RateLimiter()", "public org.apache.lucene.store.RateLimiter()"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.nio.channels.SeekableByteChannel, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.nio.channels.SeekableByteChannel, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.nio.channels.SeekableByteChannel, long, long, int)", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.nio.channels.SeekableByteChannel, long, long, int)"], ["void", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.slice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput slice(java.lang.String, long, long) throws java.io.IOException"], ["long", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.length()", "public final long length()"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.SimpleFSDirectory", "org.apache.lucene.store.SimpleFSDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.SimpleFSDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory", "org.apache.lucene.store.SimpleFSDirectory(java.nio.file.Path)", "public org.apache.lucene.store.SimpleFSDirectory(java.nio.file.Path) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.SimpleFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock.ensureValid()", "public void ensureValid() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock.void close()", "public synchronized void close() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock", "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock(org.apache.lucene.store.SingleInstanceLockFactory, java.lang.String)", "public org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock(org.apache.lucene.store.SingleInstanceLockFactory, java.lang.String)"], ["void", "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock.ensureValid()", "public void ensureValid() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock.void close()", "public synchronized void close() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.SingleInstanceLockFactory", "org.apache.lucene.store.SingleInstanceLockFactory()", "public org.apache.lucene.store.SingleInstanceLockFactory()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.SingleInstanceLockFactory.obtainLock(org.apache.lucene.store.Directory, java.lang.String)", "public org.apache.lucene.store.Lock obtainLock(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.SleepingLockWrapper", "org.apache.lucene.store.SleepingLockWrapper(org.apache.lucene.store.Directory, long)", "public org.apache.lucene.store.SleepingLockWrapper(org.apache.lucene.store.Directory, long)"], ["org.apache.lucene.store.SleepingLockWrapper", "org.apache.lucene.store.SleepingLockWrapper(org.apache.lucene.store.Directory, long, long)", "public org.apache.lucene.store.SleepingLockWrapper(org.apache.lucene.store.Directory, long, long)"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.SleepingLockWrapper.obtainLock(java.lang.String)", "public org.apache.lucene.store.Lock obtainLock(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.SleepingLockWrapper.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.TrackingDirectoryWrapper", "org.apache.lucene.store.TrackingDirectoryWrapper(org.apache.lucene.store.Directory)", "public org.apache.lucene.store.TrackingDirectoryWrapper(org.apache.lucene.store.Directory)"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.TrackingDirectoryWrapper.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.TrackingDirectoryWrapper.createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createTempOutput(java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public void copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["java.util.Set<java.lang.String>", "org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles()", "public java.util.Set<java.lang.String> getCreatedFiles()"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.clearCreatedFiles()", "public void clearCreatedFiles()"], ["org.apache.lucene.store.VerifyingLockFactory$CheckedLock", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock)", "public org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock) throws java.io.IOException"], ["void", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.ensureValid()", "public void ensureValid() throws java.io.IOException"], ["void", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.VerifyingLockFactory", "org.apache.lucene.store.VerifyingLockFactory(org.apache.lucene.store.LockFactory, java.io.InputStream, java.io.OutputStream)", "public org.apache.lucene.store.VerifyingLockFactory(org.apache.lucene.store.LockFactory, java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.VerifyingLockFactory.obtainLock(org.apache.lucene.store.Directory, java.lang.String)", "public org.apache.lucene.store.Lock obtainLock(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.util.Accountable.getChildResources()", "public default java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["int", "org.apache.lucene.util.Accountables$1.compare(org.apache.lucene.util.Accountable, org.apache.lucene.util.Accountable)", "public int compare(org.apache.lucene.util.Accountable, org.apache.lucene.util.Accountable)"], ["int", "org.apache.lucene.util.Accountables$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["long", "org.apache.lucene.util.Accountables$2.ramBytesUsed()", "public long ramBytesUsed()"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.util.Accountables$2.getChildResources()", "public java.util.Collection<org.apache.lucene.util.Accountable> getChildResources()"], ["java.lang.String", "org.apache.lucene.util.Accountables$2.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.util.Accountables.toString(org.apache.lucene.util.Accountable)", "public static java.lang.String toString(org.apache.lucene.util.Accountable)"], ["org.apache.lucene.util.Accountable", "org.apache.lucene.util.Accountables.namedAccountable(java.lang.String, org.apache.lucene.util.Accountable)", "public static org.apache.lucene.util.Accountable namedAccountable(java.lang.String, org.apache.lucene.util.Accountable)"], ["org.apache.lucene.util.Accountable", "org.apache.lucene.util.Accountables.namedAccountable(java.lang.String, long)", "public static org.apache.lucene.util.Accountable namedAccountable(java.lang.String, long)"], ["java.util.Collection<org.apache.lucene.util.Accountable>", "org.apache.lucene.util.Accountables.namedAccountables(java.lang.String, java.util.Map<?, ? extends org.apache.lucene.util.Accountable>)", "public static java.util.Collection<org.apache.lucene.util.Accountable> namedAccountables(java.lang.String, java.util.Map<?, ? extends org.apache.lucene.util.Accountable>)"], ["org.apache.lucene.util.Accountable", "org.apache.lucene.util.Accountables.namedAccountable(java.lang.String, java.util.Collection<org.apache.lucene.util.Accountable>, long)", "public static org.apache.lucene.util.Accountable namedAccountable(java.lang.String, java.util.Collection<org.apache.lucene.util.Accountable>, long)"], ["org.apache.lucene.util.ArrayInPlaceMergeSorter", "org.apache.lucene.util.ArrayInPlaceMergeSorter(T[], java.util.Comparator<? super T>)", "public org.apache.lucene.util.ArrayInPlaceMergeSorter(T[], java.util.Comparator<? super T>)"], ["org.apache.lucene.util.ArrayIntroSorter", "org.apache.lucene.util.ArrayIntroSorter(T[], java.util.Comparator<? super T>)", "public org.apache.lucene.util.ArrayIntroSorter(T[], java.util.Comparator<? super T>)"], ["org.apache.lucene.util.ArrayTimSorter", "org.apache.lucene.util.ArrayTimSorter(T[], java.util.Comparator<? super T>, int)", "public org.apache.lucene.util.ArrayTimSorter(T[], java.util.Comparator<? super T>, int)"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int)", "public static int parseInt(char[], int, int) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int, int)", "public static int parseInt(char[], int, int, int) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.oversize(int, int)", "public static int oversize(int, int)"], ["<T> T[]", "org.apache.lucene.util.ArrayUtil.grow(T[], int)", "public static <T> T[] grow(T[], int)"], ["short[]", "org.apache.lucene.util.ArrayUtil.grow(short[], int)", "public static short[] grow(short[], int)"], ["short[]", "org.apache.lucene.util.ArrayUtil.grow(short[])", "public static short[] grow(short[])"], ["float[]", "org.apache.lucene.util.ArrayUtil.grow(float[], int)", "public static float[] grow(float[], int)"], ["float[]", "org.apache.lucene.util.ArrayUtil.grow(float[])", "public static float[] grow(float[])"], ["double[]", "org.apache.lucene.util.ArrayUtil.grow(double[], int)", "public static double[] grow(double[], int)"], ["double[]", "org.apache.lucene.util.ArrayUtil.grow(double[])", "public static double[] grow(double[])"], ["int[]", "org.apache.lucene.util.ArrayUtil.grow(int[], int)", "public static int[] grow(int[], int)"], ["int[]", "org.apache.lucene.util.ArrayUtil.grow(int[])", "public static int[] grow(int[])"], ["long[]", "org.apache.lucene.util.ArrayUtil.grow(long[], int)", "public static long[] grow(long[], int)"], ["long[]", "org.apache.lucene.util.ArrayUtil.grow(long[])", "public static long[] grow(long[])"], ["byte[]", "org.apache.lucene.util.ArrayUtil.grow(byte[], int)", "public static byte[] grow(byte[], int)"], ["byte[]", "org.apache.lucene.util.ArrayUtil.grow(byte[])", "public static byte[] grow(byte[])"], ["char[]", "org.apache.lucene.util.ArrayUtil.grow(char[], int)", "public static char[] grow(char[], int)"], ["char[]", "org.apache.lucene.util.ArrayUtil.grow(char[])", "public static char[] grow(char[])"], ["int", "org.apache.lucene.util.ArrayUtil.hashCode(char[], int, int)", "public static int hashCode(char[], int, int)"], ["boolean", "org.apache.lucene.util.ArrayUtil.equals(byte[], int, byte[], int, int)", "public static boolean equals(byte[], int, byte[], int, int)"], ["boolean", "org.apache.lucene.util.ArrayUtil.equals(int[], int, int[], int, int)", "public static boolean equals(int[], int, int[], int, int)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.swap(T[], int, int)", "public static <T> void swap(T[], int, int)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.introSort(T[], int, int, java.util.Comparator<? super T>)", "public static <T> void introSort(T[], int, int, java.util.Comparator<? super T>)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.introSort(T[], java.util.Comparator<? super T>)", "public static <T> void introSort(T[], java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.introSort(T[], int, int)", "public static <T extends java.lang.Comparable<? super T>> void introSort(T[], int, int)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.introSort(T[])", "public static <T extends java.lang.Comparable<? super T>> void introSort(T[])"], ["<T> void", "org.apache.lucene.util.ArrayUtil.timSort(T[], int, int, java.util.Comparator<? super T>)", "public static <T> void timSort(T[], int, int, java.util.Comparator<? super T>)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.timSort(T[], java.util.Comparator<? super T>)", "public static <T> void timSort(T[], java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.timSort(T[], int, int)", "public static <T extends java.lang.Comparable<? super T>> void timSort(T[], int, int)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.timSort(T[])", "public static <T extends java.lang.Comparable<? super T>> void timSort(T[])"], ["<T> void", "org.apache.lucene.util.ArrayUtil.select(T[], int, int, int, java.util.Comparator<? super T>)", "public static <T> void select(T[], int, int, int, java.util.Comparator<? super T>)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeFactory$DefaultAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory", "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory(org.apache.lucene.util.AttributeFactory, java.lang.Class<A>)", "public org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory(org.apache.lucene.util.AttributeFactory, java.lang.Class<A>)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public final org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["boolean", "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.AttributeFactory", "org.apache.lucene.util.AttributeFactory()", "public org.apache.lucene.util.AttributeFactory()"], ["<A extends org.apache.lucene.util.AttributeImpl> org.apache.lucene.util.AttributeFactory", "org.apache.lucene.util.AttributeFactory.getStaticImplementation(org.apache.lucene.util.AttributeFactory, java.lang.Class<A>)", "public static <A extends org.apache.lucene.util.AttributeImpl> org.apache.lucene.util.AttributeFactory getStaticImplementation(org.apache.lucene.util.AttributeFactory, java.lang.Class<A>)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeImpl()", "public org.apache.lucene.util.AttributeImpl()"], ["void", "org.apache.lucene.util.AttributeImpl.end()", "public void end()"], ["java.lang.String", "org.apache.lucene.util.AttributeImpl.reflectAsString(boolean)", "public final java.lang.String reflectAsString(boolean)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.util.AttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.util.AttributeSource$1.remove()", "public void remove()"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeSource$1.next()", "public org.apache.lucene.util.AttributeImpl next()"], ["boolean", "org.apache.lucene.util.AttributeSource$1.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.apache.lucene.util.AttributeSource$1.next()", "public java.lang.Object next()"], ["void", "org.apache.lucene.util.AttributeSource$3.reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)", "public void reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource$State()", "public org.apache.lucene.util.AttributeSource$State()"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource$State.clone()", "public org.apache.lucene.util.AttributeSource$State clone()"], ["java.lang.Object", "org.apache.lucene.util.AttributeSource$State.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource()", "public org.apache.lucene.util.AttributeSource()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)", "public org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeFactory)", "public org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeFactory)"], ["org.apache.lucene.util.AttributeFactory", "org.apache.lucene.util.AttributeSource.getAttributeFactory()", "public final org.apache.lucene.util.AttributeFactory getAttributeFactory()"], ["java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>>", "org.apache.lucene.util.AttributeSource.getAttributeClassesIterator()", "public final java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>> getAttributeClassesIterator()"], ["java.util.Iterator<org.apache.lucene.util.AttributeImpl>", "org.apache.lucene.util.AttributeSource.getAttributeImplsIterator()", "public final java.util.Iterator<org.apache.lucene.util.AttributeImpl> getAttributeImplsIterator()"], ["void", "org.apache.lucene.util.AttributeSource.addAttributeImpl(org.apache.lucene.util.AttributeImpl)", "public final void addAttributeImpl(org.apache.lucene.util.AttributeImpl)"], ["<T extends org.apache.lucene.util.Attribute> T", "org.apache.lucene.util.AttributeSource.addAttribute(java.lang.Class<T>)", "public final <T extends org.apache.lucene.util.Attribute> T addAttribute(java.lang.Class<T>)"], ["boolean", "org.apache.lucene.util.AttributeSource.hasAttributes()", "public final boolean hasAttributes()"], ["boolean", "org.apache.lucene.util.AttributeSource.hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public final boolean hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["<T extends org.apache.lucene.util.Attribute> T", "org.apache.lucene.util.AttributeSource.getAttribute(java.lang.Class<T>)", "public final <T extends org.apache.lucene.util.Attribute> T getAttribute(java.lang.Class<T>)"], ["void", "org.apache.lucene.util.AttributeSource.clearAttributes()", "public final void clearAttributes()"], ["void", "org.apache.lucene.util.AttributeSource.endAttributes()", "public final void endAttributes()"], ["void", "org.apache.lucene.util.AttributeSource.removeAllAttributes()", "public final void removeAllAttributes()"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource.captureState()", "public final org.apache.lucene.util.AttributeSource$State captureState()"], ["void", "org.apache.lucene.util.AttributeSource.restoreState(org.apache.lucene.util.AttributeSource$State)", "public final void restoreState(org.apache.lucene.util.AttributeSource$State)"], ["int", "org.apache.lucene.util.AttributeSource.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.AttributeSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.AttributeSource.reflectAsString(boolean)", "public final java.lang.String reflectAsString(boolean)"], ["void", "org.apache.lucene.util.AttributeSource.reflectWith(org.apache.lucene.util.AttributeReflector)", "public final void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource.cloneAttributes()", "public final org.apache.lucene.util.AttributeSource cloneAttributes()"], ["void", "org.apache.lucene.util.AttributeSource.copyTo(org.apache.lucene.util.AttributeSource)", "public final void copyTo(org.apache.lucene.util.AttributeSource)"], ["java.lang.String", "org.apache.lucene.util.AttributeSource.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.BitDocIdSet", "org.apache.lucene.util.BitDocIdSet(org.apache.lucene.util.BitSet, long)", "public org.apache.lucene.util.BitDocIdSet(org.apache.lucene.util.BitSet, long)"], ["org.apache.lucene.util.BitDocIdSet", "org.apache.lucene.util.BitDocIdSet(org.apache.lucene.util.BitSet)", "public org.apache.lucene.util.BitDocIdSet(org.apache.lucene.util.BitSet)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.BitDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.util.BitSet", "org.apache.lucene.util.BitDocIdSet.bits()", "public org.apache.lucene.util.BitSet bits()"], ["long", "org.apache.lucene.util.BitDocIdSet.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.BitDocIdSet.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.util.BitDocIdSet.bits()", "public org.apache.lucene.util.Bits bits() throws java.io.IOException"], ["org.apache.lucene.util.BitSet", "org.apache.lucene.util.BitSet()", "public org.apache.lucene.util.BitSet()"], ["org.apache.lucene.util.BitSet", "org.apache.lucene.util.BitSet.of(org.apache.lucene.search.DocIdSetIterator, int)", "public static org.apache.lucene.util.BitSet of(org.apache.lucene.search.DocIdSetIterator, int) throws java.io.IOException"], ["int", "org.apache.lucene.util.BitSet.approximateCardinality()", "public int approximateCardinality()"], ["void", "org.apache.lucene.util.BitSet.or(org.apache.lucene.search.DocIdSetIterator)", "public void or(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.BitSetIterator.getFixedBitSetOrNull(org.apache.lucene.search.DocIdSetIterator)", "public static org.apache.lucene.util.FixedBitSet getFixedBitSetOrNull(org.apache.lucene.search.DocIdSetIterator)"], ["org.apache.lucene.util.SparseFixedBitSet", "org.apache.lucene.util.BitSetIterator.getSparseFixedBitSetOrNull(org.apache.lucene.search.DocIdSetIterator)", "public static org.apache.lucene.util.SparseFixedBitSet getSparseFixedBitSetOrNull(org.apache.lucene.search.DocIdSetIterator)"], ["org.apache.lucene.util.BitSetIterator", "org.apache.lucene.util.BitSetIterator(org.apache.lucene.util.BitSet, long)", "public org.apache.lucene.util.BitSetIterator(org.apache.lucene.util.BitSet, long)"], ["org.apache.lucene.util.BitSet", "org.apache.lucene.util.BitSetIterator.getBitSet()", "public org.apache.lucene.util.BitSet getBitSet()"], ["int", "org.apache.lucene.util.BitSetIterator.docID()", "public int docID()"], ["void", "org.apache.lucene.util.BitSetIterator.setDocId(int)", "public void setDocId(int)"], ["int", "org.apache.lucene.util.BitSetIterator.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.util.BitSetIterator.advance(int)", "public int advance(int)"], ["long", "org.apache.lucene.util.BitSetIterator.cost()", "public long cost()"], ["long", "org.apache.lucene.util.BitUtil.pop_array(long[], int, int)", "public static long pop_array(long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_intersect(long[], long[], int, int)", "public static long pop_intersect(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_union(long[], long[], int, int)", "public static long pop_union(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_andnot(long[], long[], int, int)", "public static long pop_andnot(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_xor(long[], long[], int, int)", "public static long pop_xor(long[], long[], int, int)"], ["int", "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(int)", "public static int nextHighestPowerOfTwo(int)"], ["long", "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(long)", "public static long nextHighestPowerOfTwo(long)"], ["long", "org.apache.lucene.util.BitUtil.interleave(int, int)", "public static long interleave(int, int)"], ["long", "org.apache.lucene.util.BitUtil.deinterleave(long)", "public static long deinterleave(long)"], ["long", "org.apache.lucene.util.BitUtil.flipFlop(long)", "public static final long flipFlop(long)"], ["int", "org.apache.lucene.util.BitUtil.zigZagEncode(int)", "public static int zigZagEncode(int)"], ["long", "org.apache.lucene.util.BitUtil.zigZagEncode(long)", "public static long zigZagEncode(long)"], ["int", "org.apache.lucene.util.BitUtil.zigZagDecode(int)", "public static int zigZagDecode(int)"], ["long", "org.apache.lucene.util.BitUtil.zigZagDecode(long)", "public static long zigZagDecode(long)"], ["org.apache.lucene.util.Bits$MatchAllBits", "org.apache.lucene.util.Bits$MatchAllBits(int)", "public org.apache.lucene.util.Bits$MatchAllBits(int)"], ["boolean", "org.apache.lucene.util.Bits$MatchAllBits.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.util.Bits$MatchAllBits.length()", "public int length()"], ["org.apache.lucene.util.Bits$MatchNoBits", "org.apache.lucene.util.Bits$MatchNoBits(int)", "public org.apache.lucene.util.Bits$MatchNoBits(int)"], ["boolean", "org.apache.lucene.util.Bits$MatchNoBits.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.util.Bits$MatchNoBits.length()", "public int length()"], ["org.apache.lucene.util.ByteBlockPool$Allocator", "org.apache.lucene.util.ByteBlockPool$Allocator(int)", "public org.apache.lucene.util.ByteBlockPool$Allocator(int)"], ["void", "org.apache.lucene.util.ByteBlockPool$Allocator.recycleByteBlocks(java.util.List<byte[]>)", "public void recycleByteBlocks(java.util.List<byte[]>)"], ["byte[]", "org.apache.lucene.util.ByteBlockPool$Allocator.getByteBlock()", "public byte[] getByteBlock()"], ["org.apache.lucene.util.ByteBlockPool$DirectAllocator", "org.apache.lucene.util.ByteBlockPool$DirectAllocator()", "public org.apache.lucene.util.ByteBlockPool$DirectAllocator()"], ["org.apache.lucene.util.ByteBlockPool$DirectAllocator", "org.apache.lucene.util.ByteBlockPool$DirectAllocator(int)", "public org.apache.lucene.util.ByteBlockPool$DirectAllocator(int)"], ["void", "org.apache.lucene.util.ByteBlockPool$DirectAllocator.recycleByteBlocks(byte[][], int, int)", "public void recycleByteBlocks(byte[][], int, int)"], ["org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(org.apache.lucene.util.Counter)", "public org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(org.apache.lucene.util.Counter)"], ["org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(int, org.apache.lucene.util.Counter)", "public org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(int, org.apache.lucene.util.Counter)"], ["byte[]", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.getByteBlock()", "public byte[] getByteBlock()"], ["void", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.recycleByteBlocks(byte[][], int, int)", "public void recycleByteBlocks(byte[][], int, int)"], ["org.apache.lucene.util.ByteBlockPool", "org.apache.lucene.util.ByteBlockPool(org.apache.lucene.util.ByteBlockPool$Allocator)", "public org.apache.lucene.util.ByteBlockPool(org.apache.lucene.util.ByteBlockPool$Allocator)"], ["void", "org.apache.lucene.util.ByteBlockPool.reset()", "public void reset()"], ["void", "org.apache.lucene.util.ByteBlockPool.reset(boolean, boolean)", "public void reset(boolean, boolean)"], ["void", "org.apache.lucene.util.ByteBlockPool.nextBuffer()", "public void nextBuffer()"], ["int", "org.apache.lucene.util.ByteBlockPool.newSlice(int)", "public int newSlice(int)"], ["int", "org.apache.lucene.util.ByteBlockPool.allocSlice(byte[], int)", "public int allocSlice(byte[], int)"], ["void", "org.apache.lucene.util.ByteBlockPool.setBytesRef(org.apache.lucene.util.BytesRef, int)", "public void setBytesRef(org.apache.lucene.util.BytesRef, int)"], ["void", "org.apache.lucene.util.ByteBlockPool.append(org.apache.lucene.util.BytesRef)", "public void append(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.ByteBlockPool.readBytes(long, byte[], int, int)", "public void readBytes(long, byte[], int, int)"], ["void", "org.apache.lucene.util.ByteBlockPool.setRawBytesRef(org.apache.lucene.util.BytesRef, long)", "public void setRawBytesRef(org.apache.lucene.util.BytesRef, long)"], ["byte", "org.apache.lucene.util.ByteBlockPool.readByte(long)", "public byte readByte(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef()", "public org.apache.lucene.util.BytesRef()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(byte[], int, int)", "public org.apache.lucene.util.BytesRef(byte[], int, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(byte[])", "public org.apache.lucene.util.BytesRef(byte[])"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(int)", "public org.apache.lucene.util.BytesRef(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(java.lang.CharSequence)", "public org.apache.lucene.util.BytesRef(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.util.BytesRef.bytesEquals(org.apache.lucene.util.BytesRef)", "public boolean bytesEquals(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef.clone()", "public org.apache.lucene.util.BytesRef clone()"], ["int", "org.apache.lucene.util.BytesRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.BytesRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.BytesRef.utf8ToString()", "public java.lang.String utf8ToString()"], ["java.lang.String", "org.apache.lucene.util.BytesRef.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.BytesRef.compareTo(org.apache.lucene.util.BytesRef)", "public int compareTo(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef.deepCopyOf(org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.util.BytesRef.isValid()", "public boolean isValid()"], ["java.lang.Object", "org.apache.lucene.util.BytesRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.BytesRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefArray$2.next()", "public org.apache.lucene.util.BytesRef next()"], ["org.apache.lucene.util.BytesRefArray", "org.apache.lucene.util.BytesRefArray(org.apache.lucene.util.Counter)", "public org.apache.lucene.util.BytesRefArray(org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.util.BytesRefArray.clear()", "public void clear()"], ["int", "org.apache.lucene.util.BytesRefArray.append(org.apache.lucene.util.BytesRef)", "public int append(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.BytesRefArray.size()", "public int size()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefArray.get(org.apache.lucene.util.BytesRefBuilder, int)", "public org.apache.lucene.util.BytesRef get(org.apache.lucene.util.BytesRefBuilder, int)"], ["org.apache.lucene.util.BytesRefIterator", "org.apache.lucene.util.BytesRefArray.iterator()", "public org.apache.lucene.util.BytesRefIterator iterator()"], ["org.apache.lucene.util.BytesRefIterator", "org.apache.lucene.util.BytesRefArray.iterator(java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public org.apache.lucene.util.BytesRefIterator iterator(java.util.Comparator<org.apache.lucene.util.BytesRef>)"], ["org.apache.lucene.util.BytesRefBuilder", "org.apache.lucene.util.BytesRefBuilder()", "public org.apache.lucene.util.BytesRefBuilder()"], ["byte[]", "org.apache.lucene.util.BytesRefBuilder.bytes()", "public byte[] bytes()"], ["int", "org.apache.lucene.util.BytesRefBuilder.length()", "public int length()"], ["void", "org.apache.lucene.util.BytesRefBuilder.setLength(int)", "public void setLength(int)"], ["byte", "org.apache.lucene.util.BytesRefBuilder.byteAt(int)", "public byte byteAt(int)"], ["void", "org.apache.lucene.util.BytesRefBuilder.setByteAt(int, byte)", "public void setByteAt(int, byte)"], ["void", "org.apache.lucene.util.BytesRefBuilder.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.util.BytesRefBuilder.append(byte)", "public void append(byte)"], ["void", "org.apache.lucene.util.BytesRefBuilder.append(byte[], int, int)", "public void append(byte[], int, int)"], ["void", "org.apache.lucene.util.BytesRefBuilder.append(org.apache.lucene.util.BytesRef)", "public void append(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.BytesRefBuilder.append(org.apache.lucene.util.BytesRefBuilder)", "public void append(org.apache.lucene.util.BytesRefBuilder)"], ["void", "org.apache.lucene.util.BytesRefBuilder.clear()", "public void clear()"], ["void", "org.apache.lucene.util.BytesRefBuilder.copyBytes(byte[], int, int)", "public void copyBytes(byte[], int, int)"], ["void", "org.apache.lucene.util.BytesRefBuilder.copyBytes(org.apache.lucene.util.BytesRef)", "public void copyBytes(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.BytesRefBuilder.copyBytes(org.apache.lucene.util.BytesRefBuilder)", "public void copyBytes(org.apache.lucene.util.BytesRefBuilder)"], ["void", "org.apache.lucene.util.BytesRefBuilder.copyChars(java.lang.CharSequence)", "public void copyChars(java.lang.CharSequence)"], ["void", "org.apache.lucene.util.BytesRefBuilder.copyChars(java.lang.CharSequence, int, int)", "public void copyChars(java.lang.CharSequence, int, int)"], ["void", "org.apache.lucene.util.BytesRefBuilder.copyChars(char[], int, int)", "public void copyChars(char[], int, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefBuilder.get()", "public org.apache.lucene.util.BytesRef get()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefBuilder.toBytesRef()", "public org.apache.lucene.util.BytesRef toBytesRef()"], ["boolean", "org.apache.lucene.util.BytesRefBuilder.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.BytesRefBuilder.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.util.BytesRefComparator.compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.BytesRefComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.BytesRefHash$BytesStartArray", "org.apache.lucene.util.BytesRefHash$BytesStartArray()", "public org.apache.lucene.util.BytesRefHash$BytesStartArray()"], ["org.apache.lucene.util.BytesRefHash$DirectBytesStartArray", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int, org.apache.lucene.util.Counter)", "public org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int, org.apache.lucene.util.Counter)"], ["org.apache.lucene.util.BytesRefHash$DirectBytesStartArray", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int)", "public org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int)"], ["int[]", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.clear()", "public int[] clear()"], ["int[]", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.init()", "public int[] init()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.bytesUsed()", "public org.apache.lucene.util.Counter bytesUsed()"], ["org.apache.lucene.util.BytesRefHash", "org.apache.lucene.util.BytesRefHash()", "public org.apache.lucene.util.BytesRefHash()"], ["org.apache.lucene.util.BytesRefHash", "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool)", "public org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool)"], ["org.apache.lucene.util.BytesRefHash", "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool, int, org.apache.lucene.util.BytesRefHash$BytesStartArray)", "public org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool, int, org.apache.lucene.util.BytesRefHash$BytesStartArray)"], ["int", "org.apache.lucene.util.BytesRefHash.size()", "public int size()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefHash.get(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef get(int, org.apache.lucene.util.BytesRef)"], ["int[]", "org.apache.lucene.util.BytesRefHash.sort()", "public int[] sort()"], ["void", "org.apache.lucene.util.BytesRefHash.clear(boolean)", "public void clear(boolean)"], ["void", "org.apache.lucene.util.BytesRefHash.clear()", "public void clear()"], ["void", "org.apache.lucene.util.BytesRefHash.close()", "public void close()"], ["int", "org.apache.lucene.util.BytesRefHash.add(org.apache.lucene.util.BytesRef)", "public int add(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.BytesRefHash.find(org.apache.lucene.util.BytesRef)", "public int find(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.BytesRefHash.addByPoolOffset(int)", "public int addByPoolOffset(int)"], ["void", "org.apache.lucene.util.BytesRefHash.reinit()", "public void reinit()"], ["int", "org.apache.lucene.util.BytesRefHash.byteStart(int)", "public int byteStart(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefIterator$1.next()", "public org.apache.lucene.util.BytesRef next()"], ["int", "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public int compare(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["int", "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef()", "public org.apache.lucene.util.CharsRef()"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef(int)", "public org.apache.lucene.util.CharsRef(int)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef(char[], int, int)", "public org.apache.lucene.util.CharsRef(char[], int, int)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef(java.lang.String)", "public org.apache.lucene.util.CharsRef(java.lang.String)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef.clone()", "public org.apache.lucene.util.CharsRef clone()"], ["int", "org.apache.lucene.util.CharsRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.CharsRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.util.CharsRef.charsEquals(org.apache.lucene.util.CharsRef)", "public boolean charsEquals(org.apache.lucene.util.CharsRef)"], ["int", "org.apache.lucene.util.CharsRef.compareTo(org.apache.lucene.util.CharsRef)", "public int compareTo(org.apache.lucene.util.CharsRef)"], ["java.lang.String", "org.apache.lucene.util.CharsRef.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.CharsRef.length()", "public int length()"], ["char", "org.apache.lucene.util.CharsRef.charAt(int)", "public char charAt(int)"], ["java.lang.CharSequence", "org.apache.lucene.util.CharsRef.subSequence(int, int)", "public java.lang.CharSequence subSequence(int, int)"], ["java.util.Comparator<org.apache.lucene.util.CharsRef>", "org.apache.lucene.util.CharsRef.getUTF16SortedAsUTF8Comparator()", "public static java.util.Comparator<org.apache.lucene.util.CharsRef> getUTF16SortedAsUTF8Comparator()"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef.deepCopyOf(org.apache.lucene.util.CharsRef)", "public static org.apache.lucene.util.CharsRef deepCopyOf(org.apache.lucene.util.CharsRef)"], ["boolean", "org.apache.lucene.util.CharsRef.isValid()", "public boolean isValid()"], ["java.lang.Object", "org.apache.lucene.util.CharsRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.CharsRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.CharsRefBuilder", "org.apache.lucene.util.CharsRefBuilder()", "public org.apache.lucene.util.CharsRefBuilder()"], ["char[]", "org.apache.lucene.util.CharsRefBuilder.chars()", "public char[] chars()"], ["int", "org.apache.lucene.util.CharsRefBuilder.length()", "public int length()"], ["void", "org.apache.lucene.util.CharsRefBuilder.setLength(int)", "public void setLength(int)"], ["char", "org.apache.lucene.util.CharsRefBuilder.charAt(int)", "public char charAt(int)"], ["void", "org.apache.lucene.util.CharsRefBuilder.setCharAt(int, char)", "public void setCharAt(int, char)"], ["void", "org.apache.lucene.util.CharsRefBuilder.clear()", "public void clear()"], ["org.apache.lucene.util.CharsRefBuilder", "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence)", "public org.apache.lucene.util.CharsRefBuilder append(java.lang.CharSequence)"], ["org.apache.lucene.util.CharsRefBuilder", "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence, int, int)", "public org.apache.lucene.util.CharsRefBuilder append(java.lang.CharSequence, int, int)"], ["org.apache.lucene.util.CharsRefBuilder", "org.apache.lucene.util.CharsRefBuilder.append(char)", "public org.apache.lucene.util.CharsRefBuilder append(char)"], ["void", "org.apache.lucene.util.CharsRefBuilder.copyChars(org.apache.lucene.util.CharsRef)", "public void copyChars(org.apache.lucene.util.CharsRef)"], ["void", "org.apache.lucene.util.CharsRefBuilder.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte[], int, int)", "public void copyUTF8Bytes(byte[], int, int)"], ["void", "org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(org.apache.lucene.util.BytesRef)", "public void copyUTF8Bytes(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.CharsRefBuilder.copyChars(char[], int, int)", "public void copyChars(char[], int, int)"], ["void", "org.apache.lucene.util.CharsRefBuilder.append(char[], int, int)", "public void append(char[], int, int)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRefBuilder.get()", "public org.apache.lucene.util.CharsRef get()"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRefBuilder.toCharsRef()", "public org.apache.lucene.util.CharsRef toCharsRef()"], ["java.lang.String", "org.apache.lucene.util.CharsRefBuilder.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.util.CharsRefBuilder.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.CharsRefBuilder.hashCode()", "public int hashCode()"], ["java.lang.Appendable", "org.apache.lucene.util.CharsRefBuilder.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["org.apache.lucene.util.CloseableThreadLocal", "org.apache.lucene.util.CloseableThreadLocal()", "public org.apache.lucene.util.CloseableThreadLocal()"], ["T", "org.apache.lucene.util.CloseableThreadLocal.get()", "public T get()"], ["void", "org.apache.lucene.util.CloseableThreadLocal.set(T)", "public void set(T)"], ["void", "org.apache.lucene.util.CloseableThreadLocal.close()", "public void close()"], ["<T> void", "org.apache.lucene.util.CollectionUtil.introSort(java.util.List<T>, java.util.Comparator<? super T>)", "public static <T> void introSort(java.util.List<T>, java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.CollectionUtil.introSort(java.util.List<T>)", "public static <T extends java.lang.Comparable<? super T>> void introSort(java.util.List<T>)"], ["<T> void", "org.apache.lucene.util.CollectionUtil.timSort(java.util.List<T>, java.util.Comparator<? super T>)", "public static <T> void timSort(java.util.List<T>, java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.CollectionUtil.timSort(java.util.List<T>)", "public static <T extends java.lang.Comparable<? super T>> void timSort(java.util.List<T>)"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.String, java.nio.file.Path)", "public static org.apache.lucene.store.FSDirectory newFSDirectory(java.lang.String, java.nio.file.Path)"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.String, java.nio.file.Path, org.apache.lucene.store.LockFactory)", "public static org.apache.lucene.store.FSDirectory newFSDirectory(java.lang.String, java.nio.file.Path, org.apache.lucene.store.LockFactory)"], ["java.lang.Class<? extends org.apache.lucene.store.Directory>", "org.apache.lucene.util.CommandLineUtil.loadDirectoryClass(java.lang.String)", "public static java.lang.Class<? extends org.apache.lucene.store.Directory> loadDirectoryClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["java.lang.Class<? extends org.apache.lucene.store.FSDirectory>", "org.apache.lucene.util.CommandLineUtil.loadFSDirectoryClass(java.lang.String)", "public static java.lang.Class<? extends org.apache.lucene.store.FSDirectory> loadFSDirectoryClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.nio.file.Path)", "public static org.apache.lucene.store.FSDirectory newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.nio.file.Path) throws java.lang.ReflectiveOperationException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.nio.file.Path, org.apache.lucene.store.LockFactory)", "public static org.apache.lucene.store.FSDirectory newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.nio.file.Path, org.apache.lucene.store.LockFactory) throws java.lang.ReflectiveOperationException"], ["long", "org.apache.lucene.util.Counter$AtomicCounter.addAndGet(long)", "public long addAndGet(long)"], ["long", "org.apache.lucene.util.Counter$AtomicCounter.get()", "public long get()"], ["long", "org.apache.lucene.util.Counter$SerialCounter.addAndGet(long)", "public long addAndGet(long)"], ["long", "org.apache.lucene.util.Counter$SerialCounter.get()", "public long get()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.Counter()", "public org.apache.lucene.util.Counter()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.Counter.newCounter()", "public static org.apache.lucene.util.Counter newCounter()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.Counter.newCounter(boolean)", "public static org.apache.lucene.util.Counter newCounter(boolean)"], ["void", "org.apache.lucene.util.DocIdSetBuilder$BufferAdder.add(int)", "public void add(int)"], ["org.apache.lucene.util.DocIdSetBuilder$BulkAdder", "org.apache.lucene.util.DocIdSetBuilder$BulkAdder()", "public org.apache.lucene.util.DocIdSetBuilder$BulkAdder()"], ["void", "org.apache.lucene.util.DocIdSetBuilder$FixedBitSetAdder.add(int)", "public void add(int)"], ["org.apache.lucene.util.DocIdSetBuilder", "org.apache.lucene.util.DocIdSetBuilder(int)", "public org.apache.lucene.util.DocIdSetBuilder(int)"], ["org.apache.lucene.util.DocIdSetBuilder", "org.apache.lucene.util.DocIdSetBuilder(int, org.apache.lucene.index.Terms)", "public org.apache.lucene.util.DocIdSetBuilder(int, org.apache.lucene.index.Terms) throws java.io.IOException"], ["org.apache.lucene.util.DocIdSetBuilder", "org.apache.lucene.util.DocIdSetBuilder(int, org.apache.lucene.index.PointValues, java.lang.String)", "public org.apache.lucene.util.DocIdSetBuilder(int, org.apache.lucene.index.PointValues, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.util.DocIdSetBuilder.add(org.apache.lucene.search.DocIdSetIterator)", "public void add(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["org.apache.lucene.util.DocIdSetBuilder$BulkAdder", "org.apache.lucene.util.DocIdSetBuilder.grow(int)", "public org.apache.lucene.util.DocIdSetBuilder$BulkAdder grow(int)"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.util.DocIdSetBuilder.build()", "public org.apache.lucene.search.DocIdSet build()"], ["org.apache.lucene.util.FilterIterator", "org.apache.lucene.util.FilterIterator(java.util.Iterator<InnerT>)", "public org.apache.lucene.util.FilterIterator(java.util.Iterator<InnerT>)"], ["boolean", "org.apache.lucene.util.FilterIterator.hasNext()", "public final boolean hasNext()"], ["T", "org.apache.lucene.util.FilterIterator.next()", "public final T next()"], ["void", "org.apache.lucene.util.FilterIterator.remove()", "public final void remove()"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet.ensureCapacity(org.apache.lucene.util.FixedBitSet, int)", "public static org.apache.lucene.util.FixedBitSet ensureCapacity(org.apache.lucene.util.FixedBitSet, int)"], ["int", "org.apache.lucene.util.FixedBitSet.bits2words(int)", "public static int bits2words(int)"], ["long", "org.apache.lucene.util.FixedBitSet.intersectionCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)", "public static long intersectionCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)"], ["long", "org.apache.lucene.util.FixedBitSet.unionCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)", "public static long unionCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)"], ["long", "org.apache.lucene.util.FixedBitSet.andNotCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)", "public static long andNotCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet(int)", "public org.apache.lucene.util.FixedBitSet(int)"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet(long[], int)", "public org.apache.lucene.util.FixedBitSet(long[], int)"], ["int", "org.apache.lucene.util.FixedBitSet.length()", "public int length()"], ["long", "org.apache.lucene.util.FixedBitSet.ramBytesUsed()", "public long ramBytesUsed()"], ["long[]", "org.apache.lucene.util.FixedBitSet.getBits()", "public long[] getBits()"], ["int", "org.apache.lucene.util.FixedBitSet.cardinality()", "public int cardinality()"], ["boolean", "org.apache.lucene.util.FixedBitSet.get(int)", "public boolean get(int)"], ["void", "org.apache.lucene.util.FixedBitSet.set(int)", "public void set(int)"], ["boolean", "org.apache.lucene.util.FixedBitSet.getAndSet(int)", "public boolean getAndSet(int)"], ["void", "org.apache.lucene.util.FixedBitSet.clear(int)", "public void clear(int)"], ["boolean", "org.apache.lucene.util.FixedBitSet.getAndClear(int)", "public boolean getAndClear(int)"], ["int", "org.apache.lucene.util.FixedBitSet.nextSetBit(int)", "public int nextSetBit(int)"], ["int", "org.apache.lucene.util.FixedBitSet.prevSetBit(int)", "public int prevSetBit(int)"], ["void", "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.search.DocIdSetIterator)", "public void or(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.util.FixedBitSet)", "public void or(org.apache.lucene.util.FixedBitSet)"], ["void", "org.apache.lucene.util.FixedBitSet.xor(org.apache.lucene.util.FixedBitSet)", "public void xor(org.apache.lucene.util.FixedBitSet)"], ["void", "org.apache.lucene.util.FixedBitSet.xor(org.apache.lucene.search.DocIdSetIterator)", "public void xor(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["boolean", "org.apache.lucene.util.FixedBitSet.intersects(org.apache.lucene.util.FixedBitSet)", "public boolean intersects(org.apache.lucene.util.FixedBitSet)"], ["void", "org.apache.lucene.util.FixedBitSet.and(org.apache.lucene.util.FixedBitSet)", "public void and(org.apache.lucene.util.FixedBitSet)"], ["void", "org.apache.lucene.util.FixedBitSet.andNot(org.apache.lucene.util.FixedBitSet)", "public void andNot(org.apache.lucene.util.FixedBitSet)"], ["boolean", "org.apache.lucene.util.FixedBitSet.scanIsEmpty()", "public boolean scanIsEmpty()"], ["void", "org.apache.lucene.util.FixedBitSet.flip(int, int)", "public void flip(int, int)"], ["void", "org.apache.lucene.util.FixedBitSet.flip(int)", "public void flip(int)"], ["void", "org.apache.lucene.util.FixedBitSet.set(int, int)", "public void set(int, int)"], ["void", "org.apache.lucene.util.FixedBitSet.clear(int, int)", "public void clear(int, int)"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet.clone()", "public org.apache.lucene.util.FixedBitSet clone()"], ["boolean", "org.apache.lucene.util.FixedBitSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.FixedBitSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.apache.lucene.util.FixedBitSet.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.FixedLengthBytesRefArray$3.next()", "public org.apache.lucene.util.BytesRef next()"], ["org.apache.lucene.util.FixedLengthBytesRefArray", "org.apache.lucene.util.FixedLengthBytesRefArray(int)", "public org.apache.lucene.util.FixedLengthBytesRefArray(int)"], ["void", "org.apache.lucene.util.FixedLengthBytesRefArray.clear()", "public void clear()"], ["int", "org.apache.lucene.util.FixedLengthBytesRefArray.append(org.apache.lucene.util.BytesRef)", "public int append(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.FixedLengthBytesRefArray.size()", "public int size()"], ["org.apache.lucene.util.BytesRefIterator", "org.apache.lucene.util.FixedLengthBytesRefArray.iterator(java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public org.apache.lucene.util.BytesRefIterator iterator(java.util.Comparator<org.apache.lucene.util.BytesRef>)"], ["long", "org.apache.lucene.util.FrequencyTrackingRingBuffer$IntBag.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.FrequencyTrackingRingBuffer", "org.apache.lucene.util.FrequencyTrackingRingBuffer(int, int)", "public org.apache.lucene.util.FrequencyTrackingRingBuffer(int, int)"], ["long", "org.apache.lucene.util.FrequencyTrackingRingBuffer.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.FrequencyTrackingRingBuffer.add(int)", "public void add(int)"], ["int", "org.apache.lucene.util.FrequencyTrackingRingBuffer.frequency(int)", "public int frequency(int)"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.postVisitDirectory(java.nio.file.Path, java.io.IOException)", "public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.visitFileFailed(java.nio.file.Path, java.io.IOException)", "public java.nio.file.FileVisitResult visitFileFailed(java.nio.file.Path, java.io.IOException) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.postVisitDirectory(java.lang.Object, java.io.IOException)", "public java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object, java.io.IOException) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.visitFileFailed(java.lang.Object, java.io.IOException)", "public java.nio.file.FileVisitResult visitFileFailed(java.lang.Object, java.io.IOException) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.apache.lucene.util.IOUtils$1.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.close(java.io.Closeable...)", "public static void close(java.io.Closeable...) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.close(java.lang.Iterable<? extends java.io.Closeable>)", "public static void close(java.lang.Iterable<? extends java.io.Closeable>) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.io.Closeable...)", "public static void closeWhileHandlingException(java.io.Closeable...)"], ["void", "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.lang.Iterable<? extends java.io.Closeable>)", "public static void closeWhileHandlingException(java.lang.Iterable<? extends java.io.Closeable>)"], ["java.io.Reader", "org.apache.lucene.util.IOUtils.getDecodingReader(java.io.InputStream, java.nio.charset.Charset)", "public static java.io.Reader getDecodingReader(java.io.InputStream, java.nio.charset.Charset)"], ["java.io.Reader", "org.apache.lucene.util.IOUtils.getDecodingReader(java.lang.Class<?>, java.lang.String, java.nio.charset.Charset)", "public static java.io.Reader getDecodingReader(java.lang.Class<?>, java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.util.Collection<java.lang.String>)", "public static void deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.util.Collection<java.lang.String>)"], ["void", "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.lang.String...)", "public static void deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.lang.String...)"], ["void", "org.apache.lucene.util.IOUtils.deleteFiles(org.apache.lucene.store.Directory, java.util.Collection<java.lang.String>)", "public static void deleteFiles(org.apache.lucene.store.Directory, java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.deleteFiles(org.apache.lucene.store.Directory, java.lang.String...)", "public static void deleteFiles(org.apache.lucene.store.Directory, java.lang.String...) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(java.nio.file.Path...)", "public static void deleteFilesIgnoringExceptions(java.nio.file.Path...)"], ["void", "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(java.util.Collection<? extends java.nio.file.Path>)", "public static void deleteFilesIgnoringExceptions(java.util.Collection<? extends java.nio.file.Path>)"], ["void", "org.apache.lucene.util.IOUtils.deleteFilesIfExist(java.nio.file.Path...)", "public static void deleteFilesIfExist(java.nio.file.Path...) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.deleteFilesIfExist(java.util.Collection<? extends java.nio.file.Path>)", "public static void deleteFilesIfExist(java.util.Collection<? extends java.nio.file.Path>) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.rm(java.nio.file.Path...)", "public static void rm(java.nio.file.Path...) throws java.io.IOException"], ["java.lang.Error", "org.apache.lucene.util.IOUtils.rethrowAlways(java.lang.Throwable)", "public static java.lang.Error rethrowAlways(java.lang.Throwable) throws java.io.IOException, java.lang.RuntimeException"], ["void", "org.apache.lucene.util.IOUtils.reThrow(java.lang.Throwable)", "public static void reThrow(java.lang.Throwable) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.reThrowUnchecked(java.lang.Throwable)", "public static void reThrowUnchecked(java.lang.Throwable)"], ["void", "org.apache.lucene.util.IOUtils.fsync(java.nio.file.Path, boolean)", "public static void fsync(java.nio.file.Path, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.util.IOUtils.spins(org.apache.lucene.store.Directory)", "public static boolean spins(org.apache.lucene.store.Directory) throws java.io.IOException"], ["boolean", "org.apache.lucene.util.IOUtils.spins(java.nio.file.Path)", "public static boolean spins(java.nio.file.Path) throws java.io.IOException"], ["org.apache.lucene.util.InPlaceMergeSorter", "org.apache.lucene.util.InPlaceMergeSorter()", "public org.apache.lucene.util.InPlaceMergeSorter()"], ["void", "org.apache.lucene.util.InPlaceMergeSorter.sort(int, int)", "public final void sort(int, int)"], ["void", "org.apache.lucene.util.InfoStream$NoOutput.message(java.lang.String, java.lang.String)", "public void message(java.lang.String, java.lang.String)"], ["boolean", "org.apache.lucene.util.InfoStream$NoOutput.isEnabled(java.lang.String)", "public boolean isEnabled(java.lang.String)"], ["void", "org.apache.lucene.util.InfoStream$NoOutput.close()", "public void close()"], ["org.apache.lucene.util.InfoStream", "org.apache.lucene.util.InfoStream()", "public org.apache.lucene.util.InfoStream()"], ["synchronized", "org.apache.lucene.util.InfoStream.org.apache.lucene.util.InfoStream getDefault()", "public static synchronized org.apache.lucene.util.InfoStream getDefault()"], ["synchronized", "org.apache.lucene.util.InfoStream.void setDefault(org.apache.lucene.util.InfoStream)", "public static synchronized void setDefault(org.apache.lucene.util.InfoStream)"], ["int", "org.apache.lucene.util.IntArrayDocIdSet$IntArrayDocIdSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.util.IntArrayDocIdSet$IntArrayDocIdSetIterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.util.IntArrayDocIdSet$IntArrayDocIdSetIterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.util.IntArrayDocIdSet$IntArrayDocIdSetIterator.cost()", "public long cost()"], ["long", "org.apache.lucene.util.IntArrayDocIdSet.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.IntArrayDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["org.apache.lucene.util.IntBlockPool$Allocator", "org.apache.lucene.util.IntBlockPool$Allocator(int)", "public org.apache.lucene.util.IntBlockPool$Allocator(int)"], ["int[]", "org.apache.lucene.util.IntBlockPool$Allocator.getIntBlock()", "public int[] getIntBlock()"], ["org.apache.lucene.util.IntBlockPool$DirectAllocator", "org.apache.lucene.util.IntBlockPool$DirectAllocator()", "public org.apache.lucene.util.IntBlockPool$DirectAllocator()"], ["void", "org.apache.lucene.util.IntBlockPool$DirectAllocator.recycleIntBlocks(int[][], int, int)", "public void recycleIntBlocks(int[][], int, int)"], ["org.apache.lucene.util.IntBlockPool$SliceReader", "org.apache.lucene.util.IntBlockPool$SliceReader(org.apache.lucene.util.IntBlockPool)", "public org.apache.lucene.util.IntBlockPool$SliceReader(org.apache.lucene.util.IntBlockPool)"], ["void", "org.apache.lucene.util.IntBlockPool$SliceReader.reset(int, int)", "public void reset(int, int)"], ["boolean", "org.apache.lucene.util.IntBlockPool$SliceReader.endOfSlice()", "public boolean endOfSlice()"], ["int", "org.apache.lucene.util.IntBlockPool$SliceReader.readInt()", "public int readInt()"], ["org.apache.lucene.util.IntBlockPool$SliceWriter", "org.apache.lucene.util.IntBlockPool$SliceWriter(org.apache.lucene.util.IntBlockPool)", "public org.apache.lucene.util.IntBlockPool$SliceWriter(org.apache.lucene.util.IntBlockPool)"], ["void", "org.apache.lucene.util.IntBlockPool$SliceWriter.reset(int)", "public void reset(int)"], ["void", "org.apache.lucene.util.IntBlockPool$SliceWriter.writeInt(int)", "public void writeInt(int)"], ["int", "org.apache.lucene.util.IntBlockPool$SliceWriter.startNewSlice()", "public int startNewSlice()"], ["int", "org.apache.lucene.util.IntBlockPool$SliceWriter.getCurrentOffset()", "public int getCurrentOffset()"], ["org.apache.lucene.util.IntBlockPool", "org.apache.lucene.util.IntBlockPool()", "public org.apache.lucene.util.IntBlockPool()"], ["org.apache.lucene.util.IntBlockPool", "org.apache.lucene.util.IntBlockPool(org.apache.lucene.util.IntBlockPool$Allocator)", "public org.apache.lucene.util.IntBlockPool(org.apache.lucene.util.IntBlockPool$Allocator)"], ["void", "org.apache.lucene.util.IntBlockPool.reset()", "public void reset()"], ["void", "org.apache.lucene.util.IntBlockPool.reset(boolean, boolean)", "public void reset(boolean, boolean)"], ["void", "org.apache.lucene.util.IntBlockPool.nextBuffer()", "public void nextBuffer()"], ["void", "org.apache.lucene.util.IntroSelector$1.sort(int, int)", "public void sort(int, int)"], ["org.apache.lucene.util.IntroSelector", "org.apache.lucene.util.IntroSelector()", "public org.apache.lucene.util.IntroSelector()"], ["void", "org.apache.lucene.util.IntroSelector.select(int, int, int)", "public final void select(int, int, int)"], ["org.apache.lucene.util.IntroSorter", "org.apache.lucene.util.IntroSorter()", "public org.apache.lucene.util.IntroSorter()"], ["void", "org.apache.lucene.util.IntroSorter.sort(int, int)", "public final void sort(int, int)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef()", "public org.apache.lucene.util.IntsRef()"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef(int)", "public org.apache.lucene.util.IntsRef(int)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef(int[], int, int)", "public org.apache.lucene.util.IntsRef(int[], int, int)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef.clone()", "public org.apache.lucene.util.IntsRef clone()"], ["int", "org.apache.lucene.util.IntsRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.IntsRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.util.IntsRef.intsEquals(org.apache.lucene.util.IntsRef)", "public boolean intsEquals(org.apache.lucene.util.IntsRef)"], ["int", "org.apache.lucene.util.IntsRef.compareTo(org.apache.lucene.util.IntsRef)", "public int compareTo(org.apache.lucene.util.IntsRef)"], ["java.lang.String", "org.apache.lucene.util.IntsRef.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef.deepCopyOf(org.apache.lucene.util.IntsRef)", "public static org.apache.lucene.util.IntsRef deepCopyOf(org.apache.lucene.util.IntsRef)"], ["boolean", "org.apache.lucene.util.IntsRef.isValid()", "public boolean isValid()"], ["java.lang.Object", "org.apache.lucene.util.IntsRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.IntsRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.IntsRefBuilder", "org.apache.lucene.util.IntsRefBuilder()", "public org.apache.lucene.util.IntsRefBuilder()"], ["int[]", "org.apache.lucene.util.IntsRefBuilder.ints()", "public int[] ints()"], ["int", "org.apache.lucene.util.IntsRefBuilder.length()", "public int length()"], ["void", "org.apache.lucene.util.IntsRefBuilder.setLength(int)", "public void setLength(int)"], ["void", "org.apache.lucene.util.IntsRefBuilder.clear()", "public void clear()"], ["int", "org.apache.lucene.util.IntsRefBuilder.intAt(int)", "public int intAt(int)"], ["void", "org.apache.lucene.util.IntsRefBuilder.setIntAt(int, int)", "public void setIntAt(int, int)"], ["void", "org.apache.lucene.util.IntsRefBuilder.append(int)", "public void append(int)"], ["void", "org.apache.lucene.util.IntsRefBuilder.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.util.IntsRefBuilder.copyInts(int[], int, int)", "public void copyInts(int[], int, int)"], ["void", "org.apache.lucene.util.IntsRefBuilder.copyInts(org.apache.lucene.util.IntsRef)", "public void copyInts(org.apache.lucene.util.IntsRef)"], ["void", "org.apache.lucene.util.IntsRefBuilder.copyUTF8Bytes(org.apache.lucene.util.BytesRef)", "public void copyUTF8Bytes(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRefBuilder.get()", "public org.apache.lucene.util.IntsRef get()"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRefBuilder.toIntsRef()", "public org.apache.lucene.util.IntsRef toIntsRef()"], ["boolean", "org.apache.lucene.util.IntsRefBuilder.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.IntsRefBuilder.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.LSBRadixSorter", "org.apache.lucene.util.LSBRadixSorter()", "public org.apache.lucene.util.LSBRadixSorter()"], ["void", "org.apache.lucene.util.LSBRadixSorter.sort(int, int[], int)", "public void sort(int, int[], int)"], ["org.apache.lucene.util.LongBitSet", "org.apache.lucene.util.LongBitSet.ensureCapacity(org.apache.lucene.util.LongBitSet, long)", "public static org.apache.lucene.util.LongBitSet ensureCapacity(org.apache.lucene.util.LongBitSet, long)"], ["int", "org.apache.lucene.util.LongBitSet.bits2words(long)", "public static int bits2words(long)"], ["org.apache.lucene.util.LongBitSet", "org.apache.lucene.util.LongBitSet(long)", "public org.apache.lucene.util.LongBitSet(long)"], ["org.apache.lucene.util.LongBitSet", "org.apache.lucene.util.LongBitSet(long[], long)", "public org.apache.lucene.util.LongBitSet(long[], long)"], ["long", "org.apache.lucene.util.LongBitSet.length()", "public long length()"], ["long[]", "org.apache.lucene.util.LongBitSet.getBits()", "public long[] getBits()"], ["long", "org.apache.lucene.util.LongBitSet.cardinality()", "public long cardinality()"], ["boolean", "org.apache.lucene.util.LongBitSet.get(long)", "public boolean get(long)"], ["void", "org.apache.lucene.util.LongBitSet.set(long)", "public void set(long)"], ["boolean", "org.apache.lucene.util.LongBitSet.getAndSet(long)", "public boolean getAndSet(long)"], ["void", "org.apache.lucene.util.LongBitSet.clear(long)", "public void clear(long)"], ["boolean", "org.apache.lucene.util.LongBitSet.getAndClear(long)", "public boolean getAndClear(long)"], ["long", "org.apache.lucene.util.LongBitSet.nextSetBit(long)", "public long nextSetBit(long)"], ["long", "org.apache.lucene.util.LongBitSet.prevSetBit(long)", "public long prevSetBit(long)"], ["void", "org.apache.lucene.util.LongBitSet.or(org.apache.lucene.util.LongBitSet)", "public void or(org.apache.lucene.util.LongBitSet)"], ["void", "org.apache.lucene.util.LongBitSet.xor(org.apache.lucene.util.LongBitSet)", "public void xor(org.apache.lucene.util.LongBitSet)"], ["boolean", "org.apache.lucene.util.LongBitSet.intersects(org.apache.lucene.util.LongBitSet)", "public boolean intersects(org.apache.lucene.util.LongBitSet)"], ["void", "org.apache.lucene.util.LongBitSet.and(org.apache.lucene.util.LongBitSet)", "public void and(org.apache.lucene.util.LongBitSet)"], ["void", "org.apache.lucene.util.LongBitSet.andNot(org.apache.lucene.util.LongBitSet)", "public void andNot(org.apache.lucene.util.LongBitSet)"], ["boolean", "org.apache.lucene.util.LongBitSet.scanIsEmpty()", "public boolean scanIsEmpty()"], ["void", "org.apache.lucene.util.LongBitSet.flip(long, long)", "public void flip(long, long)"], ["void", "org.apache.lucene.util.LongBitSet.flip(long)", "public void flip(long)"], ["void", "org.apache.lucene.util.LongBitSet.set(long, long)", "public void set(long, long)"], ["void", "org.apache.lucene.util.LongBitSet.clear(long, long)", "public void clear(long, long)"], ["org.apache.lucene.util.LongBitSet", "org.apache.lucene.util.LongBitSet.clone()", "public org.apache.lucene.util.LongBitSet clone()"], ["boolean", "org.apache.lucene.util.LongBitSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.LongBitSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.apache.lucene.util.LongBitSet.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["long", "org.apache.lucene.util.LongValues$1.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.LongValues$2.get(long)", "public long get(long)"], ["org.apache.lucene.util.LongValues", "org.apache.lucene.util.LongValues()", "public org.apache.lucene.util.LongValues()"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef()", "public org.apache.lucene.util.LongsRef()"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef(int)", "public org.apache.lucene.util.LongsRef(int)"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef(long[], int, int)", "public org.apache.lucene.util.LongsRef(long[], int, int)"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef.clone()", "public org.apache.lucene.util.LongsRef clone()"], ["int", "org.apache.lucene.util.LongsRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.LongsRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.util.LongsRef.longsEquals(org.apache.lucene.util.LongsRef)", "public boolean longsEquals(org.apache.lucene.util.LongsRef)"], ["int", "org.apache.lucene.util.LongsRef.compareTo(org.apache.lucene.util.LongsRef)", "public int compareTo(org.apache.lucene.util.LongsRef)"], ["java.lang.String", "org.apache.lucene.util.LongsRef.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef.deepCopyOf(org.apache.lucene.util.LongsRef)", "public static org.apache.lucene.util.LongsRef deepCopyOf(org.apache.lucene.util.LongsRef)"], ["boolean", "org.apache.lucene.util.LongsRef.isValid()", "public boolean isValid()"], ["java.lang.Object", "org.apache.lucene.util.LongsRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.LongsRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["void", "org.apache.lucene.util.MSBRadixSorter.sort(int, int)", "public void sort(int, int)"], ["org.apache.lucene.util.MapOfSets", "org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)", "public org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)"], ["java.util.Map<K, java.util.Set<V>>", "org.apache.lucene.util.MapOfSets.getMap()", "public java.util.Map<K, java.util.Set<V>> getMap()"], ["int", "org.apache.lucene.util.MapOfSets.put(K, V)", "public int put(K, V)"], ["int", "org.apache.lucene.util.MapOfSets.putAll(K, java.util.Collection<? extends V>)", "public int putAll(K, java.util.Collection<? extends V>)"], ["int", "org.apache.lucene.util.MathUtil.log(long, int)", "public static int log(long, int)"], ["double", "org.apache.lucene.util.MathUtil.log(double, double)", "public static double log(double, double)"], ["long", "org.apache.lucene.util.MathUtil.gcd(long, long)", "public static long gcd(long, long)"], ["double", "org.apache.lucene.util.MathUtil.asinh(double)", "public static double asinh(double)"], ["double", "org.apache.lucene.util.MathUtil.acosh(double)", "public static double acosh(double)"], ["double", "org.apache.lucene.util.MathUtil.atanh(double)", "public static double atanh(double)"], ["org.apache.lucene.util.MergedIterator", "org.apache.lucene.util.MergedIterator(java.util.Iterator<T>...)", "public org.apache.lucene.util.MergedIterator(java.util.Iterator<T>...)"], ["org.apache.lucene.util.MergedIterator", "org.apache.lucene.util.MergedIterator(boolean, java.util.Iterator<T>...)", "public org.apache.lucene.util.MergedIterator(boolean, java.util.Iterator<T>...)"], ["boolean", "org.apache.lucene.util.MergedIterator.hasNext()", "public boolean hasNext()"], ["T", "org.apache.lucene.util.MergedIterator.next()", "public T next()"], ["void", "org.apache.lucene.util.MergedIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.util.MergedIterator.next()", "public java.lang.Object next()"], ["org.apache.lucene.util.NamedSPILoader", "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>)", "public org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>)"], ["org.apache.lucene.util.NamedSPILoader", "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>, java.lang.ClassLoader)", "public org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>, java.lang.ClassLoader)"], ["void", "org.apache.lucene.util.NamedSPILoader.reload(java.lang.ClassLoader)", "public void reload(java.lang.ClassLoader)"], ["void", "org.apache.lucene.util.NamedSPILoader.checkServiceName(java.lang.String)", "public static void checkServiceName(java.lang.String)"], ["S", "org.apache.lucene.util.NamedSPILoader.lookup(java.lang.String)", "public S lookup(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.util.NamedSPILoader.availableServices()", "public java.util.Set<java.lang.String> availableServices()"], ["java.util.Iterator<S>", "org.apache.lucene.util.NamedSPILoader.iterator()", "public java.util.Iterator<S> iterator()"], ["org.apache.lucene.util.NamedThreadFactory", "org.apache.lucene.util.NamedThreadFactory(java.lang.String)", "public org.apache.lucene.util.NamedThreadFactory(java.lang.String)"], ["java.lang.Thread", "org.apache.lucene.util.NamedThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["boolean", "org.apache.lucene.util.NotDocIdSet$1.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.util.NotDocIdSet$1.length()", "public int length()"], ["int", "org.apache.lucene.util.NotDocIdSet$2.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.util.NotDocIdSet$2.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.util.NotDocIdSet$2.docID()", "public int docID()"], ["long", "org.apache.lucene.util.NotDocIdSet$2.cost()", "public long cost()"], ["org.apache.lucene.util.NotDocIdSet", "org.apache.lucene.util.NotDocIdSet(int, org.apache.lucene.search.DocIdSet)", "public org.apache.lucene.util.NotDocIdSet(int, org.apache.lucene.search.DocIdSet)"], ["org.apache.lucene.util.Bits", "org.apache.lucene.util.NotDocIdSet.bits()", "public org.apache.lucene.util.Bits bits() throws java.io.IOException"], ["long", "org.apache.lucene.util.NotDocIdSet.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.NotDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["long", "org.apache.lucene.util.NumericUtils.doubleToSortableLong(double)", "public static long doubleToSortableLong(double)"], ["double", "org.apache.lucene.util.NumericUtils.sortableLongToDouble(long)", "public static double sortableLongToDouble(long)"], ["int", "org.apache.lucene.util.NumericUtils.floatToSortableInt(float)", "public static int floatToSortableInt(float)"], ["float", "org.apache.lucene.util.NumericUtils.sortableIntToFloat(int)", "public static float sortableIntToFloat(int)"], ["long", "org.apache.lucene.util.NumericUtils.sortableDoubleBits(long)", "public static long sortableDoubleBits(long)"], ["int", "org.apache.lucene.util.NumericUtils.sortableFloatBits(int)", "public static int sortableFloatBits(int)"], ["void", "org.apache.lucene.util.NumericUtils.subtract(int, int, byte[], byte[], byte[])", "public static void subtract(int, int, byte[], byte[], byte[])"], ["void", "org.apache.lucene.util.NumericUtils.add(int, int, byte[], byte[], byte[])", "public static void add(int, int, byte[], byte[], byte[])"], ["void", "org.apache.lucene.util.NumericUtils.intToSortableBytes(int, byte[], int)", "public static void intToSortableBytes(int, byte[], int)"], ["int", "org.apache.lucene.util.NumericUtils.sortableBytesToInt(byte[], int)", "public static int sortableBytesToInt(byte[], int)"], ["void", "org.apache.lucene.util.NumericUtils.longToSortableBytes(long, byte[], int)", "public static void longToSortableBytes(long, byte[], int)"], ["long", "org.apache.lucene.util.NumericUtils.sortableBytesToLong(byte[], int)", "public static long sortableBytesToLong(byte[], int)"], ["void", "org.apache.lucene.util.NumericUtils.bigIntToSortableBytes(java.math.BigInteger, int, byte[], int)", "public static void bigIntToSortableBytes(java.math.BigInteger, int, byte[], int)"], ["java.math.BigInteger", "org.apache.lucene.util.NumericUtils.sortableBytesToBigInt(byte[], int, int)", "public static java.math.BigInteger sortableBytesToBigInt(byte[], int, int)"], ["org.apache.lucene.util.OfflineSorter$BufferSize", "org.apache.lucene.util.OfflineSorter$BufferSize.megabytes(long)", "public static org.apache.lucene.util.OfflineSorter$BufferSize megabytes(long)"], ["org.apache.lucene.util.OfflineSorter$BufferSize", "org.apache.lucene.util.OfflineSorter$BufferSize.automatic()", "public static org.apache.lucene.util.OfflineSorter$BufferSize automatic()"], ["org.apache.lucene.util.OfflineSorter$ByteSequencesReader", "org.apache.lucene.util.OfflineSorter$ByteSequencesReader(org.apache.lucene.store.ChecksumIndexInput, java.lang.String)", "public org.apache.lucene.util.OfflineSorter$ByteSequencesReader(org.apache.lucene.store.ChecksumIndexInput, java.lang.String)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.OfflineSorter$ByteSequencesReader.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["void", "org.apache.lucene.util.OfflineSorter$ByteSequencesReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.util.OfflineSorter$ByteSequencesWriter", "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter(org.apache.lucene.store.IndexOutput)", "public org.apache.lucene.util.OfflineSorter$ByteSequencesWriter(org.apache.lucene.store.IndexOutput)"], ["void", "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.write(org.apache.lucene.util.BytesRef)", "public final void write(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.write(byte[])", "public final void write(byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.util.OfflineSorter$MergePartitionsTask", "org.apache.lucene.util.OfflineSorter$MergePartitionsTask(org.apache.lucene.store.Directory, java.util.List<java.util.concurrent.Future<org.apache.lucene.util.OfflineSorter$Partition>>)", "public org.apache.lucene.util.OfflineSorter$MergePartitionsTask(org.apache.lucene.store.Directory, java.util.List<java.util.concurrent.Future<org.apache.lucene.util.OfflineSorter$Partition>>)"], ["org.apache.lucene.util.OfflineSorter$Partition", "org.apache.lucene.util.OfflineSorter$MergePartitionsTask.call()", "public org.apache.lucene.util.OfflineSorter$Partition call() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.OfflineSorter$MergePartitionsTask.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.lucene.util.OfflineSorter$Partition", "org.apache.lucene.util.OfflineSorter$Partition(org.apache.lucene.util.SortableBytesRefArray, boolean)", "public org.apache.lucene.util.OfflineSorter$Partition(org.apache.lucene.util.SortableBytesRefArray, boolean)"], ["org.apache.lucene.util.OfflineSorter$Partition", "org.apache.lucene.util.OfflineSorter$Partition(java.lang.String, long)", "public org.apache.lucene.util.OfflineSorter$Partition(java.lang.String, long)"], ["org.apache.lucene.util.OfflineSorter$SortInfo", "org.apache.lucene.util.OfflineSorter$SortInfo(org.apache.lucene.util.OfflineSorter)", "public org.apache.lucene.util.OfflineSorter$SortInfo(org.apache.lucene.util.OfflineSorter)"], ["java.lang.String", "org.apache.lucene.util.OfflineSorter$SortInfo.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.OfflineSorter$SortPartitionTask", "org.apache.lucene.util.OfflineSorter$SortPartitionTask(org.apache.lucene.util.OfflineSorter, org.apache.lucene.store.Directory, org.apache.lucene.util.OfflineSorter$Partition)", "public org.apache.lucene.util.OfflineSorter$SortPartitionTask(org.apache.lucene.util.OfflineSorter, org.apache.lucene.store.Directory, org.apache.lucene.util.OfflineSorter$Partition)"], ["org.apache.lucene.util.OfflineSorter$Partition", "org.apache.lucene.util.OfflineSorter$SortPartitionTask.call()", "public org.apache.lucene.util.OfflineSorter$Partition call() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.OfflineSorter$SortPartitionTask.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.lucene.util.OfflineSorter", "org.apache.lucene.util.OfflineSorter(org.apache.lucene.store.Directory, java.lang.String)", "public org.apache.lucene.util.OfflineSorter(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.util.OfflineSorter", "org.apache.lucene.util.OfflineSorter(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public org.apache.lucene.util.OfflineSorter(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>) throws java.io.IOException"], ["org.apache.lucene.util.OfflineSorter", "org.apache.lucene.util.OfflineSorter(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.OfflineSorter$BufferSize, int, int, java.util.concurrent.ExecutorService, int)", "public org.apache.lucene.util.OfflineSorter(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.OfflineSorter$BufferSize, int, int, java.util.concurrent.ExecutorService, int)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.util.OfflineSorter.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["java.lang.String", "org.apache.lucene.util.OfflineSorter.getTempFileNamePrefix()", "public java.lang.String getTempFileNamePrefix()"], ["java.lang.String", "org.apache.lucene.util.OfflineSorter.sort(java.lang.String)", "public java.lang.String sort(java.lang.String) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.util.OfflineSorter.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataInput", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()", "public org.apache.lucene.util.PagedBytes$PagedBytesDataInput clone()"], ["long", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.setPosition(long)", "public void setPosition(long)"], ["byte", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataOutput", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput(org.apache.lucene.util.PagedBytes)", "public org.apache.lucene.util.PagedBytes$PagedBytesDataOutput(org.apache.lucene.util.PagedBytes)"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["long", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.PagedBytes$Reader.fillSlice(org.apache.lucene.util.BytesRef, long, int)", "public void fillSlice(org.apache.lucene.util.BytesRef, long, int)"], ["void", "org.apache.lucene.util.PagedBytes$Reader.fill(org.apache.lucene.util.BytesRef, long)", "public void fill(org.apache.lucene.util.BytesRef, long)"], ["long", "org.apache.lucene.util.PagedBytes$Reader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.PagedBytes$Reader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.PagedBytes", "org.apache.lucene.util.PagedBytes(int)", "public org.apache.lucene.util.PagedBytes(int)"], ["void", "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.store.IndexInput, long)", "public void copy(org.apache.lucene.store.IndexInput, long) throws java.io.IOException"], ["void", "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public void copy(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.PagedBytes$Reader", "org.apache.lucene.util.PagedBytes.freeze(boolean)", "public org.apache.lucene.util.PagedBytes$Reader freeze(boolean)"], ["long", "org.apache.lucene.util.PagedBytes.getPointer()", "public long getPointer()"], ["long", "org.apache.lucene.util.PagedBytes.ramBytesUsed()", "public long ramBytesUsed()"], ["long", "org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(org.apache.lucene.util.BytesRef)", "public long copyUsingLengthPrefix(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataInput", "org.apache.lucene.util.PagedBytes.getDataInput()", "public org.apache.lucene.util.PagedBytes$PagedBytesDataInput getDataInput()"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataOutput", "org.apache.lucene.util.PagedBytes.getDataOutput()", "public org.apache.lucene.util.PagedBytes$PagedBytesDataOutput getDataOutput()"], ["org.apache.lucene.util.PrintStreamInfoStream", "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream)", "public org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream)"], ["org.apache.lucene.util.PrintStreamInfoStream", "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream, int)", "public org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream, int)"], ["void", "org.apache.lucene.util.PrintStreamInfoStream.message(java.lang.String, java.lang.String)", "public void message(java.lang.String, java.lang.String)"], ["boolean", "org.apache.lucene.util.PrintStreamInfoStream.isEnabled(java.lang.String)", "public boolean isEnabled(java.lang.String)"], ["void", "org.apache.lucene.util.PrintStreamInfoStream.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.lucene.util.PrintStreamInfoStream.isSystemStream()", "public boolean isSystemStream()"], ["boolean", "org.apache.lucene.util.PriorityQueue$1.hasNext()", "public boolean hasNext()"], ["T", "org.apache.lucene.util.PriorityQueue$1.next()", "public T next()"], ["org.apache.lucene.util.PriorityQueue", "org.apache.lucene.util.PriorityQueue(int)", "public org.apache.lucene.util.PriorityQueue(int)"], ["org.apache.lucene.util.PriorityQueue", "org.apache.lucene.util.PriorityQueue(int, boolean)", "public org.apache.lucene.util.PriorityQueue(int, boolean)"], ["T", "org.apache.lucene.util.PriorityQueue.add(T)", "public final T add(T)"], ["T", "org.apache.lucene.util.PriorityQueue.insertWithOverflow(T)", "public T insertWithOverflow(T)"], ["T", "org.apache.lucene.util.PriorityQueue.top()", "public final T top()"], ["T", "org.apache.lucene.util.PriorityQueue.pop()", "public final T pop()"], ["T", "org.apache.lucene.util.PriorityQueue.updateTop()", "public final T updateTop()"], ["T", "org.apache.lucene.util.PriorityQueue.updateTop(T)", "public final T updateTop(T)"], ["int", "org.apache.lucene.util.PriorityQueue.size()", "public final int size()"], ["void", "org.apache.lucene.util.PriorityQueue.clear()", "public final void clear()"], ["boolean", "org.apache.lucene.util.PriorityQueue.remove(T)", "public final boolean remove(T)"], ["java.util.Iterator<T>", "org.apache.lucene.util.PriorityQueue.iterator()", "public java.util.Iterator<T> iterator()"], ["boolean", "org.apache.lucene.util.QueryBuilder$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.search.Query", "org.apache.lucene.util.QueryBuilder$1.next()", "public org.apache.lucene.search.Query next()"], ["java.lang.Object", "org.apache.lucene.util.QueryBuilder$1.next()", "public java.lang.Object next()"], ["org.apache.lucene.util.QueryBuilder", "org.apache.lucene.util.QueryBuilder(org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.util.QueryBuilder(org.apache.lucene.analysis.Analyzer)"], ["org.apache.lucene.search.Query", "org.apache.lucene.util.QueryBuilder.createBooleanQuery(java.lang.String, java.lang.String)", "public org.apache.lucene.search.Query createBooleanQuery(java.lang.String, java.lang.String)"], ["org.apache.lucene.search.Query", "org.apache.lucene.util.QueryBuilder.createBooleanQuery(java.lang.String, java.lang.String, org.apache.lucene.search.BooleanClause$Occur)", "public org.apache.lucene.search.Query createBooleanQuery(java.lang.String, java.lang.String, org.apache.lucene.search.BooleanClause$Occur)"], ["org.apache.lucene.search.Query", "org.apache.lucene.util.QueryBuilder.createPhraseQuery(java.lang.String, java.lang.String)", "public org.apache.lucene.search.Query createPhraseQuery(java.lang.String, java.lang.String)"], ["org.apache.lucene.search.Query", "org.apache.lucene.util.QueryBuilder.createPhraseQuery(java.lang.String, java.lang.String, int)", "public org.apache.lucene.search.Query createPhraseQuery(java.lang.String, java.lang.String, int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.util.QueryBuilder.createMinShouldMatchQuery(java.lang.String, java.lang.String, float)", "public org.apache.lucene.search.Query createMinShouldMatchQuery(java.lang.String, java.lang.String, float)"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.util.QueryBuilder.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["void", "org.apache.lucene.util.QueryBuilder.setAnalyzer(org.apache.lucene.analysis.Analyzer)", "public void setAnalyzer(org.apache.lucene.analysis.Analyzer)"], ["boolean", "org.apache.lucene.util.QueryBuilder.getEnablePositionIncrements()", "public boolean getEnablePositionIncrements()"], ["void", "org.apache.lucene.util.QueryBuilder.setEnablePositionIncrements(boolean)", "public void setEnablePositionIncrements(boolean)"], ["boolean", "org.apache.lucene.util.QueryBuilder.getAutoGenerateMultiTermSynonymsPhraseQuery()", "public boolean getAutoGenerateMultiTermSynonymsPhraseQuery()"], ["void", "org.apache.lucene.util.QueryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(boolean)", "public void setAutoGenerateMultiTermSynonymsPhraseQuery(boolean)"], ["void", "org.apache.lucene.util.QueryBuilder.setEnableGraphQueries(boolean)", "public void setEnableGraphQueries(boolean)"], ["boolean", "org.apache.lucene.util.QueryBuilder.getEnableGraphQueries()", "public boolean getEnableGraphQueries()"], ["void", "org.apache.lucene.util.RadixSelector.select(int, int, int)", "public void select(int, int, int)"], ["java.lang.reflect.Field[]", "org.apache.lucene.util.RamUsageEstimator$1.run()", "public java.lang.reflect.Field[] run()"], ["java.lang.Object", "org.apache.lucene.util.RamUsageEstimator$1.run()", "public java.lang.Object run()"], ["long", "org.apache.lucene.util.RamUsageEstimator.alignObjectSize(long)", "public static long alignObjectSize(long)"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(java.lang.Long)", "public static long sizeOf(java.lang.Long)"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(byte[])", "public static long sizeOf(byte[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(boolean[])", "public static long sizeOf(boolean[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(char[])", "public static long sizeOf(char[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(short[])", "public static long sizeOf(short[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(int[])", "public static long sizeOf(int[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(float[])", "public static long sizeOf(float[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(long[])", "public static long sizeOf(long[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(double[])", "public static long sizeOf(double[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(java.lang.Object[])", "public static long shallowSizeOf(java.lang.Object[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(java.lang.Object)", "public static long shallowSizeOf(java.lang.Object)"], ["long", "org.apache.lucene.util.RamUsageEstimator.shallowSizeOfInstance(java.lang.Class<?>)", "public static long shallowSizeOfInstance(java.lang.Class<?>)"], ["java.lang.String", "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long)", "public static java.lang.String humanReadableUnits(long)"], ["java.lang.String", "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long, java.text.DecimalFormat)", "public static java.lang.String humanReadableUnits(long, java.text.DecimalFormat)"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(org.apache.lucene.util.Accountable[])", "public static long sizeOf(org.apache.lucene.util.Accountable[])"], ["org.apache.lucene.util.RecyclingByteBlockAllocator", "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int, org.apache.lucene.util.Counter)", "public org.apache.lucene.util.RecyclingByteBlockAllocator(int, int, org.apache.lucene.util.Counter)"], ["org.apache.lucene.util.RecyclingByteBlockAllocator", "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int)", "public org.apache.lucene.util.RecyclingByteBlockAllocator(int, int)"], ["org.apache.lucene.util.RecyclingByteBlockAllocator", "org.apache.lucene.util.RecyclingByteBlockAllocator()", "public org.apache.lucene.util.RecyclingByteBlockAllocator()"], ["byte[]", "org.apache.lucene.util.RecyclingByteBlockAllocator.getByteBlock()", "public byte[] getByteBlock()"], ["void", "org.apache.lucene.util.RecyclingByteBlockAllocator.recycleByteBlocks(byte[][], int, int)", "public void recycleByteBlocks(byte[][], int, int)"], ["int", "org.apache.lucene.util.RecyclingByteBlockAllocator.numBufferedBlocks()", "public int numBufferedBlocks()"], ["long", "org.apache.lucene.util.RecyclingByteBlockAllocator.bytesUsed()", "public long bytesUsed()"], ["int", "org.apache.lucene.util.RecyclingByteBlockAllocator.maxBufferedBlocks()", "public int maxBufferedBlocks()"], ["int", "org.apache.lucene.util.RecyclingByteBlockAllocator.freeBlocks(int)", "public int freeBlocks(int)"], ["org.apache.lucene.util.RecyclingIntBlockAllocator", "org.apache.lucene.util.RecyclingIntBlockAllocator(int, int, org.apache.lucene.util.Counter)", "public org.apache.lucene.util.RecyclingIntBlockAllocator(int, int, org.apache.lucene.util.Counter)"], ["org.apache.lucene.util.RecyclingIntBlockAllocator", "org.apache.lucene.util.RecyclingIntBlockAllocator(int, int)", "public org.apache.lucene.util.RecyclingIntBlockAllocator(int, int)"], ["org.apache.lucene.util.RecyclingIntBlockAllocator", "org.apache.lucene.util.RecyclingIntBlockAllocator()", "public org.apache.lucene.util.RecyclingIntBlockAllocator()"], ["int[]", "org.apache.lucene.util.RecyclingIntBlockAllocator.getIntBlock()", "public int[] getIntBlock()"], ["void", "org.apache.lucene.util.RecyclingIntBlockAllocator.recycleIntBlocks(int[][], int, int)", "public void recycleIntBlocks(int[][], int, int)"], ["int", "org.apache.lucene.util.RecyclingIntBlockAllocator.numBufferedBlocks()", "public int numBufferedBlocks()"], ["long", "org.apache.lucene.util.RecyclingIntBlockAllocator.bytesUsed()", "public long bytesUsed()"], ["int", "org.apache.lucene.util.RecyclingIntBlockAllocator.maxBufferedBlocks()", "public int maxBufferedBlocks()"], ["int", "org.apache.lucene.util.RecyclingIntBlockAllocator.freeBlocks(int)", "public int freeBlocks(int)"], ["org.apache.lucene.util.RefCount", "org.apache.lucene.util.RefCount(T)", "public org.apache.lucene.util.RefCount(T)"], ["void", "org.apache.lucene.util.RefCount.decRef()", "public final void decRef() throws java.io.IOException"], ["T", "org.apache.lucene.util.RefCount.get()", "public final T get()"], ["int", "org.apache.lucene.util.RefCount.getRefCount()", "public final int getRefCount()"], ["void", "org.apache.lucene.util.RefCount.incRef()", "public final void incRef()"], ["org.apache.lucene.util.RoaringDocIdSet$Builder", "org.apache.lucene.util.RoaringDocIdSet$Builder(int)", "public org.apache.lucene.util.RoaringDocIdSet$Builder(int)"], ["org.apache.lucene.util.RoaringDocIdSet$Builder", "org.apache.lucene.util.RoaringDocIdSet$Builder.add(int)", "public org.apache.lucene.util.RoaringDocIdSet$Builder add(int)"], ["org.apache.lucene.util.RoaringDocIdSet$Builder", "org.apache.lucene.util.RoaringDocIdSet$Builder.add(org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.util.RoaringDocIdSet$Builder add(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["org.apache.lucene.util.RoaringDocIdSet", "org.apache.lucene.util.RoaringDocIdSet$Builder.build()", "public org.apache.lucene.util.RoaringDocIdSet build()"], ["int", "org.apache.lucene.util.RoaringDocIdSet$Iterator.docID()", "public int docID()"], ["int", "org.apache.lucene.util.RoaringDocIdSet$Iterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.util.RoaringDocIdSet$Iterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.util.RoaringDocIdSet$Iterator.cost()", "public long cost()"], ["int", "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.docID()", "public int docID()"], ["long", "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.cost()", "public long cost()"], ["int", "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["long", "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["long", "org.apache.lucene.util.RoaringDocIdSet.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.RoaringDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["int", "org.apache.lucene.util.RoaringDocIdSet.cardinality()", "public int cardinality()"], ["java.lang.String", "org.apache.lucene.util.RoaringDocIdSet.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.RollingBuffer", "org.apache.lucene.util.RollingBuffer()", "public org.apache.lucene.util.RollingBuffer()"], ["void", "org.apache.lucene.util.RollingBuffer.reset()", "public void reset()"], ["T", "org.apache.lucene.util.RollingBuffer.get(int)", "public T get(int)"], ["int", "org.apache.lucene.util.RollingBuffer.getMaxPos()", "public int getMaxPos()"], ["int", "org.apache.lucene.util.RollingBuffer.getBufferSize()", "public int getBufferSize()"], ["void", "org.apache.lucene.util.RollingBuffer.freeBefore(int)", "public void freeBefore(int)"], ["<S> org.apache.lucene.util.SPIClassIterator<S>", "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>)", "public static <S> org.apache.lucene.util.SPIClassIterator<S> get(java.lang.Class<S>)"], ["<S> org.apache.lucene.util.SPIClassIterator<S>", "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>, java.lang.ClassLoader)", "public static <S> org.apache.lucene.util.SPIClassIterator<S> get(java.lang.Class<S>, java.lang.ClassLoader)"], ["boolean", "org.apache.lucene.util.SPIClassIterator.isParentClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)", "public static boolean isParentClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)"], ["boolean", "org.apache.lucene.util.SPIClassIterator.hasNext()", "public boolean hasNext()"], ["java.lang.Class<? extends S>", "org.apache.lucene.util.SPIClassIterator.next()", "public java.lang.Class<? extends S> next()"], ["void", "org.apache.lucene.util.SPIClassIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.util.SPIClassIterator.next()", "public java.lang.Object next()"], ["org.apache.lucene.util.SameThreadExecutorService", "org.apache.lucene.util.SameThreadExecutorService()", "public org.apache.lucene.util.SameThreadExecutorService()"], ["void", "org.apache.lucene.util.SameThreadExecutorService.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["java.util.List<java.lang.Runnable>", "org.apache.lucene.util.SameThreadExecutorService.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["void", "org.apache.lucene.util.SameThreadExecutorService.shutdown()", "public void shutdown()"], ["boolean", "org.apache.lucene.util.SameThreadExecutorService.isTerminated()", "public boolean isTerminated()"], ["boolean", "org.apache.lucene.util.SameThreadExecutorService.isShutdown()", "public boolean isShutdown()"], ["boolean", "org.apache.lucene.util.SameThreadExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["org.apache.lucene.util.Selector", "org.apache.lucene.util.Selector()", "public org.apache.lucene.util.Selector()"], ["org.apache.lucene.util.SentinelIntSet", "org.apache.lucene.util.SentinelIntSet(int, int)", "public org.apache.lucene.util.SentinelIntSet(int, int)"], ["void", "org.apache.lucene.util.SentinelIntSet.clear()", "public void clear()"], ["int", "org.apache.lucene.util.SentinelIntSet.hash(int)", "public int hash(int)"], ["int", "org.apache.lucene.util.SentinelIntSet.size()", "public int size()"], ["int", "org.apache.lucene.util.SentinelIntSet.getSlot(int)", "public int getSlot(int)"], ["int", "org.apache.lucene.util.SentinelIntSet.find(int)", "public int find(int)"], ["boolean", "org.apache.lucene.util.SentinelIntSet.exists(int)", "public boolean exists(int)"], ["int", "org.apache.lucene.util.SentinelIntSet.put(int)", "public int put(int)"], ["void", "org.apache.lucene.util.SentinelIntSet.rehash()", "public void rehash()"], ["long", "org.apache.lucene.util.SentinelIntSet.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.SetOnce$AlreadySetException", "org.apache.lucene.util.SetOnce$AlreadySetException()", "public org.apache.lucene.util.SetOnce$AlreadySetException()"], ["org.apache.lucene.util.SetOnce", "org.apache.lucene.util.SetOnce()", "public org.apache.lucene.util.SetOnce()"], ["org.apache.lucene.util.SetOnce", "org.apache.lucene.util.SetOnce(T)", "public org.apache.lucene.util.SetOnce(T)"], ["void", "org.apache.lucene.util.SetOnce.set(T)", "public final void set(T)"], ["T", "org.apache.lucene.util.SetOnce.get()", "public final T get()"], ["org.apache.lucene.util.SloppyMath", "org.apache.lucene.util.SloppyMath()", "public org.apache.lucene.util.SloppyMath()"], ["double", "org.apache.lucene.util.SloppyMath.haversinMeters(double, double, double, double)", "public static double haversinMeters(double, double, double, double)"], ["double", "org.apache.lucene.util.SloppyMath.haversinMeters(double)", "public static double haversinMeters(double)"], ["double", "org.apache.lucene.util.SloppyMath.haversinKilometers(double, double, double, double)", "public static double haversinKilometers(double, double, double, double)"], ["double", "org.apache.lucene.util.SloppyMath.haversinSortKey(double, double, double, double)", "public static double haversinSortKey(double, double, double, double)"], ["double", "org.apache.lucene.util.SloppyMath.cos(double)", "public static double cos(double)"], ["double", "org.apache.lucene.util.SloppyMath.asin(double)", "public static double asin(double)"], ["double", "org.apache.lucene.util.SloppyMath.toDegrees(double)", "public static double toDegrees(double)"], ["double", "org.apache.lucene.util.SloppyMath.toRadians(double)", "public static double toRadians(double)"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte(float, int, int)", "public static byte floatToByte(float, int, int)"], ["float", "org.apache.lucene.util.SmallFloat.byteToFloat(byte, int, int)", "public static float byteToFloat(byte, int, int)"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte315(float)", "public static byte floatToByte315(float)"], ["float", "org.apache.lucene.util.SmallFloat.byte315ToFloat(byte)", "public static float byte315ToFloat(byte)"], ["int", "org.apache.lucene.util.SmallFloat.longToInt4(long)", "public static int longToInt4(long)"], ["long", "org.apache.lucene.util.SmallFloat.int4ToLong(int)", "public static final long int4ToLong(int)"], ["byte", "org.apache.lucene.util.SmallFloat.intToByte4(int)", "public static byte intToByte4(int)"], ["int", "org.apache.lucene.util.SmallFloat.byte4ToInt(byte)", "public static int byte4ToInt(byte)"], ["org.apache.lucene.util.SparseFixedBitSet", "org.apache.lucene.util.SparseFixedBitSet(int)", "public org.apache.lucene.util.SparseFixedBitSet(int)"], ["int", "org.apache.lucene.util.SparseFixedBitSet.length()", "public int length()"], ["int", "org.apache.lucene.util.SparseFixedBitSet.cardinality()", "public int cardinality()"], ["int", "org.apache.lucene.util.SparseFixedBitSet.approximateCardinality()", "public int approximateCardinality()"], ["boolean", "org.apache.lucene.util.SparseFixedBitSet.get(int)", "public boolean get(int)"], ["void", "org.apache.lucene.util.SparseFixedBitSet.set(int)", "public void set(int)"], ["void", "org.apache.lucene.util.SparseFixedBitSet.clear(int)", "public void clear(int)"], ["void", "org.apache.lucene.util.SparseFixedBitSet.clear(int, int)", "public void clear(int, int)"], ["int", "org.apache.lucene.util.SparseFixedBitSet.nextSetBit(int)", "public int nextSetBit(int)"], ["int", "org.apache.lucene.util.SparseFixedBitSet.prevSetBit(int)", "public int prevSetBit(int)"], ["void", "org.apache.lucene.util.SparseFixedBitSet.or(org.apache.lucene.search.DocIdSetIterator)", "public void or(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["long", "org.apache.lucene.util.SparseFixedBitSet.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.SparseFixedBitSet.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.StrictStringTokenizer", "org.apache.lucene.util.StrictStringTokenizer(java.lang.String, char)", "public org.apache.lucene.util.StrictStringTokenizer(java.lang.String, char)"], ["java.lang.String", "org.apache.lucene.util.StrictStringTokenizer.nextToken()", "public final java.lang.String nextToken()"], ["boolean", "org.apache.lucene.util.StrictStringTokenizer.hasMoreTokens()", "public final boolean hasMoreTokens()"], ["int", "org.apache.lucene.util.StringHelper.bytesDifference(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static int bytesDifference(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.StringHelper.sortKeyLength(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static int sortKeyLength(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.util.StringHelper.startsWith(byte[], org.apache.lucene.util.BytesRef)", "public static boolean startsWith(byte[], org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.util.StringHelper.startsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static boolean startsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.util.StringHelper.endsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static boolean endsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.StringHelper.murmurhash3_x86_32(byte[], int, int, int)", "public static int murmurhash3_x86_32(byte[], int, int, int)"], ["int", "org.apache.lucene.util.StringHelper.murmurhash3_x86_32(org.apache.lucene.util.BytesRef, int)", "public static int murmurhash3_x86_32(org.apache.lucene.util.BytesRef, int)"], ["byte[]", "org.apache.lucene.util.StringHelper.randomId()", "public static byte[] randomId()"], ["java.lang.String", "org.apache.lucene.util.StringHelper.idToString(byte[])", "public static java.lang.String idToString(byte[])"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.StringHelper.intsRefToBytesRef(org.apache.lucene.util.IntsRef)", "public static org.apache.lucene.util.BytesRef intsRefToBytesRef(org.apache.lucene.util.IntsRef)"], ["int", "org.apache.lucene.util.StringHelper.compare(int, byte[], int, byte[], int)", "public static int compare(int, byte[], int, byte[], int)"], ["org.apache.lucene.util.ThreadInterruptedException", "org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)", "public org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)"], ["void", "org.apache.lucene.util.TimSorter.sort(int, int)", "public void sort(int, int)"], ["void", "org.apache.lucene.util.ToStringUtils.byteArray(java.lang.StringBuilder, byte[])", "public static void byteArray(java.lang.StringBuilder, byte[])"], ["java.lang.String", "org.apache.lucene.util.ToStringUtils.longHex(long)", "public static java.lang.String longHex(long)"], ["int", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[], int, int, byte[])", "public static int UTF16toUTF8(char[], int, int, byte[])"], ["int", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(java.lang.CharSequence, int, int, byte[])", "public static int UTF16toUTF8(java.lang.CharSequence, int, int, byte[])"], ["int", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(java.lang.CharSequence, int, int, byte[], int)", "public static int UTF16toUTF8(java.lang.CharSequence, int, int, byte[], int)"], ["int", "org.apache.lucene.util.UnicodeUtil.calcUTF16toUTF8Length(java.lang.CharSequence, int, int)", "public static int calcUTF16toUTF8Length(java.lang.CharSequence, int, int)"], ["boolean", "org.apache.lucene.util.UnicodeUtil.validUTF16String(java.lang.CharSequence)", "public static boolean validUTF16String(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.util.UnicodeUtil.validUTF16String(char[], int)", "public static boolean validUTF16String(char[], int)"], ["int", "org.apache.lucene.util.UnicodeUtil.codePointCount(org.apache.lucene.util.BytesRef)", "public static int codePointCount(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.UnicodeUtil.UTF8toUTF32(org.apache.lucene.util.BytesRef, int[])", "public static int UTF8toUTF32(org.apache.lucene.util.BytesRef, int[])"], ["java.lang.String", "org.apache.lucene.util.UnicodeUtil.newString(int[], int, int)", "public static java.lang.String newString(int[], int, int)"], ["java.lang.String", "org.apache.lucene.util.UnicodeUtil.toHexString(java.lang.String)", "public static java.lang.String toHexString(java.lang.String)"], ["int", "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[], int, int, char[])", "public static int UTF8toUTF16(byte[], int, int, char[])"], ["int", "org.apache.lucene.util.UnicodeUtil.maxUTF8Length(int)", "public static int maxUTF8Length(int)"], ["int", "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(org.apache.lucene.util.BytesRef, char[])", "public static int UTF8toUTF16(org.apache.lucene.util.BytesRef, char[])"], ["org.apache.lucene.util.Version", "org.apache.lucene.util.Version.parse(java.lang.String)", "public static org.apache.lucene.util.Version parse(java.lang.String) throws java.text.ParseException"], ["org.apache.lucene.util.Version", "org.apache.lucene.util.Version.parseLeniently(java.lang.String)", "public static org.apache.lucene.util.Version parseLeniently(java.lang.String) throws java.text.ParseException"], ["org.apache.lucene.util.Version", "org.apache.lucene.util.Version.fromBits(int, int, int)", "public static org.apache.lucene.util.Version fromBits(int, int, int)"], ["boolean", "org.apache.lucene.util.Version.onOrAfter(org.apache.lucene.util.Version)", "public boolean onOrAfter(org.apache.lucene.util.Version)"], ["java.lang.String", "org.apache.lucene.util.Version.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.util.Version.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.Version.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.VirtualMethod", "org.apache.lucene.util.VirtualMethod(java.lang.Class<C>, java.lang.String, java.lang.Class<?>...)", "public org.apache.lucene.util.VirtualMethod(java.lang.Class<C>, java.lang.String, java.lang.Class<?>...)"], ["int", "org.apache.lucene.util.VirtualMethod.getImplementationDistance(java.lang.Class<? extends C>)", "public int getImplementationDistance(java.lang.Class<? extends C>)"], ["boolean", "org.apache.lucene.util.VirtualMethod.isOverriddenAsOf(java.lang.Class<? extends C>)", "public boolean isOverriddenAsOf(java.lang.Class<? extends C>)"], ["<C> int", "org.apache.lucene.util.VirtualMethod.compareImplementationDistance(java.lang.Class<? extends C>, org.apache.lucene.util.VirtualMethod<C>, org.apache.lucene.util.VirtualMethod<C>)", "public static <C> int compareImplementationDistance(java.lang.Class<? extends C>, org.apache.lucene.util.VirtualMethod<C>, org.apache.lucene.util.VirtualMethod<C>)"], ["boolean", "org.apache.lucene.util.WeakIdentityMap$1.hasNext()", "public boolean hasNext()"], ["K", "org.apache.lucene.util.WeakIdentityMap$1.next()", "public K next()"], ["void", "org.apache.lucene.util.WeakIdentityMap$1.remove()", "public void remove()"], ["int", "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>", "org.apache.lucene.util.WeakIdentityMap.newHashMap()", "public static <K, V> org.apache.lucene.util.WeakIdentityMap<K, V> newHashMap()"], ["<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>", "org.apache.lucene.util.WeakIdentityMap.newHashMap(boolean)", "public static <K, V> org.apache.lucene.util.WeakIdentityMap<K, V> newHashMap(boolean)"], ["<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>", "org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap()", "public static <K, V> org.apache.lucene.util.WeakIdentityMap<K, V> newConcurrentHashMap()"], ["<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>", "org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap(boolean)", "public static <K, V> org.apache.lucene.util.WeakIdentityMap<K, V> newConcurrentHashMap(boolean)"], ["void", "org.apache.lucene.util.WeakIdentityMap.clear()", "public void clear()"], ["boolean", "org.apache.lucene.util.WeakIdentityMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.apache.lucene.util.WeakIdentityMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.apache.lucene.util.WeakIdentityMap.put(K, V)", "public V put(K, V)"], ["boolean", "org.apache.lucene.util.WeakIdentityMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.apache.lucene.util.WeakIdentityMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.apache.lucene.util.WeakIdentityMap.size()", "public int size()"], ["java.util.Iterator<K>", "org.apache.lucene.util.WeakIdentityMap.keyIterator()", "public java.util.Iterator<K> keyIterator()"], ["java.util.Iterator<V>", "org.apache.lucene.util.WeakIdentityMap.valueIterator()", "public java.util.Iterator<V> valueIterator()"], ["void", "org.apache.lucene.util.WeakIdentityMap.reap()", "public void reap()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeEmpty()", "public static org.apache.lucene.util.automaton.Automaton makeEmpty()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeEmptyString()", "public static org.apache.lucene.util.automaton.Automaton makeEmptyString()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeAnyString()", "public static org.apache.lucene.util.automaton.Automaton makeAnyString()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeAnyBinary()", "public static org.apache.lucene.util.automaton.Automaton makeAnyBinary()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeAnyChar()", "public static org.apache.lucene.util.automaton.Automaton makeAnyChar()"], ["int", "org.apache.lucene.util.automaton.Automata.appendAnyChar(org.apache.lucene.util.automaton.Automaton, int)", "public static int appendAnyChar(org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeChar(int)", "public static org.apache.lucene.util.automaton.Automaton makeChar(int)"], ["int", "org.apache.lucene.util.automaton.Automata.appendChar(org.apache.lucene.util.automaton.Automaton, int, int)", "public static int appendChar(org.apache.lucene.util.automaton.Automaton, int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeCharRange(int, int)", "public static org.apache.lucene.util.automaton.Automaton makeCharRange(int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeBinaryInterval(org.apache.lucene.util.BytesRef, boolean, org.apache.lucene.util.BytesRef, boolean)", "public static org.apache.lucene.util.automaton.Automaton makeBinaryInterval(org.apache.lucene.util.BytesRef, boolean, org.apache.lucene.util.BytesRef, boolean)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeDecimalInterval(int, int, int)", "public static org.apache.lucene.util.automaton.Automaton makeDecimalInterval(int, int, int) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeString(java.lang.String)", "public static org.apache.lucene.util.automaton.Automaton makeString(java.lang.String)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeBinary(org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.util.automaton.Automaton makeBinary(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeString(int[], int, int)", "public static org.apache.lucene.util.automaton.Automaton makeString(int[], int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automata.makeStringUnion(java.util.Collection<org.apache.lucene.util.BytesRef>)", "public static org.apache.lucene.util.automaton.Automaton makeStringUnion(java.util.Collection<org.apache.lucene.util.BytesRef>)"], ["org.apache.lucene.util.automaton.Automaton$Builder", "org.apache.lucene.util.automaton.Automaton$Builder()", "public org.apache.lucene.util.automaton.Automaton$Builder()"], ["org.apache.lucene.util.automaton.Automaton$Builder", "org.apache.lucene.util.automaton.Automaton$Builder(int, int)", "public org.apache.lucene.util.automaton.Automaton$Builder(int, int)"], ["void", "org.apache.lucene.util.automaton.Automaton$Builder.addTransition(int, int, int)", "public void addTransition(int, int, int)"], ["void", "org.apache.lucene.util.automaton.Automaton$Builder.addTransition(int, int, int, int)", "public void addTransition(int, int, int, int)"], ["void", "org.apache.lucene.util.automaton.Automaton$Builder.addEpsilon(int, int)", "public void addEpsilon(int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton$Builder.finish()", "public org.apache.lucene.util.automaton.Automaton finish()"], ["int", "org.apache.lucene.util.automaton.Automaton$Builder.createState()", "public int createState()"], ["void", "org.apache.lucene.util.automaton.Automaton$Builder.setAccept(int, boolean)", "public void setAccept(int, boolean)"], ["boolean", "org.apache.lucene.util.automaton.Automaton$Builder.isAccept(int)", "public boolean isAccept(int)"], ["int", "org.apache.lucene.util.automaton.Automaton$Builder.getNumStates()", "public int getNumStates()"], ["void", "org.apache.lucene.util.automaton.Automaton$Builder.copy(org.apache.lucene.util.automaton.Automaton)", "public void copy(org.apache.lucene.util.automaton.Automaton)"], ["void", "org.apache.lucene.util.automaton.Automaton$Builder.copyStates(org.apache.lucene.util.automaton.Automaton)", "public void copyStates(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton()", "public org.apache.lucene.util.automaton.Automaton()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton(int, int)", "public org.apache.lucene.util.automaton.Automaton(int, int)"], ["int", "org.apache.lucene.util.automaton.Automaton.createState()", "public int createState()"], ["void", "org.apache.lucene.util.automaton.Automaton.setAccept(int, boolean)", "public void setAccept(int, boolean)"], ["org.apache.lucene.util.automaton.Transition[][]", "org.apache.lucene.util.automaton.Automaton.getSortedTransitions()", "public org.apache.lucene.util.automaton.Transition[][] getSortedTransitions()"], ["boolean", "org.apache.lucene.util.automaton.Automaton.isAccept(int)", "public boolean isAccept(int)"], ["void", "org.apache.lucene.util.automaton.Automaton.addTransition(int, int, int)", "public void addTransition(int, int, int)"], ["void", "org.apache.lucene.util.automaton.Automaton.addTransition(int, int, int, int)", "public void addTransition(int, int, int, int)"], ["void", "org.apache.lucene.util.automaton.Automaton.addEpsilon(int, int)", "public void addEpsilon(int, int)"], ["void", "org.apache.lucene.util.automaton.Automaton.copy(org.apache.lucene.util.automaton.Automaton)", "public void copy(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Automaton.isDeterministic()", "public boolean isDeterministic()"], ["void", "org.apache.lucene.util.automaton.Automaton.finishState()", "public void finishState()"], ["int", "org.apache.lucene.util.automaton.Automaton.getNumStates()", "public int getNumStates()"], ["int", "org.apache.lucene.util.automaton.Automaton.getNumTransitions()", "public int getNumTransitions()"], ["int", "org.apache.lucene.util.automaton.Automaton.getNumTransitions(int)", "public int getNumTransitions(int)"], ["int", "org.apache.lucene.util.automaton.Automaton.initTransition(int, org.apache.lucene.util.automaton.Transition)", "public int initTransition(int, org.apache.lucene.util.automaton.Transition)"], ["void", "org.apache.lucene.util.automaton.Automaton.getNextTransition(org.apache.lucene.util.automaton.Transition)", "public void getNextTransition(org.apache.lucene.util.automaton.Transition)"], ["void", "org.apache.lucene.util.automaton.Automaton.getTransition(int, int, org.apache.lucene.util.automaton.Transition)", "public void getTransition(int, int, org.apache.lucene.util.automaton.Transition)"], ["java.lang.String", "org.apache.lucene.util.automaton.Automaton.toDot()", "public java.lang.String toDot()"], ["int", "org.apache.lucene.util.automaton.Automaton.step(int, int)", "public int step(int, int)"], ["long", "org.apache.lucene.util.automaton.Automaton.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.automaton.ByteRunAutomaton", "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.ByteRunAutomaton", "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton, boolean, int)", "public org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton, boolean, int)"], ["boolean", "org.apache.lucene.util.automaton.ByteRunAutomaton.run(byte[], int, int)", "public boolean run(byte[], int, int)"], ["org.apache.lucene.util.automaton.CharacterRunAutomaton", "org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.CharacterRunAutomaton", "org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton, int)", "public org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton, int)"], ["boolean", "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(java.lang.String)", "public boolean run(java.lang.String)"], ["boolean", "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(char[], int, int)", "public boolean run(char[], int, int)"], ["org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE[]", "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.values()", "public static org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE[] values()"], ["org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE", "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.valueOf(java.lang.String)", "public static org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE valueOf(java.lang.String)"], ["org.apache.lucene.util.automaton.CompiledAutomaton", "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.CompiledAutomaton", "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean)", "public org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean)"], ["org.apache.lucene.util.automaton.CompiledAutomaton", "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean, int, boolean)", "public org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean, int, boolean)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.util.automaton.CompiledAutomaton.getTermsEnum(org.apache.lucene.index.Terms)", "public org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.automaton.CompiledAutomaton.floor(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRefBuilder)", "public org.apache.lucene.util.BytesRef floor(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRefBuilder)"], ["int", "org.apache.lucene.util.automaton.CompiledAutomaton.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.automaton.CompiledAutomaton.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.add(org.apache.lucene.util.CharsRef)", "public void add(org.apache.lucene.util.CharsRef)"], ["org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.complete()", "public org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State complete()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.build(java.util.Collection<org.apache.lucene.util.BytesRef>)", "public static org.apache.lucene.util.automaton.Automaton build(java.util.Collection<org.apache.lucene.util.BytesRef>)"], ["void", "org.apache.lucene.util.automaton.FiniteStringsIterator$PathNode.resetState(org.apache.lucene.util.automaton.Automaton, int)", "public void resetState(org.apache.lucene.util.automaton.Automaton, int)"], ["int", "org.apache.lucene.util.automaton.FiniteStringsIterator$PathNode.nextLabel(org.apache.lucene.util.automaton.Automaton)", "public int nextLabel(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.FiniteStringsIterator", "org.apache.lucene.util.automaton.FiniteStringsIterator(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.FiniteStringsIterator(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.FiniteStringsIterator", "org.apache.lucene.util.automaton.FiniteStringsIterator(org.apache.lucene.util.automaton.Automaton, int, int)", "public org.apache.lucene.util.automaton.FiniteStringsIterator(org.apache.lucene.util.automaton.Automaton, int, int)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.automaton.FiniteStringsIterator.next()", "public org.apache.lucene.util.IntsRef next()"], ["org.apache.lucene.util.automaton.Lev1ParametricDescription", "org.apache.lucene.util.automaton.Lev1ParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev1ParametricDescription(int)"], ["org.apache.lucene.util.automaton.Lev1TParametricDescription", "org.apache.lucene.util.automaton.Lev1TParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev1TParametricDescription(int)"], ["org.apache.lucene.util.automaton.Lev2ParametricDescription", "org.apache.lucene.util.automaton.Lev2ParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev2ParametricDescription(int)"], ["org.apache.lucene.util.automaton.Lev2TParametricDescription", "org.apache.lucene.util.automaton.Lev2TParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev2TParametricDescription(int)"], ["org.apache.lucene.util.automaton.LevenshteinAutomata", "org.apache.lucene.util.automaton.LevenshteinAutomata(java.lang.String, boolean)", "public org.apache.lucene.util.automaton.LevenshteinAutomata(java.lang.String, boolean)"], ["org.apache.lucene.util.automaton.LevenshteinAutomata", "org.apache.lucene.util.automaton.LevenshteinAutomata(int[], int, boolean)", "public org.apache.lucene.util.automaton.LevenshteinAutomata(int[], int, boolean)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int, java.lang.String)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(int, java.lang.String)"], ["org.apache.lucene.util.automaton.LimitedFiniteStringsIterator", "org.apache.lucene.util.automaton.LimitedFiniteStringsIterator(org.apache.lucene.util.automaton.Automaton, int)", "public org.apache.lucene.util.automaton.LimitedFiniteStringsIterator(org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.automaton.LimitedFiniteStringsIterator.next()", "public org.apache.lucene.util.IntsRef next()"], ["int", "org.apache.lucene.util.automaton.LimitedFiniteStringsIterator.size()", "public int size()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.MinimizationOperations.minimize(org.apache.lucene.util.automaton.Automaton, int)", "public static org.apache.lucene.util.automaton.Automaton minimize(org.apache.lucene.util.automaton.Automaton, int)"], ["void", "org.apache.lucene.util.automaton.Operations$PointTransitionSet.reset()", "public void reset()"], ["void", "org.apache.lucene.util.automaton.Operations$PointTransitionSet.sort()", "public void sort()"], ["void", "org.apache.lucene.util.automaton.Operations$PointTransitionSet.add(org.apache.lucene.util.automaton.Transition)", "public void add(org.apache.lucene.util.automaton.Transition)"], ["java.lang.String", "org.apache.lucene.util.automaton.Operations$PointTransitionSet.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.automaton.Operations$PointTransitions.compareTo(org.apache.lucene.util.automaton.Operations$PointTransitions)", "public int compareTo(org.apache.lucene.util.automaton.Operations$PointTransitions)"], ["void", "org.apache.lucene.util.automaton.Operations$PointTransitions.reset(int)", "public void reset(int)"], ["boolean", "org.apache.lucene.util.automaton.Operations$PointTransitions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.Operations$PointTransitions.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.util.automaton.Operations$PointTransitions.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["void", "org.apache.lucene.util.automaton.Operations$TransitionList.add(org.apache.lucene.util.automaton.Transition)", "public void add(org.apache.lucene.util.automaton.Transition)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.concatenate(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton concatenate(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)", "public static org.apache.lucene.util.automaton.Automaton concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.optional(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton optional(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.repeat(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.repeat(org.apache.lucene.util.automaton.Automaton, int)", "public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.repeat(org.apache.lucene.util.automaton.Automaton, int, int)", "public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton, int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.complement(org.apache.lucene.util.automaton.Automaton, int)", "public static org.apache.lucene.util.automaton.Automaton complement(org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.minus(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton, int)", "public static org.apache.lucene.util.automaton.Automaton minus(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.intersection(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.sameLanguage(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static boolean sameLanguage(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.hasDeadStates(org.apache.lucene.util.automaton.Automaton)", "public static boolean hasDeadStates(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.hasDeadStatesFromInitial(org.apache.lucene.util.automaton.Automaton)", "public static boolean hasDeadStatesFromInitial(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.hasDeadStatesToAccept(org.apache.lucene.util.automaton.Automaton)", "public static boolean hasDeadStatesToAccept(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.subsetOf(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static boolean subsetOf(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.union(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton union(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)", "public static org.apache.lucene.util.automaton.Automaton union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.determinize(org.apache.lucene.util.automaton.Automaton, int)", "public static org.apache.lucene.util.automaton.Automaton determinize(org.apache.lucene.util.automaton.Automaton, int)"], ["boolean", "org.apache.lucene.util.automaton.Operations.isEmpty(org.apache.lucene.util.automaton.Automaton)", "public static boolean isEmpty(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.isTotal(org.apache.lucene.util.automaton.Automaton)", "public static boolean isTotal(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.isTotal(org.apache.lucene.util.automaton.Automaton, int, int)", "public static boolean isTotal(org.apache.lucene.util.automaton.Automaton, int, int)"], ["boolean", "org.apache.lucene.util.automaton.Operations.run(org.apache.lucene.util.automaton.Automaton, java.lang.String)", "public static boolean run(org.apache.lucene.util.automaton.Automaton, java.lang.String)"], ["boolean", "org.apache.lucene.util.automaton.Operations.run(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.IntsRef)", "public static boolean run(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.removeDeadStates(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton removeDeadStates(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Operations.isFinite(org.apache.lucene.util.automaton.Automaton)", "public static boolean isFinite(org.apache.lucene.util.automaton.Automaton)"], ["java.lang.String", "org.apache.lucene.util.automaton.Operations.getCommonPrefix(org.apache.lucene.util.automaton.Automaton)", "public static java.lang.String getCommonPrefix(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.automaton.Operations.getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.BytesRef getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.automaton.Operations.getSingleton(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.IntsRef getSingleton(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.automaton.Operations.getCommonSuffixBytesRef(org.apache.lucene.util.automaton.Automaton, int)", "public static org.apache.lucene.util.BytesRef getCommonSuffixBytesRef(org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Operations.reverse(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton reverse(org.apache.lucene.util.automaton.Automaton)"], ["int[]", "org.apache.lucene.util.automaton.Operations.topoSortStates(org.apache.lucene.util.automaton.Automaton)", "public static int[] topoSortStates(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.RegExp$Kind[]", "org.apache.lucene.util.automaton.RegExp$Kind.values()", "public static org.apache.lucene.util.automaton.RegExp$Kind[] values()"], ["org.apache.lucene.util.automaton.RegExp$Kind", "org.apache.lucene.util.automaton.RegExp$Kind.valueOf(java.lang.String)", "public static org.apache.lucene.util.automaton.RegExp$Kind valueOf(java.lang.String)"], ["org.apache.lucene.util.automaton.RegExp", "org.apache.lucene.util.automaton.RegExp(java.lang.String)", "public org.apache.lucene.util.automaton.RegExp(java.lang.String) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.util.automaton.RegExp", "org.apache.lucene.util.automaton.RegExp(java.lang.String, int)", "public org.apache.lucene.util.automaton.RegExp(java.lang.String, int) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.RegExp.toAutomaton()", "public org.apache.lucene.util.automaton.Automaton toAutomaton()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.RegExp.toAutomaton(int)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(int) throws java.lang.IllegalArgumentException, org.apache.lucene.util.automaton.TooComplexToDeterminizeException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.RegExp.toAutomaton(org.apache.lucene.util.automaton.AutomatonProvider, int)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.util.automaton.AutomatonProvider, int) throws java.lang.IllegalArgumentException, org.apache.lucene.util.automaton.TooComplexToDeterminizeException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.RegExp.toAutomaton(java.util.Map<java.lang.String, org.apache.lucene.util.automaton.Automaton>, int)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map<java.lang.String, org.apache.lucene.util.automaton.Automaton>, int) throws java.lang.IllegalArgumentException, org.apache.lucene.util.automaton.TooComplexToDeterminizeException"], ["java.lang.String", "org.apache.lucene.util.automaton.RegExp.getOriginalString()", "public java.lang.String getOriginalString()"], ["java.lang.String", "org.apache.lucene.util.automaton.RegExp.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.util.automaton.RegExp.toStringTree()", "public java.lang.String toStringTree()"], ["java.util.Set<java.lang.String>", "org.apache.lucene.util.automaton.RegExp.getIdentifiers()", "public java.util.Set<java.lang.String> getIdentifiers()"], ["java.lang.String", "org.apache.lucene.util.automaton.RunAutomaton.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.automaton.RunAutomaton.getSize()", "public final int getSize()"], ["boolean", "org.apache.lucene.util.automaton.RunAutomaton.isAccept(int)", "public final boolean isAccept(int)"], ["int[]", "org.apache.lucene.util.automaton.RunAutomaton.getCharIntervals()", "public final int[] getCharIntervals()"], ["int", "org.apache.lucene.util.automaton.RunAutomaton.step(int, int)", "public final int step(int, int)"], ["int", "org.apache.lucene.util.automaton.RunAutomaton.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.automaton.RunAutomaton.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int[], int, int)", "public org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int[], int, int)"], ["org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int, int)", "public org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int, int)"], ["int", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.automaton.SortedIntSet", "org.apache.lucene.util.automaton.SortedIntSet(int)", "public org.apache.lucene.util.automaton.SortedIntSet(int)"], ["void", "org.apache.lucene.util.automaton.SortedIntSet.incr(int)", "public void incr(int)"], ["void", "org.apache.lucene.util.automaton.SortedIntSet.decr(int)", "public void decr(int)"], ["void", "org.apache.lucene.util.automaton.SortedIntSet.computeHash()", "public void computeHash()"], ["org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet", "org.apache.lucene.util.automaton.SortedIntSet.freeze(int)", "public org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet freeze(int)"], ["int", "org.apache.lucene.util.automaton.SortedIntSet.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.automaton.SortedIntSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.automaton.SortedIntSet.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.automaton.StatePair", "org.apache.lucene.util.automaton.StatePair(int, int)", "public org.apache.lucene.util.automaton.StatePair(int, int)"], ["boolean", "org.apache.lucene.util.automaton.StatePair.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.StatePair.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.util.automaton.StatePair.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.automaton.TooComplexToDeterminizeException", "org.apache.lucene.util.automaton.TooComplexToDeterminizeException(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.TooComplexToDeterminizeException)", "public org.apache.lucene.util.automaton.TooComplexToDeterminizeException(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.TooComplexToDeterminizeException)"], ["org.apache.lucene.util.automaton.TooComplexToDeterminizeException", "org.apache.lucene.util.automaton.TooComplexToDeterminizeException(org.apache.lucene.util.automaton.Automaton, int)", "public org.apache.lucene.util.automaton.TooComplexToDeterminizeException(org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.TooComplexToDeterminizeException.getAutomaton()", "public org.apache.lucene.util.automaton.Automaton getAutomaton()"], ["org.apache.lucene.util.automaton.RegExp", "org.apache.lucene.util.automaton.TooComplexToDeterminizeException.getRegExp()", "public org.apache.lucene.util.automaton.RegExp getRegExp()"], ["int", "org.apache.lucene.util.automaton.TooComplexToDeterminizeException.getMaxDeterminizedStates()", "public int getMaxDeterminizedStates()"], ["org.apache.lucene.util.automaton.Transition", "org.apache.lucene.util.automaton.Transition()", "public org.apache.lucene.util.automaton.Transition()"], ["java.lang.String", "org.apache.lucene.util.automaton.Transition.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence()", "public org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence()"], ["int", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.byteAt(int)", "public int byteAt(int)"], ["int", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.numBits(int)", "public int numBits(int)"], ["java.lang.String", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.automaton.UTF32ToUTF8", "org.apache.lucene.util.automaton.UTF32ToUTF8()", "public org.apache.lucene.util.automaton.UTF32ToUTF8()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.UTF32ToUTF8.convert(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.Automaton convert(org.apache.lucene.util.automaton.Automaton)"], ["void", "org.apache.lucene.util.bkd.BKDReader$IndexTree.pushLeft()", "public void pushLeft()"], ["void", "org.apache.lucene.util.bkd.BKDReader$IndexTree.pushRight()", "public void pushRight()"], ["void", "org.apache.lucene.util.bkd.BKDReader$IndexTree.pop()", "public void pop()"], ["boolean", "org.apache.lucene.util.bkd.BKDReader$IndexTree.isLeafNode()", "public boolean isLeafNode()"], ["boolean", "org.apache.lucene.util.bkd.BKDReader$IndexTree.nodeExists()", "public boolean nodeExists()"], ["int", "org.apache.lucene.util.bkd.BKDReader$IndexTree.getNodeID()", "public int getNodeID()"], ["byte[]", "org.apache.lucene.util.bkd.BKDReader$IndexTree.getSplitPackedValue()", "public byte[] getSplitPackedValue()"], ["int", "org.apache.lucene.util.bkd.BKDReader$IndexTree.getSplitDim()", "public int getSplitDim()"], ["int", "org.apache.lucene.util.bkd.BKDReader$IndexTree.getNumLeaves()", "public int getNumLeaves()"], ["java.lang.Object", "org.apache.lucene.util.bkd.BKDReader$IndexTree.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.bkd.BKDReader$IntersectState", "org.apache.lucene.util.bkd.BKDReader$IntersectState(org.apache.lucene.store.IndexInput, int, int, int, org.apache.lucene.index.PointValues$IntersectVisitor, org.apache.lucene.util.bkd.BKDReader$IndexTree)", "public org.apache.lucene.util.bkd.BKDReader$IntersectState(org.apache.lucene.store.IndexInput, int, int, int, org.apache.lucene.index.PointValues$IntersectVisitor, org.apache.lucene.util.bkd.BKDReader$IndexTree)"], ["org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree(org.apache.lucene.util.bkd.BKDReader)", "public org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree(org.apache.lucene.util.bkd.BKDReader)"], ["org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.clone()", "public org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree clone()"], ["void", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.pushLeft()", "public void pushLeft()"], ["void", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.pushRight()", "public void pushRight()"], ["long", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.getLeafBlockFP()", "public long getLeafBlockFP()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.getSplitDimValue()", "public org.apache.lucene.util.BytesRef getSplitDimValue()"], ["void", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.pop()", "public void pop()"], ["org.apache.lucene.util.bkd.BKDReader$IndexTree", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.clone()", "public org.apache.lucene.util.bkd.BKDReader$IndexTree clone()"], ["java.lang.Object", "org.apache.lucene.util.bkd.BKDReader$LegacyIndexTree.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.bkd.BKDReader$PackedIndexTree", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree(org.apache.lucene.util.bkd.BKDReader)", "public org.apache.lucene.util.bkd.BKDReader$PackedIndexTree(org.apache.lucene.util.bkd.BKDReader)"], ["org.apache.lucene.util.bkd.BKDReader$PackedIndexTree", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.clone()", "public org.apache.lucene.util.bkd.BKDReader$PackedIndexTree clone()"], ["void", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.pushLeft()", "public void pushLeft()"], ["void", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.pushRight()", "public void pushRight()"], ["void", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.pop()", "public void pop()"], ["long", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.getLeafBlockFP()", "public long getLeafBlockFP()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.getSplitDimValue()", "public org.apache.lucene.util.BytesRef getSplitDimValue()"], ["org.apache.lucene.util.bkd.BKDReader$IndexTree", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.clone()", "public org.apache.lucene.util.bkd.BKDReader$IndexTree clone()"], ["java.lang.Object", "org.apache.lucene.util.bkd.BKDReader$PackedIndexTree.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.bkd.BKDReader", "org.apache.lucene.util.bkd.BKDReader(org.apache.lucene.store.IndexInput)", "public org.apache.lucene.util.bkd.BKDReader(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.BKDReader.intersect(org.apache.lucene.index.PointValues$IntersectVisitor)", "public void intersect(org.apache.lucene.index.PointValues$IntersectVisitor) throws java.io.IOException"], ["long", "org.apache.lucene.util.bkd.BKDReader.estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)", "public long estimatePointCount(org.apache.lucene.index.PointValues$IntersectVisitor)"], ["org.apache.lucene.util.bkd.BKDReader$IntersectState", "org.apache.lucene.util.bkd.BKDReader.getIntersectState(org.apache.lucene.index.PointValues$IntersectVisitor)", "public org.apache.lucene.util.bkd.BKDReader$IntersectState getIntersectState(org.apache.lucene.index.PointValues$IntersectVisitor)"], ["void", "org.apache.lucene.util.bkd.BKDReader.visitLeafBlockValues(org.apache.lucene.util.bkd.BKDReader$IndexTree, org.apache.lucene.util.bkd.BKDReader$IntersectState)", "public void visitLeafBlockValues(org.apache.lucene.util.bkd.BKDReader$IndexTree, org.apache.lucene.util.bkd.BKDReader$IntersectState) throws java.io.IOException"], ["long", "org.apache.lucene.util.bkd.BKDReader.ramBytesUsed()", "public long ramBytesUsed()"], ["byte[]", "org.apache.lucene.util.bkd.BKDReader.getMinPackedValue()", "public byte[] getMinPackedValue()"], ["byte[]", "org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue()", "public byte[] getMaxPackedValue()"], ["int", "org.apache.lucene.util.bkd.BKDReader.getNumDimensions()", "public int getNumDimensions()"], ["int", "org.apache.lucene.util.bkd.BKDReader.getBytesPerDimension()", "public int getBytesPerDimension()"], ["long", "org.apache.lucene.util.bkd.BKDReader.size()", "public long size()"], ["int", "org.apache.lucene.util.bkd.BKDReader.getDocCount()", "public int getDocCount()"], ["boolean", "org.apache.lucene.util.bkd.BKDReader.isLeafNode(int)", "public boolean isLeafNode(int)"], ["void", "org.apache.lucene.util.bkd.BKDWriter$1.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.BKDWriter$1.visit(int)", "public void visit(int) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.util.bkd.BKDWriter$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["void", "org.apache.lucene.util.bkd.BKDWriter$5$1.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.bkd.BKDWriter$5$2.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.bkd.BKDWriter$6.apply(int)", "public org.apache.lucene.util.BytesRef apply(int)"], ["java.lang.Object", "org.apache.lucene.util.bkd.BKDWriter$6.apply(int)", "public java.lang.Object apply(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.bkd.BKDWriter$7.apply(int)", "public org.apache.lucene.util.BytesRef apply(int)"], ["java.lang.Object", "org.apache.lucene.util.bkd.BKDWriter$7.apply(int)", "public java.lang.Object apply(int)"], ["org.apache.lucene.util.bkd.BKDWriter$BKDMergeQueue", "org.apache.lucene.util.bkd.BKDWriter$BKDMergeQueue(int, int)", "public org.apache.lucene.util.bkd.BKDWriter$BKDMergeQueue(int, int)"], ["boolean", "org.apache.lucene.util.bkd.BKDWriter$BKDMergeQueue.lessThan(org.apache.lucene.util.bkd.BKDWriter$MergeReader, org.apache.lucene.util.bkd.BKDWriter$MergeReader)", "public boolean lessThan(org.apache.lucene.util.bkd.BKDWriter$MergeReader, org.apache.lucene.util.bkd.BKDWriter$MergeReader)"], ["boolean", "org.apache.lucene.util.bkd.BKDWriter$BKDMergeQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["void", "org.apache.lucene.util.bkd.BKDWriter$MergeReader$1.visit(int)", "public void visit(int) throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.BKDWriter$MergeReader$1.visit(int, byte[])", "public void visit(int, byte[]) throws java.io.IOException"], ["org.apache.lucene.index.PointValues$Relation", "org.apache.lucene.util.bkd.BKDWriter$MergeReader$1.compare(byte[], byte[])", "public org.apache.lucene.index.PointValues$Relation compare(byte[], byte[])"], ["org.apache.lucene.util.bkd.BKDWriter$MergeReader", "org.apache.lucene.util.bkd.BKDWriter$MergeReader(org.apache.lucene.util.bkd.BKDReader, org.apache.lucene.index.MergeState$DocMap)", "public org.apache.lucene.util.bkd.BKDWriter$MergeReader(org.apache.lucene.util.bkd.BKDReader, org.apache.lucene.index.MergeState$DocMap) throws java.io.IOException"], ["boolean", "org.apache.lucene.util.bkd.BKDWriter$MergeReader.next()", "public boolean next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.bkd.BKDWriter$OneDimensionBKDWriter$1.apply(int)", "public org.apache.lucene.util.BytesRef apply(int)"], ["java.lang.Object", "org.apache.lucene.util.bkd.BKDWriter$OneDimensionBKDWriter$1.apply(int)", "public java.lang.Object apply(int)"], ["long", "org.apache.lucene.util.bkd.BKDWriter$OneDimensionBKDWriter.finish()", "public long finish() throws java.io.IOException"], ["org.apache.lucene.util.bkd.BKDWriter$PathSlice", "org.apache.lucene.util.bkd.BKDWriter$PathSlice(org.apache.lucene.util.bkd.PointWriter, long, long)", "public org.apache.lucene.util.bkd.BKDWriter$PathSlice(org.apache.lucene.util.bkd.PointWriter, long, long)"], ["java.lang.String", "org.apache.lucene.util.bkd.BKDWriter$PathSlice.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.bkd.BKDWriter", "org.apache.lucene.util.bkd.BKDWriter(int, org.apache.lucene.store.Directory, java.lang.String, int, int, int, double, long, boolean)", "public org.apache.lucene.util.bkd.BKDWriter(int, org.apache.lucene.store.Directory, java.lang.String, int, int, int, double, long, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.BKDWriter.verifyParams(int, int, double, long)", "public static void verifyParams(int, int, double, long)"], ["void", "org.apache.lucene.util.bkd.BKDWriter.add(byte[], int)", "public void add(byte[], int) throws java.io.IOException"], ["long", "org.apache.lucene.util.bkd.BKDWriter.getPointCount()", "public long getPointCount()"], ["long", "org.apache.lucene.util.bkd.BKDWriter.writeField(org.apache.lucene.store.IndexOutput, java.lang.String, org.apache.lucene.codecs.MutablePointValues)", "public long writeField(org.apache.lucene.store.IndexOutput, java.lang.String, org.apache.lucene.codecs.MutablePointValues) throws java.io.IOException"], ["long", "org.apache.lucene.util.bkd.BKDWriter.merge(org.apache.lucene.store.IndexOutput, java.util.List<org.apache.lucene.index.MergeState$DocMap>, java.util.List<org.apache.lucene.util.bkd.BKDReader>)", "public long merge(org.apache.lucene.store.IndexOutput, java.util.List<org.apache.lucene.index.MergeState$DocMap>, java.util.List<org.apache.lucene.util.bkd.BKDReader>) throws java.io.IOException"], ["long", "org.apache.lucene.util.bkd.BKDWriter.finish(org.apache.lucene.store.IndexOutput)", "public long finish(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.BKDWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.util.bkd.HeapPointReader", "org.apache.lucene.util.bkd.HeapPointReader(java.util.List<byte[]>, int, int, int[], long[], int[], int, int, boolean)", "public org.apache.lucene.util.bkd.HeapPointReader(java.util.List<byte[]>, int, int, int[], long[], int[], int, int, boolean)"], ["boolean", "org.apache.lucene.util.bkd.HeapPointReader.next()", "public boolean next()"], ["byte[]", "org.apache.lucene.util.bkd.HeapPointReader.packedValue()", "public byte[] packedValue()"], ["int", "org.apache.lucene.util.bkd.HeapPointReader.docID()", "public int docID()"], ["long", "org.apache.lucene.util.bkd.HeapPointReader.ord()", "public long ord()"], ["void", "org.apache.lucene.util.bkd.HeapPointReader.close()", "public void close()"], ["org.apache.lucene.util.bkd.HeapPointWriter", "org.apache.lucene.util.bkd.HeapPointWriter(int, int, int, boolean, boolean)", "public org.apache.lucene.util.bkd.HeapPointWriter(int, int, int, boolean, boolean)"], ["void", "org.apache.lucene.util.bkd.HeapPointWriter.copyFrom(org.apache.lucene.util.bkd.HeapPointWriter)", "public void copyFrom(org.apache.lucene.util.bkd.HeapPointWriter)"], ["void", "org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int, byte[])", "public void readPackedValue(int, byte[])"], ["void", "org.apache.lucene.util.bkd.HeapPointWriter.getPackedValueSlice(int, org.apache.lucene.util.BytesRef)", "public void getPackedValueSlice(int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.bkd.HeapPointWriter.append(byte[], long, int)", "public void append(byte[], long, int)"], ["org.apache.lucene.util.bkd.PointReader", "org.apache.lucene.util.bkd.HeapPointWriter.getReader(long, long)", "public org.apache.lucene.util.bkd.PointReader getReader(long, long)"], ["org.apache.lucene.util.bkd.PointReader", "org.apache.lucene.util.bkd.HeapPointWriter.getSharedReader(long, long, java.util.List<java.io.Closeable>)", "public org.apache.lucene.util.bkd.PointReader getSharedReader(long, long, java.util.List<java.io.Closeable>)"], ["void", "org.apache.lucene.util.bkd.HeapPointWriter.close()", "public void close()"], ["void", "org.apache.lucene.util.bkd.HeapPointWriter.destroy()", "public void destroy()"], ["java.lang.String", "org.apache.lucene.util.bkd.HeapPointWriter.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.util.bkd.MutablePointsReaderUtils.sort(int, int, org.apache.lucene.codecs.MutablePointValues, int, int)", "public static void sort(int, int, org.apache.lucene.codecs.MutablePointValues, int, int)"], ["void", "org.apache.lucene.util.bkd.MutablePointsReaderUtils.sortByDim(int, int, int[], org.apache.lucene.codecs.MutablePointValues, int, int, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static void sortByDim(int, int, int[], org.apache.lucene.codecs.MutablePointValues, int, int, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.bkd.MutablePointsReaderUtils.partition(int, int, int, int, org.apache.lucene.codecs.MutablePointValues, int, int, int, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static void partition(int, int, int, int, org.apache.lucene.codecs.MutablePointValues, int, int, int, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.bkd.OfflinePointReader", "org.apache.lucene.util.bkd.OfflinePointReader(org.apache.lucene.store.Directory, java.lang.String, int, long, long, boolean, boolean)", "public org.apache.lucene.util.bkd.OfflinePointReader(org.apache.lucene.store.Directory, java.lang.String, int, long, long, boolean, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.util.bkd.OfflinePointReader.next()", "public boolean next() throws java.io.IOException"], ["byte[]", "org.apache.lucene.util.bkd.OfflinePointReader.packedValue()", "public byte[] packedValue()"], ["long", "org.apache.lucene.util.bkd.OfflinePointReader.ord()", "public long ord()"], ["int", "org.apache.lucene.util.bkd.OfflinePointReader.docID()", "public int docID()"], ["void", "org.apache.lucene.util.bkd.OfflinePointReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.OfflinePointReader.markOrds(long, org.apache.lucene.util.LongBitSet)", "public void markOrds(long, org.apache.lucene.util.LongBitSet) throws java.io.IOException"], ["long", "org.apache.lucene.util.bkd.OfflinePointReader.split(long, org.apache.lucene.util.LongBitSet, org.apache.lucene.util.bkd.PointWriter, org.apache.lucene.util.bkd.PointWriter, boolean)", "public long split(long, org.apache.lucene.util.LongBitSet, org.apache.lucene.util.bkd.PointWriter, org.apache.lucene.util.bkd.PointWriter, boolean) throws java.io.IOException"], ["org.apache.lucene.util.bkd.OfflinePointWriter", "org.apache.lucene.util.bkd.OfflinePointWriter(org.apache.lucene.store.Directory, java.lang.String, int, boolean, java.lang.String, long, boolean)", "public org.apache.lucene.util.bkd.OfflinePointWriter(org.apache.lucene.store.Directory, java.lang.String, int, boolean, java.lang.String, long, boolean) throws java.io.IOException"], ["org.apache.lucene.util.bkd.OfflinePointWriter", "org.apache.lucene.util.bkd.OfflinePointWriter(org.apache.lucene.store.Directory, java.lang.String, int, long, boolean, boolean)", "public org.apache.lucene.util.bkd.OfflinePointWriter(org.apache.lucene.store.Directory, java.lang.String, int, long, boolean, boolean)"], ["void", "org.apache.lucene.util.bkd.OfflinePointWriter.append(byte[], long, int)", "public void append(byte[], long, int) throws java.io.IOException"], ["org.apache.lucene.util.bkd.PointReader", "org.apache.lucene.util.bkd.OfflinePointWriter.getReader(long, long)", "public org.apache.lucene.util.bkd.PointReader getReader(long, long) throws java.io.IOException"], ["org.apache.lucene.util.bkd.PointReader", "org.apache.lucene.util.bkd.OfflinePointWriter.getSharedReader(long, long, java.util.List<java.io.Closeable>)", "public org.apache.lucene.util.bkd.PointReader getSharedReader(long, long, java.util.List<java.io.Closeable>) throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.OfflinePointWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.util.bkd.OfflinePointWriter.destroy()", "public void destroy() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.util.bkd.OfflinePointWriter.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.bkd.PointReader", "org.apache.lucene.util.bkd.PointReader()", "public org.apache.lucene.util.bkd.PointReader()"], ["void", "org.apache.lucene.util.bkd.PointReader.markOrds(long, org.apache.lucene.util.LongBitSet)", "public void markOrds(long, org.apache.lucene.util.LongBitSet) throws java.io.IOException"], ["long", "org.apache.lucene.util.bkd.PointReader.split(long, org.apache.lucene.util.LongBitSet, org.apache.lucene.util.bkd.PointWriter, org.apache.lucene.util.bkd.PointWriter, boolean)", "public long split(long, org.apache.lucene.util.LongBitSet, org.apache.lucene.util.bkd.PointWriter, org.apache.lucene.util.bkd.PointWriter, boolean) throws java.io.IOException"], ["org.apache.lucene.util.fst.Builder$Arc", "org.apache.lucene.util.fst.Builder$Arc()", "public org.apache.lucene.util.fst.Builder$Arc()"], ["boolean", "org.apache.lucene.util.fst.Builder$CompiledNode.isCompiled()", "public boolean isCompiled()"], ["org.apache.lucene.util.fst.Builder$UnCompiledNode", "org.apache.lucene.util.fst.Builder$UnCompiledNode(org.apache.lucene.util.fst.Builder<T>, int)", "public org.apache.lucene.util.fst.Builder$UnCompiledNode(org.apache.lucene.util.fst.Builder<T>, int)"], ["boolean", "org.apache.lucene.util.fst.Builder$UnCompiledNode.isCompiled()", "public boolean isCompiled()"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.clear()", "public void clear()"], ["T", "org.apache.lucene.util.fst.Builder$UnCompiledNode.getLastOutput(int)", "public T getLastOutput(int)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.addArc(int, org.apache.lucene.util.fst.Builder$Node)", "public void addArc(int, org.apache.lucene.util.fst.Builder$Node)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.replaceLast(int, org.apache.lucene.util.fst.Builder$Node, T, boolean)", "public void replaceLast(int, org.apache.lucene.util.fst.Builder$Node, T, boolean)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.deleteLast(int, org.apache.lucene.util.fst.Builder$Node)", "public void deleteLast(int, org.apache.lucene.util.fst.Builder$Node)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.setLastOutput(int, T)", "public void setLastOutput(int, T)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.prependOutput(T)", "public void prependOutput(T)"], ["org.apache.lucene.util.fst.Builder", "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs<T>)", "public org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs<T>)"], ["org.apache.lucene.util.fst.Builder", "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, boolean, int)", "public org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, boolean, int)"], ["long", "org.apache.lucene.util.fst.Builder.getTermCount()", "public long getTermCount()"], ["long", "org.apache.lucene.util.fst.Builder.getNodeCount()", "public long getNodeCount()"], ["long", "org.apache.lucene.util.fst.Builder.getArcCount()", "public long getArcCount()"], ["long", "org.apache.lucene.util.fst.Builder.getMappedStateCount()", "public long getMappedStateCount()"], ["void", "org.apache.lucene.util.fst.Builder.add(org.apache.lucene.util.IntsRef, T)", "public void add(org.apache.lucene.util.IntsRef, T) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST<T>", "org.apache.lucene.util.fst.Builder.finish()", "public org.apache.lucene.util.fst.FST<T> finish() throws java.io.IOException"], ["long", "org.apache.lucene.util.fst.Builder.fstRamBytesUsed()", "public long fstRamBytesUsed()"], ["org.apache.lucene.util.fst.ByteSequenceOutputs", "org.apache.lucene.util.fst.ByteSequenceOutputs.getSingleton()", "public static org.apache.lucene.util.fst.ByteSequenceOutputs getSingleton()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.common(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef common(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef subtract(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.add(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef add(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.fst.ByteSequenceOutputs.write(org.apache.lucene.util.BytesRef, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.BytesRef, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.BytesRef read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.ByteSequenceOutputs.skipOutput(org.apache.lucene.store.DataInput)", "public void skipOutput(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()", "public org.apache.lucene.util.BytesRef getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(org.apache.lucene.util.BytesRef)", "public java.lang.String outputToString(org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.util.fst.ByteSequenceOutputs.ramBytesUsed(org.apache.lucene.util.BytesRef)", "public long ramBytesUsed(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.util.fst.ByteSequenceOutputs.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.util.fst.ByteSequenceOutputs.ramBytesUsed(java.lang.Object)", "public long ramBytesUsed(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.ByteSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput", "org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput()", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput()"], ["org.apache.lucene.util.fst.BytesRefFSTEnum", "org.apache.lucene.util.fst.BytesRefFSTEnum(org.apache.lucene.util.fst.FST<T>)", "public org.apache.lucene.util.fst.BytesRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.current()", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> current()"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.next()", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> next() throws java.io.IOException"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.seekFloor(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> seekFloor(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.seekExact(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["byte", "org.apache.lucene.util.fst.BytesStore$1.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.fst.BytesStore$1.skipBytes(long)", "public void skipBytes(long)"], ["void", "org.apache.lucene.util.fst.BytesStore$1.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["long", "org.apache.lucene.util.fst.BytesStore$1.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.fst.BytesStore$1.setPosition(long)", "public void setPosition(long)"], ["boolean", "org.apache.lucene.util.fst.BytesStore$1.reversed()", "public boolean reversed()"], ["byte", "org.apache.lucene.util.fst.BytesStore$2.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.fst.BytesStore$2.skipBytes(long)", "public void skipBytes(long)"], ["void", "org.apache.lucene.util.fst.BytesStore$2.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["long", "org.apache.lucene.util.fst.BytesStore$2.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.fst.BytesStore$2.setPosition(long)", "public void setPosition(long)"], ["boolean", "org.apache.lucene.util.fst.BytesStore$2.reversed()", "public boolean reversed()"], ["org.apache.lucene.util.fst.BytesStore", "org.apache.lucene.util.fst.BytesStore(int)", "public org.apache.lucene.util.fst.BytesStore(int)"], ["org.apache.lucene.util.fst.BytesStore", "org.apache.lucene.util.fst.BytesStore(org.apache.lucene.store.DataInput, long, int)", "public org.apache.lucene.util.fst.BytesStore(org.apache.lucene.store.DataInput, long, int) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.BytesStore.writeByte(int, byte)", "public void writeByte(int, byte)"], ["void", "org.apache.lucene.util.fst.BytesStore.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.util.fst.BytesStore.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["void", "org.apache.lucene.util.fst.BytesStore.copyBytes(long, long, int)", "public void copyBytes(long, long, int)"], ["void", "org.apache.lucene.util.fst.BytesStore.writeInt(long, int)", "public void writeInt(long, int)"], ["void", "org.apache.lucene.util.fst.BytesStore.reverse(long, long)", "public void reverse(long, long)"], ["void", "org.apache.lucene.util.fst.BytesStore.skipBytes(int)", "public void skipBytes(int)"], ["long", "org.apache.lucene.util.fst.BytesStore.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.fst.BytesStore.truncate(long)", "public void truncate(long)"], ["void", "org.apache.lucene.util.fst.BytesStore.finish()", "public void finish()"], ["void", "org.apache.lucene.util.fst.BytesStore.writeTo(org.apache.lucene.store.DataOutput)", "public void writeTo(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$BytesReader", "org.apache.lucene.util.fst.BytesStore.getForwardReader()", "public org.apache.lucene.util.fst.FST$BytesReader getForwardReader()"], ["org.apache.lucene.util.fst.FST$BytesReader", "org.apache.lucene.util.fst.BytesStore.getReverseReader()", "public org.apache.lucene.util.fst.FST$BytesReader getReverseReader()"], ["long", "org.apache.lucene.util.fst.BytesStore.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.fst.BytesStore.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.fst.CharSequenceOutputs", "org.apache.lucene.util.fst.CharSequenceOutputs.getSingleton()", "public static org.apache.lucene.util.fst.CharSequenceOutputs getSingleton()"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.common(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public org.apache.lucene.util.CharsRef common(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public org.apache.lucene.util.CharsRef subtract(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public org.apache.lucene.util.CharsRef add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["void", "org.apache.lucene.util.fst.CharSequenceOutputs.write(org.apache.lucene.util.CharsRef, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.CharsRef, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.CharsRef read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.CharSequenceOutputs.skipOutput(org.apache.lucene.store.DataInput)", "public void skipOutput(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()", "public org.apache.lucene.util.CharsRef getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(org.apache.lucene.util.CharsRef)", "public java.lang.String outputToString(org.apache.lucene.util.CharsRef)"], ["long", "org.apache.lucene.util.fst.CharSequenceOutputs.ramBytesUsed(org.apache.lucene.util.CharsRef)", "public long ramBytesUsed(org.apache.lucene.util.CharsRef)"], ["long", "org.apache.lucene.util.fst.CharSequenceOutputs.ramBytesUsed(java.lang.Object)", "public long ramBytesUsed(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.CharSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.FST$Arc", "org.apache.lucene.util.fst.FST$Arc()", "public org.apache.lucene.util.fst.FST$Arc()"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST$Arc.copyFrom(org.apache.lucene.util.fst.FST$Arc<T>)", "public org.apache.lucene.util.fst.FST$Arc<T> copyFrom(org.apache.lucene.util.fst.FST$Arc<T>)"], ["boolean", "org.apache.lucene.util.fst.FST$Arc.isLast()", "public boolean isLast()"], ["boolean", "org.apache.lucene.util.fst.FST$Arc.isFinal()", "public boolean isFinal()"], ["java.lang.String", "org.apache.lucene.util.fst.FST$Arc.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.fst.FST$BytesReader", "org.apache.lucene.util.fst.FST$BytesReader()", "public org.apache.lucene.util.fst.FST$BytesReader()"], ["org.apache.lucene.util.fst.FST$INPUT_TYPE[]", "org.apache.lucene.util.fst.FST$INPUT_TYPE.values()", "public static org.apache.lucene.util.fst.FST$INPUT_TYPE[] values()"], ["org.apache.lucene.util.fst.FST$INPUT_TYPE", "org.apache.lucene.util.fst.FST$INPUT_TYPE.valueOf(java.lang.String)", "public static org.apache.lucene.util.fst.FST$INPUT_TYPE valueOf(java.lang.String)"], ["org.apache.lucene.util.fst.FST", "org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>)", "public org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST", "org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>, int)", "public org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>, int) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$INPUT_TYPE", "org.apache.lucene.util.fst.FST.getInputType()", "public org.apache.lucene.util.fst.FST$INPUT_TYPE getInputType()"], ["long", "org.apache.lucene.util.fst.FST.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.fst.FST.toString()", "public java.lang.String toString()"], ["T", "org.apache.lucene.util.fst.FST.getEmptyOutput()", "public T getEmptyOutput()"], ["void", "org.apache.lucene.util.fst.FST.save(org.apache.lucene.store.DataOutput)", "public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.FST.save(java.nio.file.Path)", "public void save(java.nio.file.Path) throws java.io.IOException"], ["<T> org.apache.lucene.util.fst.FST<T>", "org.apache.lucene.util.fst.FST.read(java.nio.file.Path, org.apache.lucene.util.fst.Outputs<T>)", "public static <T> org.apache.lucene.util.fst.FST<T> read(java.nio.file.Path, org.apache.lucene.util.fst.Outputs<T>) throws java.io.IOException"], ["int", "org.apache.lucene.util.fst.FST.readLabel(org.apache.lucene.store.DataInput)", "public int readLabel(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["<T> boolean", "org.apache.lucene.util.fst.FST.targetHasArcs(org.apache.lucene.util.fst.FST$Arc<T>)", "public static <T> boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc<T>)"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.getFirstArc(org.apache.lucene.util.fst.FST$Arc<T>)", "public org.apache.lucene.util.fst.FST$Arc<T> getFirstArc(org.apache.lucene.util.fst.FST$Arc<T>)"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readLastTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readLastTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readFirstTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readFirstTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readFirstRealTargetArc(long, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readFirstRealTargetArc(long, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readNextArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readNextArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["int", "org.apache.lucene.util.fst.FST.readNextArcLabel(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public int readNextArcLabel(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readNextRealArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readNextRealArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.findTargetArc(int, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> findTargetArc(int, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$BytesReader", "org.apache.lucene.util.fst.FST.getBytesReader()", "public org.apache.lucene.util.fst.FST$BytesReader getBytesReader()"], ["org.apache.lucene.util.fst.ForwardBytesReader", "org.apache.lucene.util.fst.ForwardBytesReader(byte[])", "public org.apache.lucene.util.fst.ForwardBytesReader(byte[])"], ["byte", "org.apache.lucene.util.fst.ForwardBytesReader.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.fst.ForwardBytesReader.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["void", "org.apache.lucene.util.fst.ForwardBytesReader.skipBytes(long)", "public void skipBytes(long)"], ["long", "org.apache.lucene.util.fst.ForwardBytesReader.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.fst.ForwardBytesReader.setPosition(long)", "public void setPosition(long)"], ["boolean", "org.apache.lucene.util.fst.ForwardBytesReader.reversed()", "public boolean reversed()"], ["org.apache.lucene.util.fst.IntSequenceOutputs", "org.apache.lucene.util.fst.IntSequenceOutputs.getSingleton()", "public static org.apache.lucene.util.fst.IntSequenceOutputs getSingleton()"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.common(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.IntsRef common(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.IntsRef subtract(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.add(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.IntsRef add(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"], ["void", "org.apache.lucene.util.fst.IntSequenceOutputs.write(org.apache.lucene.util.IntsRef, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.IntsRef, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.IntsRef read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.IntSequenceOutputs.skipOutput(org.apache.lucene.store.DataInput)", "public void skipOutput(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()", "public org.apache.lucene.util.IntsRef getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(org.apache.lucene.util.IntsRef)", "public java.lang.String outputToString(org.apache.lucene.util.IntsRef)"], ["long", "org.apache.lucene.util.fst.IntSequenceOutputs.ramBytesUsed(org.apache.lucene.util.IntsRef)", "public long ramBytesUsed(org.apache.lucene.util.IntsRef)"], ["java.lang.String", "org.apache.lucene.util.fst.IntSequenceOutputs.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.util.fst.IntSequenceOutputs.ramBytesUsed(java.lang.Object)", "public long ramBytesUsed(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.IntSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput", "org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput()", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput()"], ["org.apache.lucene.util.fst.IntsRefFSTEnum", "org.apache.lucene.util.fst.IntsRefFSTEnum(org.apache.lucene.util.fst.FST<T>)", "public org.apache.lucene.util.fst.IntsRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.current()", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> current()"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.next()", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> next() throws java.io.IOException"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.seekCeil(org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> seekCeil(org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.seekFloor(org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> seekFloor(org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.seekExact(org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> seekExact(org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["int", "org.apache.lucene.util.fst.NoOutputs$1.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.fst.NoOutputs$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.util.fst.NoOutputs", "org.apache.lucene.util.fst.NoOutputs.getSingleton()", "public static org.apache.lucene.util.fst.NoOutputs getSingleton()"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.merge(java.lang.Object, java.lang.Object)", "public java.lang.Object merge(java.lang.Object, java.lang.Object)"], ["void", "org.apache.lucene.util.fst.NoOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.NoOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["long", "org.apache.lucene.util.fst.NoOutputs.ramBytesUsed(java.lang.Object)", "public long ramBytesUsed(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.fst.NoOutputs.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.fst.NodeHash", "org.apache.lucene.util.fst.NodeHash(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.NodeHash(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$BytesReader)"], ["long", "org.apache.lucene.util.fst.NodeHash.add(org.apache.lucene.util.fst.Builder<T>, org.apache.lucene.util.fst.Builder$UnCompiledNode<T>)", "public long add(org.apache.lucene.util.fst.Builder<T>, org.apache.lucene.util.fst.Builder$UnCompiledNode<T>) throws java.io.IOException"], ["org.apache.lucene.util.fst.Outputs", "org.apache.lucene.util.fst.Outputs()", "public org.apache.lucene.util.fst.Outputs()"], ["void", "org.apache.lucene.util.fst.Outputs.writeFinalOutput(T, org.apache.lucene.store.DataOutput)", "public void writeFinalOutput(T, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.Outputs.skipOutput(org.apache.lucene.store.DataInput)", "public void skipOutput(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["T", "org.apache.lucene.util.fst.Outputs.readFinalOutput(org.apache.lucene.store.DataInput)", "public T readFinalOutput(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.Outputs.skipFinalOutput(org.apache.lucene.store.DataInput)", "public void skipFinalOutput(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["T", "org.apache.lucene.util.fst.Outputs.merge(T, T)", "public T merge(T, T)"], ["boolean", "org.apache.lucene.util.fst.PairOutputs$Pair.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.fst.PairOutputs$Pair.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.util.fst.PairOutputs$Pair.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.fst.PairOutputs", "org.apache.lucene.util.fst.PairOutputs(org.apache.lucene.util.fst.Outputs<A>, org.apache.lucene.util.fst.Outputs<B>)", "public org.apache.lucene.util.fst.PairOutputs(org.apache.lucene.util.fst.Outputs<A>, org.apache.lucene.util.fst.Outputs<B>)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.newPair(A, B)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> newPair(A, B)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.common(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> common(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.subtract(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> subtract(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.add(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> add(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["void", "org.apache.lucene.util.fst.PairOutputs.write(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.PairOutputs.skipOutput(org.apache.lucene.store.DataInput)", "public void skipOutput(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.getNoOutput()", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.PairOutputs.outputToString(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public java.lang.String outputToString(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["java.lang.String", "org.apache.lucene.util.fst.PairOutputs.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.util.fst.PairOutputs.ramBytesUsed(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public long ramBytesUsed(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["long", "org.apache.lucene.util.fst.PairOutputs.ramBytesUsed(java.lang.Object)", "public long ramBytesUsed(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.fst.PairOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.PairOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.PositiveIntOutputs", "org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton()", "public static org.apache.lucene.util.fst.PositiveIntOutputs getSingleton()"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Long, java.lang.Long)", "public java.lang.Long common(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Long, java.lang.Long)", "public java.lang.Long subtract(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Long, java.lang.Long)", "public java.lang.Long add(java.lang.Long, java.lang.Long)"], ["void", "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Long, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Long, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Long read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()", "public java.lang.Long getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Long)", "public java.lang.String outputToString(java.lang.Long)"], ["java.lang.String", "org.apache.lucene.util.fst.PositiveIntOutputs.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.util.fst.PositiveIntOutputs.ramBytesUsed(java.lang.Long)", "public long ramBytesUsed(java.lang.Long)"], ["long", "org.apache.lucene.util.fst.PositiveIntOutputs.ramBytesUsed(java.lang.Object)", "public long ramBytesUsed(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.ReverseBytesReader", "org.apache.lucene.util.fst.ReverseBytesReader(byte[])", "public org.apache.lucene.util.fst.ReverseBytesReader(byte[])"], ["byte", "org.apache.lucene.util.fst.ReverseBytesReader.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.fst.ReverseBytesReader.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["void", "org.apache.lucene.util.fst.ReverseBytesReader.skipBytes(long)", "public void skipBytes(long)"], ["long", "org.apache.lucene.util.fst.ReverseBytesReader.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.fst.ReverseBytesReader.setPosition(long)", "public void setPosition(long)"], ["boolean", "org.apache.lucene.util.fst.ReverseBytesReader.reversed()", "public boolean reversed()"], ["org.apache.lucene.util.fst.Util$FSTPath", "org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRefBuilder)", "public org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRefBuilder)"], ["org.apache.lucene.util.fst.Util$FSTPath", "org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRefBuilder, float, java.lang.CharSequence, int)", "public org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRefBuilder, float, java.lang.CharSequence, int)"], ["org.apache.lucene.util.fst.Util$FSTPath<T>", "org.apache.lucene.util.fst.Util$FSTPath.newPath(T, org.apache.lucene.util.IntsRefBuilder)", "public org.apache.lucene.util.fst.Util$FSTPath<T> newPath(T, org.apache.lucene.util.IntsRefBuilder)"], ["java.lang.String", "org.apache.lucene.util.fst.Util$FSTPath.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.fst.Util$Result", "org.apache.lucene.util.fst.Util$Result(org.apache.lucene.util.IntsRef, T)", "public org.apache.lucene.util.fst.Util$Result(org.apache.lucene.util.IntsRef, T)"], ["org.apache.lucene.util.fst.Util$TieBreakByInputComparator", "org.apache.lucene.util.fst.Util$TieBreakByInputComparator(java.util.Comparator<T>)", "public org.apache.lucene.util.fst.Util$TieBreakByInputComparator(java.util.Comparator<T>)"], ["int", "org.apache.lucene.util.fst.Util$TieBreakByInputComparator.compare(org.apache.lucene.util.fst.Util$FSTPath<T>, org.apache.lucene.util.fst.Util$FSTPath<T>)", "public int compare(org.apache.lucene.util.fst.Util$FSTPath<T>, org.apache.lucene.util.fst.Util$FSTPath<T>)"], ["int", "org.apache.lucene.util.fst.Util$TieBreakByInputComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.Util$TopNSearcher", "org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, int, int, java.util.Comparator<T>)", "public org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, int, int, java.util.Comparator<T>)"], ["org.apache.lucene.util.fst.Util$TopNSearcher", "org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, int, int, java.util.Comparator<T>, java.util.Comparator<org.apache.lucene.util.fst.Util$FSTPath<T>>)", "public org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, int, int, java.util.Comparator<T>, java.util.Comparator<org.apache.lucene.util.fst.Util$FSTPath<T>>)"], ["void", "org.apache.lucene.util.fst.Util$TopNSearcher.addStartPaths(org.apache.lucene.util.fst.FST$Arc<T>, T, boolean, org.apache.lucene.util.IntsRefBuilder)", "public void addStartPaths(org.apache.lucene.util.fst.FST$Arc<T>, T, boolean, org.apache.lucene.util.IntsRefBuilder) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.Util$TopNSearcher.addStartPaths(org.apache.lucene.util.fst.FST$Arc<T>, T, boolean, org.apache.lucene.util.IntsRefBuilder, float, java.lang.CharSequence, int)", "public void addStartPaths(org.apache.lucene.util.fst.FST$Arc<T>, T, boolean, org.apache.lucene.util.IntsRefBuilder, float, java.lang.CharSequence, int) throws java.io.IOException"], ["org.apache.lucene.util.fst.Util$TopResults<T>", "org.apache.lucene.util.fst.Util$TopNSearcher.search()", "public org.apache.lucene.util.fst.Util$TopResults<T> search() throws java.io.IOException"], ["java.util.Iterator<org.apache.lucene.util.fst.Util$Result<T>>", "org.apache.lucene.util.fst.Util$TopResults.iterator()", "public java.util.Iterator<org.apache.lucene.util.fst.Util$Result<T>> iterator()"], ["<T> T", "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.IntsRef)", "public static <T> T get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["<T> T", "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.BytesRef)", "public static <T> T get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long)", "public static org.apache.lucene.util.IntsRef getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long, org.apache.lucene.util.fst.FST$BytesReader, org.apache.lucene.util.fst.FST$Arc<java.lang.Long>, org.apache.lucene.util.fst.FST$Arc<java.lang.Long>, org.apache.lucene.util.IntsRefBuilder)", "public static org.apache.lucene.util.IntsRef getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long, org.apache.lucene.util.fst.FST$BytesReader, org.apache.lucene.util.fst.FST$Arc<java.lang.Long>, org.apache.lucene.util.fst.FST$Arc<java.lang.Long>, org.apache.lucene.util.IntsRefBuilder) throws java.io.IOException"], ["<T> org.apache.lucene.util.fst.Util$TopResults<T>", "org.apache.lucene.util.fst.Util.shortestPaths(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, T, java.util.Comparator<T>, int, boolean)", "public static <T> org.apache.lucene.util.fst.Util$TopResults<T> shortestPaths(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, T, java.util.Comparator<T>, int, boolean) throws java.io.IOException"], ["<T> void", "org.apache.lucene.util.fst.Util.toDot(org.apache.lucene.util.fst.FST<T>, java.io.Writer, boolean, boolean)", "public static <T> void toDot(org.apache.lucene.util.fst.FST<T>, java.io.Writer, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toUTF16(java.lang.CharSequence, org.apache.lucene.util.IntsRefBuilder)", "public static org.apache.lucene.util.IntsRef toUTF16(java.lang.CharSequence, org.apache.lucene.util.IntsRefBuilder)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toUTF32(java.lang.CharSequence, org.apache.lucene.util.IntsRefBuilder)", "public static org.apache.lucene.util.IntsRef toUTF32(java.lang.CharSequence, org.apache.lucene.util.IntsRefBuilder)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toUTF32(char[], int, int, org.apache.lucene.util.IntsRefBuilder)", "public static org.apache.lucene.util.IntsRef toUTF32(char[], int, int, org.apache.lucene.util.IntsRefBuilder)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toIntsRef(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRefBuilder)", "public static org.apache.lucene.util.IntsRef toIntsRef(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRefBuilder)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.Util.toBytesRef(org.apache.lucene.util.IntsRef, org.apache.lucene.util.BytesRefBuilder)", "public static org.apache.lucene.util.BytesRef toBytesRef(org.apache.lucene.util.IntsRef, org.apache.lucene.util.BytesRefBuilder)"], ["<T> org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.Util.readCeilArc(int, org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public static <T> org.apache.lucene.util.fst.FST$Arc<T> readCeilArc(int, org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings$1.next()", "public org.apache.lucene.analysis.TokenStream next()"], ["java.lang.Object", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings$1.next()", "public java.lang.Object next()"], ["boolean", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings$FiniteStringsTokenStream.incrementToken()", "public boolean incrementToken() throws java.io.IOException"], ["org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings(org.apache.lucene.analysis.TokenStream) throws java.io.IOException"], ["boolean", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings.hasSidePath(int)", "public boolean hasSidePath(int)"], ["org.apache.lucene.index.Term[]", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings.getTerms(java.lang.String, int)", "public org.apache.lucene.index.Term[] getTerms(java.lang.String, int)"], ["java.util.Iterator<org.apache.lucene.analysis.TokenStream>", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings.getFiniteStrings()", "public java.util.Iterator<org.apache.lucene.analysis.TokenStream> getFiniteStrings() throws java.io.IOException"], ["java.util.Iterator<org.apache.lucene.analysis.TokenStream>", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings.getFiniteStrings(int, int)", "public java.util.Iterator<org.apache.lucene.analysis.TokenStream> getFiniteStrings(int, int) throws java.io.IOException"], ["int[]", "org.apache.lucene.util.graph.GraphTokenStreamFiniteStrings.articulationPoints()", "public int[] articulationPoints()"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValue()", "public org.apache.lucene.util.mutable.MutableValue()"], ["boolean", "org.apache.lucene.util.mutable.MutableValue.exists()", "public boolean exists()"], ["int", "org.apache.lucene.util.mutable.MutableValue.compareTo(org.apache.lucene.util.mutable.MutableValue)", "public int compareTo(org.apache.lucene.util.mutable.MutableValue)"], ["boolean", "org.apache.lucene.util.mutable.MutableValue.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.mutable.MutableValue.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.mutable.MutableValue.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.mutable.MutableValueBool", "org.apache.lucene.util.mutable.MutableValueBool()", "public org.apache.lucene.util.mutable.MutableValueBool()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueBool.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueBool.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueBool.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueBool.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueBool.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueBool.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueDate", "org.apache.lucene.util.mutable.MutableValueDate()", "public org.apache.lucene.util.mutable.MutableValueDate()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueDate.toObject()", "public java.lang.Object toObject()"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueDate.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["org.apache.lucene.util.mutable.MutableValueDouble", "org.apache.lucene.util.mutable.MutableValueDouble()", "public org.apache.lucene.util.mutable.MutableValueDouble()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueDouble.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueDouble.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueDouble.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueDouble.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueDouble.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueDouble.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueFloat", "org.apache.lucene.util.mutable.MutableValueFloat()", "public org.apache.lucene.util.mutable.MutableValueFloat()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueFloat.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueFloat.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueFloat.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueFloat.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueFloat.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueFloat.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueInt", "org.apache.lucene.util.mutable.MutableValueInt()", "public org.apache.lucene.util.mutable.MutableValueInt()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueInt.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueInt.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueInt.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueInt.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueInt.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueInt.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueLong", "org.apache.lucene.util.mutable.MutableValueLong()", "public org.apache.lucene.util.mutable.MutableValueLong()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueLong.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueLong.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueLong.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueLong.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueLong.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueLong.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueStr", "org.apache.lucene.util.mutable.MutableValueStr()", "public org.apache.lucene.util.mutable.MutableValueStr()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueStr.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueStr.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueStr.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueStr.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueStr.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueStr.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.packed.AbstractBlockPackedWriter", "org.apache.lucene.util.packed.AbstractBlockPackedWriter(org.apache.lucene.store.DataOutput, int)", "public org.apache.lucene.util.packed.AbstractBlockPackedWriter(org.apache.lucene.store.DataOutput, int)"], ["void", "org.apache.lucene.util.packed.AbstractBlockPackedWriter.reset(org.apache.lucene.store.DataOutput)", "public void reset(org.apache.lucene.store.DataOutput)"], ["void", "org.apache.lucene.util.packed.AbstractBlockPackedWriter.add(long)", "public void add(long) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.AbstractBlockPackedWriter.finish()", "public void finish() throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.AbstractBlockPackedWriter.ord()", "public long ord()"], ["long", "org.apache.lucene.util.packed.AbstractPagedMutable.size()", "public final long size()"], ["long", "org.apache.lucene.util.packed.AbstractPagedMutable.get(long)", "public final long get(long)"], ["void", "org.apache.lucene.util.packed.AbstractPagedMutable.set(long, long)", "public final void set(long, long)"], ["long", "org.apache.lucene.util.packed.AbstractPagedMutable.ramBytesUsed()", "public long ramBytesUsed()"], ["T", "org.apache.lucene.util.packed.AbstractPagedMutable.resize(long)", "public final T resize(long)"], ["T", "org.apache.lucene.util.packed.AbstractPagedMutable.grow(long)", "public final T grow(long)"], ["T", "org.apache.lucene.util.packed.AbstractPagedMutable.grow()", "public final T grow()"], ["java.lang.String", "org.apache.lucene.util.packed.AbstractPagedMutable.toString()", "public final java.lang.String toString()"], ["org.apache.lucene.util.packed.BlockPackedReader", "org.apache.lucene.util.packed.BlockPackedReader(org.apache.lucene.store.IndexInput, int, int, long, boolean)", "public org.apache.lucene.util.packed.BlockPackedReader(org.apache.lucene.store.IndexInput, int, int, long, boolean) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.BlockPackedReader.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.BlockPackedReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.packed.BlockPackedReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.BlockPackedReaderIterator", "org.apache.lucene.util.packed.BlockPackedReaderIterator(org.apache.lucene.store.DataInput, int, int, long)", "public org.apache.lucene.util.packed.BlockPackedReaderIterator(org.apache.lucene.store.DataInput, int, int, long)"], ["void", "org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(org.apache.lucene.store.DataInput, long)", "public void reset(org.apache.lucene.store.DataInput, long)"], ["void", "org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long)", "public void skip(long) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.BlockPackedReaderIterator.next()", "public long next() throws java.io.IOException"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.packed.BlockPackedReaderIterator.next(int)", "public org.apache.lucene.util.LongsRef next(int) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.BlockPackedReaderIterator.ord()", "public long ord()"], ["org.apache.lucene.util.packed.BlockPackedWriter", "org.apache.lucene.util.packed.BlockPackedWriter(org.apache.lucene.store.DataOutput, int)", "public org.apache.lucene.util.packed.BlockPackedWriter(org.apache.lucene.store.DataOutput, int)"], ["long", "org.apache.lucene.util.packed.BlockPackedWriter.ord()", "public long ord()"], ["void", "org.apache.lucene.util.packed.BlockPackedWriter.finish()", "public void finish() throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.BlockPackedWriter.add(long)", "public void add(long) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.BlockPackedWriter.reset(org.apache.lucene.store.DataOutput)", "public void reset(org.apache.lucene.store.DataOutput)"], ["org.apache.lucene.util.packed.BulkOperation", "org.apache.lucene.util.packed.BulkOperation.of(org.apache.lucene.util.packed.PackedInts$Format, int)", "public static org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format, int)"], ["int", "org.apache.lucene.util.packed.BulkOperation.computeIterations(int, int)", "public final int computeIterations(int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked", "org.apache.lucene.util.packed.BulkOperationPacked(int)", "public org.apache.lucene.util.packed.BulkOperationPacked(int)"], ["int", "org.apache.lucene.util.packed.BulkOperationPacked.longBlockCount()", "public int longBlockCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPacked.longValueCount()", "public int longValueCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPacked.byteBlockCount()", "public int byteBlockCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPacked.byteValueCount()", "public int byteValueCount()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, long[], int, int)", "public void encode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, long[], int, int)", "public void encode(int[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, byte[], int, int)", "public void encode(long[], int, byte[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, byte[], int, int)", "public void encode(int[], int, byte[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked1", "org.apache.lucene.util.packed.BulkOperationPacked1()", "public org.apache.lucene.util.packed.BulkOperationPacked1()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked10", "org.apache.lucene.util.packed.BulkOperationPacked10()", "public org.apache.lucene.util.packed.BulkOperationPacked10()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked11", "org.apache.lucene.util.packed.BulkOperationPacked11()", "public org.apache.lucene.util.packed.BulkOperationPacked11()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked12", "org.apache.lucene.util.packed.BulkOperationPacked12()", "public org.apache.lucene.util.packed.BulkOperationPacked12()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked13", "org.apache.lucene.util.packed.BulkOperationPacked13()", "public org.apache.lucene.util.packed.BulkOperationPacked13()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked14", "org.apache.lucene.util.packed.BulkOperationPacked14()", "public org.apache.lucene.util.packed.BulkOperationPacked14()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked15", "org.apache.lucene.util.packed.BulkOperationPacked15()", "public org.apache.lucene.util.packed.BulkOperationPacked15()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked16", "org.apache.lucene.util.packed.BulkOperationPacked16()", "public org.apache.lucene.util.packed.BulkOperationPacked16()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked17", "org.apache.lucene.util.packed.BulkOperationPacked17()", "public org.apache.lucene.util.packed.BulkOperationPacked17()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked18", "org.apache.lucene.util.packed.BulkOperationPacked18()", "public org.apache.lucene.util.packed.BulkOperationPacked18()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked19", "org.apache.lucene.util.packed.BulkOperationPacked19()", "public org.apache.lucene.util.packed.BulkOperationPacked19()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked2", "org.apache.lucene.util.packed.BulkOperationPacked2()", "public org.apache.lucene.util.packed.BulkOperationPacked2()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked20", "org.apache.lucene.util.packed.BulkOperationPacked20()", "public org.apache.lucene.util.packed.BulkOperationPacked20()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked21", "org.apache.lucene.util.packed.BulkOperationPacked21()", "public org.apache.lucene.util.packed.BulkOperationPacked21()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked22", "org.apache.lucene.util.packed.BulkOperationPacked22()", "public org.apache.lucene.util.packed.BulkOperationPacked22()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked23", "org.apache.lucene.util.packed.BulkOperationPacked23()", "public org.apache.lucene.util.packed.BulkOperationPacked23()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked24", "org.apache.lucene.util.packed.BulkOperationPacked24()", "public org.apache.lucene.util.packed.BulkOperationPacked24()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked3", "org.apache.lucene.util.packed.BulkOperationPacked3()", "public org.apache.lucene.util.packed.BulkOperationPacked3()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked4", "org.apache.lucene.util.packed.BulkOperationPacked4()", "public org.apache.lucene.util.packed.BulkOperationPacked4()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked5", "org.apache.lucene.util.packed.BulkOperationPacked5()", "public org.apache.lucene.util.packed.BulkOperationPacked5()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked6", "org.apache.lucene.util.packed.BulkOperationPacked6()", "public org.apache.lucene.util.packed.BulkOperationPacked6()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked7", "org.apache.lucene.util.packed.BulkOperationPacked7()", "public org.apache.lucene.util.packed.BulkOperationPacked7()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked8", "org.apache.lucene.util.packed.BulkOperationPacked8()", "public org.apache.lucene.util.packed.BulkOperationPacked8()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked9", "org.apache.lucene.util.packed.BulkOperationPacked9()", "public org.apache.lucene.util.packed.BulkOperationPacked9()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPackedSingleBlock", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock(int)", "public org.apache.lucene.util.packed.BulkOperationPackedSingleBlock(int)"], ["int", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.longBlockCount()", "public final int longBlockCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.byteBlockCount()", "public final int byteBlockCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.longValueCount()", "public int longValueCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.byteValueCount()", "public final int byteValueCount()"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, long[], int, int)", "public void encode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, long[], int, int)", "public void encode(int[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, byte[], int, int)", "public void encode(long[], int, byte[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, byte[], int, int)", "public void encode(int[], int, byte[], int, int)"], ["org.apache.lucene.util.packed.DeltaPackedLongValues", "org.apache.lucene.util.packed.DeltaPackedLongValues$Builder.build()", "public org.apache.lucene.util.packed.DeltaPackedLongValues build()"], ["org.apache.lucene.util.packed.PackedLongValues", "org.apache.lucene.util.packed.DeltaPackedLongValues$Builder.build()", "public org.apache.lucene.util.packed.PackedLongValues build()"], ["long", "org.apache.lucene.util.packed.Direct16.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct16.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct16.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct16.clear()", "public void clear()"], ["int", "org.apache.lucene.util.packed.Direct16.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct16.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct16.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.Direct32.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct32.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct32.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct32.clear()", "public void clear()"], ["int", "org.apache.lucene.util.packed.Direct32.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct32.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct32.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.Direct64.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct64.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct64.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct64.clear()", "public void clear()"], ["int", "org.apache.lucene.util.packed.Direct64.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct64.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct64.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.Direct8.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct8.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct8.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct8.clear()", "public void clear()"], ["int", "org.apache.lucene.util.packed.Direct8.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct8.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct8.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.DirectMonotonicReader$1.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectMonotonicReader$2.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectMonotonicReader$Meta.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.packed.DirectMonotonicReader", "org.apache.lucene.util.packed.DirectMonotonicReader()", "public org.apache.lucene.util.packed.DirectMonotonicReader()"], ["org.apache.lucene.util.packed.DirectMonotonicReader$Meta", "org.apache.lucene.util.packed.DirectMonotonicReader.loadMeta(org.apache.lucene.store.IndexInput, long, int)", "public static org.apache.lucene.util.packed.DirectMonotonicReader$Meta loadMeta(org.apache.lucene.store.IndexInput, long, int) throws java.io.IOException"], ["org.apache.lucene.util.LongValues", "org.apache.lucene.util.packed.DirectMonotonicReader.getInstance(org.apache.lucene.util.packed.DirectMonotonicReader$Meta, org.apache.lucene.store.RandomAccessInput)", "public static org.apache.lucene.util.LongValues getInstance(org.apache.lucene.util.packed.DirectMonotonicReader$Meta, org.apache.lucene.store.RandomAccessInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.DirectMonotonicWriter.add(long)", "public void add(long) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.DirectMonotonicWriter.finish()", "public void finish() throws java.io.IOException"], ["org.apache.lucene.util.packed.DirectMonotonicWriter", "org.apache.lucene.util.packed.DirectMonotonicWriter.getInstance(org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput, long, int)", "public static org.apache.lucene.util.packed.DirectMonotonicWriter getInstance(org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput, long, int)"], ["long", "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.get(int)", "public long get(int)"], ["long", "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.ramBytesUsed()", "public long ramBytesUsed()"], ["long", "org.apache.lucene.util.packed.DirectPackedReader.get(int)", "public long get(int)"], ["long", "org.apache.lucene.util.packed.DirectPackedReader.ramBytesUsed()", "public long ramBytesUsed()"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader1.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader12.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader16.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader2.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader20.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader24.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader28.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader32.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader4.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader40.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader48.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader56.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader64.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.DirectReader$DirectPackedReader8.get(long)", "public long get(long)"], ["org.apache.lucene.util.packed.DirectReader", "org.apache.lucene.util.packed.DirectReader()", "public org.apache.lucene.util.packed.DirectReader()"], ["org.apache.lucene.util.LongValues", "org.apache.lucene.util.packed.DirectReader.getInstance(org.apache.lucene.store.RandomAccessInput, int)", "public static org.apache.lucene.util.LongValues getInstance(org.apache.lucene.store.RandomAccessInput, int)"], ["org.apache.lucene.util.LongValues", "org.apache.lucene.util.packed.DirectReader.getInstance(org.apache.lucene.store.RandomAccessInput, int, long)", "public static org.apache.lucene.util.LongValues getInstance(org.apache.lucene.store.RandomAccessInput, int, long)"], ["void", "org.apache.lucene.util.packed.DirectWriter.add(long)", "public void add(long) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.DirectWriter.finish()", "public void finish() throws java.io.IOException"], ["org.apache.lucene.util.packed.DirectWriter", "org.apache.lucene.util.packed.DirectWriter.getInstance(org.apache.lucene.store.DataOutput, long, int)", "public static org.apache.lucene.util.packed.DirectWriter getInstance(org.apache.lucene.store.DataOutput, long, int)"], ["int", "org.apache.lucene.util.packed.DirectWriter.bitsRequired(long)", "public static int bitsRequired(long)"], ["int", "org.apache.lucene.util.packed.DirectWriter.unsignedBitsRequired(long)", "public static int unsignedBitsRequired(long)"], ["org.apache.lucene.util.packed.GrowableWriter", "org.apache.lucene.util.packed.GrowableWriter(int, int, float)", "public org.apache.lucene.util.packed.GrowableWriter(int, int, float)"], ["long", "org.apache.lucene.util.packed.GrowableWriter.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.GrowableWriter.size()", "public int size()"], ["int", "org.apache.lucene.util.packed.GrowableWriter.getBitsPerValue()", "public int getBitsPerValue()"], ["org.apache.lucene.util.packed.PackedInts$Mutable", "org.apache.lucene.util.packed.GrowableWriter.getMutable()", "public org.apache.lucene.util.packed.PackedInts$Mutable getMutable()"], ["void", "org.apache.lucene.util.packed.GrowableWriter.set(int, long)", "public void set(int, long)"], ["void", "org.apache.lucene.util.packed.GrowableWriter.clear()", "public void clear()"], ["org.apache.lucene.util.packed.GrowableWriter", "org.apache.lucene.util.packed.GrowableWriter.resize(int)", "public org.apache.lucene.util.packed.GrowableWriter resize(int)"], ["int", "org.apache.lucene.util.packed.GrowableWriter.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.GrowableWriter.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.GrowableWriter.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.GrowableWriter.save(org.apache.lucene.store.DataOutput)", "public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.packed.MonotonicBlockPackedReader", "org.apache.lucene.util.packed.MonotonicBlockPackedReader.of(org.apache.lucene.store.IndexInput, int, int, long, boolean)", "public static org.apache.lucene.util.packed.MonotonicBlockPackedReader of(org.apache.lucene.store.IndexInput, int, int, long, boolean) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long)", "public long get(long)"], ["long", "org.apache.lucene.util.packed.MonotonicBlockPackedReader.size()", "public long size()"], ["long", "org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.packed.MonotonicBlockPackedReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.MonotonicBlockPackedWriter", "org.apache.lucene.util.packed.MonotonicBlockPackedWriter(org.apache.lucene.store.DataOutput, int)", "public org.apache.lucene.util.packed.MonotonicBlockPackedWriter(org.apache.lucene.store.DataOutput, int)"], ["void", "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.add(long)", "public void add(long) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.ord()", "public long ord()"], ["void", "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.finish()", "public void finish() throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.reset(org.apache.lucene.store.DataOutput)", "public void reset(org.apache.lucene.store.DataOutput)"], ["org.apache.lucene.util.packed.MonotonicLongValues", "org.apache.lucene.util.packed.MonotonicLongValues$Builder.build()", "public org.apache.lucene.util.packed.MonotonicLongValues build()"], ["org.apache.lucene.util.packed.DeltaPackedLongValues", "org.apache.lucene.util.packed.MonotonicLongValues$Builder.build()", "public org.apache.lucene.util.packed.DeltaPackedLongValues build()"], ["org.apache.lucene.util.packed.PackedLongValues", "org.apache.lucene.util.packed.MonotonicLongValues$Builder.build()", "public org.apache.lucene.util.packed.PackedLongValues build()"], ["long", "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long)", "public void set(int, long)"], ["int", "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed16ThreeBlocks.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.Packed16ThreeBlocks.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed16ThreeBlocks.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.packed.Packed16ThreeBlocks.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.Packed64", "org.apache.lucene.util.packed.Packed64(int, int)", "public org.apache.lucene.util.packed.Packed64(int, int)"], ["org.apache.lucene.util.packed.Packed64", "org.apache.lucene.util.packed.Packed64(int, org.apache.lucene.store.DataInput, int, int)", "public org.apache.lucene.util.packed.Packed64(int, org.apache.lucene.store.DataInput, int, int) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.Packed64.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.Packed64.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed64.set(int, long)", "public void set(int, long)"], ["int", "org.apache.lucene.util.packed.Packed64.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["java.lang.String", "org.apache.lucene.util.packed.Packed64.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.util.packed.Packed64.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Packed64.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.Packed64.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.set(int, long)", "public void set(int, long)"], ["boolean", "org.apache.lucene.util.packed.Packed64SingleBlock.isSupported(int)", "public static boolean isSupported(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock.ramBytesUsed()", "public long ramBytesUsed()"], ["int", "org.apache.lucene.util.packed.Packed64SingleBlock.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Packed64SingleBlock.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock.fill(int, int, long)", "public void fill(int, int, long)"], ["java.lang.String", "org.apache.lucene.util.packed.Packed64SingleBlock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.Packed64SingleBlock", "org.apache.lucene.util.packed.Packed64SingleBlock.create(org.apache.lucene.store.DataInput, int, int)", "public static org.apache.lucene.util.packed.Packed64SingleBlock create(org.apache.lucene.store.DataInput, int, int) throws java.io.IOException"], ["org.apache.lucene.util.packed.Packed64SingleBlock", "org.apache.lucene.util.packed.Packed64SingleBlock.create(int, int)", "public static org.apache.lucene.util.packed.Packed64SingleBlock create(int, int)"], ["long", "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long)", "public void set(int, long)"], ["int", "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed8ThreeBlocks.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.Packed8ThreeBlocks.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed8ThreeBlocks.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.packed.Packed8ThreeBlocks.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.PackedDataInput", "org.apache.lucene.util.packed.PackedDataInput(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.packed.PackedDataInput(org.apache.lucene.store.DataInput)"], ["long", "org.apache.lucene.util.packed.PackedDataInput.readLong(int)", "public long readLong(int) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.PackedDataInput.skipToNextByte()", "public void skipToNextByte()"], ["org.apache.lucene.util.packed.PackedDataOutput", "org.apache.lucene.util.packed.PackedDataOutput(org.apache.lucene.store.DataOutput)", "public org.apache.lucene.util.packed.PackedDataOutput(org.apache.lucene.store.DataOutput)"], ["void", "org.apache.lucene.util.packed.PackedDataOutput.writeLong(long, int)", "public void writeLong(long, int) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.PackedDataOutput.flush()", "public void flush() throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.PackedInts$Format$1.byteCount(int, int, int)", "public long byteCount(int, int, int)"], ["int", "org.apache.lucene.util.packed.PackedInts$Format$2.longCount(int, int, int)", "public int longCount(int, int, int)"], ["boolean", "org.apache.lucene.util.packed.PackedInts$Format$2.isSupported(int)", "public boolean isSupported(int)"], ["float", "org.apache.lucene.util.packed.PackedInts$Format$2.overheadPerValue(int)", "public float overheadPerValue(int)"], ["org.apache.lucene.util.packed.PackedInts$Format[]", "org.apache.lucene.util.packed.PackedInts$Format.values()", "public static org.apache.lucene.util.packed.PackedInts$Format[] values()"], ["org.apache.lucene.util.packed.PackedInts$Format", "org.apache.lucene.util.packed.PackedInts$Format.valueOf(java.lang.String)", "public static org.apache.lucene.util.packed.PackedInts$Format valueOf(java.lang.String)"], ["org.apache.lucene.util.packed.PackedInts$Format", "org.apache.lucene.util.packed.PackedInts$Format.byId(int)", "public static org.apache.lucene.util.packed.PackedInts$Format byId(int)"], ["int", "org.apache.lucene.util.packed.PackedInts$Format.getId()", "public int getId()"], ["long", "org.apache.lucene.util.packed.PackedInts$Format.byteCount(int, int, int)", "public long byteCount(int, int, int)"], ["int", "org.apache.lucene.util.packed.PackedInts$Format.longCount(int, int, int)", "public int longCount(int, int, int)"], ["boolean", "org.apache.lucene.util.packed.PackedInts$Format.isSupported(int)", "public boolean isSupported(int)"], ["float", "org.apache.lucene.util.packed.PackedInts$Format.overheadPerValue(int)", "public float overheadPerValue(int)"], ["float", "org.apache.lucene.util.packed.PackedInts$Format.overheadRatio(int)", "public final float overheadRatio(int)"], ["org.apache.lucene.util.packed.PackedInts$FormatAndBits", "org.apache.lucene.util.packed.PackedInts$FormatAndBits(org.apache.lucene.util.packed.PackedInts$Format, int)", "public org.apache.lucene.util.packed.PackedInts$FormatAndBits(org.apache.lucene.util.packed.PackedInts$Format, int)"], ["java.lang.String", "org.apache.lucene.util.packed.PackedInts$FormatAndBits.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.PackedInts$Mutable", "org.apache.lucene.util.packed.PackedInts$Mutable()", "public org.apache.lucene.util.packed.PackedInts$Mutable()"], ["int", "org.apache.lucene.util.packed.PackedInts$Mutable.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.PackedInts$Mutable.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.PackedInts$Mutable.clear()", "public void clear()"], ["void", "org.apache.lucene.util.packed.PackedInts$Mutable.save(org.apache.lucene.store.DataOutput)", "public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedInts$MutableImpl.getBitsPerValue()", "public final int getBitsPerValue()"], ["int", "org.apache.lucene.util.packed.PackedInts$MutableImpl.size()", "public final int size()"], ["java.lang.String", "org.apache.lucene.util.packed.PackedInts$MutableImpl.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.PackedInts$NullReader", "org.apache.lucene.util.packed.PackedInts$NullReader(int)", "public org.apache.lucene.util.packed.PackedInts$NullReader(int)"], ["long", "org.apache.lucene.util.packed.PackedInts$NullReader.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.PackedInts$NullReader.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.PackedInts$NullReader.size()", "public int size()"], ["long", "org.apache.lucene.util.packed.PackedInts$NullReader.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts$Reader()", "public org.apache.lucene.util.packed.PackedInts$Reader()"], ["int", "org.apache.lucene.util.packed.PackedInts$Reader.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderImpl.size()", "public final int size()"], ["long", "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.next()", "public long next() throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.getBitsPerValue()", "public int getBitsPerValue()"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.size()", "public int size()"], ["int", "org.apache.lucene.util.packed.PackedInts$Writer.bitsPerValue()", "public final int bitsPerValue()"], ["org.apache.lucene.util.packed.PackedInts", "org.apache.lucene.util.packed.PackedInts()", "public org.apache.lucene.util.packed.PackedInts()"], ["void", "org.apache.lucene.util.packed.PackedInts.checkVersion(int)", "public static void checkVersion(int)"], ["org.apache.lucene.util.packed.PackedInts$FormatAndBits", "org.apache.lucene.util.packed.PackedInts.fastestFormatAndBits(int, int, float)", "public static org.apache.lucene.util.packed.PackedInts$FormatAndBits fastestFormatAndBits(int, int, float)"], ["org.apache.lucene.util.packed.PackedInts$Decoder", "org.apache.lucene.util.packed.PackedInts.getDecoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Decoder getDecoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Encoder", "org.apache.lucene.util.packed.PackedInts.getEncoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Encoder getEncoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getReader(org.apache.lucene.store.DataInput)", "public static org.apache.lucene.util.packed.PackedInts$Reader getReader(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$ReaderIterator", "org.apache.lucene.util.packed.PackedInts.getReaderIteratorNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIteratorNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int, int)"], ["org.apache.lucene.util.packed.PackedInts$ReaderIterator", "org.apache.lucene.util.packed.PackedInts.getReaderIterator(org.apache.lucene.store.DataInput, int)", "public static org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIterator(org.apache.lucene.store.DataInput, int) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getDirectReader(org.apache.lucene.store.IndexInput)", "public static org.apache.lucene.util.packed.PackedInts$Reader getDirectReader(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$Mutable", "org.apache.lucene.util.packed.PackedInts.getMutable(int, int, float)", "public static org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int, int, float)"], ["org.apache.lucene.util.packed.PackedInts$Mutable", "org.apache.lucene.util.packed.PackedInts.getMutable(int, int, org.apache.lucene.util.packed.PackedInts$Format)", "public static org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int, int, org.apache.lucene.util.packed.PackedInts$Format)"], ["org.apache.lucene.util.packed.PackedInts$Writer", "org.apache.lucene.util.packed.PackedInts.getWriterNoHeader(org.apache.lucene.store.DataOutput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Writer", "org.apache.lucene.util.packed.PackedInts.getWriter(org.apache.lucene.store.DataOutput, int, int, float)", "public static org.apache.lucene.util.packed.PackedInts$Writer getWriter(org.apache.lucene.store.DataOutput, int, int, float) throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedInts.bitsRequired(long)", "public static int bitsRequired(long)"], ["int", "org.apache.lucene.util.packed.PackedInts.unsignedBitsRequired(long)", "public static int unsignedBitsRequired(long)"], ["long", "org.apache.lucene.util.packed.PackedInts.maxValue(int)", "public static long maxValue(int)"], ["void", "org.apache.lucene.util.packed.PackedInts.copy(org.apache.lucene.util.packed.PackedInts$Reader, int, org.apache.lucene.util.packed.PackedInts$Mutable, int, int, int)", "public static void copy(org.apache.lucene.util.packed.PackedInts$Reader, int, org.apache.lucene.util.packed.PackedInts$Mutable, int, int, int)"], ["org.apache.lucene.util.packed.PackedLongValues", "org.apache.lucene.util.packed.PackedLongValues$Builder.build()", "public org.apache.lucene.util.packed.PackedLongValues build()"], ["long", "org.apache.lucene.util.packed.PackedLongValues$Builder.ramBytesUsed()", "public final long ramBytesUsed()"], ["long", "org.apache.lucene.util.packed.PackedLongValues$Builder.size()", "public final long size()"], ["org.apache.lucene.util.packed.PackedLongValues$Builder", "org.apache.lucene.util.packed.PackedLongValues$Builder.add(long)", "public org.apache.lucene.util.packed.PackedLongValues$Builder add(long)"], ["boolean", "org.apache.lucene.util.packed.PackedLongValues$Iterator.hasNext()", "public final boolean hasNext()"], ["long", "org.apache.lucene.util.packed.PackedLongValues$Iterator.next()", "public final long next()"], ["org.apache.lucene.util.packed.PackedLongValues$Builder", "org.apache.lucene.util.packed.PackedLongValues.packedBuilder(int, float)", "public static org.apache.lucene.util.packed.PackedLongValues$Builder packedBuilder(int, float)"], ["org.apache.lucene.util.packed.PackedLongValues$Builder", "org.apache.lucene.util.packed.PackedLongValues.packedBuilder(float)", "public static org.apache.lucene.util.packed.PackedLongValues$Builder packedBuilder(float)"], ["org.apache.lucene.util.packed.PackedLongValues$Builder", "org.apache.lucene.util.packed.PackedLongValues.deltaPackedBuilder(int, float)", "public static org.apache.lucene.util.packed.PackedLongValues$Builder deltaPackedBuilder(int, float)"], ["org.apache.lucene.util.packed.PackedLongValues$Builder", "org.apache.lucene.util.packed.PackedLongValues.deltaPackedBuilder(float)", "public static org.apache.lucene.util.packed.PackedLongValues$Builder deltaPackedBuilder(float)"], ["org.apache.lucene.util.packed.PackedLongValues$Builder", "org.apache.lucene.util.packed.PackedLongValues.monotonicBuilder(int, float)", "public static org.apache.lucene.util.packed.PackedLongValues$Builder monotonicBuilder(int, float)"], ["org.apache.lucene.util.packed.PackedLongValues$Builder", "org.apache.lucene.util.packed.PackedLongValues.monotonicBuilder(float)", "public static org.apache.lucene.util.packed.PackedLongValues$Builder monotonicBuilder(float)"], ["long", "org.apache.lucene.util.packed.PackedLongValues.size()", "public final long size()"], ["long", "org.apache.lucene.util.packed.PackedLongValues.get(long)", "public final long get(long)"], ["long", "org.apache.lucene.util.packed.PackedLongValues.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.packed.PackedLongValues$Iterator", "org.apache.lucene.util.packed.PackedLongValues.iterator()", "public org.apache.lucene.util.packed.PackedLongValues$Iterator iterator()"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.packed.PackedReaderIterator.next(int)", "public org.apache.lucene.util.LongsRef next(int) throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedReaderIterator.ord()", "public int ord()"], ["void", "org.apache.lucene.util.packed.PackedWriter.add(long)", "public void add(long) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.PackedWriter.finish()", "public void finish() throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedWriter.ord()", "public int ord()"], ["org.apache.lucene.util.packed.PagedGrowableWriter", "org.apache.lucene.util.packed.PagedGrowableWriter(long, int, int, float)", "public org.apache.lucene.util.packed.PagedGrowableWriter(long, int, int, float)"], ["long", "org.apache.lucene.util.packed.PagedGrowableWriter.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.packed.PagedMutable", "org.apache.lucene.util.packed.PagedMutable(long, int, int, float)", "public org.apache.lucene.util.packed.PagedMutable(long, int, int, float)"], ["long", "org.apache.lucene.util.packed.PagedMutable.ramBytesUsed()", "public long ramBytesUsed()"]]}