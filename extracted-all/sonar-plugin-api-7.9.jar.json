{"sonar-plugin-api-7.9.jar": [["org.sonar.api.scan.filesystem.FileExclusions", "org.sonar.api.scan.filesystem.FileExclusions(org.sonar.api.config.Configuration)", "public org.sonar.api.scan.filesystem.FileExclusions(org.sonar.api.config.Configuration)"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.sourceInclusions()", "public java.lang.String[] sourceInclusions()"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.testInclusions()", "public java.lang.String[] testInclusions()"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.sourceExclusions()", "public java.lang.String[] sourceExclusions()"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.testExclusions()", "public java.lang.String[] testExclusions()"], ["org.sonar.api.scan.filesystem.PathResolver$RelativePath", "org.sonar.api.scan.filesystem.PathResolver$RelativePath(java.io.File, java.lang.String)", "public org.sonar.api.scan.filesystem.PathResolver$RelativePath(java.io.File, java.lang.String)"], ["java.io.File", "org.sonar.api.scan.filesystem.PathResolver$RelativePath.dir()", "public java.io.File dir()"], ["java.lang.String", "org.sonar.api.scan.filesystem.PathResolver$RelativePath.path()", "public java.lang.String path()"], ["org.sonar.api.scan.filesystem.PathResolver", "org.sonar.api.scan.filesystem.PathResolver()", "public org.sonar.api.scan.filesystem.PathResolver()"], ["java.io.File", "org.sonar.api.scan.filesystem.PathResolver.relativeFile(java.io.File, java.lang.String)", "public java.io.File relativeFile(java.io.File, java.lang.String)"], ["java.util.List<java.io.File>", "org.sonar.api.scan.filesystem.PathResolver.relativeFiles(java.io.File, java.util.List<java.lang.String>)", "public java.util.List<java.io.File> relativeFiles(java.io.File, java.util.List<java.lang.String>)"], ["org.sonar.api.scan.filesystem.PathResolver$RelativePath", "org.sonar.api.scan.filesystem.PathResolver.relativePath(java.util.Collection<java.io.File>, java.io.File)", "public org.sonar.api.scan.filesystem.PathResolver$RelativePath relativePath(java.util.Collection<java.io.File>, java.io.File)"], ["java.lang.String", "org.sonar.api.scan.filesystem.PathResolver.relativePath(java.nio.file.Path, java.nio.file.Path)", "public java.lang.String relativePath(java.nio.file.Path, java.nio.file.Path)"], ["java.util.Optional<java.lang.String>", "org.sonar.api.scan.filesystem.PathResolver.relativize(java.nio.file.Path, java.nio.file.Path)", "public static java.util.Optional<java.lang.String> relativize(java.nio.file.Path, java.nio.file.Path)"], ["java.lang.String", "org.sonar.api.scan.filesystem.PathResolver.relativePath(java.io.File, java.io.File)", "public java.lang.String relativePath(java.io.File, java.io.File)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setProviderId(java.lang.String)", "public org.sonar.api.server.authentication.UserIdentity$Builder setProviderId(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setProviderLogin(java.lang.String)", "public org.sonar.api.server.authentication.UserIdentity$Builder setProviderLogin(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setLogin(java.lang.String)", "public org.sonar.api.server.authentication.UserIdentity$Builder setLogin(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setName(java.lang.String)", "public org.sonar.api.server.authentication.UserIdentity$Builder setName(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setEmail(java.lang.String)", "public org.sonar.api.server.authentication.UserIdentity$Builder setEmail(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setGroups(java.util.Set<java.lang.String>)", "public org.sonar.api.server.authentication.UserIdentity$Builder setGroups(java.util.Set<java.lang.String>)"], ["org.sonar.api.server.authentication.UserIdentity", "org.sonar.api.server.authentication.UserIdentity$Builder.build()", "public org.sonar.api.server.authentication.UserIdentity build()"], ["org.sonar.api.server.authentication.UnauthorizedException", "org.sonar.api.server.authentication.UnauthorizedException(java.lang.String)", "public org.sonar.api.server.authentication.UnauthorizedException(java.lang.String)"], ["org.sonar.api.server.authentication.UnauthorizedException", "org.sonar.api.server.authentication.UnauthorizedException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.server.authentication.UnauthorizedException(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.server.authentication.Display.getIconPath()", "public java.lang.String getIconPath()"], ["java.lang.String", "org.sonar.api.server.authentication.Display.getBackgroundColor()", "public java.lang.String getBackgroundColor()"], ["java.lang.String", "org.sonar.api.server.authentication.Display.getHelpMessage()", "public java.lang.String getHelpMessage()"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display.builder()", "public static org.sonar.api.server.authentication.Display$Builder builder()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getProviderId()", "public java.lang.String getProviderId()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getProviderLogin()", "public java.lang.String getProviderLogin()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getLogin()", "public java.lang.String getLogin()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getEmail()", "public java.lang.String getEmail()"], ["boolean", "org.sonar.api.server.authentication.UserIdentity.shouldSyncGroups()", "public boolean shouldSyncGroups()"], ["java.util.Set<java.lang.String>", "org.sonar.api.server.authentication.UserIdentity.getGroups()", "public java.util.Set<java.lang.String> getGroups()"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity.builder()", "public static org.sonar.api.server.authentication.UserIdentity$Builder builder()"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display$Builder.setIconPath(java.lang.String)", "public org.sonar.api.server.authentication.Display$Builder setIconPath(java.lang.String)"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display$Builder.setBackgroundColor(java.lang.String)", "public org.sonar.api.server.authentication.Display$Builder setBackgroundColor(java.lang.String)"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display$Builder.setHelpMessage(java.lang.String)", "public org.sonar.api.server.authentication.Display$Builder setHelpMessage(java.lang.String)"], ["org.sonar.api.server.authentication.Display", "org.sonar.api.server.authentication.Display$Builder.build()", "public org.sonar.api.server.authentication.Display build()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.deprecatedKey()", "public java.lang.String deprecatedKey()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.path()", "public java.lang.String path()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.description()", "public java.lang.String description()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.since()", "public java.lang.String since()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.deprecatedSince()", "public java.lang.String deprecatedSince()"], ["boolean", "org.sonar.api.server.ws.WebService$Action.isPost()", "public boolean isPost()"], ["java.util.List<org.sonar.api.server.ws.Change>", "org.sonar.api.server.ws.WebService$Action.changelog()", "public java.util.List<org.sonar.api.server.ws.Change> changelog()"], ["boolean", "org.sonar.api.server.ws.WebService$Action.isInternal()", "public boolean isInternal()"], ["org.sonar.api.server.ws.RequestHandler", "org.sonar.api.server.ws.WebService$Action.handler()", "public org.sonar.api.server.ws.RequestHandler handler()"], ["java.net.URL", "org.sonar.api.server.ws.WebService$Action.responseExample()", "public java.net.URL responseExample()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.responseExampleAsString()", "public java.lang.String responseExampleAsString()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.responseExampleFormat()", "public java.lang.String responseExampleFormat()"], ["org.sonar.api.server.ws.WebService$Param", "org.sonar.api.server.ws.WebService$Action.param(java.lang.String)", "public org.sonar.api.server.ws.WebService$Param param(java.lang.String)"], ["java.util.Collection<org.sonar.api.server.ws.WebService$Param>", "org.sonar.api.server.ws.WebService$Action.params()", "public java.util.Collection<org.sonar.api.server.ws.WebService$Param> params()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.since()", "public java.lang.String since()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.deprecatedSince()", "public java.lang.String deprecatedSince()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.deprecatedKey()", "public java.lang.String deprecatedKey()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.deprecatedKeySince()", "public java.lang.String deprecatedKeySince()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.description()", "public java.lang.String description()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.exampleValue()", "public java.lang.String exampleValue()"], ["boolean", "org.sonar.api.server.ws.WebService$Param.isRequired()", "public boolean isRequired()"], ["boolean", "org.sonar.api.server.ws.WebService$Param.isInternal()", "public boolean isInternal()"], ["java.util.Set<java.lang.String>", "org.sonar.api.server.ws.WebService$Param.possibleValues()", "public java.util.Set<java.lang.String> possibleValues()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.defaultValue()", "public java.lang.String defaultValue()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.maxValuesAllowed()", "public java.lang.Integer maxValuesAllowed()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.maximumLength()", "public java.lang.Integer maximumLength()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.minimumLength()", "public java.lang.Integer minimumLength()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.maximumValue()", "public java.lang.Integer maximumValue()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.toString()", "public java.lang.String toString()"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest()", "public org.sonar.api.server.ws.internal.SimpleGetRequest()"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.method()", "public java.lang.String method()"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.getMediaType()", "public java.lang.String getMediaType()"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setMediaType(java.lang.String)", "public org.sonar.api.server.ws.internal.SimpleGetRequest setMediaType(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.internal.SimpleGetRequest.hasParam(java.lang.String)", "public boolean hasParam(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.param(java.lang.String)", "public java.lang.String param(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.server.ws.internal.SimpleGetRequest.multiParam(java.lang.String)", "public java.util.List<java.lang.String> multiParam(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.server.ws.internal.SimpleGetRequest.paramAsStrings(java.lang.String)", "public java.util.List<java.lang.String> paramAsStrings(java.lang.String)"], ["java.io.InputStream", "org.sonar.api.server.ws.internal.SimpleGetRequest.paramAsInputStream(java.lang.String)", "public java.io.InputStream paramAsInputStream(java.lang.String)"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setParam(java.lang.String, java.lang.String)", "public org.sonar.api.server.ws.internal.SimpleGetRequest setParam(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.sonar.api.server.ws.internal.SimpleGetRequest.getParams()", "public java.util.Map<java.lang.String, java.lang.String[]> getParams()"], ["org.sonar.api.server.ws.Request$Part", "org.sonar.api.server.ws.internal.SimpleGetRequest.paramAsPart(java.lang.String)", "public org.sonar.api.server.ws.Request$Part paramAsPart(java.lang.String)"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setPart(java.lang.String, java.io.InputStream, java.lang.String)", "public org.sonar.api.server.ws.internal.SimpleGetRequest setPart(java.lang.String, java.io.InputStream, java.lang.String)"], ["org.sonar.api.server.ws.LocalConnector", "org.sonar.api.server.ws.internal.SimpleGetRequest.localConnector()", "public org.sonar.api.server.ws.LocalConnector localConnector()"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.getPath()", "public java.lang.String getPath()"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setPath(java.lang.String)", "public org.sonar.api.server.ws.internal.SimpleGetRequest setPath(java.lang.String)"], ["java.util.Optional<java.lang.String>", "org.sonar.api.server.ws.internal.SimpleGetRequest.header(java.lang.String)", "public java.util.Optional<java.lang.String> header(java.lang.String)"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setHeader(java.lang.String, java.lang.String)", "public org.sonar.api.server.ws.internal.SimpleGetRequest setHeader(java.lang.String, java.lang.String)"], ["org.sonar.api.server.ws.internal.PartImpl", "org.sonar.api.server.ws.internal.PartImpl(java.io.InputStream, java.lang.String)", "public org.sonar.api.server.ws.internal.PartImpl(java.io.InputStream, java.lang.String)"], ["java.io.InputStream", "org.sonar.api.server.ws.internal.PartImpl.getInputStream()", "public java.io.InputStream getInputStream()"], ["java.lang.String", "org.sonar.api.server.ws.internal.PartImpl.getFileName()", "public java.lang.String getFileName()"], ["org.sonar.api.server.ws.internal.ValidatingRequest", "org.sonar.api.server.ws.internal.ValidatingRequest()", "public org.sonar.api.server.ws.internal.ValidatingRequest()"], ["void", "org.sonar.api.server.ws.internal.ValidatingRequest.setAction(org.sonar.api.server.ws.WebService$Action)", "public void setAction(org.sonar.api.server.ws.WebService$Action)"], ["org.sonar.api.server.ws.WebService$Action", "org.sonar.api.server.ws.internal.ValidatingRequest.action()", "public org.sonar.api.server.ws.WebService$Action action()"], ["org.sonar.api.server.ws.LocalConnector", "org.sonar.api.server.ws.internal.ValidatingRequest.localConnector()", "public org.sonar.api.server.ws.LocalConnector localConnector()"], ["void", "org.sonar.api.server.ws.internal.ValidatingRequest.setLocalConnector(org.sonar.api.server.ws.LocalConnector)", "public void setLocalConnector(org.sonar.api.server.ws.LocalConnector)"], ["java.lang.String", "org.sonar.api.server.ws.internal.ValidatingRequest.param(java.lang.String)", "public java.lang.String param(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.server.ws.internal.ValidatingRequest.multiParam(java.lang.String)", "public java.util.List<java.lang.String> multiParam(java.lang.String)"], ["java.io.InputStream", "org.sonar.api.server.ws.internal.ValidatingRequest.paramAsInputStream(java.lang.String)", "public java.io.InputStream paramAsInputStream(java.lang.String)"], ["org.sonar.api.server.ws.Request$Part", "org.sonar.api.server.ws.internal.ValidatingRequest.paramAsPart(java.lang.String)", "public org.sonar.api.server.ws.Request$Part paramAsPart(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.server.ws.internal.ValidatingRequest.paramAsStrings(java.lang.String)", "public java.util.List<java.lang.String> paramAsStrings(java.lang.String)"], ["<E extends java.lang.Enum<E>> java.util.List<E>", "org.sonar.api.server.ws.internal.ValidatingRequest.paramAsEnums(java.lang.String, java.lang.Class<E>)", "public <E extends java.lang.Enum<E>> java.util.List<E> paramAsEnums(java.lang.String, java.lang.Class<E>)"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Controller.path()", "public java.lang.String path()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Controller.description()", "public java.lang.String description()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Controller.since()", "public java.lang.String since()"], ["org.sonar.api.server.ws.WebService$Action", "org.sonar.api.server.ws.WebService$Controller.action(java.lang.String)", "public org.sonar.api.server.ws.WebService$Action action(java.lang.String)"], ["java.util.Collection<org.sonar.api.server.ws.WebService$Action>", "org.sonar.api.server.ws.WebService$Controller.actions()", "public java.util.Collection<org.sonar.api.server.ws.WebService$Action> actions()"], ["boolean", "org.sonar.api.server.ws.WebService$Controller.isInternal()", "public boolean isInternal()"], ["org.sonar.api.server.ws.Request$AbsentStringParam[]", "org.sonar.api.server.ws.Request$AbsentStringParam.values()", "public static org.sonar.api.server.ws.Request$AbsentStringParam[] values()"], ["org.sonar.api.server.ws.Request$AbsentStringParam", "org.sonar.api.server.ws.Request$AbsentStringParam.valueOf(java.lang.String)", "public static org.sonar.api.server.ws.Request$AbsentStringParam valueOf(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request$AbsentStringParam.isPresent()", "public boolean isPresent()"], ["java.lang.String", "org.sonar.api.server.ws.Request$AbsentStringParam.getValue()", "public java.lang.String getValue()"], ["java.lang.String", "org.sonar.api.server.ws.Request$AbsentStringParam.or(java.util.function.Supplier<java.lang.String>)", "public java.lang.String or(java.util.function.Supplier<java.lang.String>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request$AbsentStringParam.emptyAsNull()", "public org.sonar.api.server.ws.Request$StringParam emptyAsNull()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentStringParam.or(java.util.function.Supplier)", "public java.lang.Object or(java.util.function.Supplier)"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentStringParam.getValue()", "public java.lang.Object getValue()"], ["boolean", "org.sonar.api.server.ws.Request$GenericParam.isPresent()", "public boolean isPresent()"], ["T", "org.sonar.api.server.ws.Request$GenericParam.getValue()", "public T getValue()"], ["T", "org.sonar.api.server.ws.Request$GenericParam.or(java.util.function.Supplier<T>)", "public T or(java.util.function.Supplier<T>)"], ["org.sonar.api.server.ws.Change", "org.sonar.api.server.ws.Change(java.lang.String, java.lang.String)", "public org.sonar.api.server.ws.Change(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.Change.getVersion()", "public java.lang.String getVersion()"], ["java.lang.String", "org.sonar.api.server.ws.Change.getDescription()", "public java.lang.String getDescription()"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDeprecatedKey(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewAction setDeprecatedKey(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDescription(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewAction setDescription(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDescription(java.lang.String, java.lang.Object...)", "public org.sonar.api.server.ws.WebService$NewAction setDescription(java.lang.String, java.lang.Object...)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setSince(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewAction setSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDeprecatedSince(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewAction setDeprecatedSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setPost(boolean)", "public org.sonar.api.server.ws.WebService$NewAction setPost(boolean)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setInternal(boolean)", "public org.sonar.api.server.ws.WebService$NewAction setInternal(boolean)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setHandler(org.sonar.api.server.ws.RequestHandler)", "public org.sonar.api.server.ws.WebService$NewAction setHandler(org.sonar.api.server.ws.RequestHandler)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setResponseExample(java.net.URL)", "public org.sonar.api.server.ws.WebService$NewAction setResponseExample(java.net.URL)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setChangelog(org.sonar.api.server.ws.Change...)", "public org.sonar.api.server.ws.WebService$NewAction setChangelog(org.sonar.api.server.ws.Change...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createParam(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewParam createParam(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addPagingParams(int)", "public org.sonar.api.server.ws.WebService$NewAction addPagingParams(int)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addPagingParams(int, int)", "public org.sonar.api.server.ws.WebService$NewAction addPagingParams(int, int)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createPageParam()", "public org.sonar.api.server.ws.WebService$NewParam createPageParam()"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createPageSize(int, int)", "public org.sonar.api.server.ws.WebService$NewParam createPageSize(int, int)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addPagingParamsSince(int, int, java.lang.String)", "public org.sonar.api.server.ws.WebService$NewAction addPagingParamsSince(int, int, java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addFieldsParam(java.util.Collection<?>)", "public org.sonar.api.server.ws.WebService$NewAction addFieldsParam(java.util.Collection<?>)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createFieldsParam(java.util.Collection<?>)", "public org.sonar.api.server.ws.WebService$NewParam createFieldsParam(java.util.Collection<?>)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addSearchQuery(java.lang.String, java.lang.String...)", "public org.sonar.api.server.ws.WebService$NewAction addSearchQuery(java.lang.String, java.lang.String...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createSearchQuery(java.lang.String, java.lang.String...)", "public org.sonar.api.server.ws.WebService$NewParam createSearchQuery(java.lang.String, java.lang.String...)"], ["<V> org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addSortParams(java.util.Collection<V>, V, boolean)", "public <V> org.sonar.api.server.ws.WebService$NewAction addSortParams(java.util.Collection<V>, V, boolean)"], ["<V> org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createSortParams(java.util.Collection<V>, V, boolean)", "public <V> org.sonar.api.server.ws.WebService$NewParam createSortParams(java.util.Collection<V>, V, boolean)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addSelectionModeParam()", "public org.sonar.api.server.ws.WebService$NewAction addSelectionModeParam()"], ["org.sonar.api.server.ws.Request", "org.sonar.api.server.ws.Request()", "public org.sonar.api.server.ws.Request()"], ["java.io.BufferedReader", "org.sonar.api.server.ws.Request.getReader()", "public java.io.BufferedReader getReader()"], ["java.lang.String", "org.sonar.api.server.ws.Request.mandatoryParam(java.lang.String)", "public java.lang.String mandatoryParam(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request.mandatoryParamAsBoolean(java.lang.String)", "public boolean mandatoryParamAsBoolean(java.lang.String)"], ["int", "org.sonar.api.server.ws.Request.mandatoryParamAsInt(java.lang.String)", "public int mandatoryParamAsInt(java.lang.String)"], ["long", "org.sonar.api.server.ws.Request.mandatoryParamAsLong(java.lang.String)", "public long mandatoryParamAsLong(java.lang.String)"], ["<E extends java.lang.Enum<E>> E", "org.sonar.api.server.ws.Request.mandatoryParamAsEnum(java.lang.String, java.lang.Class<E>)", "public <E extends java.lang.Enum<E>> E mandatoryParamAsEnum(java.lang.String, java.lang.Class<E>)"], ["java.util.List<java.lang.String>", "org.sonar.api.server.ws.Request.mandatoryParamAsStrings(java.lang.String)", "public java.util.List<java.lang.String> mandatoryParamAsStrings(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.server.ws.Request.mandatoryMultiParam(java.lang.String)", "public java.util.List<java.lang.String> mandatoryMultiParam(java.lang.String)"], ["org.sonar.api.server.ws.Request$Part", "org.sonar.api.server.ws.Request.mandatoryParamAsPart(java.lang.String)", "public org.sonar.api.server.ws.Request$Part mandatoryParamAsPart(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.Request.param(java.lang.String, java.lang.String)", "public java.lang.String param(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request.paramAsBoolean(java.lang.String, boolean)", "public boolean paramAsBoolean(java.lang.String, boolean)"], ["int", "org.sonar.api.server.ws.Request.paramAsInt(java.lang.String, int)", "public int paramAsInt(java.lang.String, int)"], ["long", "org.sonar.api.server.ws.Request.paramAsLong(java.lang.String, long)", "public long paramAsLong(java.lang.String, long)"], ["java.lang.Boolean", "org.sonar.api.server.ws.Request.paramAsBoolean(java.lang.String)", "public java.lang.Boolean paramAsBoolean(java.lang.String)"], ["java.lang.Integer", "org.sonar.api.server.ws.Request.paramAsInt(java.lang.String)", "public java.lang.Integer paramAsInt(java.lang.String)"], ["java.lang.Long", "org.sonar.api.server.ws.Request.paramAsLong(java.lang.String)", "public java.lang.Long paramAsLong(java.lang.String)"], ["<E extends java.lang.Enum<E>> E", "org.sonar.api.server.ws.Request.paramAsEnum(java.lang.String, java.lang.Class<E>)", "public <E extends java.lang.Enum<E>> E paramAsEnum(java.lang.String, java.lang.Class<E>)"], ["<E extends java.lang.Enum<E>> java.util.List<E>", "org.sonar.api.server.ws.Request.paramAsEnums(java.lang.String, java.lang.Class<E>)", "public <E extends java.lang.Enum<E>> java.util.List<E> paramAsEnums(java.lang.String, java.lang.Class<E>)"], ["java.util.Date", "org.sonar.api.server.ws.Request.paramAsDateTime(java.lang.String)", "public java.util.Date paramAsDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.server.ws.Request.paramAsDate(java.lang.String)", "public java.util.Date paramAsDate(java.lang.String)"], ["<T> org.sonar.api.server.ws.Request$Param<T>", "org.sonar.api.server.ws.Request.getParam(java.lang.String, java.util.function.BiFunction<org.sonar.api.server.ws.Request, java.lang.String, T>)", "public <T> org.sonar.api.server.ws.Request$Param<T> getParam(java.lang.String, java.util.function.BiFunction<org.sonar.api.server.ws.Request, java.lang.String, T>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request.getParam(java.lang.String, java.util.function.Consumer<java.lang.String>)", "public org.sonar.api.server.ws.Request$StringParam getParam(java.lang.String, java.util.function.Consumer<java.lang.String>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request.getParam(java.lang.String)", "public org.sonar.api.server.ws.Request$StringParam getParam(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.server.ws.Request.getHeaders()", "public java.util.Map<java.lang.String, java.lang.String> getHeaders()"], ["void", "org.sonar.api.server.ws.WebService$NewController.done()", "public void done()"], ["org.sonar.api.server.ws.WebService$NewController", "org.sonar.api.server.ws.WebService$NewController.setDescription(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewController setDescription(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewController", "org.sonar.api.server.ws.WebService$NewController.setSince(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewController setSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewController.createAction(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewAction createAction(java.lang.String)"], ["org.sonar.api.server.ws.WebService$SelectionMode[]", "org.sonar.api.server.ws.WebService$SelectionMode.values()", "public static org.sonar.api.server.ws.WebService$SelectionMode[] values()"], ["org.sonar.api.server.ws.WebService$SelectionMode", "org.sonar.api.server.ws.WebService$SelectionMode.valueOf(java.lang.String)", "public static org.sonar.api.server.ws.WebService$SelectionMode valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.WebService$SelectionMode.value()", "public java.lang.String value()"], ["org.sonar.api.server.ws.WebService$SelectionMode", "org.sonar.api.server.ws.WebService$SelectionMode.fromParam(java.lang.String)", "public static org.sonar.api.server.ws.WebService$SelectionMode fromParam(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.sonar.api.server.ws.WebService$SelectionMode.possibleValues()", "public static java.util.Collection<java.lang.String> possibleValues()"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setSince(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewParam setSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDeprecatedSince(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewParam setDeprecatedSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDeprecatedKey(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewParam setDeprecatedKey(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDeprecatedKey(java.lang.String, java.lang.String)", "public org.sonar.api.server.ws.WebService$NewParam setDeprecatedKey(java.lang.String, java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDescription(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewParam setDescription(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDescription(java.lang.String, java.lang.Object...)", "public org.sonar.api.server.ws.WebService$NewParam setDescription(java.lang.String, java.lang.Object...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setRequired(boolean)", "public org.sonar.api.server.ws.WebService$NewParam setRequired(boolean)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setInternal(boolean)", "public org.sonar.api.server.ws.WebService$NewParam setInternal(boolean)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setExampleValue(java.lang.Object)", "public org.sonar.api.server.ws.WebService$NewParam setExampleValue(java.lang.Object)"], ["<T> org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setPossibleValues(T...)", "public <T> org.sonar.api.server.ws.WebService$NewParam setPossibleValues(T...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setBooleanPossibleValues()", "public org.sonar.api.server.ws.WebService$NewParam setBooleanPossibleValues()"], ["<T> org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setPossibleValues(java.util.Collection<T>)", "public <T> org.sonar.api.server.ws.WebService$NewParam setPossibleValues(java.util.Collection<T>)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDefaultValue(java.lang.Object)", "public org.sonar.api.server.ws.WebService$NewParam setDefaultValue(java.lang.Object)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMaxValuesAllowed(java.lang.Integer)", "public org.sonar.api.server.ws.WebService$NewParam setMaxValuesAllowed(java.lang.Integer)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMaximumLength(java.lang.Integer)", "public org.sonar.api.server.ws.WebService$NewParam setMaximumLength(java.lang.Integer)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMinimumLength(java.lang.Integer)", "public org.sonar.api.server.ws.WebService$NewParam setMinimumLength(java.lang.Integer)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMaximumValue(java.lang.Integer)", "public org.sonar.api.server.ws.WebService$NewParam setMaximumValue(java.lang.Integer)"], ["java.lang.String", "org.sonar.api.server.ws.WebService$NewParam.toString()", "public java.lang.String toString()"], ["org.sonar.api.server.ws.WebService$Context", "org.sonar.api.server.ws.WebService$Context()", "public org.sonar.api.server.ws.WebService$Context()"], ["org.sonar.api.server.ws.WebService$NewController", "org.sonar.api.server.ws.WebService$Context.createController(java.lang.String)", "public org.sonar.api.server.ws.WebService$NewController createController(java.lang.String)"], ["org.sonar.api.server.ws.WebService$Controller", "org.sonar.api.server.ws.WebService$Context.controller(java.lang.String)", "public org.sonar.api.server.ws.WebService$Controller controller(java.lang.String)"], ["java.util.List<org.sonar.api.server.ws.WebService$Controller>", "org.sonar.api.server.ws.WebService$Context.controllers()", "public java.util.List<org.sonar.api.server.ws.WebService$Controller> controllers()"], ["org.sonar.api.server.ws.Request$AbsentParam[]", "org.sonar.api.server.ws.Request$AbsentParam.values()", "public static org.sonar.api.server.ws.Request$AbsentParam[] values()"], ["org.sonar.api.server.ws.Request$AbsentParam", "org.sonar.api.server.ws.Request$AbsentParam.valueOf(java.lang.String)", "public static org.sonar.api.server.ws.Request$AbsentParam valueOf(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request$AbsentParam.isPresent()", "public boolean isPresent()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentParam.getValue()", "public java.lang.Object getValue()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentParam.or(java.util.function.Supplier<java.lang.Object>)", "public java.lang.Object or(java.util.function.Supplier<java.lang.Object>)"], ["boolean", "org.sonar.api.server.ws.Request$StringParamImpl.isPresent()", "public boolean isPresent()"], ["java.lang.String", "org.sonar.api.server.ws.Request$StringParamImpl.getValue()", "public java.lang.String getValue()"], ["java.lang.String", "org.sonar.api.server.ws.Request$StringParamImpl.or(java.util.function.Supplier<java.lang.String>)", "public java.lang.String or(java.util.function.Supplier<java.lang.String>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request$StringParamImpl.emptyAsNull()", "public org.sonar.api.server.ws.Request$StringParam emptyAsNull()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$StringParamImpl.or(java.util.function.Supplier)", "public java.lang.Object or(java.util.function.Supplier)"], ["java.lang.Object", "org.sonar.api.server.ws.Request$StringParamImpl.getValue()", "public java.lang.Object getValue()"], ["default", "org.sonar.api.server.ws.WebService.void define(java.lang.Object)", "public default void define(java.lang.Object)"], ["org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction(org.sonar.api.server.debt.DebtRemediationFunction$Type, java.lang.String, java.lang.String)", "public org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction(org.sonar.api.server.debt.DebtRemediationFunction$Type, java.lang.String, java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction$Type", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.type()", "public org.sonar.api.server.debt.DebtRemediationFunction$Type type()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.coefficient()", "public java.lang.String coefficient()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.gapMultiplier()", "public java.lang.String gapMultiplier()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.offset()", "public java.lang.String offset()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.baseEffort()", "public java.lang.String baseEffort()"], ["boolean", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.toString()", "public java.lang.String toString()"], ["org.sonar.api.server.debt.DebtRemediationFunction$Type[]", "org.sonar.api.server.debt.DebtRemediationFunction$Type.values()", "public static org.sonar.api.server.debt.DebtRemediationFunction$Type[] values()"], ["org.sonar.api.server.debt.DebtRemediationFunction$Type", "org.sonar.api.server.debt.DebtRemediationFunction$Type.valueOf(java.lang.String)", "public static org.sonar.api.server.debt.DebtRemediationFunction$Type valueOf(java.lang.String)"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesCoefficient()", "public boolean usesCoefficient()"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesGapMultiplier()", "public boolean usesGapMultiplier()"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesOffset()", "public boolean usesOffset()"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesBaseEffort()", "public boolean usesBaseEffort()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.language()", "public java.lang.String language()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.name()", "public java.lang.String name()"], ["boolean", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.isDefault()", "public boolean isDefault()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.rule(org.sonar.api.rule.RuleKey)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule rule(org.sonar.api.rule.RuleKey)"], ["java.util.List<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule>", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.rules()", "public java.util.List<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule> rules()"], ["boolean", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam.key()", "public java.lang.String key()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam.setOverriddenValue(java.lang.String)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam setOverriddenValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam.overriddenValue()", "public java.lang.String overriddenValue()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.repoKey()", "public java.lang.String repoKey()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.ruleKey()", "public java.lang.String ruleKey()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.overrideSeverity(java.lang.String)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule overrideSeverity(java.lang.String)"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.overrideParam(java.lang.String, java.lang.String)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam overrideParam(java.lang.String, java.lang.String)"], ["java.util.Collection<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam>", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.getOverriddenParams()", "public java.util.Collection<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam> getOverriddenParams()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.repoKey()", "public java.lang.String repoKey()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.ruleKey()", "public java.lang.String ruleKey()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.overriddenSeverity()", "public java.lang.String overriddenSeverity()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.overriddenParam(java.lang.String)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam overriddenParam(java.lang.String)"], ["java.util.List<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam>", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.overriddenParams()", "public java.util.List<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam> overriddenParams()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.toString()", "public java.lang.String toString()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context()", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context.createBuiltInQualityProfile(java.lang.String, java.lang.String)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile createBuiltInQualityProfile(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfile>>", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context.profilesByLanguageAndName()", "public java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfile>> profilesByLanguageAndName()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfile", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context.profile(java.lang.String, java.lang.String)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfile profile(java.lang.String, java.lang.String)"], ["org.sonar.api.server.profile.BuiltInQualityProfileAnnotationLoader", "org.sonar.api.server.profile.BuiltInQualityProfileAnnotationLoader()", "public org.sonar.api.server.profile.BuiltInQualityProfileAnnotationLoader()"], ["void", "org.sonar.api.server.profile.BuiltInQualityProfileAnnotationLoader.load(org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile, java.lang.String, java.lang.Class...)", "public void load(org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile, java.lang.String, java.lang.Class...)"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.setDefault(boolean)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile setDefault(boolean)"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.activateRule(java.lang.String, java.lang.String)", "public org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule activateRule(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.language()", "public java.lang.String language()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.name()", "public java.lang.String name()"], ["boolean", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.isDefault()", "public boolean isDefault()"], ["java.util.Collection<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule>", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.activeRules()", "public java.util.Collection<org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule> activeRules()"], ["void", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.done()", "public void done()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.isExternal()", "public boolean isExternal()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.key()", "public java.lang.String key()"], ["org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.setName(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl setName(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.createRule(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule createRule(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.rule(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule rule(java.lang.String)"], ["java.util.Collection<org.sonar.api.server.rule.RulesDefinition$NewRule>", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.rules()", "public java.util.Collection<org.sonar.api.server.rule.RulesDefinition$NewRule> rules()"], ["void", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.done()", "public void done()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.toString()", "public java.lang.String toString()"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.setName(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRepository setName(java.lang.String)"], ["boolean", "org.sonar.api.server.rule.RuleTagFormat.isValid(java.lang.String)", "public static boolean isValid(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.rule.RuleTagFormat.validate(java.lang.String)", "public static java.lang.String validate(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.sonar.api.server.rule.RuleTagFormat.validate(java.util.Collection<java.lang.String>)", "public static java.util.Set<java.lang.String> validate(java.util.Collection<java.lang.String>)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.linear(java.lang.String)", "public org.sonar.api.server.debt.DebtRemediationFunction linear(java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.linearWithOffset(java.lang.String, java.lang.String)", "public org.sonar.api.server.debt.DebtRemediationFunction linearWithOffset(java.lang.String, java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.constantPerIssue(java.lang.String)", "public org.sonar.api.server.debt.DebtRemediationFunction constantPerIssue(java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.create(org.sonar.api.server.debt.DebtRemediationFunction$Type, java.lang.String, java.lang.String)", "public org.sonar.api.server.debt.DebtRemediationFunction create(org.sonar.api.server.debt.DebtRemediationFunction$Type, java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinitionXmlLoader", "org.sonar.api.server.rule.RulesDefinitionXmlLoader()", "public org.sonar.api.server.rule.RulesDefinitionXmlLoader()"], ["void", "org.sonar.api.server.rule.RulesDefinitionXmlLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.InputStream, java.lang.String)", "public void load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.InputStream, java.lang.String)"], ["void", "org.sonar.api.server.rule.RulesDefinitionXmlLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.InputStream, java.nio.charset.Charset)", "public void load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.InputStream, java.nio.charset.Charset)"], ["void", "org.sonar.api.server.rule.RulesDefinitionXmlLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.Reader)", "public void load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.Reader)"], ["org.sonar.api.server.rule.RulesDefinition$OwaspTop10[]", "org.sonar.api.server.rule.RulesDefinition$OwaspTop10.values()", "public static org.sonar.api.server.rule.RulesDefinition$OwaspTop10[] values()"], ["org.sonar.api.server.rule.RulesDefinition$OwaspTop10", "org.sonar.api.server.rule.RulesDefinition$OwaspTop10.valueOf(java.lang.String)", "public static org.sonar.api.server.rule.RulesDefinition$OwaspTop10 valueOf(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$Repository", "org.sonar.api.server.rule.RulesDefinition$Rule.repository()", "public org.sonar.api.server.rule.RulesDefinition$Repository repository()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.pluginKey()", "public java.lang.String pluginKey()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.name()", "public java.lang.String name()"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.server.rule.RulesDefinition$Rule.scope()", "public org.sonar.api.rule.RuleScope scope()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.server.rule.RulesDefinition$Rule.type()", "public org.sonar.api.rules.RuleType type()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.severity()", "public java.lang.String severity()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.htmlDescription()", "public java.lang.String htmlDescription()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.markdownDescription()", "public java.lang.String markdownDescription()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Rule.template()", "public boolean template()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Rule.activatedByDefault()", "public boolean activatedByDefault()"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.server.rule.RulesDefinition$Rule.status()", "public org.sonar.api.rule.RuleStatus status()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.debtSubCharacteristic()", "public java.lang.String debtSubCharacteristic()"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.RulesDefinition$Rule.debtRemediationFunction()", "public org.sonar.api.server.debt.DebtRemediationFunction debtRemediationFunction()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.effortToFixDescription()", "public java.lang.String effortToFixDescription()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.gapDescription()", "public java.lang.String gapDescription()"], ["org.sonar.api.server.rule.RulesDefinition$Param", "org.sonar.api.server.rule.RulesDefinition$Rule.param(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$Param param(java.lang.String)"], ["java.util.List<org.sonar.api.server.rule.RulesDefinition$Param>", "org.sonar.api.server.rule.RulesDefinition$Rule.params()", "public java.util.List<org.sonar.api.server.rule.RulesDefinition$Param> params()"], ["java.util.Set<java.lang.String>", "org.sonar.api.server.rule.RulesDefinition$Rule.tags()", "public java.util.Set<java.lang.String> tags()"], ["java.util.Set<java.lang.String>", "org.sonar.api.server.rule.RulesDefinition$Rule.securityStandards()", "public java.util.Set<java.lang.String> securityStandards()"], ["java.util.Set<org.sonar.api.rule.RuleKey>", "org.sonar.api.server.rule.RulesDefinition$Rule.deprecatedRuleKeys()", "public java.util.Set<org.sonar.api.rule.RuleKey> deprecatedRuleKeys()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.internalKey()", "public java.lang.String internalKey()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Rule.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RulesDefinition$Rule.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.name()", "public java.lang.String name()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.description()", "public java.lang.String description()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.defaultValue()", "public java.lang.String defaultValue()"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RulesDefinition$Param.type()", "public org.sonar.api.server.rule.RuleParamType type()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Param.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RulesDefinition$Param.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRule.key()", "public java.lang.String key()"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.server.rule.RulesDefinition$NewRule.scope()", "public org.sonar.api.rule.RuleScope scope()"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setScope(org.sonar.api.rule.RuleScope)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setScope(org.sonar.api.rule.RuleScope)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setName(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setName(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setTemplate(boolean)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setTemplate(boolean)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setActivatedByDefault(boolean)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setActivatedByDefault(boolean)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setSeverity(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setSeverity(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setType(org.sonar.api.rules.RuleType)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setType(org.sonar.api.rules.RuleType)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setHtmlDescription(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setHtmlDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setHtmlDescription(java.net.URL)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setHtmlDescription(java.net.URL)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setMarkdownDescription(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setMarkdownDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setMarkdownDescription(java.net.URL)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setMarkdownDescription(java.net.URL)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setStatus(org.sonar.api.rule.RuleStatus)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setStatus(org.sonar.api.rule.RuleStatus)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setDebtSubCharacteristic(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setDebtSubCharacteristic(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$DebtRemediationFunctions", "org.sonar.api.server.rule.RulesDefinition$NewRule.debtRemediationFunctions()", "public org.sonar.api.server.rule.RulesDefinition$DebtRemediationFunctions debtRemediationFunctions()"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setDebtRemediationFunction(org.sonar.api.server.debt.DebtRemediationFunction)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setDebtRemediationFunction(org.sonar.api.server.debt.DebtRemediationFunction)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setEffortToFixDescription(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setEffortToFixDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setGapDescription(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setGapDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewRule.createParam(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewParam createParam(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewRule.param(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewParam param(java.lang.String)"], ["java.util.Collection<org.sonar.api.server.rule.RulesDefinition$NewParam>", "org.sonar.api.server.rule.RulesDefinition$NewRule.params()", "public java.util.Collection<org.sonar.api.server.rule.RulesDefinition$NewParam> params()"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addTags(java.lang.String...)", "public org.sonar.api.server.rule.RulesDefinition$NewRule addTags(java.lang.String...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setTags(java.lang.String...)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setTags(java.lang.String...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addOwaspTop10(org.sonar.api.server.rule.RulesDefinition$OwaspTop10...)", "public org.sonar.api.server.rule.RulesDefinition$NewRule addOwaspTop10(org.sonar.api.server.rule.RulesDefinition$OwaspTop10...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addCwe(int...)", "public org.sonar.api.server.rule.RulesDefinition$NewRule addCwe(int...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setInternalKey(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule setInternalKey(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addDeprecatedRuleKey(java.lang.String, java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRule addDeprecatedRuleKey(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRule.toString()", "public java.lang.String toString()"], ["org.sonar.api.server.rule.RulesDefinition$Context", "org.sonar.api.server.rule.RulesDefinition$Context()", "public org.sonar.api.server.rule.RulesDefinition$Context()"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$Context.createRepository(java.lang.String, java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRepository createRepository(java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$Context.createExternalRepository(java.lang.String, java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRepository createExternalRepository(java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$Context.extendRepository(java.lang.String, java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewRepository extendRepository(java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$Repository", "org.sonar.api.server.rule.RulesDefinition$Context.repository(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$Repository repository(java.lang.String)"], ["java.util.List<org.sonar.api.server.rule.RulesDefinition$Repository>", "org.sonar.api.server.rule.RulesDefinition$Context.repositories()", "public java.util.List<org.sonar.api.server.rule.RulesDefinition$Repository> repositories()"], ["java.util.List<org.sonar.api.server.rule.RulesDefinition$ExtendedRepository>", "org.sonar.api.server.rule.RulesDefinition$Context.extendedRepositories(java.lang.String)", "public java.util.List<org.sonar.api.server.rule.RulesDefinition$ExtendedRepository> extendedRepositories(java.lang.String)"], ["java.util.List<org.sonar.api.server.rule.RulesDefinition$ExtendedRepository>", "org.sonar.api.server.rule.RulesDefinition$Context.extendedRepositories()", "public java.util.List<org.sonar.api.server.rule.RulesDefinition$ExtendedRepository> extendedRepositories()"], ["void", "org.sonar.api.server.rule.RulesDefinition$Context.setCurrentPluginKey(java.lang.String)", "public void setCurrentPluginKey(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinitionI18nLoader", "org.sonar.api.server.rule.RulesDefinitionI18nLoader(org.sonar.api.i18n.RuleI18n)", "public org.sonar.api.server.rule.RulesDefinitionI18nLoader(org.sonar.api.i18n.RuleI18n)"], ["void", "org.sonar.api.server.rule.RulesDefinitionI18nLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository)", "public void load(org.sonar.api.server.rule.RulesDefinition$NewRepository)"], ["java.lang.String", "org.sonar.api.server.rule.RuleParamType.type()", "public java.lang.String type()"], ["java.util.List<java.lang.String>", "org.sonar.api.server.rule.RuleParamType.values()", "public java.util.List<java.lang.String> values()"], ["boolean", "org.sonar.api.server.rule.RuleParamType.multiple()", "public boolean multiple()"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RuleParamType.singleListOfValues(java.lang.String...)", "public static org.sonar.api.server.rule.RuleParamType singleListOfValues(java.lang.String...)"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RuleParamType.multipleListOfValues(java.lang.String...)", "public static org.sonar.api.server.rule.RuleParamType multipleListOfValues(java.lang.String...)"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RuleParamType.parse(java.lang.String)", "public static org.sonar.api.server.rule.RuleParamType parse(java.lang.String)"], ["boolean", "org.sonar.api.server.rule.RuleParamType.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RuleParamType.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RuleParamType.toString()", "public java.lang.String toString()"], ["org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat[]", "org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat.values()", "public static org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat[] values()"], ["org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat", "org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat.valueOf(java.lang.String)", "public static org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat valueOf(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinitionAnnotationLoader", "org.sonar.api.server.rule.RulesDefinitionAnnotationLoader()", "public org.sonar.api.server.rule.RulesDefinitionAnnotationLoader()"], ["void", "org.sonar.api.server.rule.RulesDefinitionAnnotationLoader.load(org.sonar.api.server.rule.RulesDefinition$NewExtendedRepository, java.lang.Class...)", "public void load(org.sonar.api.server.rule.RulesDefinition$NewExtendedRepository, java.lang.Class...)"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.language()", "public java.lang.String language()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.name()", "public java.lang.String name()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.isExternal()", "public boolean isExternal()"], ["org.sonar.api.server.rule.RulesDefinition$Rule", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.rule(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$Rule rule(java.lang.String)"], ["java.util.List<org.sonar.api.server.rule.RulesDefinition$Rule>", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.rules()", "public java.util.List<org.sonar.api.server.rule.RulesDefinition$Rule> rules()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewParam.key()", "public java.lang.String key()"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setName(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewParam setName(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setType(org.sonar.api.server.rule.RuleParamType)", "public org.sonar.api.server.rule.RulesDefinition$NewParam setType(org.sonar.api.server.rule.RuleParamType)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setDescription(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewParam setDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setDefaultValue(java.lang.String)", "public org.sonar.api.server.rule.RulesDefinition$NewParam setDefaultValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.platform.NewUserHandler$Context.getLogin()", "public java.lang.String getLogin()"], ["java.lang.String", "org.sonar.api.platform.NewUserHandler$Context.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.platform.NewUserHandler$Context.getEmail()", "public java.lang.String getEmail()"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context.builder()", "public static org.sonar.api.platform.NewUserHandler$Context$Builder builder()"], ["org.sonar.api.platform.Server", "org.sonar.api.platform.Server()", "public org.sonar.api.platform.Server()"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context$Builder.setLogin(java.lang.String)", "public org.sonar.api.platform.NewUserHandler$Context$Builder setLogin(java.lang.String)"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context$Builder.setName(java.lang.String)", "public org.sonar.api.platform.NewUserHandler$Context$Builder setName(java.lang.String)"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context$Builder.setEmail(java.lang.String)", "public org.sonar.api.platform.NewUserHandler$Context$Builder setEmail(java.lang.String)"], ["org.sonar.api.platform.NewUserHandler$Context", "org.sonar.api.platform.NewUserHandler$Context$Builder.build()", "public org.sonar.api.platform.NewUserHandler$Context build()"], ["org.sonar.api.utils.Paging$Builder", "org.sonar.api.utils.Paging$Builder.withPageSize(int)", "public org.sonar.api.utils.Paging$Builder withPageSize(int)"], ["org.sonar.api.utils.Paging", "org.sonar.api.utils.Paging$Builder.andTotal(int)", "public org.sonar.api.utils.Paging andTotal(int)"], ["java.lang.String", "org.sonar.api.utils.WildcardPattern.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.utils.WildcardPattern.match(java.lang.String)", "public boolean match(java.lang.String)"], ["boolean", "org.sonar.api.utils.WildcardPattern.match(org.sonar.api.utils.WildcardPattern[], java.lang.String)", "public static boolean match(org.sonar.api.utils.WildcardPattern[], java.lang.String)"], ["org.sonar.api.utils.WildcardPattern", "org.sonar.api.utils.WildcardPattern.create(java.lang.String)", "public static org.sonar.api.utils.WildcardPattern create(java.lang.String)"], ["org.sonar.api.utils.WildcardPattern[]", "org.sonar.api.utils.WildcardPattern.create(java.lang.String[])", "public static org.sonar.api.utils.WildcardPattern[] create(java.lang.String[])"], ["org.sonar.api.utils.WildcardPattern", "org.sonar.api.utils.WildcardPattern.create(java.lang.String, java.lang.String)", "public static org.sonar.api.utils.WildcardPattern create(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDate(java.util.Date)", "public static java.lang.String formatDate(java.util.Date)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDate(java.time.Instant)", "public static java.lang.String formatDate(java.time.Instant)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTime(java.util.Date)", "public static java.lang.String formatDateTime(java.util.Date)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTime(long)", "public static java.lang.String formatDateTime(long)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTime(java.time.OffsetDateTime)", "public static java.lang.String formatDateTime(java.time.OffsetDateTime)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTimeNullSafe(java.util.Date)", "public static java.lang.String formatDateTimeNullSafe(java.util.Date)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.longToDate(java.lang.Long)", "public static java.util.Date longToDate(java.lang.Long)"], ["java.lang.Long", "org.sonar.api.utils.DateUtils.dateToLong(java.util.Date)", "public static java.lang.Long dateToLong(java.util.Date)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDate(java.lang.String)", "public static java.util.Date parseDate(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateQuietly(java.lang.String)", "public static java.util.Date parseDateQuietly(java.lang.String)"], ["java.time.LocalDate", "org.sonar.api.utils.DateUtils.parseLocalDate(java.lang.String)", "public static java.time.LocalDate parseLocalDate(java.lang.String)"], ["java.time.LocalDate", "org.sonar.api.utils.DateUtils.parseLocalDateQuietly(java.lang.String)", "public static java.time.LocalDate parseLocalDateQuietly(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateTime(java.lang.String)", "public static java.util.Date parseDateTime(java.lang.String)"], ["java.time.OffsetDateTime", "org.sonar.api.utils.DateUtils.parseOffsetDateTime(java.lang.String)", "public static java.time.OffsetDateTime parseOffsetDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateTimeQuietly(java.lang.String)", "public static java.util.Date parseDateTimeQuietly(java.lang.String)"], ["java.time.OffsetDateTime", "org.sonar.api.utils.DateUtils.parseOffsetDateTimeQuietly(java.lang.String)", "public static java.time.OffsetDateTime parseOffsetDateTimeQuietly(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateOrDateTime(java.lang.String)", "public static java.util.Date parseDateOrDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseStartingDateOrDateTime(java.lang.String)", "public static java.util.Date parseStartingDateOrDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseEndingDateOrDateTime(java.lang.String)", "public static java.util.Date parseEndingDateOrDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.addDays(java.util.Date, int)", "public static java.util.Date addDays(java.util.Date, int)"], ["java.time.Instant", "org.sonar.api.utils.DateUtils.addDays(java.time.Instant, int)", "public static java.time.Instant addDays(java.time.Instant, int)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.truncateToSeconds(java.util.Date)", "public static java.util.Date truncateToSeconds(java.util.Date)"], ["long", "org.sonar.api.utils.DateUtils.truncateToSeconds(long)", "public static long truncateToSeconds(long)"], ["org.sonar.api.utils.System2", "org.sonar.api.utils.System2()", "public org.sonar.api.utils.System2()"], ["long", "org.sonar.api.utils.System2.now()", "public long now()"], ["java.util.Properties", "org.sonar.api.utils.System2.properties()", "public java.util.Properties properties()"], ["java.lang.String", "org.sonar.api.utils.System2.property(java.lang.String)", "public java.lang.String property(java.lang.String)"], ["org.sonar.api.utils.System2", "org.sonar.api.utils.System2.setProperty(java.lang.String, java.lang.String)", "public org.sonar.api.utils.System2 setProperty(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.utils.System2.envVariables()", "public java.util.Map<java.lang.String, java.lang.String> envVariables()"], ["java.lang.String", "org.sonar.api.utils.System2.envVariable(java.lang.String)", "public java.lang.String envVariable(java.lang.String)"], ["boolean", "org.sonar.api.utils.System2.isOsWindows()", "public boolean isOsWindows()"], ["boolean", "org.sonar.api.utils.System2.isJavaAtLeast17()", "public boolean isJavaAtLeast17()"], ["void", "org.sonar.api.utils.System2.println(java.lang.String)", "public void println(java.lang.String)"], ["java.util.TimeZone", "org.sonar.api.utils.System2.getDefaultTimeZone()", "public java.util.TimeZone getDefaultTimeZone()"], ["java.net.URL", "org.sonar.api.utils.System2.getResource(java.lang.String)", "public java.net.URL getResource(java.lang.String)"], ["void", "org.sonar.api.utils.System2.close(java.lang.AutoCloseable)", "public void close(java.lang.AutoCloseable)"], ["org.sonar.api.utils.command.CommandExecutor", "org.sonar.api.utils.command.CommandExecutor.create()", "public static org.sonar.api.utils.command.CommandExecutor create()"], ["int", "org.sonar.api.utils.command.CommandExecutor.execute(org.sonar.api.utils.command.Command, org.sonar.api.utils.command.StreamConsumer, org.sonar.api.utils.command.StreamConsumer, long)", "public int execute(org.sonar.api.utils.command.Command, org.sonar.api.utils.command.StreamConsumer, org.sonar.api.utils.command.StreamConsumer, long)"], ["int", "org.sonar.api.utils.command.CommandExecutor.execute(org.sonar.api.utils.command.Command, long)", "public int execute(org.sonar.api.utils.command.Command, long)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.create(java.lang.String)", "public static org.sonar.api.utils.command.Command create(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.command.Command.getExecutable()", "public java.lang.String getExecutable()"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.command.Command.getArguments()", "public java.util.List<java.lang.String> getArguments()"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addArgument(java.lang.String)", "public org.sonar.api.utils.command.Command addArgument(java.lang.String)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addMaskedArgument(java.lang.String)", "public org.sonar.api.utils.command.Command addMaskedArgument(java.lang.String)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addArguments(java.util.List<java.lang.String>)", "public org.sonar.api.utils.command.Command addArguments(java.util.List<java.lang.String>)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addArguments(java.lang.String[])", "public org.sonar.api.utils.command.Command addArguments(java.lang.String[])"], ["java.io.File", "org.sonar.api.utils.command.Command.getDirectory()", "public java.io.File getDirectory()"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.setDirectory(java.io.File)", "public org.sonar.api.utils.command.Command setDirectory(java.io.File)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.setEnvironmentVariable(java.lang.String, java.lang.String)", "public org.sonar.api.utils.command.Command setEnvironmentVariable(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.utils.command.Command.getEnvironmentVariables()", "public java.util.Map<java.lang.String, java.lang.String> getEnvironmentVariables()"], ["boolean", "org.sonar.api.utils.command.Command.isNewShell()", "public boolean isNewShell()"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.setNewShell(boolean)", "public org.sonar.api.utils.command.Command setNewShell(boolean)"], ["java.lang.String", "org.sonar.api.utils.command.Command.toCommandLine()", "public java.lang.String toCommandLine()"], ["java.lang.String", "org.sonar.api.utils.command.Command.toString()", "public java.lang.String toString()"], ["org.sonar.api.utils.command.TimeoutException", "org.sonar.api.utils.command.TimeoutException(org.sonar.api.utils.command.Command, java.lang.String, java.lang.Throwable)", "public org.sonar.api.utils.command.TimeoutException(org.sonar.api.utils.command.Command, java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.command.StringStreamConsumer", "org.sonar.api.utils.command.StringStreamConsumer()", "public org.sonar.api.utils.command.StringStreamConsumer()"], ["void", "org.sonar.api.utils.command.StringStreamConsumer.consumeLine(java.lang.String)", "public void consumeLine(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.command.StringStreamConsumer.getOutput()", "public java.lang.String getOutput()"], ["org.sonar.api.utils.command.CommandException", "org.sonar.api.utils.command.CommandException(org.sonar.api.utils.command.Command, java.lang.String, java.lang.Throwable)", "public org.sonar.api.utils.command.CommandException(org.sonar.api.utils.command.Command, java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.command.CommandException", "org.sonar.api.utils.command.CommandException(org.sonar.api.utils.command.Command, java.lang.Throwable)", "public org.sonar.api.utils.command.CommandException(org.sonar.api.utils.command.Command, java.lang.Throwable)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.CommandException.getCommand()", "public org.sonar.api.utils.command.Command getCommand()"], ["void", "org.sonar.api.utils.command.CommandExecutor$StreamGobbler.run()", "public void run()"], ["java.lang.Exception", "org.sonar.api.utils.command.CommandExecutor$StreamGobbler.getException()", "public java.lang.Exception getException()"], ["void", "org.sonar.api.utils.command.CommandExecutor$DefaultConsumer.consumeLine(java.lang.String)", "public void consumeLine(java.lang.String)"], ["org.sonar.api.utils.internal.DefaultTempFolder", "org.sonar.api.utils.internal.DefaultTempFolder(java.io.File)", "public org.sonar.api.utils.internal.DefaultTempFolder(java.io.File)"], ["org.sonar.api.utils.internal.DefaultTempFolder", "org.sonar.api.utils.internal.DefaultTempFolder(java.io.File, boolean)", "public org.sonar.api.utils.internal.DefaultTempFolder(java.io.File, boolean)"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newDir()", "public java.io.File newDir()"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newDir(java.lang.String)", "public java.io.File newDir(java.lang.String)"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newFile()", "public java.io.File newFile()"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newFile(java.lang.String, java.lang.String)", "public java.io.File newFile(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.utils.internal.DefaultTempFolder.clean()", "public void clean()"], ["void", "org.sonar.api.utils.internal.DefaultTempFolder.stop()", "public void stop()"], ["org.sonar.api.utils.internal.JUnitTempFolder", "org.sonar.api.utils.internal.JUnitTempFolder()", "public org.sonar.api.utils.internal.JUnitTempFolder()"], ["org.junit.runners.model.Statement", "org.sonar.api.utils.internal.JUnitTempFolder.apply(org.junit.runners.model.Statement, org.junit.runner.Description)", "public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newDir()", "public java.io.File newDir()"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newDir(java.lang.String)", "public java.io.File newDir(java.lang.String)"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newFile()", "public java.io.File newFile()"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newFile(java.lang.String, java.lang.String)", "public java.io.File newFile(java.lang.String, java.lang.String)"], ["org.sonar.api.utils.internal.TempFolderCleaner", "org.sonar.api.utils.internal.TempFolderCleaner(org.sonar.api.utils.TempFolder)", "public org.sonar.api.utils.internal.TempFolderCleaner(org.sonar.api.utils.TempFolder)"], ["void", "org.sonar.api.utils.internal.TempFolderCleaner.start()", "public void start()"], ["void", "org.sonar.api.utils.internal.TempFolderCleaner.stop()", "public void stop()"], ["org.sonar.api.utils.internal.TestSystem2", "org.sonar.api.utils.internal.TestSystem2()", "public org.sonar.api.utils.internal.TestSystem2()"], ["org.sonar.api.utils.internal.TestSystem2", "org.sonar.api.utils.internal.TestSystem2.setNow(long)", "public org.sonar.api.utils.internal.TestSystem2 setNow(long)"], ["long", "org.sonar.api.utils.internal.TestSystem2.now()", "public long now()"], ["org.sonar.api.utils.internal.TestSystem2", "org.sonar.api.utils.internal.TestSystem2.setDefaultTimeZone(java.util.TimeZone)", "public org.sonar.api.utils.internal.TestSystem2 setDefaultTimeZone(java.util.TimeZone)"], ["java.util.TimeZone", "org.sonar.api.utils.internal.TestSystem2.getDefaultTimeZone()", "public java.util.TimeZone getDefaultTimeZone()"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.postVisitDirectory(java.nio.file.Path, java.io.IOException)", "public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.postVisitDirectory(java.lang.Object, java.io.IOException)", "public java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object, java.io.IOException) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.create(int, int, int, int)", "public static org.sonar.api.utils.internal.WorkDuration create(int, int, int, int)"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.createFromValueAndUnit(int, org.sonar.api.utils.internal.WorkDuration$UNIT, int)", "public static org.sonar.api.utils.internal.WorkDuration createFromValueAndUnit(int, org.sonar.api.utils.internal.WorkDuration$UNIT, int)"], ["double", "org.sonar.api.utils.internal.WorkDuration.toWorkingDays()", "public double toWorkingDays()"], ["long", "org.sonar.api.utils.internal.WorkDuration.toLong()", "public long toLong()"], ["long", "org.sonar.api.utils.internal.WorkDuration.toMinutes()", "public long toMinutes()"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.add(org.sonar.api.utils.internal.WorkDuration)", "public org.sonar.api.utils.internal.WorkDuration add(org.sonar.api.utils.internal.WorkDuration)"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.subtract(org.sonar.api.utils.internal.WorkDuration)", "public org.sonar.api.utils.internal.WorkDuration subtract(org.sonar.api.utils.internal.WorkDuration)"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.multiply(int)", "public org.sonar.api.utils.internal.WorkDuration multiply(int)"], ["int", "org.sonar.api.utils.internal.WorkDuration.days()", "public int days()"], ["int", "org.sonar.api.utils.internal.WorkDuration.hours()", "public int hours()"], ["int", "org.sonar.api.utils.internal.WorkDuration.minutes()", "public int minutes()"], ["boolean", "org.sonar.api.utils.internal.WorkDuration.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.utils.internal.WorkDuration.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.utils.internal.WorkDuration.toString()", "public java.lang.String toString()"], ["org.sonar.api.utils.internal.WorkDuration$UNIT[]", "org.sonar.api.utils.internal.WorkDuration$UNIT.values()", "public static org.sonar.api.utils.internal.WorkDuration$UNIT[] values()"], ["org.sonar.api.utils.internal.WorkDuration$UNIT", "org.sonar.api.utils.internal.WorkDuration$UNIT.valueOf(java.lang.String)", "public static org.sonar.api.utils.internal.WorkDuration$UNIT valueOf(java.lang.String)"], ["org.sonar.api.utils.internal.AlwaysIncreasingSystem2", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2(long)", "public org.sonar.api.utils.internal.AlwaysIncreasingSystem2(long)"], ["org.sonar.api.utils.internal.AlwaysIncreasingSystem2", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2(long, int)", "public org.sonar.api.utils.internal.AlwaysIncreasingSystem2(long, int)"], ["org.sonar.api.utils.internal.AlwaysIncreasingSystem2", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2()", "public org.sonar.api.utils.internal.AlwaysIncreasingSystem2()"], ["long", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2.now()", "public long now()"], ["boolean", "org.sonar.api.utils.ZipUtils$ZipEntryFilterDelegate.test(java.util.zip.ZipEntry)", "public boolean test(java.util.zip.ZipEntry)"], ["boolean", "org.sonar.api.utils.ZipUtils$ZipEntryFilterDelegate.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["org.sonar.api.utils.Durations", "org.sonar.api.utils.Durations()", "public org.sonar.api.utils.Durations()"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Durations.create(long)", "public org.sonar.api.utils.Duration create(long)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Durations.decode(java.lang.String)", "public org.sonar.api.utils.Duration decode(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.Durations.encode(org.sonar.api.utils.Duration)", "public java.lang.String encode(org.sonar.api.utils.Duration)"], ["java.lang.String", "org.sonar.api.utils.Durations.format(java.util.Locale, org.sonar.api.utils.Duration, org.sonar.api.utils.Durations$DurationFormat)", "public java.lang.String format(java.util.Locale, org.sonar.api.utils.Duration, org.sonar.api.utils.Durations$DurationFormat)"], ["java.lang.String", "org.sonar.api.utils.Durations.format(java.util.Locale, org.sonar.api.utils.Duration)", "public java.lang.String format(java.util.Locale, org.sonar.api.utils.Duration)"], ["java.lang.String", "org.sonar.api.utils.Durations.format(org.sonar.api.utils.Duration)", "public java.lang.String format(org.sonar.api.utils.Duration)"], ["int", "org.sonar.api.utils.Version.major()", "public int major()"], ["int", "org.sonar.api.utils.Version.minor()", "public int minor()"], ["int", "org.sonar.api.utils.Version.patch()", "public int patch()"], ["long", "org.sonar.api.utils.Version.buildNumber()", "public long buildNumber()"], ["java.lang.String", "org.sonar.api.utils.Version.qualifier()", "public java.lang.String qualifier()"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.parse(java.lang.String)", "public static org.sonar.api.utils.Version parse(java.lang.String)"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.create(int, int)", "public static org.sonar.api.utils.Version create(int, int)"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.create(int, int, int)", "public static org.sonar.api.utils.Version create(int, int, int)"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.create(int, int, int, java.lang.String)", "public static org.sonar.api.utils.Version create(int, int, int, java.lang.String)"], ["boolean", "org.sonar.api.utils.Version.isGreaterThanOrEqual(org.sonar.api.utils.Version)", "public boolean isGreaterThanOrEqual(org.sonar.api.utils.Version)"], ["boolean", "org.sonar.api.utils.Version.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.utils.Version.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.utils.Version.compareTo(org.sonar.api.utils.Version)", "public int compareTo(org.sonar.api.utils.Version)"], ["java.lang.String", "org.sonar.api.utils.Version.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.utils.Version.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.sonar.api.utils.dag.CyclicDependenciesException", "org.sonar.api.utils.dag.CyclicDependenciesException(java.lang.String)", "public org.sonar.api.utils.dag.CyclicDependenciesException(java.lang.String)"], ["org.sonar.api.utils.dag.DirectAcyclicGraph", "org.sonar.api.utils.dag.DirectAcyclicGraph(java.lang.Object...)", "public org.sonar.api.utils.dag.DirectAcyclicGraph(java.lang.Object...)"], ["org.sonar.api.utils.dag.Node", "org.sonar.api.utils.dag.DirectAcyclicGraph.add(java.lang.Object, java.lang.Object...)", "public org.sonar.api.utils.dag.Node add(java.lang.Object, java.lang.Object...)"], ["java.util.List", "org.sonar.api.utils.dag.DirectAcyclicGraph.sort()", "public java.util.List sort()"], ["org.sonar.api.utils.dag.Node", "org.sonar.api.utils.dag.Node(java.lang.Object)", "public org.sonar.api.utils.dag.Node(java.lang.Object)"], ["void", "org.sonar.api.utils.dag.Node.reset()", "public void reset()"], ["java.lang.Object", "org.sonar.api.utils.dag.Node.getObject()", "public java.lang.Object getObject()"], ["void", "org.sonar.api.utils.dag.Node.addDependency(org.sonar.api.utils.dag.Node)", "public void addDependency(org.sonar.api.utils.dag.Node)"], ["void", "org.sonar.api.utils.dag.Node.resolveOrder()", "public void resolveOrder()"], ["java.util.List<org.sonar.api.utils.dag.Node>", "org.sonar.api.utils.dag.Node.getDependencies()", "public java.util.List<org.sonar.api.utils.dag.Node> getDependencies()"], ["int", "org.sonar.api.utils.dag.Node.compareTo(org.sonar.api.utils.dag.Node)", "public int compareTo(org.sonar.api.utils.dag.Node)"], ["java.lang.String", "org.sonar.api.utils.dag.Node.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.utils.dag.Node.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.utils.dag.Node.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.utils.dag.Node.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.File, java.io.File)", "public static java.io.File unzip(java.io.File, java.io.File) throws java.io.IOException"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.InputStream, java.io.File)", "public static java.io.File unzip(java.io.InputStream, java.io.File) throws java.io.IOException"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.InputStream, java.io.File, org.sonar.api.utils.ZipUtils$ZipEntryFilter)", "public static java.io.File unzip(java.io.InputStream, java.io.File, org.sonar.api.utils.ZipUtils$ZipEntryFilter) throws java.io.IOException"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.InputStream, java.io.File, java.util.function.Predicate<java.util.zip.ZipEntry>)", "public static java.io.File unzip(java.io.InputStream, java.io.File, java.util.function.Predicate<java.util.zip.ZipEntry>) throws java.io.IOException"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.File, java.io.File, org.sonar.api.utils.ZipUtils$ZipEntryFilter)", "public static java.io.File unzip(java.io.File, java.io.File, org.sonar.api.utils.ZipUtils$ZipEntryFilter) throws java.io.IOException"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.File, java.io.File, java.util.function.Predicate<java.util.zip.ZipEntry>)", "public static java.io.File unzip(java.io.File, java.io.File, java.util.function.Predicate<java.util.zip.ZipEntry>) throws java.io.IOException"], ["void", "org.sonar.api.utils.ZipUtils.zipDir(java.io.File, java.io.File)", "public static void zipDir(java.io.File, java.io.File) throws java.io.IOException"], ["org.sonar.api.utils.UriReader$SchemeProcessor", "org.sonar.api.utils.UriReader$SchemeProcessor()", "public org.sonar.api.utils.UriReader$SchemeProcessor()"], ["org.sonar.api.utils.MessageException", "org.sonar.api.utils.MessageException.of(java.lang.String, java.lang.Throwable)", "public static org.sonar.api.utils.MessageException of(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.MessageException", "org.sonar.api.utils.MessageException.of(java.lang.String)", "public static org.sonar.api.utils.MessageException of(java.lang.String)"], ["org.sonar.api.utils.MessageException", "org.sonar.api.utils.MessageException.ofL10n(java.lang.String, java.lang.Object...)", "public static org.sonar.api.utils.MessageException ofL10n(java.lang.String, java.lang.Object...)"], ["synchronized", "org.sonar.api.utils.MessageException.java.lang.Throwable fillInStackTrace()", "public synchronized java.lang.Throwable fillInStackTrace()"], ["java.lang.String", "org.sonar.api.utils.MessageException.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.utils.MessageException.l10nKey()", "public java.lang.String l10nKey()"], ["java.util.Collection<java.lang.Object>", "org.sonar.api.utils.MessageException.l10nParams()", "public java.util.Collection<java.lang.Object> l10nParams()"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException()", "public org.sonar.api.utils.SonarException()"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException(java.lang.String)", "public org.sonar.api.utils.SonarException(java.lang.String)"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.utils.SonarException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException(java.lang.Throwable)", "public org.sonar.api.utils.SonarException(java.lang.Throwable)"], ["org.sonar.api.utils.Paging", "org.sonar.api.utils.Paging.create(int, int, int)", "public static org.sonar.api.utils.Paging create(int, int, int)"], ["org.sonar.api.utils.Paging$Builder", "org.sonar.api.utils.Paging.forPageIndex(int)", "public static org.sonar.api.utils.Paging$Builder forPageIndex(int)"], ["int", "org.sonar.api.utils.Paging.pageIndex()", "public int pageIndex()"], ["int", "org.sonar.api.utils.Paging.pageSize()", "public int pageSize()"], ["int", "org.sonar.api.utils.Paging.total()", "public int total()"], ["int", "org.sonar.api.utils.Paging.offset()", "public int offset()"], ["int", "org.sonar.api.utils.Paging.offset(int, int)", "public static int offset(int, int)"], ["int", "org.sonar.api.utils.Paging.pages()", "public int pages()"], ["boolean", "org.sonar.api.utils.Paging.hasNextPage()", "public boolean hasNextPage()"], ["org.sonar.api.utils.UriReader", "org.sonar.api.utils.UriReader(org.sonar.api.utils.UriReader$SchemeProcessor[])", "public org.sonar.api.utils.UriReader(org.sonar.api.utils.UriReader$SchemeProcessor[])"], ["byte[]", "org.sonar.api.utils.UriReader.readBytes(java.net.URI)", "public byte[] readBytes(java.net.URI)"], ["java.lang.String", "org.sonar.api.utils.UriReader.readString(java.net.URI, java.nio.charset.Charset)", "public java.lang.String readString(java.net.URI, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.utils.UriReader.description(java.net.URI)", "public java.lang.String description(java.net.URI)"], ["java.lang.String", "org.sonar.api.utils.PathUtils.sanitize(java.lang.String)", "public static java.lang.String sanitize(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.PathUtils.canonicalPath(java.io.File)", "public static java.lang.String canonicalPath(java.io.File)"], ["java.lang.String[]", "org.sonar.api.utils.UriReader$FileProcessor.getSupportedSchemes()", "public java.lang.String[] getSupportedSchemes()"], ["org.sonar.api.utils.HttpDownloader", "org.sonar.api.utils.HttpDownloader()", "public org.sonar.api.utils.HttpDownloader()"], ["double", "org.sonar.api.utils.ParsingUtils.parseNumber(java.lang.String, java.util.Locale)", "public static double parseNumber(java.lang.String, java.util.Locale) throws java.text.ParseException"], ["double", "org.sonar.api.utils.ParsingUtils.parseNumber(java.lang.String)", "public static double parseNumber(java.lang.String) throws java.text.ParseException"], ["double", "org.sonar.api.utils.ParsingUtils.scaleValue(double)", "public static double scaleValue(double)"], ["double", "org.sonar.api.utils.ParsingUtils.scaleValue(double, int)", "public static double scaleValue(double, int)"], ["org.sonar.api.utils.KeyValueFormat$Converter", "org.sonar.api.utils.KeyValueFormat$Converter()", "public org.sonar.api.utils.KeyValueFormat$Converter()"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.ManifestUtils.getPropertyValues(java.lang.ClassLoader, java.lang.String)", "public static java.util.List<java.lang.String> getPropertyValues(java.lang.ClassLoader, java.lang.String)"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.create()", "public static org.sonar.api.utils.ValidationMessages create()"], ["boolean", "org.sonar.api.utils.ValidationMessages.hasErrors()", "public boolean hasErrors()"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.ValidationMessages.getErrors()", "public java.util.List<java.lang.String> getErrors()"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.addErrorText(java.lang.String)", "public org.sonar.api.utils.ValidationMessages addErrorText(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.ValidationMessages.getWarnings()", "public java.util.List<java.lang.String> getWarnings()"], ["boolean", "org.sonar.api.utils.ValidationMessages.hasWarnings()", "public boolean hasWarnings()"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.addWarningText(java.lang.String)", "public org.sonar.api.utils.ValidationMessages addWarningText(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.ValidationMessages.getInfos()", "public java.util.List<java.lang.String> getInfos()"], ["boolean", "org.sonar.api.utils.ValidationMessages.hasInfos()", "public boolean hasInfos()"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.addInfoText(java.lang.String)", "public org.sonar.api.utils.ValidationMessages addInfoText(java.lang.String)"], ["void", "org.sonar.api.utils.ValidationMessages.log(org.sonar.api.utils.log.Logger)", "public void log(org.sonar.api.utils.log.Logger)"], ["void", "org.sonar.api.utils.ValidationMessages.log(org.slf4j.Logger)", "public void log(org.slf4j.Logger)"], ["java.lang.String", "org.sonar.api.utils.ValidationMessages.toString()", "public java.lang.String toString()"], ["java.util.List<java.lang.reflect.Field>", "org.sonar.api.utils.FieldUtils2.getFields(java.lang.Class, boolean)", "public static java.util.List<java.lang.reflect.Field> getFields(java.lang.Class, boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.of(java.io.Writer)", "public static org.sonar.api.utils.text.JsonWriter of(java.io.Writer)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.setSerializeNulls(boolean)", "public org.sonar.api.utils.text.JsonWriter setSerializeNulls(boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.setSerializeEmptys(boolean)", "public org.sonar.api.utils.text.JsonWriter setSerializeEmptys(boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.beginArray()", "public org.sonar.api.utils.text.JsonWriter beginArray()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.endArray()", "public org.sonar.api.utils.text.JsonWriter endArray()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.beginObject()", "public org.sonar.api.utils.text.JsonWriter beginObject()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.endObject()", "public org.sonar.api.utils.text.JsonWriter endObject()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.name(java.lang.String)", "public org.sonar.api.utils.text.JsonWriter name(java.lang.String)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(boolean)", "public org.sonar.api.utils.text.JsonWriter value(boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(double)", "public org.sonar.api.utils.text.JsonWriter value(double)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(java.lang.String)", "public org.sonar.api.utils.text.JsonWriter value(java.lang.String)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.valueObject(java.lang.Object)", "public org.sonar.api.utils.text.JsonWriter valueObject(java.lang.Object)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.values(java.lang.Iterable<java.lang.String>)", "public org.sonar.api.utils.text.JsonWriter values(java.lang.Iterable<java.lang.String>)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.valueDate(java.util.Date)", "public org.sonar.api.utils.text.JsonWriter valueDate(java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.valueDateTime(java.util.Date)", "public org.sonar.api.utils.text.JsonWriter valueDateTime(java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(long)", "public org.sonar.api.utils.text.JsonWriter value(long)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(java.lang.Number)", "public org.sonar.api.utils.text.JsonWriter value(java.lang.Number)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, java.lang.Number)", "public org.sonar.api.utils.text.JsonWriter prop(java.lang.String, java.lang.Number)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.propDate(java.lang.String, java.util.Date)", "public org.sonar.api.utils.text.JsonWriter propDate(java.lang.String, java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.propDateTime(java.lang.String, java.util.Date)", "public org.sonar.api.utils.text.JsonWriter propDateTime(java.lang.String, java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, java.lang.String)", "public org.sonar.api.utils.text.JsonWriter prop(java.lang.String, java.lang.String)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, boolean)", "public org.sonar.api.utils.text.JsonWriter prop(java.lang.String, boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, long)", "public org.sonar.api.utils.text.JsonWriter prop(java.lang.String, long)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, double)", "public org.sonar.api.utils.text.JsonWriter prop(java.lang.String, double)"], ["void", "org.sonar.api.utils.text.JsonWriter.close()", "public void close()"], ["org.sonar.api.utils.text.CsvWriter", "org.sonar.api.utils.text.CsvWriter.of(java.io.Writer)", "public static org.sonar.api.utils.text.CsvWriter of(java.io.Writer)"], ["org.sonar.api.utils.text.CsvWriter", "org.sonar.api.utils.text.CsvWriter.values(java.lang.String...)", "public org.sonar.api.utils.text.CsvWriter values(java.lang.String...)"], ["void", "org.sonar.api.utils.text.CsvWriter.close()", "public void close()"], ["org.sonar.api.utils.text.WriterException", "org.sonar.api.utils.text.WriterException(java.lang.String)", "public org.sonar.api.utils.text.WriterException(java.lang.String)"], ["org.sonar.api.utils.text.WriterException", "org.sonar.api.utils.text.WriterException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.utils.text.WriterException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.of(java.io.Writer)", "public static org.sonar.api.utils.text.XmlWriter of(java.io.Writer)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.declaration()", "public org.sonar.api.utils.text.XmlWriter declaration()"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.begin(java.lang.String)", "public org.sonar.api.utils.text.XmlWriter begin(java.lang.String)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.end()", "public org.sonar.api.utils.text.XmlWriter end()"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.end(java.lang.String)", "public org.sonar.api.utils.text.XmlWriter end(java.lang.String)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, java.lang.String)", "public org.sonar.api.utils.text.XmlWriter prop(java.lang.String, java.lang.String)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, java.lang.Number)", "public org.sonar.api.utils.text.XmlWriter prop(java.lang.String, java.lang.Number)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, boolean)", "public org.sonar.api.utils.text.XmlWriter prop(java.lang.String, boolean)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, long)", "public org.sonar.api.utils.text.XmlWriter prop(java.lang.String, long)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, double)", "public org.sonar.api.utils.text.XmlWriter prop(java.lang.String, double)"], ["void", "org.sonar.api.utils.text.XmlWriter.close()", "public void close()"], ["boolean", "org.sonar.api.utils.LocalizedMessages$KeyEnumeration.hasMoreElements()", "public boolean hasMoreElements()"], ["java.lang.String", "org.sonar.api.utils.LocalizedMessages$KeyEnumeration.nextElement()", "public java.lang.String nextElement()"], ["java.lang.Object", "org.sonar.api.utils.LocalizedMessages$KeyEnumeration.nextElement()", "public java.lang.Object nextElement()"], ["org.sonar.api.utils.HttpDownloader$HttpException", "org.sonar.api.utils.HttpDownloader$HttpException(java.net.URI, int)", "public org.sonar.api.utils.HttpDownloader$HttpException(java.net.URI, int)"], ["org.sonar.api.utils.HttpDownloader$HttpException", "org.sonar.api.utils.HttpDownloader$HttpException(java.net.URI, int, java.lang.String)", "public org.sonar.api.utils.HttpDownloader$HttpException(java.net.URI, int, java.lang.String)"], ["int", "org.sonar.api.utils.HttpDownloader$HttpException.getResponseCode()", "public int getResponseCode()"], ["java.net.URI", "org.sonar.api.utils.HttpDownloader$HttpException.getUri()", "public java.net.URI getUri()"], ["java.lang.String", "org.sonar.api.utils.HttpDownloader$HttpException.getResponseContent()", "public java.lang.String getResponseContent()"], ["org.sonar.api.utils.LocalizedMessages", "org.sonar.api.utils.LocalizedMessages(java.util.Locale, java.lang.String...)", "public org.sonar.api.utils.LocalizedMessages(java.util.Locale, java.lang.String...)"], ["java.util.Locale", "org.sonar.api.utils.LocalizedMessages.getLocale()", "public java.util.Locale getLocale()"], ["java.lang.String", "org.sonar.api.utils.LocalizedMessages.format(java.lang.String, java.lang.Object...)", "public java.lang.String format(java.lang.String, java.lang.Object...)"], ["java.lang.String", "org.sonar.api.utils.LocalizedMessages.formatQuietly(java.lang.String, java.lang.Object...)", "public java.lang.String formatQuietly(java.lang.String, java.lang.Object...)"], ["java.util.Enumeration<java.lang.String>", "org.sonar.api.utils.LocalizedMessages.getKeys()", "public java.util.Enumeration<java.lang.String> getKeys()"], ["default", "org.sonar.api.utils.log.Logger.void trace(java.util.function.Supplier<java.lang.String>)", "public default void trace(java.util.function.Supplier<java.lang.String>)"], ["default", "org.sonar.api.utils.log.Logger.void debug(java.util.function.Supplier<java.lang.String>)", "public default void debug(java.util.function.Supplier<java.lang.String>)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler()", "public org.sonar.api.utils.log.Profiler()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler.create(org.sonar.api.utils.log.Logger)", "public static org.sonar.api.utils.log.Profiler create(org.sonar.api.utils.log.Logger)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler.createIfTrace(org.sonar.api.utils.log.Logger)", "public static org.sonar.api.utils.log.Profiler createIfTrace(org.sonar.api.utils.log.Logger)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler.createIfDebug(org.sonar.api.utils.log.Logger)", "public static org.sonar.api.utils.log.Profiler createIfDebug(org.sonar.api.utils.log.Logger)"], ["boolean", "org.sonar.api.utils.log.LogbackLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["boolean", "org.sonar.api.utils.log.LogbackLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["boolean", "org.sonar.api.utils.log.LogbackLogger.setLevel(org.sonar.api.utils.log.LoggerLevel)", "public boolean setLevel(org.sonar.api.utils.log.LoggerLevel)"], ["org.sonar.api.utils.log.LoggerLevel", "org.sonar.api.utils.log.LogbackLogger.getLevel()", "public org.sonar.api.utils.log.LoggerLevel getLevel()"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String, java.lang.Object)", "public void trace(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String, java.lang.Object, java.lang.Object)", "public void trace(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String, java.lang.Object...)", "public void trace(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String, java.lang.Object)", "public void debug(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String, java.lang.Object, java.lang.Object)", "public void debug(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String, java.lang.Object...)", "public void debug(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String, java.lang.Object)", "public void info(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String, java.lang.Object, java.lang.Object)", "public void info(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String, java.lang.Object...)", "public void info(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Object)", "public void warn(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Object, java.lang.Object)", "public void warn(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Object...)", "public void warn(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Object)", "public void error(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Object, java.lang.Object)", "public void error(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Object...)", "public void error(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.log.LogTester", "org.sonar.api.utils.log.LogTester()", "public org.sonar.api.utils.log.LogTester()"], ["org.sonar.api.utils.log.LogTester", "org.sonar.api.utils.log.LogTester.setLevel(org.sonar.api.utils.log.LoggerLevel)", "public org.sonar.api.utils.log.LogTester setLevel(org.sonar.api.utils.log.LoggerLevel)"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.log.LogTester.logs()", "public java.util.List<java.lang.String> logs()"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.log.LogTester.logs(org.sonar.api.utils.log.LoggerLevel)", "public java.util.List<java.lang.String> logs(org.sonar.api.utils.log.LoggerLevel)"], ["java.util.List<org.sonar.api.utils.log.LogAndArguments>", "org.sonar.api.utils.log.LogTester.getLogs()", "public java.util.List<org.sonar.api.utils.log.LogAndArguments> getLogs()"], ["java.util.List<org.sonar.api.utils.log.LogAndArguments>", "org.sonar.api.utils.log.LogTester.getLogs(org.sonar.api.utils.log.LoggerLevel)", "public java.util.List<org.sonar.api.utils.log.LogAndArguments> getLogs(org.sonar.api.utils.log.LoggerLevel)"], ["org.sonar.api.utils.log.LogTester", "org.sonar.api.utils.log.LogTester.clear()", "public org.sonar.api.utils.log.LogTester clear()"], ["org.sonar.api.utils.log.DefaultProfiler", "org.sonar.api.utils.log.DefaultProfiler(org.sonar.api.utils.log.BaseLogger)", "public org.sonar.api.utils.log.DefaultProfiler(org.sonar.api.utils.log.BaseLogger)"], ["boolean", "org.sonar.api.utils.log.DefaultProfiler.isDebugEnabled()", "public boolean isDebugEnabled()"], ["boolean", "org.sonar.api.utils.log.DefaultProfiler.isTraceEnabled()", "public boolean isTraceEnabled()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.start()", "public org.sonar.api.utils.log.Profiler start()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.startTrace(java.lang.String)", "public org.sonar.api.utils.log.Profiler startTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.startDebug(java.lang.String)", "public org.sonar.api.utils.log.Profiler startDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.startInfo(java.lang.String)", "public org.sonar.api.utils.log.Profiler startInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopTrace()", "public org.sonar.api.utils.log.Profiler stopTrace()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopDebug()", "public org.sonar.api.utils.log.Profiler stopDebug()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopInfo()", "public org.sonar.api.utils.log.Profiler stopInfo()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopInfo(boolean)", "public org.sonar.api.utils.log.Profiler stopInfo(boolean)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopTrace(java.lang.String)", "public org.sonar.api.utils.log.Profiler stopTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopDebug(java.lang.String)", "public org.sonar.api.utils.log.Profiler stopDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopInfo(java.lang.String)", "public org.sonar.api.utils.log.Profiler stopInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.addContext(java.lang.String, java.lang.Object)", "public org.sonar.api.utils.log.Profiler addContext(java.lang.String, java.lang.Object)"], ["org.sonar.api.utils.log.Loggers", "org.sonar.api.utils.log.Loggers()", "public org.sonar.api.utils.log.Loggers()"], ["org.sonar.api.utils.log.Logger", "org.sonar.api.utils.log.Loggers.get(java.lang.Class<?>)", "public static org.sonar.api.utils.log.Logger get(java.lang.Class<?>)"], ["org.sonar.api.utils.log.Logger", "org.sonar.api.utils.log.Loggers.get(java.lang.String)", "public static org.sonar.api.utils.log.Logger get(java.lang.String)"], ["boolean", "org.sonar.api.utils.log.ConsoleLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["boolean", "org.sonar.api.utils.log.ConsoleLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.sonar.api.utils.log.ConsoleLogger.doError(java.lang.String, java.lang.Throwable)", "public void doError(java.lang.String, java.lang.Throwable)"], ["boolean", "org.sonar.api.utils.log.ConsoleLogger.setLevel(org.sonar.api.utils.log.LoggerLevel)", "public boolean setLevel(org.sonar.api.utils.log.LoggerLevel)"], ["org.sonar.api.utils.log.LoggerLevel", "org.sonar.api.utils.log.ConsoleLogger.getLevel()", "public org.sonar.api.utils.log.LoggerLevel getLevel()"], ["boolean", "org.sonar.api.utils.log.NullProfiler.isDebugEnabled()", "public boolean isDebugEnabled()"], ["boolean", "org.sonar.api.utils.log.NullProfiler.isTraceEnabled()", "public boolean isTraceEnabled()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.start()", "public org.sonar.api.utils.log.Profiler start()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.startTrace(java.lang.String)", "public org.sonar.api.utils.log.Profiler startTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.startDebug(java.lang.String)", "public org.sonar.api.utils.log.Profiler startDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.startInfo(java.lang.String)", "public org.sonar.api.utils.log.Profiler startInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopTrace()", "public org.sonar.api.utils.log.Profiler stopTrace()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopDebug()", "public org.sonar.api.utils.log.Profiler stopDebug()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopInfo()", "public org.sonar.api.utils.log.Profiler stopInfo()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopTrace(java.lang.String)", "public org.sonar.api.utils.log.Profiler stopTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopDebug(java.lang.String)", "public org.sonar.api.utils.log.Profiler stopDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopInfo(java.lang.String)", "public org.sonar.api.utils.log.Profiler stopInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.addContext(java.lang.String, java.lang.Object)", "public org.sonar.api.utils.log.Profiler addContext(java.lang.String, java.lang.Object)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopInfo(boolean)", "public org.sonar.api.utils.log.Profiler stopInfo(boolean)"], ["java.lang.String", "org.sonar.api.utils.log.LogAndArguments.getRawMsg()", "public java.lang.String getRawMsg()"], ["java.util.Optional<java.lang.Object[]>", "org.sonar.api.utils.log.LogAndArguments.getArgs()", "public java.util.Optional<java.lang.Object[]> getArgs()"], ["java.lang.String", "org.sonar.api.utils.log.LogAndArguments.getFormattedMsg()", "public java.lang.String getFormattedMsg()"], ["java.lang.String", "org.sonar.api.utils.log.LogAndArguments.toString()", "public java.lang.String toString()"], ["org.sonar.api.utils.log.LoggerLevel[]", "org.sonar.api.utils.log.LoggerLevel.values()", "public static org.sonar.api.utils.log.LoggerLevel[] values()"], ["org.sonar.api.utils.log.LoggerLevel", "org.sonar.api.utils.log.LoggerLevel.valueOf(java.lang.String)", "public static org.sonar.api.utils.log.LoggerLevel valueOf(java.lang.String)"], ["org.sonar.api.utils.log.ListInterceptor", "org.sonar.api.utils.log.ListInterceptor()", "public org.sonar.api.utils.log.ListInterceptor()"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object, java.lang.Object)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object...)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Throwable)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Throwable)"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.log.ListInterceptor.logs()", "public java.util.List<java.lang.String> logs()"], ["java.util.List<java.lang.String>", "org.sonar.api.utils.log.ListInterceptor.logs(org.sonar.api.utils.log.LoggerLevel)", "public java.util.List<java.lang.String> logs(org.sonar.api.utils.log.LoggerLevel)"], ["java.util.List<org.sonar.api.utils.log.LogAndArguments>", "org.sonar.api.utils.log.ListInterceptor.getLogs()", "public java.util.List<org.sonar.api.utils.log.LogAndArguments> getLogs()"], ["java.util.List<org.sonar.api.utils.log.LogAndArguments>", "org.sonar.api.utils.log.ListInterceptor.getLogs(org.sonar.api.utils.log.LoggerLevel)", "public java.util.List<org.sonar.api.utils.log.LogAndArguments> getLogs(org.sonar.api.utils.log.LoggerLevel)"], ["void", "org.sonar.api.utils.log.ListInterceptor.clear()", "public void clear()"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object, java.lang.Object)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object...)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Throwable)", "public void log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Throwable)"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.utils.AnnotationUtils.getAnnotation(java.lang.Object, java.lang.Class<A>)", "public static <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Object, java.lang.Class<A>)"], ["<A> A", "org.sonar.api.utils.AnnotationUtils.getClassAnnotation(java.lang.Object, java.lang.Class<A>)", "public static <A> A getClassAnnotation(java.lang.Object, java.lang.Class<A>)"], ["org.sonar.api.utils.Durations$DurationFormat[]", "org.sonar.api.utils.Durations$DurationFormat.values()", "public static org.sonar.api.utils.Durations$DurationFormat[] values()"], ["org.sonar.api.utils.Durations$DurationFormat", "org.sonar.api.utils.Durations$DurationFormat.valueOf(java.lang.String)", "public static org.sonar.api.utils.Durations$DurationFormat valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.TimeUtils.formatDuration(long)", "public static java.lang.String formatDuration(long)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.create(long)", "public static org.sonar.api.utils.Duration create(long)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.decode(java.lang.String, int)", "public static org.sonar.api.utils.Duration decode(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.utils.Duration.encode(int)", "public java.lang.String encode(int)"], ["long", "org.sonar.api.utils.Duration.toMinutes()", "public long toMinutes()"], ["boolean", "org.sonar.api.utils.Duration.isGreaterThan(org.sonar.api.utils.Duration)", "public boolean isGreaterThan(org.sonar.api.utils.Duration)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.add(org.sonar.api.utils.Duration)", "public org.sonar.api.utils.Duration add(org.sonar.api.utils.Duration)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.subtract(org.sonar.api.utils.Duration)", "public org.sonar.api.utils.Duration subtract(org.sonar.api.utils.Duration)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.multiply(int)", "public org.sonar.api.utils.Duration multiply(int)"], ["boolean", "org.sonar.api.utils.Duration.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.utils.Duration.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.utils.Duration.toString()", "public java.lang.String toString()"], ["org.sonar.api.utils.KeyValueFormat$StringConverter", "org.sonar.api.utils.KeyValueFormat.newStringConverter()", "public static org.sonar.api.utils.KeyValueFormat$StringConverter newStringConverter()"], ["org.sonar.api.utils.KeyValueFormat$ToStringConverter", "org.sonar.api.utils.KeyValueFormat.newToStringConverter()", "public static org.sonar.api.utils.KeyValueFormat$ToStringConverter newToStringConverter()"], ["org.sonar.api.utils.KeyValueFormat$IntegerConverter", "org.sonar.api.utils.KeyValueFormat.newIntegerConverter()", "public static org.sonar.api.utils.KeyValueFormat$IntegerConverter newIntegerConverter()"], ["org.sonar.api.utils.KeyValueFormat$PriorityConverter", "org.sonar.api.utils.KeyValueFormat.newPriorityConverter()", "public static org.sonar.api.utils.KeyValueFormat$PriorityConverter newPriorityConverter()"], ["org.sonar.api.utils.KeyValueFormat$DoubleConverter", "org.sonar.api.utils.KeyValueFormat.newDoubleConverter()", "public static org.sonar.api.utils.KeyValueFormat$DoubleConverter newDoubleConverter()"], ["org.sonar.api.utils.KeyValueFormat$DateConverter", "org.sonar.api.utils.KeyValueFormat.newDateConverter()", "public static org.sonar.api.utils.KeyValueFormat$DateConverter newDateConverter()"], ["org.sonar.api.utils.KeyValueFormat$DateConverter", "org.sonar.api.utils.KeyValueFormat.newDateTimeConverter()", "public static org.sonar.api.utils.KeyValueFormat$DateConverter newDateTimeConverter()"], ["org.sonar.api.utils.KeyValueFormat$DateConverter", "org.sonar.api.utils.KeyValueFormat.newDateConverter(java.lang.String)", "public static org.sonar.api.utils.KeyValueFormat$DateConverter newDateConverter(java.lang.String)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.utils.KeyValueFormat.parse(java.lang.String, org.sonar.api.utils.KeyValueFormat$Converter<K>, org.sonar.api.utils.KeyValueFormat$Converter<V>)", "public static <K, V> java.util.Map<K, V> parse(java.lang.String, org.sonar.api.utils.KeyValueFormat$Converter<K>, org.sonar.api.utils.KeyValueFormat$Converter<V>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.utils.KeyValueFormat.parse(java.lang.String)", "public static java.util.Map<java.lang.String, java.lang.String> parse(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.sonar.api.utils.KeyValueFormat.parseStringInt(java.lang.String)", "public static java.util.Map<java.lang.String, java.lang.Integer> parseStringInt(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Double>", "org.sonar.api.utils.KeyValueFormat.parseStringDouble(java.lang.String)", "public static java.util.Map<java.lang.String, java.lang.Double> parseStringDouble(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.lang.String>", "org.sonar.api.utils.KeyValueFormat.parseIntString(java.lang.String)", "public static java.util.Map<java.lang.Integer, java.lang.String> parseIntString(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.lang.Double>", "org.sonar.api.utils.KeyValueFormat.parseIntDouble(java.lang.String)", "public static java.util.Map<java.lang.Integer, java.lang.Double> parseIntDouble(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.util.Date>", "org.sonar.api.utils.KeyValueFormat.parseIntDate(java.lang.String)", "public static java.util.Map<java.lang.Integer, java.util.Date> parseIntDate(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.lang.Integer>", "org.sonar.api.utils.KeyValueFormat.parseIntInt(java.lang.String)", "public static java.util.Map<java.lang.Integer, java.lang.Integer> parseIntInt(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.util.Date>", "org.sonar.api.utils.KeyValueFormat.parseIntDateTime(java.lang.String)", "public static java.util.Map<java.lang.Integer, java.util.Date> parseIntDateTime(java.lang.String)"], ["<K, V> java.lang.String", "org.sonar.api.utils.KeyValueFormat.format(java.util.Map<K, V>, org.sonar.api.utils.KeyValueFormat$Converter<K>, org.sonar.api.utils.KeyValueFormat$Converter<V>)", "public static <K, V> java.lang.String format(java.util.Map<K, V>, org.sonar.api.utils.KeyValueFormat$Converter<K>, org.sonar.api.utils.KeyValueFormat$Converter<V>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.format(java.util.Map)", "public static java.lang.String format(java.util.Map)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntString(java.util.Map<java.lang.Integer, java.lang.String>)", "public static java.lang.String formatIntString(java.util.Map<java.lang.Integer, java.lang.String>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntDouble(java.util.Map<java.lang.Integer, java.lang.Double>)", "public static java.lang.String formatIntDouble(java.util.Map<java.lang.Integer, java.lang.Double>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntDate(java.util.Map<java.lang.Integer, java.util.Date>)", "public static java.lang.String formatIntDate(java.util.Map<java.lang.Integer, java.util.Date>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntDateTime(java.util.Map<java.lang.Integer, java.util.Date>)", "public static java.lang.String formatIntDateTime(java.util.Map<java.lang.Integer, java.util.Date>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatStringInt(java.util.Map<java.lang.String, java.lang.Integer>)", "public static java.lang.String formatStringInt(java.util.Map<java.lang.String, java.lang.Integer>)"], ["org.sonar.api.SonarQubeSide[]", "org.sonar.api.SonarQubeSide.values()", "public static org.sonar.api.SonarQubeSide[] values()"], ["org.sonar.api.SonarQubeSide", "org.sonar.api.SonarQubeSide.valueOf(java.lang.String)", "public static org.sonar.api.SonarQubeSide valueOf(java.lang.String)"], ["org.sonar.api.SonarProduct[]", "org.sonar.api.SonarProduct.values()", "public static org.sonar.api.SonarProduct[] values()"], ["org.sonar.api.SonarProduct", "org.sonar.api.SonarProduct.valueOf(java.lang.String)", "public static org.sonar.api.SonarProduct valueOf(java.lang.String)"], ["java.util.List<org.sonar.api.measures.Metric>", "org.sonar.api.measures.CoreMetrics.getMetrics()", "public static java.util.List<org.sonar.api.measures.Metric> getMetrics()"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.CoreMetrics.getMetric(java.lang.String)", "public static org.sonar.api.measures.Metric getMetric(java.lang.String)"], ["org.sonar.api.measures.Metric$ValueType[]", "org.sonar.api.measures.Metric$ValueType.values()", "public static org.sonar.api.measures.Metric$ValueType[] values()"], ["org.sonar.api.measures.Metric$ValueType", "org.sonar.api.measures.Metric$ValueType.valueOf(java.lang.String)", "public static org.sonar.api.measures.Metric$ValueType valueOf(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.measures.Metric$ValueType.names()", "public static java.lang.String[] names()"], ["org.sonar.api.measures.Metric$Level[]", "org.sonar.api.measures.Metric$Level.values()", "public static org.sonar.api.measures.Metric$Level[] values()"], ["org.sonar.api.measures.Metric$Level", "org.sonar.api.measures.Metric$Level.valueOf(java.lang.String)", "public static org.sonar.api.measures.Metric$Level valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.measures.Metric$Level.getColorName()", "public java.lang.String getColorName()"], ["java.util.List<java.lang.String>", "org.sonar.api.measures.Metric$Level.names()", "public static java.util.List<java.lang.String> names()"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder(java.lang.String, java.lang.String, org.sonar.api.measures.Metric$ValueType)", "public org.sonar.api.measures.Metric$Builder(java.lang.String, java.lang.String, org.sonar.api.measures.Metric$ValueType)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDescription(java.lang.String)", "public org.sonar.api.measures.Metric$Builder setDescription(java.lang.String)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDirection(java.lang.Integer)", "public org.sonar.api.measures.Metric$Builder setDirection(java.lang.Integer)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setQualitative(java.lang.Boolean)", "public org.sonar.api.measures.Metric$Builder setQualitative(java.lang.Boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDomain(java.lang.String)", "public org.sonar.api.measures.Metric$Builder setDomain(java.lang.String)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setWorstValue(java.lang.Double)", "public org.sonar.api.measures.Metric$Builder setWorstValue(java.lang.Double)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setBestValue(java.lang.Double)", "public org.sonar.api.measures.Metric$Builder setBestValue(java.lang.Double)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setOptimizedBestValue(boolean)", "public org.sonar.api.measures.Metric$Builder setOptimizedBestValue(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setHidden(boolean)", "public org.sonar.api.measures.Metric$Builder setHidden(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setUserManaged(boolean)", "public org.sonar.api.measures.Metric$Builder setUserManaged(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDeleteHistoricalData(boolean)", "public org.sonar.api.measures.Metric$Builder setDeleteHistoricalData(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDecimalScale(int)", "public org.sonar.api.measures.Metric$Builder setDecimalScale(int)"], ["<G extends java.io.Serializable> org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric$Builder.create()", "public <G extends java.io.Serializable> org.sonar.api.measures.Metric<G> create()"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric()", "public org.sonar.api.measures.Metric()"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric(java.lang.String)", "public org.sonar.api.measures.Metric(java.lang.String)"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric(java.lang.String, org.sonar.api.measures.Metric$ValueType)", "public org.sonar.api.measures.Metric(java.lang.String, org.sonar.api.measures.Metric$ValueType)"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric(java.lang.String, java.lang.String, java.lang.String, org.sonar.api.measures.Metric$ValueType, java.lang.Integer, java.lang.Boolean, java.lang.String)", "public org.sonar.api.measures.Metric(java.lang.String, java.lang.String, java.lang.String, org.sonar.api.measures.Metric$ValueType, java.lang.Integer, java.lang.Boolean, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.measures.Metric.getId()", "public java.lang.Integer getId()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setId(java.lang.Integer)", "public org.sonar.api.measures.Metric<G> setId(java.lang.Integer)"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getQualitative()", "public java.lang.Boolean getQualitative()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setQualitative(java.lang.Boolean)", "public org.sonar.api.measures.Metric<G> setQualitative(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.measures.Metric.getKey()", "public java.lang.String getKey()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setKey(java.lang.String)", "public org.sonar.api.measures.Metric<G> setKey(java.lang.String)"], ["org.sonar.api.measures.Metric$ValueType", "org.sonar.api.measures.Metric.getType()", "public org.sonar.api.measures.Metric$ValueType getType()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setType(org.sonar.api.measures.Metric$ValueType)", "public org.sonar.api.measures.Metric<G> setType(org.sonar.api.measures.Metric$ValueType)"], ["java.lang.String", "org.sonar.api.measures.Metric.getDescription()", "public java.lang.String getDescription()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setDescription(java.lang.String)", "public org.sonar.api.measures.Metric<G> setDescription(java.lang.String)"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getUserManaged()", "public java.lang.Boolean getUserManaged()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setUserManaged(java.lang.Boolean)", "public org.sonar.api.measures.Metric<G> setUserManaged(java.lang.Boolean)"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getEnabled()", "public java.lang.Boolean getEnabled()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setEnabled(java.lang.Boolean)", "public org.sonar.api.measures.Metric<G> setEnabled(java.lang.Boolean)"], ["java.lang.Integer", "org.sonar.api.measures.Metric.getDirection()", "public java.lang.Integer getDirection()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setDirection(java.lang.Integer)", "public org.sonar.api.measures.Metric<G> setDirection(java.lang.Integer)"], ["java.lang.String", "org.sonar.api.measures.Metric.getDomain()", "public java.lang.String getDomain()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setDomain(java.lang.String)", "public org.sonar.api.measures.Metric<G> setDomain(java.lang.String)"], ["java.lang.String", "org.sonar.api.measures.Metric.getName()", "public java.lang.String getName()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setName(java.lang.String)", "public org.sonar.api.measures.Metric<G> setName(java.lang.String)"], ["java.lang.Double", "org.sonar.api.measures.Metric.getWorstValue()", "public java.lang.Double getWorstValue()"], ["java.lang.Double", "org.sonar.api.measures.Metric.getBestValue()", "public java.lang.Double getBestValue()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setWorstValue(java.lang.Double)", "public org.sonar.api.measures.Metric<G> setWorstValue(java.lang.Double)"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setBestValue(java.lang.Double)", "public org.sonar.api.measures.Metric<G> setBestValue(java.lang.Double)"], ["boolean", "org.sonar.api.measures.Metric.isNumericType()", "public boolean isNumericType()"], ["boolean", "org.sonar.api.measures.Metric.isDataType()", "public boolean isDataType()"], ["boolean", "org.sonar.api.measures.Metric.isPercentageType()", "public boolean isPercentageType()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setOptimizedBestValue(java.lang.Boolean)", "public org.sonar.api.measures.Metric<G> setOptimizedBestValue(java.lang.Boolean)"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.isOptimizedBestValue()", "public java.lang.Boolean isOptimizedBestValue()"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.isHidden()", "public java.lang.Boolean isHidden()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.setHidden(java.lang.Boolean)", "public org.sonar.api.measures.Metric<G> setHidden(java.lang.Boolean)"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getDeleteHistoricalData()", "public java.lang.Boolean getDeleteHistoricalData()"], ["java.lang.Integer", "org.sonar.api.measures.Metric.getDecimalScale()", "public java.lang.Integer getDecimalScale()"], ["int", "org.sonar.api.measures.Metric.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.measures.Metric.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.measures.Metric.toString()", "public java.lang.String toString()"], ["org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric.merge(org.sonar.api.measures.Metric)", "public org.sonar.api.measures.Metric<G> merge(org.sonar.api.measures.Metric)"], ["java.lang.String", "org.sonar.api.measures.Metric.key()", "public java.lang.String key()"], ["java.lang.Class<G>", "org.sonar.api.measures.Metric.valueType()", "public java.lang.Class<G> valueType()"], ["org.sonar.api.internal.PluginContextImpl$Builder", "org.sonar.api.internal.PluginContextImpl$Builder()", "public org.sonar.api.internal.PluginContextImpl$Builder()"], ["org.sonar.api.internal.PluginContextImpl$Builder", "org.sonar.api.internal.PluginContextImpl$Builder.setSonarRuntime(org.sonar.api.SonarRuntime)", "public org.sonar.api.internal.PluginContextImpl$Builder setSonarRuntime(org.sonar.api.SonarRuntime)"], ["org.sonar.api.internal.PluginContextImpl$Builder", "org.sonar.api.internal.PluginContextImpl$Builder.setBootConfiguration(org.sonar.api.config.Configuration)", "public org.sonar.api.internal.PluginContextImpl$Builder setBootConfiguration(org.sonar.api.config.Configuration)"], ["org.sonar.api.Plugin$Context", "org.sonar.api.internal.PluginContextImpl$Builder.build()", "public org.sonar.api.Plugin$Context build()"], ["org.sonar.api.utils.Version", "org.sonar.api.internal.MetadataLoader.loadVersion(org.sonar.api.utils.System2)", "public static org.sonar.api.utils.Version loadVersion(org.sonar.api.utils.System2)"], ["org.sonar.api.SonarEdition", "org.sonar.api.internal.MetadataLoader.loadEdition(org.sonar.api.utils.System2)", "public static org.sonar.api.SonarEdition loadEdition(org.sonar.api.utils.System2)"], ["org.sonar.api.config.Configuration", "org.sonar.api.internal.PluginContextImpl.getBootConfiguration()", "public org.sonar.api.config.Configuration getBootConfiguration()"], ["org.sonar.api.utils.Version", "org.sonar.api.internal.SonarRuntimeImpl.getApiVersion()", "public org.sonar.api.utils.Version getApiVersion()"], ["org.sonar.api.SonarProduct", "org.sonar.api.internal.SonarRuntimeImpl.getProduct()", "public org.sonar.api.SonarProduct getProduct()"], ["org.sonar.api.SonarQubeSide", "org.sonar.api.internal.SonarRuntimeImpl.getSonarQubeSide()", "public org.sonar.api.SonarQubeSide getSonarQubeSide()"], ["org.sonar.api.SonarEdition", "org.sonar.api.internal.SonarRuntimeImpl.getEdition()", "public org.sonar.api.SonarEdition getEdition()"], ["org.sonar.api.SonarRuntime", "org.sonar.api.internal.SonarRuntimeImpl.forSonarQube(org.sonar.api.utils.Version, org.sonar.api.SonarQubeSide, org.sonar.api.SonarEdition)", "public static org.sonar.api.SonarRuntime forSonarQube(org.sonar.api.utils.Version, org.sonar.api.SonarQubeSide, org.sonar.api.SonarEdition)"], ["org.sonar.api.SonarRuntime", "org.sonar.api.internal.SonarRuntimeImpl.forSonarLint(org.sonar.api.utils.Version)", "public static org.sonar.api.SonarRuntime forSonarLint(org.sonar.api.utils.Version)"], ["org.sonar.api.SonarQubeVersion", "org.sonar.api.SonarQubeVersion(org.sonar.api.utils.Version)", "public org.sonar.api.SonarQubeVersion(org.sonar.api.utils.Version)"], ["org.sonar.api.utils.Version", "org.sonar.api.SonarQubeVersion.get()", "public org.sonar.api.utils.Version get()"], ["boolean", "org.sonar.api.SonarQubeVersion.isGreaterThanOrEqual(org.sonar.api.utils.Version)", "public boolean isGreaterThanOrEqual(org.sonar.api.utils.Version)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.includeDeactivated()", "public org.sonar.api.user.UserQuery$Builder includeDeactivated()"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.logins(java.util.Collection<java.lang.String>)", "public org.sonar.api.user.UserQuery$Builder logins(java.util.Collection<java.lang.String>)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.logins(java.lang.String...)", "public org.sonar.api.user.UserQuery$Builder logins(java.lang.String...)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.searchText(java.lang.String)", "public org.sonar.api.user.UserQuery$Builder searchText(java.lang.String)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.mustBeRoot()", "public org.sonar.api.user.UserQuery$Builder mustBeRoot()"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.mustNotBeRoot()", "public org.sonar.api.user.UserQuery$Builder mustNotBeRoot()"], ["org.sonar.api.user.UserQuery", "org.sonar.api.user.UserQuery$Builder.build()", "public org.sonar.api.user.UserQuery build()"], ["java.util.Collection<java.lang.String>", "org.sonar.api.user.UserQuery.logins()", "public java.util.Collection<java.lang.String> logins()"], ["boolean", "org.sonar.api.user.UserQuery.includeDeactivated()", "public boolean includeDeactivated()"], ["java.lang.String", "org.sonar.api.user.UserQuery.searchText()", "public java.lang.String searchText()"], ["java.lang.Boolean", "org.sonar.api.user.UserQuery.mustBeRoot()", "public java.lang.Boolean mustBeRoot()"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery.builder()", "public static org.sonar.api.user.UserQuery$Builder builder()"], ["void", "org.sonar.api.user.UserGroupValidation.validateGroupName(java.lang.String)", "public static void validateGroupName(java.lang.String)"], ["java.util.List<org.sonar.api.resources.ResourceType>", "org.sonar.api.resources.ResourceTypeTree.getTypes()", "public java.util.List<org.sonar.api.resources.ResourceType> getTypes()"], ["java.util.List<java.lang.String>", "org.sonar.api.resources.ResourceTypeTree.getChildren(java.lang.String)", "public java.util.List<java.lang.String> getChildren(java.lang.String)"], ["org.sonar.api.resources.ResourceType", "org.sonar.api.resources.ResourceTypeTree.getRootType()", "public org.sonar.api.resources.ResourceType getRootType()"], ["java.util.List<java.lang.String>", "org.sonar.api.resources.ResourceTypeTree.getLeaves()", "public java.util.List<java.lang.String> getLeaves()"], ["java.lang.String", "org.sonar.api.resources.ResourceTypeTree.toString()", "public java.lang.String toString()"], ["org.sonar.api.resources.ResourceTypeTree$Builder", "org.sonar.api.resources.ResourceTypeTree.builder()", "public static org.sonar.api.resources.ResourceTypeTree$Builder builder()"], ["org.sonar.api.resources.ResourceTypeTree$Builder", "org.sonar.api.resources.ResourceTypeTree$Builder.addType(org.sonar.api.resources.ResourceType)", "public org.sonar.api.resources.ResourceTypeTree$Builder addType(org.sonar.api.resources.ResourceType)"], ["org.sonar.api.resources.ResourceTypeTree$Builder", "org.sonar.api.resources.ResourceTypeTree$Builder.addRelations(java.lang.String, java.lang.String...)", "public org.sonar.api.resources.ResourceTypeTree$Builder addRelations(java.lang.String, java.lang.String...)"], ["org.sonar.api.resources.ResourceTypeTree", "org.sonar.api.resources.ResourceTypeTree$Builder.build()", "public org.sonar.api.resources.ResourceTypeTree build()"], ["org.sonar.api.resources.Languages", "org.sonar.api.resources.Languages(org.sonar.api.resources.Language...)", "public org.sonar.api.resources.Languages(org.sonar.api.resources.Language...)"], ["org.sonar.api.resources.Languages", "org.sonar.api.resources.Languages()", "public org.sonar.api.resources.Languages()"], ["java.lang.String[]", "org.sonar.api.resources.Languages.getSuffixes(java.lang.String...)", "public java.lang.String[] getSuffixes(java.lang.String...)"], ["org.sonar.api.resources.Language", "org.sonar.api.resources.Languages.get(java.lang.String)", "public org.sonar.api.resources.Language get(java.lang.String)"], ["void", "org.sonar.api.resources.Languages.add(org.sonar.api.resources.Language)", "public void add(org.sonar.api.resources.Language)"], ["org.sonar.api.resources.Language[]", "org.sonar.api.resources.Languages.all()", "public org.sonar.api.resources.Language[] all()"], ["org.sonar.api.resources.AbstractLanguage", "org.sonar.api.resources.AbstractLanguage(java.lang.String)", "public org.sonar.api.resources.AbstractLanguage(java.lang.String)"], ["org.sonar.api.resources.AbstractLanguage", "org.sonar.api.resources.AbstractLanguage(java.lang.String, java.lang.String)", "public org.sonar.api.resources.AbstractLanguage(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.resources.AbstractLanguage.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.resources.AbstractLanguage.getName()", "public java.lang.String getName()"], ["void", "org.sonar.api.resources.AbstractLanguage.setName(java.lang.String)", "public void setName(java.lang.String)"], ["boolean", "org.sonar.api.resources.AbstractLanguage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.resources.AbstractLanguage.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.resources.AbstractLanguage.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.resources.Scopes.isHigherThan(java.lang.String, java.lang.String)", "public static boolean isHigherThan(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.resources.Scopes.isHigherThanOrEquals(java.lang.String, java.lang.String)", "public static boolean isHigherThanOrEquals(java.lang.String, java.lang.String)"], ["org.sonar.api.resources.ResourceTypes", "org.sonar.api.resources.ResourceTypes(org.sonar.api.resources.ResourceTypeTree[])", "public org.sonar.api.resources.ResourceTypes(org.sonar.api.resources.ResourceTypeTree[])"], ["org.sonar.api.resources.ResourceType", "org.sonar.api.resources.ResourceTypes.get(java.lang.String)", "public org.sonar.api.resources.ResourceType get(java.lang.String)"], ["java.util.Collection<org.sonar.api.resources.ResourceType>", "org.sonar.api.resources.ResourceTypes.getAll()", "public java.util.Collection<org.sonar.api.resources.ResourceType> getAll()"], ["java.util.Collection<org.sonar.api.resources.ResourceType>", "org.sonar.api.resources.ResourceTypes.getRoots()", "public java.util.Collection<org.sonar.api.resources.ResourceType> getRoots()"], ["boolean", "org.sonar.api.resources.ResourceTypes.isQualifierPresent(java.lang.String)", "public boolean isQualifierPresent(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.resources.ResourceTypes.getLeavesQualifiers(java.lang.String)", "public java.util.List<java.lang.String> getLeavesQualifiers(java.lang.String)"], ["java.lang.String", "org.sonar.api.resources.ResourceType.getQualifier()", "public java.lang.String getQualifier()"], ["java.lang.String", "org.sonar.api.resources.ResourceType.getIconPath()", "public java.lang.String getIconPath()"], ["boolean", "org.sonar.api.resources.ResourceType.hasSourceCode()", "public boolean hasSourceCode()"], ["boolean", "org.sonar.api.resources.ResourceType.hasProperty(java.lang.String)", "public boolean hasProperty(java.lang.String)"], ["java.lang.String", "org.sonar.api.resources.ResourceType.getStringProperty(java.lang.String)", "public java.lang.String getStringProperty(java.lang.String)"], ["boolean", "org.sonar.api.resources.ResourceType.getBooleanProperty(java.lang.String)", "public boolean getBooleanProperty(java.lang.String)"], ["boolean", "org.sonar.api.resources.ResourceType.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.resources.ResourceType.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.resources.ResourceType.toString()", "public java.lang.String toString()"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType.builder(java.lang.String)", "public static org.sonar.api.resources.ResourceType$Builder builder(java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder(java.lang.String)", "public org.sonar.api.resources.ResourceType$Builder(java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.setIconPath(java.lang.String)", "public org.sonar.api.resources.ResourceType$Builder setIconPath(java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.availableForFilters()", "public org.sonar.api.resources.ResourceType$Builder availableForFilters()"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.hasSourceCode()", "public org.sonar.api.resources.ResourceType$Builder hasSourceCode()"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.setProperty(java.lang.String, java.lang.String)", "public org.sonar.api.resources.ResourceType$Builder setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.setProperty(java.lang.String, boolean)", "public org.sonar.api.resources.ResourceType$Builder setProperty(java.lang.String, boolean)"], ["org.sonar.api.resources.ResourceType", "org.sonar.api.resources.ResourceType$Builder.build()", "public org.sonar.api.resources.ResourceType build()"], ["org.sonar.api.SonarPlugin", "org.sonar.api.SonarPlugin()", "public org.sonar.api.SonarPlugin()"], ["java.lang.String", "org.sonar.api.SonarPlugin.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.SonarPlugin.define(org.sonar.api.Plugin$Context)", "public void define(org.sonar.api.Plugin$Context)"], ["org.sonar.api.web.ServletFilter", "org.sonar.api.web.ServletFilter()", "public org.sonar.api.web.ServletFilter()"], ["org.sonar.api.web.ServletFilter$UrlPattern", "org.sonar.api.web.ServletFilter.doGetPattern()", "public org.sonar.api.web.ServletFilter$UrlPattern doGetPattern()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.create()", "public static org.sonar.api.web.Dashboard create()"], ["org.sonar.api.web.Dashboard$Widget", "org.sonar.api.web.Dashboard.addWidget(java.lang.String, int)", "public org.sonar.api.web.Dashboard$Widget addWidget(java.lang.String, int)"], ["java.util.Collection<org.sonar.api.web.Dashboard$Widget>", "org.sonar.api.web.Dashboard.getWidgets()", "public java.util.Collection<org.sonar.api.web.Dashboard$Widget> getWidgets()"], ["java.util.List<org.sonar.api.web.Dashboard$Widget>", "org.sonar.api.web.Dashboard.getWidgetsOfColumn(int)", "public java.util.List<org.sonar.api.web.Dashboard$Widget> getWidgetsOfColumn(int)"], ["java.lang.String", "org.sonar.api.web.Dashboard.getDescription()", "public java.lang.String getDescription()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setDescription(java.lang.String)", "public org.sonar.api.web.Dashboard setDescription(java.lang.String)"], ["org.sonar.api.web.DashboardLayout", "org.sonar.api.web.Dashboard.getLayout()", "public org.sonar.api.web.DashboardLayout getLayout()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setLayout(org.sonar.api.web.DashboardLayout)", "public org.sonar.api.web.Dashboard setLayout(org.sonar.api.web.DashboardLayout)"], ["boolean", "org.sonar.api.web.Dashboard.isGlobal()", "public boolean isGlobal()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setGlobal(boolean)", "public org.sonar.api.web.Dashboard setGlobal(boolean)"], ["boolean", "org.sonar.api.web.Dashboard.isActivated()", "public boolean isActivated()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setActivated(boolean)", "public org.sonar.api.web.Dashboard setActivated(boolean)"], ["org.sonar.api.web.WidgetLayoutType[]", "org.sonar.api.web.WidgetLayoutType.values()", "public static org.sonar.api.web.WidgetLayoutType[] values()"], ["org.sonar.api.web.WidgetLayoutType", "org.sonar.api.web.WidgetLayoutType.valueOf(java.lang.String)", "public static org.sonar.api.web.WidgetLayoutType valueOf(java.lang.String)"], ["org.sonar.api.web.PageDecoration", "org.sonar.api.web.PageDecoration()", "public org.sonar.api.web.PageDecoration()"], ["org.sonar.api.web.DashboardTemplate", "org.sonar.api.web.DashboardTemplate()", "public org.sonar.api.web.DashboardTemplate()"], ["org.sonar.api.web.Dashboard$Widget", "org.sonar.api.web.Dashboard$Widget.setProperty(java.lang.String, java.lang.String)", "public org.sonar.api.web.Dashboard$Widget setProperty(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.web.Dashboard$Widget.getProperties()", "public java.util.Map<java.lang.String, java.lang.String> getProperties()"], ["java.lang.String", "org.sonar.api.web.Dashboard$Widget.getProperty(java.lang.String)", "public java.lang.String getProperty(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.Dashboard$Widget.getId()", "public java.lang.String getId()"], ["org.sonar.api.web.DashboardLayout[]", "org.sonar.api.web.DashboardLayout.values()", "public static org.sonar.api.web.DashboardLayout[] values()"], ["org.sonar.api.web.DashboardLayout", "org.sonar.api.web.DashboardLayout.valueOf(java.lang.String)", "public static org.sonar.api.web.DashboardLayout valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.DashboardLayout.getCode()", "public java.lang.String getCode()"], ["int", "org.sonar.api.web.DashboardLayout.getColumns()", "public int getColumns()"], ["java.lang.String", "org.sonar.api.web.DashboardLayout.toString()", "public java.lang.String toString()"], ["org.sonar.api.web.AbstractDashboardWidget", "org.sonar.api.web.AbstractDashboardWidget()", "public org.sonar.api.web.AbstractDashboardWidget()"], ["java.lang.String", "org.sonar.api.web.AbstractDashboardWidget.getId()", "public java.lang.String getId()"], ["java.lang.String", "org.sonar.api.web.AbstractDashboardWidget.getTitle()", "public java.lang.String getTitle()"], ["org.sonar.api.web.Section[]", "org.sonar.api.web.Section.values()", "public static org.sonar.api.web.Section[] values()"], ["org.sonar.api.web.Section", "org.sonar.api.web.Section.valueOf(java.lang.String)", "public static org.sonar.api.web.Section valueOf(java.lang.String)"], ["org.sonar.api.web.AbstractRubyTemplate", "org.sonar.api.web.AbstractRubyTemplate()", "public org.sonar.api.web.AbstractRubyTemplate()"], ["java.lang.String", "org.sonar.api.web.AbstractRubyTemplate.getTemplate()", "public java.lang.String getTemplate()"], ["org.sonar.api.web.WidgetPropertyType[]", "org.sonar.api.web.WidgetPropertyType.values()", "public static org.sonar.api.web.WidgetPropertyType[] values()"], ["org.sonar.api.web.WidgetPropertyType", "org.sonar.api.web.WidgetPropertyType.valueOf(java.lang.String)", "public static org.sonar.api.web.WidgetPropertyType valueOf(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.staticResourcePatterns()", "public static java.util.Collection<java.lang.String> staticResourcePatterns()"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.includes(java.lang.String...)", "public org.sonar.api.web.ServletFilter$UrlPattern$Builder includes(java.lang.String...)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.includes(java.util.Collection<java.lang.String>)", "public org.sonar.api.web.ServletFilter$UrlPattern$Builder includes(java.util.Collection<java.lang.String>)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.excludes(java.lang.String...)", "public org.sonar.api.web.ServletFilter$UrlPattern$Builder excludes(java.lang.String...)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.excludes(java.util.Collection<java.lang.String>)", "public org.sonar.api.web.ServletFilter$UrlPattern$Builder excludes(java.util.Collection<java.lang.String>)"], ["org.sonar.api.web.ServletFilter$UrlPattern", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.build()", "public org.sonar.api.web.ServletFilter$UrlPattern build()"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page.builder(java.lang.String)", "public static org.sonar.api.web.page.Page$Builder builder(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.page.Page.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.web.page.Page.getPluginKey()", "public java.lang.String getPluginKey()"], ["java.lang.String", "org.sonar.api.web.page.Page.getName()", "public java.lang.String getName()"], ["java.util.Set<org.sonar.api.web.page.Page$Qualifier>", "org.sonar.api.web.page.Page.getComponentQualifiers()", "public java.util.Set<org.sonar.api.web.page.Page$Qualifier> getComponentQualifiers()"], ["boolean", "org.sonar.api.web.page.Page.isAdmin()", "public boolean isAdmin()"], ["org.sonar.api.web.page.Page$Scope", "org.sonar.api.web.page.Page.getScope()", "public org.sonar.api.web.page.Page$Scope getScope()"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setName(java.lang.String)", "public org.sonar.api.web.page.Page$Builder setName(java.lang.String)"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setAdmin(boolean)", "public org.sonar.api.web.page.Page$Builder setAdmin(boolean)"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setScope(org.sonar.api.web.page.Page$Scope)", "public org.sonar.api.web.page.Page$Builder setScope(org.sonar.api.web.page.Page$Scope)"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setComponentQualifiers(org.sonar.api.web.page.Page$Qualifier...)", "public org.sonar.api.web.page.Page$Builder setComponentQualifiers(org.sonar.api.web.page.Page$Qualifier...)"], ["org.sonar.api.web.page.Page", "org.sonar.api.web.page.Page$Builder.build()", "public org.sonar.api.web.page.Page build()"], ["org.sonar.api.web.page.Page$Qualifier[]", "org.sonar.api.web.page.Page$Qualifier.values()", "public static org.sonar.api.web.page.Page$Qualifier[] values()"], ["org.sonar.api.web.page.Page$Qualifier", "org.sonar.api.web.page.Page$Qualifier.valueOf(java.lang.String)", "public static org.sonar.api.web.page.Page$Qualifier valueOf(java.lang.String)"], ["org.sonar.api.web.page.Page$Qualifier", "org.sonar.api.web.page.Page$Qualifier.fromKey(java.lang.String)", "public static org.sonar.api.web.page.Page$Qualifier fromKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.page.Page$Qualifier.getKey()", "public java.lang.String getKey()"], ["org.sonar.api.web.page.Context", "org.sonar.api.web.page.Context()", "public org.sonar.api.web.page.Context()"], ["org.sonar.api.web.page.Context", "org.sonar.api.web.page.Context.addPage(org.sonar.api.web.page.Page)", "public org.sonar.api.web.page.Context addPage(org.sonar.api.web.page.Page)"], ["java.util.Collection<org.sonar.api.web.page.Page>", "org.sonar.api.web.page.Context.getPages()", "public java.util.Collection<org.sonar.api.web.page.Page> getPages()"], ["org.sonar.api.web.page.Page$Scope[]", "org.sonar.api.web.page.Page$Scope.values()", "public static org.sonar.api.web.page.Page$Scope[] values()"], ["org.sonar.api.web.page.Page$Scope", "org.sonar.api.web.page.Page$Scope.valueOf(java.lang.String)", "public static org.sonar.api.web.page.Page$Scope valueOf(java.lang.String)"], ["boolean", "org.sonar.api.web.ServletFilter$UrlPattern.matches(java.lang.String)", "public boolean matches(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.sonar.api.web.ServletFilter$UrlPattern.getInclusions()", "public java.util.Collection<java.lang.String> getInclusions()"], ["java.util.Collection<java.lang.String>", "org.sonar.api.web.ServletFilter$UrlPattern.getExclusions()", "public java.util.Collection<java.lang.String> getExclusions()"], ["java.lang.String", "org.sonar.api.web.ServletFilter$UrlPattern.getUrl()", "public java.lang.String getUrl()"], ["java.lang.String", "org.sonar.api.web.ServletFilter$UrlPattern.label()", "public java.lang.String label()"], ["org.sonar.api.web.ServletFilter$UrlPattern", "org.sonar.api.web.ServletFilter$UrlPattern.create(java.lang.String)", "public static org.sonar.api.web.ServletFilter$UrlPattern create(java.lang.String)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern.builder()", "public static org.sonar.api.web.ServletFilter$UrlPattern$Builder builder()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile()", "public org.sonar.api.profiles.RulesProfile()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile(java.lang.String, java.lang.String)", "public org.sonar.api.profiles.RulesProfile(java.lang.String, java.lang.String)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile(java.lang.String, java.lang.String, boolean, boolean)", "public org.sonar.api.profiles.RulesProfile(java.lang.String, java.lang.String, boolean, boolean)"], ["java.lang.Integer", "org.sonar.api.profiles.RulesProfile.getId()", "public java.lang.Integer getId()"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.getName()", "public java.lang.String getName()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setName(java.lang.String)", "public org.sonar.api.profiles.RulesProfile setName(java.lang.String)"], ["int", "org.sonar.api.profiles.RulesProfile.getVersion()", "public int getVersion()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setVersion(int)", "public org.sonar.api.profiles.RulesProfile setVersion(int)"], ["java.lang.Boolean", "org.sonar.api.profiles.RulesProfile.getUsed()", "public java.lang.Boolean getUsed()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setUsed(java.lang.Boolean)", "public org.sonar.api.profiles.RulesProfile setUsed(java.lang.Boolean)"], ["java.util.List<org.sonar.api.rules.ActiveRule>", "org.sonar.api.profiles.RulesProfile.getActiveRules()", "public java.util.List<org.sonar.api.rules.ActiveRule> getActiveRules()"], ["java.util.List<org.sonar.api.rules.ActiveRule>", "org.sonar.api.profiles.RulesProfile.getActiveRules(boolean)", "public java.util.List<org.sonar.api.rules.ActiveRule> getActiveRules(boolean)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.removeActiveRule(org.sonar.api.rules.ActiveRule)", "public org.sonar.api.profiles.RulesProfile removeActiveRule(org.sonar.api.rules.ActiveRule)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.addActiveRule(org.sonar.api.rules.ActiveRule)", "public org.sonar.api.profiles.RulesProfile addActiveRule(org.sonar.api.rules.ActiveRule)"], ["void", "org.sonar.api.profiles.RulesProfile.setActiveRules(java.util.List<org.sonar.api.rules.ActiveRule>)", "public void setActiveRules(java.util.List<org.sonar.api.rules.ActiveRule>)"], ["java.lang.Boolean", "org.sonar.api.profiles.RulesProfile.getDefaultProfile()", "public java.lang.Boolean getDefaultProfile()"], ["void", "org.sonar.api.profiles.RulesProfile.setDefaultProfile(java.lang.Boolean)", "public void setDefaultProfile(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.getLanguage()", "public java.lang.String getLanguage()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setLanguage(java.lang.String)", "public org.sonar.api.profiles.RulesProfile setLanguage(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.getParentName()", "public java.lang.String getParentName()"], ["void", "org.sonar.api.profiles.RulesProfile.setParentName(java.lang.String)", "public void setParentName(java.lang.String)"], ["java.util.List<org.sonar.api.rules.ActiveRule>", "org.sonar.api.profiles.RulesProfile.getActiveRules(org.sonar.api.rules.RulePriority)", "public java.util.List<org.sonar.api.rules.ActiveRule> getActiveRules(org.sonar.api.rules.RulePriority)"], ["java.util.List<org.sonar.api.rules.ActiveRule>", "org.sonar.api.profiles.RulesProfile.getActiveRulesByRepository(java.lang.String)", "public java.util.List<org.sonar.api.rules.ActiveRule> getActiveRulesByRepository(java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.getActiveRule(java.lang.String, java.lang.String)", "public org.sonar.api.rules.ActiveRule getActiveRule(java.lang.String, java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.getActiveRuleByConfigKey(java.lang.String, java.lang.String)", "public org.sonar.api.rules.ActiveRule getActiveRuleByConfigKey(java.lang.String, java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.getActiveRule(org.sonar.api.rules.Rule)", "public org.sonar.api.rules.ActiveRule getActiveRule(org.sonar.api.rules.Rule)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.activateRule(org.sonar.api.rules.Rule, org.sonar.api.rules.RulePriority)", "public org.sonar.api.rules.ActiveRule activateRule(org.sonar.api.rules.Rule, org.sonar.api.rules.RulePriority)"], ["boolean", "org.sonar.api.profiles.RulesProfile.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.profiles.RulesProfile.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.sonar.api.profiles.RulesProfile.clone()", "public java.lang.Object clone()"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.toString()", "public java.lang.String toString()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.create(java.lang.String, java.lang.String)", "public static org.sonar.api.profiles.RulesProfile create(java.lang.String, java.lang.String)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.create()", "public static org.sonar.api.profiles.RulesProfile create()"], ["java.lang.String", "org.sonar.api.profiles.ProfileImporter.getKey()", "public java.lang.String getKey()"], ["org.sonar.api.profiles.ProfileImporter", "org.sonar.api.profiles.ProfileImporter.setKey(java.lang.String)", "public final org.sonar.api.profiles.ProfileImporter setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.ProfileImporter.getName()", "public final java.lang.String getName()"], ["org.sonar.api.profiles.ProfileImporter", "org.sonar.api.profiles.ProfileImporter.setName(java.lang.String)", "public final org.sonar.api.profiles.ProfileImporter setName(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.profiles.ProfileImporter.getSupportedLanguages()", "public java.lang.String[] getSupportedLanguages()"], ["boolean", "org.sonar.api.profiles.ProfileImporter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.sonar.api.profiles.ProfileImporter.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.sonar.api.profiles.ProfileImporter.toString()", "public java.lang.String toString()"], ["org.sonar.api.profiles.ProfileDefinition", "org.sonar.api.profiles.ProfileDefinition()", "public org.sonar.api.profiles.ProfileDefinition()"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.getKey()", "public java.lang.String getKey()"], ["org.sonar.api.profiles.ProfileExporter", "org.sonar.api.profiles.ProfileExporter.setKey(java.lang.String)", "public final org.sonar.api.profiles.ProfileExporter setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.getName()", "public final java.lang.String getName()"], ["org.sonar.api.profiles.ProfileExporter", "org.sonar.api.profiles.ProfileExporter.setName(java.lang.String)", "public final org.sonar.api.profiles.ProfileExporter setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.getMimeType()", "public java.lang.String getMimeType()"], ["org.sonar.api.profiles.ProfileExporter", "org.sonar.api.profiles.ProfileExporter.setMimeType(java.lang.String)", "public final org.sonar.api.profiles.ProfileExporter setMimeType(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.profiles.ProfileExporter.getSupportedLanguages()", "public java.lang.String[] getSupportedLanguages()"], ["boolean", "org.sonar.api.profiles.ProfileExporter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.sonar.api.profiles.ProfileExporter.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.toString()", "public java.lang.String toString()"], ["org.sonar.api.profiles.XMLProfileParser", "org.sonar.api.profiles.XMLProfileParser(org.sonar.api.rules.RuleFinder)", "public org.sonar.api.profiles.XMLProfileParser(org.sonar.api.rules.RuleFinder)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.XMLProfileParser.parseResource(java.lang.ClassLoader, java.lang.String, org.sonar.api.utils.ValidationMessages)", "public org.sonar.api.profiles.RulesProfile parseResource(java.lang.ClassLoader, java.lang.String, org.sonar.api.utils.ValidationMessages)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.XMLProfileParser.parse(java.io.Reader, org.sonar.api.utils.ValidationMessages)", "public org.sonar.api.profiles.RulesProfile parse(java.io.Reader, org.sonar.api.utils.ValidationMessages)"], ["org.sonar.api.profiles.XMLProfileSerializer", "org.sonar.api.profiles.XMLProfileSerializer()", "public org.sonar.api.profiles.XMLProfileSerializer()"], ["void", "org.sonar.api.profiles.XMLProfileSerializer.write(org.sonar.api.profiles.RulesProfile, java.io.Writer)", "public void write(org.sonar.api.profiles.RulesProfile, java.io.Writer)"], ["org.sonar.api.profiles.AnnotationProfileParser", "org.sonar.api.profiles.AnnotationProfileParser(org.sonar.api.rules.RuleFinder)", "public org.sonar.api.profiles.AnnotationProfileParser(org.sonar.api.rules.RuleFinder)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.AnnotationProfileParser.parse(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<java.lang.Class>, org.sonar.api.utils.ValidationMessages)", "public org.sonar.api.profiles.RulesProfile parse(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<java.lang.Class>, org.sonar.api.utils.ValidationMessages)"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User()", "public org.sonar.api.database.model.User()"], ["java.lang.String", "org.sonar.api.database.model.User.getLogin()", "public java.lang.String getLogin()"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User.setLogin(java.lang.String)", "public org.sonar.api.database.model.User setLogin(java.lang.String)"], ["java.lang.String", "org.sonar.api.database.model.User.getName()", "public java.lang.String getName()"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User.setName(java.lang.String)", "public org.sonar.api.database.model.User setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.database.model.User.getEmail()", "public java.lang.String getEmail()"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User.setEmail(java.lang.String)", "public org.sonar.api.database.model.User setEmail(java.lang.String)"], ["boolean", "org.sonar.api.database.model.User.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.database.model.User.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.database.model.User.toString()", "public java.lang.String toString()"], ["org.sonar.api.database.BaseIdentifiable", "org.sonar.api.database.BaseIdentifiable()", "public org.sonar.api.database.BaseIdentifiable()"], ["java.lang.Integer", "org.sonar.api.database.BaseIdentifiable.getId()", "public java.lang.Integer getId()"], ["G", "org.sonar.api.database.BaseIdentifiable.setId(java.lang.Integer)", "public G setId(java.lang.Integer)"], ["org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator[]", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.values()", "public static org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator[] values()"], ["org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.valueOf(java.lang.String)", "public static org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.compare(java.lang.Number, java.lang.Number)", "public int compare(java.lang.Number, java.lang.Number)"], ["int", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.ce.measure.Component$Type[]", "org.sonar.api.ce.measure.Component$Type.values()", "public static org.sonar.api.ce.measure.Component$Type[] values()"], ["org.sonar.api.ce.measure.Component$Type", "org.sonar.api.ce.measure.Component$Type.valueOf(java.lang.String)", "public static org.sonar.api.ce.measure.Component$Type valueOf(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestComponent", "org.sonar.api.ce.measure.test.TestComponent(java.lang.String, org.sonar.api.ce.measure.Component$Type, org.sonar.api.ce.measure.Component$FileAttributes)", "public org.sonar.api.ce.measure.test.TestComponent(java.lang.String, org.sonar.api.ce.measure.Component$Type, org.sonar.api.ce.measure.Component$FileAttributes)"], ["org.sonar.api.ce.measure.Component$Type", "org.sonar.api.ce.measure.test.TestComponent.getType()", "public org.sonar.api.ce.measure.Component$Type getType()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent.getKey()", "public java.lang.String getKey()"], ["org.sonar.api.ce.measure.Component$FileAttributes", "org.sonar.api.ce.measure.test.TestComponent.getFileAttributes()", "public org.sonar.api.ce.measure.Component$FileAttributes getFileAttributes()"], ["boolean", "org.sonar.api.ce.measure.test.TestComponent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.ce.measure.test.TestComponent.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent.toString()", "public java.lang.String toString()"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder()", "public org.sonar.api.ce.measure.test.TestIssue$Builder()"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setKey(java.lang.String)", "public org.sonar.api.ce.measure.test.TestIssue$Builder setKey(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setResolution(java.lang.String)", "public org.sonar.api.ce.measure.test.TestIssue$Builder setResolution(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setSeverity(java.lang.String)", "public org.sonar.api.ce.measure.test.TestIssue$Builder setSeverity(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setStatus(java.lang.String)", "public org.sonar.api.ce.measure.test.TestIssue$Builder setStatus(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setRuleKey(org.sonar.api.rule.RuleKey)", "public org.sonar.api.ce.measure.test.TestIssue$Builder setRuleKey(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setEffort(org.sonar.api.utils.Duration)", "public org.sonar.api.ce.measure.test.TestIssue$Builder setEffort(org.sonar.api.utils.Duration)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setType(org.sonar.api.rules.RuleType)", "public org.sonar.api.ce.measure.test.TestIssue$Builder setType(org.sonar.api.rules.RuleType)"], ["org.sonar.api.ce.measure.Issue", "org.sonar.api.ce.measure.test.TestIssue$Builder.build()", "public org.sonar.api.ce.measure.Issue build()"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure()", "public org.sonar.api.ce.measure.test.TestMeasure()"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(double)", "public static org.sonar.api.ce.measure.test.TestMeasure createMeasure(double)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(int)", "public static org.sonar.api.ce.measure.test.TestMeasure createMeasure(int)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(long)", "public static org.sonar.api.ce.measure.test.TestMeasure createMeasure(long)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(java.lang.String)", "public static org.sonar.api.ce.measure.test.TestMeasure createMeasure(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(boolean)", "public static org.sonar.api.ce.measure.test.TestMeasure createMeasure(boolean)"], ["int", "org.sonar.api.ce.measure.test.TestMeasure.getIntValue()", "public int getIntValue()"], ["long", "org.sonar.api.ce.measure.test.TestMeasure.getLongValue()", "public long getLongValue()"], ["double", "org.sonar.api.ce.measure.test.TestMeasure.getDoubleValue()", "public double getDoubleValue()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestMeasure.getStringValue()", "public java.lang.String getStringValue()"], ["boolean", "org.sonar.api.ce.measure.test.TestMeasure.getBooleanValue()", "public boolean getBooleanValue()"], ["org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl(java.lang.String, boolean)", "public org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl(java.lang.String, boolean)"], ["boolean", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl.isUnitTest()", "public boolean isUnitTest()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl.getLanguageKey()", "public java.lang.String getLanguageKey()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.key()", "public java.lang.String key()"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.ce.measure.test.TestIssue.ruleKey()", "public org.sonar.api.rule.RuleKey ruleKey()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.status()", "public java.lang.String status()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.resolution()", "public java.lang.String resolution()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.severity()", "public java.lang.String severity()"], ["org.sonar.api.utils.Duration", "org.sonar.api.ce.measure.test.TestIssue.effort()", "public org.sonar.api.utils.Duration effort()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.ce.measure.test.TestIssue.type()", "public org.sonar.api.rules.RuleType type()"], ["org.sonar.api.ce.measure.test.TestMeasureComputerContext", "org.sonar.api.ce.measure.test.TestMeasureComputerContext(org.sonar.api.ce.measure.Component, org.sonar.api.ce.measure.Settings, org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition)", "public org.sonar.api.ce.measure.test.TestMeasureComputerContext(org.sonar.api.ce.measure.Component, org.sonar.api.ce.measure.Settings, org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition)"], ["org.sonar.api.ce.measure.Component", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getComponent()", "public org.sonar.api.ce.measure.Component getComponent()"], ["org.sonar.api.ce.measure.Settings", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getSettings()", "public org.sonar.api.ce.measure.Settings getSettings()"], ["org.sonar.api.ce.measure.Measure", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getMeasure(java.lang.String)", "public org.sonar.api.ce.measure.Measure getMeasure(java.lang.String)"], ["java.lang.Iterable<org.sonar.api.ce.measure.Measure>", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getChildrenMeasures(java.lang.String)", "public java.lang.Iterable<org.sonar.api.ce.measure.Measure> getChildrenMeasures(java.lang.String)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, int)", "public void addMeasure(java.lang.String, int)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, int)", "public void addInputMeasure(java.lang.String, int)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.Integer...)", "public void addChildrenMeasures(java.lang.String, java.lang.Integer...)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, double)", "public void addMeasure(java.lang.String, double)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, double)", "public void addInputMeasure(java.lang.String, double)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.Double...)", "public void addChildrenMeasures(java.lang.String, java.lang.Double...)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, long)", "public void addMeasure(java.lang.String, long)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, long)", "public void addInputMeasure(java.lang.String, long)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.Long...)", "public void addChildrenMeasures(java.lang.String, java.lang.Long...)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, java.lang.String)", "public void addMeasure(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, boolean)", "public void addMeasure(java.lang.String, boolean)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, boolean)", "public void addInputMeasure(java.lang.String, boolean)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, java.lang.String)", "public void addInputMeasure(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.String...)", "public void addChildrenMeasures(java.lang.String, java.lang.String...)"], ["java.util.List<org.sonar.api.ce.measure.Issue>", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getIssues()", "public java.util.List<org.sonar.api.ce.measure.Issue> getIssues()"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.setIssues(java.util.List<org.sonar.api.ce.measure.Issue>)", "public void setIssues(java.util.List<org.sonar.api.ce.measure.Issue>)"], ["org.sonar.api.ce.measure.test.TestSettings", "org.sonar.api.ce.measure.test.TestSettings()", "public org.sonar.api.ce.measure.test.TestSettings()"], ["org.sonar.api.ce.measure.Settings", "org.sonar.api.ce.measure.test.TestSettings.setValue(java.lang.String, java.lang.String)", "public org.sonar.api.ce.measure.Settings setValue(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestSettings.getString(java.lang.String)", "public java.lang.String getString(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.ce.measure.test.TestSettings.getStringArray(java.lang.String)", "public java.lang.String[] getStringArray(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition.getInputMetrics()", "public java.util.Set<java.lang.String> getInputMetrics()"], ["java.util.Set<java.lang.String>", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition.getOutputMetrics()", "public java.util.Set<java.lang.String> getOutputMetrics()"], ["org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl()", "public org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl()"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl.setInputMetrics(java.lang.String...)", "public org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder setInputMetrics(java.lang.String...)"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl.setOutputMetrics(java.lang.String...)", "public org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder setOutputMetrics(java.lang.String...)"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl.build()", "public org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition build()"], ["org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext()", "public org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext()"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext.newDefinitionBuilder()", "public org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder newDefinitionBuilder()"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder()", "public org.sonar.api.ce.measure.RangeDistributionBuilder()"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder(java.lang.Number[])", "public org.sonar.api.ce.measure.RangeDistributionBuilder(java.lang.Number[])"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder.add(java.lang.Number)", "public org.sonar.api.ce.measure.RangeDistributionBuilder add(java.lang.Number)"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder.add(java.lang.Number, int)", "public org.sonar.api.ce.measure.RangeDistributionBuilder add(java.lang.Number, int)"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder.add(java.lang.String)", "public org.sonar.api.ce.measure.RangeDistributionBuilder add(java.lang.String)"], ["boolean", "org.sonar.api.ce.measure.RangeDistributionBuilder.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "org.sonar.api.ce.measure.RangeDistributionBuilder.build()", "public java.lang.String build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.of(org.sonar.api.ce.posttask.PostProjectAnalysisTask)", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester of(org.sonar.api.ce.posttask.PostProjectAnalysisTask)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newOrganizationBuilder()", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder newOrganizationBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newCeTaskBuilder()", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder newCeTaskBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newProjectBuilder()", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder newProjectBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newBranchBuilder()", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder newBranchBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newQualityGateBuilder()", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder newQualityGateBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newConditionBuilder()", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder newConditionBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newScannerContextBuilder()", "public static org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder newScannerContextBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withOrganization(org.sonar.api.ce.posttask.Organization)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester withOrganization(org.sonar.api.ce.posttask.Organization)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withCeTask(org.sonar.api.ce.posttask.CeTask)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester withCeTask(org.sonar.api.ce.posttask.CeTask)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withProject(org.sonar.api.ce.posttask.Project)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester withProject(org.sonar.api.ce.posttask.Project)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withScannerContext(org.sonar.api.ce.posttask.ScannerContext)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester withScannerContext(org.sonar.api.ce.posttask.ScannerContext)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.at(java.util.Date)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester at(java.util.Date)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withQualityGate(org.sonar.api.ce.posttask.QualityGate)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester withQualityGate(org.sonar.api.ce.posttask.QualityGate)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withBranch(org.sonar.api.ce.posttask.Branch)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester withBranch(org.sonar.api.ce.posttask.Branch)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withAnalysisUuid(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester withAnalysisUuid(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTask$ProjectAnalysis", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.execute()", "public org.sonar.api.ce.posttask.PostProjectAnalysisTask$ProjectAnalysis execute()"], ["org.sonar.api.ce.posttask.QualityGate$Status[]", "org.sonar.api.ce.posttask.QualityGate$Status.values()", "public static org.sonar.api.ce.posttask.QualityGate$Status[] values()"], ["org.sonar.api.ce.posttask.QualityGate$Status", "org.sonar.api.ce.posttask.QualityGate$Status.valueOf(java.lang.String)", "public static org.sonar.api.ce.posttask.QualityGate$Status valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder$1.getId()", "public java.lang.String getId()"], ["org.sonar.api.ce.posttask.CeTask$Status", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder$1.getStatus()", "public org.sonar.api.ce.posttask.CeTask$Status getStatus()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder$1.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder$1.isMain()", "public boolean isMain()"], ["java.util.Optional<java.lang.String>", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder$1.getName()", "public java.util.Optional<java.lang.String> getName()"], ["org.sonar.api.ce.posttask.Branch$Type", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder$1.getType()", "public org.sonar.api.ce.posttask.Branch$Type getType()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder.setId(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder setId(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder.setStatus(org.sonar.api.ce.posttask.CeTask$Status)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder setStatus(org.sonar.api.ce.posttask.CeTask$Status)"], ["org.sonar.api.ce.posttask.CeTask", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder.build()", "public org.sonar.api.ce.posttask.CeTask build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.setAnalysisUuid(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder setAnalysisUuid(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.setDate(java.util.Date)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder setDate(java.util.Date)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.setRevision(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder setRevision(java.lang.String)"], ["org.sonar.api.ce.posttask.Analysis", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.build()", "public org.sonar.api.ce.posttask.Analysis build()"], ["java.util.Optional<org.sonar.api.ce.posttask.Organization>", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getOrganization()", "public java.util.Optional<org.sonar.api.ce.posttask.Organization> getOrganization()"], ["org.sonar.api.ce.posttask.CeTask", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getCeTask()", "public org.sonar.api.ce.posttask.CeTask getCeTask()"], ["org.sonar.api.ce.posttask.Project", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getProject()", "public org.sonar.api.ce.posttask.Project getProject()"], ["java.util.Optional<org.sonar.api.ce.posttask.Branch>", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getBranch()", "public java.util.Optional<org.sonar.api.ce.posttask.Branch> getBranch()"], ["org.sonar.api.ce.posttask.QualityGate", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getQualityGate()", "public org.sonar.api.ce.posttask.QualityGate getQualityGate()"], ["java.util.Date", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getDate()", "public java.util.Date getDate()"], ["java.util.Optional<java.util.Date>", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getAnalysisDate()", "public java.util.Optional<java.util.Date> getAnalysisDate()"], ["java.util.Optional<org.sonar.api.ce.posttask.Analysis>", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getAnalysis()", "public java.util.Optional<org.sonar.api.ce.posttask.Analysis> getAnalysis()"], ["org.sonar.api.ce.posttask.ScannerContext", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getScannerContext()", "public org.sonar.api.ce.posttask.ScannerContext getScannerContext()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getScmRevisionId()", "public java.lang.String getScmRevisionId()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.toString()", "public java.lang.String toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setOrganization(org.sonar.api.ce.posttask.Organization)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setOrganization(org.sonar.api.ce.posttask.Organization)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setCeTask(org.sonar.api.ce.posttask.CeTask)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setCeTask(org.sonar.api.ce.posttask.CeTask)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setProject(org.sonar.api.ce.posttask.Project)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setProject(org.sonar.api.ce.posttask.Project)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setBranch(org.sonar.api.ce.posttask.Branch)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setBranch(org.sonar.api.ce.posttask.Branch)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setQualityGate(org.sonar.api.ce.posttask.QualityGate)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setQualityGate(org.sonar.api.ce.posttask.QualityGate)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setAnalysis(org.sonar.api.ce.posttask.Analysis)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setAnalysis(org.sonar.api.ce.posttask.Analysis)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setScannerContext(org.sonar.api.ce.posttask.ScannerContext)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setScannerContext(org.sonar.api.ce.posttask.ScannerContext)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setDate(java.util.Date)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder setDate(java.util.Date)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTask$ProjectAnalysis", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.build()", "public org.sonar.api.ce.posttask.PostProjectAnalysisTask$ProjectAnalysis build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.setUuid(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder setUuid(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.setKey(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder setKey(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.setName(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder setName(java.lang.String)"], ["org.sonar.api.ce.posttask.Project", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.build()", "public org.sonar.api.ce.posttask.Project build()"], ["org.sonar.api.ce.posttask.CeTask$Status[]", "org.sonar.api.ce.posttask.CeTask$Status.values()", "public static org.sonar.api.ce.posttask.CeTask$Status[] values()"], ["org.sonar.api.ce.posttask.CeTask$Status", "org.sonar.api.ce.posttask.CeTask$Status.valueOf(java.lang.String)", "public static org.sonar.api.ce.posttask.CeTask$Status valueOf(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.setId(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder setId(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.setName(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder setName(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.setStatus(org.sonar.api.ce.posttask.QualityGate$Status)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder setStatus(org.sonar.api.ce.posttask.QualityGate$Status)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.add(org.sonar.api.ce.posttask.QualityGate$Condition)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder add(org.sonar.api.ce.posttask.QualityGate$Condition)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.clearConditions()", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder clearConditions()"], ["org.sonar.api.ce.posttask.QualityGate", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.build()", "public org.sonar.api.ce.posttask.QualityGate build()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder$1.getAnalysisUuid()", "public java.lang.String getAnalysisUuid()"], ["java.util.Date", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder$1.getDate()", "public java.util.Date getDate()"], ["java.util.Optional<java.lang.String>", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder$1.getRevision()", "public java.util.Optional<java.lang.String> getRevision()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.getId()", "public java.lang.String getId()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.getName()", "public java.lang.String getName()"], ["org.sonar.api.ce.posttask.QualityGate$Status", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.getStatus()", "public org.sonar.api.ce.posttask.QualityGate$Status getStatus()"], ["java.util.Collection<org.sonar.api.ce.posttask.QualityGate$Condition>", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.getConditions()", "public java.util.Collection<org.sonar.api.ce.posttask.QualityGate$Condition> getConditions()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.toString()", "public java.lang.String toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder.addProperties(java.util.Map<java.lang.String, java.lang.String>)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder addProperties(java.util.Map<java.lang.String, java.lang.String>)"], ["org.sonar.api.ce.posttask.ScannerContext", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder.build()", "public org.sonar.api.ce.posttask.ScannerContext build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setMetricKey(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder setMetricKey(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setOperator(org.sonar.api.ce.posttask.QualityGate$Operator)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder setOperator(org.sonar.api.ce.posttask.QualityGate$Operator)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setErrorThreshold(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder setErrorThreshold(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setWarningThreshold(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder setWarningThreshold(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setOnLeakPeriod(boolean)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder setOnLeakPeriod(boolean)"], ["org.sonar.api.ce.posttask.QualityGate$Condition", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.buildNoValue()", "public org.sonar.api.ce.posttask.QualityGate$Condition buildNoValue()"], ["org.sonar.api.ce.posttask.QualityGate$Condition", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.build(org.sonar.api.ce.posttask.QualityGate$EvaluationStatus, java.lang.String)", "public org.sonar.api.ce.posttask.QualityGate$Condition build(org.sonar.api.ce.posttask.QualityGate$EvaluationStatus, java.lang.String)"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getStatus()", "public org.sonar.api.ce.posttask.QualityGate$EvaluationStatus getStatus()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getMetricKey()", "public java.lang.String getMetricKey()"], ["org.sonar.api.ce.posttask.QualityGate$Operator", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getOperator()", "public org.sonar.api.ce.posttask.QualityGate$Operator getOperator()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getErrorThreshold()", "public java.lang.String getErrorThreshold()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getWarningThreshold()", "public java.lang.String getWarningThreshold()"], ["boolean", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.isOnLeakPeriod()", "public boolean isOnLeakPeriod()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getValue()", "public java.lang.String getValue()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.toString()", "public java.lang.String toString()"], ["org.sonar.api.ce.posttask.Branch$Type[]", "org.sonar.api.ce.posttask.Branch$Type.values()", "public static org.sonar.api.ce.posttask.Branch$Type[] values()"], ["org.sonar.api.ce.posttask.Branch$Type", "org.sonar.api.ce.posttask.Branch$Type.valueOf(java.lang.String)", "public static org.sonar.api.ce.posttask.Branch$Type valueOf(java.lang.String)"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus[]", "org.sonar.api.ce.posttask.QualityGate$EvaluationStatus.values()", "public static org.sonar.api.ce.posttask.QualityGate$EvaluationStatus[] values()"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus", "org.sonar.api.ce.posttask.QualityGate$EvaluationStatus.valueOf(java.lang.String)", "public static org.sonar.api.ce.posttask.QualityGate$EvaluationStatus valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.getUuid()", "public java.lang.String getUuid()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.toString()", "public java.lang.String toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.setName(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder setName(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.setType(org.sonar.api.ce.posttask.Branch$Type)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder setType(org.sonar.api.ce.posttask.Branch$Type)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.setIsMain(boolean)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder setIsMain(boolean)"], ["org.sonar.api.ce.posttask.Branch", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.build()", "public org.sonar.api.ce.posttask.Branch build()"], ["org.sonar.api.ce.posttask.QualityGate$Operator[]", "org.sonar.api.ce.posttask.QualityGate$Operator.values()", "public static org.sonar.api.ce.posttask.QualityGate$Operator[] values()"], ["org.sonar.api.ce.posttask.QualityGate$Operator", "org.sonar.api.ce.posttask.QualityGate$Operator.valueOf(java.lang.String)", "public static org.sonar.api.ce.posttask.QualityGate$Operator valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder$1.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder$1.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder$1.toString()", "public java.lang.String toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder.setName(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder setName(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder.setKey(java.lang.String)", "public org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder setKey(java.lang.String)"], ["org.sonar.api.ce.posttask.Organization", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder.build()", "public org.sonar.api.ce.posttask.Organization build()"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getStatus()", "public org.sonar.api.ce.posttask.QualityGate$EvaluationStatus getStatus()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getMetricKey()", "public java.lang.String getMetricKey()"], ["org.sonar.api.ce.posttask.QualityGate$Operator", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getOperator()", "public org.sonar.api.ce.posttask.QualityGate$Operator getOperator()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getErrorThreshold()", "public java.lang.String getErrorThreshold()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getWarningThreshold()", "public java.lang.String getWarningThreshold()"], ["boolean", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.isOnLeakPeriod()", "public boolean isOnLeakPeriod()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getValue()", "public java.lang.String getValue()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.task.TaskDefinition.description()", "public java.lang.String description()"], ["java.lang.String", "org.sonar.api.task.TaskDefinition.key()", "public java.lang.String key()"], ["java.lang.Class<? extends org.sonar.api.task.Task>", "org.sonar.api.task.TaskDefinition.taskClass()", "public java.lang.Class<? extends org.sonar.api.task.Task> taskClass()"], ["java.lang.String", "org.sonar.api.task.TaskDefinition.toString()", "public java.lang.String toString()"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition.builder()", "public static org.sonar.api.task.TaskDefinition$Builder builder()"], ["boolean", "org.sonar.api.task.TaskDefinition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.task.TaskDefinition.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.task.TaskDefinition.compareTo(org.sonar.api.task.TaskDefinition)", "public int compareTo(org.sonar.api.task.TaskDefinition)"], ["int", "org.sonar.api.task.TaskDefinition.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition$Builder.key(java.lang.String)", "public org.sonar.api.task.TaskDefinition$Builder key(java.lang.String)"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition$Builder.description(java.lang.String)", "public org.sonar.api.task.TaskDefinition$Builder description(java.lang.String)"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition$Builder.taskClass(java.lang.Class<? extends org.sonar.api.task.Task>)", "public org.sonar.api.task.TaskDefinition$Builder taskClass(java.lang.Class<? extends org.sonar.api.task.Task>)"], ["org.sonar.api.task.TaskDefinition", "org.sonar.api.task.TaskDefinition$Builder.build()", "public org.sonar.api.task.TaskDefinition build()"], ["org.sonar.api.issue.NoSonarFilter", "org.sonar.api.issue.NoSonarFilter()", "public org.sonar.api.issue.NoSonarFilter()"], ["org.sonar.api.issue.NoSonarFilter", "org.sonar.api.issue.NoSonarFilter.noSonarInFile(org.sonar.api.batch.fs.InputFile, java.util.Set<java.lang.Integer>)", "public org.sonar.api.issue.NoSonarFilter noSonarInFile(org.sonar.api.batch.fs.InputFile, java.util.Set<java.lang.Integer>)"], ["org.sonar.api.batch.fs.internal.DefaultTextPointer", "org.sonar.api.batch.fs.internal.DefaultTextPointer(int, int)", "public org.sonar.api.batch.fs.internal.DefaultTextPointer(int, int)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.line()", "public int line()"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.lineOffset()", "public int lineOffset()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultTextPointer.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultTextPointer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.compareTo(org.sonar.api.batch.fs.TextPointer)", "public int compareTo(org.sonar.api.batch.fs.TextPointer)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.DefaultFileSystem$MapCache.inputFiles()", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> inputFiles()"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.fs.internal.DefaultFileSystem$MapCache.inputFile(java.lang.String)", "public org.sonar.api.batch.fs.InputFile inputFile(java.lang.String)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.DefaultFileSystem$MapCache.getFilesByName(java.lang.String)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> getFilesByName(java.lang.String)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.DefaultFileSystem$MapCache.getFilesByExtension(java.lang.String)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> getFilesByExtension(java.lang.String)"], ["org.sonar.api.batch.fs.internal.FilenamePredicate", "org.sonar.api.batch.fs.internal.FilenamePredicate(java.lang.String)", "public org.sonar.api.batch.fs.internal.FilenamePredicate(java.lang.String)"], ["boolean", "org.sonar.api.batch.fs.internal.FilenamePredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.FilenamePredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["boolean", "org.sonar.api.batch.fs.internal.LanguagePredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["boolean", "org.sonar.api.batch.fs.internal.FalsePredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.FalsePredicate.filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.FalsePredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["org.sonar.api.batch.fs.internal.DefaultTextRange", "org.sonar.api.batch.fs.internal.DefaultTextRange(org.sonar.api.batch.fs.TextPointer, org.sonar.api.batch.fs.TextPointer)", "public org.sonar.api.batch.fs.internal.DefaultTextRange(org.sonar.api.batch.fs.TextPointer, org.sonar.api.batch.fs.TextPointer)"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultTextRange.start()", "public org.sonar.api.batch.fs.TextPointer start()"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultTextRange.end()", "public org.sonar.api.batch.fs.TextPointer end()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultTextRange.overlap(org.sonar.api.batch.fs.TextRange)", "public boolean overlap(org.sonar.api.batch.fs.TextRange)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultTextRange.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultTextRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextRange.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.batch.fs.internal.PathPatternPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.FileExtensionPredicate", "org.sonar.api.batch.fs.internal.FileExtensionPredicate(java.lang.String)", "public org.sonar.api.batch.fs.internal.FileExtensionPredicate(java.lang.String)"], ["boolean", "org.sonar.api.batch.fs.internal.FileExtensionPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.FileExtensionPredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.FileExtensionPredicate.getExtension(org.sonar.api.batch.fs.InputFile)", "public static java.lang.String getExtension(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultInputDir", "org.sonar.api.batch.fs.internal.DefaultInputDir(java.lang.String, java.lang.String)", "public org.sonar.api.batch.fs.internal.DefaultInputDir(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.relativePath()", "public java.lang.String relativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.absolutePath()", "public java.lang.String absolutePath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultInputDir.file()", "public java.io.File file()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultInputDir.path()", "public java.nio.file.Path path()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.moduleKey()", "public java.lang.String moduleKey()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.key()", "public java.lang.String key()"], ["org.sonar.api.batch.fs.internal.DefaultInputDir", "org.sonar.api.batch.fs.internal.DefaultInputDir.setModuleBaseDir(java.nio.file.Path)", "public org.sonar.api.batch.fs.internal.DefaultInputDir setModuleBaseDir(java.nio.file.Path)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputDir.isFile()", "public boolean isFile()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputDir.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputDir.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.toString()", "public java.lang.String toString()"], ["java.net.URI", "org.sonar.api.batch.fs.internal.DefaultInputDir.uri()", "public java.net.URI uri()"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$RelativePathPattern.match(java.nio.file.Path, java.nio.file.Path)", "public boolean match(java.nio.file.Path, java.nio.file.Path)"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$RelativePathPattern.match(java.nio.file.Path, java.nio.file.Path, boolean)", "public boolean match(java.nio.file.Path, java.nio.file.Path, boolean)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.PathPattern$RelativePathPattern.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.batch.fs.internal.TypePredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultInputComponent", "org.sonar.api.batch.fs.internal.DefaultInputComponent(int)", "public org.sonar.api.batch.fs.internal.DefaultInputComponent(int)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputComponent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputComponent.scannerId()", "public int scannerId()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputComponent.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputComponent.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputComponent.setHasMeasureFor(org.sonar.api.batch.measure.Metric)", "public void setHasMeasureFor(org.sonar.api.batch.measure.Metric)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputComponent.hasMeasureFor(org.sonar.api.batch.measure.Metric)", "public boolean hasMeasureFor(org.sonar.api.batch.measure.Metric)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.RelativePathPredicate.path()", "public java.lang.String path()"], ["boolean", "org.sonar.api.batch.fs.internal.RelativePathPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.RelativePathPredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["int", "org.sonar.api.batch.fs.internal.RelativePathPredicate.priority()", "public int priority()"], ["org.sonar.api.batch.fs.internal.AbstractFilePredicate", "org.sonar.api.batch.fs.internal.AbstractFilePredicate()", "public org.sonar.api.batch.fs.internal.AbstractFilePredicate()"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["int", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.priority()", "public int priority()"], ["int", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.compareTo(org.sonar.api.batch.fs.internal.OptimizedFilePredicate)", "public final int compareTo(org.sonar.api.batch.fs.internal.OptimizedFilePredicate)"], ["int", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["boolean", "org.sonar.api.batch.fs.internal.OptimizedFilePredicateAdapter.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.OptimizedFilePredicate", "org.sonar.api.batch.fs.internal.OptimizedFilePredicateAdapter.create(org.sonar.api.batch.fs.FilePredicate)", "public static org.sonar.api.batch.fs.internal.OptimizedFilePredicate create(org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.internal.SensorStrategy", "org.sonar.api.batch.fs.internal.SensorStrategy()", "public org.sonar.api.batch.fs.internal.SensorStrategy()"], ["boolean", "org.sonar.api.batch.fs.internal.SensorStrategy.isGlobal()", "public boolean isGlobal()"], ["void", "org.sonar.api.batch.fs.internal.SensorStrategy.setGlobal(boolean)", "public void setGlobal(boolean)"], ["org.sonar.api.batch.fs.internal.DefaultFilePredicates", "org.sonar.api.batch.fs.internal.DefaultFilePredicates(java.nio.file.Path)", "public org.sonar.api.batch.fs.internal.DefaultFilePredicates(java.nio.file.Path)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.all()", "public org.sonar.api.batch.fs.FilePredicate all()"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.none()", "public org.sonar.api.batch.fs.FilePredicate none()"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasAbsolutePath(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate hasAbsolutePath(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasRelativePath(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate hasRelativePath(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasFilename(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate hasFilename(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasExtension(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate hasExtension(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasURI(java.net.URI)", "public org.sonar.api.batch.fs.FilePredicate hasURI(java.net.URI)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.matchesPathPattern(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate matchesPathPattern(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.matchesPathPatterns(java.lang.String[])", "public org.sonar.api.batch.fs.FilePredicate matchesPathPatterns(java.lang.String[])"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.doesNotMatchPathPattern(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate doesNotMatchPathPattern(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.doesNotMatchPathPatterns(java.lang.String[])", "public org.sonar.api.batch.fs.FilePredicate doesNotMatchPathPatterns(java.lang.String[])"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasPath(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate hasPath(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.is(java.io.File)", "public org.sonar.api.batch.fs.FilePredicate is(java.io.File)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasLanguage(java.lang.String)", "public org.sonar.api.batch.fs.FilePredicate hasLanguage(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasLanguages(java.util.Collection<java.lang.String>)", "public org.sonar.api.batch.fs.FilePredicate hasLanguages(java.util.Collection<java.lang.String>)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasLanguages(java.lang.String...)", "public org.sonar.api.batch.fs.FilePredicate hasLanguages(java.lang.String...)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasType(org.sonar.api.batch.fs.InputFile$Type)", "public org.sonar.api.batch.fs.FilePredicate hasType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.not(org.sonar.api.batch.fs.FilePredicate)", "public org.sonar.api.batch.fs.FilePredicate not(org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.or(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)", "public org.sonar.api.batch.fs.FilePredicate or(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.or(org.sonar.api.batch.fs.FilePredicate...)", "public org.sonar.api.batch.fs.FilePredicate or(org.sonar.api.batch.fs.FilePredicate...)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.or(org.sonar.api.batch.fs.FilePredicate, org.sonar.api.batch.fs.FilePredicate)", "public org.sonar.api.batch.fs.FilePredicate or(org.sonar.api.batch.fs.FilePredicate, org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.and(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)", "public org.sonar.api.batch.fs.FilePredicate and(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.and(org.sonar.api.batch.fs.FilePredicate...)", "public org.sonar.api.batch.fs.FilePredicate and(org.sonar.api.batch.fs.FilePredicate...)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.and(org.sonar.api.batch.fs.FilePredicate, org.sonar.api.batch.fs.FilePredicate)", "public org.sonar.api.batch.fs.FilePredicate and(org.sonar.api.batch.fs.FilePredicate, org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasStatus(org.sonar.api.batch.fs.InputFile$Status)", "public org.sonar.api.batch.fs.FilePredicate hasStatus(org.sonar.api.batch.fs.InputFile$Status)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasAnyStatus()", "public org.sonar.api.batch.fs.FilePredicate hasAnyStatus()"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$AbsolutePathPattern.match(java.nio.file.Path, java.nio.file.Path)", "public boolean match(java.nio.file.Path, java.nio.file.Path)"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$AbsolutePathPattern.match(java.nio.file.Path, java.nio.file.Path, boolean)", "public boolean match(java.nio.file.Path, java.nio.file.Path, boolean)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.PathPattern$AbsolutePathPattern.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.batch.fs.internal.TruePredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.TruePredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.TruePredicate.filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.DefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition)", "public org.sonar.api.batch.fs.internal.DefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.DefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition, int)", "public org.sonar.api.batch.fs.internal.DefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition, int)"], ["java.util.Optional<java.util.List<java.nio.file.Path>>", "org.sonar.api.batch.fs.internal.DefaultInputModule.getSourceDirsOrFiles()", "public java.util.Optional<java.util.List<java.nio.file.Path>> getSourceDirsOrFiles()"], ["java.util.Optional<java.util.List<java.nio.file.Path>>", "org.sonar.api.batch.fs.internal.DefaultInputModule.getTestDirsOrFiles()", "public java.util.Optional<java.util.List<java.nio.file.Path>> getTestDirsOrFiles()"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile(org.sonar.api.batch.fs.internal.DefaultIndexedFile, java.util.function.Consumer<org.sonar.api.batch.fs.internal.DefaultInputFile>)", "public org.sonar.api.batch.fs.internal.DefaultInputFile(org.sonar.api.batch.fs.internal.DefaultIndexedFile, java.util.function.Consumer<org.sonar.api.batch.fs.internal.DefaultInputFile>)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile(org.sonar.api.batch.fs.internal.DefaultIndexedFile, java.util.function.Consumer<org.sonar.api.batch.fs.internal.DefaultInputFile>, java.lang.String)", "public org.sonar.api.batch.fs.internal.DefaultInputFile(org.sonar.api.batch.fs.internal.DefaultIndexedFile, java.util.function.Consumer<org.sonar.api.batch.fs.internal.DefaultInputFile>, java.lang.String)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.checkMetadata()", "public void checkMetadata()"], ["java.io.InputStream", "org.sonar.api.batch.fs.internal.DefaultInputFile.inputStream()", "public java.io.InputStream inputStream() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.contents()", "public java.lang.String contents() throws java.io.IOException"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setPublished(boolean)", "public org.sonar.api.batch.fs.internal.DefaultInputFile setPublished(boolean)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isPublished()", "public boolean isPublished()"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setExcludedForCoverage(boolean)", "public org.sonar.api.batch.fs.internal.DefaultInputFile setExcludedForCoverage(boolean)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isExcludedForCoverage()", "public boolean isExcludedForCoverage()"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setExcludedForDuplication(boolean)", "public org.sonar.api.batch.fs.internal.DefaultInputFile setExcludedForDuplication(boolean)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isExcludedForDuplication()", "public boolean isExcludedForDuplication()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.relativePath()", "public java.lang.String relativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.getModuleRelativePath()", "public java.lang.String getModuleRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.getProjectRelativePath()", "public java.lang.String getProjectRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.absolutePath()", "public java.lang.String absolutePath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultInputFile.file()", "public java.io.File file()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultInputFile.path()", "public java.nio.file.Path path()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.language()", "public java.lang.String language()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.fs.internal.DefaultInputFile.type()", "public org.sonar.api.batch.fs.InputFile$Type type()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.key()", "public java.lang.String key()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.toString()", "public java.lang.String toString()"], ["org.sonar.api.batch.fs.InputFile$Status", "org.sonar.api.batch.fs.internal.DefaultInputFile.status()", "public org.sonar.api.batch.fs.InputFile$Status status()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.lines()", "public int lines()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isEmpty()", "public boolean isEmpty()"], ["java.nio.charset.Charset", "org.sonar.api.batch.fs.internal.DefaultInputFile.charset()", "public java.nio.charset.Charset charset()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.lastValidOffset()", "public int lastValidOffset()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.hash()", "public java.lang.String hash()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.nonBlankLines()", "public int nonBlankLines()"], ["int[]", "org.sonar.api.batch.fs.internal.DefaultInputFile.originalLineStartOffsets()", "public int[] originalLineStartOffsets()"], ["int[]", "org.sonar.api.batch.fs.internal.DefaultInputFile.originalLineEndOffsets()", "public int[] originalLineEndOffsets()"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultInputFile.newPointer(int, int)", "public org.sonar.api.batch.fs.TextPointer newPointer(int, int)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.newRange(org.sonar.api.batch.fs.TextPointer, org.sonar.api.batch.fs.TextPointer)", "public org.sonar.api.batch.fs.TextRange newRange(org.sonar.api.batch.fs.TextPointer, org.sonar.api.batch.fs.TextPointer)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.newRange(int, int, int, int)", "public org.sonar.api.batch.fs.TextRange newRange(int, int, int, int)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.selectLine(int)", "public org.sonar.api.batch.fs.TextRange selectLine(int)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.validate(org.sonar.api.batch.fs.TextRange)", "public void validate(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.newRange(int, int)", "public org.sonar.api.batch.fs.TextRange newRange(int, int)"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultInputFile.newPointer(int)", "public org.sonar.api.batch.fs.TextPointer newPointer(int)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setStatus(org.sonar.api.batch.fs.InputFile$Status)", "public org.sonar.api.batch.fs.internal.DefaultInputFile setStatus(org.sonar.api.batch.fs.InputFile$Status)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setCharset(java.nio.charset.Charset)", "public org.sonar.api.batch.fs.internal.DefaultInputFile setCharset(java.nio.charset.Charset)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setMetadata(org.sonar.api.batch.fs.internal.Metadata)", "public org.sonar.api.batch.fs.internal.DefaultInputFile setMetadata(org.sonar.api.batch.fs.internal.Metadata)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isFile()", "public boolean isFile()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.filename()", "public java.lang.String filename()"], ["java.net.URI", "org.sonar.api.batch.fs.internal.DefaultInputFile.uri()", "public java.net.URI uri()"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.noSonarAt(java.util.Set<java.lang.Integer>)", "public void noSonarAt(java.util.Set<java.lang.Integer>)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.hasNoSonarAt(int)", "public boolean hasNoSonarAt(int)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isIgnoreAllIssues()", "public boolean isIgnoreAllIssues()"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.setIgnoreAllIssues(boolean)", "public void setIgnoreAllIssues(boolean)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.addIgnoreIssuesOnLineRanges(java.util.Collection<int[]>)", "public void addIgnoreIssuesOnLineRanges(java.util.Collection<int[]>)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isIgnoreAllIssuesOnLine(java.lang.Integer)", "public boolean isIgnoreAllIssuesOnLine(java.lang.Integer)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.setExecutableLines(java.util.Set<java.lang.Integer>)", "public void setExecutableLines(java.util.Set<java.lang.Integer>)"], ["java.util.Optional<java.util.Set<java.lang.Integer>>", "org.sonar.api.batch.fs.internal.DefaultInputFile.getExecutableLines()", "public java.util.Optional<java.util.Set<java.lang.Integer>> getExecutableLines()"], ["org.sonar.api.batch.fs.internal.AbstractProjectOrModule", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule(org.sonar.api.batch.bootstrap.ProjectDefinition, int)", "public org.sonar.api.batch.fs.internal.AbstractProjectOrModule(org.sonar.api.batch.bootstrap.ProjectDefinition, int)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.key()", "public java.lang.String key()"], ["boolean", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.isFile()", "public boolean isFile()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.definition()", "public org.sonar.api.batch.bootstrap.ProjectDefinition definition()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getBaseDir()", "public java.nio.file.Path getBaseDir()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getWorkDir()", "public java.nio.file.Path getWorkDir()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getKeyWithBranch()", "public java.lang.String getKeyWithBranch()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getBranch()", "public java.lang.String getBranch()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.properties()", "public java.util.Map<java.lang.String, java.lang.String> properties()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getOriginalName()", "public java.lang.String getOriginalName()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getDescription()", "public java.lang.String getDescription()"], ["java.nio.charset.Charset", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getEncoding()", "public java.nio.charset.Charset getEncoding()"], ["boolean", "org.sonar.api.batch.fs.internal.StatusPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultIndexedFile", "org.sonar.api.batch.fs.internal.DefaultIndexedFile(java.lang.String, java.nio.file.Path, java.lang.String, java.lang.String)", "public org.sonar.api.batch.fs.internal.DefaultIndexedFile(java.lang.String, java.nio.file.Path, java.lang.String, java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultIndexedFile", "org.sonar.api.batch.fs.internal.DefaultIndexedFile(java.nio.file.Path, java.lang.String, java.lang.String, java.lang.String, org.sonar.api.batch.fs.InputFile$Type, java.lang.String, int, org.sonar.api.batch.fs.internal.SensorStrategy)", "public org.sonar.api.batch.fs.internal.DefaultIndexedFile(java.nio.file.Path, java.lang.String, java.lang.String, java.lang.String, org.sonar.api.batch.fs.InputFile$Type, java.lang.String, int, org.sonar.api.batch.fs.internal.SensorStrategy)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.relativePath()", "public java.lang.String relativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.getModuleRelativePath()", "public java.lang.String getModuleRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.getProjectRelativePath()", "public java.lang.String getProjectRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.absolutePath()", "public java.lang.String absolutePath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.file()", "public java.io.File file()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.path()", "public java.nio.file.Path path()"], ["java.io.InputStream", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.inputStream()", "public java.io.InputStream inputStream() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.language()", "public java.lang.String language()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.type()", "public org.sonar.api.batch.fs.InputFile$Type type()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.key()", "public java.lang.String key()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.isFile()", "public boolean isFile()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.filename()", "public java.lang.String filename()"], ["java.net.URI", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.uri()", "public java.net.URI uri()"], ["org.sonar.api.batch.fs.internal.FileMetadata", "org.sonar.api.batch.fs.internal.FileMetadata()", "public org.sonar.api.batch.fs.internal.FileMetadata()"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.FileMetadata.readMetadata(java.io.InputStream, java.nio.charset.Charset, java.lang.String, org.sonar.api.batch.fs.internal.charhandler.CharHandler)", "public org.sonar.api.batch.fs.internal.Metadata readMetadata(java.io.InputStream, java.nio.charset.Charset, java.lang.String, org.sonar.api.batch.fs.internal.charhandler.CharHandler)"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.FileMetadata.readMetadata(java.io.InputStream, java.nio.charset.Charset, java.lang.String)", "public org.sonar.api.batch.fs.internal.Metadata readMetadata(java.io.InputStream, java.nio.charset.Charset, java.lang.String)"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.FileMetadata.readMetadata(java.io.Reader)", "public org.sonar.api.batch.fs.internal.Metadata readMetadata(java.io.Reader)"], ["void", "org.sonar.api.batch.fs.internal.FileMetadata.readFile(java.io.InputStream, java.nio.charset.Charset, java.lang.String, org.sonar.api.batch.fs.internal.charhandler.CharHandler[])", "public static void readFile(java.io.InputStream, java.nio.charset.Charset, java.lang.String, org.sonar.api.batch.fs.internal.charhandler.CharHandler[])"], ["void", "org.sonar.api.batch.fs.internal.FileMetadata.computeLineHashesForIssueTracking(org.sonar.api.batch.fs.InputFile, org.sonar.api.batch.fs.internal.FileMetadata$LineHashConsumer)", "public static void computeLineHashesForIssueTracking(org.sonar.api.batch.fs.InputFile, org.sonar.api.batch.fs.internal.FileMetadata$LineHashConsumer)"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.Metadata(int, int, java.lang.String, int[], int[], int)", "public org.sonar.api.batch.fs.internal.Metadata(int, int, java.lang.String, int[], int[], int)"], ["int", "org.sonar.api.batch.fs.internal.Metadata.lines()", "public int lines()"], ["int", "org.sonar.api.batch.fs.internal.Metadata.nonBlankLines()", "public int nonBlankLines()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.Metadata.hash()", "public java.lang.String hash()"], ["int[]", "org.sonar.api.batch.fs.internal.Metadata.originalLineStartOffsets()", "public int[] originalLineStartOffsets()"], ["int[]", "org.sonar.api.batch.fs.internal.Metadata.originalLineEndOffsets()", "public int[] originalLineEndOffsets()"], ["int", "org.sonar.api.batch.fs.internal.Metadata.lastValidOffset()", "public int lastValidOffset()"], ["boolean", "org.sonar.api.batch.fs.internal.Metadata.isEmpty()", "public boolean isEmpty()"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.lang.String)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.io.File, java.io.File)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.io.File, java.io.File)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.lang.String, int)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.lang.String, int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.create(java.lang.String, java.io.File, java.io.File)", "public static org.sonar.api.batch.fs.internal.TestInputFileBuilder create(java.lang.String, java.io.File, java.io.File)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.create(java.lang.String, java.lang.String)", "public static org.sonar.api.batch.fs.internal.TestInputFileBuilder create(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.nextBatchId()", "public static int nextBatchId()"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setProjectBaseDir(java.nio.file.Path)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setProjectBaseDir(java.nio.file.Path)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setModuleBaseDir(java.nio.file.Path)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setModuleBaseDir(java.nio.file.Path)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setLanguage(java.lang.String)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setLanguage(java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setType(org.sonar.api.batch.fs.InputFile$Type)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setStatus(org.sonar.api.batch.fs.InputFile$Status)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setStatus(org.sonar.api.batch.fs.InputFile$Status)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setLines(int)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setLines(int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setCharset(java.nio.charset.Charset)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setCharset(java.nio.charset.Charset)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setHash(java.lang.String)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setHash(java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setContents(java.lang.String)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setContents(java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setNonBlankLines(int)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setNonBlankLines(int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setLastValidOffset(int)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setLastValidOffset(int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setOriginalLineStartOffsets(int[])", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setOriginalLineStartOffsets(int[])"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setOriginalLineEndOffsets(int[])", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setOriginalLineEndOffsets(int[])"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setPublish(boolean)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setPublish(boolean)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setMetadata(org.sonar.api.batch.fs.internal.Metadata)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder setMetadata(org.sonar.api.batch.fs.internal.Metadata)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.initMetadata(java.lang.String)", "public org.sonar.api.batch.fs.internal.TestInputFileBuilder initMetadata(java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.build()", "public org.sonar.api.batch.fs.internal.DefaultInputFile build()"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputModule(java.lang.String, java.io.File)", "public static org.sonar.api.batch.fs.internal.DefaultInputModule newDefaultInputModule(java.lang.String, java.io.File)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition)", "public static org.sonar.api.batch.fs.internal.DefaultInputModule newDefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputModule(org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String)", "public static org.sonar.api.batch.fs.internal.DefaultInputModule newDefaultInputModule(org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String) throws java.io.IOException"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputProject(java.lang.String, java.io.File)", "public static org.sonar.api.batch.fs.internal.DefaultInputProject newDefaultInputProject(java.lang.String, java.io.File)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition)", "public static org.sonar.api.batch.fs.internal.DefaultInputProject newDefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputProject(java.lang.String, java.nio.file.Path)", "public static org.sonar.api.batch.fs.internal.DefaultInputProject newDefaultInputProject(java.lang.String, java.nio.file.Path) throws java.io.IOException"], ["org.sonar.api.batch.fs.internal.DefaultInputDir", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputDir(org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String)", "public static org.sonar.api.batch.fs.internal.DefaultInputDir newDefaultInputDir(org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String) throws java.io.IOException"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputFile(java.nio.file.Path, org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String)", "public static org.sonar.api.batch.fs.internal.DefaultInputFile newDefaultInputFile(java.nio.file.Path, org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.DefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition)", "public org.sonar.api.batch.fs.internal.DefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.DefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition, int)", "public org.sonar.api.batch.fs.internal.DefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition, int)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem(java.nio.file.Path)", "public org.sonar.api.batch.fs.internal.DefaultFileSystem(java.nio.file.Path)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem(java.io.File)", "public org.sonar.api.batch.fs.internal.DefaultFileSystem(java.io.File)"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultFileSystem.baseDirPath()", "public java.nio.file.Path baseDirPath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultFileSystem.baseDir()", "public java.io.File baseDir()"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem.setEncoding(java.nio.charset.Charset)", "public org.sonar.api.batch.fs.internal.DefaultFileSystem setEncoding(java.nio.charset.Charset)"], ["java.nio.charset.Charset", "org.sonar.api.batch.fs.internal.DefaultFileSystem.encoding()", "public java.nio.charset.Charset encoding()"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem.setWorkDir(java.nio.file.Path)", "public org.sonar.api.batch.fs.internal.DefaultFileSystem setWorkDir(java.nio.file.Path)"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultFileSystem.workDir()", "public java.io.File workDir()"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.fs.internal.DefaultFileSystem.inputFile(org.sonar.api.batch.fs.FilePredicate)", "public org.sonar.api.batch.fs.InputFile inputFile(org.sonar.api.batch.fs.FilePredicate)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.DefaultFileSystem.inputFiles()", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> inputFiles()"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.DefaultFileSystem.inputFiles(org.sonar.api.batch.fs.FilePredicate)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> inputFiles(org.sonar.api.batch.fs.FilePredicate)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultFileSystem.hasFiles(org.sonar.api.batch.fs.FilePredicate)", "public boolean hasFiles(org.sonar.api.batch.fs.FilePredicate)"], ["java.lang.Iterable<java.io.File>", "org.sonar.api.batch.fs.internal.DefaultFileSystem.files(org.sonar.api.batch.fs.FilePredicate)", "public java.lang.Iterable<java.io.File> files(org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.InputDir", "org.sonar.api.batch.fs.internal.DefaultFileSystem.inputDir(java.io.File)", "public org.sonar.api.batch.fs.InputDir inputDir(java.io.File)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem.add(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.fs.internal.DefaultFileSystem add(org.sonar.api.batch.fs.InputFile)"], ["java.util.SortedSet<java.lang.String>", "org.sonar.api.batch.fs.internal.DefaultFileSystem.languages()", "public java.util.SortedSet<java.lang.String> languages()"], ["org.sonar.api.batch.fs.FilePredicates", "org.sonar.api.batch.fs.internal.DefaultFileSystem.predicates()", "public org.sonar.api.batch.fs.FilePredicates predicates()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultFileSystem.resolvePath(java.lang.String)", "public java.io.File resolvePath(java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem$Cache", "org.sonar.api.batch.fs.internal.DefaultFileSystem$Cache()", "public org.sonar.api.batch.fs.internal.DefaultFileSystem$Cache()"], ["boolean", "org.sonar.api.batch.fs.internal.NotPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.util.List<org.sonar.api.batch.fs.FilePredicate>", "org.sonar.api.batch.fs.internal.NotPredicate.operands()", "public java.util.List<org.sonar.api.batch.fs.FilePredicate> operands()"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.OrPredicate.create(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)", "public static org.sonar.api.batch.fs.FilePredicate create(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["boolean", "org.sonar.api.batch.fs.internal.OrPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.util.List<org.sonar.api.batch.fs.FilePredicate>", "org.sonar.api.batch.fs.internal.OrPredicate.operands()", "public java.util.List<org.sonar.api.batch.fs.FilePredicate> operands()"], ["org.sonar.api.batch.fs.internal.charhandler.LineHashComputer", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer(org.sonar.api.batch.fs.internal.FileMetadata$LineHashConsumer, java.io.File)", "public org.sonar.api.batch.fs.internal.charhandler.LineHashComputer(org.sonar.api.batch.fs.internal.FileMetadata$LineHashConsumer, java.io.File)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer.handleIgnoreEoL(char)", "public void handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer.newLine()", "public void newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer.eof()", "public void eof()"], ["org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter()", "public org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.handleAll(char)", "public void handleAll(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.handleIgnoreEoL(char)", "public void handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.newLine()", "public void newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.eof()", "public void eof()"], ["int[]", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.getOriginalLineStartOffsets()", "public int[] getOriginalLineStartOffsets()"], ["int[]", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.getOriginalLineEndOffsets()", "public int[] getOriginalLineEndOffsets()"], ["int", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.getLastValidOffset()", "public int getLastValidOffset()"], ["org.sonar.api.batch.fs.internal.charhandler.FileHashComputer", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer(java.lang.String)", "public org.sonar.api.batch.fs.internal.charhandler.FileHashComputer(java.lang.String)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.handleIgnoreEoL(char)", "public void handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.newLine()", "public void newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.eof()", "public void eof()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.getHash()", "public java.lang.String getHash()"], ["org.sonar.api.batch.fs.internal.charhandler.LineCounter", "org.sonar.api.batch.fs.internal.charhandler.LineCounter(java.lang.String, java.nio.charset.Charset)", "public org.sonar.api.batch.fs.internal.charhandler.LineCounter(java.lang.String, java.nio.charset.Charset)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.handleAll(char)", "public void handleAll(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.newLine()", "public void newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.handleIgnoreEoL(char)", "public void handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.eof()", "public void eof()"], ["int", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.lines()", "public int lines()"], ["int", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.nonBlankLines()", "public int nonBlankLines()"], ["org.sonar.api.batch.fs.internal.charhandler.IntArrayList", "org.sonar.api.batch.fs.internal.charhandler.IntArrayList()", "public org.sonar.api.batch.fs.internal.charhandler.IntArrayList()"], ["int[]", "org.sonar.api.batch.fs.internal.charhandler.IntArrayList.trimAndGet()", "public int[] trimAndGet()"], ["boolean", "org.sonar.api.batch.fs.internal.charhandler.IntArrayList.add(int)", "public boolean add(int)"], ["org.sonar.api.batch.fs.internal.charhandler.CharHandler", "org.sonar.api.batch.fs.internal.charhandler.CharHandler()", "public org.sonar.api.batch.fs.internal.charhandler.CharHandler()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.handleAll(char)", "public void handleAll(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.handleIgnoreEoL(char)", "public void handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.newLine()", "public void newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.eof()", "public void eof()"], ["boolean", "org.sonar.api.batch.fs.internal.URIPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.URIPredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["int", "org.sonar.api.batch.fs.internal.URIPredicate.priority()", "public int priority()"], ["boolean", "org.sonar.api.batch.fs.internal.AbsolutePathPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.AbsolutePathPredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["int", "org.sonar.api.batch.fs.internal.AbsolutePathPredicate.priority()", "public int priority()"], ["org.sonar.api.batch.fs.internal.PathPattern", "org.sonar.api.batch.fs.internal.PathPattern.create(java.lang.String)", "public static org.sonar.api.batch.fs.internal.PathPattern create(java.lang.String)"], ["org.sonar.api.batch.fs.internal.PathPattern[]", "org.sonar.api.batch.fs.internal.PathPattern.create(java.lang.String[])", "public static org.sonar.api.batch.fs.internal.PathPattern[] create(java.lang.String[])"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.AndPredicate.create(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)", "public static org.sonar.api.batch.fs.FilePredicate create(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["boolean", "org.sonar.api.batch.fs.internal.AndPredicate.apply(org.sonar.api.batch.fs.InputFile)", "public boolean apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.AndPredicate.filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> filter(java.lang.Iterable<org.sonar.api.batch.fs.InputFile>)"], ["java.lang.Iterable<org.sonar.api.batch.fs.InputFile>", "org.sonar.api.batch.fs.internal.AndPredicate.get(org.sonar.api.batch.fs.FileSystem$Index)", "public java.lang.Iterable<org.sonar.api.batch.fs.InputFile> get(org.sonar.api.batch.fs.FileSystem$Index)"], ["java.util.List<org.sonar.api.batch.fs.FilePredicate>", "org.sonar.api.batch.fs.internal.AndPredicate.operands()", "public java.util.List<org.sonar.api.batch.fs.FilePredicate> operands()"], ["org.sonar.api.batch.fs.InputFile$Type[]", "org.sonar.api.batch.fs.InputFile$Type.values()", "public static org.sonar.api.batch.fs.InputFile$Type[] values()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.fs.InputFile$Type.valueOf(java.lang.String)", "public static org.sonar.api.batch.fs.InputFile$Type valueOf(java.lang.String)"], ["org.sonar.api.batch.fs.InputFile$Status[]", "org.sonar.api.batch.fs.InputFile$Status.values()", "public static org.sonar.api.batch.fs.InputFile$Status[] values()"], ["org.sonar.api.batch.fs.InputFile$Status", "org.sonar.api.batch.fs.InputFile$Status.valueOf(java.lang.String)", "public static org.sonar.api.batch.fs.InputFile$Status valueOf(java.lang.String)"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine()", "public org.sonar.api.batch.scm.BlameLine()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine(java.util.Date, java.lang.String)", "public org.sonar.api.batch.scm.BlameLine(java.util.Date, java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.scm.BlameLine.revision()", "public java.lang.String revision()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine.revision(java.lang.String)", "public org.sonar.api.batch.scm.BlameLine revision(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.scm.BlameLine.author()", "public java.lang.String author()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine.author(java.lang.String)", "public org.sonar.api.batch.scm.BlameLine author(java.lang.String)"], ["java.util.Date", "org.sonar.api.batch.scm.BlameLine.date()", "public java.util.Date date()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine.date(java.util.Date)", "public org.sonar.api.batch.scm.BlameLine date(java.util.Date)"], ["boolean", "org.sonar.api.batch.scm.BlameLine.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.scm.BlameLine.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.batch.scm.BlameLine.toString()", "public java.lang.String toString()"], ["org.sonar.api.batch.scm.ScmProvider", "org.sonar.api.batch.scm.ScmProvider()", "public org.sonar.api.batch.scm.ScmProvider()"], ["boolean", "org.sonar.api.batch.scm.ScmProvider.supports(java.io.File)", "public boolean supports(java.io.File)"], ["org.sonar.api.batch.scm.BlameCommand", "org.sonar.api.batch.scm.ScmProvider.blameCommand()", "public org.sonar.api.batch.scm.BlameCommand blameCommand()"], ["java.util.Set<java.nio.file.Path>", "org.sonar.api.batch.scm.ScmProvider.branchChangedFiles(java.lang.String, java.nio.file.Path)", "public java.util.Set<java.nio.file.Path> branchChangedFiles(java.lang.String, java.nio.file.Path)"], ["java.util.Map<java.nio.file.Path, java.util.Set<java.lang.Integer>>", "org.sonar.api.batch.scm.ScmProvider.branchChangedLines(java.lang.String, java.nio.file.Path, java.util.Set<java.nio.file.Path>)", "public java.util.Map<java.nio.file.Path, java.util.Set<java.lang.Integer>> branchChangedLines(java.lang.String, java.nio.file.Path, java.util.Set<java.nio.file.Path>)"], ["java.nio.file.Path", "org.sonar.api.batch.scm.ScmProvider.relativePathFromScmRoot(java.nio.file.Path)", "public java.nio.file.Path relativePathFromScmRoot(java.nio.file.Path)"], ["org.sonar.api.batch.scm.IgnoreCommand", "org.sonar.api.batch.scm.ScmProvider.ignoreCommand()", "public org.sonar.api.batch.scm.IgnoreCommand ignoreCommand()"], ["java.lang.String", "org.sonar.api.batch.scm.ScmProvider.revisionId(java.nio.file.Path)", "public java.lang.String revisionId(java.nio.file.Path)"], ["org.sonar.api.batch.scm.BlameCommand", "org.sonar.api.batch.scm.BlameCommand()", "public org.sonar.api.batch.scm.BlameCommand()"], ["org.sonar.api.batch.bootstrap.ProjectReactor", "org.sonar.api.batch.bootstrap.ProjectReactor(org.sonar.api.batch.bootstrap.ProjectDefinition)", "public org.sonar.api.batch.bootstrap.ProjectReactor(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["java.util.List<org.sonar.api.batch.bootstrap.ProjectDefinition>", "org.sonar.api.batch.bootstrap.ProjectReactor.getProjects()", "public java.util.List<org.sonar.api.batch.bootstrap.ProjectDefinition> getProjects()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectReactor.getRoot()", "public org.sonar.api.batch.bootstrap.ProjectDefinition getRoot()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectReactor.getProject(java.lang.String)", "public org.sonar.api.batch.bootstrap.ProjectDefinition getProject(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectReactor.get()", "public java.lang.String get()"], ["org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext", "org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext(org.sonar.api.batch.bootstrap.ProjectReactor)", "public org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext(org.sonar.api.batch.bootstrap.ProjectReactor)"], ["org.sonar.api.batch.bootstrap.ProjectReactor", "org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext.projectReactor()", "public org.sonar.api.batch.bootstrap.ProjectReactor projectReactor()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.create()", "public static org.sonar.api.batch.bootstrap.ProjectDefinition create()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setBaseDir(java.io.File)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setBaseDir(java.io.File)"], ["java.io.File", "org.sonar.api.batch.bootstrap.ProjectDefinition.getBaseDir()", "public java.io.File getBaseDir()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setWorkDir(java.io.File)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setWorkDir(java.io.File)"], ["java.io.File", "org.sonar.api.batch.bootstrap.ProjectDefinition.getWorkDir()", "public java.io.File getWorkDir()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setBuildDir(java.io.File)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setBuildDir(java.io.File)"], ["java.io.File", "org.sonar.api.batch.bootstrap.ProjectDefinition.getBuildDir()", "public java.io.File getBuildDir()"], ["java.util.Properties", "org.sonar.api.batch.bootstrap.ProjectDefinition.getProperties()", "public java.util.Properties getProperties()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.bootstrap.ProjectDefinition.properties()", "public java.util.Map<java.lang.String, java.lang.String> properties()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProperties(java.util.Properties)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setProperties(java.util.Properties)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProperties(java.util.Map<java.lang.String, java.lang.String>)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setProperties(java.util.Map<java.lang.String, java.lang.String>)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProperty(java.lang.String, java.lang.String)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setKey(java.lang.String)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setKey(java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProjectVersion(java.lang.String)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setProjectVersion(java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setName(java.lang.String)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setName(java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setDescription(java.lang.String)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setDescription(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getKeyWithBranch()", "public java.lang.String getKeyWithBranch()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getBranch()", "public java.lang.String getBranch()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getOriginalVersion()", "public java.lang.String getOriginalVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getVersion()", "public java.lang.String getVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getOriginalProjectVersion()", "public java.lang.String getOriginalProjectVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getProjectVersion()", "public java.lang.String getProjectVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getOriginalName()", "public java.lang.String getOriginalName()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getDescription()", "public java.lang.String getDescription()"], ["java.util.List<java.lang.String>", "org.sonar.api.batch.bootstrap.ProjectDefinition.sources()", "public java.util.List<java.lang.String> sources()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addSources(java.lang.String...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition addSources(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addSources(java.io.File...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition addSources(java.io.File...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.resetSources()", "public org.sonar.api.batch.bootstrap.ProjectDefinition resetSources()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setSources(java.lang.String...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setSources(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setSources(java.io.File...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setSources(java.io.File...)"], ["java.util.List<java.lang.String>", "org.sonar.api.batch.bootstrap.ProjectDefinition.tests()", "public java.util.List<java.lang.String> tests()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addTests(java.lang.String...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition addTests(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addTests(java.io.File...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition addTests(java.io.File...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setTests(java.lang.String...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setTests(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setTests(java.io.File...)", "public org.sonar.api.batch.bootstrap.ProjectDefinition setTests(java.io.File...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.resetTests()", "public org.sonar.api.batch.bootstrap.ProjectDefinition resetTests()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addSubProject(org.sonar.api.batch.bootstrap.ProjectDefinition)", "public org.sonar.api.batch.bootstrap.ProjectDefinition addSubProject(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.getParent()", "public org.sonar.api.batch.bootstrap.ProjectDefinition getParent()"], ["void", "org.sonar.api.batch.bootstrap.ProjectDefinition.remove()", "public void remove()"], ["java.util.List<org.sonar.api.batch.bootstrap.ProjectDefinition>", "org.sonar.api.batch.bootstrap.ProjectDefinition.getSubProjects()", "public java.util.List<org.sonar.api.batch.bootstrap.ProjectDefinition> getSubProjects()"], ["boolean", "org.sonar.api.batch.bootstrap.ProjectDefinition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.bootstrap.ProjectDefinition.hashCode()", "public int hashCode()"], ["void", "org.sonar.api.batch.bootstrap.ProjectBuilder.build(org.sonar.api.batch.bootstrap.ProjectBuilder$Context)", "public void build(org.sonar.api.batch.bootstrap.ProjectBuilder$Context)"], ["org.sonar.api.batch.Phase$Name[]", "org.sonar.api.batch.Phase$Name.values()", "public static org.sonar.api.batch.Phase$Name[] values()"], ["org.sonar.api.batch.Phase$Name", "org.sonar.api.batch.Phase$Name.valueOf(java.lang.String)", "public static org.sonar.api.batch.Phase$Name valueOf(java.lang.String)"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor()", "public org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor()"], ["java.lang.String", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.name()", "public java.lang.String name()"], ["java.util.Collection<java.lang.String>", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.properties()", "public java.util.Collection<java.lang.String> properties()"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.name(java.lang.String)", "public org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor name(java.lang.String)"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperty(java.lang.String...)", "public org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor requireProperty(java.lang.String...)"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperties(java.lang.String...)", "public org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor requireProperties(java.lang.String...)"], ["org.sonar.api.batch.postjob.PostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperties(java.lang.String[])", "public org.sonar.api.batch.postjob.PostJobDescriptor requireProperties(java.lang.String[])"], ["org.sonar.api.batch.postjob.PostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperty(java.lang.String[])", "public org.sonar.api.batch.postjob.PostJobDescriptor requireProperty(java.lang.String[])"], ["org.sonar.api.batch.postjob.PostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.name(java.lang.String)", "public org.sonar.api.batch.postjob.PostJobDescriptor name(java.lang.String)"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode()", "public org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode()"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.addRange(org.sonar.api.batch.fs.TextRange)", "public org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode addRange(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.inputFile()", "public org.sonar.api.batch.fs.InputFile inputFile()"], ["java.util.SortedMap<java.lang.Integer, org.sonar.api.batch.fs.TextRange>", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.significantCodePerLine()", "public java.util.SortedMap<java.lang.Integer, org.sonar.api.batch.fs.TextRange> significantCodePerLine()"], ["org.sonar.api.batch.sensor.code.NewSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.addRange(org.sonar.api.batch.fs.TextRange)", "public org.sonar.api.batch.sensor.code.NewSignificantCode addRange(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.code.NewSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.code.NewSignificantCode onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage()", "public org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage()"], ["org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.inputFile()", "public org.sonar.api.batch.fs.InputFile inputFile()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.ofType(org.sonar.api.batch.sensor.coverage.CoverageType)", "public org.sonar.api.batch.sensor.coverage.NewCoverage ofType(org.sonar.api.batch.sensor.coverage.CoverageType)"], ["org.sonar.api.batch.sensor.coverage.CoverageType", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.type()", "public org.sonar.api.batch.sensor.coverage.CoverageType type()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.lineHits(int, int)", "public org.sonar.api.batch.sensor.coverage.NewCoverage lineHits(int, int)"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.conditions(int, int, int)", "public org.sonar.api.batch.sensor.coverage.NewCoverage conditions(int, int, int)"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.coveredLines()", "public int coveredLines()"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.linesToCover()", "public int linesToCover()"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.conditions()", "public int conditions()"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.coveredConditions()", "public int coveredConditions()"], ["java.util.SortedMap<java.lang.Integer, java.lang.Integer>", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.hitsByLine()", "public java.util.SortedMap<java.lang.Integer, java.lang.Integer> hitsByLine()"], ["java.util.SortedMap<java.lang.Integer, java.lang.Integer>", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.conditionsByLine()", "public java.util.SortedMap<java.lang.Integer, java.lang.Integer> conditionsByLine()"], ["java.util.SortedMap<java.lang.Integer, java.lang.Integer>", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.coveredConditionsByLine()", "public java.util.SortedMap<java.lang.Integer, java.lang.Integer> coveredConditionsByLine()"], ["void", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.doSave()", "public void doSave()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.coverage.NewCoverage onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.coverage.CoverageType[]", "org.sonar.api.batch.sensor.coverage.CoverageType.values()", "public static org.sonar.api.batch.sensor.coverage.CoverageType[] values()"], ["org.sonar.api.batch.sensor.coverage.CoverageType", "org.sonar.api.batch.sensor.coverage.CoverageType.valueOf(java.lang.String)", "public static org.sonar.api.batch.sensor.coverage.CoverageType valueOf(java.lang.String)"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.create(java.io.File)", "public static org.sonar.api.batch.sensor.internal.SensorContextTester create(java.io.File)"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.create(java.nio.file.Path)", "public static org.sonar.api.batch.sensor.internal.SensorContextTester create(java.nio.file.Path)"], ["org.sonar.api.config.Settings", "org.sonar.api.batch.sensor.internal.SensorContextTester.settings()", "public org.sonar.api.config.Settings settings()"], ["org.sonar.api.config.Configuration", "org.sonar.api.batch.sensor.internal.SensorContextTester.config()", "public org.sonar.api.config.Configuration config()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setSettings(org.sonar.api.config.Settings)", "public org.sonar.api.batch.sensor.internal.SensorContextTester setSettings(org.sonar.api.config.Settings)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.sensor.internal.SensorContextTester.fileSystem()", "public org.sonar.api.batch.fs.internal.DefaultFileSystem fileSystem()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setFileSystem(org.sonar.api.batch.fs.internal.DefaultFileSystem)", "public org.sonar.api.batch.sensor.internal.SensorContextTester setFileSystem(org.sonar.api.batch.fs.internal.DefaultFileSystem)"], ["org.sonar.api.batch.rule.ActiveRules", "org.sonar.api.batch.sensor.internal.SensorContextTester.activeRules()", "public org.sonar.api.batch.rule.ActiveRules activeRules()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setActiveRules(org.sonar.api.batch.rule.ActiveRules)", "public org.sonar.api.batch.sensor.internal.SensorContextTester setActiveRules(org.sonar.api.batch.rule.ActiveRules)"], ["org.sonar.api.utils.Version", "org.sonar.api.batch.sensor.internal.SensorContextTester.getSonarQubeVersion()", "public org.sonar.api.utils.Version getSonarQubeVersion()"], ["org.sonar.api.SonarRuntime", "org.sonar.api.batch.sensor.internal.SensorContextTester.runtime()", "public org.sonar.api.SonarRuntime runtime()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setRuntime(org.sonar.api.SonarRuntime)", "public org.sonar.api.batch.sensor.internal.SensorContextTester setRuntime(org.sonar.api.SonarRuntime)"], ["boolean", "org.sonar.api.batch.sensor.internal.SensorContextTester.isCancelled()", "public boolean isCancelled()"], ["void", "org.sonar.api.batch.sensor.internal.SensorContextTester.setCancelled(boolean)", "public void setCancelled(boolean)"], ["org.sonar.api.batch.fs.InputModule", "org.sonar.api.batch.sensor.internal.SensorContextTester.module()", "public org.sonar.api.batch.fs.InputModule module()"], ["org.sonar.api.scanner.fs.InputProject", "org.sonar.api.batch.sensor.internal.SensorContextTester.project()", "public org.sonar.api.scanner.fs.InputProject project()"], ["<G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.NewMeasure<G>", "org.sonar.api.batch.sensor.internal.SensorContextTester.newMeasure()", "public <G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.NewMeasure<G> newMeasure()"], ["java.util.Collection<org.sonar.api.batch.sensor.measure.Measure>", "org.sonar.api.batch.sensor.internal.SensorContextTester.measures(java.lang.String)", "public java.util.Collection<org.sonar.api.batch.sensor.measure.Measure> measures(java.lang.String)"], ["<G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.Measure<G>", "org.sonar.api.batch.sensor.internal.SensorContextTester.measure(java.lang.String, org.sonar.api.measures.Metric<G>)", "public <G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.Measure<G> measure(java.lang.String, org.sonar.api.measures.Metric<G>)"], ["<G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.Measure<G>", "org.sonar.api.batch.sensor.internal.SensorContextTester.measure(java.lang.String, java.lang.String)", "public <G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.Measure<G> measure(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.internal.SensorContextTester.newIssue()", "public org.sonar.api.batch.sensor.issue.NewIssue newIssue()"], ["java.util.Collection<org.sonar.api.batch.sensor.issue.Issue>", "org.sonar.api.batch.sensor.internal.SensorContextTester.allIssues()", "public java.util.Collection<org.sonar.api.batch.sensor.issue.Issue> allIssues()"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.internal.SensorContextTester.newExternalIssue()", "public org.sonar.api.batch.sensor.issue.NewExternalIssue newExternalIssue()"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.internal.SensorContextTester.newAdHocRule()", "public org.sonar.api.batch.sensor.rule.NewAdHocRule newAdHocRule()"], ["java.util.Collection<org.sonar.api.batch.sensor.issue.ExternalIssue>", "org.sonar.api.batch.sensor.internal.SensorContextTester.allExternalIssues()", "public java.util.Collection<org.sonar.api.batch.sensor.issue.ExternalIssue> allExternalIssues()"], ["java.util.Collection<org.sonar.api.batch.sensor.rule.AdHocRule>", "org.sonar.api.batch.sensor.internal.SensorContextTester.allAdHocRules()", "public java.util.Collection<org.sonar.api.batch.sensor.rule.AdHocRule> allAdHocRules()"], ["java.util.Collection<org.sonar.api.batch.sensor.error.AnalysisError>", "org.sonar.api.batch.sensor.internal.SensorContextTester.allAnalysisErrors()", "public java.util.Collection<org.sonar.api.batch.sensor.error.AnalysisError> allAnalysisErrors()"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.lineHits(java.lang.String, int)", "public java.lang.Integer lineHits(java.lang.String, int)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.sumOrNull(java.lang.Integer, java.lang.Integer)", "public static java.lang.Integer sumOrNull(java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.conditions(java.lang.String, int)", "public java.lang.Integer conditions(java.lang.String, int)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.coveredConditions(java.lang.String, int)", "public java.lang.Integer coveredConditions(java.lang.String, int)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.sensor.internal.SensorContextTester.significantCodeTextRange(java.lang.String, int)", "public org.sonar.api.batch.fs.TextRange significantCodeTextRange(java.lang.String, int)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.maxOrNull(java.lang.Integer, java.lang.Integer)", "public static java.lang.Integer maxOrNull(java.lang.Integer, java.lang.Integer)"], ["java.util.List<org.sonar.api.batch.sensor.cpd.internal.TokensLine>", "org.sonar.api.batch.sensor.internal.SensorContextTester.cpdTokens(java.lang.String)", "public java.util.List<org.sonar.api.batch.sensor.cpd.internal.TokensLine> cpdTokens(java.lang.String)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.internal.SensorContextTester.newHighlighting()", "public org.sonar.api.batch.sensor.highlighting.NewHighlighting newHighlighting()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.internal.SensorContextTester.newCoverage()", "public org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage()"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.internal.SensorContextTester.newCpdTokens()", "public org.sonar.api.batch.sensor.cpd.NewCpdTokens newCpdTokens()"], ["org.sonar.api.batch.sensor.symbol.NewSymbolTable", "org.sonar.api.batch.sensor.internal.SensorContextTester.newSymbolTable()", "public org.sonar.api.batch.sensor.symbol.NewSymbolTable newSymbolTable()"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.internal.SensorContextTester.newAnalysisError()", "public org.sonar.api.batch.sensor.error.NewAnalysisError newAnalysisError()"], ["java.util.List<org.sonar.api.batch.sensor.highlighting.TypeOfText>", "org.sonar.api.batch.sensor.internal.SensorContextTester.highlightingTypeAt(java.lang.String, int, int)", "public java.util.List<org.sonar.api.batch.sensor.highlighting.TypeOfText> highlightingTypeAt(java.lang.String, int, int)"], ["java.util.Collection<org.sonar.api.batch.fs.TextRange>", "org.sonar.api.batch.sensor.internal.SensorContextTester.referencesForSymbolAt(java.lang.String, int, int)", "public java.util.Collection<org.sonar.api.batch.fs.TextRange> referencesForSymbolAt(java.lang.String, int, int)"], ["void", "org.sonar.api.batch.sensor.internal.SensorContextTester.addContextProperty(java.lang.String, java.lang.String)", "public void addContextProperty(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.sensor.internal.SensorContextTester.getContextProperties()", "public java.util.Map<java.lang.String, java.lang.String> getContextProperties()"], ["void", "org.sonar.api.batch.sensor.internal.SensorContextTester.markForPublishing(org.sonar.api.batch.fs.InputFile)", "public void markForPublishing(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.code.NewSignificantCode", "org.sonar.api.batch.sensor.internal.SensorContextTester.newSignificantCode()", "public org.sonar.api.batch.sensor.code.NewSignificantCode newSignificantCode()"], ["org.sonar.api.batch.fs.FileSystem", "org.sonar.api.batch.sensor.internal.SensorContextTester.fileSystem()", "public org.sonar.api.batch.fs.FileSystem fileSystem()"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor()", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor()"], ["java.lang.String", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.name()", "public java.lang.String name()"], ["java.util.Collection<java.lang.String>", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.languages()", "public java.util.Collection<java.lang.String> languages()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.type()", "public org.sonar.api.batch.fs.InputFile$Type type()"], ["java.util.Collection<java.lang.String>", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.ruleRepositories()", "public java.util.Collection<java.lang.String> ruleRepositories()"], ["java.util.function.Predicate<org.sonar.api.config.Configuration>", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.configurationPredicate()", "public java.util.function.Predicate<org.sonar.api.config.Configuration> configurationPredicate()"], ["boolean", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.isGlobal()", "public boolean isGlobal()"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.name(java.lang.String)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor name(java.lang.String)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguage(java.lang.String)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor onlyOnLanguage(java.lang.String)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguages(java.lang.String...)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor onlyOnLanguages(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnFileType(org.sonar.api.batch.fs.InputFile$Type)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor onlyOnFileType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepository(java.lang.String...)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor createIssuesForRuleRepository(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepositories(java.lang.String...)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor createIssuesForRuleRepositories(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperty(java.lang.String...)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor requireProperty(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperties(java.lang.String...)", "public org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor requireProperties(java.lang.String...)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.global()", "public org.sonar.api.batch.sensor.SensorDescriptor global()"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyWhenConfiguration(java.util.function.Predicate<org.sonar.api.config.Configuration>)", "public org.sonar.api.batch.sensor.SensorDescriptor onlyWhenConfiguration(java.util.function.Predicate<org.sonar.api.config.Configuration>)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperties(java.lang.String[])", "public org.sonar.api.batch.sensor.SensorDescriptor requireProperties(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperty(java.lang.String[])", "public org.sonar.api.batch.sensor.SensorDescriptor requireProperty(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepositories(java.lang.String[])", "public org.sonar.api.batch.sensor.SensorDescriptor createIssuesForRuleRepositories(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepository(java.lang.String[])", "public org.sonar.api.batch.sensor.SensorDescriptor createIssuesForRuleRepository(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnFileType(org.sonar.api.batch.fs.InputFile$Type)", "public org.sonar.api.batch.sensor.SensorDescriptor onlyOnFileType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguages(java.lang.String[])", "public org.sonar.api.batch.sensor.SensorDescriptor onlyOnLanguages(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguage(java.lang.String)", "public org.sonar.api.batch.sensor.SensorDescriptor onlyOnLanguage(java.lang.String)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.name(java.lang.String)", "public org.sonar.api.batch.sensor.SensorDescriptor name(java.lang.String)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.measure.Measure)", "public void store(org.sonar.api.batch.sensor.measure.Measure)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.issue.Issue)", "public void store(org.sonar.api.batch.sensor.issue.Issue)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule)", "public void store(org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting)", "public void store(org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage)", "public void store(org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens)", "public void store(org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable)", "public void store(org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.error.AnalysisError)", "public void store(org.sonar.api.batch.sensor.error.AnalysisError)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.storeProperty(java.lang.String, java.lang.String)", "public void storeProperty(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue)", "public void store(org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode)", "public void store(org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode)"], ["org.sonar.api.batch.sensor.internal.DefaultStorable", "org.sonar.api.batch.sensor.internal.DefaultStorable()", "public org.sonar.api.batch.sensor.internal.DefaultStorable()"], ["org.sonar.api.batch.sensor.internal.DefaultStorable", "org.sonar.api.batch.sensor.internal.DefaultStorable(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.internal.DefaultStorable(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["void", "org.sonar.api.batch.sensor.internal.DefaultStorable.save()", "public final void save()"], ["java.lang.String", "org.sonar.api.batch.sensor.internal.DefaultStorable.toString()", "public java.lang.String toString()"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["java.util.List<org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule>", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.getSyntaxHighlightingRuleSet()", "public java.util.List<org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule> getSyntaxHighlightingRuleSet()"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.inputFile()", "public org.sonar.api.batch.fs.InputFile inputFile()"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)", "public org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting highlight(int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)", "public org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting highlight(int, int, int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)", "public org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting highlight(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)", "public org.sonar.api.batch.sensor.highlighting.NewHighlighting highlight(int, int, int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)", "public org.sonar.api.batch.sensor.highlighting.NewHighlighting highlight(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)", "public org.sonar.api.batch.sensor.highlighting.NewHighlighting highlight(int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.highlighting.NewHighlighting onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.create(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)", "public static org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule create(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.range()", "public org.sonar.api.batch.fs.TextRange range()"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.getTextType()", "public org.sonar.api.batch.sensor.highlighting.TypeOfText getTextType()"], ["java.lang.String", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.toString()", "public java.lang.String toString()"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText[]", "org.sonar.api.batch.sensor.highlighting.TypeOfText.values()", "public static org.sonar.api.batch.sensor.highlighting.TypeOfText[] values()"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText", "org.sonar.api.batch.sensor.highlighting.TypeOfText.valueOf(java.lang.String)", "public static org.sonar.api.batch.sensor.highlighting.TypeOfText valueOf(java.lang.String)"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText", "org.sonar.api.batch.sensor.highlighting.TypeOfText.forCssClass(java.lang.String)", "public static org.sonar.api.batch.sensor.highlighting.TypeOfText forCssClass(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.sensor.highlighting.TypeOfText.cssClass()", "public java.lang.String cssClass()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue(org.sonar.api.batch.fs.internal.DefaultInputProject)", "public org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue(org.sonar.api.batch.fs.internal.DefaultInputProject)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.remediationEffortMinutes(java.lang.Long)", "public org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue remediationEffortMinutes(java.lang.Long)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.severity(org.sonar.api.batch.rule.Severity)", "public org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue severity(org.sonar.api.batch.rule.Severity)"], ["java.lang.String", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.engineId()", "public java.lang.String engineId()"], ["java.lang.String", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.ruleId()", "public java.lang.String ruleId()"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.severity()", "public org.sonar.api.batch.rule.Severity severity()"], ["java.lang.Long", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.remediationEffort()", "public java.lang.Long remediationEffort()"], ["void", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.doSave()", "public void doSave()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.type()", "public org.sonar.api.rules.RuleType type()"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.engineId(java.lang.String)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue engineId(java.lang.String)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.ruleId(java.lang.String)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue ruleId(java.lang.String)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.forRule(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.ruleKey()", "public org.sonar.api.rule.RuleKey ruleKey()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.type(org.sonar.api.rules.RuleType)", "public org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.addFlow(java.lang.Iterable)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue addFlow(java.lang.Iterable)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.at(org.sonar.api.batch.sensor.issue.NewIssueLocation)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue at(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.severity(org.sonar.api.batch.rule.Severity)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue severity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.remediationEffortMinutes(java.lang.Long)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue remediationEffortMinutes(java.lang.Long)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.type(org.sonar.api.rules.RuleType)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.forRule(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.sensor.issue.NewExternalIssue forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.issue.IssueLocation", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.primaryLocation()", "public org.sonar.api.batch.sensor.issue.IssueLocation primaryLocation()"], ["java.util.List<org.sonar.api.batch.sensor.issue.Issue$Flow>", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.flows()", "public java.util.List<org.sonar.api.batch.sensor.issue.Issue$Flow> flows()"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.newLocation()", "public org.sonar.api.batch.sensor.issue.NewIssueLocation newLocation()"], ["T", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.at(org.sonar.api.batch.sensor.issue.NewIssueLocation)", "public T at(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["T", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)", "public T addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["T", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.addFlow(java.lang.Iterable<org.sonar.api.batch.sensor.issue.NewIssueLocation>)", "public T addFlow(java.lang.Iterable<org.sonar.api.batch.sensor.issue.NewIssueLocation>)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.forRule(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssue forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.ruleKey()", "public org.sonar.api.rule.RuleKey ruleKey()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.gap(java.lang.Double)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssue gap(java.lang.Double)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.overrideSeverity(org.sonar.api.batch.rule.Severity)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssue overrideSeverity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.overriddenSeverity()", "public org.sonar.api.batch.rule.Severity overriddenSeverity()"], ["java.lang.Double", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.gap()", "public java.lang.Double gap()"], ["org.sonar.api.batch.sensor.issue.IssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.primaryLocation()", "public org.sonar.api.batch.sensor.issue.IssueLocation primaryLocation()"], ["void", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.doSave()", "public void doSave()"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.addFlow(java.lang.Iterable)", "public org.sonar.api.batch.sensor.issue.NewIssue addFlow(java.lang.Iterable)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)", "public org.sonar.api.batch.sensor.issue.NewIssue addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.at(org.sonar.api.batch.sensor.issue.NewIssueLocation)", "public org.sonar.api.batch.sensor.issue.NewIssue at(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.overrideSeverity(org.sonar.api.batch.rule.Severity)", "public org.sonar.api.batch.sensor.issue.NewIssue overrideSeverity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.gap(java.lang.Double)", "public org.sonar.api.batch.sensor.issue.NewIssue gap(java.lang.Double)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.forRule(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.sensor.issue.NewIssue forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation()", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.on(org.sonar.api.batch.fs.InputComponent)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation on(org.sonar.api.batch.fs.InputComponent)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.at(org.sonar.api.batch.fs.TextRange)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation at(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.message(java.lang.String)", "public org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation message(java.lang.String)"], ["org.sonar.api.batch.fs.InputComponent", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.inputComponent()", "public org.sonar.api.batch.fs.InputComponent inputComponent()"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.textRange()", "public org.sonar.api.batch.fs.TextRange textRange()"], ["java.lang.String", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.message()", "public java.lang.String message()"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.message(java.lang.String)", "public org.sonar.api.batch.sensor.issue.NewIssueLocation message(java.lang.String)"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.at(org.sonar.api.batch.fs.TextRange)", "public org.sonar.api.batch.sensor.issue.NewIssueLocation at(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.on(org.sonar.api.batch.fs.InputComponent)", "public org.sonar.api.batch.sensor.issue.NewIssueLocation on(org.sonar.api.batch.fs.InputComponent)"], ["org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.inputFile()", "public org.sonar.api.batch.fs.InputFile inputFile()"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.addToken(int, int, int, int, java.lang.String)", "public org.sonar.api.batch.sensor.cpd.NewCpdTokens addToken(int, int, int, int, java.lang.String)"], ["org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.addToken(org.sonar.api.batch.fs.TextRange, java.lang.String)", "public org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens addToken(org.sonar.api.batch.fs.TextRange, java.lang.String)"], ["java.util.List<org.sonar.api.batch.sensor.cpd.internal.TokensLine>", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.getTokenLines()", "public java.util.List<org.sonar.api.batch.sensor.cpd.internal.TokensLine> getTokenLines()"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.addToken(org.sonar.api.batch.fs.TextRange, java.lang.String)", "public org.sonar.api.batch.sensor.cpd.NewCpdTokens addToken(org.sonar.api.batch.fs.TextRange, java.lang.String)"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.cpd.NewCpdTokens onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.cpd.internal.TokensLine", "org.sonar.api.batch.sensor.cpd.internal.TokensLine(int, int, int, java.lang.String)", "public org.sonar.api.batch.sensor.cpd.internal.TokensLine(int, int, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getValue()", "public java.lang.String getValue()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getStartLine()", "public int getStartLine()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getEndLine()", "public int getEndLine()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getHashCode()", "public int getHashCode()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getStartUnit()", "public int getStartUnit()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getEndUnit()", "public int getEndUnit()"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure()", "public org.sonar.api.batch.sensor.measure.internal.DefaultMeasure()"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.measure.internal.DefaultMeasure(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G>", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.on(org.sonar.api.batch.fs.InputComponent)", "public org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G> on(org.sonar.api.batch.fs.InputComponent)"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G>", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.forMetric(org.sonar.api.batch.measure.Metric<G>)", "public org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G> forMetric(org.sonar.api.batch.measure.Metric<G>)"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G>", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.withValue(G)", "public org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G> withValue(G)"], ["boolean", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.isFromCore()", "public boolean isFromCore()"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G>", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.setFromCore()", "public org.sonar.api.batch.sensor.measure.internal.DefaultMeasure<G> setFromCore()"], ["void", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.doSave()", "public void doSave()"], ["org.sonar.api.batch.measure.Metric<G>", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.metric()", "public org.sonar.api.batch.measure.Metric<G> metric()"], ["org.sonar.api.batch.fs.InputComponent", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.inputComponent()", "public org.sonar.api.batch.fs.InputComponent inputComponent()"], ["G", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.value()", "public G value()"], ["boolean", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.hashCode()", "public int hashCode()"], ["org.sonar.api.batch.sensor.measure.NewMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.withValue(java.io.Serializable)", "public org.sonar.api.batch.sensor.measure.NewMeasure withValue(java.io.Serializable)"], ["org.sonar.api.batch.sensor.measure.NewMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.forMetric(org.sonar.api.batch.measure.Metric)", "public org.sonar.api.batch.sensor.measure.NewMeasure forMetric(org.sonar.api.batch.measure.Metric)"], ["org.sonar.api.batch.sensor.measure.NewMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.on(org.sonar.api.batch.fs.InputComponent)", "public org.sonar.api.batch.sensor.measure.NewMeasure on(org.sonar.api.batch.fs.InputComponent)"], ["org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError()", "public org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError()"], ["org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.inputFile()", "public org.sonar.api.batch.fs.InputFile inputFile()"], ["java.lang.String", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.message()", "public java.lang.String message()"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.location()", "public org.sonar.api.batch.fs.TextPointer location()"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.error.NewAnalysisError onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.message(java.lang.String)", "public org.sonar.api.batch.sensor.error.NewAnalysisError message(java.lang.String)"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.at(org.sonar.api.batch.fs.TextPointer)", "public org.sonar.api.batch.sensor.error.NewAnalysisError at(org.sonar.api.batch.fs.TextPointer)"], ["org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["java.util.Map<org.sonar.api.batch.fs.TextRange, java.util.Set<org.sonar.api.batch.fs.TextRange>>", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.getReferencesBySymbol()", "public java.util.Map<org.sonar.api.batch.fs.TextRange, java.util.Set<org.sonar.api.batch.fs.TextRange>> getReferencesBySymbol()"], ["org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.inputFile()", "public org.sonar.api.batch.fs.InputFile inputFile()"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.newSymbol(int, int, int, int)", "public org.sonar.api.batch.sensor.symbol.NewSymbol newSymbol(int, int, int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.newSymbol(int, int)", "public org.sonar.api.batch.sensor.symbol.NewSymbol newSymbol(int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.newSymbol(org.sonar.api.batch.fs.TextRange)", "public org.sonar.api.batch.sensor.symbol.NewSymbol newSymbol(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.symbol.NewSymbolTable", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.onFile(org.sonar.api.batch.fs.InputFile)", "public org.sonar.api.batch.sensor.symbol.NewSymbolTable onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol(org.sonar.api.batch.fs.internal.DefaultInputFile, org.sonar.api.batch.fs.TextRange, java.util.Collection<org.sonar.api.batch.fs.TextRange>)", "public org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol(org.sonar.api.batch.fs.internal.DefaultInputFile, org.sonar.api.batch.fs.TextRange, java.util.Collection<org.sonar.api.batch.fs.TextRange>)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol.newReference(int, int)", "public org.sonar.api.batch.sensor.symbol.NewSymbol newReference(int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol.newReference(int, int, int, int)", "public org.sonar.api.batch.sensor.symbol.NewSymbol newReference(int, int, int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol.newReference(org.sonar.api.batch.fs.TextRange)", "public org.sonar.api.batch.sensor.symbol.NewSymbol newReference(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule()", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule()"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule(org.sonar.api.batch.sensor.internal.SensorStorage)", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.severity(org.sonar.api.batch.rule.Severity)", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule severity(org.sonar.api.batch.rule.Severity)"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.engineId()", "public java.lang.String engineId()"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.ruleId()", "public java.lang.String ruleId()"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.name()", "public java.lang.String name()"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.description()", "public java.lang.String description()"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.severity()", "public org.sonar.api.batch.rule.Severity severity()"], ["void", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.doSave()", "public void doSave()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.type()", "public org.sonar.api.rules.RuleType type()"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.engineId(java.lang.String)", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule engineId(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.ruleId(java.lang.String)", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule ruleId(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.name(java.lang.String)", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule name(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.description(java.lang.String)", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule description(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.type(org.sonar.api.rules.RuleType)", "public org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.severity(org.sonar.api.batch.rule.Severity)", "public org.sonar.api.batch.sensor.rule.NewAdHocRule severity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.type(org.sonar.api.rules.RuleType)", "public org.sonar.api.batch.sensor.rule.NewAdHocRule type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.description(java.lang.String)", "public org.sonar.api.batch.sensor.rule.NewAdHocRule description(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.name(java.lang.String)", "public org.sonar.api.batch.sensor.rule.NewAdHocRule name(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.ruleId(java.lang.String)", "public org.sonar.api.batch.sensor.rule.NewAdHocRule ruleId(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.engineId(java.lang.String)", "public org.sonar.api.batch.sensor.rule.NewAdHocRule engineId(java.lang.String)"], ["org.sonar.api.batch.rule.Severity[]", "org.sonar.api.batch.rule.Severity.values()", "public static org.sonar.api.batch.rule.Severity[] values()"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.rule.Severity.valueOf(java.lang.String)", "public static org.sonar.api.batch.rule.Severity valueOf(java.lang.String)"], ["org.sonar.api.batch.rule.CheckFactory", "org.sonar.api.batch.rule.CheckFactory(org.sonar.api.batch.rule.ActiveRules)", "public org.sonar.api.batch.rule.CheckFactory(org.sonar.api.batch.rule.ActiveRules)"], ["<C> org.sonar.api.batch.rule.Checks<C>", "org.sonar.api.batch.rule.CheckFactory.create(java.lang.String)", "public <C> org.sonar.api.batch.rule.Checks<C> create(java.lang.String)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.rule.internal.DefaultRule.key()", "public org.sonar.api.rule.RuleKey key()"], ["java.lang.Integer", "org.sonar.api.batch.rule.internal.DefaultRule.id()", "public java.lang.Integer id()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.name()", "public java.lang.String name()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.severity()", "public java.lang.String severity()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.type()", "public java.lang.String type()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.description()", "public java.lang.String description()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.internalKey()", "public java.lang.String internalKey()"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.batch.rule.internal.DefaultRule.status()", "public org.sonar.api.rule.RuleStatus status()"], ["org.sonar.api.batch.rule.RuleParam", "org.sonar.api.batch.rule.internal.DefaultRule.param(java.lang.String)", "public org.sonar.api.batch.rule.RuleParam param(java.lang.String)"], ["java.util.Collection<org.sonar.api.batch.rule.RuleParam>", "org.sonar.api.batch.rule.internal.DefaultRule.params()", "public java.util.Collection<org.sonar.api.batch.rule.RuleParam> params()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRuleParam.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRuleParam.description()", "public java.lang.String description()"], ["org.sonar.api.batch.rule.internal.ActiveRulesBuilder", "org.sonar.api.batch.rule.internal.ActiveRulesBuilder()", "public org.sonar.api.batch.rule.internal.ActiveRulesBuilder()"], ["org.sonar.api.batch.rule.internal.ActiveRulesBuilder", "org.sonar.api.batch.rule.internal.ActiveRulesBuilder.addRule(org.sonar.api.batch.rule.internal.NewActiveRule)", "public org.sonar.api.batch.rule.internal.ActiveRulesBuilder addRule(org.sonar.api.batch.rule.internal.NewActiveRule)"], ["org.sonar.api.batch.rule.ActiveRules", "org.sonar.api.batch.rule.internal.ActiveRulesBuilder.build()", "public org.sonar.api.batch.rule.ActiveRules build()"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setId(java.lang.Integer)", "public org.sonar.api.batch.rule.internal.NewRule setId(java.lang.Integer)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setDescription(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewRule setDescription(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setName(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewRule setName(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setSeverity(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewRule setSeverity(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setType(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewRule setType(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setStatus(org.sonar.api.rule.RuleStatus)", "public org.sonar.api.batch.rule.internal.NewRule setStatus(org.sonar.api.rule.RuleStatus)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setInternalKey(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewRule setInternalKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRuleParam", "org.sonar.api.batch.rule.internal.NewRule.addParam(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewRuleParam addParam(java.lang.String)"], ["org.sonar.api.batch.rule.internal.DefaultActiveRules", "org.sonar.api.batch.rule.internal.DefaultActiveRules(java.util.Collection<org.sonar.api.batch.rule.internal.NewActiveRule>)", "public org.sonar.api.batch.rule.internal.DefaultActiveRules(java.util.Collection<org.sonar.api.batch.rule.internal.NewActiveRule>)"], ["org.sonar.api.batch.rule.ActiveRule", "org.sonar.api.batch.rule.internal.DefaultActiveRules.find(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.rule.ActiveRule find(org.sonar.api.rule.RuleKey)"], ["java.util.Collection<org.sonar.api.batch.rule.ActiveRule>", "org.sonar.api.batch.rule.internal.DefaultActiveRules.findAll()", "public java.util.Collection<org.sonar.api.batch.rule.ActiveRule> findAll()"], ["java.util.Collection<org.sonar.api.batch.rule.ActiveRule>", "org.sonar.api.batch.rule.internal.DefaultActiveRules.findByRepository(java.lang.String)", "public java.util.Collection<org.sonar.api.batch.rule.ActiveRule> findByRepository(java.lang.String)"], ["java.util.Collection<org.sonar.api.batch.rule.ActiveRule>", "org.sonar.api.batch.rule.internal.DefaultActiveRules.findByLanguage(java.lang.String)", "public java.util.Collection<org.sonar.api.batch.rule.ActiveRule> findByLanguage(java.lang.String)"], ["org.sonar.api.batch.rule.ActiveRule", "org.sonar.api.batch.rule.internal.DefaultActiveRules.findByInternalKey(java.lang.String, java.lang.String)", "public org.sonar.api.batch.rule.ActiveRule findByInternalKey(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.rule.Rule", "org.sonar.api.batch.rule.internal.DefaultRules.find(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.rule.Rule find(org.sonar.api.rule.RuleKey)"], ["java.util.Collection<org.sonar.api.batch.rule.Rule>", "org.sonar.api.batch.rule.internal.DefaultRules.findAll()", "public java.util.Collection<org.sonar.api.batch.rule.Rule> findAll()"], ["java.util.Collection<org.sonar.api.batch.rule.Rule>", "org.sonar.api.batch.rule.internal.DefaultRules.findByRepository(java.lang.String)", "public java.util.Collection<org.sonar.api.batch.rule.Rule> findByRepository(java.lang.String)"], ["java.util.Collection<org.sonar.api.batch.rule.Rule>", "org.sonar.api.batch.rule.internal.DefaultRules.findByInternalKey(java.lang.String, java.lang.String)", "public java.util.Collection<org.sonar.api.batch.rule.Rule> findByInternalKey(java.lang.String, java.lang.String)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.rule.internal.DefaultActiveRule.ruleKey()", "public org.sonar.api.rule.RuleKey ruleKey()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.severity()", "public java.lang.String severity()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.language()", "public java.lang.String language()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.param(java.lang.String)", "public java.lang.String param(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.rule.internal.DefaultActiveRule.params()", "public java.util.Map<java.lang.String, java.lang.String> params()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.internalKey()", "public java.lang.String internalKey()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.templateRuleKey()", "public java.lang.String templateRuleKey()"], ["long", "org.sonar.api.batch.rule.internal.DefaultActiveRule.createdAt()", "public long createdAt()"], ["long", "org.sonar.api.batch.rule.internal.DefaultActiveRule.updatedAt()", "public long updatedAt()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.qpKey()", "public java.lang.String qpKey()"], ["org.sonar.api.batch.rule.internal.RulesBuilder", "org.sonar.api.batch.rule.internal.RulesBuilder()", "public org.sonar.api.batch.rule.internal.RulesBuilder()"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.RulesBuilder.add(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.rule.internal.NewRule add(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.rule.Rules", "org.sonar.api.batch.rule.internal.RulesBuilder.build()", "public org.sonar.api.batch.rule.Rules build()"], ["org.sonar.api.batch.rule.internal.NewRuleParam", "org.sonar.api.batch.rule.internal.NewRuleParam.setDescription(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewRuleParam setDescription(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder()", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder()"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setRuleKey(org.sonar.api.rule.RuleKey)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setRuleKey(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setName(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setName(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setSeverity(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setSeverity(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setParam(java.lang.String, java.lang.String)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setParam(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setCreatedAt(long)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setCreatedAt(long)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setUpdatedAt(long)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setUpdatedAt(long)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setInternalKey(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setInternalKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setLanguage(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setLanguage(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setTemplateRuleKey(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setTemplateRuleKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setQProfileKey(java.lang.String)", "public org.sonar.api.batch.rule.internal.NewActiveRule$Builder setQProfileKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.build()", "public org.sonar.api.batch.rule.internal.NewActiveRule build()"], ["C", "org.sonar.api.batch.rule.Checks.of(org.sonar.api.rule.RuleKey)", "public C of(org.sonar.api.rule.RuleKey)"], ["java.util.Collection<C>", "org.sonar.api.batch.rule.Checks.all()", "public java.util.Collection<C> all()"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.rule.Checks.ruleKey(C)", "public org.sonar.api.rule.RuleKey ruleKey(C)"], ["org.sonar.api.batch.rule.Checks<C>", "org.sonar.api.batch.rule.Checks.addAnnotatedChecks(java.lang.Object...)", "public org.sonar.api.batch.rule.Checks<C> addAnnotatedChecks(java.lang.Object...)"], ["org.sonar.api.batch.rule.Checks<C>", "org.sonar.api.batch.rule.Checks.addAnnotatedChecks(java.util.Collection)", "public org.sonar.api.batch.rule.Checks<C> addAnnotatedChecks(java.util.Collection)"], ["org.sonar.api.batch.rule.Checks<C>", "org.sonar.api.batch.rule.Checks.addAnnotatedChecks(java.lang.Iterable)", "public org.sonar.api.batch.rule.Checks<C> addAnnotatedChecks(java.lang.Iterable)"], ["org.sonar.api.ExtensionProvider", "org.sonar.api.ExtensionProvider()", "public org.sonar.api.ExtensionProvider()"], ["org.sonar.api.config.GlobalPropertyChangeHandler", "org.sonar.api.config.GlobalPropertyChangeHandler()", "public org.sonar.api.config.GlobalPropertyChangeHandler()"], ["java.lang.String", "org.sonar.api.config.Category.originalKey()", "public java.lang.String originalKey()"], ["java.lang.String", "org.sonar.api.config.Category.key()", "public java.lang.String key()"], ["boolean", "org.sonar.api.config.Category.isSpecial()", "public boolean isSpecial()"], ["int", "org.sonar.api.config.Category.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.config.Category.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.config.Category.toString()", "public java.lang.String toString()"], ["java.util.Optional<java.lang.Boolean>", "org.sonar.api.config.Configuration.getBoolean(java.lang.String)", "public default java.util.Optional<java.lang.Boolean> getBoolean(java.lang.String)"], ["java.util.Optional<java.lang.Integer>", "org.sonar.api.config.Configuration.getInt(java.lang.String)", "public default java.util.Optional<java.lang.Integer> getInt(java.lang.String)"], ["java.util.Optional<java.lang.Long>", "org.sonar.api.config.Configuration.getLong(java.lang.String)", "public default java.util.Optional<java.lang.Long> getLong(java.lang.String)"], ["java.util.Optional<java.lang.Float>", "org.sonar.api.config.Configuration.getFloat(java.lang.String)", "public default java.util.Optional<java.lang.Float> getFloat(java.lang.String)"], ["java.util.Optional<java.lang.Double>", "org.sonar.api.config.Configuration.getDouble(java.lang.String)", "public default java.util.Optional<java.lang.Double> getDouble(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition.builder(java.lang.String)", "public static org.sonar.api.config.PropertyDefinition$Builder builder(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Result", "org.sonar.api.config.PropertyDefinition.validate(org.sonar.api.PropertyType, java.lang.String, java.util.List<java.lang.String>)", "public static org.sonar.api.config.PropertyDefinition$Result validate(org.sonar.api.PropertyType, java.lang.String, java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Result", "org.sonar.api.config.PropertyDefinition.validate(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Result validate(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.defaultValue()", "public java.lang.String defaultValue()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.name()", "public java.lang.String name()"], ["org.sonar.api.PropertyType", "org.sonar.api.config.PropertyDefinition.type()", "public org.sonar.api.PropertyType type()"], ["java.util.List<java.lang.String>", "org.sonar.api.config.PropertyDefinition.options()", "public java.util.List<java.lang.String> options()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.description()", "public java.lang.String description()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.category()", "public java.lang.String category()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.subCategory()", "public java.lang.String subCategory()"], ["java.util.List<java.lang.String>", "org.sonar.api.config.PropertyDefinition.qualifiers()", "public java.util.List<java.lang.String> qualifiers()"], ["boolean", "org.sonar.api.config.PropertyDefinition.global()", "public boolean global()"], ["boolean", "org.sonar.api.config.PropertyDefinition.multiValues()", "public boolean multiValues()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.propertySetKey()", "public java.lang.String propertySetKey()"], ["java.util.List<org.sonar.api.config.PropertyFieldDefinition>", "org.sonar.api.config.PropertyDefinition.fields()", "public java.util.List<org.sonar.api.config.PropertyFieldDefinition> fields()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.deprecatedKey()", "public java.lang.String deprecatedKey()"], ["int", "org.sonar.api.config.PropertyDefinition.index()", "public int index()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.toString()", "public java.lang.String toString()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings()", "public org.sonar.api.config.internal.MapSettings()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings(org.sonar.api.config.PropertyDefinitions)", "public org.sonar.api.config.internal.MapSettings(org.sonar.api.config.PropertyDefinitions)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.config.internal.MapSettings.getProperties()", "public java.util.Map<java.lang.String, java.lang.String> getProperties()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.clear()", "public org.sonar.api.config.internal.MapSettings clear()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.String)", "public org.sonar.api.config.internal.MapSettings setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Integer)", "public org.sonar.api.config.internal.MapSettings setProperty(java.lang.String, java.lang.Integer)"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Boolean)", "public org.sonar.api.config.internal.MapSettings setProperty(java.lang.String, java.lang.Boolean)"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Long)", "public org.sonar.api.config.internal.MapSettings setProperty(java.lang.String, java.lang.Long)"], ["org.sonar.api.config.Configuration", "org.sonar.api.config.internal.MapSettings.asConfig()", "public org.sonar.api.config.Configuration asConfig()"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Long)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Long)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Integer)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Integer)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Boolean)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Boolean)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.String)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.internal.MultivalueProperty.parseAsCsv(java.lang.String, java.lang.String)", "public static java.lang.String[] parseAsCsv(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.internal.MultivalueProperty.parseAsCsv(java.lang.String, java.lang.String, java.util.function.Function<java.lang.String, java.lang.String>)", "public static java.lang.String[] parseAsCsv(java.lang.String, java.lang.String, java.util.function.Function<java.lang.String, java.lang.String>)"], ["org.sonar.api.config.internal.ConfigurationBridge", "org.sonar.api.config.internal.ConfigurationBridge(org.sonar.api.config.Settings)", "public org.sonar.api.config.internal.ConfigurationBridge(org.sonar.api.config.Settings)"], ["java.util.Optional<java.lang.String>", "org.sonar.api.config.internal.ConfigurationBridge.get(java.lang.String)", "public java.util.Optional<java.lang.String> get(java.lang.String)"], ["boolean", "org.sonar.api.config.internal.ConfigurationBridge.hasKey(java.lang.String)", "public boolean hasKey(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.internal.ConfigurationBridge.getStringArray(java.lang.String)", "public java.lang.String[] getStringArray(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.description(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Builder description(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.name(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Builder name(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.defaultValue(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Builder defaultValue(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.category(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Builder category(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.subCategory(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Builder subCategory(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onQualifiers(java.lang.String, java.lang.String...)", "public org.sonar.api.config.PropertyDefinition$Builder onQualifiers(java.lang.String, java.lang.String...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onQualifiers(java.util.List<java.lang.String>)", "public org.sonar.api.config.PropertyDefinition$Builder onQualifiers(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onlyOnQualifiers(java.lang.String, java.lang.String...)", "public org.sonar.api.config.PropertyDefinition$Builder onlyOnQualifiers(java.lang.String, java.lang.String...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onlyOnQualifiers(java.util.List<java.lang.String>)", "public org.sonar.api.config.PropertyDefinition$Builder onlyOnQualifiers(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.type(org.sonar.api.PropertyType)", "public org.sonar.api.config.PropertyDefinition$Builder type(org.sonar.api.PropertyType)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.options(java.lang.String, java.lang.String...)", "public org.sonar.api.config.PropertyDefinition$Builder options(java.lang.String, java.lang.String...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.options(java.util.List<java.lang.String>)", "public org.sonar.api.config.PropertyDefinition$Builder options(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.multiValues(boolean)", "public org.sonar.api.config.PropertyDefinition$Builder multiValues(boolean)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.propertySetKey(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Builder propertySetKey(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.fields(org.sonar.api.config.PropertyFieldDefinition, org.sonar.api.config.PropertyFieldDefinition...)", "public org.sonar.api.config.PropertyDefinition$Builder fields(org.sonar.api.config.PropertyFieldDefinition, org.sonar.api.config.PropertyFieldDefinition...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.fields(java.util.List<org.sonar.api.config.PropertyFieldDefinition>)", "public org.sonar.api.config.PropertyDefinition$Builder fields(java.util.List<org.sonar.api.config.PropertyFieldDefinition>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.deprecatedKey(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Builder deprecatedKey(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.hidden()", "public org.sonar.api.config.PropertyDefinition$Builder hidden()"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.index(int)", "public org.sonar.api.config.PropertyDefinition$Builder index(int)"], ["org.sonar.api.config.PropertyDefinition", "org.sonar.api.config.PropertyDefinition$Builder.build()", "public org.sonar.api.config.PropertyDefinition build()"], ["org.sonar.api.config.EmailSettings", "org.sonar.api.config.EmailSettings(org.sonar.api.config.Configuration, org.sonar.api.platform.Server)", "public org.sonar.api.config.EmailSettings(org.sonar.api.config.Configuration, org.sonar.api.platform.Server)"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSmtpHost()", "public java.lang.String getSmtpHost()"], ["int", "org.sonar.api.config.EmailSettings.getSmtpPort()", "public int getSmtpPort()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSecureConnection()", "public java.lang.String getSecureConnection()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSmtpUsername()", "public java.lang.String getSmtpUsername()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSmtpPassword()", "public java.lang.String getSmtpPassword()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getFrom()", "public java.lang.String getFrom()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getFromName()", "public java.lang.String getFromName()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getPrefix()", "public java.lang.String getPrefix()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getServerBaseURL()", "public java.lang.String getServerBaseURL()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getInstanceName()", "public java.lang.String getInstanceName()"], ["java.util.List<org.sonar.api.config.PropertyDefinition>", "org.sonar.api.config.EmailSettings.definitions()", "public static java.util.List<org.sonar.api.config.PropertyDefinition> definitions()"], ["boolean", "org.sonar.api.config.PropertyDefinition$Result.isValid()", "public boolean isValid()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition$Result.getErrorKey()", "public java.lang.String getErrorKey()"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.name(java.lang.String)", "public org.sonar.api.config.PropertyFieldDefinition$Builder name(java.lang.String)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.description(java.lang.String)", "public org.sonar.api.config.PropertyFieldDefinition$Builder description(java.lang.String)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.indicativeSize(int)", "public org.sonar.api.config.PropertyFieldDefinition$Builder indicativeSize(int)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.type(org.sonar.api.PropertyType)", "public org.sonar.api.config.PropertyFieldDefinition$Builder type(org.sonar.api.PropertyType)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.options(java.lang.String...)", "public org.sonar.api.config.PropertyFieldDefinition$Builder options(java.lang.String...)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.options(java.util.List<java.lang.String>)", "public org.sonar.api.config.PropertyFieldDefinition$Builder options(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyFieldDefinition", "org.sonar.api.config.PropertyFieldDefinition$Builder.build()", "public org.sonar.api.config.PropertyFieldDefinition build()"], ["org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.create(java.lang.String, java.lang.String)", "public static org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange create(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.getNewValue()", "public java.lang.String getNewValue()"], ["java.lang.String", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.toString()", "public java.lang.String toString()"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition.build(java.lang.String)", "public static org.sonar.api.config.PropertyFieldDefinition$Builder build(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyFieldDefinition.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.config.PropertyFieldDefinition.name()", "public java.lang.String name()"], ["java.lang.String", "org.sonar.api.config.PropertyFieldDefinition.description()", "public java.lang.String description()"], ["int", "org.sonar.api.config.PropertyFieldDefinition.indicativeSize()", "public int indicativeSize()"], ["org.sonar.api.PropertyType", "org.sonar.api.config.PropertyFieldDefinition.type()", "public org.sonar.api.PropertyType type()"], ["java.util.List<java.lang.String>", "org.sonar.api.config.PropertyFieldDefinition.options()", "public java.util.List<java.lang.String> options()"], ["org.sonar.api.config.PropertyDefinition$Result", "org.sonar.api.config.PropertyFieldDefinition.validate(java.lang.String)", "public org.sonar.api.config.PropertyDefinition$Result validate(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Base64Cipher.encrypt(java.lang.String)", "public java.lang.String encrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Base64Cipher.decrypt(java.lang.String)", "public java.lang.String decrypt(java.lang.String)"], ["org.sonar.api.config.Encryption", "org.sonar.api.config.Settings.getEncryption()", "public org.sonar.api.config.Encryption getEncryption()"], ["java.util.Optional<java.lang.String>", "org.sonar.api.config.Settings.getRawString(java.lang.String)", "public java.util.Optional<java.lang.String> getRawString(java.lang.String)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.Settings.getDefinitions()", "public org.sonar.api.config.PropertyDefinitions getDefinitions()"], ["java.util.Optional<org.sonar.api.config.PropertyDefinition>", "org.sonar.api.config.Settings.getDefinition(java.lang.String)", "public java.util.Optional<org.sonar.api.config.PropertyDefinition> getDefinition(java.lang.String)"], ["boolean", "org.sonar.api.config.Settings.hasKey(java.lang.String)", "public boolean hasKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Settings.getDefaultValue(java.lang.String)", "public java.lang.String getDefaultValue(java.lang.String)"], ["boolean", "org.sonar.api.config.Settings.hasDefaultValue(java.lang.String)", "public boolean hasDefaultValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Settings.getString(java.lang.String)", "public java.lang.String getString(java.lang.String)"], ["boolean", "org.sonar.api.config.Settings.getBoolean(java.lang.String)", "public boolean getBoolean(java.lang.String)"], ["int", "org.sonar.api.config.Settings.getInt(java.lang.String)", "public int getInt(java.lang.String)"], ["long", "org.sonar.api.config.Settings.getLong(java.lang.String)", "public long getLong(java.lang.String)"], ["java.util.Date", "org.sonar.api.config.Settings.getDate(java.lang.String)", "public java.util.Date getDate(java.lang.String)"], ["java.util.Date", "org.sonar.api.config.Settings.getDateTime(java.lang.String)", "public java.util.Date getDateTime(java.lang.String)"], ["java.lang.Float", "org.sonar.api.config.Settings.getFloat(java.lang.String)", "public java.lang.Float getFloat(java.lang.String)"], ["java.lang.Double", "org.sonar.api.config.Settings.getDouble(java.lang.String)", "public java.lang.Double getDouble(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.Settings.getStringArray(java.lang.String)", "public java.lang.String[] getStringArray(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.Settings.getStringLines(java.lang.String)", "public java.lang.String[] getStringLines(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.Settings.getStringArrayBySeparator(java.lang.String, java.lang.String)", "public java.lang.String[] getStringArrayBySeparator(java.lang.String, java.lang.String)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.appendProperty(java.lang.String, java.lang.String)", "public org.sonar.api.config.Settings appendProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.String[])", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.String[])"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.String)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Boolean)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Boolean)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Integer)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Integer)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Long)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Long)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Double)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Double)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Float)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.lang.Float)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.util.Date)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.util.Date)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.addProperties(java.util.Map<java.lang.String, java.lang.String>)", "public org.sonar.api.config.Settings addProperties(java.util.Map<java.lang.String, java.lang.String>)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.addProperties(java.util.Properties)", "public org.sonar.api.config.Settings addProperties(java.util.Properties)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.util.Date, boolean)", "public org.sonar.api.config.Settings setProperty(java.lang.String, java.util.Date, boolean)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.removeProperty(java.lang.String)", "public org.sonar.api.config.Settings removeProperty(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.config.Settings.getKeysStartingWith(java.lang.String)", "public java.util.List<java.lang.String> getKeysStartingWith(java.lang.String)"], ["org.sonar.api.config.Encryption", "org.sonar.api.config.Encryption(java.lang.String)", "public org.sonar.api.config.Encryption(java.lang.String)"], ["void", "org.sonar.api.config.Encryption.setPathToSecretKey(java.lang.String)", "public void setPathToSecretKey(java.lang.String)"], ["boolean", "org.sonar.api.config.Encryption.hasSecretKey()", "public boolean hasSecretKey()"], ["boolean", "org.sonar.api.config.Encryption.isEncrypted(java.lang.String)", "public boolean isEncrypted(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Encryption.encrypt(java.lang.String)", "public java.lang.String encrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Encryption.scramble(java.lang.String)", "public java.lang.String scramble(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Encryption.generateRandomSecretKey()", "public java.lang.String generateRandomSecretKey()"], ["java.lang.String", "org.sonar.api.config.Encryption.decrypt(java.lang.String)", "public java.lang.String decrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.AesCipher.encrypt(java.lang.String)", "public java.lang.String encrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.AesCipher.decrypt(java.lang.String)", "public java.lang.String decrypt(java.lang.String)"], ["void", "org.sonar.api.config.AesCipher.setPathToSecretKey(java.lang.String)", "public void setPathToSecretKey(java.lang.String)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions(java.lang.Object...)", "public org.sonar.api.config.PropertyDefinitions(java.lang.Object...)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions(java.util.Collection<org.sonar.api.config.PropertyDefinition>)", "public org.sonar.api.config.PropertyDefinitions(java.util.Collection<org.sonar.api.config.PropertyDefinition>)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponents(java.util.Collection)", "public org.sonar.api.config.PropertyDefinitions addComponents(java.util.Collection)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponents(java.util.Collection, java.lang.String)", "public org.sonar.api.config.PropertyDefinitions addComponents(java.util.Collection, java.lang.String)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponent(java.lang.Object)", "public org.sonar.api.config.PropertyDefinitions addComponent(java.lang.Object)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponent(java.lang.Object, java.lang.String)", "public org.sonar.api.config.PropertyDefinitions addComponent(java.lang.Object, java.lang.String)"], ["org.sonar.api.config.PropertyDefinition", "org.sonar.api.config.PropertyDefinitions.get(java.lang.String)", "public org.sonar.api.config.PropertyDefinition get(java.lang.String)"], ["java.util.Collection<org.sonar.api.config.PropertyDefinition>", "org.sonar.api.config.PropertyDefinitions.getAll()", "public java.util.Collection<org.sonar.api.config.PropertyDefinition> getAll()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.validKey(java.lang.String)", "public java.lang.String validKey(java.lang.String)"], ["java.util.Map<org.sonar.api.config.Category, java.util.Map<org.sonar.api.config.SubCategory, java.util.Collection<org.sonar.api.config.PropertyDefinition>>>", "org.sonar.api.config.PropertyDefinitions.propertiesByCategory(java.lang.String)", "public java.util.Map<org.sonar.api.config.Category, java.util.Map<org.sonar.api.config.SubCategory, java.util.Collection<org.sonar.api.config.PropertyDefinition>>> propertiesByCategory(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getDefaultValue(java.lang.String)", "public java.lang.String getDefaultValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getCategory(java.lang.String)", "public java.lang.String getCategory(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getSubCategory(java.lang.String)", "public java.lang.String getSubCategory(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getCategory(org.sonar.api.Property)", "public java.lang.String getCategory(org.sonar.api.Property)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getNewKey(java.lang.String)", "public java.lang.String getNewKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getDeprecatedKey(java.lang.String)", "public java.lang.String getDeprecatedKey(java.lang.String)"], ["org.sonar.api.rules.RuleType[]", "org.sonar.api.rules.RuleType.values()", "public static org.sonar.api.rules.RuleType[] values()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.rules.RuleType.valueOf(java.lang.String)", "public static org.sonar.api.rules.RuleType valueOf(java.lang.String)"], ["int", "org.sonar.api.rules.RuleType.getDbConstant()", "public int getDbConstant()"], ["java.util.Set<java.lang.String>", "org.sonar.api.rules.RuleType.names()", "public static java.util.Set<java.lang.String> names()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.rules.RuleType.valueOf(int)", "public static org.sonar.api.rules.RuleType valueOf(int)"], ["org.sonar.api.rules.RuleType", "org.sonar.api.rules.RuleType.valueOfNullable(int)", "public static org.sonar.api.rules.RuleType valueOfNullable(int)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule()", "public org.sonar.api.rules.Rule()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule(java.lang.String, java.lang.String)", "public org.sonar.api.rules.Rule(java.lang.String, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.rules.Rule.getId()", "public java.lang.Integer getId()"], ["void", "org.sonar.api.rules.Rule.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.sonar.api.rules.Rule.getName()", "public java.lang.String getName()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setName(java.lang.String)", "public org.sonar.api.rules.Rule setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getKey()", "public java.lang.String getKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setKey(java.lang.String)", "public org.sonar.api.rules.Rule setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getConfigKey()", "public java.lang.String getConfigKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setConfigKey(java.lang.String)", "public org.sonar.api.rules.Rule setConfigKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getDescription()", "public java.lang.String getDescription()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDescription(java.lang.String)", "public org.sonar.api.rules.Rule setDescription(java.lang.String)"], ["java.lang.Boolean", "org.sonar.api.rules.Rule.isEnabled()", "public java.lang.Boolean isEnabled()"], ["java.util.List<org.sonar.api.rules.RuleParam>", "org.sonar.api.rules.Rule.getParams()", "public java.util.List<org.sonar.api.rules.RuleParam> getParams()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.Rule.getParam(java.lang.String)", "public org.sonar.api.rules.RuleParam getParam(java.lang.String)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setParams(java.util.List<org.sonar.api.rules.RuleParam>)", "public org.sonar.api.rules.Rule setParams(java.util.List<org.sonar.api.rules.RuleParam>)"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.Rule.createParameter()", "public org.sonar.api.rules.RuleParam createParameter()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.Rule.createParameter(java.lang.String)", "public org.sonar.api.rules.RuleParam createParameter(java.lang.String)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.Rule.getSeverity()", "public org.sonar.api.rules.RulePriority getSeverity()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setSeverity(org.sonar.api.rules.RulePriority)", "public org.sonar.api.rules.Rule setSeverity(org.sonar.api.rules.RulePriority)"], ["java.lang.String", "org.sonar.api.rules.Rule.getRepositoryKey()", "public java.lang.String getRepositoryKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setRepositoryKey(java.lang.String)", "public org.sonar.api.rules.Rule setRepositoryKey(java.lang.String)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setUniqueKey(java.lang.String, java.lang.String)", "public org.sonar.api.rules.Rule setUniqueKey(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.rules.Rule.isTemplate()", "public boolean isTemplate()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setIsTemplate(boolean)", "public org.sonar.api.rules.Rule setIsTemplate(boolean)"], ["org.sonar.check.Cardinality", "org.sonar.api.rules.Rule.getCardinality()", "public org.sonar.check.Cardinality getCardinality()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCardinality(org.sonar.check.Cardinality)", "public org.sonar.api.rules.Rule setCardinality(org.sonar.check.Cardinality)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.getParent()", "public org.sonar.api.rules.Rule getParent()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setParent(org.sonar.api.rules.Rule)", "public org.sonar.api.rules.Rule setParent(org.sonar.api.rules.Rule)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.getTemplate()", "public org.sonar.api.rules.Rule getTemplate()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setTemplate(org.sonar.api.rules.Rule)", "public org.sonar.api.rules.Rule setTemplate(org.sonar.api.rules.Rule)"], ["java.lang.String", "org.sonar.api.rules.Rule.getStatus()", "public java.lang.String getStatus()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setStatus(java.lang.String)", "public org.sonar.api.rules.Rule setStatus(java.lang.String)"], ["java.util.Date", "org.sonar.api.rules.Rule.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCreatedAt(java.util.Date)", "public org.sonar.api.rules.Rule setCreatedAt(java.util.Date)"], ["java.util.Date", "org.sonar.api.rules.Rule.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setUpdatedAt(java.util.Date)", "public org.sonar.api.rules.Rule setUpdatedAt(java.util.Date)"], ["java.lang.String", "org.sonar.api.rules.Rule.getLanguage()", "public java.lang.String getLanguage()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setLanguage(java.lang.String)", "public org.sonar.api.rules.Rule setLanguage(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.rules.Rule.getTags()", "public java.lang.String[] getTags()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setTags(java.lang.String[])", "public org.sonar.api.rules.Rule setTags(java.lang.String[])"], ["java.lang.String[]", "org.sonar.api.rules.Rule.getSystemTags()", "public java.lang.String[] getSystemTags()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setSystemTags(java.lang.String[])", "public org.sonar.api.rules.Rule setSystemTags(java.lang.String[])"], ["java.lang.Integer", "org.sonar.api.rules.Rule.getCharacteristicId()", "public java.lang.Integer getCharacteristicId()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCharacteristicId(java.lang.Integer)", "public org.sonar.api.rules.Rule setCharacteristicId(java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.rules.Rule.getDefaultCharacteristicId()", "public java.lang.Integer getDefaultCharacteristicId()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDefaultCharacteristicId(java.lang.Integer)", "public org.sonar.api.rules.Rule setDefaultCharacteristicId(java.lang.Integer)"], ["boolean", "org.sonar.api.rules.Rule.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.rules.Rule.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.rules.Rule.toString()", "public java.lang.String toString()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.create()", "public static org.sonar.api.rules.Rule create()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.create(java.lang.String, java.lang.String, java.lang.String)", "public static org.sonar.api.rules.Rule create(java.lang.String, java.lang.String, java.lang.String)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.create(java.lang.String, java.lang.String)", "public static org.sonar.api.rules.Rule create(java.lang.String, java.lang.String)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.rules.Rule.ruleKey()", "public org.sonar.api.rule.RuleKey ruleKey()"], ["java.lang.String", "org.sonar.api.rules.Rule.getDefaultCharacteristicKey()", "public java.lang.String getDefaultCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDefaultCharacteristicKey(java.lang.String)", "public org.sonar.api.rules.Rule setDefaultCharacteristicKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getDefaultSubCharacteristicKey()", "public java.lang.String getDefaultSubCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDefaultSubCharacteristicKey(java.lang.String)", "public org.sonar.api.rules.Rule setDefaultSubCharacteristicKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getCharacteristicKey()", "public java.lang.String getCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCharacteristicKey(java.lang.String)", "public org.sonar.api.rules.Rule setCharacteristicKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getSubCharacteristicKey()", "public java.lang.String getSubCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setSubCharacteristicKey(java.lang.String)", "public org.sonar.api.rules.Rule setSubCharacteristicKey(java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRule()", "public org.sonar.api.rules.ActiveRule()"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRule(org.sonar.api.profiles.RulesProfile, org.sonar.api.rules.Rule, org.sonar.api.rules.RulePriority)", "public org.sonar.api.rules.ActiveRule(org.sonar.api.profiles.RulesProfile, org.sonar.api.rules.Rule, org.sonar.api.rules.RulePriority)"], ["java.lang.Integer", "org.sonar.api.rules.ActiveRule.getId()", "public java.lang.Integer getId()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getInheritance()", "public java.lang.String getInheritance()"], ["void", "org.sonar.api.rules.ActiveRule.setInheritance(java.lang.String)", "public void setInheritance(java.lang.String)"], ["boolean", "org.sonar.api.rules.ActiveRule.isInherited()", "public boolean isInherited()"], ["boolean", "org.sonar.api.rules.ActiveRule.doesOverride()", "public boolean doesOverride()"], ["void", "org.sonar.api.rules.ActiveRule.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.ActiveRule.getRule()", "public org.sonar.api.rules.Rule getRule()"], ["void", "org.sonar.api.rules.ActiveRule.setRule(org.sonar.api.rules.Rule)", "public void setRule(org.sonar.api.rules.Rule)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.ActiveRule.getSeverity()", "public org.sonar.api.rules.RulePriority getSeverity()"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.ActiveRule.getOverriddenSeverity()", "public org.sonar.api.rules.RulePriority getOverriddenSeverity()"], ["void", "org.sonar.api.rules.ActiveRule.setSeverity(org.sonar.api.rules.RulePriority)", "public void setSeverity(org.sonar.api.rules.RulePriority)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.ActiveRule.getPriority()", "public org.sonar.api.rules.RulePriority getPriority()"], ["void", "org.sonar.api.rules.ActiveRule.setPriority(org.sonar.api.rules.RulePriority)", "public void setPriority(org.sonar.api.rules.RulePriority)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.rules.ActiveRule.getRulesProfile()", "public org.sonar.api.profiles.RulesProfile getRulesProfile()"], ["void", "org.sonar.api.rules.ActiveRule.setRulesProfile(org.sonar.api.profiles.RulesProfile)", "public void setRulesProfile(org.sonar.api.profiles.RulesProfile)"], ["java.util.List<org.sonar.api.rules.ActiveRuleParam>", "org.sonar.api.rules.ActiveRule.getActiveRuleParams()", "public java.util.List<org.sonar.api.rules.ActiveRuleParam> getActiveRuleParams()"], ["void", "org.sonar.api.rules.ActiveRule.setActiveRuleParams(java.util.List<org.sonar.api.rules.ActiveRuleParam>)", "public void setActiveRuleParams(java.util.List<org.sonar.api.rules.ActiveRuleParam>)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRule.setParameter(java.lang.String, java.lang.String)", "public org.sonar.api.rules.ActiveRule setParameter(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getParameter(java.lang.String)", "public java.lang.String getParameter(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getPluginName()", "public java.lang.String getPluginName()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getRepositoryKey()", "public java.lang.String getRepositoryKey()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getConfigKey()", "public java.lang.String getConfigKey()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getRuleKey()", "public java.lang.String getRuleKey()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getNoteData()", "public java.lang.String getNoteData()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getNoteUserLogin()", "public java.lang.String getNoteUserLogin()"], ["java.util.Date", "org.sonar.api.rules.ActiveRule.getNoteCreatedAt()", "public java.util.Date getNoteCreatedAt()"], ["java.util.Date", "org.sonar.api.rules.ActiveRule.getNoteUpdatedAt()", "public java.util.Date getNoteUpdatedAt()"], ["boolean", "org.sonar.api.rules.ActiveRule.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.rules.ActiveRule.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.rules.ActiveRule.clone()", "public java.lang.Object clone()"], ["boolean", "org.sonar.api.rules.ActiveRule.isEnabled()", "public boolean isEnabled()"], ["java.lang.String", "org.sonar.api.rules.RuleAnnotationUtils.getRuleKey(java.lang.Class)", "public static java.lang.String getRuleKey(java.lang.Class)"], ["org.sonar.api.rules.XMLRuleParser", "org.sonar.api.rules.XMLRuleParser()", "public org.sonar.api.rules.XMLRuleParser()"], ["java.util.List<org.sonar.api.rules.Rule>", "org.sonar.api.rules.XMLRuleParser.parse(java.io.File)", "public java.util.List<org.sonar.api.rules.Rule> parse(java.io.File)"], ["java.util.List<org.sonar.api.rules.Rule>", "org.sonar.api.rules.XMLRuleParser.parse(java.io.InputStream)", "public java.util.List<org.sonar.api.rules.Rule> parse(java.io.InputStream)"], ["java.util.List<org.sonar.api.rules.Rule>", "org.sonar.api.rules.XMLRuleParser.parse(java.io.Reader)", "public java.util.List<org.sonar.api.rules.Rule> parse(java.io.Reader)"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getKey()", "public final java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getLanguage()", "public final java.lang.String getLanguage()"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getName(boolean)", "public final java.lang.String getName(boolean)"], ["org.sonar.api.rules.RuleRepository", "org.sonar.api.rules.RuleRepository.setName(java.lang.String)", "public final org.sonar.api.rules.RuleRepository setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.toString()", "public java.lang.String toString()"], ["org.sonar.api.rules.AnnotationRuleParser", "org.sonar.api.rules.AnnotationRuleParser()", "public org.sonar.api.rules.AnnotationRuleParser()"], ["java.util.List<org.sonar.api.rules.Rule>", "org.sonar.api.rules.AnnotationRuleParser.parse(java.lang.String, java.util.Collection<java.lang.Class>)", "public java.util.List<org.sonar.api.rules.Rule> parse(java.lang.String, java.util.Collection<java.lang.Class>)"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.create()", "public static org.sonar.api.rules.RuleQuery create()"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.withRepositoryKey(java.lang.String)", "public org.sonar.api.rules.RuleQuery withRepositoryKey(java.lang.String)"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.withKey(java.lang.String)", "public org.sonar.api.rules.RuleQuery withKey(java.lang.String)"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.withConfigKey(java.lang.String)", "public org.sonar.api.rules.RuleQuery withConfigKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleQuery.getRepositoryKey()", "public java.lang.String getRepositoryKey()"], ["java.lang.String", "org.sonar.api.rules.RuleQuery.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.rules.RuleQuery.getConfigKey()", "public java.lang.String getConfigKey()"], ["org.sonar.api.rules.RulePriority[]", "org.sonar.api.rules.RulePriority.values()", "public static org.sonar.api.rules.RulePriority[] values()"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.valueOf(java.lang.String)", "public static org.sonar.api.rules.RulePriority valueOf(java.lang.String)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.valueOfString(java.lang.String)", "public static org.sonar.api.rules.RulePriority valueOfString(java.lang.String)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.fromCheckPriority(org.sonar.check.Priority)", "public static org.sonar.api.rules.RulePriority fromCheckPriority(org.sonar.check.Priority)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.valueOfInt(int)", "public static org.sonar.api.rules.RulePriority valueOfInt(int)"], ["org.sonar.api.rules.ActiveRuleParam", "org.sonar.api.rules.ActiveRuleParam()", "public org.sonar.api.rules.ActiveRuleParam()"], ["org.sonar.api.rules.ActiveRuleParam", "org.sonar.api.rules.ActiveRuleParam(org.sonar.api.rules.ActiveRule, org.sonar.api.rules.RuleParam, java.lang.String)", "public org.sonar.api.rules.ActiveRuleParam(org.sonar.api.rules.ActiveRule, org.sonar.api.rules.RuleParam, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.rules.ActiveRuleParam.getId()", "public java.lang.Integer getId()"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRuleParam.getActiveRule()", "public org.sonar.api.rules.ActiveRule getActiveRule()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setActiveRule(org.sonar.api.rules.ActiveRule)", "public void setActiveRule(org.sonar.api.rules.ActiveRule)"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.ActiveRuleParam.getRuleParam()", "public org.sonar.api.rules.RuleParam getRuleParam()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setRuleParam(org.sonar.api.rules.RuleParam)", "public void setRuleParam(org.sonar.api.rules.RuleParam)"], ["java.lang.String", "org.sonar.api.rules.ActiveRuleParam.getValue()", "public java.lang.String getValue()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRuleParam.getParamKey()", "public java.lang.String getParamKey()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setParamKey(java.lang.String)", "public void setParamKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRuleParam.getKey()", "public java.lang.String getKey()"], ["boolean", "org.sonar.api.rules.ActiveRuleParam.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.rules.ActiveRuleParam.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.sonar.api.rules.ActiveRuleParam.clone()", "public java.lang.Object clone()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam()", "public org.sonar.api.rules.RuleParam()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam(org.sonar.api.rules.Rule, java.lang.String, java.lang.String, java.lang.String)", "public org.sonar.api.rules.RuleParam(org.sonar.api.rules.Rule, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.rules.RuleParam.getId()", "public java.lang.Integer getId()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.RuleParam.getRule()", "public org.sonar.api.rules.Rule getRule()"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getKey()", "public java.lang.String getKey()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setKey(java.lang.String)", "public org.sonar.api.rules.RuleParam setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getDescription()", "public java.lang.String getDescription()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setDescription(java.lang.String)", "public org.sonar.api.rules.RuleParam setDescription(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getType()", "public java.lang.String getType()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setType(java.lang.String)", "public org.sonar.api.rules.RuleParam setType(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getDefaultValue()", "public java.lang.String getDefaultValue()"], ["java.lang.Boolean", "org.sonar.api.rules.RuleParam.getDefaultValueAsBoolean()", "public java.lang.Boolean getDefaultValueAsBoolean()"], ["java.lang.Integer", "org.sonar.api.rules.RuleParam.getDefaultValueAsInteger()", "public java.lang.Integer getDefaultValueAsInteger()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setDefaultValue(java.lang.String)", "public org.sonar.api.rules.RuleParam setDefaultValue(java.lang.String)"], ["boolean", "org.sonar.api.rules.RuleParam.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.rules.RuleParam.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.rules.RuleParam.toString()", "public java.lang.String toString()"], ["org.sonar.api.PropertyType[]", "org.sonar.api.PropertyType.values()", "public static org.sonar.api.PropertyType[] values()"], ["org.sonar.api.PropertyType", "org.sonar.api.PropertyType.valueOf(java.lang.String)", "public static org.sonar.api.PropertyType valueOf(java.lang.String)"], ["org.sonar.api.security.ExternalGroupsProvider$Context", "org.sonar.api.security.ExternalGroupsProvider$Context(java.lang.String, javax.servlet.http.HttpServletRequest)", "public org.sonar.api.security.ExternalGroupsProvider$Context(java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.sonar.api.security.ExternalGroupsProvider$Context.getUsername()", "public java.lang.String getUsername()"], ["javax.servlet.http.HttpServletRequest", "org.sonar.api.security.ExternalGroupsProvider$Context.getRequest()", "public javax.servlet.http.HttpServletRequest getRequest()"], ["boolean", "org.sonar.api.security.SecurityRealm$1.doAuthenticate(org.sonar.api.security.Authenticator$Context)", "public boolean doAuthenticate(org.sonar.api.security.Authenticator$Context)"], ["org.sonar.api.security.SecurityRealm", "org.sonar.api.security.SecurityRealm()", "public org.sonar.api.security.SecurityRealm()"], ["java.lang.String", "org.sonar.api.security.SecurityRealm.getName()", "public java.lang.String getName()"], ["void", "org.sonar.api.security.SecurityRealm.init()", "public void init()"], ["org.sonar.api.security.LoginPasswordAuthenticator", "org.sonar.api.security.SecurityRealm.getLoginPasswordAuthenticator()", "public org.sonar.api.security.LoginPasswordAuthenticator getLoginPasswordAuthenticator()"], ["org.sonar.api.security.Authenticator", "org.sonar.api.security.SecurityRealm.doGetAuthenticator()", "public org.sonar.api.security.Authenticator doGetAuthenticator()"], ["org.sonar.api.security.ExternalUsersProvider", "org.sonar.api.security.SecurityRealm.getUsersProvider()", "public org.sonar.api.security.ExternalUsersProvider getUsersProvider()"], ["org.sonar.api.security.ExternalGroupsProvider", "org.sonar.api.security.SecurityRealm.getGroupsProvider()", "public org.sonar.api.security.ExternalGroupsProvider getGroupsProvider()"], ["org.sonar.api.security.ExternalUsersProvider$Context", "org.sonar.api.security.ExternalUsersProvider$Context(java.lang.String, javax.servlet.http.HttpServletRequest)", "public org.sonar.api.security.ExternalUsersProvider$Context(java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.sonar.api.security.ExternalUsersProvider$Context.getUsername()", "public java.lang.String getUsername()"], ["javax.servlet.http.HttpServletRequest", "org.sonar.api.security.ExternalUsersProvider$Context.getRequest()", "public javax.servlet.http.HttpServletRequest getRequest()"], ["org.sonar.api.security.Authenticator", "org.sonar.api.security.Authenticator()", "public org.sonar.api.security.Authenticator()"], ["org.sonar.api.security.ExternalGroupsProvider", "org.sonar.api.security.ExternalGroupsProvider()", "public org.sonar.api.security.ExternalGroupsProvider()"], ["java.util.Collection<java.lang.String>", "org.sonar.api.security.ExternalGroupsProvider.doGetGroups(java.lang.String)", "public java.util.Collection<java.lang.String> doGetGroups(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.sonar.api.security.ExternalGroupsProvider.doGetGroups(org.sonar.api.security.ExternalGroupsProvider$Context)", "public java.util.Collection<java.lang.String> doGetGroups(org.sonar.api.security.ExternalGroupsProvider$Context)"], ["org.sonar.api.security.UserDetails", "org.sonar.api.security.UserDetails()", "public org.sonar.api.security.UserDetails()"], ["void", "org.sonar.api.security.UserDetails.setEmail(java.lang.String)", "public void setEmail(java.lang.String)"], ["java.lang.String", "org.sonar.api.security.UserDetails.getEmail()", "public java.lang.String getEmail()"], ["void", "org.sonar.api.security.UserDetails.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.security.UserDetails.getName()", "public java.lang.String getName()"], ["void", "org.sonar.api.security.UserDetails.setUserId(java.lang.String)", "public void setUserId(java.lang.String)"], ["java.lang.String", "org.sonar.api.security.UserDetails.getUserId()", "public java.lang.String getUserId()"], ["java.lang.String", "org.sonar.api.security.UserDetails.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.security.DefaultGroups.isAnyone(java.lang.String)", "public static boolean isAnyone(java.lang.String)"], ["org.sonar.api.security.ExternalUsersProvider", "org.sonar.api.security.ExternalUsersProvider()", "public org.sonar.api.security.ExternalUsersProvider()"], ["org.sonar.api.security.UserDetails", "org.sonar.api.security.ExternalUsersProvider.doGetUserDetails(java.lang.String)", "public org.sonar.api.security.UserDetails doGetUserDetails(java.lang.String)"], ["org.sonar.api.security.UserDetails", "org.sonar.api.security.ExternalUsersProvider.doGetUserDetails(org.sonar.api.security.ExternalUsersProvider$Context)", "public org.sonar.api.security.UserDetails doGetUserDetails(org.sonar.api.security.ExternalUsersProvider$Context)"], ["org.sonar.api.security.Authenticator$Context", "org.sonar.api.security.Authenticator$Context(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)", "public org.sonar.api.security.Authenticator$Context(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.sonar.api.security.Authenticator$Context.getUsername()", "public java.lang.String getUsername()"], ["java.lang.String", "org.sonar.api.security.Authenticator$Context.getPassword()", "public java.lang.String getPassword()"], ["javax.servlet.http.HttpServletRequest", "org.sonar.api.security.Authenticator$Context.getRequest()", "public javax.servlet.http.HttpServletRequest getRequest()"], ["org.sonar.api.notifications.Notification", "org.sonar.api.notifications.Notification(java.lang.String)", "public org.sonar.api.notifications.Notification(java.lang.String)"], ["java.lang.String", "org.sonar.api.notifications.Notification.getType()", "public java.lang.String getType()"], ["org.sonar.api.notifications.Notification", "org.sonar.api.notifications.Notification.setDefaultMessage(java.lang.String)", "public org.sonar.api.notifications.Notification setDefaultMessage(java.lang.String)"], ["java.lang.String", "org.sonar.api.notifications.Notification.getDefaultMessage()", "public java.lang.String getDefaultMessage()"], ["org.sonar.api.notifications.Notification", "org.sonar.api.notifications.Notification.setFieldValue(java.lang.String, java.lang.String)", "public org.sonar.api.notifications.Notification setFieldValue(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.notifications.Notification.getFieldValue(java.lang.String)", "public java.lang.String getFieldValue(java.lang.String)"], ["boolean", "org.sonar.api.notifications.Notification.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.notifications.Notification.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.notifications.Notification.toString()", "public java.lang.String toString()"], ["org.sonar.api.notifications.NotificationChannel", "org.sonar.api.notifications.NotificationChannel()", "public org.sonar.api.notifications.NotificationChannel()"], ["java.lang.String", "org.sonar.api.notifications.NotificationChannel.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.sonar.api.notifications.NotificationChannel.toString()", "public java.lang.String toString()"], ["org.sonar.api.test.exception.IllegalDurationException", "org.sonar.api.test.exception.IllegalDurationException(java.lang.String)", "public org.sonar.api.test.exception.IllegalDurationException(java.lang.String)"], ["org.sonar.api.test.exception.TestException", "org.sonar.api.test.exception.TestException(java.lang.String)", "public org.sonar.api.test.exception.TestException(java.lang.String)"], ["org.sonar.api.test.exception.TestException", "org.sonar.api.test.exception.TestException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.test.exception.TestException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.test.exception.CoverageAlreadyExistsException", "org.sonar.api.test.exception.CoverageAlreadyExistsException(java.lang.String)", "public org.sonar.api.test.exception.CoverageAlreadyExistsException(java.lang.String)"], ["org.sonar.api.test.TestCase$Status[]", "org.sonar.api.test.TestCase$Status.values()", "public static org.sonar.api.test.TestCase$Status[] values()"], ["org.sonar.api.test.TestCase$Status", "org.sonar.api.test.TestCase$Status.valueOf(java.lang.String)", "public static org.sonar.api.test.TestCase$Status valueOf(java.lang.String)"], ["org.sonar.api.test.TestCase$Status", "org.sonar.api.test.TestCase$Status.of(java.lang.String)", "public static org.sonar.api.test.TestCase$Status of(java.lang.String)"], ["org.sonar.api.SonarEdition[]", "org.sonar.api.SonarEdition.values()", "public static org.sonar.api.SonarEdition[] values()"], ["org.sonar.api.SonarEdition", "org.sonar.api.SonarEdition.valueOf(java.lang.String)", "public static org.sonar.api.SonarEdition valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.SonarEdition.getLabel()", "public java.lang.String getLabel()"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context(org.sonar.api.SonarRuntime)", "public org.sonar.api.Plugin$Context(org.sonar.api.SonarRuntime)"], ["org.sonar.api.utils.Version", "org.sonar.api.Plugin$Context.getSonarQubeVersion()", "public org.sonar.api.utils.Version getSonarQubeVersion()"], ["org.sonar.api.SonarRuntime", "org.sonar.api.Plugin$Context.getRuntime()", "public org.sonar.api.SonarRuntime getRuntime()"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context.addExtension(java.lang.Object)", "public org.sonar.api.Plugin$Context addExtension(java.lang.Object)"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context.addExtensions(java.util.Collection)", "public org.sonar.api.Plugin$Context addExtensions(java.util.Collection)"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context.addExtensions(java.lang.Object, java.lang.Object, java.lang.Object...)", "public org.sonar.api.Plugin$Context addExtensions(java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.util.List", "org.sonar.api.Plugin$Context.getExtensions()", "public java.util.List getExtensions()"], ["org.sonar.api.config.Configuration", "org.sonar.api.Plugin$Context.getBootConfiguration()", "public org.sonar.api.config.Configuration getBootConfiguration()"], ["java.lang.String", "org.sonar.api.rule.Severity.defaultSeverity()", "public static java.lang.String defaultSeverity()"], ["org.sonar.api.rule.RuleStatus[]", "org.sonar.api.rule.RuleStatus.values()", "public static org.sonar.api.rule.RuleStatus[] values()"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.rule.RuleStatus.valueOf(java.lang.String)", "public static org.sonar.api.rule.RuleStatus valueOf(java.lang.String)"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.rule.RuleStatus.defaultStatus()", "public static org.sonar.api.rule.RuleStatus defaultStatus()"], ["org.sonar.api.rule.RuleScope[]", "org.sonar.api.rule.RuleScope.values()", "public static org.sonar.api.rule.RuleScope[] values()"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.rule.RuleScope.valueOf(java.lang.String)", "public static org.sonar.api.rule.RuleScope valueOf(java.lang.String)"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.rule.RuleScope.defaultScope()", "public static org.sonar.api.rule.RuleScope defaultScope()"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.rule.RuleKey.of(java.lang.String, java.lang.String)", "public static org.sonar.api.rule.RuleKey of(java.lang.String, java.lang.String)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.rule.RuleKey.parse(java.lang.String)", "public static org.sonar.api.rule.RuleKey parse(java.lang.String)"], ["java.lang.String", "org.sonar.api.rule.RuleKey.repository()", "public java.lang.String repository()"], ["java.lang.String", "org.sonar.api.rule.RuleKey.rule()", "public java.lang.String rule()"], ["boolean", "org.sonar.api.rule.RuleKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.rule.RuleKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.rule.RuleKey.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.rule.RuleKey.compareTo(org.sonar.api.rule.RuleKey)", "public int compareTo(org.sonar.api.rule.RuleKey)"], ["int", "org.sonar.api.rule.RuleKey.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.codec.net.URLCodec", "org.sonar.api.internal.apachecommons.codec.net.URLCodec()", "public org.sonar.api.internal.apachecommons.codec.net.URLCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.URLCodec", "org.sonar.api.internal.apachecommons.codec.net.URLCodec(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.net.URLCodec(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encodeUrl(java.util.BitSet, byte[])", "public static final byte[] encodeUrl(java.util.BitSet, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decodeUrl(byte[])", "public static final byte[] decodeUrl(byte[]) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(byte[])", "public byte[] encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(byte[])", "public byte[] decode(byte[]) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(java.lang.String, java.lang.String)", "public java.lang.String encode(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(java.lang.String)", "public java.lang.String encode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(java.lang.String, java.lang.String)", "public java.lang.String decode(java.lang.String, java.lang.String) throws org.sonar.api.internal.apachecommons.codec.DecoderException, java.io.UnsupportedEncodingException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(java.lang.String)", "public java.lang.String decode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.getDefaultCharset()", "public java.lang.String getDefaultCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.getEncoding()", "public java.lang.String getEncoding()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.codec.digest.MessageDigestAlgorithms.values()", "public static java.lang.String[] values()"], ["org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt()", "public org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(byte[])", "public static java.lang.String apr1Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(byte[], java.util.Random)", "public static java.lang.String apr1Crypt(byte[], java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(byte[], java.lang.String)", "public static java.lang.String apr1Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String)", "public static java.lang.String apr1Crypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String, java.lang.String)", "public static java.lang.String apr1Crypt(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[])", "public static java.lang.String md5Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.util.Random)", "public static java.lang.String md5Crypt(byte[], java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String)", "public static java.lang.String md5Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String, java.lang.String)", "public static java.lang.String md5Crypt(byte[], java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String, java.lang.String, java.util.Random)", "public static java.lang.String md5Crypt(byte[], java.lang.String, java.lang.String, java.util.Random)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$4.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, char[])", "public org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, char[])"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, int)", "public org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, int)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer.length()", "public int length()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream, org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec, boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream, org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec, boolean)"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.eof()", "public void eof() throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encodeToString(byte[])", "public java.lang.String encodeToString(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encodeAsString(byte[])", "public java.lang.String encodeAsString(byte[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.decode(java.lang.String)", "public byte[] decode(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.decode(byte[])", "public byte[] decode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encode(byte[])", "public byte[] encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encode(byte[], int, int)", "public byte[] encode(byte[], int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.isInAlphabet(byte[], boolean)", "public boolean isInAlphabet(byte[], boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)", "public boolean isInAlphabet(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.getEncodedLength(byte[])", "public long getEncodedLength(byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64()", "public org.sonar.api.internal.apachecommons.codec.binary.Base64()"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base64(boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(int)", "public org.sonar.api.internal.apachecommons.codec.binary.Base64(int)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(int, byte[])", "public org.sonar.api.internal.apachecommons.codec.binary.Base64(int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(int, byte[], boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base64(int, byte[], boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isUrlSafe()", "public boolean isUrlSafe()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isArrayByteBase64(byte[])", "public static boolean isArrayByteBase64(byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isBase64(byte)", "public static boolean isBase64(byte)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isBase64(java.lang.String)", "public static boolean isBase64(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isBase64(byte[])", "public static boolean isBase64(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[])", "public static byte[] encodeBase64(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64String(byte[])", "public static java.lang.String encodeBase64String(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64URLSafe(byte[])", "public static byte[] encodeBase64URLSafe(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64URLSafeString(byte[])", "public static java.lang.String encodeBase64URLSafeString(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64Chunked(byte[])", "public static byte[] encodeBase64Chunked(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[], boolean)", "public static byte[] encodeBase64(byte[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[], boolean, boolean)", "public static byte[] encodeBase64(byte[], boolean, boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[], boolean, boolean, int)", "public static byte[] encodeBase64(byte[], boolean, boolean, int)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.decodeBase64(java.lang.String)", "public static byte[] decodeBase64(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.decodeBase64(byte[])", "public static byte[] decodeBase64(byte[])"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.codec.binary.Base64.decodeInteger(byte[])", "public static java.math.BigInteger decodeInteger(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeInteger(java.math.BigInteger)", "public static byte[] encodeInteger(java.math.BigInteger)"], ["org.sonar.api.internal.apachecommons.codec.Charsets", "org.sonar.api.internal.apachecommons.codec.Charsets()", "public org.sonar.api.internal.apachecommons.codec.Charsets()"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.Charsets.toCharset(java.nio.charset.Charset)", "public static java.nio.charset.Charset toCharset(java.nio.charset.Charset)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.Charsets.toCharset(java.lang.String)", "public static java.nio.charset.Charset toCharset(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, byte[])", "public static byte[] digest(java.security.MessageDigest, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, java.nio.ByteBuffer)", "public static byte[] digest(java.security.MessageDigest, java.nio.ByteBuffer)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, java.io.File)", "public static byte[] digest(java.security.MessageDigest, java.io.File) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, java.io.InputStream)", "public static byte[] digest(java.security.MessageDigest, java.io.InputStream) throws java.io.IOException"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getDigest(java.lang.String)", "public static java.security.MessageDigest getDigest(java.lang.String)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getDigest(java.lang.String, java.security.MessageDigest)", "public static java.security.MessageDigest getDigest(java.lang.String, java.security.MessageDigest)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getMd2Digest()", "public static java.security.MessageDigest getMd2Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getMd5Digest()", "public static java.security.MessageDigest getMd5Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha1Digest()", "public static java.security.MessageDigest getSha1Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha256Digest()", "public static java.security.MessageDigest getSha256Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_224Digest()", "public static java.security.MessageDigest getSha3_224Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_256Digest()", "public static java.security.MessageDigest getSha3_256Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_384Digest()", "public static java.security.MessageDigest getSha3_384Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_512Digest()", "public static java.security.MessageDigest getSha3_512Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha384Digest()", "public static java.security.MessageDigest getSha384Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha512Digest()", "public static java.security.MessageDigest getSha512Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getShaDigest()", "public static java.security.MessageDigest getShaDigest()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.isAvailable(java.lang.String)", "public static boolean isAvailable(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2(byte[])", "public static byte[] md2(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2(java.io.InputStream)", "public static byte[] md2(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2(java.lang.String)", "public static byte[] md2(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2Hex(byte[])", "public static java.lang.String md2Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2Hex(java.io.InputStream)", "public static java.lang.String md2Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2Hex(java.lang.String)", "public static java.lang.String md2Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5(byte[])", "public static byte[] md5(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5(java.io.InputStream)", "public static byte[] md5(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5(java.lang.String)", "public static byte[] md5(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5Hex(byte[])", "public static java.lang.String md5Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5Hex(java.io.InputStream)", "public static java.lang.String md5Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5Hex(java.lang.String)", "public static java.lang.String md5Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha(byte[])", "public static byte[] sha(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha(java.io.InputStream)", "public static byte[] sha(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha(java.lang.String)", "public static byte[] sha(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1(byte[])", "public static byte[] sha1(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1(java.io.InputStream)", "public static byte[] sha1(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1(java.lang.String)", "public static byte[] sha1(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1Hex(byte[])", "public static java.lang.String sha1Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1Hex(java.io.InputStream)", "public static java.lang.String sha1Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1Hex(java.lang.String)", "public static java.lang.String sha1Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256(byte[])", "public static byte[] sha256(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256(java.io.InputStream)", "public static byte[] sha256(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256(java.lang.String)", "public static byte[] sha256(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256Hex(byte[])", "public static java.lang.String sha256Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256Hex(java.io.InputStream)", "public static java.lang.String sha256Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256Hex(java.lang.String)", "public static java.lang.String sha256Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224(byte[])", "public static byte[] sha3_224(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224(java.io.InputStream)", "public static byte[] sha3_224(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224(java.lang.String)", "public static byte[] sha3_224(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224Hex(java.lang.String)", "public static java.lang.String sha3_224Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256(byte[])", "public static byte[] sha3_256(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256(java.io.InputStream)", "public static byte[] sha3_256(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256(java.lang.String)", "public static byte[] sha3_256(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256Hex(java.lang.String)", "public static java.lang.String sha3_256Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384(byte[])", "public static byte[] sha3_384(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384(java.io.InputStream)", "public static byte[] sha3_384(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384(java.lang.String)", "public static byte[] sha3_384(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384Hex(java.lang.String)", "public static java.lang.String sha3_384Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512(byte[])", "public static byte[] sha3_512(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512(java.io.InputStream)", "public static byte[] sha3_512(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512(java.lang.String)", "public static byte[] sha3_512(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512Hex(java.lang.String)", "public static java.lang.String sha3_512Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384(byte[])", "public static byte[] sha384(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384(java.io.InputStream)", "public static byte[] sha384(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384(java.lang.String)", "public static byte[] sha384(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384Hex(byte[])", "public static java.lang.String sha384Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384Hex(java.io.InputStream)", "public static java.lang.String sha384Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384Hex(java.lang.String)", "public static java.lang.String sha384Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512(byte[])", "public static byte[] sha512(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512(java.io.InputStream)", "public static byte[] sha512(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512(java.lang.String)", "public static byte[] sha512(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512Hex(byte[])", "public static java.lang.String sha512Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224Hex(byte[])", "public static java.lang.String sha3_224Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256Hex(byte[])", "public static java.lang.String sha3_256Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384Hex(byte[])", "public static java.lang.String sha3_384Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512Hex(byte[])", "public static java.lang.String sha3_512Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512Hex(java.io.InputStream)", "public static java.lang.String sha512Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224Hex(java.io.InputStream)", "public static java.lang.String sha3_224Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256Hex(java.io.InputStream)", "public static java.lang.String sha3_256Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384Hex(java.io.InputStream)", "public static java.lang.String sha3_384Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512Hex(java.io.InputStream)", "public static java.lang.String sha3_512Hex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512Hex(java.lang.String)", "public static java.lang.String sha512Hex(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.shaHex(byte[])", "public static java.lang.String shaHex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.shaHex(java.io.InputStream)", "public static java.lang.String shaHex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.shaHex(java.lang.String)", "public static java.lang.String shaHex(java.lang.String)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, byte[])", "public static java.security.MessageDigest updateDigest(java.security.MessageDigest, byte[])"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.nio.ByteBuffer)", "public static java.security.MessageDigest updateDigest(java.security.MessageDigest, java.nio.ByteBuffer)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.io.File)", "public static java.security.MessageDigest updateDigest(java.security.MessageDigest, java.io.File) throws java.io.IOException"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.io.InputStream)", "public static java.security.MessageDigest updateDigest(java.security.MessageDigest, java.io.InputStream) throws java.io.IOException"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.lang.String)", "public static java.security.MessageDigest updateDigest(java.security.MessageDigest, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.DigestUtils", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils()", "public org.sonar.api.internal.apachecommons.codec.digest.DigestUtils()"], ["org.sonar.api.internal.apachecommons.codec.digest.DigestUtils", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils(java.security.MessageDigest)", "public org.sonar.api.internal.apachecommons.codec.digest.DigestUtils(java.security.MessageDigest)"], ["org.sonar.api.internal.apachecommons.codec.digest.DigestUtils", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.digest.DigestUtils(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(byte[])", "public byte[] digest(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.nio.ByteBuffer)", "public byte[] digest(java.nio.ByteBuffer)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.io.File)", "public byte[] digest(java.io.File) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.io.InputStream)", "public byte[] digest(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.lang.String)", "public byte[] digest(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(byte[])", "public java.lang.String digestAsHex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.nio.ByteBuffer)", "public java.lang.String digestAsHex(java.nio.ByteBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.io.File)", "public java.lang.String digestAsHex(java.io.File) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.io.InputStream)", "public java.lang.String digestAsHex(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.lang.String)", "public java.lang.String digestAsHex(java.lang.String)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getMessageDigest()", "public java.security.MessageDigest getMessageDigest()"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength()", "public int getPatternLength()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(java.lang.String, boolean)", "public java.lang.String[] getReplacements(java.lang.String, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.matches(java.lang.String)", "public boolean matches(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic()", "public org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)", "public java.lang.String colognePhonetic(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String, java.lang.String)", "public boolean isEncodeEqual(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Caverphone", "org.sonar.api.internal.apachecommons.codec.language.Caverphone()", "public org.sonar.api.internal.apachecommons.codec.language.Caverphone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.caverphone(java.lang.String)", "public java.lang.String caverphone(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.isCaverphoneEqual(java.lang.String, java.lang.String)", "public boolean isCaverphoneEqual(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType[]", "org.sonar.api.internal.apachecommons.codec.language.bm.RuleType.values()", "public static org.sonar.api.internal.apachecommons.codec.language.bm.RuleType[] values()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType", "org.sonar.api.internal.apachecommons.codec.language.bm.RuleType.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.RuleType valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.RuleType.getName()", "public java.lang.String getName()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.contains(java.lang.String)", "public boolean contains(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.getAny()", "public java.lang.String getAny()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.isSingleton()", "public boolean isSingleton()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.binary.CharSequenceUtils", "org.sonar.api.internal.apachecommons.codec.binary.CharSequenceUtils()", "public org.sonar.api.internal.apachecommons.codec.binary.CharSequenceUtils()"], ["org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C()", "public org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C()"], ["long", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.getValue()", "public long getValue()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.reset()", "public void reset()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.update(byte[], int, int)", "public void update(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.update(int)", "public final void update(int)"], ["org.sonar.api.internal.apachecommons.codec.language.Metaphone", "org.sonar.api.internal.apachecommons.codec.language.Metaphone()", "public org.sonar.api.internal.apachecommons.codec.language.Metaphone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.metaphone(java.lang.String)", "public java.lang.String metaphone(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.isMetaphoneEqual(java.lang.String, java.lang.String)", "public boolean isMetaphoneEqual(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.getMaxCodeLen()", "public int getMaxCodeLen()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.setMaxCodeLen(int)", "public void setMaxCodeLen(int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$3.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.contains(java.lang.String)", "public boolean contains(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.getAny()", "public java.lang.String getAny()"], ["java.util.Set<java.lang.String>", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.getLanguages()", "public java.util.Set<java.lang.String> getLanguages()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.isSingleton()", "public boolean isSingleton()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$5.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList(java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme>)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList(java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme>)"], ["java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList.getPhonemes()", "public java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme> getPhonemes()"], ["java.lang.Iterable", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList.getPhonemes()", "public java.lang.Iterable getPhonemes()"], ["org.sonar.api.internal.apachecommons.codec.CharEncoding", "org.sonar.api.internal.apachecommons.codec.CharEncoding()", "public org.sonar.api.internal.apachecommons.codec.CharEncoding()"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decodeHex(java.lang.String)", "public static byte[] decodeHex(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decodeHex(char[])", "public static byte[] decodeHex(char[]) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(byte[])", "public static char[] encodeHex(byte[])"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)", "public static char[] encodeHex(java.nio.ByteBuffer)"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(byte[], boolean)", "public static char[] encodeHex(byte[], boolean)"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer, boolean)", "public static char[] encodeHex(java.nio.ByteBuffer, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(byte[])", "public static java.lang.String encodeHexString(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(byte[], boolean)", "public static java.lang.String encodeHexString(byte[], boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(java.nio.ByteBuffer)", "public static java.lang.String encodeHexString(java.nio.ByteBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(java.nio.ByteBuffer, boolean)", "public static java.lang.String encodeHexString(java.nio.ByteBuffer, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Hex", "org.sonar.api.internal.apachecommons.codec.binary.Hex()", "public org.sonar.api.internal.apachecommons.codec.binary.Hex()"], ["org.sonar.api.internal.apachecommons.codec.binary.Hex", "org.sonar.api.internal.apachecommons.codec.binary.Hex(java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.codec.binary.Hex(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.binary.Hex", "org.sonar.api.internal.apachecommons.codec.binary.Hex(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.binary.Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decode(byte[])", "public byte[] decode(byte[]) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decode(java.nio.ByteBuffer)", "public byte[] decode(java.nio.ByteBuffer) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encode(byte[])", "public byte[] encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encode(java.nio.ByteBuffer)", "public byte[] encode(java.nio.ByteBuffer)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.binary.Hex.getCharset()", "public java.nio.charset.Charset getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.getCharsetName()", "public java.lang.String getCharsetName()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.available()", "public int available() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.void mark(int)", "public synchronized void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.markSupported()", "public boolean markSupported()"], ["int", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream, boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream, boolean, int, byte[])", "public org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream, boolean, int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.StringEncoderComparator", "org.sonar.api.internal.apachecommons.codec.StringEncoderComparator()", "public org.sonar.api.internal.apachecommons.codec.StringEncoderComparator()"], ["org.sonar.api.internal.apachecommons.codec.StringEncoderComparator", "org.sonar.api.internal.apachecommons.codec.StringEncoderComparator(org.sonar.api.internal.apachecommons.codec.StringEncoder)", "public org.sonar.api.internal.apachecommons.codec.StringEncoderComparator(org.sonar.api.internal.apachecommons.codec.StringEncoder)"], ["int", "org.sonar.api.internal.apachecommons.codec.StringEncoderComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec()", "public org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(boolean)", "public org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(boolean)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset, boolean)", "public org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset, boolean)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.lang.String) throws java.nio.charset.IllegalCharsetNameException, java.lang.IllegalArgumentException, java.nio.charset.UnsupportedCharsetException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet, byte[])", "public static final byte[] encodeQuotedPrintable(java.util.BitSet, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet, byte[], boolean)", "public static final byte[] encodeQuotedPrintable(java.util.BitSet, byte[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])", "public static final byte[] decodeQuotedPrintable(byte[]) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(byte[])", "public byte[] encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(byte[])", "public byte[] decode(byte[]) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.String)", "public java.lang.String encode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.String, java.nio.charset.Charset)", "public java.lang.String decode(java.lang.String, java.nio.charset.Charset) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.String, java.lang.String)", "public java.lang.String decode(java.lang.String, java.lang.String) throws org.sonar.api.internal.apachecommons.codec.DecoderException, java.io.UnsupportedEncodingException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.String)", "public java.lang.String decode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.getCharset()", "public java.nio.charset.Charset getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.getDefaultCharset()", "public java.lang.String getDefaultCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.String, java.nio.charset.Charset)", "public java.lang.String encode(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.String, java.lang.String)", "public java.lang.String encode(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.values()", "public static org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms[] values()"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt()", "public org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha256Crypt(byte[])", "public static java.lang.String sha256Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String)", "public static java.lang.String sha256Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String, java.util.Random)", "public static java.lang.String sha256Crypt(byte[], java.lang.String, java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha512Crypt(byte[])", "public static java.lang.String sha512Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha512Crypt(byte[], java.lang.String)", "public static java.lang.String sha512Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha512Crypt(byte[], java.lang.String, java.util.Random)", "public static java.lang.String sha512Crypt(byte[], java.lang.String, java.util.Random)"], ["org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32()", "public org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32()"], ["long", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.getValue()", "public long getValue()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.reset()", "public void reset()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.update(byte[], int, int)", "public void update(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.update(int)", "public final void update(int)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Lang", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.instance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.Lang instance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Lang", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.loadFromResource(java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Languages)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.Lang loadFromResource(java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Languages)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.guessLanguage(java.lang.String)", "public java.lang.String guessLanguage(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.guessLanguages(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String)"], ["java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getInstance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public static java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule> getInstance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getInstance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, java.lang.String)", "public static java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule> getInstance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, java.lang.String)"], ["java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getInstanceMap(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public static java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>> getInstanceMap(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getInstanceMap(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, java.lang.String)", "public static java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>> getInstanceMap(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule(java.lang.String, java.lang.String, java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule(java.lang.String, java.lang.String, java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$RPattern", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getLContext()", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$RPattern getLContext()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getPattern()", "public java.lang.String getPattern()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getPhoneme()", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr getPhoneme()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$RPattern", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getRContext()", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$RPattern getRContext()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence, int)", "public boolean patternAndContextMatches(java.lang.CharSequence, int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$10.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder()", "public org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder.encode(java.lang.Object)", "public final java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)", "public final java.lang.String encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String, java.lang.String)", "public boolean isEncodeEquals(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex()", "public org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex()"], ["org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex(boolean)", "public org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex(boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String)", "public java.lang.String soundex(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.cli.Digest.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.cli.Digest.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException()", "public org.sonar.api.internal.apachecommons.codec.DecoderException()"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.net.PercentCodec", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec()", "public org.sonar.api.internal.apachecommons.codec.net.PercentCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.PercentCodec", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec(byte[], boolean)", "public org.sonar.api.internal.apachecommons.codec.net.PercentCodec(byte[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.encode(byte[])", "public byte[] encode(byte[]) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.decode(byte[])", "public byte[] decode(byte[]) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["org.sonar.api.internal.apachecommons.codec.digest.Crypt", "org.sonar.api.internal.apachecommons.codec.digest.Crypt()", "public org.sonar.api.internal.apachecommons.codec.digest.Crypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(byte[])", "public static java.lang.String crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(byte[], java.lang.String)", "public static java.lang.String crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(java.lang.String)", "public static java.lang.String crypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(java.lang.String, java.lang.String)", "public static java.lang.String crypt(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$6.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$8.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang$LangRule.matches(java.lang.String)", "public boolean matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType[]", "org.sonar.api.internal.apachecommons.codec.language.bm.NameType.values()", "public static org.sonar.api.internal.apachecommons.codec.language.bm.NameType[] values()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType", "org.sonar.api.internal.apachecommons.codec.language.bm.NameType.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.NameType valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.NameType.getName()", "public java.lang.String getName()"], ["org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone()", "public org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)", "public java.lang.String doubleMetaphone(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String, boolean)", "public java.lang.String doubleMetaphone(java.lang.String, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String)", "public boolean isDoubleMetaphoneEqual(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String, boolean)", "public boolean isDoubleMetaphoneEqual(java.lang.String, java.lang.String, boolean)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.getMaxCodeLen()", "public int getMaxCodeLen()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.setMaxCodeLen(int)", "public void setMaxCodeLen(int)"], ["org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex()", "public org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex()"], ["org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex(char[])", "public org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex(char[])"], ["org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.difference(java.lang.String, java.lang.String)", "public int difference(java.lang.String, java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.soundex(java.lang.String)", "public java.lang.String soundex(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex()", "public org.sonar.api.internal.apachecommons.codec.language.Soundex()"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex(char[])", "public org.sonar.api.internal.apachecommons.codec.language.Soundex(char[])"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.language.Soundex(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex(java.lang.String, boolean)", "public org.sonar.api.internal.apachecommons.codec.language.Soundex(java.lang.String, boolean)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.Soundex.difference(java.lang.String, java.lang.String)", "public int difference(java.lang.String, java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Soundex.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Soundex.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.Soundex.getMaxLength()", "public int getMaxLength()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.Soundex.setMaxLength(int)", "public void setMaxLength(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Soundex.soundex(java.lang.String)", "public java.lang.String soundex(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException()", "public org.sonar.api.internal.apachecommons.codec.EncoderException()"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec()", "public org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec()"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.encode(byte[])", "public byte[] encode(byte[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.decode(byte[])", "public byte[] decode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toByteArray(java.lang.String)", "public byte[] toByteArray(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.fromAscii(char[])", "public static byte[] fromAscii(char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.fromAscii(byte[])", "public static byte[] fromAscii(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toAsciiBytes(byte[])", "public static byte[] toAsciiBytes(byte[])"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toAsciiChars(byte[])", "public static char[] toAsciiChars(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toAsciiString(byte[])", "public static java.lang.String toAsciiString(byte[])"], ["org.sonar.api.internal.apachecommons.codec.net.QCodec", "org.sonar.api.internal.apachecommons.codec.net.QCodec()", "public org.sonar.api.internal.apachecommons.codec.net.QCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.QCodec", "org.sonar.api.internal.apachecommons.codec.net.QCodec(java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.codec.net.QCodec(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.net.QCodec", "org.sonar.api.internal.apachecommons.codec.net.QCodec(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.net.QCodec(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.String, java.nio.charset.Charset)", "public java.lang.String encode(java.lang.String, java.nio.charset.Charset) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.String, java.lang.String)", "public java.lang.String encode(java.lang.String, java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.String)", "public java.lang.String encode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.decode(java.lang.String)", "public java.lang.String decode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.net.QCodec.getCharset()", "public java.nio.charset.Charset getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.getDefaultCharset()", "public java.lang.String getDefaultCharset()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.net.QCodec.isEncodeBlanks()", "public boolean isEncodeBlanks()"], ["void", "org.sonar.api.internal.apachecommons.codec.net.QCodec.setEncodeBlanks(boolean)", "public void setEncodeBlanks(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.isAvailable(java.lang.String)", "public static boolean isAvailable(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.isAvailable(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms)", "public static boolean isAvailable(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms)"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacMd5(byte[])", "public static javax.crypto.Mac getHmacMd5(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha1(byte[])", "public static javax.crypto.Mac getHmacSha1(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha256(byte[])", "public static javax.crypto.Mac getHmacSha256(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha384(byte[])", "public static javax.crypto.Mac getHmacSha384(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha512(byte[])", "public static javax.crypto.Mac getHmacSha512(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getInitializedMac(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, byte[])", "public static javax.crypto.Mac getInitializedMac(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getInitializedMac(java.lang.String, byte[])", "public static javax.crypto.Mac getInitializedMac(java.lang.String, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5(byte[], byte[])", "public static byte[] hmacMd5(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5(byte[], java.io.InputStream)", "public static byte[] hmacMd5(byte[], java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5(java.lang.String, java.lang.String)", "public static byte[] hmacMd5(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5Hex(byte[], byte[])", "public static java.lang.String hmacMd5Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5Hex(byte[], java.io.InputStream)", "public static java.lang.String hmacMd5Hex(byte[], java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5Hex(java.lang.String, java.lang.String)", "public static java.lang.String hmacMd5Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1(byte[], byte[])", "public static byte[] hmacSha1(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1(byte[], java.io.InputStream)", "public static byte[] hmacSha1(byte[], java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1(java.lang.String, java.lang.String)", "public static byte[] hmacSha1(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1Hex(byte[], byte[])", "public static java.lang.String hmacSha1Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1Hex(byte[], java.io.InputStream)", "public static java.lang.String hmacSha1Hex(byte[], java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1Hex(java.lang.String, java.lang.String)", "public static java.lang.String hmacSha1Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256(byte[], byte[])", "public static byte[] hmacSha256(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256(byte[], java.io.InputStream)", "public static byte[] hmacSha256(byte[], java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256(java.lang.String, java.lang.String)", "public static byte[] hmacSha256(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256Hex(byte[], byte[])", "public static java.lang.String hmacSha256Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256Hex(byte[], java.io.InputStream)", "public static java.lang.String hmacSha256Hex(byte[], java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256Hex(java.lang.String, java.lang.String)", "public static java.lang.String hmacSha256Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384(byte[], byte[])", "public static byte[] hmacSha384(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384(byte[], java.io.InputStream)", "public static byte[] hmacSha384(byte[], java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384(java.lang.String, java.lang.String)", "public static byte[] hmacSha384(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384Hex(byte[], byte[])", "public static java.lang.String hmacSha384Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384Hex(byte[], java.io.InputStream)", "public static java.lang.String hmacSha384Hex(byte[], java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384Hex(java.lang.String, java.lang.String)", "public static java.lang.String hmacSha384Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512(byte[], byte[])", "public static byte[] hmacSha512(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512(byte[], java.io.InputStream)", "public static byte[] hmacSha512(byte[], java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512(java.lang.String, java.lang.String)", "public static byte[] hmacSha512(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512Hex(byte[], byte[])", "public static java.lang.String hmacSha512Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512Hex(byte[], java.io.InputStream)", "public static java.lang.String hmacSha512Hex(byte[], java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512Hex(java.lang.String, java.lang.String)", "public static java.lang.String hmacSha512Hex(java.lang.String, java.lang.String)"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac, byte[])", "public static javax.crypto.Mac updateHmac(javax.crypto.Mac, byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac, java.io.InputStream)", "public static javax.crypto.Mac updateHmac(javax.crypto.Mac, java.io.InputStream) throws java.io.IOException"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac, java.lang.String)", "public static javax.crypto.Mac updateHmac(javax.crypto.Mac, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils()", "public org.sonar.api.internal.apachecommons.codec.digest.HmacUtils()"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(java.lang.String, byte[])", "public org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(java.lang.String, byte[])"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, byte[])", "public org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(byte[])", "public byte[] hmac(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(byte[])", "public java.lang.String hmacHex(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.lang.String)", "public byte[] hmac(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.lang.String)", "public java.lang.String hmacHex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.nio.ByteBuffer)", "public byte[] hmac(java.nio.ByteBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.nio.ByteBuffer)", "public java.lang.String hmacHex(java.nio.ByteBuffer)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.io.InputStream)", "public byte[] hmac(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.io.InputStream)", "public java.lang.String hmacHex(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.io.File)", "public byte[] hmac(java.io.File) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.io.File)", "public java.lang.String hmacHex(java.io.File) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder()", "public org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)", "public java.lang.String encode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.getNameType()", "public org.sonar.api.internal.apachecommons.codec.language.bm.NameType getNameType()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.getRuleType()", "public org.sonar.api.internal.apachecommons.codec.language.bm.RuleType getRuleType()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.isConcat()", "public boolean isConcat()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)", "public void setConcat(boolean)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setNameType(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)", "public void setNameType(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.sonar.api.internal.apachecommons.codec.language.bm.RuleType)", "public void setRuleType(org.sonar.api.internal.apachecommons.codec.language.bm.RuleType)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)", "public void setMaxPhonemes(int)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet()", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet.from(java.util.Set<java.lang.String>)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet from(java.util.Set<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.codec.binary.StringUtils", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils()", "public org.sonar.api.internal.apachecommons.codec.binary.StringUtils()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence)", "public static boolean equals(java.lang.CharSequence, java.lang.CharSequence)"], ["java.nio.ByteBuffer", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)", "public static java.nio.ByteBuffer getByteBufferUtf8(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)", "public static byte[] getBytesIso8859_1(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String, java.lang.String)", "public static byte[] getBytesUnchecked(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)", "public static byte[] getBytesUsAscii(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf16(java.lang.String)", "public static byte[] getBytesUtf16(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf16Be(java.lang.String)", "public static byte[] getBytesUtf16Be(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf16Le(java.lang.String)", "public static byte[] getBytesUtf16Le(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)", "public static byte[] getBytesUtf8(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newString(byte[], java.lang.String)", "public static java.lang.String newString(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringIso8859_1(byte[])", "public static java.lang.String newStringIso8859_1(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUsAscii(byte[])", "public static java.lang.String newStringUsAscii(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf16(byte[])", "public static java.lang.String newStringUtf16(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf16Be(byte[])", "public static java.lang.String newStringUtf16Be(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf16Le(byte[])", "public static java.lang.String newStringUtf16Le(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf8(byte[])", "public static java.lang.String newStringUtf8(byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream, boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream, boolean, int, byte[])", "public org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream, boolean, int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.digest.XXHash32", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32()", "public org.sonar.api.internal.apachecommons.codec.digest.XXHash32()"], ["org.sonar.api.internal.apachecommons.codec.digest.XXHash32", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32(int)", "public org.sonar.api.internal.apachecommons.codec.digest.XXHash32(int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.reset()", "public void reset()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.update(int)", "public void update(int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.update(byte[], int, int)", "public void update(byte[], int, int)"], ["long", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.getValue()", "public long getValue()"], ["org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt()", "public org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(byte[])", "public static java.lang.String crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String)", "public static java.lang.String crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(java.lang.String)", "public static java.lang.String crypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(java.lang.String, java.lang.String)", "public static java.lang.String crypt(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Nysiis", "org.sonar.api.internal.apachecommons.codec.language.Nysiis()", "public org.sonar.api.internal.apachecommons.codec.language.Nysiis()"], ["org.sonar.api.internal.apachecommons.codec.language.Nysiis", "org.sonar.api.internal.apachecommons.codec.language.Nysiis(boolean)", "public org.sonar.api.internal.apachecommons.codec.language.Nysiis(boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.isStrict()", "public boolean isStrict()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.nysiis(java.lang.String)", "public java.lang.String nysiis(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme$1.compare(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)", "public int compare(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$7.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(java.lang.CharSequence)", "public void append(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr, int)", "public void apply(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr, int)"], ["java.util.Set<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme>", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.getPhonemes()", "public java.util.Set<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme> getPhonemes()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString()", "public java.lang.String makeString()"], ["org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone", "org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone()", "public org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone.isEncodeEqual(java.lang.String, java.lang.String)", "public boolean isEncodeEqual(java.lang.String, java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.createBranch()", "public org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch createBranch()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.finish()", "public void finish()"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.hashCode()", "public int hashCode()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(java.lang.String, boolean)", "public void processNextReplacement(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, char[])", "public org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, char[])"], ["void", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer.addLeft(char)", "public void addLeft(char)"], ["char", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar()", "public char getNextChar()"], ["char", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer.removeNext()", "public char removeNext()"], ["org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult(org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone, int)", "public org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult(org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)", "public void append(char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char, char)", "public void append(char, char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char)", "public void appendPrimary(char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)", "public void appendAlternate(char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)", "public void append(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String, java.lang.String)", "public void append(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(java.lang.String)", "public void appendPrimary(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(java.lang.String)", "public void appendAlternate(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getPrimary()", "public java.lang.String getPrimary()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getAlternate()", "public java.lang.String getAlternate()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.isComplete()", "public boolean isComplete()"], ["org.sonar.api.internal.apachecommons.codec.language.Caverphone2", "org.sonar.api.internal.apachecommons.codec.language.Caverphone2()", "public org.sonar.api.internal.apachecommons.codec.language.Caverphone2()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone2.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$1.compare(org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule, org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule)", "public int compare(org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule, org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.codec.language.Caverphone1", "org.sonar.api.internal.apachecommons.codec.language.Caverphone1()", "public org.sonar.api.internal.apachecommons.codec.language.Caverphone1()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone1.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.net.BCodec", "org.sonar.api.internal.apachecommons.codec.net.BCodec()", "public org.sonar.api.internal.apachecommons.codec.net.BCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.BCodec", "org.sonar.api.internal.apachecommons.codec.net.BCodec(java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.codec.net.BCodec(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.net.BCodec", "org.sonar.api.internal.apachecommons.codec.net.BCodec(java.lang.String)", "public org.sonar.api.internal.apachecommons.codec.net.BCodec(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.String, java.nio.charset.Charset)", "public java.lang.String encode(java.lang.String, java.nio.charset.Charset) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.String, java.lang.String)", "public java.lang.String encode(java.lang.String, java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.String)", "public java.lang.String encode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.decode(java.lang.String)", "public java.lang.String decode(java.lang.String) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.EncoderException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.BCodec.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object) throws org.sonar.api.internal.apachecommons.codec.DecoderException"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.net.BCodec.getCharset()", "public java.nio.charset.Charset getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.getDefaultCharset()", "public java.lang.String getDefaultCharset()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$1.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, boolean)", "public org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, boolean)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, boolean, int)", "public org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, boolean, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.encode(java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public java.lang.String encode(java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Lang", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getLang()", "public org.sonar.api.internal.apachecommons.codec.language.bm.Lang getLang()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getNameType()", "public org.sonar.api.internal.apachecommons.codec.language.bm.NameType getNameType()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getRuleType()", "public org.sonar.api.internal.apachecommons.codec.language.bm.RuleType getRuleType()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.isConcat()", "public boolean isConcat()"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getMaxPhonemes()", "public int getMaxPhonemes()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$2.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.append(java.lang.CharSequence)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme append(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.getLanguages()", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet getLanguages()"], ["java.lang.Iterable<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.getPhonemes()", "public java.lang.Iterable<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme> getPhonemes()"], ["java.lang.CharSequence", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.getPhonemeText()", "public java.lang.CharSequence getPhonemeText()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.join(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme join(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme mergeWithLanguage(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication(java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>>, java.lang.CharSequence, org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder, int, int)", "public org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication(java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>>, java.lang.CharSequence, org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder, int, int)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.getI()", "public int getI()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder()", "public org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()", "public org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication invoke()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.isFound()", "public boolean isFound()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$9.isMatch(java.lang.CharSequence)", "public boolean isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.contains(java.lang.String)", "public boolean contains(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.getAny()", "public java.lang.String getAny()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.isSingleton()", "public boolean isSingleton()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)", "public org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages.getInstance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.Languages getInstance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages.getInstance(java.lang.String)", "public static org.sonar.api.internal.apachecommons.codec.language.bm.Languages getInstance(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages.getLanguages()", "public java.util.Set<java.lang.String> getLanguages()"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneOutputBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneOutputBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, int)", "public org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneOutputBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneOutputBuffer.addRight(char)", "public void addRight(char)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32()", "public org.sonar.api.internal.apachecommons.codec.binary.Base32()"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(byte)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32(byte)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32(boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(boolean, byte)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32(boolean, byte)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32(int)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[])", "public org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[], boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[], boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[], boolean, byte)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[], boolean, byte)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base32.isInAlphabet(byte)", "public boolean isInAlphabet(byte)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream, boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream, boolean, int, byte[])", "public org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream, boolean, int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream, boolean)", "public org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream, boolean, int, byte[])", "public org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream, boolean, int, byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec$Context.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator()", "public org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator()", "public org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.AbstractFileComparator.sort(java.io.File...)", "public java.io.File[] sort(java.io.File...)"], ["java.util.List<java.io.File>", "org.sonar.api.internal.apachecommons.io.comparator.AbstractFileComparator.sort(java.util.List<java.io.File>)", "public java.util.List<java.io.File> sort(java.util.List<java.io.File>)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.AbstractFileComparator.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry(java.io.File)", "public org.sonar.api.internal.apachecommons.io.monitor.FileEntry(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry(org.sonar.api.internal.apachecommons.io.monitor.FileEntry, java.io.File)", "public org.sonar.api.internal.apachecommons.io.monitor.FileEntry(org.sonar.api.internal.apachecommons.io.monitor.FileEntry, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.refresh(java.io.File)", "public boolean refresh(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.newChildInstance(java.io.File)", "public org.sonar.api.internal.apachecommons.io.monitor.FileEntry newChildInstance(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getParent()", "public org.sonar.api.internal.apachecommons.io.monitor.FileEntry getParent()"], ["int", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getLevel()", "public int getLevel()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry[]", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getChildren()", "public org.sonar.api.internal.apachecommons.io.monitor.FileEntry[] getChildren()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setChildren(org.sonar.api.internal.apachecommons.io.monitor.FileEntry[])", "public void setChildren(org.sonar.api.internal.apachecommons.io.monitor.FileEntry[])"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getFile()", "public java.io.File getFile()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getName()", "public java.lang.String getName()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setName(java.lang.String)", "public void setName(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getLastModified()", "public long getLastModified()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setLastModified(long)", "public void setLastModified(long)"], ["long", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getLength()", "public long getLength()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setLength(long)", "public void setLength(long)"], ["boolean", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.isExists()", "public boolean isExists()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setExists(boolean)", "public void setExists(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.isDirectory()", "public boolean isDirectory()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setDirectory(boolean)", "public void setDirectory(boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String[])", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.util.List<java.lang.String>)", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter(long)", "public org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter(long, boolean)", "public org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter(long, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.HiddenFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[])", "public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String, long)", "public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String, long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[], long)", "public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[], long)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter()", "public org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)", "public org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.addFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public void addFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.getFileFilters()", "public java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter> getFileFilters()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.removeFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public boolean removeFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.setFileFilters(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)", "public void setFileFilters(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils()", "public org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils()"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.io.File...)", "public static java.io.File[] filter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.io.File...)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)", "public static java.io.File[] filter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"], ["java.util.List<java.io.File>", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filterList(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)", "public static java.util.List<java.io.File> filterList(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"], ["java.util.List<java.io.File>", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filterList(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.io.File...)", "public static java.util.List<java.io.File> filterList(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.io.File...)"], ["java.util.Set<java.io.File>", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filterSet(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.io.File...)", "public static java.util.Set<java.io.File> filterSet(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.io.File...)"], ["java.util.Set<java.io.File>", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filterSet(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)", "public static java.util.Set<java.io.File> filterSet(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.directoryFileFilter()", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter directoryFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.fileFileFilter()", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter fileFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.andFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter andFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.orFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter orFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.and(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter and(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.or(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter or(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)"], ["java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.toList(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)", "public static java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter> toList(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.notFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter notFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.trueFileFilter()", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter trueFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.falseFileFilter()", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter falseFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(long)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter ageFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(long, boolean)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter ageFileFilter(long, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date, boolean)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter ageFileFilter(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File, boolean)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter ageFileFilter(java.io.File, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.sizeFileFilter(long)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter sizeFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.sizeFileFilter(long, boolean)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter sizeFileFilter(long, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long, long)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter sizeRangeFileFilter(long, long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String, long)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String, long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[], long)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[], long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeCVSAware(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter makeCVSAware(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeSVNAware(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter makeSVNAware(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter makeDirectoryOnly(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeFileOnly(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter makeFileOnly(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.CopyUtils", "org.sonar.api.internal.apachecommons.io.CopyUtils()", "public org.sonar.api.internal.apachecommons.io.CopyUtils()"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(byte[], java.io.OutputStream)", "public static void copy(byte[], java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(byte[], java.io.Writer)", "public static void copy(byte[], java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(byte[], java.io.Writer, java.lang.String)", "public static void copy(byte[], java.io.Writer, java.lang.String) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.InputStream, java.io.OutputStream)", "public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.Reader, java.io.Writer)", "public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer)", "public static void copy(java.io.InputStream, java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)", "public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream)", "public static void copy(java.io.Reader, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)", "public static void copy(java.io.Reader, java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.lang.String, java.io.OutputStream)", "public static void copy(java.lang.String, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.lang.String, java.io.OutputStream, java.lang.String)", "public static void copy(java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.lang.String, java.io.Writer)", "public static void copy(java.lang.String, java.io.Writer) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer()", "public org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer()"], ["org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream(java.io.InputStream, boolean)", "public org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream(java.io.InputStream, boolean)"], ["int", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream.read()", "public int read() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream.void mark(int)", "public synchronized void mark(int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder)", "public org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder, int)", "public org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder, int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.Charset, int)", "public org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.Charset, int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.lang.String, int)", "public org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader)", "public org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.read()", "public int read() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset, int)", "public org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset, int)"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.lang.String, int)", "public org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.available()", "public int available() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.markSupported()", "public boolean markSupported()"], ["org.sonar.api.internal.apachecommons.io.input.ClassLoaderObjectInputStream", "org.sonar.api.internal.apachecommons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader, java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader, java.io.InputStream) throws java.io.IOException, java.io.StreamCorruptedException"], ["org.sonar.api.internal.apachecommons.io.input.TeeInputStream", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream(java.io.InputStream, java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.input.TeeInputStream(java.io.InputStream, java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.io.input.TeeInputStream", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream(java.io.InputStream, java.io.OutputStream, boolean)", "public org.sonar.api.internal.apachecommons.io.input.TeeInputStream(java.io.InputStream, java.io.OutputStream, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.close()", "public void close() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.ObservableInputStream", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.ObservableInputStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.add(org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer)", "public void add(org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer)"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.remove(org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer)", "public void remove(org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer)"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.removeAllObservers()", "public void removeAllObservers()"], ["int", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.consume()", "public void consume() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream(java.io.InputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readBoolean()", "public boolean readBoolean() throws java.io.IOException, java.io.EOFException"], ["byte", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readByte()", "public byte readByte() throws java.io.IOException, java.io.EOFException"], ["char", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readChar()", "public char readChar() throws java.io.IOException, java.io.EOFException"], ["double", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readDouble()", "public double readDouble() throws java.io.IOException, java.io.EOFException"], ["float", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readFloat()", "public float readFloat() throws java.io.IOException, java.io.EOFException"], ["void", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readFully(byte[])", "public void readFully(byte[]) throws java.io.IOException, java.io.EOFException"], ["void", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readFully(byte[], int, int)", "public void readFully(byte[], int, int) throws java.io.IOException, java.io.EOFException"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readInt()", "public int readInt() throws java.io.IOException, java.io.EOFException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readLine()", "public java.lang.String readLine() throws java.io.IOException, java.io.EOFException"], ["long", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readLong()", "public long readLong() throws java.io.IOException, java.io.EOFException"], ["short", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readShort()", "public short readShort() throws java.io.IOException, java.io.EOFException"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException, java.io.EOFException"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readUnsignedShort()", "public int readUnsignedShort() throws java.io.IOException, java.io.EOFException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readUTF()", "public java.lang.String readUTF() throws java.io.IOException, java.io.EOFException"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException, java.io.EOFException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getBomEncoding()", "public java.lang.String getBomEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getXmlGuessEncoding()", "public java.lang.String getXmlGuessEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getXmlEncoding()", "public java.lang.String getXmlEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getContentTypeMime()", "public java.lang.String getContentTypeMime()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getContentTypeEncoding()", "public java.lang.String getContentTypeEncoding()"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener)", "public org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long)", "public org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean)", "public org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean)", "public org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, int)", "public org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)", "public org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)", "public org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, int)", "public static org.sonar.api.internal.apachecommons.io.input.Tailer create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)", "public static org.sonar.api.internal.apachecommons.io.input.Tailer create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)", "public static org.sonar.api.internal.apachecommons.io.input.Tailer create(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean)", "public static org.sonar.api.internal.apachecommons.io.input.Tailer create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean)", "public static org.sonar.api.internal.apachecommons.io.input.Tailer create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long)", "public static org.sonar.api.internal.apachecommons.io.input.Tailer create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener)", "public static org.sonar.api.internal.apachecommons.io.input.Tailer create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.input.Tailer.getFile()", "public java.io.File getFile()"], ["long", "org.sonar.api.internal.apachecommons.io.input.Tailer.getDelay()", "public long getDelay()"], ["void", "org.sonar.api.internal.apachecommons.io.input.Tailer.run()", "public void run()"], ["void", "org.sonar.api.internal.apachecommons.io.input.Tailer.stop()", "public void stop()"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream(java.io.InputStream) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(java.lang.Class<?>...)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream accept(java.lang.Class<?>...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(java.lang.Class<?>...)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream reject(java.lang.Class<?>...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(java.lang.String...)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream accept(java.lang.String...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(java.lang.String...)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream reject(java.lang.String...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(java.util.regex.Pattern)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream accept(java.util.regex.Pattern)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(java.util.regex.Pattern)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream reject(java.util.regex.Pattern)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(org.sonar.api.internal.apachecommons.io.serialization.ClassNameMatcher)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream accept(org.sonar.api.internal.apachecommons.io.serialization.ClassNameMatcher)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(org.sonar.api.internal.apachecommons.io.serialization.ClassNameMatcher)", "public org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream reject(org.sonar.api.internal.apachecommons.io.serialization.ClassNameMatcher)"], ["org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream()", "public org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream()"], ["org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream(int)", "public org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.write(byte[], int, int)", "public void write(byte[], int, int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.void write(int)", "public synchronized void write(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.int write(java.io.InputStream)", "public synchronized int write(java.io.InputStream) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.int size()", "public synchronized int size()"], ["void", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.void reset()", "public synchronized void reset()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.void writeTo(java.io.OutputStream)", "public synchronized void writeTo(java.io.OutputStream) throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream)", "public static java.io.InputStream toBufferedInputStream(java.io.InputStream) throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream, int)", "public static java.io.InputStream toBufferedInputStream(java.io.InputStream, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.java.io.InputStream toInputStream()", "public synchronized java.io.InputStream toInputStream()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.byte[] toByteArray()", "public synchronized byte[] toByteArray()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toString(java.lang.String)", "public java.lang.String toString(java.lang.String) throws java.io.UnsupportedEncodingException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toString(java.nio.charset.Charset)", "public java.lang.String toString(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.output.NullOutputStream", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream()", "public org.sonar.api.internal.apachecommons.io.output.NullOutputStream()"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream.write(int)", "public void write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream", "org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream(T)", "public org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream(T)"], ["void", "org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["T", "org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream.getAppendable()", "public T getAppendable()"], ["org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream()", "public org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream()"], ["java.io.OutputStream", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)", "public java.io.OutputStream bindStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.lang.String, boolean)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.lang.String, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.Charset, boolean)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.Charset, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.CharsetEncoder)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.CharsetEncoder) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.CharsetEncoder, boolean)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.CharsetEncoder, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.lang.String, boolean)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.lang.String, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.Charset, boolean)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.Charset, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.CharsetEncoder)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.CharsetEncoder) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.CharsetEncoder, boolean)", "public org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.CharsetEncoder, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(char[])", "public void write(char[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.FilenameUtils", "org.sonar.api.internal.apachecommons.io.FilenameUtils()", "public org.sonar.api.internal.apachecommons.io.FilenameUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalize(java.lang.String)", "public static java.lang.String normalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalize(java.lang.String, boolean)", "public static java.lang.String normalize(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)", "public static java.lang.String normalizeNoEndSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String, boolean)", "public static java.lang.String normalizeNoEndSeparator(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.concat(java.lang.String, java.lang.String)", "public static java.lang.String concat(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.directoryContains(java.lang.String, java.lang.String)", "public static boolean directoryContains(java.lang.String, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.separatorsToUnix(java.lang.String)", "public static java.lang.String separatorsToUnix(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.separatorsToWindows(java.lang.String)", "public static java.lang.String separatorsToWindows(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.separatorsToSystem(java.lang.String)", "public static java.lang.String separatorsToSystem(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPrefixLength(java.lang.String)", "public static int getPrefixLength(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)", "public static int indexOfLastSeparator(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.FilenameUtils.indexOfExtension(java.lang.String)", "public static int indexOfExtension(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPrefix(java.lang.String)", "public static java.lang.String getPrefix(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPath(java.lang.String)", "public static java.lang.String getPath(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)", "public static java.lang.String getPathNoEndSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getFullPath(java.lang.String)", "public static java.lang.String getFullPath(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)", "public static java.lang.String getFullPathNoEndSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getName(java.lang.String)", "public static java.lang.String getName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getBaseName(java.lang.String)", "public static java.lang.String getBaseName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getExtension(java.lang.String)", "public static java.lang.String getExtension(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.removeExtension(java.lang.String)", "public static java.lang.String removeExtension(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equals(java.lang.String, java.lang.String)", "public static boolean equals(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equalsOnSystem(java.lang.String, java.lang.String)", "public static boolean equalsOnSystem(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equalsNormalized(java.lang.String, java.lang.String)", "public static boolean equalsNormalized(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String, java.lang.String)", "public static boolean equalsNormalizedOnSystem(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equals(java.lang.String, java.lang.String, boolean, org.sonar.api.internal.apachecommons.io.IOCase)", "public static boolean equals(java.lang.String, java.lang.String, boolean, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String)", "public static boolean isExtension(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String[])", "public static boolean isExtension(java.lang.String, java.lang.String[])"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.isExtension(java.lang.String, java.util.Collection<java.lang.String>)", "public static boolean isExtension(java.lang.String, java.util.Collection<java.lang.String>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String)", "public static boolean wildcardMatch(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String, java.lang.String)", "public static boolean wildcardMatchOnSystem(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public static boolean wildcardMatch(java.lang.String, java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.FileCleaner", "org.sonar.api.internal.apachecommons.io.FileCleaner()", "public org.sonar.api.internal.apachecommons.io.FileCleaner()"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.io.File, java.lang.Object)", "public static void track(java.io.File, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.io.File, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)", "public static void track(java.io.File, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.lang.String, java.lang.Object)", "public static void track(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.lang.String, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)", "public static void track(java.lang.String, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["int", "org.sonar.api.internal.apachecommons.io.FileCleaner.getTrackCount()", "public static int getTrackCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.FileCleaner.void exitWhenFinished()", "public static synchronized void exitWhenFinished()"], ["org.sonar.api.internal.apachecommons.io.FileCleaningTracker", "org.sonar.api.internal.apachecommons.io.FileCleaner.getInstance()", "public static org.sonar.api.internal.apachecommons.io.FileCleaningTracker getInstance()"], ["org.sonar.api.internal.apachecommons.io.IOUtils", "org.sonar.api.internal.apachecommons.io.IOUtils()", "public org.sonar.api.internal.apachecommons.io.IOUtils()"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.close(java.net.URLConnection)", "public static void close(java.net.URLConnection)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Reader)", "public static void closeQuietly(java.io.Reader)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Writer)", "public static void closeQuietly(java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.InputStream)", "public static void closeQuietly(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.OutputStream)", "public static void closeQuietly(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Closeable)", "public static void closeQuietly(java.io.Closeable)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Closeable...)", "public static void closeQuietly(java.io.Closeable...)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.net.Socket)", "public static void closeQuietly(java.net.Socket)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.nio.channels.Selector)", "public static void closeQuietly(java.nio.channels.Selector)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.net.ServerSocket)", "public static void closeQuietly(java.net.ServerSocket)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedInputStream(java.io.InputStream)", "public static java.io.InputStream toBufferedInputStream(java.io.InputStream) throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedInputStream(java.io.InputStream, int)", "public static java.io.InputStream toBufferedInputStream(java.io.InputStream, int) throws java.io.IOException"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedReader(java.io.Reader)", "public static java.io.BufferedReader toBufferedReader(java.io.Reader)"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedReader(java.io.Reader, int)", "public static java.io.BufferedReader toBufferedReader(java.io.Reader, int)"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Reader)", "public static java.io.BufferedReader buffer(java.io.Reader)"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Reader, int)", "public static java.io.BufferedReader buffer(java.io.Reader, int)"], ["java.io.BufferedWriter", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Writer)", "public static java.io.BufferedWriter buffer(java.io.Writer)"], ["java.io.BufferedWriter", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Writer, int)", "public static java.io.BufferedWriter buffer(java.io.Writer, int)"], ["java.io.BufferedOutputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.OutputStream)", "public static java.io.BufferedOutputStream buffer(java.io.OutputStream)"], ["java.io.BufferedOutputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.OutputStream, int)", "public static java.io.BufferedOutputStream buffer(java.io.OutputStream, int)"], ["java.io.BufferedInputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.InputStream)", "public static java.io.BufferedInputStream buffer(java.io.InputStream)"], ["java.io.BufferedInputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.InputStream, int)", "public static java.io.BufferedInputStream buffer(java.io.InputStream, int)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.InputStream)", "public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.InputStream, long)", "public static byte[] toByteArray(java.io.InputStream, long) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.InputStream, int)", "public static byte[] toByteArray(java.io.InputStream, int) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.Reader)", "public static byte[] toByteArray(java.io.Reader) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.Reader, java.nio.charset.Charset)", "public static byte[] toByteArray(java.io.Reader, java.nio.charset.Charset) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.Reader, java.lang.String)", "public static byte[] toByteArray(java.io.Reader, java.lang.String) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.lang.String)", "public static byte[] toByteArray(java.lang.String) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.net.URI)", "public static byte[] toByteArray(java.net.URI) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.net.URL)", "public static byte[] toByteArray(java.net.URL) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.net.URLConnection)", "public static byte[] toByteArray(java.net.URLConnection) throws java.io.IOException"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.InputStream)", "public static char[] toCharArray(java.io.InputStream) throws java.io.IOException"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.InputStream, java.nio.charset.Charset)", "public static char[] toCharArray(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.InputStream, java.lang.String)", "public static char[] toCharArray(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.Reader)", "public static char[] toCharArray(java.io.Reader) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.InputStream)", "public static java.lang.String toString(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset)", "public static java.lang.String toString(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.InputStream, java.lang.String)", "public static java.lang.String toString(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.Reader)", "public static java.lang.String toString(java.io.Reader) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URI)", "public static java.lang.String toString(java.net.URI) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URI, java.nio.charset.Charset)", "public static java.lang.String toString(java.net.URI, java.nio.charset.Charset) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URI, java.lang.String)", "public static java.lang.String toString(java.net.URI, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URL)", "public static java.lang.String toString(java.net.URL) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URL, java.nio.charset.Charset)", "public static java.lang.String toString(java.net.URL, java.nio.charset.Charset) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URL, java.lang.String)", "public static java.lang.String toString(java.net.URL, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(byte[])", "public static java.lang.String toString(byte[]) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(byte[], java.lang.String)", "public static java.lang.String toString(byte[], java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToString(java.lang.String, java.nio.charset.Charset)", "public static java.lang.String resourceToString(java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToString(java.lang.String, java.nio.charset.Charset, java.lang.ClassLoader)", "public static java.lang.String resourceToString(java.lang.String, java.nio.charset.Charset, java.lang.ClassLoader) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToByteArray(java.lang.String)", "public static byte[] resourceToByteArray(java.lang.String) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToByteArray(java.lang.String, java.lang.ClassLoader)", "public static byte[] resourceToByteArray(java.lang.String, java.lang.ClassLoader) throws java.io.IOException"], ["java.net.URL", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToURL(java.lang.String)", "public static java.net.URL resourceToURL(java.lang.String) throws java.io.IOException"], ["java.net.URL", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToURL(java.lang.String, java.lang.ClassLoader)", "public static java.net.URL resourceToURL(java.lang.String, java.lang.ClassLoader) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.IOUtils.readLines(java.io.InputStream)", "public static java.util.List<java.lang.String> readLines(java.io.InputStream) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.IOUtils.readLines(java.io.InputStream, java.nio.charset.Charset)", "public static java.util.List<java.lang.String> readLines(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.IOUtils.readLines(java.io.InputStream, java.lang.String)", "public static java.util.List<java.lang.String> readLines(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.IOUtils.readLines(java.io.Reader)", "public static java.util.List<java.lang.String> readLines(java.io.Reader) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.IOUtils.lineIterator(java.io.Reader)", "public static org.sonar.api.internal.apachecommons.io.LineIterator lineIterator(java.io.Reader)"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.IOUtils.lineIterator(java.io.InputStream, java.nio.charset.Charset)", "public static org.sonar.api.internal.apachecommons.io.LineIterator lineIterator(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.IOUtils.lineIterator(java.io.InputStream, java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.LineIterator lineIterator(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.CharSequence)", "public static java.io.InputStream toInputStream(java.lang.CharSequence)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.CharSequence, java.nio.charset.Charset)", "public static java.io.InputStream toInputStream(java.lang.CharSequence, java.nio.charset.Charset)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.CharSequence, java.lang.String)", "public static java.io.InputStream toInputStream(java.lang.CharSequence, java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.String)", "public static java.io.InputStream toInputStream(java.lang.String)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.String, java.nio.charset.Charset)", "public static java.io.InputStream toInputStream(java.lang.String, java.nio.charset.Charset)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.String, java.lang.String)", "public static java.io.InputStream toInputStream(java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.OutputStream)", "public static void write(byte[], java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeChunked(byte[], java.io.OutputStream)", "public static void writeChunked(byte[], java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.Writer)", "public static void write(byte[], java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.Writer, java.nio.charset.Charset)", "public static void write(byte[], java.io.Writer, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.Writer, java.lang.String)", "public static void write(byte[], java.io.Writer, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.Writer)", "public static void write(char[], java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeChunked(char[], java.io.Writer)", "public static void writeChunked(char[], java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.OutputStream)", "public static void write(char[], java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.OutputStream, java.nio.charset.Charset)", "public static void write(char[], java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.OutputStream, java.lang.String)", "public static void write(char[], java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.Writer)", "public static void write(java.lang.CharSequence, java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)", "public static void write(java.lang.CharSequence, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream, java.nio.charset.Charset)", "public static void write(java.lang.CharSequence, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream, java.lang.String)", "public static void write(java.lang.CharSequence, java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.Writer)", "public static void write(java.lang.String, java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.OutputStream)", "public static void write(java.lang.String, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.nio.charset.Charset)", "public static void write(java.lang.String, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.lang.String)", "public static void write(java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.StringBuffer, java.io.Writer)", "public static void write(java.lang.StringBuffer, java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.StringBuffer, java.io.OutputStream)", "public static void write(java.lang.StringBuffer, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String)", "public static void write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream)", "public static void writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.nio.charset.Charset)", "public static void writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String)", "public static void writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.Writer)", "public static void writeLines(java.util.Collection<?>, java.lang.String, java.io.Writer) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)", "public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream, int)", "public static long copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream)", "public static long copyLarge(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, byte[])", "public static long copyLarge(java.io.InputStream, java.io.OutputStream, byte[]) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)", "public static long copyLarge(java.io.InputStream, java.io.OutputStream, long, long) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long, byte[])", "public static long copyLarge(java.io.InputStream, java.io.OutputStream, long, long, byte[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.Writer)", "public static void copy(java.io.InputStream, java.io.Writer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset)", "public static void copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)", "public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.Writer)", "public static int copy(java.io.Reader, java.io.Writer) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer)", "public static long copyLarge(java.io.Reader, java.io.Writer) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, char[])", "public static long copyLarge(java.io.Reader, java.io.Writer, char[]) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long)", "public static long copyLarge(java.io.Reader, java.io.Writer, long, long) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long, char[])", "public static long copyLarge(java.io.Reader, java.io.Writer, long, long, char[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream)", "public static void copy(java.io.Reader, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.nio.charset.Charset)", "public static void copy(java.io.Reader, java.io.OutputStream, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)", "public static void copy(java.io.Reader, java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOUtils.contentEquals(java.io.InputStream, java.io.InputStream)", "public static boolean contentEquals(java.io.InputStream, java.io.InputStream) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOUtils.contentEquals(java.io.Reader, java.io.Reader)", "public static boolean contentEquals(java.io.Reader, java.io.Reader) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader, java.io.Reader)", "public static boolean contentEqualsIgnoreEOL(java.io.Reader, java.io.Reader) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.skip(java.io.InputStream, long)", "public static long skip(java.io.InputStream, long) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel, long)", "public static long skip(java.nio.channels.ReadableByteChannel, long) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.skip(java.io.Reader, long)", "public static long skip(java.io.Reader, long) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.skipFully(java.io.InputStream, long)", "public static void skipFully(java.io.InputStream, long) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel, long)", "public static void skipFully(java.nio.channels.ReadableByteChannel, long) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.skipFully(java.io.Reader, long)", "public static void skipFully(java.io.Reader, long) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.Reader, char[], int, int)", "public static int read(java.io.Reader, char[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.Reader, char[])", "public static int read(java.io.Reader, char[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.InputStream, byte[], int, int)", "public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.InputStream, byte[])", "public static int read(java.io.InputStream, byte[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)", "public static int read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.Reader, char[], int, int)", "public static void readFully(java.io.Reader, char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.Reader, char[])", "public static void readFully(java.io.Reader, char[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.InputStream, int)", "public static byte[] readFully(java.io.InputStream, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)", "public static void readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.FileCleaningTracker", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker()", "public org.sonar.api.internal.apachecommons.io.FileCleaningTracker()"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.io.File, java.lang.Object)", "public void track(java.io.File, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.io.File, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)", "public void track(java.io.File, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.lang.String, java.lang.Object)", "public void track(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.lang.String, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)", "public void track(java.lang.String, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["int", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.getTrackCount()", "public int getTrackCount()"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.getDeleteFailures()", "public java.util.List<java.lang.String> getDeleteFailures()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.void exitWhenFinished()", "public synchronized void exitWhenFinished()"], ["org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException(java.io.File, int)", "public org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException(java.io.File, int)"], ["org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException(java.lang.String, java.io.File, int)", "public org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException(java.lang.String, java.io.File, int)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException.getFile()", "public java.io.File getFile()"], ["int", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException.getDepth()", "public int getDepth()"], ["org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator()", "public org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator()", "public org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator()", "public org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.Charsets", "org.sonar.api.internal.apachecommons.io.Charsets()", "public org.sonar.api.internal.apachecommons.io.Charsets()"], ["java.util.SortedMap<java.lang.String, java.nio.charset.Charset>", "org.sonar.api.internal.apachecommons.io.Charsets.requiredCharsets()", "public static java.util.SortedMap<java.lang.String, java.nio.charset.Charset> requiredCharsets()"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.io.Charsets.toCharset(java.nio.charset.Charset)", "public static java.nio.charset.Charset toCharset(java.nio.charset.Charset)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.io.Charsets.toCharset(java.lang.String)", "public static java.nio.charset.Charset toCharset(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor()", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onStart(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)", "public void onStart(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onDirectoryCreate(java.io.File)", "public void onDirectoryCreate(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onDirectoryChange(java.io.File)", "public void onDirectoryChange(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onDirectoryDelete(java.io.File)", "public void onDirectoryDelete(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onFileCreate(java.io.File)", "public void onFileCreate(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onFileChange(java.io.File)", "public void onFileChange(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onFileDelete(java.io.File)", "public void onFileDelete(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onStop(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)", "public void onStop(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(long)", "public org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(long, boolean)", "public org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(long, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.util.Date)", "public org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.util.Date)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.util.Date, boolean)", "public org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.util.Date, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.io.File)", "public org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.io.File, boolean)", "public org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.io.File, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.FalseFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.FalseFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.CanWriteFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.EmptyFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String, int)", "public org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)", "public org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.TrueFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.TrueFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker$Reaper.run()", "public void run()"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver(java.security.MessageDigest)", "public org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver(java.security.MessageDigest)"], ["org.sonar.api.internal.apachecommons.io.input.CloseShieldInputStream", "org.sonar.api.internal.apachecommons.io.input.CloseShieldInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.CloseShieldInputStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.CloseShieldInputStream.close()", "public void close()"], ["org.sonar.api.internal.apachecommons.io.input.BoundedInputStream", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream(java.io.InputStream, long)", "public org.sonar.api.internal.apachecommons.io.input.BoundedInputStream(java.io.InputStream, long)"], ["org.sonar.api.internal.apachecommons.io.input.BoundedInputStream", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.BoundedInputStream(java.io.InputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.available()", "public int available() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.void mark(int)", "public synchronized void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.markSupported()", "public boolean markSupported()"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.isPropagateClose()", "public boolean isPropagateClose()"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.setPropagateClose(boolean)", "public void setPropagateClose(boolean)"], ["org.sonar.api.internal.apachecommons.io.input.ProxyReader", "org.sonar.api.internal.apachecommons.io.input.ProxyReader(java.io.Reader)", "public org.sonar.api.internal.apachecommons.io.input.ProxyReader(java.io.Reader)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read(char[])", "public int read(char[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read(java.nio.CharBuffer)", "public int read(java.nio.CharBuffer) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.skip(long)", "public long skip(long) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.ready()", "public boolean ready() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.void mark(int)", "public synchronized void mark(int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.void reset()", "public synchronized void reset() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.markSupported()", "public boolean markSupported()"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream, java.security.MessageDigest)", "public org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream, java.security.MessageDigest)"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream, java.lang.String) throws java.security.NoSuchAlgorithmException"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream) throws java.security.NoSuchAlgorithmException"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream.getMessageDigest()", "public java.security.MessageDigest getMessageDigest()"], ["org.sonar.api.internal.apachecommons.io.input.AutoCloseInputStream", "org.sonar.api.internal.apachecommons.io.input.AutoCloseInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.AutoCloseInputStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.AutoCloseInputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.ProxyInputStream", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.ProxyInputStream(java.io.InputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.available()", "public int available() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.markSupported()", "public boolean markSupported()"], ["org.sonar.api.internal.apachecommons.io.serialization.FullClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.FullClassNameMatcher(java.lang.String...)", "public org.sonar.api.internal.apachecommons.io.serialization.FullClassNameMatcher(java.lang.String...)"], ["boolean", "org.sonar.api.internal.apachecommons.io.serialization.FullClassNameMatcher.matches(java.lang.String)", "public boolean matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream", "org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream(java.io.OutputStream, int)", "public org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream(java.io.OutputStream, int)"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream", "org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String, boolean)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String, boolean, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String, boolean, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, boolean)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, boolean, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, boolean, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.nio.charset.Charset, boolean, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.nio.charset.Charset, boolean, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.lang.String, boolean, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.lang.String, boolean, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(char[])", "public void write(char[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.flush()", "public void flush() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.ProxyWriter", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter(java.io.Writer)", "public org.sonar.api.internal.apachecommons.io.output.ProxyWriter(java.io.Writer)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(char)", "public java.io.Writer append(char) throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(char[])", "public void write(char[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.close()", "public void close() throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream(java.io.IOException)", "public org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream(java.io.IOException)"], ["org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream()", "public org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream()"], ["void", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, java.io.File)", "public org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, int, java.io.File)", "public org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, int, java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, java.lang.String, java.lang.String, java.io.File)", "public org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, java.lang.String, java.lang.String, java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, int, java.lang.String, java.lang.String, java.io.File)", "public org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, int, java.lang.String, java.lang.String, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.isInMemory()", "public boolean isInMemory()"], ["byte[]", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.getData()", "public byte[] getData()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.getFile()", "public java.io.File getFile()"], ["void", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)", "public void writeTo(java.io.OutputStream) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.TaggedIOException.isTaggedWith(java.lang.Throwable, java.lang.Object)", "public static boolean isTaggedWith(java.lang.Throwable, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.TaggedIOException.throwCauseIfTaggedWith(java.lang.Throwable, java.lang.Object)", "public static void throwCauseIfTaggedWith(java.lang.Throwable, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.TaggedIOException", "org.sonar.api.internal.apachecommons.io.TaggedIOException(java.io.IOException, java.io.Serializable)", "public org.sonar.api.internal.apachecommons.io.TaggedIOException(java.io.IOException, java.io.Serializable)"], ["java.io.Serializable", "org.sonar.api.internal.apachecommons.io.TaggedIOException.getTag()", "public java.io.Serializable getTag()"], ["java.io.IOException", "org.sonar.api.internal.apachecommons.io.TaggedIOException.getCause()", "public java.io.IOException getCause()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.io.TaggedIOException.getCause()", "public java.lang.Throwable getCause()"], ["org.sonar.api.internal.apachecommons.io.IOExceptionWithCause", "org.sonar.api.internal.apachecommons.io.IOExceptionWithCause(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.io.IOExceptionWithCause(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.io.IOExceptionWithCause", "org.sonar.api.internal.apachecommons.io.IOExceptionWithCause(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.io.IOExceptionWithCause(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.io.FileSystemUtils", "org.sonar.api.internal.apachecommons.io.FileSystemUtils()", "public org.sonar.api.internal.apachecommons.io.FileSystemUtils()"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpace(java.lang.String)", "public static long freeSpace(java.lang.String) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb(java.lang.String)", "public static long freeSpaceKb(java.lang.String) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb(java.lang.String, long)", "public static long freeSpaceKb(java.lang.String, long) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb()", "public static long freeSpaceKb() throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb(long)", "public static long freeSpaceKb(long) throws java.io.IOException"], ["java.lang.Thread", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.start(long)", "public static java.lang.Thread start(long)"], ["java.lang.Thread", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.start(java.lang.Thread, long)", "public static java.lang.Thread start(java.lang.Thread, long)"], ["void", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.stop(java.lang.Thread)", "public static void stop(java.lang.Thread)"], ["void", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.run()", "public void run()"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.LineIterator(java.io.Reader)", "public org.sonar.api.internal.apachecommons.io.LineIterator(java.io.Reader) throws java.lang.IllegalArgumentException"], ["boolean", "org.sonar.api.internal.apachecommons.io.LineIterator.hasNext()", "public boolean hasNext()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.LineIterator.next()", "public java.lang.String next()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.LineIterator.nextLine()", "public java.lang.String nextLine()"], ["void", "org.sonar.api.internal.apachecommons.io.LineIterator.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.LineIterator.remove()", "public void remove()"], ["void", "org.sonar.api.internal.apachecommons.io.LineIterator.closeQuietly(org.sonar.api.internal.apachecommons.io.LineIterator)", "public static void closeQuietly(org.sonar.api.internal.apachecommons.io.LineIterator)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.io.LineIterator.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator(java.util.Comparator<java.io.File>)", "public org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator(java.util.Comparator<java.io.File>)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator()", "public org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator(boolean)", "public org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator(boolean)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator(java.util.Comparator<java.io.File>...)", "public org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator(java.util.Comparator<java.io.File>...)"], ["org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator(java.lang.Iterable<java.util.Comparator<java.io.File>>)", "public org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator(java.lang.Iterable<java.util.Comparator<java.io.File>>)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String, java.io.FileFilter)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String, java.io.FileFilter)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String, java.io.FileFilter, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String, java.io.FileFilter, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File, java.io.FileFilter)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File, java.io.FileFilter)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File, java.io.FileFilter, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File, java.io.FileFilter, org.sonar.api.internal.apachecommons.io.IOCase)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.getDirectory()", "public java.io.File getDirectory()"], ["java.io.FileFilter", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.getFileFilter()", "public java.io.FileFilter getFileFilter()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.addListener(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener)", "public void addListener(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.removeListener(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener)", "public void removeListener(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener)"], ["java.lang.Iterable<org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener>", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.getListeners()", "public java.lang.Iterable<org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener> getListeners()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.initialize()", "public void initialize() throws java.lang.Exception"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.destroy()", "public void destroy() throws java.lang.Exception"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.checkAndNotify()", "public void checkAndNotify()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.lang.String[])", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.util.List<java.lang.String>)", "public org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.util.List<java.lang.String>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String[])", "public org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.util.List<java.lang.String>)", "public org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String[])", "public org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.util.List<java.lang.String>)", "public org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream$1.compare(org.sonar.api.internal.apachecommons.io.ByteOrderMark, org.sonar.api.internal.apachecommons.io.ByteOrderMark)", "public int compare(org.sonar.api.internal.apachecommons.io.ByteOrderMark, org.sonar.api.internal.apachecommons.io.ByteOrderMark)"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream(java.io.InputStream, boolean)", "public org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream(java.io.InputStream, boolean)"], ["int", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream.read()", "public int read() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream.void mark(int)", "public synchronized void mark(int)"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File)", "public org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, int, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, int, java.nio.charset.Charset) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, int, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, int, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter()", "public org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter()"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.init(org.sonar.api.internal.apachecommons.io.input.Tailer)", "public void init(org.sonar.api.internal.apachecommons.io.input.Tailer)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.fileNotFound()", "public void fileNotFound()"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.fileRotated()", "public void fileRotated()"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.handle(java.lang.String)", "public void handle(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.handle(java.lang.Exception)", "public void handle(java.lang.Exception)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.endOfFileReached()", "public void endOfFileReached()"], ["org.sonar.api.internal.apachecommons.io.input.ClosedInputStream", "org.sonar.api.internal.apachecommons.io.input.ClosedInputStream()", "public org.sonar.api.internal.apachecommons.io.input.ClosedInputStream()"], ["int", "org.sonar.api.internal.apachecommons.io.input.ClosedInputStream.read()", "public int read()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.getDefaultEncoding()", "public java.lang.String getDefaultEncoding()"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.File)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.File) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, boolean)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, boolean) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, boolean, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, boolean, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.net.URL)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.net.URL) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.net.URLConnection, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.net.URLConnection, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String, boolean, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String, boolean, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String, boolean)", "public org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String, boolean) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.getEncoding()", "public java.lang.String getEncoding()"], ["int", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.NullInputStream", "org.sonar.api.internal.apachecommons.io.input.NullInputStream(long)", "public org.sonar.api.internal.apachecommons.io.input.NullInputStream(long)"], ["org.sonar.api.internal.apachecommons.io.input.NullInputStream", "org.sonar.api.internal.apachecommons.io.input.NullInputStream(long, boolean, boolean)", "public org.sonar.api.internal.apachecommons.io.input.NullInputStream(long, boolean, boolean)"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.getPosition()", "public long getPosition()"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.getSize()", "public long getSize()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.available()", "public int available()"], ["void", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.void mark(int)", "public synchronized void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.markSupported()", "public boolean markSupported()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.NullReader", "org.sonar.api.internal.apachecommons.io.input.NullReader(long)", "public org.sonar.api.internal.apachecommons.io.input.NullReader(long)"], ["org.sonar.api.internal.apachecommons.io.input.NullReader", "org.sonar.api.internal.apachecommons.io.input.NullReader(long, boolean, boolean)", "public org.sonar.api.internal.apachecommons.io.input.NullReader(long, boolean, boolean)"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullReader.getPosition()", "public long getPosition()"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullReader.getSize()", "public long getSize()"], ["void", "org.sonar.api.internal.apachecommons.io.input.NullReader.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullReader.void mark(int)", "public synchronized void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.NullReader.markSupported()", "public boolean markSupported()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullReader.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullReader.read(char[])", "public int read(char[]) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullReader.void reset()", "public synchronized void reset() throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullReader.skip(long)", "public long skip(long) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.TaggedInputStream", "org.sonar.api.internal.apachecommons.io.input.TaggedInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.TaggedInputStream(java.io.InputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.TaggedInputStream.isCauseOf(java.lang.Throwable)", "public boolean isCauseOf(java.lang.Throwable)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TaggedInputStream.throwIfCauseOf(java.lang.Throwable)", "public void throwIfCauseOf(java.lang.Throwable) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.HexDump", "org.sonar.api.internal.apachecommons.io.HexDump()", "public org.sonar.api.internal.apachecommons.io.HexDump()"], ["void", "org.sonar.api.internal.apachecommons.io.HexDump.dump(byte[], long, java.io.OutputStream, int)", "public static void dump(byte[], long, java.io.OutputStream, int) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException"], ["org.sonar.api.internal.apachecommons.io.output.TeeOutputStream", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream(java.io.OutputStream, java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.output.TeeOutputStream(java.io.OutputStream, java.io.OutputStream)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.void write(byte[])", "public synchronized void write(byte[]) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.void write(byte[], int, int)", "public synchronized void write(byte[], int, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.void write(int)", "public synchronized void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedWriter", "org.sonar.api.internal.apachecommons.io.output.ChunkedWriter(java.io.Writer, int)", "public org.sonar.api.internal.apachecommons.io.output.ChunkedWriter(java.io.Writer, int)"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedWriter", "org.sonar.api.internal.apachecommons.io.output.ChunkedWriter(java.io.Writer)", "public org.sonar.api.internal.apachecommons.io.output.ChunkedWriter(java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ChunkedWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.NullWriter", "org.sonar.api.internal.apachecommons.io.output.NullWriter()", "public org.sonar.api.internal.apachecommons.io.output.NullWriter()"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(char)", "public java.io.Writer append(char)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(int)", "public void write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(char[])", "public void write(char[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.flush()", "public void flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.close()", "public void close()"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.OutputStream, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.OutputStream, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.File)", "public org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.File) throws java.io.FileNotFoundException"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.File, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.File, java.lang.String) throws java.io.FileNotFoundException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.getEncoding()", "public java.lang.String getEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.getDefaultEncoding()", "public java.lang.String getDefaultEncoding()"], ["void", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream", "org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream()", "public org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream()"], ["void", "org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream.flush()", "public void flush() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.CountingOutputStream", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.output.CountingOutputStream(java.io.OutputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.getCount()", "public int getCount()"], ["int", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.resetCount()", "public int resetCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.long getByteCount()", "public synchronized long getByteCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.long resetByteCount()", "public synchronized long resetByteCount()"], ["java.nio.ByteOrder", "org.sonar.api.internal.apachecommons.io.ByteOrderParser.parseByteOrder(java.lang.String)", "public static java.nio.ByteOrder parseByteOrder(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.FileExistsException", "org.sonar.api.internal.apachecommons.io.FileExistsException()", "public org.sonar.api.internal.apachecommons.io.FileExistsException()"], ["org.sonar.api.internal.apachecommons.io.FileExistsException", "org.sonar.api.internal.apachecommons.io.FileExistsException(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.FileExistsException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.FileExistsException", "org.sonar.api.internal.apachecommons.io.FileExistsException(java.io.File)", "public org.sonar.api.internal.apachecommons.io.FileExistsException(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker$Tracker.getPath()", "public java.lang.String getPath()"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker$Tracker.delete()", "public boolean delete()"], ["org.sonar.api.internal.apachecommons.io.IOCase[]", "org.sonar.api.internal.apachecommons.io.IOCase.values()", "public static org.sonar.api.internal.apachecommons.io.IOCase[] values()"], ["org.sonar.api.internal.apachecommons.io.IOCase", "org.sonar.api.internal.apachecommons.io.IOCase.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.IOCase valueOf(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.IOCase", "org.sonar.api.internal.apachecommons.io.IOCase.forName(java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.IOCase forName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOCase.getName()", "public java.lang.String getName()"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.isCaseSensitive()", "public boolean isCaseSensitive()"], ["int", "org.sonar.api.internal.apachecommons.io.IOCase.checkCompareTo(java.lang.String, java.lang.String)", "public int checkCompareTo(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkEquals(java.lang.String, java.lang.String)", "public boolean checkEquals(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkStartsWith(java.lang.String, java.lang.String)", "public boolean checkStartsWith(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkEndsWith(java.lang.String, java.lang.String)", "public boolean checkEndsWith(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.IOCase.checkIndexOf(java.lang.String, int, java.lang.String)", "public int checkIndexOf(java.lang.String, int, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkRegionMatches(java.lang.String, int, java.lang.String)", "public boolean checkRegionMatches(java.lang.String, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOCase.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator()", "public org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.compare(java.io.File, java.io.File)", "public int compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.toString()", "public java.lang.String toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.sort(java.util.List)", "public java.util.List sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.sort(java.io.File[])", "public java.io.File[] sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.ByteOrderMark", "org.sonar.api.internal.apachecommons.io.ByteOrderMark(java.lang.String, int...)", "public org.sonar.api.internal.apachecommons.io.ByteOrderMark(java.lang.String, int...)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.getCharsetName()", "public java.lang.String getCharsetName()"], ["int", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.length()", "public int length()"], ["int", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.get(int)", "public int get(int)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.getBytes()", "public byte[] getBytes()"], ["boolean", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor()", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor(long)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor(long)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor(long, org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver...)", "public org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor(long, org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver...)"], ["long", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.getInterval()", "public long getInterval()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void setThreadFactory(java.util.concurrent.ThreadFactory)", "public synchronized void setThreadFactory(java.util.concurrent.ThreadFactory)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.addObserver(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)", "public void addObserver(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.removeObserver(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)", "public void removeObserver(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["java.lang.Iterable<org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver>", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.getObservers()", "public java.lang.Iterable<org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver> getObservers()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void start()", "public synchronized void start() throws java.lang.Exception"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void stop()", "public synchronized void stop() throws java.lang.Exception"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void stop(long)", "public synchronized void stop(long) throws java.lang.Exception"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.run()", "public void run()"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String[])", "public org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.util.List<java.lang.String>)", "public org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)", "public org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.DirectoryFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.FileFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.CanReadFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)", "public org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter(java.io.FileFilter)", "public org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter(java.io.FileFilter)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter()", "public org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)", "public org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.addFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public void addFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.getFileFilters()", "public java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter> getFileFilters()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.removeFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public boolean removeFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.setFileFilters(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)", "public void setFileFilters(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter()", "public org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter.accept(java.io.File)", "public boolean accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.input.InfiniteCircularInputStream", "org.sonar.api.internal.apachecommons.io.input.InfiniteCircularInputStream(byte[])", "public org.sonar.api.internal.apachecommons.io.input.InfiniteCircularInputStream(byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.InfiniteCircularInputStream.read()", "public int read()"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceReader", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader(java.lang.CharSequence)", "public org.sonar.api.internal.apachecommons.io.input.CharSequenceReader(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.close()", "public void close()"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.mark(int)", "public void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.markSupported()", "public boolean markSupported()"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.read()", "public int read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.read(char[], int, int)", "public int read(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.reset()", "public void reset()"], ["long", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.skip(long)", "public long skip(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.input.CountingInputStream", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.CountingInputStream(java.io.InputStream)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.long skip(long)", "public synchronized long skip(long) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.getCount()", "public int getCount()"], ["int", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.resetCount()", "public int resetCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.long getByteCount()", "public synchronized long getByteCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.long resetByteCount()", "public synchronized long resetByteCount()"], ["org.sonar.api.internal.apachecommons.io.input.BrokenInputStream", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream(java.io.IOException)", "public org.sonar.api.internal.apachecommons.io.input.BrokenInputStream(java.io.IOException)"], ["org.sonar.api.internal.apachecommons.io.input.BrokenInputStream", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream()", "public org.sonar.api.internal.apachecommons.io.input.BrokenInputStream()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.available()", "public int available() throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.BoundedReader", "org.sonar.api.internal.apachecommons.io.input.BoundedReader(java.io.Reader, int)", "public org.sonar.api.internal.apachecommons.io.input.BoundedReader(java.io.Reader, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.reset()", "public void reset() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.mark(int)", "public void mark(int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.DemuxInputStream", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream()", "public org.sonar.api.internal.apachecommons.io.input.DemuxInputStream()"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream.bindStream(java.io.InputStream)", "public java.io.InputStream bindStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream.close()", "public void close() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream.read()", "public int read() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream)", "public org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, boolean)", "public org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, org.sonar.api.internal.apachecommons.io.ByteOrderMark...)", "public org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, org.sonar.api.internal.apachecommons.io.ByteOrderMark...)"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, boolean, org.sonar.api.internal.apachecommons.io.ByteOrderMark...)", "public org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, boolean, org.sonar.api.internal.apachecommons.io.ByteOrderMark...)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.hasBOM()", "public boolean hasBOM() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.hasBOM(org.sonar.api.internal.apachecommons.io.ByteOrderMark)", "public boolean hasBOM(org.sonar.api.internal.apachecommons.io.ByteOrderMark) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.ByteOrderMark", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.getBOM()", "public org.sonar.api.internal.apachecommons.io.ByteOrderMark getBOM() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.getBOMCharsetName()", "public java.lang.String getBOMCharsetName() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.read(byte[])", "public int read(byte[]) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher(java.util.regex.Pattern)", "public org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher(java.util.regex.Pattern)"], ["boolean", "org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher.matches(java.lang.String)", "public boolean matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.serialization.WildcardClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.WildcardClassNameMatcher(java.lang.String)", "public org.sonar.api.internal.apachecommons.io.serialization.WildcardClassNameMatcher(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.serialization.WildcardClassNameMatcher.matches(java.lang.String)", "public boolean matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream", "org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream(java.io.OutputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream.isCauseOf(java.lang.Exception)", "public boolean isCauseOf(java.lang.Exception)"], ["void", "org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)", "public void throwIfCauseOf(java.lang.Exception) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.CloseShieldOutputStream", "org.sonar.api.internal.apachecommons.io.output.CloseShieldOutputStream(java.io.OutputStream)", "public org.sonar.api.internal.apachecommons.io.output.CloseShieldOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.CloseShieldOutputStream.close()", "public void close()"], ["org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream(int)", "public org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.close()", "public void close() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.getThreshold()", "public int getThreshold()"], ["long", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.getByteCount()", "public long getByteCount()"], ["boolean", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.isThresholdExceeded()", "public boolean isThresholdExceeded()"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.CharsetDecoder)", "public org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.CharsetDecoder)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.CharsetDecoder, int, boolean)", "public org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.CharsetDecoder, int, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.Charset, int, boolean)", "public org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.Charset, int, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.Charset)", "public org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.lang.String, int, boolean)", "public org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.lang.String, int, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.lang.String)", "public org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer)", "public org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter()", "public org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter()"], ["org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter(int)", "public org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter(int)"], ["org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter(java.lang.StringBuilder)", "public org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter(java.lang.StringBuilder)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(char)", "public java.io.Writer append(char)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.close()", "public void close()"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.flush()", "public void flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["java.lang.StringBuilder", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.getBuilder()", "public java.lang.StringBuilder getBuilder()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.toString()", "public java.lang.String toString()"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileDeleteStrategy.deleteQuietly(java.io.File)", "public boolean deleteQuietly(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileDeleteStrategy.delete(java.io.File)", "public void delete(java.io.File) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileDeleteStrategy.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.io.EndianUtils", "org.sonar.api.internal.apachecommons.io.EndianUtils()", "public org.sonar.api.internal.apachecommons.io.EndianUtils()"], ["short", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapShort(short)", "public static short swapShort(short)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapInteger(int)", "public static int swapInteger(int)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapLong(long)", "public static long swapLong(long)"], ["float", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapFloat(float)", "public static float swapFloat(float)"], ["double", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapDouble(double)", "public static double swapDouble(double)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedShort(byte[], int, short)", "public static void writeSwappedShort(byte[], int, short)"], ["short", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedShort(byte[], int)", "public static short readSwappedShort(byte[], int)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedShort(byte[], int)", "public static int readSwappedUnsignedShort(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedInteger(byte[], int, int)", "public static void writeSwappedInteger(byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedInteger(byte[], int)", "public static int readSwappedInteger(byte[], int)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedInteger(byte[], int)", "public static long readSwappedUnsignedInteger(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedLong(byte[], int, long)", "public static void writeSwappedLong(byte[], int, long)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedLong(byte[], int)", "public static long readSwappedLong(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedFloat(byte[], int, float)", "public static void writeSwappedFloat(byte[], int, float)"], ["float", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedFloat(byte[], int)", "public static float readSwappedFloat(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedDouble(byte[], int, double)", "public static void writeSwappedDouble(byte[], int, double)"], ["double", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedDouble(byte[], int)", "public static double readSwappedDouble(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedShort(java.io.OutputStream, short)", "public static void writeSwappedShort(java.io.OutputStream, short) throws java.io.IOException"], ["short", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedShort(java.io.InputStream)", "public static short readSwappedShort(java.io.InputStream) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)", "public static int readSwappedUnsignedShort(java.io.InputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream, int)", "public static void writeSwappedInteger(java.io.OutputStream, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedInteger(java.io.InputStream)", "public static int readSwappedInteger(java.io.InputStream) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)", "public static long readSwappedUnsignedInteger(java.io.InputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedLong(java.io.OutputStream, long)", "public static void writeSwappedLong(java.io.OutputStream, long) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedLong(java.io.InputStream)", "public static long readSwappedLong(java.io.InputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream, float)", "public static void writeSwappedFloat(java.io.OutputStream, float) throws java.io.IOException"], ["float", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedFloat(java.io.InputStream)", "public static float readSwappedFloat(java.io.InputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream, double)", "public static void writeSwappedDouble(java.io.OutputStream, double) throws java.io.IOException"], ["double", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedDouble(java.io.InputStream)", "public static double readSwappedDouble(java.io.InputStream) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.FileUtils", "org.sonar.api.internal.apachecommons.io.FileUtils()", "public org.sonar.api.internal.apachecommons.io.FileUtils()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getFile(java.io.File, java.lang.String...)", "public static java.io.File getFile(java.io.File, java.lang.String...)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getFile(java.lang.String...)", "public static java.io.File getFile(java.lang.String...)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.getTempDirectoryPath()", "public static java.lang.String getTempDirectoryPath()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getTempDirectory()", "public static java.io.File getTempDirectory()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.getUserDirectoryPath()", "public static java.lang.String getUserDirectoryPath()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getUserDirectory()", "public static java.io.File getUserDirectory()"], ["java.io.FileInputStream", "org.sonar.api.internal.apachecommons.io.FileUtils.openInputStream(java.io.File)", "public static java.io.FileInputStream openInputStream(java.io.File) throws java.io.IOException"], ["java.io.FileOutputStream", "org.sonar.api.internal.apachecommons.io.FileUtils.openOutputStream(java.io.File)", "public static java.io.FileOutputStream openOutputStream(java.io.File) throws java.io.IOException"], ["java.io.FileOutputStream", "org.sonar.api.internal.apachecommons.io.FileUtils.openOutputStream(java.io.File, boolean)", "public static java.io.FileOutputStream openOutputStream(java.io.File, boolean) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)", "public static java.lang.String byteCountToDisplaySize(java.math.BigInteger)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.byteCountToDisplaySize(long)", "public static java.lang.String byteCountToDisplaySize(long)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.touch(java.io.File)", "public static void touch(java.io.File) throws java.io.IOException"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection<java.io.File>)", "public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection<java.io.File>)"], ["java.util.Collection<java.io.File>", "org.sonar.api.internal.apachecommons.io.FileUtils.listFiles(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static java.util.Collection<java.io.File> listFiles(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["java.util.Collection<java.io.File>", "org.sonar.api.internal.apachecommons.io.FileUtils.listFilesAndDirs(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static java.util.Collection<java.io.File> listFilesAndDirs(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["java.util.Iterator<java.io.File>", "org.sonar.api.internal.apachecommons.io.FileUtils.iterateFiles(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static java.util.Iterator<java.io.File> iterateFiles(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["java.util.Iterator<java.io.File>", "org.sonar.api.internal.apachecommons.io.FileUtils.iterateFilesAndDirs(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)", "public static java.util.Iterator<java.io.File> iterateFilesAndDirs(java.io.File, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["java.util.Collection<java.io.File>", "org.sonar.api.internal.apachecommons.io.FileUtils.listFiles(java.io.File, java.lang.String[], boolean)", "public static java.util.Collection<java.io.File> listFiles(java.io.File, java.lang.String[], boolean)"], ["java.util.Iterator<java.io.File>", "org.sonar.api.internal.apachecommons.io.FileUtils.iterateFiles(java.io.File, java.lang.String[], boolean)", "public static java.util.Iterator<java.io.File> iterateFiles(java.io.File, java.lang.String[], boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.contentEquals(java.io.File, java.io.File)", "public static boolean contentEquals(java.io.File, java.io.File) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File, java.io.File, java.lang.String)", "public static boolean contentEqualsIgnoreEOL(java.io.File, java.io.File, java.lang.String) throws java.io.IOException"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.toFile(java.net.URL)", "public static java.io.File toFile(java.net.URL)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.FileUtils.toFiles(java.net.URL[])", "public static java.io.File[] toFiles(java.net.URL[])"], ["java.net.URL[]", "org.sonar.api.internal.apachecommons.io.FileUtils.toURLs(java.io.File[])", "public static java.net.URL[] toURLs(java.io.File[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File)", "public static void copyFileToDirectory(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File, boolean)", "public static void copyFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFile(java.io.File, java.io.File)", "public static void copyFile(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFile(java.io.File, java.io.File, boolean)", "public static void copyFile(java.io.File, java.io.File, boolean) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFile(java.io.File, java.io.OutputStream)", "public static long copyFile(java.io.File, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectoryToDirectory(java.io.File, java.io.File)", "public static void copyDirectoryToDirectory(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File)", "public static void copyDirectory(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File, boolean)", "public static void copyDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter)", "public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean)", "public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File)", "public static void copyURLToFile(java.net.URL, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File, int, int)", "public static void copyURLToFile(java.net.URL, java.io.File, int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyInputStreamToFile(java.io.InputStream, java.io.File)", "public static void copyInputStreamToFile(java.io.InputStream, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyToFile(java.io.InputStream, java.io.File)", "public static void copyToFile(java.io.InputStream, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyToDirectory(java.io.File, java.io.File)", "public static void copyToDirectory(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyToDirectory(java.lang.Iterable<java.io.File>, java.io.File)", "public static void copyToDirectory(java.lang.Iterable<java.io.File>, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.deleteDirectory(java.io.File)", "public static void deleteDirectory(java.io.File) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.deleteQuietly(java.io.File)", "public static boolean deleteQuietly(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.directoryContains(java.io.File, java.io.File)", "public static boolean directoryContains(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.cleanDirectory(java.io.File)", "public static void cleanDirectory(java.io.File) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.waitFor(java.io.File, int)", "public static boolean waitFor(java.io.File, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToString(java.io.File, java.nio.charset.Charset)", "public static java.lang.String readFileToString(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToString(java.io.File, java.lang.String)", "public static java.lang.String readFileToString(java.io.File, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToString(java.io.File)", "public static java.lang.String readFileToString(java.io.File) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToByteArray(java.io.File)", "public static byte[] readFileToByteArray(java.io.File) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.FileUtils.readLines(java.io.File, java.nio.charset.Charset)", "public static java.util.List<java.lang.String> readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.FileUtils.readLines(java.io.File, java.lang.String)", "public static java.util.List<java.lang.String> readLines(java.io.File, java.lang.String) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.apachecommons.io.FileUtils.readLines(java.io.File)", "public static java.util.List<java.lang.String> readLines(java.io.File) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.FileUtils.lineIterator(java.io.File, java.lang.String)", "public static org.sonar.api.internal.apachecommons.io.LineIterator lineIterator(java.io.File, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.FileUtils.lineIterator(java.io.File)", "public static org.sonar.api.internal.apachecommons.io.LineIterator lineIterator(java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset)", "public static void writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.lang.String)", "public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset, boolean)", "public static void writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.lang.String, boolean)", "public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String)", "public static void writeStringToFile(java.io.File, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, boolean)", "public static void writeStringToFile(java.io.File, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence)", "public static void write(java.io.File, java.lang.CharSequence) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, boolean)", "public static void write(java.io.File, java.lang.CharSequence, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset)", "public static void write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String)", "public static void write(java.io.File, java.lang.CharSequence, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset, boolean)", "public static void write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String, boolean)", "public static void write(java.io.File, java.lang.CharSequence, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[])", "public static void writeByteArrayToFile(java.io.File, byte[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], boolean)", "public static void writeByteArrayToFile(java.io.File, byte[], boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int)", "public static void writeByteArrayToFile(java.io.File, byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int, boolean)", "public static void writeByteArrayToFile(java.io.File, byte[], int, int, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>)", "public static void writeLines(java.io.File, java.lang.String, java.util.Collection<?>) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, boolean)", "public static void writeLines(java.io.File, java.lang.String, java.util.Collection<?>, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>)", "public static void writeLines(java.io.File, java.util.Collection<?>) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, boolean)", "public static void writeLines(java.io.File, java.util.Collection<?>, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String)", "public static void writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String, boolean)", "public static void writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, java.lang.String)", "public static void writeLines(java.io.File, java.util.Collection<?>, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, java.lang.String, boolean)", "public static void writeLines(java.io.File, java.util.Collection<?>, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceDelete(java.io.File)", "public static void forceDelete(java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceDeleteOnExit(java.io.File)", "public static void forceDeleteOnExit(java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceMkdir(java.io.File)", "public static void forceMkdir(java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceMkdirParent(java.io.File)", "public static void forceMkdirParent(java.io.File) throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOf(java.io.File)", "public static long sizeOf(java.io.File)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOfAsBigInteger(java.io.File)", "public static java.math.BigInteger sizeOfAsBigInteger(java.io.File)"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOfDirectory(java.io.File)", "public static long sizeOfDirectory(java.io.File)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOfDirectoryAsBigInteger(java.io.File)", "public static java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileNewer(java.io.File, java.io.File)", "public static boolean isFileNewer(java.io.File, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileNewer(java.io.File, java.util.Date)", "public static boolean isFileNewer(java.io.File, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileNewer(java.io.File, long)", "public static boolean isFileNewer(java.io.File, long)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileOlder(java.io.File, java.io.File)", "public static boolean isFileOlder(java.io.File, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileOlder(java.io.File, java.util.Date)", "public static boolean isFileOlder(java.io.File, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileOlder(java.io.File, long)", "public static boolean isFileOlder(java.io.File, long)"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.checksumCRC32(java.io.File)", "public static long checksumCRC32(java.io.File) throws java.io.IOException"], ["java.util.zip.Checksum", "org.sonar.api.internal.apachecommons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)", "public static java.util.zip.Checksum checksum(java.io.File, java.util.zip.Checksum) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveDirectory(java.io.File, java.io.File)", "public static void moveDirectory(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveDirectoryToDirectory(java.io.File, java.io.File, boolean)", "public static void moveDirectoryToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveFile(java.io.File, java.io.File)", "public static void moveFile(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveFileToDirectory(java.io.File, java.io.File, boolean)", "public static void moveFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveToDirectory(java.io.File, java.io.File, boolean)", "public static void moveToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isSymlink(java.io.File)", "public static boolean isSymlink(java.io.File) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.lang.ArrayUtils", "org.sonar.api.internal.apachecommons.lang.ArrayUtils()", "public org.sonar.api.internal.apachecommons.lang.ArrayUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toString(java.lang.Object)", "public static java.lang.String toString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toString(java.lang.Object, java.lang.String)", "public static java.lang.String toString(java.lang.Object, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.hashCode(java.lang.Object)", "public static int hashCode(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)", "public static boolean isEquals(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toMap(java.lang.Object[])", "public static java.util.Map toMap(java.lang.Object[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(java.lang.Object[])", "public static java.lang.Object[] clone(java.lang.Object[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(long[])", "public static long[] clone(long[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(int[])", "public static int[] clone(int[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(short[])", "public static short[] clone(short[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(char[])", "public static char[] clone(char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(byte[])", "public static byte[] clone(byte[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(double[])", "public static double[] clone(double[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(float[])", "public static float[] clone(float[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(boolean[])", "public static boolean[] clone(boolean[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Object[])", "public static java.lang.Object[] nullToEmpty(java.lang.Object[])"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.String[])", "public static java.lang.String[] nullToEmpty(java.lang.String[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(long[])", "public static long[] nullToEmpty(long[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(int[])", "public static int[] nullToEmpty(int[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(short[])", "public static short[] nullToEmpty(short[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(char[])", "public static char[] nullToEmpty(char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(byte[])", "public static byte[] nullToEmpty(byte[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(double[])", "public static double[] nullToEmpty(double[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(float[])", "public static float[] nullToEmpty(float[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(boolean[])", "public static boolean[] nullToEmpty(boolean[])"], ["java.lang.Long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Long[])", "public static java.lang.Long[] nullToEmpty(java.lang.Long[])"], ["java.lang.Integer[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Integer[])", "public static java.lang.Integer[] nullToEmpty(java.lang.Integer[])"], ["java.lang.Short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Short[])", "public static java.lang.Short[] nullToEmpty(java.lang.Short[])"], ["java.lang.Character[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Character[])", "public static java.lang.Character[] nullToEmpty(java.lang.Character[])"], ["java.lang.Byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Byte[])", "public static java.lang.Byte[] nullToEmpty(java.lang.Byte[])"], ["java.lang.Double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Double[])", "public static java.lang.Double[] nullToEmpty(java.lang.Double[])"], ["java.lang.Float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Float[])", "public static java.lang.Float[] nullToEmpty(java.lang.Float[])"], ["java.lang.Boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Boolean[])", "public static java.lang.Boolean[] nullToEmpty(java.lang.Boolean[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(java.lang.Object[], int, int)", "public static java.lang.Object[] subarray(java.lang.Object[], int, int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(long[], int, int)", "public static long[] subarray(long[], int, int)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(int[], int, int)", "public static int[] subarray(int[], int, int)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(short[], int, int)", "public static short[] subarray(short[], int, int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(char[], int, int)", "public static char[] subarray(char[], int, int)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(byte[], int, int)", "public static byte[] subarray(byte[], int, int)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(double[], int, int)", "public static double[] subarray(double[], int, int)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(float[], int, int)", "public static float[] subarray(float[], int, int)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(boolean[], int, int)", "public static boolean[] subarray(boolean[], int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])", "public static boolean isSameLength(java.lang.Object[], java.lang.Object[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(long[], long[])", "public static boolean isSameLength(long[], long[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(int[], int[])", "public static boolean isSameLength(int[], int[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(short[], short[])", "public static boolean isSameLength(short[], short[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(char[], char[])", "public static boolean isSameLength(char[], char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(byte[], byte[])", "public static boolean isSameLength(byte[], byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(double[], double[])", "public static boolean isSameLength(double[], double[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(float[], float[])", "public static boolean isSameLength(float[], float[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(boolean[], boolean[])", "public static boolean isSameLength(boolean[], boolean[])"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.getLength(java.lang.Object)", "public static int getLength(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)", "public static boolean isSameType(java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(java.lang.Object[])", "public static void reverse(java.lang.Object[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(long[])", "public static void reverse(long[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(int[])", "public static void reverse(int[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(short[])", "public static void reverse(short[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(char[])", "public static void reverse(char[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(byte[])", "public static void reverse(byte[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(double[])", "public static void reverse(double[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(float[])", "public static void reverse(float[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(boolean[])", "public static void reverse(boolean[])"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)", "public static int indexOf(java.lang.Object[], java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)", "public static int indexOf(java.lang.Object[], java.lang.Object, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)", "public static int lastIndexOf(java.lang.Object[], java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)", "public static int lastIndexOf(java.lang.Object[], java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(java.lang.Object[], java.lang.Object)", "public static boolean contains(java.lang.Object[], java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(long[], long)", "public static int indexOf(long[], long)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(long[], long, int)", "public static int indexOf(long[], long, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(long[], long)", "public static int lastIndexOf(long[], long)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(long[], long, int)", "public static int lastIndexOf(long[], long, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(long[], long)", "public static boolean contains(long[], long)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(int[], int)", "public static int indexOf(int[], int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(int[], int, int)", "public static int indexOf(int[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(int[], int)", "public static int lastIndexOf(int[], int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(int[], int, int)", "public static int lastIndexOf(int[], int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(int[], int)", "public static boolean contains(int[], int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(short[], short)", "public static int indexOf(short[], short)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(short[], short, int)", "public static int indexOf(short[], short, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(short[], short)", "public static int lastIndexOf(short[], short)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(short[], short, int)", "public static int lastIndexOf(short[], short, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(short[], short)", "public static boolean contains(short[], short)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(char[], char)", "public static int indexOf(char[], char)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(char[], char, int)", "public static int indexOf(char[], char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(char[], char)", "public static int lastIndexOf(char[], char)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(char[], char, int)", "public static int lastIndexOf(char[], char, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(char[], char)", "public static boolean contains(char[], char)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(byte[], byte)", "public static int indexOf(byte[], byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(byte[], byte, int)", "public static int indexOf(byte[], byte, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(byte[], byte)", "public static int lastIndexOf(byte[], byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(byte[], byte, int)", "public static int lastIndexOf(byte[], byte, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(byte[], byte)", "public static boolean contains(byte[], byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double)", "public static int indexOf(double[], double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double, double)", "public static int indexOf(double[], double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double, int)", "public static int indexOf(double[], double, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double, int, double)", "public static int indexOf(double[], double, int, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double)", "public static int lastIndexOf(double[], double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double, double)", "public static int lastIndexOf(double[], double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double, int)", "public static int lastIndexOf(double[], double, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double, int, double)", "public static int lastIndexOf(double[], double, int, double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(double[], double)", "public static boolean contains(double[], double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(double[], double, double)", "public static boolean contains(double[], double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(float[], float)", "public static int indexOf(float[], float)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(float[], float, int)", "public static int indexOf(float[], float, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(float[], float)", "public static int lastIndexOf(float[], float)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(float[], float, int)", "public static int lastIndexOf(float[], float, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(float[], float)", "public static boolean contains(float[], float)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(boolean[], boolean)", "public static int indexOf(boolean[], boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(boolean[], boolean, int)", "public static int indexOf(boolean[], boolean, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(boolean[], boolean)", "public static int lastIndexOf(boolean[], boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(boolean[], boolean, int)", "public static int lastIndexOf(boolean[], boolean, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(boolean[], boolean)", "public static boolean contains(boolean[], boolean)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Character[])", "public static char[] toPrimitive(java.lang.Character[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Character[], char)", "public static char[] toPrimitive(java.lang.Character[], char)"], ["java.lang.Character[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(char[])", "public static java.lang.Character[] toObject(char[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Long[])", "public static long[] toPrimitive(java.lang.Long[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Long[], long)", "public static long[] toPrimitive(java.lang.Long[], long)"], ["java.lang.Long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(long[])", "public static java.lang.Long[] toObject(long[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Integer[])", "public static int[] toPrimitive(java.lang.Integer[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Integer[], int)", "public static int[] toPrimitive(java.lang.Integer[], int)"], ["java.lang.Integer[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(int[])", "public static java.lang.Integer[] toObject(int[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Short[])", "public static short[] toPrimitive(java.lang.Short[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Short[], short)", "public static short[] toPrimitive(java.lang.Short[], short)"], ["java.lang.Short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(short[])", "public static java.lang.Short[] toObject(short[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Byte[])", "public static byte[] toPrimitive(java.lang.Byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Byte[], byte)", "public static byte[] toPrimitive(java.lang.Byte[], byte)"], ["java.lang.Byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(byte[])", "public static java.lang.Byte[] toObject(byte[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Double[])", "public static double[] toPrimitive(java.lang.Double[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Double[], double)", "public static double[] toPrimitive(java.lang.Double[], double)"], ["java.lang.Double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(double[])", "public static java.lang.Double[] toObject(double[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Float[])", "public static float[] toPrimitive(java.lang.Float[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Float[], float)", "public static float[] toPrimitive(java.lang.Float[], float)"], ["java.lang.Float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(float[])", "public static java.lang.Float[] toObject(float[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Boolean[])", "public static boolean[] toPrimitive(java.lang.Boolean[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)", "public static boolean[] toPrimitive(java.lang.Boolean[], boolean)"], ["java.lang.Boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(boolean[])", "public static java.lang.Boolean[] toObject(boolean[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(java.lang.Object[])", "public static boolean isEmpty(java.lang.Object[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(long[])", "public static boolean isEmpty(long[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(int[])", "public static boolean isEmpty(int[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(short[])", "public static boolean isEmpty(short[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(char[])", "public static boolean isEmpty(char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(byte[])", "public static boolean isEmpty(byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(double[])", "public static boolean isEmpty(double[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(float[])", "public static boolean isEmpty(float[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(boolean[])", "public static boolean isEmpty(boolean[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(java.lang.Object[])", "public static boolean isNotEmpty(java.lang.Object[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(long[])", "public static boolean isNotEmpty(long[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(int[])", "public static boolean isNotEmpty(int[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(short[])", "public static boolean isNotEmpty(short[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(char[])", "public static boolean isNotEmpty(char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(byte[])", "public static boolean isNotEmpty(byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(double[])", "public static boolean isNotEmpty(double[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(float[])", "public static boolean isNotEmpty(float[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(boolean[])", "public static boolean isNotEmpty(boolean[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(java.lang.Object[], java.lang.Object[])", "public static java.lang.Object[] addAll(java.lang.Object[], java.lang.Object[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(boolean[], boolean[])", "public static boolean[] addAll(boolean[], boolean[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(char[], char[])", "public static char[] addAll(char[], char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(byte[], byte[])", "public static byte[] addAll(byte[], byte[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(short[], short[])", "public static short[] addAll(short[], short[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(int[], int[])", "public static int[] addAll(int[], int[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(long[], long[])", "public static long[] addAll(long[], long[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(float[], float[])", "public static float[] addAll(float[], float[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(double[], double[])", "public static double[] addAll(double[], double[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(java.lang.Object[], java.lang.Object)", "public static java.lang.Object[] add(java.lang.Object[], java.lang.Object)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(boolean[], boolean)", "public static boolean[] add(boolean[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(byte[], byte)", "public static byte[] add(byte[], byte)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(char[], char)", "public static char[] add(char[], char)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(double[], double)", "public static double[] add(double[], double)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(float[], float)", "public static float[] add(float[], float)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(int[], int)", "public static int[] add(int[], int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(long[], long)", "public static long[] add(long[], long)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(short[], short)", "public static short[] add(short[], short)"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(java.lang.Object[], int, java.lang.Object)", "public static java.lang.Object[] add(java.lang.Object[], int, java.lang.Object)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(boolean[], int, boolean)", "public static boolean[] add(boolean[], int, boolean)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(char[], int, char)", "public static char[] add(char[], int, char)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(byte[], int, byte)", "public static byte[] add(byte[], int, byte)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(short[], int, short)", "public static short[] add(short[], int, short)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(int[], int, int)", "public static int[] add(int[], int, int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(long[], int, long)", "public static long[] add(long[], int, long)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(float[], int, float)", "public static float[] add(float[], int, float)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(double[], int, double)", "public static double[] add(double[], int, double)"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(java.lang.Object[], int)", "public static java.lang.Object[] remove(java.lang.Object[], int)"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(java.lang.Object[], java.lang.Object)", "public static java.lang.Object[] removeElement(java.lang.Object[], java.lang.Object)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(boolean[], int)", "public static boolean[] remove(boolean[], int)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(boolean[], boolean)", "public static boolean[] removeElement(boolean[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(byte[], int)", "public static byte[] remove(byte[], int)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(byte[], byte)", "public static byte[] removeElement(byte[], byte)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(char[], int)", "public static char[] remove(char[], int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(char[], char)", "public static char[] removeElement(char[], char)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(double[], int)", "public static double[] remove(double[], int)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(double[], double)", "public static double[] removeElement(double[], double)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(float[], int)", "public static float[] remove(float[], int)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(float[], float)", "public static float[] removeElement(float[], float)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(int[], int)", "public static int[] remove(int[], int)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(int[], int)", "public static int[] removeElement(int[], int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(long[], int)", "public static long[] remove(long[], int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(long[], long)", "public static long[] removeElement(long[], long)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(short[], int)", "public static short[] remove(short[], int)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(short[], short)", "public static short[] removeElement(short[], short)"], ["org.sonar.api.internal.apachecommons.lang.BitField", "org.sonar.api.internal.apachecommons.lang.BitField(int)", "public org.sonar.api.internal.apachecommons.lang.BitField(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.getValue(int)", "public int getValue(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.getShortValue(short)", "public short getShortValue(short)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.getRawValue(int)", "public int getRawValue(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.getShortRawValue(short)", "public short getShortRawValue(short)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BitField.isSet(int)", "public boolean isSet(int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BitField.isAllSet(int)", "public boolean isAllSet(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.setValue(int, int)", "public int setValue(int, int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.setShortValue(short, short)", "public short setShortValue(short, short)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.clear(int)", "public int clear(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.clearShort(short)", "public short clearShort(short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.BitField.clearByte(byte)", "public byte clearByte(byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.set(int)", "public int set(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.setShort(short)", "public short setShort(short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.BitField.setByte(byte)", "public byte setByte(byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.setBoolean(int, boolean)", "public int setBoolean(int, boolean)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.setShortBoolean(short, boolean)", "public short setShortBoolean(short, boolean)"], ["byte", "org.sonar.api.internal.apachecommons.lang.BitField.setByteBoolean(byte, boolean)", "public byte setByteBoolean(byte, boolean)"], ["org.sonar.api.internal.apachecommons.lang.BooleanUtils", "org.sonar.api.internal.apachecommons.lang.BooleanUtils()", "public org.sonar.api.internal.apachecommons.lang.BooleanUtils()"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.negate(java.lang.Boolean)", "public static java.lang.Boolean negate(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isTrue(java.lang.Boolean)", "public static boolean isTrue(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isNotTrue(java.lang.Boolean)", "public static boolean isNotTrue(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isFalse(java.lang.Boolean)", "public static boolean isFalse(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isNotFalse(java.lang.Boolean)", "public static boolean isNotFalse(java.lang.Boolean)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(boolean)", "public static java.lang.Boolean toBooleanObject(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.Boolean)", "public static boolean toBoolean(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean)", "public static boolean toBooleanDefaultIfNull(java.lang.Boolean, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(int)", "public static boolean toBoolean(int)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(int)", "public static java.lang.Boolean toBooleanObject(int)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.Integer)", "public static java.lang.Boolean toBooleanObject(java.lang.Integer)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(int, int, int)", "public static boolean toBoolean(int, int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer)", "public static boolean toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(int, int, int, int)", "public static java.lang.Boolean toBooleanObject(int, int, int, int)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)", "public static java.lang.Boolean toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["int", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toInteger(boolean)", "public static int toInteger(boolean)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(boolean)", "public static java.lang.Integer toIntegerObject(boolean)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(java.lang.Boolean)", "public static java.lang.Integer toIntegerObject(java.lang.Boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toInteger(boolean, int, int)", "public static int toInteger(boolean, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toInteger(java.lang.Boolean, int, int, int)", "public static int toInteger(java.lang.Boolean, int, int, int)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(boolean, java.lang.Integer, java.lang.Integer)", "public static java.lang.Integer toIntegerObject(boolean, java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer)", "public static java.lang.Integer toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.String)", "public static java.lang.Boolean toBooleanObject(java.lang.String)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.Boolean toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.String)", "public static boolean toBoolean(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String)", "public static boolean toBoolean(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringTrueFalse(java.lang.Boolean)", "public static java.lang.String toStringTrueFalse(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringOnOff(java.lang.Boolean)", "public static java.lang.String toStringOnOff(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringYesNo(java.lang.Boolean)", "public static java.lang.String toStringYesNo(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringTrueFalse(boolean)", "public static java.lang.String toStringTrueFalse(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringOnOff(boolean)", "public static java.lang.String toStringOnOff(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringYesNo(boolean)", "public static java.lang.String toStringYesNo(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toString(boolean, java.lang.String, java.lang.String)", "public static java.lang.String toString(boolean, java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.xor(boolean[])", "public static boolean xor(boolean[])"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.xor(java.lang.Boolean[])", "public static java.lang.Boolean xor(java.lang.Boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder()", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder()"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object)", "public static int reflectionCompare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean)", "public static int reflectionCompare(java.lang.Object, java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, java.util.Collection)", "public static int reflectionCompare(java.lang.Object, java.lang.Object, java.util.Collection)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, java.lang.String[])", "public static int reflectionCompare(java.lang.Object, java.lang.Object, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class)", "public static int reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])", "public static int reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.appendSuper(int)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder appendSuper(int)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object, java.lang.Object, java.util.Comparator)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(long, long)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(long, long)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(int, int)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(int, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(short, short)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(short, short)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(char, char)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(char, char)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(byte, byte)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(byte, byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(double, double)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(double, double)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(float, float)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(float, float)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(boolean, boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(boolean, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object[], java.lang.Object[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(java.lang.Object[], java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object[], java.lang.Object[], java.util.Comparator)", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(java.lang.Object[], java.lang.Object[], java.util.Comparator)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(long[], long[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(long[], long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(int[], int[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(int[], int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(short[], short[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(short[], short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(char[], char[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(char[], char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(byte[], byte[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(byte[], byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(double[], double[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(double[], double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(float[], float[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(float[], float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(boolean[], boolean[])", "public org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder append(boolean[], boolean[])"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.toComparison()", "public int toComparison()"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder()", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object)", "public static boolean reflectionEquals(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.util.Collection)", "public static boolean reflectionEquals(java.lang.Object, java.lang.Object, java.util.Collection)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[])", "public static boolean reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean)", "public static boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class)", "public static boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])", "public static boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.appendSuper(boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder appendSuper(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(long, long)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(long, long)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(int, int)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(int, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(short, short)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(short, short)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(char, char)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(char, char)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(byte, byte)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(byte, byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(double, double)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(double, double)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(float, float)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(float, float)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(boolean, boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(boolean, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(java.lang.Object[], java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(long[], long[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(long[], long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(int[], int[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(int[], int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(short[], short[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(short[], short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(char[], char[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(char[], char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(byte[], byte[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(byte[], byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(double[], double[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(double[], double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(float[], float[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(float[], float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(boolean[], boolean[])", "public org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder append(boolean[], boolean[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.isEquals()", "public boolean isEquals()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reset()", "public void reset()"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object)", "public static int reflectionHashCode(int, int, java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean)", "public static int reflectionHashCode(int, int, java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class)", "public static int reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class, java.lang.String[])", "public static int reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object)", "public static int reflectionHashCode(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, boolean)", "public static int reflectionHashCode(java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, java.util.Collection)", "public static int reflectionHashCode(java.lang.Object, java.util.Collection)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, java.lang.String[])", "public static int reflectionHashCode(java.lang.Object, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder()", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder()"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder(int, int)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder(int, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(boolean[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(byte)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(byte[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(char)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(char)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(char[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(double)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(double)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(double[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(float)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(float)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(float[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(int)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(int)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(int[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(long)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(long)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(long[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(java.lang.Object[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(short)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(short)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(short[])", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder append(short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.appendSuper(int)", "public org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder appendSuper(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.toHashCode()", "public int toHashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.apachecommons.lang.builder.IDKey", "org.sonar.api.internal.apachecommons.lang.builder.IDKey(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.IDKey(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.IDKey.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.IDKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object)", "public static java.lang.String toString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)", "public static java.lang.String toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean)", "public static java.lang.String toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, boolean)", "public static java.lang.String toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, boolean, java.lang.Class)", "public static java.lang.String toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, boolean, java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, java.lang.Class)", "public static java.lang.String toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.lang.String)", "public static java.lang.String toStringExclude(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.util.Collection)", "public static java.lang.String toStringExclude(java.lang.Object, java.util.Collection)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.lang.String[])", "public static java.lang.String toStringExclude(java.lang.Object, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)", "public org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer)", "public org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean, boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean, boolean)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.getExcludeFieldNames()", "public java.lang.String[] getExcludeFieldNames()"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.getUpToClass()", "public java.lang.Class getUpToClass()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.isAppendStatics()", "public boolean isAppendStatics()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.isAppendTransients()", "public boolean isAppendTransients()"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.reflectionAppendArray(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder reflectionAppendArray(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setAppendStatics(boolean)", "public void setAppendStatics(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setAppendTransients(boolean)", "public void setAppendTransients(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setExcludeFieldNames(java.lang.String[])", "public org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder setExcludeFieldNames(java.lang.String[])"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setUpToClass(java.lang.Class)", "public void setUpToClass(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle()", "public org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseClassName()", "public boolean isUseClassName()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseClassName(boolean)", "public void setUseClassName(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseShortClassName()", "public boolean isUseShortClassName()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isShortClassName()", "public boolean isShortClassName()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseShortClassName(boolean)", "public void setUseShortClassName(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setShortClassName(boolean)", "public void setShortClassName(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseIdentityHashCode()", "public boolean isUseIdentityHashCode()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseIdentityHashCode(boolean)", "public void setUseIdentityHashCode(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseFieldNames()", "public boolean isUseFieldNames()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseFieldNames(boolean)", "public void setUseFieldNames(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isDefaultFullDetail()", "public boolean isDefaultFullDetail()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setDefaultFullDetail(boolean)", "public void setDefaultFullDetail(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isArrayContentDetail()", "public boolean isArrayContentDetail()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArrayContentDetail(boolean)", "public void setArrayContentDetail(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getArrayStart()", "public java.lang.String getArrayStart()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArrayStart(java.lang.String)", "public void setArrayStart(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getArrayEnd()", "public java.lang.String getArrayEnd()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArrayEnd(java.lang.String)", "public void setArrayEnd(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getArraySeparator()", "public java.lang.String getArraySeparator()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArraySeparator(java.lang.String)", "public void setArraySeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getContentStart()", "public java.lang.String getContentStart()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setContentStart(java.lang.String)", "public void setContentStart(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getContentEnd()", "public java.lang.String getContentEnd()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setContentEnd(java.lang.String)", "public void setContentEnd(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getFieldNameValueSeparator()", "public java.lang.String getFieldNameValueSeparator()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldNameValueSeparator(java.lang.String)", "public void setFieldNameValueSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getFieldSeparator()", "public java.lang.String getFieldSeparator()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldSeparator(java.lang.String)", "public void setFieldSeparator(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isFieldSeparatorAtStart()", "public boolean isFieldSeparatorAtStart()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldSeparatorAtStart(boolean)", "public void setFieldSeparatorAtStart(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isFieldSeparatorAtEnd()", "public boolean isFieldSeparatorAtEnd()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldSeparatorAtEnd(boolean)", "public void setFieldSeparatorAtEnd(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getNullText()", "public java.lang.String getNullText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setNullText(java.lang.String)", "public void setNullText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSizeStartText()", "public java.lang.String getSizeStartText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSizeStartText(java.lang.String)", "public void setSizeStartText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSizeEndText()", "public java.lang.String getSizeEndText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSizeEndText(java.lang.String)", "public void setSizeEndText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSummaryObjectStartText()", "public java.lang.String getSummaryObjectStartText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSummaryObjectStartText(java.lang.String)", "public void setSummaryObjectStartText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSummaryObjectEndText()", "public java.lang.String getSummaryObjectEndText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSummaryObjectEndText(java.lang.String)", "public void setSummaryObjectEndText(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getDefaultStyle()", "public static org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle getDefaultStyle()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.setDefaultStyle(org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)", "public static void setDefaultStyle(org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object)", "public static java.lang.String reflectionToString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)", "public static java.lang.String reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean)", "public static java.lang.String reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, java.lang.Class)", "public static java.lang.String reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, java.lang.Class)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(boolean[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(byte)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(byte[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(char)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(char)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(char[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(double)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(double)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(double[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(float)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(float)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(float[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(int)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(int)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(int[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(long)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(long)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(long[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.Object[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(short)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(short)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(short[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, boolean[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, boolean[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, boolean[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, byte)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, byte[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, byte[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, byte[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, char)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, char[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, char[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, char[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, double)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, double)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, double[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, double[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, double[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, float)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, float)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, float[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, float[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, float[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, int)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, int[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, int[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, int[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, long)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, long)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, long[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, long[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, long[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object, boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, java.lang.Object, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, java.lang.Object[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, short)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, short)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, short[])", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, short[], boolean)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder append(java.lang.String, short[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.appendAsObjectToString(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder appendAsObjectToString(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.appendSuper(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder appendSuper(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.appendToString(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder appendToString(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getObject()", "public java.lang.Object getObject()"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getStringBuffer()", "public java.lang.StringBuffer getStringBuffer()"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getStyle()", "public org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle getStyle()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendSuper(java.lang.StringBuffer, java.lang.String)", "public void appendSuper(java.lang.StringBuffer, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendToString(java.lang.StringBuffer, java.lang.String)", "public void appendToString(java.lang.StringBuffer, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendStart(java.lang.StringBuffer, java.lang.Object)", "public void appendStart(java.lang.StringBuffer, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendEnd(java.lang.StringBuffer, java.lang.Object)", "public void appendEnd(java.lang.StringBuffer, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object, java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, java.lang.Object, java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long)", "public void append(java.lang.StringBuffer, java.lang.String, long)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int)", "public void append(java.lang.StringBuffer, java.lang.String, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short)", "public void append(java.lang.StringBuffer, java.lang.String, short)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte)", "public void append(java.lang.StringBuffer, java.lang.String, byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char)", "public void append(java.lang.StringBuffer, java.lang.String, char)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double)", "public void append(java.lang.StringBuffer, java.lang.String, double)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float)", "public void append(java.lang.StringBuffer, java.lang.String, float)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean)", "public void append(java.lang.StringBuffer, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, java.lang.Object[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, long[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, int[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, short[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, byte[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, char[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, double[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, float[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean[], java.lang.Boolean)", "public void append(java.lang.StringBuffer, java.lang.String, boolean[], java.lang.Boolean)"], ["org.sonar.api.internal.apachecommons.lang.CharEncoding", "org.sonar.api.internal.apachecommons.lang.CharEncoding()", "public org.sonar.api.internal.apachecommons.lang.CharEncoding()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharEncoding.isSupported(java.lang.String)", "public static boolean isSupported(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange$CharacterIterator.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.CharRange$CharacterIterator.next()", "public java.lang.Object next()"], ["void", "org.sonar.api.internal.apachecommons.lang.CharRange$CharacterIterator.remove()", "public void remove()"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.is(char)", "public static org.sonar.api.internal.apachecommons.lang.CharRange is(char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.isNot(char)", "public static org.sonar.api.internal.apachecommons.lang.CharRange isNot(char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.isIn(char, char)", "public static org.sonar.api.internal.apachecommons.lang.CharRange isIn(char, char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.isNotIn(char, char)", "public static org.sonar.api.internal.apachecommons.lang.CharRange isNotIn(char, char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char)", "public org.sonar.api.internal.apachecommons.lang.CharRange(char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char, boolean)", "public org.sonar.api.internal.apachecommons.lang.CharRange(char, boolean)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char, char)", "public org.sonar.api.internal.apachecommons.lang.CharRange(char, char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char, char, boolean)", "public org.sonar.api.internal.apachecommons.lang.CharRange(char, char, boolean)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharRange.getStart()", "public char getStart()"], ["char", "org.sonar.api.internal.apachecommons.lang.CharRange.getEnd()", "public char getEnd()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.isNegated()", "public boolean isNegated()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.contains(char)", "public boolean contains(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.contains(org.sonar.api.internal.apachecommons.lang.CharRange)", "public boolean contains(org.sonar.api.internal.apachecommons.lang.CharRange)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharRange.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.CharRange.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.apachecommons.lang.CharSet", "org.sonar.api.internal.apachecommons.lang.CharSet.getInstance(java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.CharSet getInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.CharSet", "org.sonar.api.internal.apachecommons.lang.CharSet.getInstance(java.lang.String[])", "public static org.sonar.api.internal.apachecommons.lang.CharSet getInstance(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.CharRange[]", "org.sonar.api.internal.apachecommons.lang.CharSet.getCharRanges()", "public org.sonar.api.internal.apachecommons.lang.CharRange[] getCharRanges()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharSet.contains(char)", "public boolean contains(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharSet.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSet.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.CharSetUtils", "org.sonar.api.internal.apachecommons.lang.CharSetUtils()", "public org.sonar.api.internal.apachecommons.lang.CharSetUtils()"], ["org.sonar.api.internal.apachecommons.lang.CharSet", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.evaluateSet(java.lang.String[])", "public static org.sonar.api.internal.apachecommons.lang.CharSet evaluateSet(java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.squeeze(java.lang.String, java.lang.String)", "public static java.lang.String squeeze(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.squeeze(java.lang.String, java.lang.String[])", "public static java.lang.String squeeze(java.lang.String, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.count(java.lang.String, java.lang.String)", "public static int count(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.count(java.lang.String, java.lang.String[])", "public static int count(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.keep(java.lang.String, java.lang.String)", "public static java.lang.String keep(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.keep(java.lang.String, java.lang.String[])", "public static java.lang.String keep(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.delete(java.lang.String, java.lang.String)", "public static java.lang.String delete(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.delete(java.lang.String, java.lang.String[])", "public static java.lang.String delete(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.translate(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String translate(java.lang.String, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.CharUtils", "org.sonar.api.internal.apachecommons.lang.CharUtils()", "public org.sonar.api.internal.apachecommons.lang.CharUtils()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.lang.CharUtils.toCharacterObject(char)", "public static java.lang.Character toCharacterObject(char)"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.lang.CharUtils.toCharacterObject(java.lang.String)", "public static java.lang.Character toCharacterObject(java.lang.String)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.Character)", "public static char toChar(java.lang.Character)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.Character, char)", "public static char toChar(java.lang.Character, char)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.String)", "public static char toChar(java.lang.String)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.String, char)", "public static char toChar(java.lang.String, char)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(char)", "public static int toIntValue(char)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(char, int)", "public static int toIntValue(char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(java.lang.Character)", "public static int toIntValue(java.lang.Character)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(java.lang.Character, int)", "public static int toIntValue(java.lang.Character, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.toString(char)", "public static java.lang.String toString(char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.toString(java.lang.Character)", "public static java.lang.String toString(java.lang.Character)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.unicodeEscaped(char)", "public static java.lang.String unicodeEscaped(char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.unicodeEscaped(java.lang.Character)", "public static java.lang.String unicodeEscaped(java.lang.Character)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAscii(char)", "public static boolean isAscii(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiPrintable(char)", "public static boolean isAsciiPrintable(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiControl(char)", "public static boolean isAsciiControl(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlpha(char)", "public static boolean isAsciiAlpha(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlphaUpper(char)", "public static boolean isAsciiAlphaUpper(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlphaLower(char)", "public static boolean isAsciiAlphaLower(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiNumeric(char)", "public static boolean isAsciiNumeric(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlphanumeric(char)", "public static boolean isAsciiAlphanumeric(char)"], ["org.sonar.api.internal.apachecommons.lang.ClassUtils", "org.sonar.api.internal.apachecommons.lang.ClassUtils()", "public org.sonar.api.internal.apachecommons.lang.ClassUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortClassName(java.lang.Object, java.lang.String)", "public static java.lang.String getShortClassName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortClassName(java.lang.Class)", "public static java.lang.String getShortClassName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortClassName(java.lang.String)", "public static java.lang.String getShortClassName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageName(java.lang.Object, java.lang.String)", "public static java.lang.String getPackageName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageName(java.lang.Class)", "public static java.lang.String getPackageName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageName(java.lang.String)", "public static java.lang.String getPackageName(java.lang.String)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getAllSuperclasses(java.lang.Class)", "public static java.util.List getAllSuperclasses(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getAllInterfaces(java.lang.Class)", "public static java.util.List getAllInterfaces(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.convertClassNamesToClasses(java.util.List)", "public static java.util.List convertClassNamesToClasses(java.util.List)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.convertClassesToClassNames(java.util.List)", "public static java.util.List convertClassesToClassNames(java.util.List)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[])", "public static boolean isAssignable(java.lang.Class[], java.lang.Class[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean)", "public static boolean isAssignable(java.lang.Class[], java.lang.Class[], boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class, java.lang.Class)", "public static boolean isAssignable(java.lang.Class, java.lang.Class)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean)", "public static boolean isAssignable(java.lang.Class, java.lang.Class, boolean)"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.primitiveToWrapper(java.lang.Class)", "public static java.lang.Class primitiveToWrapper(java.lang.Class)"], ["java.lang.Class[]", "org.sonar.api.internal.apachecommons.lang.ClassUtils.primitivesToWrappers(java.lang.Class[])", "public static java.lang.Class[] primitivesToWrappers(java.lang.Class[])"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.wrapperToPrimitive(java.lang.Class)", "public static java.lang.Class wrapperToPrimitive(java.lang.Class)"], ["java.lang.Class[]", "org.sonar.api.internal.apachecommons.lang.ClassUtils.wrappersToPrimitives(java.lang.Class[])", "public static java.lang.Class[] wrappersToPrimitives(java.lang.Class[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isInnerClass(java.lang.Class)", "public static boolean isInnerClass(java.lang.Class)"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String, boolean)", "public static java.lang.Class getClass(java.lang.ClassLoader, java.lang.String, boolean) throws java.lang.ClassNotFoundException"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String)", "public static java.lang.Class getClass(java.lang.ClassLoader, java.lang.String) throws java.lang.ClassNotFoundException"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.String)", "public static java.lang.Class getClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.String, boolean)", "public static java.lang.Class getClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[])", "public static java.lang.reflect.Method getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[]) throws java.lang.SecurityException, java.lang.NoSuchMethodException"], ["java.lang.Class[]", "org.sonar.api.internal.apachecommons.lang.ClassUtils.toClass(java.lang.Object[])", "public static java.lang.Class[] toClass(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortCanonicalName(java.lang.Object, java.lang.String)", "public static java.lang.String getShortCanonicalName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortCanonicalName(java.lang.Class)", "public static java.lang.String getShortCanonicalName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortCanonicalName(java.lang.String)", "public static java.lang.String getShortCanonicalName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageCanonicalName(java.lang.Object, java.lang.String)", "public static java.lang.String getPackageCanonicalName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageCanonicalName(java.lang.Class)", "public static java.lang.String getPackageCanonicalName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageCanonicalName(java.lang.String)", "public static java.lang.String getPackageCanonicalName(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap()", "public org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap()"], ["org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap(int)", "public org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap.add(java.lang.String, int)", "public void add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap.name(int)", "public java.lang.String name(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap.value(java.lang.String)", "public int value(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap()", "public org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap()"], ["org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap(int)", "public org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap.add(java.lang.String, int)", "public void add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap.name(int)", "public java.lang.String name(int)"], ["org.sonar.api.internal.apachecommons.lang.Entities$HashEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$HashEntityMap()", "public org.sonar.api.internal.apachecommons.lang.Entities$HashEntityMap()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$LookupEntityMap.name(int)", "public java.lang.String name(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$MapIntMap.add(java.lang.String, int)", "public void add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$MapIntMap.name(int)", "public java.lang.String name(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities$MapIntMap.value(java.lang.String)", "public int value(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$PrimitiveEntityMap.add(java.lang.String, int)", "public void add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$PrimitiveEntityMap.name(int)", "public java.lang.String name(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities$PrimitiveEntityMap.value(java.lang.String)", "public int value(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.Entities$TreeEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$TreeEntityMap()", "public org.sonar.api.internal.apachecommons.lang.Entities$TreeEntityMap()"], ["org.sonar.api.internal.apachecommons.lang.Entities", "org.sonar.api.internal.apachecommons.lang.Entities()", "public org.sonar.api.internal.apachecommons.lang.Entities()"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.addEntities(java.lang.String[][])", "public void addEntities(java.lang.String[][])"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.addEntity(java.lang.String, int)", "public void addEntity(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities.entityName(int)", "public java.lang.String entityName(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities.entityValue(java.lang.String)", "public int entityValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.escape(java.io.Writer, java.lang.String)", "public void escape(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities.unescape(java.lang.String)", "public java.lang.String unescape(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.unescape(java.io.Writer, java.lang.String)", "public void unescape(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enum.Enum.getName()", "public final java.lang.String getName()"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.enum.Enum.getEnumClass()", "public java.lang.Class getEnumClass()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.enum.Enum.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.Enum.hashCode()", "public final int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.Enum.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enum.Enum.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.enum.EnumUtils", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils()", "public org.sonar.api.internal.apachecommons.lang.enum.EnumUtils()"], ["org.sonar.api.internal.apachecommons.lang.enum.Enum", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnum(java.lang.Class, java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.enum.Enum getEnum(java.lang.Class, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnum(java.lang.Class, int)", "public static org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum getEnum(java.lang.Class, int)"], ["java.util.Map", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnumMap(java.lang.Class)", "public static java.util.Map getEnumMap(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnumList(java.lang.Class)", "public static java.util.List getEnumList(java.lang.Class)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.iterator(java.lang.Class)", "public static java.util.Iterator iterator(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum.getValue()", "public final int getValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enums.Enum.getName()", "public final java.lang.String getName()"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.enums.Enum.getEnumClass()", "public java.lang.Class getEnumClass()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.enums.Enum.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.Enum.hashCode()", "public final int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.Enum.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enums.Enum.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.enums.EnumUtils", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils()", "public org.sonar.api.internal.apachecommons.lang.enums.EnumUtils()"], ["org.sonar.api.internal.apachecommons.lang.enums.Enum", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnum(java.lang.Class, java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.enums.Enum getEnum(java.lang.Class, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnum(java.lang.Class, int)", "public static org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum getEnum(java.lang.Class, int)"], ["java.util.Map", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnumMap(java.lang.Class)", "public static java.util.Map getEnumMap(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnumList(java.lang.Class)", "public static java.util.List getEnumList(java.lang.Class)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.iterator(java.lang.Class)", "public static java.util.Iterator iterator(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum.getValue()", "public final int getValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException", "org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException", "org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException", "org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils()", "public org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.addCauseMethodName(java.lang.String)", "public static void addCauseMethodName(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.removeCauseMethodName(java.lang.String)", "public static void removeCauseMethodName(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.setCause(java.lang.Throwable, java.lang.Throwable)", "public static boolean setCause(java.lang.Throwable, java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.isCauseMethodName(java.lang.String)", "public static boolean isCauseMethodName(java.lang.String)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getCause(java.lang.Throwable)", "public static java.lang.Throwable getCause(java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[])", "public static java.lang.Throwable getCause(java.lang.Throwable, java.lang.String[])"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getRootCause(java.lang.Throwable)", "public static java.lang.Throwable getRootCause(java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.isThrowableNested()", "public static boolean isThrowableNested()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.isNestedThrowable(java.lang.Throwable)", "public static boolean isNestedThrowable(java.lang.Throwable)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getThrowableCount(java.lang.Throwable)", "public static int getThrowableCount(java.lang.Throwable)"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getThrowables(java.lang.Throwable)", "public static java.lang.Throwable[] getThrowables(java.lang.Throwable)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getThrowableList(java.lang.Throwable)", "public static java.util.List getThrowableList(java.lang.Throwable)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class)", "public static int indexOfThrowable(java.lang.Throwable, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class, int)", "public static int indexOfThrowable(java.lang.Throwable, java.lang.Class, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class)", "public static int indexOfType(java.lang.Throwable, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class, int)", "public static int indexOfType(java.lang.Throwable, java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable)", "public static void printRootCauseStackTrace(java.lang.Throwable)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream)", "public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter)", "public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getRootCauseStackTrace(java.lang.Throwable)", "public static java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.removeCommonFrames(java.util.List, java.util.List)", "public static void removeCommonFrames(java.util.List, java.util.List)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getFullStackTrace(java.lang.Throwable)", "public static java.lang.String getFullStackTrace(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getStackTrace(java.lang.Throwable)", "public static java.lang.String getStackTrace(java.lang.Throwable)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getStackFrames(java.lang.Throwable)", "public static java.lang.String[] getStackFrames(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getMessage(java.lang.Throwable)", "public static java.lang.String getMessage(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getRootCauseMessage(java.lang.Throwable)", "public static java.lang.String getRootCauseMessage(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate(org.sonar.api.internal.apachecommons.lang.exception.Nestable)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate(org.sonar.api.internal.apachecommons.lang.exception.Nestable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getMessage(int)", "public java.lang.String getMessage(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getMessage(java.lang.String)", "public java.lang.String getMessage(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getMessages()", "public java.lang.String[] getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getThrowable(int)", "public java.lang.Throwable getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getThrowableCount()", "public int getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getThrowables()", "public java.lang.Throwable[] getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.indexOfThrowable(java.lang.Class, int)", "public int indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.printStackTrace()", "public void printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.printStackTrace(java.io.PrintStream)", "public void printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.printStackTrace(java.io.PrintWriter)", "public void printStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError()", "public org.sonar.api.internal.apachecommons.lang.exception.NestableError()"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getCause()", "public java.lang.Throwable getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getMessage()", "public java.lang.String getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getMessage(int)", "public java.lang.String getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getMessages()", "public java.lang.String[] getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getThrowable(int)", "public java.lang.Throwable getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getThrowableCount()", "public int getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getThrowables()", "public java.lang.Throwable[] getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.indexOfThrowable(java.lang.Class)", "public int indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.indexOfThrowable(java.lang.Class, int)", "public int indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printStackTrace()", "public void printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printStackTrace(java.io.PrintStream)", "public void printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printStackTrace(java.io.PrintWriter)", "public void printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printPartialStackTrace(java.io.PrintWriter)", "public final void printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException()", "public org.sonar.api.internal.apachecommons.lang.exception.NestableException()"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getCause()", "public java.lang.Throwable getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getMessage()", "public java.lang.String getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getMessage(int)", "public java.lang.String getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getMessages()", "public java.lang.String[] getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getThrowable(int)", "public java.lang.Throwable getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getThrowableCount()", "public int getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getThrowables()", "public java.lang.Throwable[] getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.indexOfThrowable(java.lang.Class)", "public int indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.indexOfThrowable(java.lang.Class, int)", "public int indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printStackTrace()", "public void printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printStackTrace(java.io.PrintStream)", "public void printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printStackTrace(java.io.PrintWriter)", "public void printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printPartialStackTrace(java.io.PrintWriter)", "public final void printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException()", "public org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException()"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getCause()", "public java.lang.Throwable getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getMessage()", "public java.lang.String getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getMessage(int)", "public java.lang.String getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getMessages()", "public java.lang.String[] getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getThrowable(int)", "public java.lang.Throwable getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getThrowableCount()", "public int getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getThrowables()", "public java.lang.Throwable[] getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.indexOfThrowable(java.lang.Class)", "public int indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.indexOfThrowable(java.lang.Class, int)", "public int indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printStackTrace()", "public void printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printStackTrace(java.io.PrintStream)", "public void printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printStackTrace(java.io.PrintWriter)", "public void printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printPartialStackTrace(java.io.PrintWriter)", "public final void printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.IllegalClassException", "org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.Class, java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.Class, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.IllegalClassException", "org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.Class, java.lang.Class)", "public org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.Class, java.lang.Class)"], ["org.sonar.api.internal.apachecommons.lang.IllegalClassException", "org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException", "org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException", "org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException(java.lang.String, java.lang.String[])", "public org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException(java.lang.String, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.IntHashMap", "org.sonar.api.internal.apachecommons.lang.IntHashMap()", "public org.sonar.api.internal.apachecommons.lang.IntHashMap()"], ["org.sonar.api.internal.apachecommons.lang.IntHashMap", "org.sonar.api.internal.apachecommons.lang.IntHashMap(int)", "public org.sonar.api.internal.apachecommons.lang.IntHashMap(int)"], ["org.sonar.api.internal.apachecommons.lang.IntHashMap", "org.sonar.api.internal.apachecommons.lang.IntHashMap(int, float)", "public org.sonar.api.internal.apachecommons.lang.IntHashMap(int, float)"], ["int", "org.sonar.api.internal.apachecommons.lang.IntHashMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.containsKey(int)", "public boolean containsKey(int)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.IntHashMap.get(int)", "public java.lang.Object get(int)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.IntHashMap.put(int, java.lang.Object)", "public java.lang.Object put(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.IntHashMap.remove(int)", "public java.lang.Object remove(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.IntHashMap.void clear()", "public synchronized void clear()"], ["org.sonar.api.internal.apachecommons.lang.LocaleUtils", "org.sonar.api.internal.apachecommons.lang.LocaleUtils()", "public org.sonar.api.internal.apachecommons.lang.LocaleUtils()"], ["java.util.Locale", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.toLocale(java.lang.String)", "public static java.util.Locale toLocale(java.lang.String)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.localeLookupList(java.util.Locale)", "public static java.util.List localeLookupList(java.util.Locale)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.localeLookupList(java.util.Locale, java.util.Locale)", "public static java.util.List localeLookupList(java.util.Locale, java.util.Locale)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.availableLocaleList()", "public static java.util.List availableLocaleList()"], ["java.util.Set", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.availableLocaleSet()", "public static java.util.Set availableLocaleSet()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.isAvailableLocale(java.util.Locale)", "public static boolean isAvailableLocale(java.util.Locale)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.languagesByCountry(java.lang.String)", "public static java.util.List languagesByCountry(java.lang.String)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.countriesByLanguage(java.lang.String)", "public static java.util.List countriesByLanguage(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double)", "public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double, double)", "public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double, double)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number, java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumNumber()", "public java.lang.Number getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumLong()", "public long getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumInteger()", "public int getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumDouble()", "public double getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumFloat()", "public float getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumNumber()", "public java.lang.Number getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumLong()", "public long getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumInteger()", "public int getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumDouble()", "public double getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumFloat()", "public float getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.containsNumber(java.lang.Number)", "public boolean containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.containsDouble(double)", "public boolean containsDouble(double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(float)", "public org.sonar.api.internal.apachecommons.lang.math.FloatRange(float)"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.FloatRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(float, float)", "public org.sonar.api.internal.apachecommons.lang.math.FloatRange(float, float)"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(java.lang.Number, java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.FloatRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumNumber()", "public java.lang.Number getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumLong()", "public long getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumInteger()", "public int getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumDouble()", "public double getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumFloat()", "public float getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumNumber()", "public java.lang.Number getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumLong()", "public long getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumInteger()", "public int getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumDouble()", "public double getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumFloat()", "public float getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.containsNumber(java.lang.Number)", "public boolean containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.containsFloat(float)", "public boolean containsFloat(float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(int, int)", "public static org.sonar.api.internal.apachecommons.lang.math.Fraction getFraction(int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(int, int, int)", "public static org.sonar.api.internal.apachecommons.lang.math.Fraction getFraction(int, int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getReducedFraction(int, int)", "public static org.sonar.api.internal.apachecommons.lang.math.Fraction getReducedFraction(int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(double)", "public static org.sonar.api.internal.apachecommons.lang.math.Fraction getFraction(double)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.math.Fraction getFraction(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getNumerator()", "public int getNumerator()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getDenominator()", "public int getDenominator()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getProperNumerator()", "public int getProperNumerator()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getProperWhole()", "public int getProperWhole()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.Fraction.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.Fraction.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.Fraction.doubleValue()", "public double doubleValue()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.reduce()", "public org.sonar.api.internal.apachecommons.lang.math.Fraction reduce()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.invert()", "public org.sonar.api.internal.apachecommons.lang.math.Fraction invert()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.negate()", "public org.sonar.api.internal.apachecommons.lang.math.Fraction negate()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.abs()", "public org.sonar.api.internal.apachecommons.lang.math.Fraction abs()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.pow(int)", "public org.sonar.api.internal.apachecommons.lang.math.Fraction pow(int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.add(org.sonar.api.internal.apachecommons.lang.math.Fraction)", "public org.sonar.api.internal.apachecommons.lang.math.Fraction add(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.subtract(org.sonar.api.internal.apachecommons.lang.math.Fraction)", "public org.sonar.api.internal.apachecommons.lang.math.Fraction subtract(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.multiplyBy(org.sonar.api.internal.apachecommons.lang.math.Fraction)", "public org.sonar.api.internal.apachecommons.lang.math.Fraction multiplyBy(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.divideBy(org.sonar.api.internal.apachecommons.lang.math.Fraction)", "public org.sonar.api.internal.apachecommons.lang.math.Fraction divideBy(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Fraction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.Fraction.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.Fraction.toProperString()", "public java.lang.String toProperString()"], ["org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils()", "public org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(double[])", "public static double min(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(float[])", "public static float min(float[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(double, double, double)", "public static double min(double, double, double)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(double, double)", "public static double min(double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(float, float, float)", "public static float min(float, float, float)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(float, float)", "public static float min(float, float)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(double[])", "public static double max(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(float[])", "public static float max(float[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(double, double, double)", "public static double max(double, double, double)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(double, double)", "public static double max(double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(float, float, float)", "public static float max(float, float, float)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(float, float)", "public static float max(float, float)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(int)", "public org.sonar.api.internal.apachecommons.lang.math.IntRange(int)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.IntRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(int, int)", "public org.sonar.api.internal.apachecommons.lang.math.IntRange(int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(java.lang.Number, java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.IntRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumNumber()", "public java.lang.Number getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumLong()", "public long getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumInteger()", "public int getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumDouble()", "public double getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumFloat()", "public float getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumNumber()", "public java.lang.Number getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumLong()", "public long getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumInteger()", "public int getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumDouble()", "public double getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumFloat()", "public float getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.containsNumber(java.lang.Number)", "public boolean containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.containsInteger(int)", "public boolean containsInteger(int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.IntRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.IntRange.toString()", "public java.lang.String toString()"], ["int[]", "org.sonar.api.internal.apachecommons.lang.math.IntRange.toArray()", "public int[] toArray()"], ["org.sonar.api.internal.apachecommons.lang.math.JVMRandom", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom()", "public org.sonar.api.internal.apachecommons.lang.math.JVMRandom()"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.void setSeed(long)", "public synchronized void setSeed(long)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.double nextGaussian()", "public synchronized double nextGaussian()"], ["void", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextBytes(byte[])", "public void nextBytes(byte[])"], ["int", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextInt()", "public int nextInt()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextInt(int)", "public int nextInt(int)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextLong()", "public long nextLong()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextLong(long)", "public static long nextLong(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextBoolean()", "public boolean nextBoolean()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextFloat()", "public float nextFloat()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextDouble()", "public double nextDouble()"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(long)", "public org.sonar.api.internal.apachecommons.lang.math.LongRange(long)"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.LongRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(long, long)", "public org.sonar.api.internal.apachecommons.lang.math.LongRange(long, long)"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(java.lang.Number, java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.LongRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumNumber()", "public java.lang.Number getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumLong()", "public long getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumInteger()", "public int getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumDouble()", "public double getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumFloat()", "public float getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumNumber()", "public java.lang.Number getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumLong()", "public long getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumInteger()", "public int getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumDouble()", "public double getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumFloat()", "public float getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.containsNumber(java.lang.Number)", "public boolean containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.containsLong(long)", "public boolean containsLong(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.LongRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.LongRange.toString()", "public java.lang.String toString()"], ["long[]", "org.sonar.api.internal.apachecommons.lang.math.LongRange.toArray()", "public long[] toArray()"], ["org.sonar.api.internal.apachecommons.lang.math.NumberRange", "org.sonar.api.internal.apachecommons.lang.math.NumberRange(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.NumberRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.NumberRange", "org.sonar.api.internal.apachecommons.lang.math.NumberRange(java.lang.Number, java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.math.NumberRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.getMinimumNumber()", "public java.lang.Number getMinimumNumber()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.getMaximumNumber()", "public java.lang.Number getMaximumNumber()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.containsNumber(java.lang.Number)", "public boolean containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.math.NumberUtils", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils()", "public org.sonar.api.internal.apachecommons.lang.math.NumberUtils()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.stringToInt(java.lang.String)", "public static int stringToInt(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toInt(java.lang.String)", "public static int toInt(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.stringToInt(java.lang.String, int)", "public static int stringToInt(java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toInt(java.lang.String, int)", "public static int toInt(java.lang.String, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toLong(java.lang.String)", "public static long toLong(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toLong(java.lang.String, long)", "public static long toLong(java.lang.String, long)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toFloat(java.lang.String)", "public static float toFloat(java.lang.String)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toFloat(java.lang.String, float)", "public static float toFloat(java.lang.String, float)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toDouble(java.lang.String)", "public static double toDouble(java.lang.String)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toDouble(java.lang.String, double)", "public static double toDouble(java.lang.String, double)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toByte(java.lang.String)", "public static byte toByte(java.lang.String)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toByte(java.lang.String, byte)", "public static byte toByte(java.lang.String, byte)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toShort(java.lang.String)", "public static short toShort(java.lang.String)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toShort(java.lang.String, short)", "public static short toShort(java.lang.String, short)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createNumber(java.lang.String)", "public static java.lang.Number createNumber(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createFloat(java.lang.String)", "public static java.lang.Float createFloat(java.lang.String)"], ["java.lang.Double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createDouble(java.lang.String)", "public static java.lang.Double createDouble(java.lang.String)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createInteger(java.lang.String)", "public static java.lang.Integer createInteger(java.lang.String)"], ["java.lang.Long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createLong(java.lang.String)", "public static java.lang.Long createLong(java.lang.String)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createBigInteger(java.lang.String)", "public static java.math.BigInteger createBigInteger(java.lang.String)"], ["java.math.BigDecimal", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createBigDecimal(java.lang.String)", "public static java.math.BigDecimal createBigDecimal(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(long[])", "public static long min(long[])"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(int[])", "public static int min(int[])"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(short[])", "public static short min(short[])"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(byte[])", "public static byte min(byte[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(double[])", "public static double min(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(float[])", "public static float min(float[])"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(long[])", "public static long max(long[])"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(int[])", "public static int max(int[])"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(short[])", "public static short max(short[])"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(byte[])", "public static byte max(byte[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(double[])", "public static double max(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(float[])", "public static float max(float[])"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(long, long, long)", "public static long min(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(int, int, int)", "public static int min(int, int, int)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(short, short, short)", "public static short min(short, short, short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(byte, byte, byte)", "public static byte min(byte, byte, byte)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(double, double, double)", "public static double min(double, double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(float, float, float)", "public static float min(float, float, float)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(long, long, long)", "public static long max(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(int, int, int)", "public static int max(int, int, int)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(short, short, short)", "public static short max(short, short, short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(byte, byte, byte)", "public static byte max(byte, byte, byte)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(double, double, double)", "public static double max(double, double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(float, float, float)", "public static float max(float, float, float)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.compare(double, double)", "public static int compare(double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.compare(float, float)", "public static int compare(float, float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.isDigits(java.lang.String)", "public static boolean isDigits(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.isNumber(java.lang.String)", "public static boolean isNumber(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.math.RandomUtils", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils()", "public org.sonar.api.internal.apachecommons.lang.math.RandomUtils()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt()", "public static int nextInt()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt(java.util.Random)", "public static int nextInt(java.util.Random)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt(int)", "public static int nextInt(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt(java.util.Random, int)", "public static int nextInt(java.util.Random, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextLong()", "public static long nextLong()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextLong(java.util.Random)", "public static long nextLong(java.util.Random)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextBoolean()", "public static boolean nextBoolean()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextBoolean(java.util.Random)", "public static boolean nextBoolean(java.util.Random)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextFloat()", "public static float nextFloat()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextFloat(java.util.Random)", "public static float nextFloat(java.util.Random)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextDouble()", "public static double nextDouble()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextDouble(java.util.Random)", "public static double nextDouble(java.util.Random)"], ["org.sonar.api.internal.apachecommons.lang.math.Range", "org.sonar.api.internal.apachecommons.lang.math.Range()", "public org.sonar.api.internal.apachecommons.lang.math.Range()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumLong()", "public long getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumInteger()", "public int getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumDouble()", "public double getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumFloat()", "public float getMinimumFloat()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumLong()", "public long getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumInteger()", "public int getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumDouble()", "public double getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumFloat()", "public float getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsLong(java.lang.Number)", "public boolean containsLong(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsLong(long)", "public boolean containsLong(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsInteger(java.lang.Number)", "public boolean containsInteger(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsInteger(int)", "public boolean containsInteger(int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsDouble(java.lang.Number)", "public boolean containsDouble(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsDouble(double)", "public boolean containsDouble(double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsFloat(java.lang.Number)", "public boolean containsFloat(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsFloat(float)", "public boolean containsFloat(float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)", "public boolean overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Range.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.Range.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean(boolean)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean(boolean)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean(java.lang.Boolean)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean(java.lang.Boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.setValue(boolean)", "public void setValue(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.isTrue()", "public boolean isTrue()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.isFalse()", "public boolean isFalse()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.booleanValue()", "public boolean booleanValue()"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.toBoolean()", "public java.lang.Boolean toBoolean()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableByte()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(byte)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(byte)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.setValue(byte)", "public void setValue(byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.increment()", "public void increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.decrement()", "public void decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.add(byte)", "public void add(byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.add(java.lang.Number)", "public void add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.subtract(byte)", "public void subtract(byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.subtract(java.lang.Number)", "public void subtract(java.lang.Number)"], ["byte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.byteValue()", "public byte byteValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.doubleValue()", "public double doubleValue()"], ["java.lang.Byte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.toByte()", "public java.lang.Byte toByte()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(double)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(double)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.setValue(double)", "public void setValue(double)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.isNaN()", "public boolean isNaN()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.isInfinite()", "public boolean isInfinite()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.increment()", "public void increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.decrement()", "public void decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.add(double)", "public void add(double)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.add(java.lang.Number)", "public void add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.subtract(double)", "public void subtract(double)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.subtract(java.lang.Number)", "public void subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.doubleValue()", "public double doubleValue()"], ["java.lang.Double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.toDouble()", "public java.lang.Double toDouble()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(float)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(float)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.setValue(float)", "public void setValue(float)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.isNaN()", "public boolean isNaN()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.isInfinite()", "public boolean isInfinite()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.increment()", "public void increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.decrement()", "public void decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.add(float)", "public void add(float)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.add(java.lang.Number)", "public void add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.subtract(float)", "public void subtract(float)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.subtract(java.lang.Number)", "public void subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.doubleValue()", "public double doubleValue()"], ["java.lang.Float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.toFloat()", "public java.lang.Float toFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableInt()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(int)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(int)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.setValue(int)", "public void setValue(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.increment()", "public void increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.decrement()", "public void decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.add(int)", "public void add(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.add(java.lang.Number)", "public void add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.subtract(int)", "public void subtract(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.subtract(java.lang.Number)", "public void subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.doubleValue()", "public double doubleValue()"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.toInteger()", "public java.lang.Integer toInteger()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableLong()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(long)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(long)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.setValue(long)", "public void setValue(long)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.increment()", "public void increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.decrement()", "public void decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.add(long)", "public void add(long)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.add(java.lang.Number)", "public void add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.subtract(long)", "public void subtract(long)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.subtract(java.lang.Number)", "public void subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.doubleValue()", "public double doubleValue()"], ["java.lang.Long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.toLong()", "public java.lang.Long toLong()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableObject", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableObject()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableObject", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableObject(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort()", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableShort()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(short)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(short)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.getValue()", "public java.lang.Object getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.setValue(short)", "public void setValue(short)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.increment()", "public void increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.decrement()", "public void decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.add(short)", "public void add(short)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.add(java.lang.Number)", "public void add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.subtract(short)", "public void subtract(short)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.subtract(java.lang.Number)", "public void subtract(java.lang.Number)"], ["short", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.shortValue()", "public short shortValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.doubleValue()", "public double doubleValue()"], ["java.lang.Short", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.toShort()", "public java.lang.Short toShort()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException()", "public org.sonar.api.internal.apachecommons.lang.NotImplementedException()"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.Class)", "public org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.Class)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getCause()", "public java.lang.Throwable getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getMessage()", "public java.lang.String getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getMessage(int)", "public java.lang.String getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getMessages()", "public java.lang.String[] getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getThrowable(int)", "public java.lang.Throwable getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getThrowableCount()", "public int getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getThrowables()", "public java.lang.Throwable[] getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.indexOfThrowable(java.lang.Class)", "public int indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.indexOfThrowable(java.lang.Class, int)", "public int indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printStackTrace()", "public void printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printStackTrace(java.io.PrintStream)", "public void printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printStackTrace(java.io.PrintWriter)", "public void printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printPartialStackTrace(java.io.PrintWriter)", "public final void printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.NullArgumentException", "org.sonar.api.internal.apachecommons.lang.NullArgumentException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.NullArgumentException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.NumberRange", "org.sonar.api.internal.apachecommons.lang.NumberRange(java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.NumberRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.NumberRange", "org.sonar.api.internal.apachecommons.lang.NumberRange(java.lang.Number, java.lang.Number)", "public org.sonar.api.internal.apachecommons.lang.NumberRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.NumberRange.getMinimum()", "public java.lang.Number getMinimum()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.NumberRange.getMaximum()", "public java.lang.Number getMaximum()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.includesNumber(java.lang.Number)", "public boolean includesNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.includesRange(org.sonar.api.internal.apachecommons.lang.NumberRange)", "public boolean includesRange(org.sonar.api.internal.apachecommons.lang.NumberRange)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.overlaps(org.sonar.api.internal.apachecommons.lang.NumberRange)", "public boolean overlaps(org.sonar.api.internal.apachecommons.lang.NumberRange)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.NumberRange.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.NumberUtils", "org.sonar.api.internal.apachecommons.lang.NumberUtils()", "public org.sonar.api.internal.apachecommons.lang.NumberUtils()"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.stringToInt(java.lang.String)", "public static int stringToInt(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.stringToInt(java.lang.String, int)", "public static int stringToInt(java.lang.String, int)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createNumber(java.lang.String)", "public static java.lang.Number createNumber(java.lang.String) throws java.lang.NumberFormatException"], ["java.lang.Float", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createFloat(java.lang.String)", "public static java.lang.Float createFloat(java.lang.String)"], ["java.lang.Double", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createDouble(java.lang.String)", "public static java.lang.Double createDouble(java.lang.String)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createInteger(java.lang.String)", "public static java.lang.Integer createInteger(java.lang.String)"], ["java.lang.Long", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createLong(java.lang.String)", "public static java.lang.Long createLong(java.lang.String)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createBigInteger(java.lang.String)", "public static java.math.BigInteger createBigInteger(java.lang.String)"], ["java.math.BigDecimal", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createBigDecimal(java.lang.String)", "public static java.math.BigDecimal createBigDecimal(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.lang.NumberUtils.minimum(long, long, long)", "public static long minimum(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.minimum(int, int, int)", "public static int minimum(int, int, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.NumberUtils.maximum(long, long, long)", "public static long maximum(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.maximum(int, int, int)", "public static int maximum(int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.compare(double, double)", "public static int compare(double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.compare(float, float)", "public static int compare(float, float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberUtils.isDigits(java.lang.String)", "public static boolean isDigits(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberUtils.isNumber(java.lang.String)", "public static boolean isNumber(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.ObjectUtils", "org.sonar.api.internal.apachecommons.lang.ObjectUtils()", "public org.sonar.api.internal.apachecommons.lang.ObjectUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.defaultIfNull(java.lang.Object, java.lang.Object)", "public static java.lang.Object defaultIfNull(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.equals(java.lang.Object, java.lang.Object)", "public static boolean equals(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.notEqual(java.lang.Object, java.lang.Object)", "public static boolean notEqual(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.hashCode(java.lang.Object)", "public static int hashCode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.identityToString(java.lang.Object)", "public static java.lang.String identityToString(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.identityToString(java.lang.StringBuffer, java.lang.Object)", "public static void identityToString(java.lang.StringBuffer, java.lang.Object)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.appendIdentityToString(java.lang.StringBuffer, java.lang.Object)", "public static java.lang.StringBuffer appendIdentityToString(java.lang.StringBuffer, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.toString(java.lang.Object)", "public static java.lang.String toString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.toString(java.lang.Object, java.lang.String)", "public static java.lang.String toString(java.lang.Object, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.min(java.lang.Comparable, java.lang.Comparable)", "public static java.lang.Object min(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.max(java.lang.Comparable, java.lang.Comparable)", "public static java.lang.Object max(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable)", "public static int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable, boolean)", "public static int compare(java.lang.Comparable, java.lang.Comparable, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.clone(java.lang.Object)", "public static java.lang.Object clone(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.cloneIfPossible(java.lang.Object)", "public static java.lang.Object cloneIfPossible(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.RandomStringUtils", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils()", "public org.sonar.api.internal.apachecommons.lang.RandomStringUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int)", "public static java.lang.String random(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomAscii(int)", "public static java.lang.String randomAscii(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomAlphabetic(int)", "public static java.lang.String randomAlphabetic(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomAlphanumeric(int)", "public static java.lang.String randomAlphanumeric(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomNumeric(int)", "public static java.lang.String randomNumeric(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, boolean, boolean)", "public static java.lang.String random(int, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, int, int, boolean, boolean)", "public static java.lang.String random(int, int, int, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, int, int, boolean, boolean, char[])", "public static java.lang.String random(int, int, int, boolean, boolean, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, int, int, boolean, boolean, char[], java.util.Random)", "public static java.lang.String random(int, int, int, boolean, boolean, char[], java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, java.lang.String)", "public static java.lang.String random(int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, char[])", "public static java.lang.String random(int, char[])"], ["org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils()", "public org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object)", "public static java.lang.Object invokeConstructor(java.lang.Class, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[])", "public static java.lang.Object invokeConstructor(java.lang.Class, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])", "public static java.lang.Object invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object)", "public static java.lang.Object invokeExactConstructor(java.lang.Class, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[])", "public static java.lang.Object invokeExactConstructor(java.lang.Class, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])", "public static java.lang.Object invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class)", "public static java.lang.reflect.Constructor getAccessibleConstructor(java.lang.Class, java.lang.Class)"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class[])", "public static java.lang.reflect.Constructor getAccessibleConstructor(java.lang.Class, java.lang.Class[])"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.reflect.Constructor)", "public static java.lang.reflect.Constructor getAccessibleConstructor(java.lang.reflect.Constructor)"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[])", "public static java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[])"], ["org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils()", "public org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils()"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getField(java.lang.Class, java.lang.String)", "public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String)"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getField(java.lang.Class, java.lang.String, boolean)", "public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String, boolean)"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getDeclaredField(java.lang.Class, java.lang.String)", "public static java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String)"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getDeclaredField(java.lang.Class, java.lang.String, boolean)", "public static java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.reflect.Field)", "public static java.lang.Object readStaticField(java.lang.reflect.Field) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.reflect.Field, boolean)", "public static java.lang.Object readStaticField(java.lang.reflect.Field, boolean) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.Class, java.lang.String)", "public static java.lang.Object readStaticField(java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.Class, java.lang.String, boolean)", "public static java.lang.Object readStaticField(java.lang.Class, java.lang.String, boolean) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredStaticField(java.lang.Class, java.lang.String)", "public static java.lang.Object readDeclaredStaticField(java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredStaticField(java.lang.Class, java.lang.String, boolean)", "public static java.lang.Object readDeclaredStaticField(java.lang.Class, java.lang.String, boolean) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.reflect.Field, java.lang.Object)", "public static java.lang.Object readField(java.lang.reflect.Field, java.lang.Object) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.reflect.Field, java.lang.Object, boolean)", "public static java.lang.Object readField(java.lang.reflect.Field, java.lang.Object, boolean) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.Object, java.lang.String)", "public static java.lang.Object readField(java.lang.Object, java.lang.String) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.Object, java.lang.String, boolean)", "public static java.lang.Object readField(java.lang.Object, java.lang.String, boolean) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredField(java.lang.Object, java.lang.String)", "public static java.lang.Object readDeclaredField(java.lang.Object, java.lang.String) throws java.lang.IllegalAccessException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredField(java.lang.Object, java.lang.String, boolean)", "public static java.lang.Object readDeclaredField(java.lang.Object, java.lang.String, boolean) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.reflect.Field, java.lang.Object)", "public static void writeStaticField(java.lang.reflect.Field, java.lang.Object) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.reflect.Field, java.lang.Object, boolean)", "public static void writeStaticField(java.lang.reflect.Field, java.lang.Object, boolean) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.Class, java.lang.String, java.lang.Object)", "public static void writeStaticField(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean)", "public static void writeStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object)", "public static void writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean)", "public static void writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object)", "public static void writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object, boolean)", "public static void writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object, boolean) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.Object, java.lang.String, java.lang.Object)", "public static void writeField(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.Object, java.lang.String, java.lang.Object, boolean)", "public static void writeField(java.lang.Object, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object)", "public static void writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object, boolean)", "public static void writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException"], ["org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils()", "public org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object)", "public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[])", "public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[])", "public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object)", "public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[])", "public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[])", "public static java.lang.Object invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[])", "public static java.lang.Object invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object)", "public static java.lang.Object invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[])", "public static java.lang.Object invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[])", "public static java.lang.Object invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object)", "public static java.lang.Object invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[])", "public static java.lang.Object invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class)", "public static java.lang.reflect.Method getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class)"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])", "public static java.lang.reflect.Method getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getAccessibleMethod(java.lang.reflect.Method)", "public static java.lang.reflect.Method getAccessibleMethod(java.lang.reflect.Method)"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getMatchingAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])", "public static java.lang.reflect.Method getMatchingAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException()", "public org.sonar.api.internal.apachecommons.lang.SerializationException()"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.SerializationUtils", "org.sonar.api.internal.apachecommons.lang.SerializationUtils()", "public org.sonar.api.internal.apachecommons.lang.SerializationUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.clone(java.io.Serializable)", "public static java.lang.Object clone(java.io.Serializable)"], ["void", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream)", "public static void serialize(java.io.Serializable, java.io.OutputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.serialize(java.io.Serializable)", "public static byte[] serialize(java.io.Serializable)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.deserialize(java.io.InputStream)", "public static java.lang.Object deserialize(java.io.InputStream)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.deserialize(byte[])", "public static java.lang.Object deserialize(byte[])"], ["org.sonar.api.internal.apachecommons.lang.StringEscapeUtils", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils()", "public org.sonar.api.internal.apachecommons.lang.StringEscapeUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJava(java.lang.String)", "public static java.lang.String escapeJava(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJava(java.io.Writer, java.lang.String)", "public static void escapeJava(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJavaScript(java.lang.String)", "public static java.lang.String escapeJavaScript(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJavaScript(java.io.Writer, java.lang.String)", "public static void escapeJavaScript(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJava(java.lang.String)", "public static java.lang.String unescapeJava(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJava(java.io.Writer, java.lang.String)", "public static void unescapeJava(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJavaScript(java.lang.String)", "public static java.lang.String unescapeJavaScript(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJavaScript(java.io.Writer, java.lang.String)", "public static void unescapeJavaScript(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeHtml(java.lang.String)", "public static java.lang.String escapeHtml(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeHtml(java.io.Writer, java.lang.String)", "public static void escapeHtml(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeHtml(java.lang.String)", "public static java.lang.String unescapeHtml(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeHtml(java.io.Writer, java.lang.String)", "public static void unescapeHtml(java.io.Writer, java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeXml(java.io.Writer, java.lang.String)", "public static void escapeXml(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeXml(java.lang.String)", "public static java.lang.String escapeXml(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeXml(java.io.Writer, java.lang.String)", "public static void unescapeXml(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeXml(java.lang.String)", "public static java.lang.String unescapeXml(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeSql(java.lang.String)", "public static java.lang.String escapeSql(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeCsv(java.lang.String)", "public static java.lang.String escapeCsv(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeCsv(java.io.Writer, java.lang.String)", "public static void escapeCsv(java.io.Writer, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeCsv(java.lang.String)", "public static java.lang.String unescapeCsv(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeCsv(java.io.Writer, java.lang.String)", "public static void unescapeCsv(java.io.Writer, java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.lang.StringUtils", "org.sonar.api.internal.apachecommons.lang.StringUtils()", "public org.sonar.api.internal.apachecommons.lang.StringUtils()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isEmpty(java.lang.String)", "public static boolean isEmpty(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNotEmpty(java.lang.String)", "public static boolean isNotEmpty(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isBlank(java.lang.String)", "public static boolean isBlank(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNotBlank(java.lang.String)", "public static boolean isNotBlank(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.clean(java.lang.String)", "public static java.lang.String clean(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.trim(java.lang.String)", "public static java.lang.String trim(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.trimToNull(java.lang.String)", "public static java.lang.String trimToNull(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.trimToEmpty(java.lang.String)", "public static java.lang.String trimToEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.strip(java.lang.String)", "public static java.lang.String strip(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripToNull(java.lang.String)", "public static java.lang.String stripToNull(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripToEmpty(java.lang.String)", "public static java.lang.String stripToEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.strip(java.lang.String, java.lang.String)", "public static java.lang.String strip(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripStart(java.lang.String, java.lang.String)", "public static java.lang.String stripStart(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripEnd(java.lang.String, java.lang.String)", "public static java.lang.String stripEnd(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripAll(java.lang.String[])", "public static java.lang.String[] stripAll(java.lang.String[])"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripAll(java.lang.String[], java.lang.String)", "public static java.lang.String[] stripAll(java.lang.String[], java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.equals(java.lang.String, java.lang.String)", "public static boolean equals(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.equalsIgnoreCase(java.lang.String, java.lang.String)", "public static boolean equalsIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, char)", "public static int indexOf(java.lang.String, char)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, char, int)", "public static int indexOf(java.lang.String, char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, java.lang.String)", "public static int indexOf(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.ordinalIndexOf(java.lang.String, java.lang.String, int)", "public static int ordinalIndexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, java.lang.String, int)", "public static int indexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfIgnoreCase(java.lang.String, java.lang.String)", "public static int indexOfIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfIgnoreCase(java.lang.String, java.lang.String, int)", "public static int indexOfIgnoreCase(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, char)", "public static int lastIndexOf(java.lang.String, char)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, char, int)", "public static int lastIndexOf(java.lang.String, char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, java.lang.String)", "public static int lastIndexOf(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastOrdinalIndexOf(java.lang.String, java.lang.String, int)", "public static int lastOrdinalIndexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, java.lang.String, int)", "public static int lastIndexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOfIgnoreCase(java.lang.String, java.lang.String)", "public static int lastIndexOfIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOfIgnoreCase(java.lang.String, java.lang.String, int)", "public static int lastIndexOfIgnoreCase(java.lang.String, java.lang.String, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.contains(java.lang.String, char)", "public static boolean contains(java.lang.String, char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.contains(java.lang.String, java.lang.String)", "public static boolean contains(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsIgnoreCase(java.lang.String, java.lang.String)", "public static boolean containsIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAny(java.lang.String, char[])", "public static int indexOfAny(java.lang.String, char[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAny(java.lang.String, java.lang.String)", "public static int indexOfAny(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsAny(java.lang.String, char[])", "public static boolean containsAny(java.lang.String, char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsAny(java.lang.String, java.lang.String)", "public static boolean containsAny(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAnyBut(java.lang.String, char[])", "public static int indexOfAnyBut(java.lang.String, char[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAnyBut(java.lang.String, java.lang.String)", "public static int indexOfAnyBut(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsOnly(java.lang.String, char[])", "public static boolean containsOnly(java.lang.String, char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsOnly(java.lang.String, java.lang.String)", "public static boolean containsOnly(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsNone(java.lang.String, char[])", "public static boolean containsNone(java.lang.String, char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsNone(java.lang.String, java.lang.String)", "public static boolean containsNone(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAny(java.lang.String, java.lang.String[])", "public static int indexOfAny(java.lang.String, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOfAny(java.lang.String, java.lang.String[])", "public static int lastIndexOfAny(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substring(java.lang.String, int)", "public static java.lang.String substring(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substring(java.lang.String, int, int)", "public static java.lang.String substring(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.left(java.lang.String, int)", "public static java.lang.String left(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.right(java.lang.String, int)", "public static java.lang.String right(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.mid(java.lang.String, int, int)", "public static java.lang.String mid(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBefore(java.lang.String, java.lang.String)", "public static java.lang.String substringBefore(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringAfter(java.lang.String, java.lang.String)", "public static java.lang.String substringAfter(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBeforeLast(java.lang.String, java.lang.String)", "public static java.lang.String substringBeforeLast(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringAfterLast(java.lang.String, java.lang.String)", "public static java.lang.String substringAfterLast(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBetween(java.lang.String, java.lang.String)", "public static java.lang.String substringBetween(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String substringBetween(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String[] substringsBetween(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getNestedString(java.lang.String, java.lang.String)", "public static java.lang.String getNestedString(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getNestedString(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String getNestedString(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String)", "public static java.lang.String[] split(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String, char)", "public static java.lang.String[] split(java.lang.String, char)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String, java.lang.String)", "public static java.lang.String[] split(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String, java.lang.String, int)", "public static java.lang.String[] split(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String)", "public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String, int)", "public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String)", "public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int)", "public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String)", "public static java.lang.String[] splitPreserveAllTokens(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, char)", "public static java.lang.String[] splitPreserveAllTokens(java.lang.String, char)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String)", "public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String, int)", "public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByCharacterType(java.lang.String)", "public static java.lang.String[] splitByCharacterType(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByCharacterTypeCamelCase(java.lang.String)", "public static java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.concatenate(java.lang.Object[])", "public static java.lang.String concatenate(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[])", "public static java.lang.String join(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], char)", "public static java.lang.String join(java.lang.Object[], char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], char, int, int)", "public static java.lang.String join(java.lang.Object[], char, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], java.lang.String)", "public static java.lang.String join(java.lang.Object[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], java.lang.String, int, int)", "public static java.lang.String join(java.lang.Object[], java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Iterator, char)", "public static java.lang.String join(java.util.Iterator, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Iterator, java.lang.String)", "public static java.lang.String join(java.util.Iterator, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Collection, char)", "public static java.lang.String join(java.util.Collection, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Collection, java.lang.String)", "public static java.lang.String join(java.util.Collection, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.deleteSpaces(java.lang.String)", "public static java.lang.String deleteSpaces(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.deleteWhitespace(java.lang.String)", "public static java.lang.String deleteWhitespace(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeStart(java.lang.String, java.lang.String)", "public static java.lang.String removeStart(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeStartIgnoreCase(java.lang.String, java.lang.String)", "public static java.lang.String removeStartIgnoreCase(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeEnd(java.lang.String, java.lang.String)", "public static java.lang.String removeEnd(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeEndIgnoreCase(java.lang.String, java.lang.String)", "public static java.lang.String removeEndIgnoreCase(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.remove(java.lang.String, java.lang.String)", "public static java.lang.String remove(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.remove(java.lang.String, char)", "public static java.lang.String remove(java.lang.String, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String replaceOnce(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int)", "public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[])", "public static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[])", "public static java.lang.String replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceChars(java.lang.String, char, char)", "public static java.lang.String replaceChars(java.lang.String, char, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String replaceChars(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.overlayString(java.lang.String, java.lang.String, int, int)", "public static java.lang.String overlayString(java.lang.String, java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.overlay(java.lang.String, java.lang.String, int, int)", "public static java.lang.String overlay(java.lang.String, java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chomp(java.lang.String)", "public static java.lang.String chomp(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chomp(java.lang.String, java.lang.String)", "public static java.lang.String chomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chompLast(java.lang.String)", "public static java.lang.String chompLast(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chompLast(java.lang.String, java.lang.String)", "public static java.lang.String chompLast(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getChomp(java.lang.String, java.lang.String)", "public static java.lang.String getChomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.prechomp(java.lang.String, java.lang.String)", "public static java.lang.String prechomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getPrechomp(java.lang.String, java.lang.String)", "public static java.lang.String getPrechomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chop(java.lang.String)", "public static java.lang.String chop(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chopNewline(java.lang.String)", "public static java.lang.String chopNewline(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.escape(java.lang.String)", "public static java.lang.String escape(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.repeat(java.lang.String, int)", "public static java.lang.String repeat(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.repeat(java.lang.String, java.lang.String, int)", "public static java.lang.String repeat(java.lang.String, java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.rightPad(java.lang.String, int)", "public static java.lang.String rightPad(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.rightPad(java.lang.String, int, char)", "public static java.lang.String rightPad(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.rightPad(java.lang.String, int, java.lang.String)", "public static java.lang.String rightPad(java.lang.String, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.leftPad(java.lang.String, int)", "public static java.lang.String leftPad(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.leftPad(java.lang.String, int, char)", "public static java.lang.String leftPad(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.leftPad(java.lang.String, int, java.lang.String)", "public static java.lang.String leftPad(java.lang.String, int, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.length(java.lang.String)", "public static int length(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.center(java.lang.String, int)", "public static java.lang.String center(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.center(java.lang.String, int, char)", "public static java.lang.String center(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.center(java.lang.String, int, java.lang.String)", "public static java.lang.String center(java.lang.String, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.upperCase(java.lang.String)", "public static java.lang.String upperCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.upperCase(java.lang.String, java.util.Locale)", "public static java.lang.String upperCase(java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.lowerCase(java.lang.String)", "public static java.lang.String lowerCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.lowerCase(java.lang.String, java.util.Locale)", "public static java.lang.String lowerCase(java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.capitalize(java.lang.String)", "public static java.lang.String capitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.capitalise(java.lang.String)", "public static java.lang.String capitalise(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.uncapitalize(java.lang.String)", "public static java.lang.String uncapitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.uncapitalise(java.lang.String)", "public static java.lang.String uncapitalise(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.swapCase(java.lang.String)", "public static java.lang.String swapCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.capitaliseAllWords(java.lang.String)", "public static java.lang.String capitaliseAllWords(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.countMatches(java.lang.String, java.lang.String)", "public static int countMatches(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlpha(java.lang.String)", "public static boolean isAlpha(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlphaSpace(java.lang.String)", "public static boolean isAlphaSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlphanumeric(java.lang.String)", "public static boolean isAlphanumeric(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlphanumericSpace(java.lang.String)", "public static boolean isAlphanumericSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAsciiPrintable(java.lang.String)", "public static boolean isAsciiPrintable(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNumeric(java.lang.String)", "public static boolean isNumeric(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNumericSpace(java.lang.String)", "public static boolean isNumericSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isWhitespace(java.lang.String)", "public static boolean isWhitespace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAllLowerCase(java.lang.String)", "public static boolean isAllLowerCase(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAllUpperCase(java.lang.String)", "public static boolean isAllUpperCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultString(java.lang.String)", "public static java.lang.String defaultString(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultString(java.lang.String, java.lang.String)", "public static java.lang.String defaultString(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultIfBlank(java.lang.String, java.lang.String)", "public static java.lang.String defaultIfBlank(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultIfEmpty(java.lang.String, java.lang.String)", "public static java.lang.String defaultIfEmpty(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.reverse(java.lang.String)", "public static java.lang.String reverse(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.reverseDelimited(java.lang.String, char)", "public static java.lang.String reverseDelimited(java.lang.String, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.reverseDelimitedString(java.lang.String, java.lang.String)", "public static java.lang.String reverseDelimitedString(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.abbreviate(java.lang.String, int)", "public static java.lang.String abbreviate(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.abbreviate(java.lang.String, int, int)", "public static java.lang.String abbreviate(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int)", "public static java.lang.String abbreviateMiddle(java.lang.String, java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.difference(java.lang.String, java.lang.String)", "public static java.lang.String difference(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfDifference(java.lang.String, java.lang.String)", "public static int indexOfDifference(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfDifference(java.lang.String[])", "public static int indexOfDifference(java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getCommonPrefix(java.lang.String[])", "public static java.lang.String getCommonPrefix(java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.getLevenshteinDistance(java.lang.String, java.lang.String)", "public static int getLevenshteinDistance(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.startsWith(java.lang.String, java.lang.String)", "public static boolean startsWith(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.startsWithIgnoreCase(java.lang.String, java.lang.String)", "public static boolean startsWithIgnoreCase(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.startsWithAny(java.lang.String, java.lang.String[])", "public static boolean startsWithAny(java.lang.String, java.lang.String[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.endsWith(java.lang.String, java.lang.String)", "public static boolean endsWith(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.endsWithIgnoreCase(java.lang.String, java.lang.String)", "public static boolean endsWithIgnoreCase(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.normalizeSpace(java.lang.String)", "public static java.lang.String normalizeSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.endsWithAny(java.lang.String, java.lang.String[])", "public static boolean endsWithAny(java.lang.String, java.lang.String[])"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getJavaHome()", "public static java.io.File getJavaHome()"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getJavaIoTmpDir()", "public static java.io.File getJavaIoTmpDir()"], ["float", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getJavaVersion()", "public static float getJavaVersion()"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getUserDir()", "public static java.io.File getUserDir()"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getUserHome()", "public static java.io.File getUserHome()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.SystemUtils.isJavaAwtHeadless()", "public static boolean isJavaAwtHeadless()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.SystemUtils.isJavaVersionAtLeast(float)", "public static boolean isJavaVersionAtLeast(float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.SystemUtils.isJavaVersionAtLeast(int)", "public static boolean isJavaVersionAtLeast(int)"], ["org.sonar.api.internal.apachecommons.lang.SystemUtils", "org.sonar.api.internal.apachecommons.lang.SystemUtils()", "public org.sonar.api.internal.apachecommons.lang.SystemUtils()"], ["org.sonar.api.internal.apachecommons.lang.text.CompositeFormat", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat(java.text.Format, java.text.Format)", "public org.sonar.api.internal.apachecommons.lang.text.CompositeFormat(java.text.Format, java.text.Format)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)", "public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.parseObject(java.lang.String, java.text.ParsePosition)", "public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)"], ["java.text.Format", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.getParser()", "public java.text.Format getParser()"], ["java.text.Format", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.getFormatter()", "public java.text.Format getFormatter()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.reformat(java.lang.String)", "public java.lang.String reformat(java.lang.String) throws java.text.ParseException"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Locale)", "public org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Map)", "public org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Map)"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Locale, java.util.Map)", "public org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Locale, java.util.Map)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.toPattern()", "public java.lang.String toPattern()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.applyPattern(java.lang.String)", "public final void applyPattern(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormat(int, java.text.Format)", "public void setFormat(int, java.text.Format)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, java.text.Format)", "public void setFormatByArgumentIndex(int, java.text.Format)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormats(java.text.Format[])", "public void setFormats(java.text.Format[])"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormatsByArgumentIndex(java.text.Format[])", "public void setFormatsByArgumentIndex(java.text.Format[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.hashCode()", "public int hashCode()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.close()", "public void close()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.read()", "public int read()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.read(char[], int, int)", "public int read(char[], int, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.skip(long)", "public long skip(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.ready()", "public boolean ready()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.markSupported()", "public boolean markSupported()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.mark(int)", "public void mark(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.reset()", "public void reset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderTokenizer.getContent()", "public java.lang.String getContent()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.close()", "public void close()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.flush()", "public void flush()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(int)", "public void write(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(char[])", "public void write(char[])"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder()", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder(int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getNewLineText()", "public java.lang.String getNewLineText()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setNewLineText(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder setNewLineText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getNullText()", "public java.lang.String getNullText()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setNullText(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder setNullText(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.length()", "public int length()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setLength(int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder setLength(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.capacity()", "public int capacity()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.ensureCapacity(int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder ensureCapacity(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.minimizeCapacity()", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder minimizeCapacity()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.size()", "public int size()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.isEmpty()", "public boolean isEmpty()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.clear()", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder clear()"], ["char", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.charAt(int)", "public char charAt(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setCharAt(int, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder setCharAt(int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteCharAt(int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder deleteCharAt(int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toCharArray()", "public char[] toCharArray()"], ["char[]", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toCharArray(int, int)", "public char[] toCharArray(int, int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getChars(char[])", "public char[] getChars(char[])"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getChars(int, int, char[], int)", "public void getChars(int, int, char[], int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendNewLine()", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendNewLine()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendNull()", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendNull()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.String, int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(java.lang.String, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.StringBuffer)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.StringBuffer, int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(java.lang.StringBuffer, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(char[])", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(char[], int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(char[], int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(boolean)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(long)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(long)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(float)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(float)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(double)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder append(double)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.String, int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(java.lang.String, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.StringBuffer)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.StringBuffer, int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(java.lang.StringBuffer, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(char[])", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(char[], int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(char[], int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(boolean)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(long)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(long)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(float)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(float)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(double)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendln(double)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendAll(java.lang.Object[])", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendAll(java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendAll(java.util.Collection)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendAll(java.util.Collection)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendAll(java.util.Iterator)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendAll(java.util.Iterator)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendWithSeparators(java.lang.Object[], java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendWithSeparators(java.util.Collection, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendWithSeparators(java.util.Collection, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendWithSeparators(java.util.Iterator, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendWithSeparators(java.util.Iterator, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendSeparator(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendSeparator(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendSeparator(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(char, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendSeparator(char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(java.lang.String, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendSeparator(java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(char, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendSeparator(char, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendPadding(int, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendPadding(int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendFixedWidthPadLeft(int, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendFixedWidthPadRight(java.lang.Object, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadRight(int, int, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder appendFixedWidthPadRight(int, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, char[])", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, char[], int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, char[], int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, boolean)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, long)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, long)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, float)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, float)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, double)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder insert(int, double)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.delete(int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder delete(int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteAll(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder deleteAll(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteFirst(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder deleteFirst(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteAll(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder deleteAll(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteFirst(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder deleteFirst(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteAll(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder deleteAll(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteFirst(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder deleteFirst(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replace(int, int, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replace(int, int, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceAll(char, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replaceAll(char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceFirst(char, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replaceFirst(char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceAll(java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replaceAll(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceFirst(java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replaceFirst(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceAll(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replaceAll(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceFirst(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replaceFirst(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replace(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String, int, int, int)", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder replace(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String, int, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.reverse()", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder reverse()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.trim()", "public org.sonar.api.internal.apachecommons.lang.text.StrBuilder trim()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.startsWith(java.lang.String)", "public boolean startsWith(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.endsWith(java.lang.String)", "public boolean endsWith(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.substring(int)", "public java.lang.String substring(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.substring(int, int)", "public java.lang.String substring(int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.leftString(int)", "public java.lang.String leftString(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.rightString(int)", "public java.lang.String rightString(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.midString(int, int)", "public java.lang.String midString(int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.contains(char)", "public boolean contains(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.contains(java.lang.String)", "public boolean contains(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.contains(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public boolean contains(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(char)", "public int indexOf(char)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(char, int)", "public int indexOf(char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(java.lang.String)", "public int indexOf(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(java.lang.String, int)", "public int indexOf(java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public int indexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, int)", "public int indexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(char)", "public int lastIndexOf(char)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(char, int)", "public int lastIndexOf(char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(java.lang.String)", "public int lastIndexOf(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(java.lang.String, int)", "public int lastIndexOf(java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public int lastIndexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, int)", "public int lastIndexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.asTokenizer()", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer asTokenizer()"], ["java.io.Reader", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.asReader()", "public java.io.Reader asReader()"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.asWriter()", "public java.io.Writer asWriter()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.equalsIgnoreCase(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)", "public boolean equalsIgnoreCase(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.equals(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)", "public boolean equals(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toString()", "public java.lang.String toString()"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toStringBuffer()", "public java.lang.StringBuffer toStringBuffer()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrLookup$MapStrLookup.lookup(java.lang.String)", "public java.lang.String lookup(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrLookup.noneLookup()", "public static org.sonar.api.internal.apachecommons.lang.text.StrLookup noneLookup()"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrLookup.systemPropertiesLookup()", "public static org.sonar.api.internal.apachecommons.lang.text.StrLookup systemPropertiesLookup()"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrLookup.mapLookup(java.util.Map)", "public static org.sonar.api.internal.apachecommons.lang.text.StrLookup mapLookup(java.util.Map)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$CharMatcher.isMatch(char[], int, int, int)", "public int isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$CharSetMatcher.isMatch(char[], int, int, int)", "public int isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$NoMatcher.isMatch(char[], int, int, int)", "public int isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int)", "public int isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$TrimMatcher.isMatch(char[], int, int, int)", "public int isMatch(char[], int, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.commaMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher commaMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.tabMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher tabMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.spaceMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher spaceMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.splitMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher splitMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.trimMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher trimMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.singleQuoteMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher singleQuoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.doubleQuoteMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher doubleQuoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.quoteMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher quoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.noneMatcher()", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher noneMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.charMatcher(char)", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher charMatcher(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.charSetMatcher(char[])", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher charSetMatcher(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.charSetMatcher(java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher charSetMatcher(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.stringMatcher(java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.text.StrMatcher stringMatcher(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.isMatch(char[], int)", "public int isMatch(char[], int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Map)", "public static java.lang.String replace(java.lang.Object, java.util.Map)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Map, java.lang.String, java.lang.String)", "public static java.lang.String replace(java.lang.Object, java.util.Map, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Properties)", "public static java.lang.String replace(java.lang.Object, java.util.Properties)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceSystemProperties(java.lang.Object)", "public static java.lang.String replaceSystemProperties(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor()", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor()"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup, java.lang.String, java.lang.String, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup, java.lang.String, java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.String)", "public java.lang.String replace(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.String, int, int)", "public java.lang.String replace(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(char[])", "public java.lang.String replace(char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(char[], int, int)", "public java.lang.String replace(char[], int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.StringBuffer)", "public java.lang.String replace(java.lang.StringBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.StringBuffer, int, int)", "public java.lang.String replace(java.lang.StringBuffer, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)", "public java.lang.String replace(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)", "public java.lang.String replace(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object)", "public java.lang.String replace(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(java.lang.StringBuffer)", "public boolean replaceIn(java.lang.StringBuffer)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(java.lang.StringBuffer, int, int)", "public boolean replaceIn(java.lang.StringBuffer, int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)", "public boolean replaceIn(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)", "public boolean replaceIn(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["char", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getEscapeChar()", "public char getEscapeChar()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setEscapeChar(char)", "public void setEscapeChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getVariablePrefixMatcher()", "public org.sonar.api.internal.apachecommons.lang.text.StrMatcher getVariablePrefixMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariablePrefixMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor setVariablePrefixMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariablePrefix(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor setVariablePrefix(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariablePrefix(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor setVariablePrefix(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getVariableSuffixMatcher()", "public org.sonar.api.internal.apachecommons.lang.text.StrMatcher getVariableSuffixMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableSuffixMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor setVariableSuffixMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableSuffix(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor setVariableSuffix(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableSuffix(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor setVariableSuffix(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getVariableResolver()", "public org.sonar.api.internal.apachecommons.lang.text.StrLookup getVariableResolver()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableResolver(org.sonar.api.internal.apachecommons.lang.text.StrLookup)", "public void setVariableResolver(org.sonar.api.internal.apachecommons.lang.text.StrLookup)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.isEnableSubstitutionInVariables()", "public boolean isEnableSubstitutionInVariables()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)", "public void setEnableSubstitutionInVariables(boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getCSVInstance()", "public static org.sonar.api.internal.apachecommons.lang.text.StrTokenizer getCSVInstance()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getCSVInstance(java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.text.StrTokenizer getCSVInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getCSVInstance(char[])", "public static org.sonar.api.internal.apachecommons.lang.text.StrTokenizer getCSVInstance(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTSVInstance()", "public static org.sonar.api.internal.apachecommons.lang.text.StrTokenizer getTSVInstance()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTSVInstance(java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.text.StrTokenizer getTSVInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTSVInstance(char[])", "public static org.sonar.api.internal.apachecommons.lang.text.StrTokenizer getTSVInstance(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer()", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, char, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[])", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], char)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], char, char)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.size()", "public int size()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.nextToken()", "public java.lang.String nextToken()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.previousToken()", "public java.lang.String previousToken()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTokenArray()", "public java.lang.String[] getTokenArray()"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTokenList()", "public java.util.List getTokenList()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.reset()", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer reset()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.reset(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer reset(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.reset(char[])", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer reset(char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.next()", "public java.lang.Object next()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.nextIndex()", "public int nextIndex()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.hasPrevious()", "public boolean hasPrevious()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.previous()", "public java.lang.Object previous()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.previousIndex()", "public int previousIndex()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.remove()", "public void remove()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.set(java.lang.Object)", "public void set(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.add(java.lang.Object)", "public void add(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getDelimiterMatcher()", "public org.sonar.api.internal.apachecommons.lang.text.StrMatcher getDelimiterMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setDelimiterMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setDelimiterMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setDelimiterChar(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setDelimiterChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setDelimiterString(java.lang.String)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setDelimiterString(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getQuoteMatcher()", "public org.sonar.api.internal.apachecommons.lang.text.StrMatcher getQuoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setQuoteMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setQuoteMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setQuoteChar(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setQuoteChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getIgnoredMatcher()", "public org.sonar.api.internal.apachecommons.lang.text.StrMatcher getIgnoredMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setIgnoredMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setIgnoredMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setIgnoredChar(char)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setIgnoredChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTrimmerMatcher()", "public org.sonar.api.internal.apachecommons.lang.text.StrMatcher getTrimmerMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setTrimmerMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setTrimmerMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.isEmptyTokenAsNull()", "public boolean isEmptyTokenAsNull()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setEmptyTokenAsNull(boolean)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setEmptyTokenAsNull(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.isIgnoreEmptyTokens()", "public boolean isIgnoreEmptyTokens()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setIgnoreEmptyTokens(boolean)", "public org.sonar.api.internal.apachecommons.lang.text.StrTokenizer setIgnoreEmptyTokens(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getContent()", "public java.lang.String getContent()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.clone()", "public java.lang.Object clone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils()", "public org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(long, java.lang.String)", "public static java.lang.String formatUTC(long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String)", "public static java.lang.String formatUTC(java.util.Date, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(long, java.lang.String, java.util.Locale)", "public static java.lang.String formatUTC(long, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String, java.util.Locale)", "public static java.lang.String formatUTC(java.util.Date, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String)", "public static java.lang.String format(long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String)", "public static java.lang.String format(java.util.Date, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String)", "public static java.lang.String format(java.util.Calendar, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone)", "public static java.lang.String format(long, java.lang.String, java.util.TimeZone)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone)", "public static java.lang.String format(java.util.Date, java.lang.String, java.util.TimeZone)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.TimeZone)", "public static java.lang.String format(java.util.Calendar, java.lang.String, java.util.TimeZone)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.Locale)", "public static java.lang.String format(long, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.Locale)", "public static java.lang.String format(java.util.Date, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.Locale)", "public static java.lang.String format(java.util.Calendar, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone, java.util.Locale)", "public static java.lang.String format(long, java.lang.String, java.util.TimeZone, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone, java.util.Locale)", "public static java.lang.String format(java.util.Date, java.lang.String, java.util.TimeZone, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.TimeZone, java.util.Locale)", "public static java.lang.String format(java.util.Calendar, java.lang.String, java.util.TimeZone, java.util.Locale)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils$DateIterator.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.time.DateUtils$DateIterator.next()", "public java.lang.Object next()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.DateUtils$DateIterator.remove()", "public void remove()"], ["org.sonar.api.internal.apachecommons.lang.time.DateUtils", "org.sonar.api.internal.apachecommons.lang.time.DateUtils()", "public org.sonar.api.internal.apachecommons.lang.time.DateUtils()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameDay(java.util.Date, java.util.Date)", "public static boolean isSameDay(java.util.Date, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar)", "public static boolean isSameDay(java.util.Calendar, java.util.Calendar)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameInstant(java.util.Date, java.util.Date)", "public static boolean isSameInstant(java.util.Date, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar)", "public static boolean isSameInstant(java.util.Calendar, java.util.Calendar)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar)", "public static boolean isSameLocalTime(java.util.Calendar, java.util.Calendar)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.parseDate(java.lang.String, java.lang.String[])", "public static java.util.Date parseDate(java.lang.String, java.lang.String[]) throws java.text.ParseException"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.parseDateStrictly(java.lang.String, java.lang.String[])", "public static java.util.Date parseDateStrictly(java.lang.String, java.lang.String[]) throws java.text.ParseException"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addYears(java.util.Date, int)", "public static java.util.Date addYears(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addMonths(java.util.Date, int)", "public static java.util.Date addMonths(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addWeeks(java.util.Date, int)", "public static java.util.Date addWeeks(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addDays(java.util.Date, int)", "public static java.util.Date addDays(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addHours(java.util.Date, int)", "public static java.util.Date addHours(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addMinutes(java.util.Date, int)", "public static java.util.Date addMinutes(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addSeconds(java.util.Date, int)", "public static java.util.Date addSeconds(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addMilliseconds(java.util.Date, int)", "public static java.util.Date addMilliseconds(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.add(java.util.Date, int, int)", "public static java.util.Date add(java.util.Date, int, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setYears(java.util.Date, int)", "public static java.util.Date setYears(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setMonths(java.util.Date, int)", "public static java.util.Date setMonths(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setDays(java.util.Date, int)", "public static java.util.Date setDays(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setHours(java.util.Date, int)", "public static java.util.Date setHours(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setMinutes(java.util.Date, int)", "public static java.util.Date setMinutes(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setSeconds(java.util.Date, int)", "public static java.util.Date setSeconds(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setMilliseconds(java.util.Date, int)", "public static java.util.Date setMilliseconds(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.toCalendar(java.util.Date)", "public static java.util.Calendar toCalendar(java.util.Date)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.round(java.util.Date, int)", "public static java.util.Date round(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.round(java.util.Calendar, int)", "public static java.util.Calendar round(java.util.Calendar, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.round(java.lang.Object, int)", "public static java.util.Date round(java.lang.Object, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncate(java.util.Date, int)", "public static java.util.Date truncate(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncate(java.util.Calendar, int)", "public static java.util.Calendar truncate(java.util.Calendar, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncate(java.lang.Object, int)", "public static java.util.Date truncate(java.lang.Object, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.ceiling(java.util.Date, int)", "public static java.util.Date ceiling(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.ceiling(java.util.Calendar, int)", "public static java.util.Calendar ceiling(java.util.Calendar, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.ceiling(java.lang.Object, int)", "public static java.util.Date ceiling(java.lang.Object, int)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.iterator(java.util.Date, int)", "public static java.util.Iterator iterator(java.util.Date, int)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.iterator(java.util.Calendar, int)", "public static java.util.Iterator iterator(java.util.Calendar, int)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.iterator(java.lang.Object, int)", "public static java.util.Iterator iterator(java.lang.Object, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMilliseconds(java.util.Date, int)", "public static long getFragmentInMilliseconds(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInSeconds(java.util.Date, int)", "public static long getFragmentInSeconds(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMinutes(java.util.Date, int)", "public static long getFragmentInMinutes(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInHours(java.util.Date, int)", "public static long getFragmentInHours(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInDays(java.util.Date, int)", "public static long getFragmentInDays(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMilliseconds(java.util.Calendar, int)", "public static long getFragmentInMilliseconds(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInSeconds(java.util.Calendar, int)", "public static long getFragmentInSeconds(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMinutes(java.util.Calendar, int)", "public static long getFragmentInMinutes(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInHours(java.util.Calendar, int)", "public static long getFragmentInHours(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInDays(java.util.Calendar, int)", "public static long getFragmentInDays(java.util.Calendar, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedEquals(java.util.Calendar, java.util.Calendar, int)", "public static boolean truncatedEquals(java.util.Calendar, java.util.Calendar, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedEquals(java.util.Date, java.util.Date, int)", "public static boolean truncatedEquals(java.util.Date, java.util.Date, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedCompareTo(java.util.Calendar, java.util.Calendar, int)", "public static int truncatedCompareTo(java.util.Calendar, java.util.Calendar, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedCompareTo(java.util.Date, java.util.Date, int)", "public static int truncatedCompareTo(java.util.Date, java.util.Date, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils$Token.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils$Token.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils$Token.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils()", "public org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDurationHMS(long)", "public static java.lang.String formatDurationHMS(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDurationISO(long)", "public static java.lang.String formatDurationISO(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDuration(long, java.lang.String)", "public static java.lang.String formatDuration(long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDuration(long, java.lang.String, boolean)", "public static java.lang.String formatDuration(long, java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDurationWords(long, boolean, boolean)", "public static java.lang.String formatDurationWords(long, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatPeriodISO(long, long)", "public static java.lang.String formatPeriodISO(long, long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String)", "public static java.lang.String formatPeriod(long, long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String, boolean, java.util.TimeZone)", "public static java.lang.String formatPeriod(long, long, java.lang.String, boolean, java.util.TimeZone)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$CharacterLiteral.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$PaddedNumberField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int)", "public final void appendTo(java.lang.StringBuffer, int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$StringLiteral.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$StringLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TextField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TextField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneDisplayKey.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneDisplayKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNameRule.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNameRule.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNumberRule.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwelveHourField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwelveHourField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwelveHourField.appendTo(java.lang.StringBuffer, int)", "public void appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwentyFourHourField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwentyFourHourField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwentyFourHourField.appendTo(java.lang.StringBuffer, int)", "public void appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitMonthField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int)", "public final void appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitNumberField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int)", "public final void appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitYearField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitYearField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitYearField.appendTo(java.lang.StringBuffer, int)", "public final void appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedMonthField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, int)", "public final void appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedNumberField.estimateLength()", "public int estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)", "public void appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, int)", "public final void appendTo(java.lang.StringBuffer, int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance()", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getInstance()"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance(java.lang.String)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.Locale)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)", "public static synchronized org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateInstance(int)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateInstance(int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateInstance(int, java.util.Locale)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateInstance(int, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateInstance(int, java.util.TimeZone)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone, java.util.Locale)", "public static synchronized org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeInstance(int)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getTimeInstance(int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeInstance(int, java.util.Locale)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getTimeInstance(int, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeInstance(int, java.util.TimeZone)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone, java.util.Locale)", "public static synchronized org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateTimeInstance(int, int)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateTimeInstance(int, int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.Locale)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.TimeZone)", "public static org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone, java.util.Locale)", "public static synchronized org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone, java.util.Locale)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)", "public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(long)", "public java.lang.String format(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Date)", "public java.lang.String format(java.util.Date)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Calendar)", "public java.lang.String format(java.util.Calendar)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(long, java.lang.StringBuffer)", "public java.lang.StringBuffer format(long, java.lang.StringBuffer)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Date, java.lang.StringBuffer)", "public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer)", "public java.lang.StringBuffer format(java.util.Calendar, java.lang.StringBuffer)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.parseObject(java.lang.String, java.text.ParsePosition)", "public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getPattern()", "public java.lang.String getPattern()"], ["java.util.TimeZone", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeZone()", "public java.util.TimeZone getTimeZone()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeZoneOverridesCalendar()", "public boolean getTimeZoneOverridesCalendar()"], ["java.util.Locale", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getLocale()", "public java.util.Locale getLocale()"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getMaxLengthEstimate()", "public int getMaxLengthEstimate()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.lang.time.StopWatch", "org.sonar.api.internal.apachecommons.lang.time.StopWatch()", "public org.sonar.api.internal.apachecommons.lang.time.StopWatch()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.start()", "public void start()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.stop()", "public void stop()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.reset()", "public void reset()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.split()", "public void split()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.unsplit()", "public void unsplit()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.suspend()", "public void suspend()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.resume()", "public void resume()"], ["long", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.getTime()", "public long getTime()"], ["long", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.getSplitTime()", "public long getSplitTime()"], ["long", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.getStartTime()", "public long getStartTime()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.toSplitString()", "public java.lang.String toSplitString()"], ["org.sonar.api.internal.apachecommons.lang.UnhandledException", "org.sonar.api.internal.apachecommons.lang.UnhandledException(java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.UnhandledException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.UnhandledException", "org.sonar.api.internal.apachecommons.lang.UnhandledException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.apachecommons.lang.UnhandledException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.Validate", "org.sonar.api.internal.apachecommons.lang.Validate()", "public org.sonar.api.internal.apachecommons.lang.Validate()"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String, java.lang.Object)", "public static void isTrue(boolean, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String, long)", "public static void isTrue(boolean, java.lang.String, long)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String, double)", "public static void isTrue(boolean, java.lang.String, double)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String)", "public static void isTrue(boolean, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean)", "public static void isTrue(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notNull(java.lang.Object)", "public static void notNull(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notNull(java.lang.Object, java.lang.String)", "public static void notNull(java.lang.Object, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.Object[], java.lang.String)", "public static void notEmpty(java.lang.Object[], java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.Object[])", "public static void notEmpty(java.lang.Object[])"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Collection, java.lang.String)", "public static void notEmpty(java.util.Collection, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Collection)", "public static void notEmpty(java.util.Collection)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Map, java.lang.String)", "public static void notEmpty(java.util.Map, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Map)", "public static void notEmpty(java.util.Map)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.String, java.lang.String)", "public static void notEmpty(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.String)", "public static void notEmpty(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.lang.Object[], java.lang.String)", "public static void noNullElements(java.lang.Object[], java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.lang.Object[])", "public static void noNullElements(java.lang.Object[])"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.util.Collection, java.lang.String)", "public static void noNullElements(java.util.Collection, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.util.Collection)", "public static void noNullElements(java.util.Collection)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.allElementsOfType(java.util.Collection, java.lang.Class, java.lang.String)", "public static void allElementsOfType(java.util.Collection, java.lang.Class, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.allElementsOfType(java.util.Collection, java.lang.Class)", "public static void allElementsOfType(java.util.Collection, java.lang.Class)"], ["org.sonar.api.internal.apachecommons.lang.WordUtils", "org.sonar.api.internal.apachecommons.lang.WordUtils()", "public org.sonar.api.internal.apachecommons.lang.WordUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.wrap(java.lang.String, int)", "public static java.lang.String wrap(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.wrap(java.lang.String, int, java.lang.String, boolean)", "public static java.lang.String wrap(java.lang.String, int, java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalize(java.lang.String)", "public static java.lang.String capitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalize(java.lang.String, char[])", "public static java.lang.String capitalize(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalizeFully(java.lang.String)", "public static java.lang.String capitalizeFully(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalizeFully(java.lang.String, char[])", "public static java.lang.String capitalizeFully(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.uncapitalize(java.lang.String)", "public static java.lang.String uncapitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.uncapitalize(java.lang.String, char[])", "public static java.lang.String uncapitalize(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.swapCase(java.lang.String)", "public static java.lang.String swapCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.initials(java.lang.String)", "public static java.lang.String initials(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.initials(java.lang.String, char[])", "public static java.lang.String initials(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.abbreviate(java.lang.String, int, int, java.lang.String)", "public static java.lang.String abbreviate(java.lang.String, int, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$5.translateName(java.lang.reflect.Field)", "public java.lang.String translateName(java.lang.reflect.Field)"], ["void", "org.sonar.api.internal.google.gson.Gson$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLongArray)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLongArray) throws java.io.IOException"], ["java.util.concurrent.atomic.AtomicLongArray", "org.sonar.api.internal.google.gson.Gson$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.concurrent.atomic.AtomicLongArray read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.JsonStreamParser", "org.sonar.api.internal.google.gson.JsonStreamParser(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonStreamParser(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonStreamParser", "org.sonar.api.internal.google.gson.JsonStreamParser(java.io.Reader)", "public org.sonar.api.internal.google.gson.JsonStreamParser(java.io.Reader)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonStreamParser.next()", "public org.sonar.api.internal.google.gson.JsonElement next() throws org.sonar.api.internal.google.gson.JsonParseException"], ["boolean", "org.sonar.api.internal.google.gson.JsonStreamParser.hasNext()", "public boolean hasNext()"], ["void", "org.sonar.api.internal.google.gson.JsonStreamParser.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.JsonStreamParser.next()", "public java.lang.Object next()"], ["void", "org.sonar.api.internal.google.gson.Gson$FutureTypeAdapter.setDelegate(org.sonar.api.internal.google.gson.TypeAdapter<T>)", "public void setDelegate(org.sonar.api.internal.google.gson.TypeAdapter<T>)"], ["T", "org.sonar.api.internal.google.gson.Gson$FutureTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$FutureTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.Gson", "org.sonar.api.internal.google.gson.Gson()", "public org.sonar.api.internal.google.gson.Gson()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.Gson.newBuilder()", "public org.sonar.api.internal.google.gson.GsonBuilder newBuilder()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.Gson.excluder()", "public org.sonar.api.internal.google.gson.internal.Excluder excluder()"], ["org.sonar.api.internal.google.gson.FieldNamingStrategy", "org.sonar.api.internal.google.gson.Gson.fieldNamingStrategy()", "public org.sonar.api.internal.google.gson.FieldNamingStrategy fieldNamingStrategy()"], ["boolean", "org.sonar.api.internal.google.gson.Gson.serializeNulls()", "public boolean serializeNulls()"], ["boolean", "org.sonar.api.internal.google.gson.Gson.htmlSafe()", "public boolean htmlSafe()"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.Gson.getAdapter(org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> getAdapter(org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.Gson.getDelegateAdapter(org.sonar.api.internal.google.gson.TypeAdapterFactory, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> getDelegateAdapter(org.sonar.api.internal.google.gson.TypeAdapterFactory, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.Gson.getAdapter(java.lang.Class<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> getAdapter(java.lang.Class<T>)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.Gson.toJsonTree(java.lang.Object)", "public org.sonar.api.internal.google.gson.JsonElement toJsonTree(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type)", "public org.sonar.api.internal.google.gson.JsonElement toJsonTree(java.lang.Object, java.lang.reflect.Type)"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object)", "public java.lang.String toJson(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type)", "public java.lang.String toJson(java.lang.Object, java.lang.reflect.Type)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.Appendable)", "public void toJson(java.lang.Object, java.lang.Appendable) throws org.sonar.api.internal.google.gson.JsonIOException"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable)", "public void toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable) throws org.sonar.api.internal.google.gson.JsonIOException"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, org.sonar.api.internal.google.gson.stream.JsonWriter)", "public void toJson(java.lang.Object, java.lang.reflect.Type, org.sonar.api.internal.google.gson.stream.JsonWriter) throws org.sonar.api.internal.google.gson.JsonIOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toJson(org.sonar.api.internal.google.gson.JsonElement)", "public java.lang.String toJson(org.sonar.api.internal.google.gson.JsonElement)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.Appendable)", "public void toJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.Appendable) throws org.sonar.api.internal.google.gson.JsonIOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.Gson.newJsonWriter(java.io.Writer)", "public org.sonar.api.internal.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonReader", "org.sonar.api.internal.google.gson.Gson.newJsonReader(java.io.Reader)", "public org.sonar.api.internal.google.gson.stream.JsonReader newJsonReader(java.io.Reader)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(org.sonar.api.internal.google.gson.JsonElement, org.sonar.api.internal.google.gson.stream.JsonWriter)", "public void toJson(org.sonar.api.internal.google.gson.JsonElement, org.sonar.api.internal.google.gson.stream.JsonWriter) throws org.sonar.api.internal.google.gson.JsonIOException"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.lang.String, java.lang.Class<T>)", "public <T> T fromJson(java.lang.String, java.lang.Class<T>) throws org.sonar.api.internal.google.gson.JsonSyntaxException"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type)", "public <T> T fromJson(java.lang.String, java.lang.reflect.Type) throws org.sonar.api.internal.google.gson.JsonSyntaxException"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.io.Reader, java.lang.Class<T>)", "public <T> T fromJson(java.io.Reader, java.lang.Class<T>) throws org.sonar.api.internal.google.gson.JsonSyntaxException, org.sonar.api.internal.google.gson.JsonIOException"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.io.Reader, java.lang.reflect.Type)", "public <T> T fromJson(java.io.Reader, java.lang.reflect.Type) throws org.sonar.api.internal.google.gson.JsonIOException, org.sonar.api.internal.google.gson.JsonSyntaxException"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(org.sonar.api.internal.google.gson.stream.JsonReader, java.lang.reflect.Type)", "public <T> T fromJson(org.sonar.api.internal.google.gson.stream.JsonReader, java.lang.reflect.Type) throws org.sonar.api.internal.google.gson.JsonIOException, org.sonar.api.internal.google.gson.JsonSyntaxException"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.Class<T>)", "public <T> T fromJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.Class<T>) throws org.sonar.api.internal.google.gson.JsonSyntaxException"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.reflect.Type)", "public <T> T fromJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.reflect.Type) throws org.sonar.api.internal.google.gson.JsonSyntaxException"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toString()", "public java.lang.String toString()"], ["java.lang.Number", "org.sonar.api.internal.google.gson.Gson$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$3.translateName(java.lang.reflect.Field)", "public java.lang.String translateName(java.lang.reflect.Field)"], ["org.sonar.api.internal.google.gson.JsonNull", "org.sonar.api.internal.google.gson.JsonNull()", "public org.sonar.api.internal.google.gson.JsonNull()"], ["org.sonar.api.internal.google.gson.JsonNull", "org.sonar.api.internal.google.gson.JsonNull.deepCopy()", "public org.sonar.api.internal.google.gson.JsonNull deepCopy()"], ["int", "org.sonar.api.internal.google.gson.JsonNull.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.JsonNull.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonNull.deepCopy()", "public org.sonar.api.internal.google.gson.JsonElement deepCopy()"], ["org.sonar.api.internal.google.gson.util.VersionUtils", "org.sonar.api.internal.google.gson.util.VersionUtils()", "public org.sonar.api.internal.google.gson.util.VersionUtils()"], ["int", "org.sonar.api.internal.google.gson.util.VersionUtils.getMajorJavaVersion()", "public static int getMajorJavaVersion()"], ["boolean", "org.sonar.api.internal.google.gson.util.VersionUtils.isJava9OrLater()", "public static boolean isJava9OrLater()"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$1.translateName(java.lang.reflect.Field)", "public java.lang.String translateName(java.lang.reflect.Field)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonElement()", "public org.sonar.api.internal.google.gson.JsonElement()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonArray()", "public boolean isJsonArray()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonObject()", "public boolean isJsonObject()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonPrimitive()", "public boolean isJsonPrimitive()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonNull()", "public boolean isJsonNull()"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonObject()", "public org.sonar.api.internal.google.gson.JsonObject getAsJsonObject()"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonArray()", "public org.sonar.api.internal.google.gson.JsonArray getAsJsonArray()"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonPrimitive()", "public org.sonar.api.internal.google.gson.JsonPrimitive getAsJsonPrimitive()"], ["org.sonar.api.internal.google.gson.JsonNull", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonNull()", "public org.sonar.api.internal.google.gson.JsonNull getAsJsonNull()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.getAsBoolean()", "public boolean getAsBoolean()"], ["java.lang.Number", "org.sonar.api.internal.google.gson.JsonElement.getAsNumber()", "public java.lang.Number getAsNumber()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonElement.getAsString()", "public java.lang.String getAsString()"], ["double", "org.sonar.api.internal.google.gson.JsonElement.getAsDouble()", "public double getAsDouble()"], ["float", "org.sonar.api.internal.google.gson.JsonElement.getAsFloat()", "public float getAsFloat()"], ["long", "org.sonar.api.internal.google.gson.JsonElement.getAsLong()", "public long getAsLong()"], ["int", "org.sonar.api.internal.google.gson.JsonElement.getAsInt()", "public int getAsInt()"], ["byte", "org.sonar.api.internal.google.gson.JsonElement.getAsByte()", "public byte getAsByte()"], ["char", "org.sonar.api.internal.google.gson.JsonElement.getAsCharacter()", "public char getAsCharacter()"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.JsonElement.getAsBigDecimal()", "public java.math.BigDecimal getAsBigDecimal()"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.JsonElement.getAsBigInteger()", "public java.math.BigInteger getAsBigInteger()"], ["short", "org.sonar.api.internal.google.gson.JsonElement.getAsShort()", "public short getAsShort()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonElement.toString()", "public java.lang.String toString()"], ["java.lang.Double", "org.sonar.api.internal.google.gson.Gson$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Double read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$6.translateName(java.lang.reflect.Field)", "public java.lang.String translateName(java.lang.reflect.Field)"], ["void", "org.sonar.api.internal.google.gson.TypeAdapter$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T) throws java.io.IOException"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLong)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLong) throws java.io.IOException"], ["java.util.concurrent.atomic.AtomicLong", "org.sonar.api.internal.google.gson.Gson$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.concurrent.atomic.AtomicLong read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader$1.promoteNameToValue(org.sonar.api.internal.google.gson.stream.JsonReader)", "public void promoteNameToValue(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonReader", "org.sonar.api.internal.google.gson.stream.JsonReader(java.io.Reader)", "public org.sonar.api.internal.google.gson.stream.JsonReader(java.io.Reader)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.setLenient(boolean)", "public final void setLenient(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonReader.isLenient()", "public final boolean isLenient()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.beginArray()", "public void beginArray() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.endArray()", "public void endArray() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.beginObject()", "public void beginObject() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.endObject()", "public void endObject() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonReader.hasNext()", "public boolean hasNext() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonToken", "org.sonar.api.internal.google.gson.stream.JsonReader.peek()", "public org.sonar.api.internal.google.gson.stream.JsonToken peek() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.nextName()", "public java.lang.String nextName() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.nextString()", "public java.lang.String nextString() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonReader.nextBoolean()", "public boolean nextBoolean() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.nextNull()", "public void nextNull() throws java.io.IOException"], ["double", "org.sonar.api.internal.google.gson.stream.JsonReader.nextDouble()", "public double nextDouble() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.gson.stream.JsonReader.nextLong()", "public long nextLong() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.gson.stream.JsonReader.nextInt()", "public int nextInt() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.skipValue()", "public void skipValue() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.getPath()", "public java.lang.String getPath()"], ["org.sonar.api.internal.google.gson.stream.JsonToken[]", "org.sonar.api.internal.google.gson.stream.JsonToken.values()", "public static org.sonar.api.internal.google.gson.stream.JsonToken[] values()"], ["org.sonar.api.internal.google.gson.stream.JsonToken", "org.sonar.api.internal.google.gson.stream.JsonToken.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.gson.stream.JsonToken valueOf(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.MalformedJsonException", "org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.String)", "public org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.MalformedJsonException", "org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.stream.MalformedJsonException", "org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.Throwable)", "public org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter(java.io.Writer)", "public org.sonar.api.internal.google.gson.stream.JsonWriter(java.io.Writer)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setIndent(java.lang.String)", "public final void setIndent(java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setLenient(boolean)", "public final void setLenient(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonWriter.isLenient()", "public boolean isLenient()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setHtmlSafe(boolean)", "public final void setHtmlSafe(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonWriter.isHtmlSafe()", "public final boolean isHtmlSafe()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setSerializeNulls(boolean)", "public final void setSerializeNulls(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonWriter.getSerializeNulls()", "public final boolean getSerializeNulls()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.beginArray()", "public org.sonar.api.internal.google.gson.stream.JsonWriter beginArray() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.endArray()", "public org.sonar.api.internal.google.gson.stream.JsonWriter endArray() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.beginObject()", "public org.sonar.api.internal.google.gson.stream.JsonWriter beginObject() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.endObject()", "public org.sonar.api.internal.google.gson.stream.JsonWriter endObject() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.name(java.lang.String)", "public org.sonar.api.internal.google.gson.stream.JsonWriter name(java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(java.lang.String)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.jsonValue(java.lang.String)", "public org.sonar.api.internal.google.gson.stream.JsonWriter jsonValue(java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.nullValue()", "public org.sonar.api.internal.google.gson.stream.JsonWriter nullValue() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(boolean)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(boolean) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(java.lang.Boolean)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(java.lang.Boolean) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(double)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(double) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(long)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(long) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(java.lang.Number)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(java.lang.Number) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$4.translateName(java.lang.reflect.Field)", "public java.lang.String translateName(java.lang.reflect.Field)"], ["org.sonar.api.internal.google.gson.JsonIOException", "org.sonar.api.internal.google.gson.JsonIOException(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonIOException(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonIOException", "org.sonar.api.internal.google.gson.JsonIOException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.google.gson.JsonIOException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonIOException", "org.sonar.api.internal.google.gson.JsonIOException(java.lang.Throwable)", "public org.sonar.api.internal.google.gson.JsonIOException(java.lang.Throwable)"], ["java.lang.Class<? super T>", "org.sonar.api.internal.google.gson.reflect.TypeToken.getRawType()", "public final java.lang.Class<? super T> getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.reflect.TypeToken.getType()", "public final java.lang.reflect.Type getType()"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.Class<?>)", "public boolean isAssignableFrom(java.lang.Class<?>)"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type)", "public boolean isAssignableFrom(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.isAssignableFrom(org.sonar.api.internal.google.gson.reflect.TypeToken<?>)", "public boolean isAssignableFrom(org.sonar.api.internal.google.gson.reflect.TypeToken<?>)"], ["int", "org.sonar.api.internal.google.gson.reflect.TypeToken.hashCode()", "public final int hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.gson.reflect.TypeToken.toString()", "public final java.lang.String toString()"], ["org.sonar.api.internal.google.gson.reflect.TypeToken<?>", "org.sonar.api.internal.google.gson.reflect.TypeToken.get(java.lang.reflect.Type)", "public static org.sonar.api.internal.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type)"], ["<T> org.sonar.api.internal.google.gson.reflect.TypeToken<T>", "org.sonar.api.internal.google.gson.reflect.TypeToken.get(java.lang.Class<T>)", "public static <T> org.sonar.api.internal.google.gson.reflect.TypeToken<T> get(java.lang.Class<T>)"], ["org.sonar.api.internal.google.gson.reflect.TypeToken<?>", "org.sonar.api.internal.google.gson.reflect.TypeToken.getParameterized(java.lang.reflect.Type, java.lang.reflect.Type...)", "public static org.sonar.api.internal.google.gson.reflect.TypeToken<?> getParameterized(java.lang.reflect.Type, java.lang.reflect.Type...)"], ["org.sonar.api.internal.google.gson.reflect.TypeToken<?>", "org.sonar.api.internal.google.gson.reflect.TypeToken.getArray(java.lang.reflect.Type)", "public static org.sonar.api.internal.google.gson.reflect.TypeToken<?> getArray(java.lang.reflect.Type)"], ["org.sonar.api.internal.google.gson.TypeAdapter", "org.sonar.api.internal.google.gson.TypeAdapter()", "public org.sonar.api.internal.google.gson.TypeAdapter()"], ["void", "org.sonar.api.internal.google.gson.TypeAdapter.toJson(java.io.Writer, T)", "public final void toJson(java.io.Writer, T) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.TypeAdapter.nullSafe()", "public final org.sonar.api.internal.google.gson.TypeAdapter<T> nullSafe()"], ["java.lang.String", "org.sonar.api.internal.google.gson.TypeAdapter.toJson(T)", "public final java.lang.String toJson(T)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.TypeAdapter.toJsonTree(T)", "public final org.sonar.api.internal.google.gson.JsonElement toJsonTree(T)"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter.fromJson(java.io.Reader)", "public final T fromJson(java.io.Reader) throws java.io.IOException"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter.fromJson(java.lang.String)", "public final T fromJson(java.lang.String) throws java.io.IOException"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter.fromJsonTree(org.sonar.api.internal.google.gson.JsonElement)", "public final T fromJsonTree(org.sonar.api.internal.google.gson.JsonElement)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Boolean)", "public org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Boolean)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Number)", "public org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Number)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Character)", "public org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Character)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive.deepCopy()", "public org.sonar.api.internal.google.gson.JsonPrimitive deepCopy()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.isBoolean()", "public boolean isBoolean()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsBoolean()", "public boolean getAsBoolean()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.isNumber()", "public boolean isNumber()"], ["java.lang.Number", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsNumber()", "public java.lang.Number getAsNumber()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.isString()", "public boolean isString()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsString()", "public java.lang.String getAsString()"], ["double", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsDouble()", "public double getAsDouble()"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsBigDecimal()", "public java.math.BigDecimal getAsBigDecimal()"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsBigInteger()", "public java.math.BigInteger getAsBigInteger()"], ["float", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsFloat()", "public float getAsFloat()"], ["long", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsLong()", "public long getAsLong()"], ["short", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsShort()", "public short getAsShort()"], ["int", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsInt()", "public int getAsInt()"], ["byte", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsByte()", "public byte getAsByte()"], ["char", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsCharacter()", "public char getAsCharacter()"], ["int", "org.sonar.api.internal.google.gson.JsonPrimitive.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonPrimitive.deepCopy()", "public org.sonar.api.internal.google.gson.JsonElement deepCopy()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$1.construct()", "public T construct()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$3.construct()", "public T construct()"], ["int", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter$CurrentWrite.length()", "public int length()"], ["char", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter$CurrentWrite.charAt(int)", "public char charAt(int)"], ["java.lang.CharSequence", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter$CurrentWrite.subSequence(int, int)", "public java.lang.CharSequence subSequence(int, int)"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$7.construct()", "public T construct()"], ["T", "org.sonar.api.internal.google.gson.internal.Excluder$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.Excluder$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T) throws java.io.IOException"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$5.construct()", "public T construct()"], ["java.lang.reflect.ParameterizedType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type...)", "public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type...)"], ["java.lang.reflect.GenericArrayType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type)", "public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)"], ["java.lang.reflect.WildcardType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type)", "public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)"], ["java.lang.reflect.WildcardType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type)", "public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type)", "public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type)"], ["java.lang.Class<?>", "org.sonar.api.internal.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type)", "public static java.lang.Class<?> getRawType(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type)", "public static boolean equals(java.lang.reflect.Type, java.lang.reflect.Type)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type)", "public static java.lang.String typeToString(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.getArrayComponentType(java.lang.reflect.Type)", "public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.getCollectionElementType(java.lang.reflect.Type, java.lang.Class<?>)", "public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type, java.lang.Class<?>)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types.getMapKeyAndValueTypes(java.lang.reflect.Type, java.lang.Class<?>)", "public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type, java.lang.Class<?>)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type)", "public static java.lang.reflect.Type resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type)"], ["org.sonar.api.internal.google.gson.internal.ConstructorConstructor", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor(java.util.Map<java.lang.reflect.Type, org.sonar.api.internal.google.gson.InstanceCreator<?>>)", "public org.sonar.api.internal.google.gson.internal.ConstructorConstructor(java.util.Map<java.lang.reflect.Type, org.sonar.api.internal.google.gson.InstanceCreator<?>>)"], ["<T> org.sonar.api.internal.google.gson.internal.ObjectConstructor<T>", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor.get(org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.internal.ObjectConstructor<T> get(org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor.toString()", "public java.lang.String toString()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$2.construct()", "public T construct()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.size()", "public int size()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.clear()", "public void clear()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet$1.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$AvlIterator.next()", "public org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V> next()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.LazilyParsedNumber", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber(java.lang.String)", "public org.sonar.api.internal.google.gson.internal.LazilyParsedNumber(java.lang.String)"], ["int", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.doubleValue()", "public double doubleValue()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap()", "public org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap(java.util.Comparator<? super K>)", "public org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap(java.util.Comparator<? super K>)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.size()", "public int size()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.put(K, V)", "public V put(K, V)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.clear()", "public void clear()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.keySet()", "public java.util.Set<K> keySet()"], ["org.sonar.api.internal.google.gson.internal.JsonReaderInternalAccess", "org.sonar.api.internal.google.gson.internal.JsonReaderInternalAccess()", "public org.sonar.api.internal.google.gson.internal.JsonReaderInternalAccess()"], ["void", "org.sonar.api.internal.google.gson.internal.reflect.PreJava9ReflectionAccessor.makeAccessible(java.lang.reflect.AccessibleObject)", "public void makeAccessible(java.lang.reflect.AccessibleObject)"], ["void", "org.sonar.api.internal.google.gson.internal.reflect.UnsafeReflectionAccessor.makeAccessible(java.lang.reflect.AccessibleObject)", "public void makeAccessible(java.lang.reflect.AccessibleObject)"], ["org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor", "org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor()", "public org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor()"], ["org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor", "org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor.getInstance()", "public static org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor getInstance()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.size()", "public int size()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.clear()", "public void clear()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$4.construct()", "public T construct()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.hasNext()", "public final boolean hasNext()"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.remove()", "public final void remove()"], ["org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider", "org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider()", "public org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider()"], ["java.text.DateFormat", "org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider.getUSDateFormat(int)", "public static java.text.DateFormat getUSDateFormat(int)"], ["java.text.DateFormat", "org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider.getUSDateTimeFormat(int, int)", "public static java.text.DateFormat getUSDateTimeFormat(int, int)"], ["<T> T", "org.sonar.api.internal.google.gson.internal.$Gson$Preconditions.checkNotNull(T)", "public static <T> T checkNotNull(T)"], ["void", "org.sonar.api.internal.google.gson.internal.$Gson$Preconditions.checkArgument(boolean)", "public static void checkArgument(boolean)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.size()", "public int size()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.clear()", "public void clear()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$6.construct()", "public T construct()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.size()", "public int size()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.clear()", "public void clear()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.Streams.parse(org.sonar.api.internal.google.gson.stream.JsonReader)", "public static org.sonar.api.internal.google.gson.JsonElement parse(org.sonar.api.internal.google.gson.stream.JsonReader) throws org.sonar.api.internal.google.gson.JsonParseException"], ["void", "org.sonar.api.internal.google.gson.internal.Streams.write(org.sonar.api.internal.google.gson.JsonElement, org.sonar.api.internal.google.gson.stream.JsonWriter)", "public static void write(org.sonar.api.internal.google.gson.JsonElement, org.sonar.api.internal.google.gson.stream.JsonWriter) throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.google.gson.internal.Streams.writerForAppendable(java.lang.Appendable)", "public static java.io.Writer writerForAppendable(java.lang.Appendable)"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$12.construct()", "public T construct()"], ["org.sonar.api.internal.google.gson.internal.UnsafeAllocator", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator()", "public org.sonar.api.internal.google.gson.internal.UnsafeAllocator()"], ["org.sonar.api.internal.google.gson.internal.UnsafeAllocator", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator.create()", "public static org.sonar.api.internal.google.gson.internal.UnsafeAllocator create()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$10.construct()", "public T construct()"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$4.newInstance(java.lang.Class<T>)", "public <T> T newInstance(java.lang.Class<T>)"], ["org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type...)", "public org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type...)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getActualTypeArguments()", "public java.lang.reflect.Type[] getActualTypeArguments()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getRawType()", "public java.lang.reflect.Type getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getOwnerType()", "public java.lang.reflect.Type getOwnerType()"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.toString()", "public java.lang.String toString()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$8.construct()", "public T construct()"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.first()", "public org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V> first()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.last()", "public org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V> last()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$14.construct()", "public T construct()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap()", "public org.sonar.api.internal.google.gson.internal.LinkedTreeMap()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap(java.util.Comparator<? super K>)", "public org.sonar.api.internal.google.gson.internal.LinkedTreeMap(java.util.Comparator<? super K>)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.size()", "public int size()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.put(K, V)", "public V put(K, V)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.clear()", "public void clear()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.keySet()", "public java.util.Set<K> keySet()"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$2.newInstance(java.lang.Class<T>)", "public <T> T newInstance(java.lang.Class<T>) throws java.lang.Exception"], ["boolean", "org.sonar.api.internal.google.gson.internal.Primitives.isPrimitive(java.lang.reflect.Type)", "public static boolean isPrimitive(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.gson.internal.Primitives.isWrapperType(java.lang.reflect.Type)", "public static boolean isWrapperType(java.lang.reflect.Type)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.gson.internal.Primitives.wrap(java.lang.Class<T>)", "public static <T> java.lang.Class<T> wrap(java.lang.Class<T>)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.gson.internal.Primitives.unwrap(java.lang.Class<T>)", "public static <T> java.lang.Class<T> unwrap(java.lang.Class<T>)"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet$1.next()", "public K next()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$11.construct()", "public T construct()"], ["org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl(java.lang.reflect.Type)", "public org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.getGenericComponentType()", "public java.lang.reflect.Type getGenericComponentType()"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$9.construct()", "public T construct()"], ["org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl(java.lang.reflect.Type[], java.lang.reflect.Type[])", "public org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl(java.lang.reflect.Type[], java.lang.reflect.Type[])"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.getUpperBounds()", "public java.lang.reflect.Type[] getUpperBounds()"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.getLowerBounds()", "public java.lang.reflect.Type[] getLowerBounds()"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.toString()", "public java.lang.String toString()"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet$1.next()", "public K next()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$13.construct()", "public T construct()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.hasNext()", "public final boolean hasNext()"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.remove()", "public final void remove()"], ["org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter(org.sonar.api.internal.google.gson.JsonSerializer<T>, org.sonar.api.internal.google.gson.JsonDeserializer<T>, org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>, org.sonar.api.internal.google.gson.TypeAdapterFactory)", "public org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter(org.sonar.api.internal.google.gson.JsonSerializer<T>, org.sonar.api.internal.google.gson.JsonDeserializer<T>, org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>, org.sonar.api.internal.google.gson.TypeAdapterFactory)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.newFactory(org.sonar.api.internal.google.gson.reflect.TypeToken<?>, java.lang.Object)", "public static org.sonar.api.internal.google.gson.TypeAdapterFactory newFactory(org.sonar.api.internal.google.gson.reflect.TypeToken<?>, java.lang.Object)"], ["org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.newFactoryWithMatchRawType(org.sonar.api.internal.google.gson.reflect.TypeToken<?>, java.lang.Object)", "public static org.sonar.api.internal.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(org.sonar.api.internal.google.gson.reflect.TypeToken<?>, java.lang.Object)"], ["org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.newTypeHierarchyFactory(java.lang.Class<?>, java.lang.Object)", "public static org.sonar.api.internal.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?>, java.lang.Object)"], ["java.util.concurrent.atomic.AtomicInteger", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.concurrent.atomic.AtomicInteger read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicInteger)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicInteger) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.ObjectTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.ObjectTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor)", "public org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T1)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T1) throws java.io.IOException"], ["T1", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T1 read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.ObjectTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T2> org.sonar.api.internal.google.gson.TypeAdapter<T2>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T2>)", "public <T2> org.sonar.api.internal.google.gson.TypeAdapter<T2> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T2>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.writeField(java.lang.Object)", "public boolean writeField(java.lang.Object) throws java.io.IOException, java.lang.IllegalAccessException"], ["org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader(org.sonar.api.internal.google.gson.JsonElement)", "public org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader(org.sonar.api.internal.google.gson.JsonElement)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.beginArray()", "public void beginArray() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.endArray()", "public void endArray() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.beginObject()", "public void beginObject() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.endObject()", "public void endObject() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.hasNext()", "public boolean hasNext() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonToken", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.peek()", "public org.sonar.api.internal.google.gson.stream.JsonToken peek() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextName()", "public java.lang.String nextName() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextString()", "public java.lang.String nextString() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextBoolean()", "public boolean nextBoolean() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextNull()", "public void nextNull() throws java.io.IOException"], ["double", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextDouble()", "public double nextDouble() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextLong()", "public long nextLong() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextInt()", "public int nextInt() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.skipValue()", "public void skipValue() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.promoteNameToValue()", "public void promoteNameToValue() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.getPath()", "public java.lang.String getPath()"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$31.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter()", "public org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter()"], ["java.util.Date", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.Date read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Date)", "public synchronized void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Date) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.util.Locale", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.Locale read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Locale)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Locale) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.Character", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Character read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Character)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Character) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.math.BigDecimal read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.math.BigDecimal)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.math.BigDecimal) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils()", "public org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date)", "public static java.lang.String format(java.util.Date)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean)", "public static java.lang.String format(java.util.Date, boolean)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean, java.util.TimeZone)", "public static java.lang.String format(java.util.Date, boolean, java.util.TimeZone)"], ["java.util.Date", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition)", "public static java.util.Date parse(java.lang.String, java.text.ParsePosition) throws java.text.ParseException"], ["org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter(java.lang.Class<T>)", "public org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter(java.lang.Class<T>)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public T read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, T) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter()", "public org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter()"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.java.sql.Time read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public synchronized java.sql.Time read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Time)", "public synchronized void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Time) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$33.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$33.toString()", "public java.lang.String toString()"], ["java.util.concurrent.atomic.AtomicIntegerArray", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.concurrent.atomic.AtomicIntegerArray read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicIntegerArray)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicIntegerArray) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(java.lang.Object)", "public org.sonar.api.internal.google.gson.JsonElement serialize(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(java.lang.Object, java.lang.reflect.Type)", "public org.sonar.api.internal.google.gson.JsonElement serialize(java.lang.Object, java.lang.reflect.Type)"], ["<R> R", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.deserialize(org.sonar.api.internal.google.gson.JsonElement, java.lang.reflect.Type)", "public <R> R deserialize(org.sonar.api.internal.google.gson.JsonElement, java.lang.reflect.Type) throws org.sonar.api.internal.google.gson.JsonParseException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$34.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$34.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader$1.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader$1.close()", "public void close() throws java.io.IOException"], ["java.util.concurrent.atomic.AtomicBoolean", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.concurrent.atomic.AtomicBoolean read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicBoolean)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicBoolean) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.sql.Timestamp", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.sql.Timestamp read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Timestamp)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Timestamp) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.String read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.String)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.String) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$32.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$32.toString()", "public java.lang.String toString()"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$30.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public org.sonar.api.internal.google.gson.JsonElement read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.write(org.sonar.api.internal.google.gson.stream.JsonWriter, org.sonar.api.internal.google.gson.JsonElement)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, org.sonar.api.internal.google.gson.JsonElement) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.util.Currency", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.Currency read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Currency)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Currency) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor, org.sonar.api.internal.google.gson.FieldNamingStrategy, org.sonar.api.internal.google.gson.internal.Excluder, org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory)", "public org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor, org.sonar.api.internal.google.gson.FieldNamingStrategy, org.sonar.api.internal.google.gson.internal.Excluder, org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory)"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(java.lang.reflect.Field, boolean)", "public boolean excludeField(java.lang.reflect.Field, boolean)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.math.BigInteger read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.math.BigInteger)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.math.BigInteger) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.Boolean", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Boolean read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Boolean)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Boolean) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Class)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Class) throws java.io.IOException"], ["java.lang.Class", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Class read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter(org.sonar.api.internal.google.gson.Gson, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<K>, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<V>, org.sonar.api.internal.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>)", "public org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter(org.sonar.api.internal.google.gson.Gson, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<K>, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<V>, org.sonar.api.internal.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>)"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.Map<K, V> read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Map<K, V>)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Map<K, V>) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.util.Calendar", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.Calendar read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Calendar)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Calendar) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.net.InetAddress", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.net.InetAddress read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.InetAddress)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.InetAddress) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor)", "public org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.net.URL", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.net.URL read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.URL)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.URL) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor, boolean)", "public org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor, boolean)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactory(org.sonar.api.internal.google.gson.reflect.TypeToken<TT>, org.sonar.api.internal.google.gson.TypeAdapter<TT>)", "public static <TT> org.sonar.api.internal.google.gson.TypeAdapterFactory newFactory(org.sonar.api.internal.google.gson.reflect.TypeToken<TT>, org.sonar.api.internal.google.gson.TypeAdapter<TT>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class<TT>, org.sonar.api.internal.google.gson.TypeAdapter<TT>)", "public static <TT> org.sonar.api.internal.google.gson.TypeAdapterFactory newFactory(java.lang.Class<TT>, org.sonar.api.internal.google.gson.TypeAdapter<TT>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class<TT>, java.lang.Class<TT>, org.sonar.api.internal.google.gson.TypeAdapter<? super TT>)", "public static <TT> org.sonar.api.internal.google.gson.TypeAdapterFactory newFactory(java.lang.Class<TT>, java.lang.Class<TT>, org.sonar.api.internal.google.gson.TypeAdapter<? super TT>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactoryForMultipleTypes(java.lang.Class<TT>, java.lang.Class<? extends TT>, org.sonar.api.internal.google.gson.TypeAdapter<? super TT>)", "public static <TT> org.sonar.api.internal.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class<TT>, java.lang.Class<? extends TT>, org.sonar.api.internal.google.gson.TypeAdapter<? super TT>)"], ["<T1> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(java.lang.Class<T1>, org.sonar.api.internal.google.gson.TypeAdapter<T1>)", "public static <T1> org.sonar.api.internal.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<T1>, org.sonar.api.internal.google.gson.TypeAdapter<T1>)"], ["org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter()", "public org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter()"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.java.sql.Date read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public synchronized java.sql.Date read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Date)", "public synchronized void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Date) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter()", "public org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.get()", "public org.sonar.api.internal.google.gson.JsonElement get()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.beginArray()", "public org.sonar.api.internal.google.gson.stream.JsonWriter beginArray() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.endArray()", "public org.sonar.api.internal.google.gson.stream.JsonWriter endArray() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.beginObject()", "public org.sonar.api.internal.google.gson.stream.JsonWriter beginObject() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.endObject()", "public org.sonar.api.internal.google.gson.stream.JsonWriter endObject() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String)", "public org.sonar.api.internal.google.gson.stream.JsonWriter name(java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(java.lang.String)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(java.lang.String) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.nullValue()", "public org.sonar.api.internal.google.gson.stream.JsonWriter nullValue() throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(boolean)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(boolean) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Boolean)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(java.lang.Boolean) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(double)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(double) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(long)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(long) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Number)", "public org.sonar.api.internal.google.gson.stream.JsonWriter value(java.lang.Number) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.close()", "public void close() throws java.io.IOException"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.StringBuilder read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.StringBuilder)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.StringBuilder) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter(org.sonar.api.internal.google.gson.Gson, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<E>, org.sonar.api.internal.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>)", "public org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter(org.sonar.api.internal.google.gson.Gson, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<E>, org.sonar.api.internal.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>)"], ["java.util.Collection<E>", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.Collection<E> read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Collection<E>)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Collection<E>) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.util.UUID", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.UUID read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.UUID)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.UUID) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter$1.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter$1.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter$1.close()", "public void close() throws java.io.IOException"], ["java.util.BitSet", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.BitSet read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.BitSet)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.BitSet) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Number read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.StringBuffer", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.StringBuffer read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.StringBuffer)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.StringBuffer) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.net.URI", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.net.URI read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.URI)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.URI) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["java.lang.Boolean", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Boolean read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Boolean)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Boolean) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.TypeAdapter<E>, java.lang.Class<E>)", "public org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.TypeAdapter<E>, java.lang.Class<E>)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$3.newInstance(java.lang.Class<T>)", "public <T> T newInstance(java.lang.Class<T>) throws java.lang.Exception"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet$1.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder()", "public org.sonar.api.internal.google.gson.internal.Excluder()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.withVersion(double)", "public org.sonar.api.internal.google.gson.internal.Excluder withVersion(double)"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.withModifiers(int...)", "public org.sonar.api.internal.google.gson.internal.Excluder withModifiers(int...)"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.disableInnerClassSerialization()", "public org.sonar.api.internal.google.gson.internal.Excluder disableInnerClassSerialization()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.excludeFieldsWithoutExposeAnnotation()", "public org.sonar.api.internal.google.gson.internal.Excluder excludeFieldsWithoutExposeAnnotation()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.withExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy, boolean, boolean)", "public org.sonar.api.internal.google.gson.internal.Excluder withExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy, boolean, boolean)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.Excluder.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)", "public <T> org.sonar.api.internal.google.gson.TypeAdapter<T> create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["boolean", "org.sonar.api.internal.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean)", "public boolean excludeField(java.lang.reflect.Field, boolean)"], ["boolean", "org.sonar.api.internal.google.gson.internal.Excluder.excludeClass(java.lang.Class<?>, boolean)", "public boolean excludeClass(java.lang.Class<?>, boolean)"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.flush()", "public void flush()"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.close()", "public void close()"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$1.newInstance(java.lang.Class<T>)", "public <T> T newInstance(java.lang.Class<T>) throws java.lang.Exception"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.first()", "public org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node<K, V> first()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.last()", "public org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node<K, V> last()"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$2.translateName(java.lang.reflect.Field)", "public java.lang.String translateName(java.lang.reflect.Field)"], ["java.lang.Float", "org.sonar.api.internal.google.gson.Gson$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Float read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number) throws java.io.IOException"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.Gson$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.LongSerializationPolicy[]", "org.sonar.api.internal.google.gson.LongSerializationPolicy.values()", "public static org.sonar.api.internal.google.gson.LongSerializationPolicy[] values()"], ["org.sonar.api.internal.google.gson.LongSerializationPolicy", "org.sonar.api.internal.google.gson.LongSerializationPolicy.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.gson.LongSerializationPolicy valueOf(java.lang.String)"], ["org.sonar.api.internal.google.gson.FieldNamingPolicy[]", "org.sonar.api.internal.google.gson.FieldNamingPolicy.values()", "public static org.sonar.api.internal.google.gson.FieldNamingPolicy[] values()"], ["org.sonar.api.internal.google.gson.FieldNamingPolicy", "org.sonar.api.internal.google.gson.FieldNamingPolicy.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.gson.FieldNamingPolicy valueOf(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.LongSerializationPolicy$1.serialize(java.lang.Long)", "public org.sonar.api.internal.google.gson.JsonElement serialize(java.lang.Long)"], ["org.sonar.api.internal.google.gson.DefaultDateTypeAdapter", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter(int, int)", "public org.sonar.api.internal.google.gson.DefaultDateTypeAdapter(int, int)"], ["org.sonar.api.internal.google.gson.DefaultDateTypeAdapter", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter(java.lang.Class<? extends java.util.Date>, int, int)", "public org.sonar.api.internal.google.gson.DefaultDateTypeAdapter(java.lang.Class<? extends java.util.Date>, int, int)"], ["void", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Date)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Date) throws java.io.IOException"], ["java.util.Date", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.util.Date read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)", "public java.lang.Object read(org.sonar.api.internal.google.gson.stream.JsonReader) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)", "public void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException"], ["org.sonar.api.internal.google.gson.JsonSyntaxException", "org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonSyntaxException", "org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonSyntaxException", "org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.Throwable)", "public org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonArray()", "public org.sonar.api.internal.google.gson.JsonArray()"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonArray(int)", "public org.sonar.api.internal.google.gson.JsonArray(int)"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonArray.deepCopy()", "public org.sonar.api.internal.google.gson.JsonArray deepCopy()"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.Boolean)", "public void add(java.lang.Boolean)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.Character)", "public void add(java.lang.Character)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.Number)", "public void add(java.lang.Number)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.String)", "public void add(java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(org.sonar.api.internal.google.gson.JsonElement)", "public void add(org.sonar.api.internal.google.gson.JsonElement)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.addAll(org.sonar.api.internal.google.gson.JsonArray)", "public void addAll(org.sonar.api.internal.google.gson.JsonArray)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.set(int, org.sonar.api.internal.google.gson.JsonElement)", "public org.sonar.api.internal.google.gson.JsonElement set(int, org.sonar.api.internal.google.gson.JsonElement)"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.remove(org.sonar.api.internal.google.gson.JsonElement)", "public boolean remove(org.sonar.api.internal.google.gson.JsonElement)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.remove(int)", "public org.sonar.api.internal.google.gson.JsonElement remove(int)"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.contains(org.sonar.api.internal.google.gson.JsonElement)", "public boolean contains(org.sonar.api.internal.google.gson.JsonElement)"], ["int", "org.sonar.api.internal.google.gson.JsonArray.size()", "public int size()"], ["java.util.Iterator<org.sonar.api.internal.google.gson.JsonElement>", "org.sonar.api.internal.google.gson.JsonArray.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.gson.JsonElement> iterator()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.get(int)", "public org.sonar.api.internal.google.gson.JsonElement get(int)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.JsonArray.getAsNumber()", "public java.lang.Number getAsNumber()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonArray.getAsString()", "public java.lang.String getAsString()"], ["double", "org.sonar.api.internal.google.gson.JsonArray.getAsDouble()", "public double getAsDouble()"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.JsonArray.getAsBigDecimal()", "public java.math.BigDecimal getAsBigDecimal()"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.JsonArray.getAsBigInteger()", "public java.math.BigInteger getAsBigInteger()"], ["float", "org.sonar.api.internal.google.gson.JsonArray.getAsFloat()", "public float getAsFloat()"], ["long", "org.sonar.api.internal.google.gson.JsonArray.getAsLong()", "public long getAsLong()"], ["int", "org.sonar.api.internal.google.gson.JsonArray.getAsInt()", "public int getAsInt()"], ["byte", "org.sonar.api.internal.google.gson.JsonArray.getAsByte()", "public byte getAsByte()"], ["char", "org.sonar.api.internal.google.gson.JsonArray.getAsCharacter()", "public char getAsCharacter()"], ["short", "org.sonar.api.internal.google.gson.JsonArray.getAsShort()", "public short getAsShort()"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.getAsBoolean()", "public boolean getAsBoolean()"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.JsonArray.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.deepCopy()", "public org.sonar.api.internal.google.gson.JsonElement deepCopy()"], ["org.sonar.api.internal.google.gson.JsonParseException", "org.sonar.api.internal.google.gson.JsonParseException(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonParseException(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonParseException", "org.sonar.api.internal.google.gson.JsonParseException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.google.gson.JsonParseException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonParseException", "org.sonar.api.internal.google.gson.JsonParseException(java.lang.Throwable)", "public org.sonar.api.internal.google.gson.JsonParseException(java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.LongSerializationPolicy$2.serialize(java.lang.Long)", "public org.sonar.api.internal.google.gson.JsonElement serialize(java.lang.Long)"], ["org.sonar.api.internal.google.gson.JsonParser", "org.sonar.api.internal.google.gson.JsonParser()", "public org.sonar.api.internal.google.gson.JsonParser()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonParser.parse(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonElement parse(java.lang.String) throws org.sonar.api.internal.google.gson.JsonSyntaxException"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonParser.parse(java.io.Reader)", "public org.sonar.api.internal.google.gson.JsonElement parse(java.io.Reader) throws org.sonar.api.internal.google.gson.JsonIOException, org.sonar.api.internal.google.gson.JsonSyntaxException"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonParser.parse(org.sonar.api.internal.google.gson.stream.JsonReader)", "public org.sonar.api.internal.google.gson.JsonElement parse(org.sonar.api.internal.google.gson.stream.JsonReader) throws org.sonar.api.internal.google.gson.JsonIOException, org.sonar.api.internal.google.gson.JsonSyntaxException"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder()", "public org.sonar.api.internal.google.gson.GsonBuilder()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setVersion(double)", "public org.sonar.api.internal.google.gson.GsonBuilder setVersion(double)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.excludeFieldsWithModifiers(int...)", "public org.sonar.api.internal.google.gson.GsonBuilder excludeFieldsWithModifiers(int...)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.generateNonExecutableJson()", "public org.sonar.api.internal.google.gson.GsonBuilder generateNonExecutableJson()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.excludeFieldsWithoutExposeAnnotation()", "public org.sonar.api.internal.google.gson.GsonBuilder excludeFieldsWithoutExposeAnnotation()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.serializeNulls()", "public org.sonar.api.internal.google.gson.GsonBuilder serializeNulls()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.enableComplexMapKeySerialization()", "public org.sonar.api.internal.google.gson.GsonBuilder enableComplexMapKeySerialization()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.disableInnerClassSerialization()", "public org.sonar.api.internal.google.gson.GsonBuilder disableInnerClassSerialization()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setLongSerializationPolicy(org.sonar.api.internal.google.gson.LongSerializationPolicy)", "public org.sonar.api.internal.google.gson.GsonBuilder setLongSerializationPolicy(org.sonar.api.internal.google.gson.LongSerializationPolicy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setFieldNamingPolicy(org.sonar.api.internal.google.gson.FieldNamingPolicy)", "public org.sonar.api.internal.google.gson.GsonBuilder setFieldNamingPolicy(org.sonar.api.internal.google.gson.FieldNamingPolicy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setFieldNamingStrategy(org.sonar.api.internal.google.gson.FieldNamingStrategy)", "public org.sonar.api.internal.google.gson.GsonBuilder setFieldNamingStrategy(org.sonar.api.internal.google.gson.FieldNamingStrategy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setExclusionStrategies(org.sonar.api.internal.google.gson.ExclusionStrategy...)", "public org.sonar.api.internal.google.gson.GsonBuilder setExclusionStrategies(org.sonar.api.internal.google.gson.ExclusionStrategy...)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.addSerializationExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy)", "public org.sonar.api.internal.google.gson.GsonBuilder addSerializationExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.addDeserializationExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy)", "public org.sonar.api.internal.google.gson.GsonBuilder addDeserializationExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setPrettyPrinting()", "public org.sonar.api.internal.google.gson.GsonBuilder setPrettyPrinting()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setLenient()", "public org.sonar.api.internal.google.gson.GsonBuilder setLenient()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.disableHtmlEscaping()", "public org.sonar.api.internal.google.gson.GsonBuilder disableHtmlEscaping()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setDateFormat(java.lang.String)", "public org.sonar.api.internal.google.gson.GsonBuilder setDateFormat(java.lang.String)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setDateFormat(int)", "public org.sonar.api.internal.google.gson.GsonBuilder setDateFormat(int)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setDateFormat(int, int)", "public org.sonar.api.internal.google.gson.GsonBuilder setDateFormat(int, int)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object)", "public org.sonar.api.internal.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type, java.lang.Object)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.registerTypeAdapterFactory(org.sonar.api.internal.google.gson.TypeAdapterFactory)", "public org.sonar.api.internal.google.gson.GsonBuilder registerTypeAdapterFactory(org.sonar.api.internal.google.gson.TypeAdapterFactory)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class<?>, java.lang.Object)", "public org.sonar.api.internal.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?>, java.lang.Object)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.serializeSpecialFloatingPointValues()", "public org.sonar.api.internal.google.gson.GsonBuilder serializeSpecialFloatingPointValues()"], ["org.sonar.api.internal.google.gson.Gson", "org.sonar.api.internal.google.gson.GsonBuilder.create()", "public org.sonar.api.internal.google.gson.Gson create()"], ["org.sonar.api.internal.google.gson.FieldAttributes", "org.sonar.api.internal.google.gson.FieldAttributes(java.lang.reflect.Field)", "public org.sonar.api.internal.google.gson.FieldAttributes(java.lang.reflect.Field)"], ["java.lang.Class<?>", "org.sonar.api.internal.google.gson.FieldAttributes.getDeclaringClass()", "public java.lang.Class<?> getDeclaringClass()"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldAttributes.getName()", "public java.lang.String getName()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.FieldAttributes.getDeclaredType()", "public java.lang.reflect.Type getDeclaredType()"], ["java.lang.Class<?>", "org.sonar.api.internal.google.gson.FieldAttributes.getDeclaredClass()", "public java.lang.Class<?> getDeclaredClass()"], ["<T extends java.lang.annotation.Annotation> T", "org.sonar.api.internal.google.gson.FieldAttributes.getAnnotation(java.lang.Class<T>)", "public <T extends java.lang.annotation.Annotation> T getAnnotation(java.lang.Class<T>)"], ["java.util.Collection<java.lang.annotation.Annotation>", "org.sonar.api.internal.google.gson.FieldAttributes.getAnnotations()", "public java.util.Collection<java.lang.annotation.Annotation> getAnnotations()"], ["boolean", "org.sonar.api.internal.google.gson.FieldAttributes.hasModifier(int)", "public boolean hasModifier(int)"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonObject()", "public org.sonar.api.internal.google.gson.JsonObject()"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonObject.deepCopy()", "public org.sonar.api.internal.google.gson.JsonObject deepCopy()"], ["void", "org.sonar.api.internal.google.gson.JsonObject.add(java.lang.String, org.sonar.api.internal.google.gson.JsonElement)", "public void add(java.lang.String, org.sonar.api.internal.google.gson.JsonElement)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonObject.remove(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonElement remove(java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String)", "public void addProperty(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number)", "public void addProperty(java.lang.String, java.lang.Number)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean)", "public void addProperty(java.lang.String, java.lang.Boolean)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Character)", "public void addProperty(java.lang.String, java.lang.Character)"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.sonar.api.internal.google.gson.JsonElement>>", "org.sonar.api.internal.google.gson.JsonObject.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.sonar.api.internal.google.gson.JsonElement>> entrySet()"], ["java.util.Set<java.lang.String>", "org.sonar.api.internal.google.gson.JsonObject.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["int", "org.sonar.api.internal.google.gson.JsonObject.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.gson.JsonObject.has(java.lang.String)", "public boolean has(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonObject.get(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonElement get(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonObject.getAsJsonPrimitive(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonObject.getAsJsonArray(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonArray getAsJsonArray(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonObject.getAsJsonObject(java.lang.String)", "public org.sonar.api.internal.google.gson.JsonObject getAsJsonObject(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.gson.JsonObject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.JsonObject.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonObject.deepCopy()", "public org.sonar.api.internal.google.gson.JsonElement deepCopy()"], ["boolean", "org.sonar.api.internal.google.common.base.Absent.isPresent()", "public boolean isPresent()"], ["T", "org.sonar.api.internal.google.common.base.Absent.get()", "public T get()"], ["T", "org.sonar.api.internal.google.common.base.Absent.or(T)", "public T or(T)"], ["org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Absent.or(org.sonar.api.internal.google.common.base.Optional<? extends T>)", "public org.sonar.api.internal.google.common.base.Optional<T> or(org.sonar.api.internal.google.common.base.Optional<? extends T>)"], ["T", "org.sonar.api.internal.google.common.base.Absent.or(org.sonar.api.internal.google.common.base.Supplier<? extends T>)", "public T or(org.sonar.api.internal.google.common.base.Supplier<? extends T>)"], ["T", "org.sonar.api.internal.google.common.base.Absent.orNull()", "public T orNull()"], ["java.util.Set<T>", "org.sonar.api.internal.google.common.base.Absent.asSet()", "public java.util.Set<T> asSet()"], ["<V> org.sonar.api.internal.google.common.base.Optional<V>", "org.sonar.api.internal.google.common.base.Absent.transform(org.sonar.api.internal.google.common.base.Function<? super T, V>)", "public <V> org.sonar.api.internal.google.common.base.Optional<V> transform(org.sonar.api.internal.google.common.base.Function<? super T, V>)"], ["boolean", "org.sonar.api.internal.google.common.base.Absent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Absent.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Absent.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.AbstractIterator$State[]", "org.sonar.api.internal.google.common.base.AbstractIterator$State.values()", "public static org.sonar.api.internal.google.common.base.AbstractIterator$State[] values()"], ["org.sonar.api.internal.google.common.base.AbstractIterator$State", "org.sonar.api.internal.google.common.base.AbstractIterator$State.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.base.AbstractIterator$State valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.AbstractIterator.hasNext()", "public final boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.base.AbstractIterator.next()", "public final T next()"], ["void", "org.sonar.api.internal.google.common.base.AbstractIterator.remove()", "public final void remove()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toLowerCase(java.lang.String)", "public static java.lang.String toLowerCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toLowerCase(java.lang.CharSequence)", "public static java.lang.String toLowerCase(java.lang.CharSequence)"], ["char", "org.sonar.api.internal.google.common.base.Ascii.toLowerCase(char)", "public static char toLowerCase(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toUpperCase(java.lang.String)", "public static java.lang.String toUpperCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toUpperCase(java.lang.CharSequence)", "public static java.lang.String toUpperCase(java.lang.CharSequence)"], ["char", "org.sonar.api.internal.google.common.base.Ascii.toUpperCase(char)", "public static char toUpperCase(char)"], ["boolean", "org.sonar.api.internal.google.common.base.Ascii.isLowerCase(char)", "public static boolean isLowerCase(char)"], ["boolean", "org.sonar.api.internal.google.common.base.Ascii.isUpperCase(char)", "public static boolean isUpperCase(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.truncate(java.lang.CharSequence, int, java.lang.String)", "public static java.lang.String truncate(java.lang.CharSequence, int, java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.Ascii.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)", "public static boolean equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CaseFormat$StringConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.CaseFormat$StringConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CaseFormat$StringConverter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.CaseFormat[]", "org.sonar.api.internal.google.common.base.CaseFormat.values()", "public static org.sonar.api.internal.google.common.base.CaseFormat[] values()"], ["org.sonar.api.internal.google.common.base.CaseFormat", "org.sonar.api.internal.google.common.base.CaseFormat.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.base.CaseFormat valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CaseFormat.to(org.sonar.api.internal.google.common.base.CaseFormat, java.lang.String)", "public final java.lang.String to(org.sonar.api.internal.google.common.base.CaseFormat, java.lang.String)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.base.CaseFormat.converterTo(org.sonar.api.internal.google.common.base.CaseFormat)", "public org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.String> converterTo(org.sonar.api.internal.google.common.base.CaseFormat)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$1.matches(char)", "public boolean matches(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$1.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$10.matches(char)", "public boolean matches(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$10.and(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$10.or(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$10.negate()", "public org.sonar.api.internal.google.common.base.CharMatcher negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$11.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$11.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$12.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$13.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$14.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$14.apply(java.lang.Character)", "public boolean apply(java.lang.Character)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$14.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$15.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$2.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$3.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$3.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$4.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$4.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$5.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$5.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$6.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$6.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$7.matches(char)", "public boolean matches(char)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.indexIn(java.lang.CharSequence)", "public int indexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.indexIn(java.lang.CharSequence, int)", "public int indexIn(java.lang.CharSequence, int)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.lastIndexIn(java.lang.CharSequence)", "public int lastIndexIn(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$7.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$7.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.removeFrom(java.lang.CharSequence)", "public java.lang.String removeFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)", "public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.collapseFrom(java.lang.CharSequence, char)", "public java.lang.String collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.trimFrom(java.lang.CharSequence)", "public java.lang.String trimFrom(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$7.and(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$7.or(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$7.negate()", "public org.sonar.api.internal.google.common.base.CharMatcher negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$8.matches(char)", "public boolean matches(char)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.indexIn(java.lang.CharSequence)", "public int indexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.indexIn(java.lang.CharSequence, int)", "public int indexIn(java.lang.CharSequence, int)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.lastIndexIn(java.lang.CharSequence)", "public int lastIndexIn(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$8.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$8.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.removeFrom(java.lang.CharSequence)", "public java.lang.String removeFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)", "public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.collapseFrom(java.lang.CharSequence, char)", "public java.lang.String collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.trimFrom(java.lang.CharSequence)", "public java.lang.String trimFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.trimLeadingFrom(java.lang.CharSequence)", "public java.lang.String trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.trimTrailingFrom(java.lang.CharSequence)", "public java.lang.String trimTrailingFrom(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$8.and(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$8.or(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$8.negate()", "public org.sonar.api.internal.google.common.base.CharMatcher negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$9.matches(char)", "public boolean matches(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$9.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$9.and(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$9.or(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$9.negate()", "public org.sonar.api.internal.google.common.base.CharMatcher negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$And.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$And.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$BitSetMatcher.matches(char)", "public boolean matches(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$FastMatcher.precomputed()", "public final org.sonar.api.internal.google.common.base.CharMatcher precomputed()"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$FastMatcher.negate()", "public org.sonar.api.internal.google.common.base.CharMatcher negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$FastMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedFastMatcher.precomputed()", "public final org.sonar.api.internal.google.common.base.CharMatcher precomputed()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.negate()", "public org.sonar.api.internal.google.common.base.CharMatcher negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$Or.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$Or.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$RangesMatcher.matches(char)", "public boolean matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$RangesMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.is(char)", "public static org.sonar.api.internal.google.common.base.CharMatcher is(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.isNot(char)", "public static org.sonar.api.internal.google.common.base.CharMatcher isNot(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.anyOf(java.lang.CharSequence)", "public static org.sonar.api.internal.google.common.base.CharMatcher anyOf(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.noneOf(java.lang.CharSequence)", "public static org.sonar.api.internal.google.common.base.CharMatcher noneOf(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.inRange(char, char)", "public static org.sonar.api.internal.google.common.base.CharMatcher inRange(char, char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.forPredicate(org.sonar.api.internal.google.common.base.Predicate<? super java.lang.Character>)", "public static org.sonar.api.internal.google.common.base.CharMatcher forPredicate(org.sonar.api.internal.google.common.base.Predicate<? super java.lang.Character>)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.negate()", "public org.sonar.api.internal.google.common.base.CharMatcher negate()"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.and(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.or(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.CharMatcher or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.precomputed()", "public org.sonar.api.internal.google.common.base.CharMatcher precomputed()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.matchesAnyOf(java.lang.CharSequence)", "public boolean matchesAnyOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)", "public boolean matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)", "public boolean matchesNoneOf(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)", "public int indexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, int)", "public int indexIn(java.lang.CharSequence, int)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.lastIndexIn(java.lang.CharSequence)", "public int lastIndexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.countIn(java.lang.CharSequence)", "public int countIn(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)", "public java.lang.String removeFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.retainFrom(java.lang.CharSequence)", "public java.lang.String retainFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, char)", "public java.lang.String replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)", "public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimFrom(java.lang.CharSequence)", "public java.lang.String trimFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence)", "public java.lang.String trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence)", "public java.lang.String trimTrailingFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.collapseFrom(java.lang.CharSequence, char)", "public java.lang.String collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence, char)", "public java.lang.String trimAndCollapseFrom(java.lang.CharSequence, char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.apply(java.lang.Character)", "public boolean apply(java.lang.Character)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$1$1.hasNext()", "public boolean hasNext()"], ["B", "org.sonar.api.internal.google.common.base.Converter$1$1.next()", "public B next()"], ["void", "org.sonar.api.internal.google.common.base.Converter$1$1.remove()", "public void remove()"], ["java.util.Iterator<B>", "org.sonar.api.internal.google.common.base.Converter$1.iterator()", "public java.util.Iterator<B> iterator()"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$ConverterComposition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Converter$ConverterComposition.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$ConverterComposition.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$FunctionBasedConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Converter$FunctionBasedConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$FunctionBasedConverter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Converter$IdentityConverter<T>", "org.sonar.api.internal.google.common.base.Converter$IdentityConverter.reverse()", "public org.sonar.api.internal.google.common.base.Converter$IdentityConverter<T> reverse()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$IdentityConverter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Converter", "org.sonar.api.internal.google.common.base.Converter$IdentityConverter.reverse()", "public org.sonar.api.internal.google.common.base.Converter reverse()"], ["org.sonar.api.internal.google.common.base.Converter<A, B>", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.reverse()", "public org.sonar.api.internal.google.common.base.Converter<A, B> reverse()"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.toString()", "public java.lang.String toString()"], ["B", "org.sonar.api.internal.google.common.base.Converter.convert(A)", "public final B convert(A)"], ["java.lang.Iterable<B>", "org.sonar.api.internal.google.common.base.Converter.convertAll(java.lang.Iterable<? extends A>)", "public java.lang.Iterable<B> convertAll(java.lang.Iterable<? extends A>)"], ["org.sonar.api.internal.google.common.base.Converter<B, A>", "org.sonar.api.internal.google.common.base.Converter.reverse()", "public org.sonar.api.internal.google.common.base.Converter<B, A> reverse()"], ["<C> org.sonar.api.internal.google.common.base.Converter<A, C>", "org.sonar.api.internal.google.common.base.Converter.andThen(org.sonar.api.internal.google.common.base.Converter<B, C>)", "public final <C> org.sonar.api.internal.google.common.base.Converter<A, C> andThen(org.sonar.api.internal.google.common.base.Converter<B, C>)"], ["B", "org.sonar.api.internal.google.common.base.Converter.apply(A)", "public final B apply(A)"], ["boolean", "org.sonar.api.internal.google.common.base.Converter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["<A, B> org.sonar.api.internal.google.common.base.Converter<A, B>", "org.sonar.api.internal.google.common.base.Converter.from(org.sonar.api.internal.google.common.base.Function<? super A, ? extends B>, org.sonar.api.internal.google.common.base.Function<? super B, ? extends A>)", "public static <A, B> org.sonar.api.internal.google.common.base.Converter<A, B> from(org.sonar.api.internal.google.common.base.Function<? super A, ? extends B>, org.sonar.api.internal.google.common.base.Function<? super B, ? extends A>)"], ["<T> org.sonar.api.internal.google.common.base.Converter<T, T>", "org.sonar.api.internal.google.common.base.Converter.identity()", "public static <T> org.sonar.api.internal.google.common.base.Converter<T, T> identity()"], ["<T> T", "org.sonar.api.internal.google.common.base.Defaults.defaultValue(java.lang.Class<T>)", "public static <T> T defaultValue(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.common.base.Enums$StringConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Enums$StringConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Enums$StringConverter.toString()", "public java.lang.String toString()"], ["java.lang.reflect.Field", "org.sonar.api.internal.google.common.base.Enums.getField(java.lang.Enum<?>)", "public static java.lang.reflect.Field getField(java.lang.Enum<?>)"], ["<T extends java.lang.Enum<T>> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)", "public static <T extends java.lang.Enum<T>> org.sonar.api.internal.google.common.base.Optional<T> getIfPresent(java.lang.Class<T>, java.lang.String)"], ["<T extends java.lang.Enum<T>> org.sonar.api.internal.google.common.base.Converter<java.lang.String, T>", "org.sonar.api.internal.google.common.base.Enums.stringConverter(java.lang.Class<T>)", "public static <T extends java.lang.Enum<T>> org.sonar.api.internal.google.common.base.Converter<java.lang.String, T> stringConverter(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.apply(T)", "public boolean apply(T)"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.toString()", "public java.lang.String toString()"], ["T", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.get()", "public T get()"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence.equivalent(T, T)", "public final boolean equivalent(T, T)"], ["int", "org.sonar.api.internal.google.common.base.Equivalence.hash(T)", "public final int hash(T)"], ["<F> org.sonar.api.internal.google.common.base.Equivalence<F>", "org.sonar.api.internal.google.common.base.Equivalence.onResultOf(org.sonar.api.internal.google.common.base.Function<F, ? extends T>)", "public final <F> org.sonar.api.internal.google.common.base.Equivalence<F> onResultOf(org.sonar.api.internal.google.common.base.Function<F, ? extends T>)"], ["<S extends T> org.sonar.api.internal.google.common.base.Equivalence$Wrapper<S>", "org.sonar.api.internal.google.common.base.Equivalence.wrap(S)", "public final <S extends T> org.sonar.api.internal.google.common.base.Equivalence$Wrapper<S> wrap(S)"], ["<S extends T> org.sonar.api.internal.google.common.base.Equivalence<java.lang.Iterable<S>>", "org.sonar.api.internal.google.common.base.Equivalence.pairwise()", "public final <S extends T> org.sonar.api.internal.google.common.base.Equivalence<java.lang.Iterable<S>> pairwise()"], ["org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Equivalence.equivalentTo(T)", "public final org.sonar.api.internal.google.common.base.Predicate<T> equivalentTo(T)"], ["org.sonar.api.internal.google.common.base.Equivalence<java.lang.Object>", "org.sonar.api.internal.google.common.base.Equivalence.equals()", "public static org.sonar.api.internal.google.common.base.Equivalence<java.lang.Object> equals()"], ["org.sonar.api.internal.google.common.base.Equivalence<java.lang.Object>", "org.sonar.api.internal.google.common.base.Equivalence.identity()", "public static org.sonar.api.internal.google.common.base.Equivalence<java.lang.Object> identity()"], ["java.lang.Class<?>", "org.sonar.api.internal.google.common.base.FinalizableReferenceQueue$DecoupledLoader.loadFinalizer()", "public java.lang.Class<?> loadFinalizer()"], ["java.lang.Class<?>", "org.sonar.api.internal.google.common.base.FinalizableReferenceQueue$DirectLoader.loadFinalizer()", "public java.lang.Class<?> loadFinalizer()"], ["java.lang.Class<?>", "org.sonar.api.internal.google.common.base.FinalizableReferenceQueue$SystemLoader.loadFinalizer()", "public java.lang.Class<?> loadFinalizer()"], ["org.sonar.api.internal.google.common.base.FinalizableReferenceQueue", "org.sonar.api.internal.google.common.base.FinalizableReferenceQueue()", "public org.sonar.api.internal.google.common.base.FinalizableReferenceQueue()"], ["void", "org.sonar.api.internal.google.common.base.FinalizableReferenceQueue.close()", "public void close()"], ["boolean", "org.sonar.api.internal.google.common.base.FunctionalEquivalence.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.FunctionalEquivalence.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.FunctionalEquivalence.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Functions$ConstantFunction", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction(E)", "public org.sonar.api.internal.google.common.base.Functions$ConstantFunction(E)"], ["E", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.apply(java.lang.Object)", "public E apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.toString()", "public java.lang.String toString()"], ["V", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.apply(K)", "public V apply(K)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Functions$FunctionComposition", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition(org.sonar.api.internal.google.common.base.Function<B, C>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)", "public org.sonar.api.internal.google.common.base.Functions$FunctionComposition(org.sonar.api.internal.google.common.base.Function<B, C>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)"], ["C", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.apply(A)", "public C apply(A)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.toString()", "public java.lang.String toString()"], ["V", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.apply(K)", "public V apply(K)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Functions$IdentityFunction[]", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.values()", "public static org.sonar.api.internal.google.common.base.Functions$IdentityFunction[] values()"], ["org.sonar.api.internal.google.common.base.Functions$IdentityFunction", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Functions$IdentityFunction valueOf(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.toString()", "public java.lang.String toString()"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.apply(T)", "public java.lang.Boolean apply(T)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["T", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.apply(java.lang.Object)", "public T apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Functions$ToStringFunction[]", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.values()", "public static org.sonar.api.internal.google.common.base.Functions$ToStringFunction[] values()"], ["org.sonar.api.internal.google.common.base.Functions$ToStringFunction", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Functions$ToStringFunction valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)", "public java.lang.String apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Function<java.lang.Object, java.lang.String>", "org.sonar.api.internal.google.common.base.Functions.toStringFunction()", "public static org.sonar.api.internal.google.common.base.Function<java.lang.Object, java.lang.String> toStringFunction()"], ["<E> org.sonar.api.internal.google.common.base.Function<E, E>", "org.sonar.api.internal.google.common.base.Functions.identity()", "public static <E> org.sonar.api.internal.google.common.base.Function<E, E> identity()"], ["<K, V> org.sonar.api.internal.google.common.base.Function<K, V>", "org.sonar.api.internal.google.common.base.Functions.forMap(java.util.Map<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.base.Function<K, V> forMap(java.util.Map<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.base.Function<K, V>", "org.sonar.api.internal.google.common.base.Functions.forMap(java.util.Map<K, ? extends V>, V)", "public static <K, V> org.sonar.api.internal.google.common.base.Function<K, V> forMap(java.util.Map<K, ? extends V>, V)"], ["<A, B, C> org.sonar.api.internal.google.common.base.Function<A, C>", "org.sonar.api.internal.google.common.base.Functions.compose(org.sonar.api.internal.google.common.base.Function<B, C>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)", "public static <A, B, C> org.sonar.api.internal.google.common.base.Function<A, C> compose(org.sonar.api.internal.google.common.base.Function<B, C>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)"], ["<T> org.sonar.api.internal.google.common.base.Function<T, java.lang.Boolean>", "org.sonar.api.internal.google.common.base.Functions.forPredicate(org.sonar.api.internal.google.common.base.Predicate<T>)", "public static <T> org.sonar.api.internal.google.common.base.Function<T, java.lang.Boolean> forPredicate(org.sonar.api.internal.google.common.base.Predicate<T>)"], ["<E> org.sonar.api.internal.google.common.base.Function<java.lang.Object, E>", "org.sonar.api.internal.google.common.base.Functions.constant(E)", "public static <E> org.sonar.api.internal.google.common.base.Function<java.lang.Object, E> constant(E)"], ["<T> org.sonar.api.internal.google.common.base.Function<java.lang.Object, T>", "org.sonar.api.internal.google.common.base.Functions.forSupplier(org.sonar.api.internal.google.common.base.Supplier<T>)", "public static <T> org.sonar.api.internal.google.common.base.Function<java.lang.Object, T> forSupplier(org.sonar.api.internal.google.common.base.Supplier<T>)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner$1.useForNull(java.lang.String)", "public org.sonar.api.internal.google.common.base.Joiner useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner$1.skipNulls()", "public org.sonar.api.internal.google.common.base.Joiner skipNulls()"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$2.appendTo(A, java.util.Iterator<?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Iterator<?>) throws java.io.IOException"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner$2.useForNull(java.lang.String)", "public org.sonar.api.internal.google.common.base.Joiner useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner$MapJoiner", "org.sonar.api.internal.google.common.base.Joiner$2.withKeyValueSeparator(java.lang.String)", "public org.sonar.api.internal.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.base.Joiner$3.size()", "public int size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Joiner$3.get(int)", "public java.lang.Object get(int)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Map<?, ?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Map<?, ?>) throws java.io.IOException"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Map<?, ?>)", "public java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Map<?, ?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.join(java.util.Map<?, ?>)", "public java.lang.String join(java.util.Map<?, ?>)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(A, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)", "public <A extends java.lang.Appendable> A appendTo(A, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>) throws java.io.IOException"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.join(java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.String join(java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.join(java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)", "public java.lang.String join(java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["org.sonar.api.internal.google.common.base.Joiner$MapJoiner", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.useForNull(java.lang.String)", "public org.sonar.api.internal.google.common.base.Joiner$MapJoiner useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.on(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Joiner on(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.on(char)", "public static org.sonar.api.internal.google.common.base.Joiner on(char)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.lang.Iterable<?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.lang.Iterable<?>) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.util.Iterator<?>)", "public <A extends java.lang.Appendable> A appendTo(A, java.util.Iterator<?>) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.lang.Object[])", "public final <A extends java.lang.Appendable> A appendTo(A, java.lang.Object[]) throws java.io.IOException"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...)", "public final <A extends java.lang.Appendable> A appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...) throws java.io.IOException"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<?>)", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Iterable<?>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.util.Iterator<?>)", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.util.Iterator<?>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object[])", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object[])"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...)", "public final java.lang.StringBuilder appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.lang.Iterable<?>)", "public final java.lang.String join(java.lang.Iterable<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.util.Iterator<?>)", "public final java.lang.String join(java.util.Iterator<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.lang.Object[])", "public final java.lang.String join(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.lang.Object, java.lang.Object, java.lang.Object...)", "public final java.lang.String join(java.lang.Object, java.lang.Object, java.lang.Object...)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.useForNull(java.lang.String)", "public org.sonar.api.internal.google.common.base.Joiner useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.skipNulls()", "public org.sonar.api.internal.google.common.base.Joiner skipNulls()"], ["org.sonar.api.internal.google.common.base.Joiner$MapJoiner", "org.sonar.api.internal.google.common.base.Joiner.withKeyValueSeparator(java.lang.String)", "public org.sonar.api.internal.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.omitNullValues()", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper omitNullValues()"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, java.lang.Object)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, java.lang.Object)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, boolean)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, boolean)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, char)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, char)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, double)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, double)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, float)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, float)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, int)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, int)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, long)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper add(java.lang.String, long)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(java.lang.Object)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper addValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(boolean)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper addValue(boolean)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(char)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper addValue(char)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(double)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper addValue(double)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(float)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper addValue(float)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(int)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper addValue(int)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(long)", "public org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper addValue(long)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.toString()", "public java.lang.String toString()"], ["<T> T", "org.sonar.api.internal.google.common.base.MoreObjects.firstNonNull(T, T)", "public static <T> T firstNonNull(T, T)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects.toStringHelper(java.lang.Object)", "public static org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects.toStringHelper(java.lang.Class<?>)", "public static org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Class<?>)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects.toStringHelper(java.lang.String)", "public static org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.omitNullValues()", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper omitNullValues()"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, java.lang.Object)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper add(java.lang.String, java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, boolean)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper add(java.lang.String, boolean)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, char)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper add(java.lang.String, char)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, double)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper add(java.lang.String, double)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, float)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper add(java.lang.String, float)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, int)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper add(java.lang.String, int)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, long)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper add(java.lang.String, long)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(java.lang.Object)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper addValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(boolean)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper addValue(boolean)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(char)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper addValue(char)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(double)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper addValue(double)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(float)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper addValue(float)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(int)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper addValue(int)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(long)", "public org.sonar.api.internal.google.common.base.Objects$ToStringHelper addValue(long)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)", "public static boolean equal(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Objects.hashCode(java.lang.Object...)", "public static int hashCode(java.lang.Object...)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects.toStringHelper(java.lang.Object)", "public static org.sonar.api.internal.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects.toStringHelper(java.lang.Class<?>)", "public static org.sonar.api.internal.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.Class<?>)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects.toStringHelper(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Objects$ToStringHelper toStringHelper(java.lang.String)"], ["<T> T", "org.sonar.api.internal.google.common.base.Objects.firstNonNull(T, T)", "public static <T> T firstNonNull(T, T)"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.base.Optional$1.iterator()", "public java.util.Iterator<T> iterator()"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Optional.absent()", "public static <T> org.sonar.api.internal.google.common.base.Optional<T> absent()"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Optional.of(T)", "public static <T> org.sonar.api.internal.google.common.base.Optional<T> of(T)"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Optional.fromNullable(T)", "public static <T> org.sonar.api.internal.google.common.base.Optional<T> fromNullable(T)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.base.Optional.presentInstances(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Optional<? extends T>>)", "public static <T> java.lang.Iterable<T> presentInstances(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Optional<? extends T>>)"], ["boolean", "org.sonar.api.internal.google.common.base.PairwiseEquivalence.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.PairwiseEquivalence.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.PairwiseEquivalence.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkArgument(boolean)", "public static void checkArgument(boolean)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkArgument(boolean, java.lang.Object)", "public static void checkArgument(boolean, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object...)", "public static void checkArgument(boolean, java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkState(boolean)", "public static void checkState(boolean)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkState(boolean, java.lang.Object)", "public static void checkState(boolean, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object...)", "public static void checkState(boolean, java.lang.String, java.lang.Object...)"], ["<T> T", "org.sonar.api.internal.google.common.base.Preconditions.checkNotNull(T)", "public static <T> T checkNotNull(T)"], ["<T> T", "org.sonar.api.internal.google.common.base.Preconditions.checkNotNull(T, java.lang.Object)", "public static <T> T checkNotNull(T, java.lang.Object)"], ["<T> T", "org.sonar.api.internal.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object...)", "public static <T> T checkNotNull(T, java.lang.String, java.lang.Object...)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkElementIndex(int, int)", "public static int checkElementIndex(int, int)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkElementIndex(int, int, java.lang.String)", "public static int checkElementIndex(int, int, java.lang.String)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkPositionIndex(int, int)", "public static int checkPositionIndex(int, int)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkPositionIndex(int, int, java.lang.String)", "public static int checkPositionIndex(int, int, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkPositionIndexes(int, int, int)", "public static void checkPositionIndexes(int, int, int)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.apply(T)", "public boolean apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.apply(java.lang.Class<?>)", "public boolean apply(java.lang.Class<?>)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.apply(A)", "public boolean apply(A)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternFromStringPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.CharSequence)", "public boolean apply(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.apply(T)", "public boolean apply(T)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.apply(T)", "public boolean apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.apply(T)", "public boolean apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$1.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$2.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$3.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$3.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$4.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$4.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate[]", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate.values()", "public static org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate[] values()"], ["org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.apply(T)", "public boolean apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.toString()", "public java.lang.String toString()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.alwaysTrue()", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> alwaysTrue()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.alwaysFalse()", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> alwaysFalse()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.isNull()", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> isNull()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.notNull()", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> notNull()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.not(org.sonar.api.internal.google.common.base.Predicate<T>)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> not(org.sonar.api.internal.google.common.base.Predicate<T>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.and(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Predicate<? super T>>)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> and(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Predicate<? super T>>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.and(org.sonar.api.internal.google.common.base.Predicate<? super T>...)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> and(org.sonar.api.internal.google.common.base.Predicate<? super T>...)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.and(org.sonar.api.internal.google.common.base.Predicate<? super T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> and(org.sonar.api.internal.google.common.base.Predicate<? super T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.or(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Predicate<? super T>>)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> or(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Predicate<? super T>>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.or(org.sonar.api.internal.google.common.base.Predicate<? super T>...)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> or(org.sonar.api.internal.google.common.base.Predicate<? super T>...)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.or(org.sonar.api.internal.google.common.base.Predicate<? super T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> or(org.sonar.api.internal.google.common.base.Predicate<? super T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.equalTo(T)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> equalTo(T)"], ["org.sonar.api.internal.google.common.base.Predicate<java.lang.Object>", "org.sonar.api.internal.google.common.base.Predicates.instanceOf(java.lang.Class<?>)", "public static org.sonar.api.internal.google.common.base.Predicate<java.lang.Object> instanceOf(java.lang.Class<?>)"], ["org.sonar.api.internal.google.common.base.Predicate<java.lang.Class<?>>", "org.sonar.api.internal.google.common.base.Predicates.assignableFrom(java.lang.Class<?>)", "public static org.sonar.api.internal.google.common.base.Predicate<java.lang.Class<?>> assignableFrom(java.lang.Class<?>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.in(java.util.Collection<? extends T>)", "public static <T> org.sonar.api.internal.google.common.base.Predicate<T> in(java.util.Collection<? extends T>)"], ["<A, B> org.sonar.api.internal.google.common.base.Predicate<A>", "org.sonar.api.internal.google.common.base.Predicates.compose(org.sonar.api.internal.google.common.base.Predicate<B>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)", "public static <A, B> org.sonar.api.internal.google.common.base.Predicate<A> compose(org.sonar.api.internal.google.common.base.Predicate<B>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)"], ["org.sonar.api.internal.google.common.base.Predicate<java.lang.CharSequence>", "org.sonar.api.internal.google.common.base.Predicates.containsPattern(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Predicate<java.lang.CharSequence> containsPattern(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Predicate<java.lang.CharSequence>", "org.sonar.api.internal.google.common.base.Predicates.contains(java.util.regex.Pattern)", "public static org.sonar.api.internal.google.common.base.Predicate<java.lang.CharSequence> contains(java.util.regex.Pattern)"], ["boolean", "org.sonar.api.internal.google.common.base.Present.isPresent()", "public boolean isPresent()"], ["T", "org.sonar.api.internal.google.common.base.Present.get()", "public T get()"], ["T", "org.sonar.api.internal.google.common.base.Present.or(T)", "public T or(T)"], ["org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Present.or(org.sonar.api.internal.google.common.base.Optional<? extends T>)", "public org.sonar.api.internal.google.common.base.Optional<T> or(org.sonar.api.internal.google.common.base.Optional<? extends T>)"], ["T", "org.sonar.api.internal.google.common.base.Present.or(org.sonar.api.internal.google.common.base.Supplier<? extends T>)", "public T or(org.sonar.api.internal.google.common.base.Supplier<? extends T>)"], ["T", "org.sonar.api.internal.google.common.base.Present.orNull()", "public T orNull()"], ["java.util.Set<T>", "org.sonar.api.internal.google.common.base.Present.asSet()", "public java.util.Set<T> asSet()"], ["<V> org.sonar.api.internal.google.common.base.Optional<V>", "org.sonar.api.internal.google.common.base.Present.transform(org.sonar.api.internal.google.common.base.Function<? super T, V>)", "public <V> org.sonar.api.internal.google.common.base.Optional<V> transform(org.sonar.api.internal.google.common.base.Function<? super T, V>)"], ["boolean", "org.sonar.api.internal.google.common.base.Present.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Present.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Present.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.base.SmallCharMatcher.matches(char)", "public boolean matches(char)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$1.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public org.sonar.api.internal.google.common.base.Splitter$SplittingIterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$1.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$2$1.separatorStart(int)", "public int separatorStart(int)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$2$1.separatorEnd(int)", "public int separatorEnd(int)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$2.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public org.sonar.api.internal.google.common.base.Splitter$SplittingIterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$2.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$3$1.separatorStart(int)", "public int separatorStart(int)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$3$1.separatorEnd(int)", "public int separatorEnd(int)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$3.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public org.sonar.api.internal.google.common.base.Splitter$SplittingIterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$3.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$4$1.separatorStart(int)", "public int separatorStart(int)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$4$1.separatorEnd(int)", "public int separatorEnd(int)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$4.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public org.sonar.api.internal.google.common.base.Splitter$SplittingIterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$4.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)", "public java.util.Iterator iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator<java.lang.String>", "org.sonar.api.internal.google.common.base.Splitter$5.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Splitter$5.toString()", "public java.lang.String toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.base.Splitter$MapSplitter.split(java.lang.CharSequence)", "public java.util.Map<java.lang.String, java.lang.String> split(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(char)", "public static org.sonar.api.internal.google.common.base.Splitter on(char)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(org.sonar.api.internal.google.common.base.CharMatcher)", "public static org.sonar.api.internal.google.common.base.Splitter on(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Splitter on(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(java.util.regex.Pattern)", "public static org.sonar.api.internal.google.common.base.Splitter on(java.util.regex.Pattern)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.onPattern(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Splitter onPattern(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.fixedLength(int)", "public static org.sonar.api.internal.google.common.base.Splitter fixedLength(int)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.omitEmptyStrings()", "public org.sonar.api.internal.google.common.base.Splitter omitEmptyStrings()"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.limit(int)", "public org.sonar.api.internal.google.common.base.Splitter limit(int)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.trimResults()", "public org.sonar.api.internal.google.common.base.Splitter trimResults()"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.trimResults(org.sonar.api.internal.google.common.base.CharMatcher)", "public org.sonar.api.internal.google.common.base.Splitter trimResults(org.sonar.api.internal.google.common.base.CharMatcher)"], ["java.lang.Iterable<java.lang.String>", "org.sonar.api.internal.google.common.base.Splitter.split(java.lang.CharSequence)", "public java.lang.Iterable<java.lang.String> split(java.lang.CharSequence)"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.google.common.base.Splitter.splitToList(java.lang.CharSequence)", "public java.util.List<java.lang.String> splitToList(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.Splitter$MapSplitter", "org.sonar.api.internal.google.common.base.Splitter.withKeyValueSeparator(java.lang.String)", "public org.sonar.api.internal.google.common.base.Splitter$MapSplitter withKeyValueSeparator(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Splitter$MapSplitter", "org.sonar.api.internal.google.common.base.Splitter.withKeyValueSeparator(char)", "public org.sonar.api.internal.google.common.base.Splitter$MapSplitter withKeyValueSeparator(char)"], ["org.sonar.api.internal.google.common.base.Splitter$MapSplitter", "org.sonar.api.internal.google.common.base.Splitter.withKeyValueSeparator(org.sonar.api.internal.google.common.base.Splitter)", "public org.sonar.api.internal.google.common.base.Splitter$MapSplitter withKeyValueSeparator(org.sonar.api.internal.google.common.base.Splitter)"], ["org.sonar.api.internal.google.common.base.StandardSystemProperty[]", "org.sonar.api.internal.google.common.base.StandardSystemProperty.values()", "public static org.sonar.api.internal.google.common.base.StandardSystemProperty[] values()"], ["org.sonar.api.internal.google.common.base.StandardSystemProperty", "org.sonar.api.internal.google.common.base.StandardSystemProperty.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.base.StandardSystemProperty valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.StandardSystemProperty.key()", "public java.lang.String key()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.StandardSystemProperty.value()", "public java.lang.String value()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.StandardSystemProperty.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createUnstarted()", "public static org.sonar.api.internal.google.common.base.Stopwatch createUnstarted()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createUnstarted(org.sonar.api.internal.google.common.base.Ticker)", "public static org.sonar.api.internal.google.common.base.Stopwatch createUnstarted(org.sonar.api.internal.google.common.base.Ticker)"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createStarted()", "public static org.sonar.api.internal.google.common.base.Stopwatch createStarted()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createStarted(org.sonar.api.internal.google.common.base.Ticker)", "public static org.sonar.api.internal.google.common.base.Stopwatch createStarted(org.sonar.api.internal.google.common.base.Ticker)"], ["boolean", "org.sonar.api.internal.google.common.base.Stopwatch.isRunning()", "public boolean isRunning()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.start()", "public org.sonar.api.internal.google.common.base.Stopwatch start()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.stop()", "public org.sonar.api.internal.google.common.base.Stopwatch stop()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.reset()", "public org.sonar.api.internal.google.common.base.Stopwatch reset()"], ["long", "org.sonar.api.internal.google.common.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)", "public long elapsed(java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Stopwatch.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.nullToEmpty(java.lang.String)", "public static java.lang.String nullToEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.emptyToNull(java.lang.String)", "public static java.lang.String emptyToNull(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.Strings.isNullOrEmpty(java.lang.String)", "public static boolean isNullOrEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.padStart(java.lang.String, int, char)", "public static java.lang.String padStart(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.padEnd(java.lang.String, int, char)", "public static java.lang.String padEnd(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.repeat(java.lang.String, int)", "public static java.lang.String repeat(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.commonPrefix(java.lang.CharSequence, java.lang.CharSequence)", "public static java.lang.String commonPrefix(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.commonSuffix(java.lang.CharSequence, java.lang.CharSequence)", "public static java.lang.String commonSuffix(java.lang.CharSequence, java.lang.CharSequence)"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$ExpiringMemoizingSupplier.get()", "public T get()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$ExpiringMemoizingSupplier.toString()", "public java.lang.String toString()"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$MemoizingSupplier.get()", "public T get()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$MemoizingSupplier.toString()", "public java.lang.String toString()"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.get()", "public T get()"], ["boolean", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl[]", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.values()", "public static org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl[] values()"], ["org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl valueOf(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.apply(org.sonar.api.internal.google.common.base.Supplier<java.lang.Object>)", "public java.lang.Object apply(org.sonar.api.internal.google.common.base.Supplier<java.lang.Object>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.get()", "public T get()"], ["boolean", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.toString()", "public java.lang.String toString()"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$ThreadSafeSupplier.get()", "public T get()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$ThreadSafeSupplier.toString()", "public java.lang.String toString()"], ["<F, T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.compose(org.sonar.api.internal.google.common.base.Function<? super F, T>, org.sonar.api.internal.google.common.base.Supplier<F>)", "public static <F, T> org.sonar.api.internal.google.common.base.Supplier<T> compose(org.sonar.api.internal.google.common.base.Function<? super F, T>, org.sonar.api.internal.google.common.base.Supplier<F>)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.memoize(org.sonar.api.internal.google.common.base.Supplier<T>)", "public static <T> org.sonar.api.internal.google.common.base.Supplier<T> memoize(org.sonar.api.internal.google.common.base.Supplier<T>)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.memoizeWithExpiration(org.sonar.api.internal.google.common.base.Supplier<T>, long, java.util.concurrent.TimeUnit)", "public static <T> org.sonar.api.internal.google.common.base.Supplier<T> memoizeWithExpiration(org.sonar.api.internal.google.common.base.Supplier<T>, long, java.util.concurrent.TimeUnit)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.ofInstance(T)", "public static <T> org.sonar.api.internal.google.common.base.Supplier<T> ofInstance(T)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.synchronizedSupplier(org.sonar.api.internal.google.common.base.Supplier<T>)", "public static <T> org.sonar.api.internal.google.common.base.Supplier<T> synchronizedSupplier(org.sonar.api.internal.google.common.base.Supplier<T>)"], ["<T> org.sonar.api.internal.google.common.base.Function<org.sonar.api.internal.google.common.base.Supplier<T>, T>", "org.sonar.api.internal.google.common.base.Suppliers.supplierFunction()", "public static <T> org.sonar.api.internal.google.common.base.Function<org.sonar.api.internal.google.common.base.Supplier<T>, T> supplierFunction()"], ["<X extends java.lang.Throwable> void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>)", "public static <X extends java.lang.Throwable> void propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>) throws X"], ["void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable)", "public static void propagateIfPossible(java.lang.Throwable)"], ["<X extends java.lang.Throwable> void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X>)", "public static <X extends java.lang.Throwable> void propagateIfPossible(java.lang.Throwable, java.lang.Class<X>) throws X"], ["<X1 extends java.lang.Throwable, X2 extends java.lang.Throwable> void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)", "public static <X1 extends java.lang.Throwable, X2 extends java.lang.Throwable> void propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>) throws X1, X2"], ["java.lang.RuntimeException", "org.sonar.api.internal.google.common.base.Throwables.propagate(java.lang.Throwable)", "public static java.lang.RuntimeException propagate(java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.base.Throwables.getRootCause(java.lang.Throwable)", "public static java.lang.Throwable getRootCause(java.lang.Throwable)"], ["java.util.List<java.lang.Throwable>", "org.sonar.api.internal.google.common.base.Throwables.getCausalChain(java.lang.Throwable)", "public static java.util.List<java.lang.Throwable> getCausalChain(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Throwables.getStackTraceAsString(java.lang.Throwable)", "public static java.lang.String getStackTraceAsString(java.lang.Throwable)"], ["long", "org.sonar.api.internal.google.common.base.Ticker$1.read()", "public long read()"], ["org.sonar.api.internal.google.common.base.Ticker", "org.sonar.api.internal.google.common.base.Ticker.systemTicker()", "public static org.sonar.api.internal.google.common.base.Ticker systemTicker()"], ["int", "org.sonar.api.internal.google.common.base.Utf8.encodedLength(java.lang.CharSequence)", "public static int encodedLength(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.Utf8.isWellFormed(byte[])", "public static boolean isWellFormed(byte[])"], ["boolean", "org.sonar.api.internal.google.common.base.Utf8.isWellFormed(byte[], int, int)", "public static boolean isWellFormed(byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.base.Verify.verify(boolean)", "public static void verify(boolean)"], ["void", "org.sonar.api.internal.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object...)", "public static void verify(boolean, java.lang.String, java.lang.Object...)"], ["<T> T", "org.sonar.api.internal.google.common.base.Verify.verifyNotNull(T)", "public static <T> T verifyNotNull(T)"], ["<T> T", "org.sonar.api.internal.google.common.base.Verify.verifyNotNull(T, java.lang.String, java.lang.Object...)", "public static <T> T verifyNotNull(T, java.lang.String, java.lang.Object...)"], ["org.sonar.api.internal.google.common.base.VerifyException", "org.sonar.api.internal.google.common.base.VerifyException()", "public org.sonar.api.internal.google.common.base.VerifyException()"], ["org.sonar.api.internal.google.common.base.VerifyException", "org.sonar.api.internal.google.common.base.VerifyException(java.lang.String)", "public org.sonar.api.internal.google.common.base.VerifyException(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.base.internal.Finalizer.startFinalizer(java.lang.Class<?>, java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.ref.PhantomReference<java.lang.Object>)", "public static void startFinalizer(java.lang.Class<?>, java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.ref.PhantomReference<java.lang.Object>)"], ["void", "org.sonar.api.internal.google.common.base.internal.Finalizer.run()", "public void run()"], ["java.lang.reflect.Field", "org.sonar.api.internal.google.common.base.internal.Finalizer.getInheritableThreadLocalsField()", "public static java.lang.reflect.Field getInheritableThreadLocalsField()"], ["org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter()", "public org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter()"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordHits(int)", "public void recordHits(int)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordMisses(int)", "public void recordMisses(int)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadSuccess(long)", "public void recordLoadSuccess(long)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadException(long)", "public void recordLoadException(long)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordEviction()", "public void recordEviction()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.snapshot()", "public org.sonar.api.internal.google.common.cache.CacheStats snapshot()"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.incrementBy(org.sonar.api.internal.google.common.cache.AbstractCache$StatsCounter)", "public void incrementBy(org.sonar.api.internal.google.common.cache.AbstractCache$StatsCounter)"], ["V", "org.sonar.api.internal.google.common.cache.AbstractCache.get(K, java.util.concurrent.Callable<? extends V>)", "public V get(K, java.util.concurrent.Callable<? extends V>) throws java.util.concurrent.ExecutionException"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.AbstractCache.getAllPresent(java.lang.Iterable<?>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> getAllPresent(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.put(K, V)", "public void put(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.cleanUp()", "public void cleanUp()"], ["long", "org.sonar.api.internal.google.common.cache.AbstractCache.size()", "public long size()"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.invalidate(java.lang.Object)", "public void invalidate(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.invalidateAll(java.lang.Iterable<?>)", "public void invalidateAll(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.invalidateAll()", "public void invalidateAll()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.AbstractCache.stats()", "public org.sonar.api.internal.google.common.cache.CacheStats stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.cache.AbstractCache.asMap()", "public java.util.concurrent.ConcurrentMap<K, V> asMap()"], ["V", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.getUnchecked(K)", "public V getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.getAll(java.lang.Iterable<? extends K>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.apply(K)", "public final V apply(K)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.refresh(K)", "public void refresh(K)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordHits(int)", "public void recordHits(int)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordMisses(int)", "public void recordMisses(int)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordLoadSuccess(long)", "public void recordLoadSuccess(long)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordLoadException(long)", "public void recordLoadException(long)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordEviction()", "public void recordEviction()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.snapshot()", "public org.sonar.api.internal.google.common.cache.CacheStats snapshot()"], ["org.sonar.api.internal.google.common.cache.AbstractCache$StatsCounter", "org.sonar.api.internal.google.common.cache.CacheBuilder$2.get()", "public org.sonar.api.internal.google.common.cache.AbstractCache$StatsCounter get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.CacheBuilder$2.get()", "public java.lang.Object get()"], ["long", "org.sonar.api.internal.google.common.cache.CacheBuilder$3.read()", "public long read()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener[]", "org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener.values()", "public static org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener[] values()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener", "org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener.onRemoval(org.sonar.api.internal.google.common.cache.RemovalNotification<java.lang.Object, java.lang.Object>)", "public void onRemoval(org.sonar.api.internal.google.common.cache.RemovalNotification<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher[]", "org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher.values()", "public static org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher[] values()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher", "org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher.weigh(java.lang.Object, java.lang.Object)", "public int weigh(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.CacheBuilder.newBuilder()", "public static org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> newBuilder()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.CacheBuilder.from(org.sonar.api.internal.google.common.cache.CacheBuilderSpec)", "public static org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> from(org.sonar.api.internal.google.common.cache.CacheBuilderSpec)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.CacheBuilder.from(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object> from(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.initialCapacity(int)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> initialCapacity(int)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.concurrencyLevel(int)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> concurrencyLevel(int)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.maximumSize(long)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> maximumSize(long)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.maximumWeight(long)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> maximumWeight(long)"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.CacheBuilder<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.weigher(org.sonar.api.internal.google.common.cache.Weigher<? super K1, ? super V1>)", "public <K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.CacheBuilder<K1, V1> weigher(org.sonar.api.internal.google.common.cache.Weigher<? super K1, ? super V1>)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.weakKeys()", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> weakKeys()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.weakValues()", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> weakValues()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.softValues()", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> softValues()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.expireAfterWrite(long, java.util.concurrent.TimeUnit)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.expireAfterAccess(long, java.util.concurrent.TimeUnit)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.refreshAfterWrite(long, java.util.concurrent.TimeUnit)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> refreshAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.ticker(org.sonar.api.internal.google.common.base.Ticker)", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> ticker(org.sonar.api.internal.google.common.base.Ticker)"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.CacheBuilder<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.removalListener(org.sonar.api.internal.google.common.cache.RemovalListener<? super K1, ? super V1>)", "public <K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.CacheBuilder<K1, V1> removalListener(org.sonar.api.internal.google.common.cache.RemovalListener<? super K1, ? super V1>)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.recordStats()", "public org.sonar.api.internal.google.common.cache.CacheBuilder<K, V> recordStats()"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.LoadingCache<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.build(org.sonar.api.internal.google.common.cache.CacheLoader<? super K1, V1>)", "public <K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.LoadingCache<K1, V1> build(org.sonar.api.internal.google.common.cache.CacheLoader<? super K1, V1>)"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.Cache<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.build()", "public <K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.Cache<K1, V1> build()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheBuilder.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$DurationParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$IntegerParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec$KeyStrengthParser", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$KeyStrengthParser(org.sonar.api.internal.google.common.cache.LocalCache$Strength)", "public org.sonar.api.internal.google.common.cache.CacheBuilderSpec$KeyStrengthParser(org.sonar.api.internal.google.common.cache.LocalCache$Strength)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$KeyStrengthParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$LongParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$RecordStatsParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec$ValueStrengthParser", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$ValueStrengthParser(org.sonar.api.internal.google.common.cache.LocalCache$Strength)", "public org.sonar.api.internal.google.common.cache.CacheBuilderSpec$ValueStrengthParser(org.sonar.api.internal.google.common.cache.LocalCache$Strength)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$ValueStrengthParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)", "public void parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.parse(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.CacheBuilderSpec parse(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.disableCaching()", "public static org.sonar.api.internal.google.common.cache.CacheBuilderSpec disableCaching()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.toParsableString()", "public java.lang.String toParsableString()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$1$1.call()", "public V call() throws java.lang.Exception"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$1.load(K)", "public V load(K) throws java.lang.Exception"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.cache.CacheLoader$1.reload(K, V)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> reload(K, V) throws java.lang.Exception"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader$1.loadAll(java.lang.Iterable<? extends K>)", "public java.util.Map<K, V> loadAll(java.lang.Iterable<? extends K>) throws java.lang.Exception"], ["org.sonar.api.internal.google.common.cache.CacheLoader$FunctionToCacheLoader", "org.sonar.api.internal.google.common.cache.CacheLoader$FunctionToCacheLoader(org.sonar.api.internal.google.common.base.Function<K, V>)", "public org.sonar.api.internal.google.common.cache.CacheLoader$FunctionToCacheLoader(org.sonar.api.internal.google.common.base.Function<K, V>)"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$FunctionToCacheLoader.load(K)", "public V load(K)"], ["org.sonar.api.internal.google.common.cache.CacheLoader$InvalidCacheLoadException", "org.sonar.api.internal.google.common.cache.CacheLoader$InvalidCacheLoadException(java.lang.String)", "public org.sonar.api.internal.google.common.cache.CacheLoader$InvalidCacheLoadException(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheLoader$SupplierToCacheLoader", "org.sonar.api.internal.google.common.cache.CacheLoader$SupplierToCacheLoader(org.sonar.api.internal.google.common.base.Supplier<V>)", "public org.sonar.api.internal.google.common.cache.CacheLoader$SupplierToCacheLoader(org.sonar.api.internal.google.common.base.Supplier<V>)"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$SupplierToCacheLoader.load(java.lang.Object)", "public V load(java.lang.Object)"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.cache.CacheLoader.reload(K, V)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> reload(K, V) throws java.lang.Exception"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.loadAll(java.lang.Iterable<? extends K>)", "public java.util.Map<K, V> loadAll(java.lang.Iterable<? extends K>) throws java.lang.Exception"], ["<K, V> org.sonar.api.internal.google.common.cache.CacheLoader<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.from(org.sonar.api.internal.google.common.base.Function<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.cache.CacheLoader<K, V> from(org.sonar.api.internal.google.common.base.Function<K, V>)"], ["<V> org.sonar.api.internal.google.common.cache.CacheLoader<java.lang.Object, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.from(org.sonar.api.internal.google.common.base.Supplier<V>)", "public static <V> org.sonar.api.internal.google.common.cache.CacheLoader<java.lang.Object, V> from(org.sonar.api.internal.google.common.base.Supplier<V>)"], ["<K, V> org.sonar.api.internal.google.common.cache.CacheLoader<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.asyncReloading(org.sonar.api.internal.google.common.cache.CacheLoader<K, V>, java.util.concurrent.Executor)", "public static <K, V> org.sonar.api.internal.google.common.cache.CacheLoader<K, V> asyncReloading(org.sonar.api.internal.google.common.cache.CacheLoader<K, V>, java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheStats(long, long, long, long, long, long)", "public org.sonar.api.internal.google.common.cache.CacheStats(long, long, long, long, long, long)"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.requestCount()", "public long requestCount()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.hitCount()", "public long hitCount()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.hitRate()", "public double hitRate()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.missCount()", "public long missCount()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.missRate()", "public double missRate()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.loadCount()", "public long loadCount()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.loadSuccessCount()", "public long loadSuccessCount()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.loadExceptionCount()", "public long loadExceptionCount()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.loadExceptionRate()", "public double loadExceptionRate()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.totalLoadTime()", "public long totalLoadTime()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.averageLoadPenalty()", "public double averageLoadPenalty()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.evictionCount()", "public long evictionCount()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheStats.minus(org.sonar.api.internal.google.common.cache.CacheStats)", "public org.sonar.api.internal.google.common.cache.CacheStats minus(org.sonar.api.internal.google.common.cache.CacheStats)"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheStats.plus(org.sonar.api.internal.google.common.cache.CacheStats)", "public org.sonar.api.internal.google.common.cache.CacheStats plus(org.sonar.api.internal.google.common.cache.CacheStats)"], ["int", "org.sonar.api.internal.google.common.cache.CacheStats.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.cache.CacheStats.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheStats.toString()", "public java.lang.String toString()"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingCache.getIfPresent(java.lang.Object)", "public V getIfPresent(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingCache.get(K, java.util.concurrent.Callable<? extends V>)", "public V get(K, java.util.concurrent.Callable<? extends V>) throws java.util.concurrent.ExecutionException"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.ForwardingCache.getAllPresent(java.lang.Iterable<?>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> getAllPresent(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.put(K, V)", "public void put(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.invalidate(java.lang.Object)", "public void invalidate(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.invalidateAll(java.lang.Iterable<?>)", "public void invalidateAll(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.invalidateAll()", "public void invalidateAll()"], ["long", "org.sonar.api.internal.google.common.cache.ForwardingCache.size()", "public long size()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.ForwardingCache.stats()", "public org.sonar.api.internal.google.common.cache.CacheStats stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.cache.ForwardingCache.asMap()", "public java.util.concurrent.ConcurrentMap<K, V> asMap()"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.cleanUp()", "public void cleanUp()"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.get(K)", "public V get(K) throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.getUnchecked(K)", "public V getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.getAll(java.lang.Iterable<? extends K>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.apply(K)", "public V apply(K)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.refresh(K)", "public void refresh(K)"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$1.get()", "public java.lang.Object get()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$1.getWeight()", "public int getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$1.getEntry()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getEntry()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object> copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$1.isLoading()", "public boolean isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$1.isActive()", "public boolean isActive()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$1.waitForValue()", "public java.lang.Object waitForValue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$1.notifyNewValue(java.lang.Object)", "public void notifyNewValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$2.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$2.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$2.poll()", "public java.lang.Object poll()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$2.size()", "public int size()"], ["java.util.Iterator<java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$2.iterator()", "public java.util.Iterator<java.lang.Object> iterator()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractCacheSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractCacheSet.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractCacheSet.clear()", "public void clear()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getValueReference()", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)", "public void setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getNext()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNext()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getHash()", "public int getHash()"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getKey()", "public K getKey()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.offer(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public boolean offer(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.peek()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> peek()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.poll()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.clear()", "public void clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.poll()", "public java.lang.Object poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory[]", "org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory.values()", "public static org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory[] values()"], ["org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory", "org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$EntryIterator.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$EntryIterator.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$HashIterator.hasNext()", "public boolean hasNext()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$HashIterator.remove()", "public void remove()"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$KeyIterator.next()", "public K next()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.cache.LocalCache$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.get(K)", "public V get(K) throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.getUnchecked(K)", "public V getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.getAll(java.lang.Iterable<? extends K>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.apply(K)", "public final V apply(K)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.refresh(K)", "public void refresh(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference$1.apply(V)", "public V apply(V)"], ["org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference()", "public org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference()"], ["org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)", "public org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.isActive()", "public boolean isActive()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.getWeight()", "public int getWeight()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.set(V)", "public boolean set(V)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.setException(java.lang.Throwable)", "public boolean setException(java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.loadFuture(K, org.sonar.api.internal.google.common.cache.CacheLoader<? super K, V>)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> loadFuture(K, org.sonar.api.internal.google.common.cache.CacheLoader<? super K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.elapsedNanos()", "public long elapsedNanos()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.waitForValue()", "public V waitForValue() throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.get()", "public V get()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.getOldValue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> getOldValue()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.getEntry()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.get(K)", "public V get(K) throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(K)", "public V getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.getAll(java.lang.Iterable<? extends K>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> getAll(java.lang.Iterable<? extends K>) throws java.util.concurrent.ExecutionException"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.refresh(K)", "public void refresh(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.apply(K)", "public final V apply(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache$1.load(java.lang.Object)", "public V load(java.lang.Object) throws java.lang.Exception"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.getIfPresent(java.lang.Object)", "public V getIfPresent(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.get(K, java.util.concurrent.Callable<? extends V>)", "public V get(K, java.util.concurrent.Callable<? extends V>) throws java.util.concurrent.ExecutionException"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.getAllPresent(java.lang.Iterable<?>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> getAllPresent(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.put(K, V)", "public void put(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.invalidate(java.lang.Object)", "public void invalidate(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.invalidateAll(java.lang.Iterable<?>)", "public void invalidateAll(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.invalidateAll()", "public void invalidateAll()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.size()", "public long size()"], ["java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.asMap()", "public java.util.concurrent.ConcurrentMap<K, V> asMap()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.stats()", "public org.sonar.api.internal.google.common.cache.CacheStats stats()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.cleanUp()", "public void cleanUp()"], ["org.sonar.api.internal.google.common.cache.LocalCache$NullEntry[]", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.values()", "public static org.sonar.api.internal.google.common.cache.LocalCache$NullEntry[] values()"], ["org.sonar.api.internal.google.common.cache.LocalCache$NullEntry", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.LocalCache$NullEntry valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getValueReference()", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object> getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>)", "public void setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getNext()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getNext()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getHash()", "public int getHash()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getKey()", "public java.lang.Object getKey()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$Segment$1.run()", "public void run()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.getWeight()", "public int getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.getEntry()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.isActive()", "public boolean isActive()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.waitForValue()", "public V waitForValue()"], ["org.sonar.api.internal.google.common.cache.LocalCache$Strength[]", "org.sonar.api.internal.google.common.cache.LocalCache$Strength.values()", "public static org.sonar.api.internal.google.common.cache.LocalCache$Strength[] values()"], ["org.sonar.api.internal.google.common.cache.LocalCache$Strength", "org.sonar.api.internal.google.common.cache.LocalCache$Strength.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.LocalCache$Strength valueOf(java.lang.String)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getKey()", "public K getKey()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getValueReference()", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)", "public void setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getHash()", "public int getHash()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getNext()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNext()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.get()", "public V get()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.getWeight()", "public int getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.getEntry()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.isActive()", "public boolean isActive()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.waitForValue()", "public V waitForValue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$ValueIterator.next()", "public V next()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$Values.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$Values.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$Values.clear()", "public void clear()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.cache.LocalCache$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getKey()", "public K getKey()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getAccessTime()", "public long getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setAccessTime(long)", "public void setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getNextInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getPreviousInAccessQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getValueReference()", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)", "public void setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getHash()", "public int getHash()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getNext()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNext()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.getWeight()", "public int getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.getEntry()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getEntry()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.notifyNewValue(V)", "public void notifyNewValue(V)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.isLoading()", "public boolean isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.isActive()", "public boolean isActive()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.waitForValue()", "public V waitForValue()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedSoftValueReference.getWeight()", "public int getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedSoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedStrongValueReference.getWeight()", "public int getWeight()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedWeakValueReference.getWeight()", "public int getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedWeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.getWriteTime()", "public long getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.setWriteTime(long)", "public void setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.getNextInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.getPreviousInWriteQueue()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public void setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.offer(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)", "public boolean offer(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.peek()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> peek()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.poll()", "public org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V> poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.clear()", "public void clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.poll()", "public java.lang.Object poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.getValue()", "public V getValue()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.hashCode()", "public int hashCode()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.setValue(V)", "public V setValue(V)"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache.cleanUp()", "public void cleanUp()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache.size()", "public int size()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.getIfPresent(java.lang.Object)", "public V getIfPresent(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.replace(K, V)", "public V replace(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache.clear()", "public void clear()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.cache.LocalCache.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.cache.LocalCache.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["org.sonar.api.internal.google.common.cache.LongAddable", "org.sonar.api.internal.google.common.cache.LongAddables$1.get()", "public org.sonar.api.internal.google.common.cache.LongAddable get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LongAddables$1.get()", "public java.lang.Object get()"], ["org.sonar.api.internal.google.common.cache.LongAddable", "org.sonar.api.internal.google.common.cache.LongAddables$2.get()", "public org.sonar.api.internal.google.common.cache.LongAddable get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LongAddables$2.get()", "public java.lang.Object get()"], ["void", "org.sonar.api.internal.google.common.cache.LongAddables$PureJavaLongAddable.increment()", "public void increment()"], ["void", "org.sonar.api.internal.google.common.cache.LongAddables$PureJavaLongAddable.add(long)", "public void add(long)"], ["long", "org.sonar.api.internal.google.common.cache.LongAddables$PureJavaLongAddable.sum()", "public long sum()"], ["org.sonar.api.internal.google.common.cache.LongAddable", "org.sonar.api.internal.google.common.cache.LongAddables.create()", "public static org.sonar.api.internal.google.common.cache.LongAddable create()"], ["org.sonar.api.internal.google.common.cache.LongAdder", "org.sonar.api.internal.google.common.cache.LongAdder()", "public org.sonar.api.internal.google.common.cache.LongAdder()"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.add(long)", "public void add(long)"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.increment()", "public void increment()"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.decrement()", "public void decrement()"], ["long", "org.sonar.api.internal.google.common.cache.LongAdder.sum()", "public long sum()"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.reset()", "public void reset()"], ["long", "org.sonar.api.internal.google.common.cache.LongAdder.sumThenReset()", "public long sumThenReset()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.LongAdder.toString()", "public java.lang.String toString()"], ["long", "org.sonar.api.internal.google.common.cache.LongAdder.longValue()", "public long longValue()"], ["int", "org.sonar.api.internal.google.common.cache.LongAdder.intValue()", "public int intValue()"], ["float", "org.sonar.api.internal.google.common.cache.LongAdder.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.google.common.cache.LongAdder.doubleValue()", "public double doubleValue()"], ["org.sonar.api.internal.google.common.cache.RemovalCause[]", "org.sonar.api.internal.google.common.cache.RemovalCause.values()", "public static org.sonar.api.internal.google.common.cache.RemovalCause[] values()"], ["org.sonar.api.internal.google.common.cache.RemovalCause", "org.sonar.api.internal.google.common.cache.RemovalCause.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.cache.RemovalCause valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.RemovalListeners$1$1.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.cache.RemovalListeners$1.onRemoval(org.sonar.api.internal.google.common.cache.RemovalNotification<K, V>)", "public void onRemoval(org.sonar.api.internal.google.common.cache.RemovalNotification<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.cache.RemovalListener<K, V>", "org.sonar.api.internal.google.common.cache.RemovalListeners.asynchronous(org.sonar.api.internal.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)", "public static <K, V> org.sonar.api.internal.google.common.cache.RemovalListener<K, V> asynchronous(org.sonar.api.internal.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.cache.RemovalCause", "org.sonar.api.internal.google.common.cache.RemovalNotification.getCause()", "public org.sonar.api.internal.google.common.cache.RemovalCause getCause()"], ["boolean", "org.sonar.api.internal.google.common.cache.RemovalNotification.wasEvicted()", "public boolean wasEvicted()"], ["K", "org.sonar.api.internal.google.common.cache.RemovalNotification.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.cache.RemovalNotification.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.cache.RemovalNotification.setValue(V)", "public final V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.cache.RemovalNotification.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.cache.RemovalNotification.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.RemovalNotification.toString()", "public java.lang.String toString()"], ["sun.misc.Unsafe", "org.sonar.api.internal.google.common.cache.Striped64$1.run()", "public sun.misc.Unsafe run() throws java.lang.Exception"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.Striped64$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1$1.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.next()", "public java.util.Map$Entry<K, V> next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.next()", "public java.lang.Object next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractBiMap$Inverse.values()", "public java.util.Collection values()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.AbstractBiMap$ValueSet.iterator()", "public java.util.Iterator<V> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$ValueSet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$ValueSet.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractBiMap$ValueSet.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap.clear()", "public void clear()"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.AbstractBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.AbstractBiMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.AbstractBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractBiMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractBiMap.values()", "public java.util.Collection values()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.hasNext()", "public final boolean hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.next()", "public final E next()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.nextIndex()", "public final int nextIndex()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.hasPrevious()", "public final boolean hasPrevious()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.previous()", "public final E previous()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.previousIndex()", "public final int previousIndex()"], ["org.sonar.api.internal.google.common.collect.AbstractIterator$State[]", "org.sonar.api.internal.google.common.collect.AbstractIterator$State.values()", "public static org.sonar.api.internal.google.common.collect.AbstractIterator$State[] values()"], ["org.sonar.api.internal.google.common.collect.AbstractIterator$State", "org.sonar.api.internal.google.common.collect.AbstractIterator$State.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.AbstractIterator$State valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractIterator.hasNext()", "public final boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractIterator.next()", "public final T next()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractIterator.peek()", "public final T peek()"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.put(K, V)", "public boolean put(K, V)"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()", "public java.util.Map$Entry<K, java.util.Collection<V>> next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()", "public java.lang.Object next()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.keySet()", "public java.util.Set<K> keySet()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.size()", "public int size()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.remove(java.lang.Object)", "public java.util.Collection<V> remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.clear()", "public void clear()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$Itr.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$Itr.next()", "public T next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$Itr.remove()", "public void remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet$1.hasNext()", "public boolean hasNext()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet$1.next()", "public K next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet$1.remove()", "public void remove()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.hashCode()", "public int hashCode()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherEntry(K)", "public java.util.Map$Entry<K, java.util.Collection<V>> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.firstEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> firstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lastEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> lastEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollFirstEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> pollFirstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollLastEntry()", "public java.util.Map$Entry<K, java.util.Collection<V>> pollLastEntry()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.descendingMap()", "public java.util.NavigableMap<K, java.util.Collection<V>> descendingMap()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, K)", "public java.util.NavigableMap<K, java.util.Collection<V>> subMap(K, K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, java.util.Collection<V>> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K)", "public java.util.NavigableMap<K, java.util.Collection<V>> headMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K, boolean)", "public java.util.NavigableMap<K, java.util.Collection<V>> headMap(K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K)", "public java.util.NavigableMap<K, java.util.Collection<V>> tailMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, java.util.Collection<V>> tailMap(K, boolean)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()", "public java.util.SortedSet keySet()"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()", "public java.util.Set keySet()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.lower(K)", "public K lower(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.floor(K)", "public K floor(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.ceiling(K)", "public K ceiling(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.higher(K)", "public K higher(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollFirst()", "public K pollFirst()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollLast()", "public K pollLast()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.descendingSet()", "public java.util.NavigableSet<K> descendingSet()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.descendingIterator()", "public java.util.Iterator<K> descendingIterator()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(K)", "public java.util.NavigableSet<K> headSet(K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(K, boolean)", "public java.util.NavigableSet<K> headSet(K, boolean)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(K, K)", "public java.util.NavigableSet<K> subSet(K, K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(K, boolean, K, boolean)", "public java.util.NavigableSet<K> subSet(K, boolean, K, boolean)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(K)", "public java.util.NavigableSet<K> tailSet(K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(K, boolean)", "public java.util.NavigableSet<K> tailSet(K, boolean)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.firstKey()", "public K firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.headMap(K)", "public java.util.SortedMap<K, java.util.Collection<V>> headMap(K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.subMap(K, K)", "public java.util.SortedMap<K, java.util.Collection<V>> subMap(K, K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.tailMap(K)", "public java.util.SortedMap<K, java.util.Collection<V>> tailMap(K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.keySet()", "public java.util.SortedSet<K> keySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.keySet()", "public java.util.Set keySet()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.first()", "public K first()"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.last()", "public K last()"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.hasNext()", "public boolean hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.next()", "public V next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.remove()", "public void remove()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.toString()", "public java.lang.String toString()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.add(V)", "public boolean add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.addAll(java.util.Collection<? extends V>)", "public boolean addAll(java.util.Collection<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator(org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList, int)", "public org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator(org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.hasPrevious()", "public boolean hasPrevious()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previous()", "public V previous()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.nextIndex()", "public int nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previousIndex()", "public int previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.set(V)", "public void set(V)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.add(V)", "public void add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.addAll(int, java.util.Collection<? extends V>)", "public boolean addAll(int, java.util.Collection<? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.get(int)", "public V get(int)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.set(int, V)", "public V set(int, V)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.add(int, V)", "public void add(int, V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.remove(int)", "public V remove(int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.listIterator()", "public java.util.ListIterator<V> listIterator()"], ["java.util.ListIterator<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.listIterator(int)", "public java.util.ListIterator<V> listIterator(int)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.subList(int, int)", "public java.util.List<V> subList(int, int)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.lower(V)", "public V lower(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.floor(V)", "public V floor(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.ceiling(V)", "public V ceiling(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.higher(V)", "public V higher(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollFirst()", "public V pollFirst()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollLast()", "public V pollLast()"], ["java.util.NavigableSet<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.descendingSet()", "public java.util.NavigableSet<V> descendingSet()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.descendingIterator()", "public java.util.Iterator<V> descendingIterator()"], ["java.util.NavigableSet<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.subSet(V, boolean, V, boolean)", "public java.util.NavigableSet<V> subSet(V, boolean, V, boolean)"], ["java.util.NavigableSet<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.headSet(V, boolean)", "public java.util.NavigableSet<V> headSet(V, boolean)"], ["java.util.NavigableSet<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.tailSet(V, boolean)", "public java.util.NavigableSet<V> tailSet(V, boolean)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.comparator()", "public java.util.Comparator<? super V> comparator()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.first()", "public V first()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.last()", "public V last()"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.headSet(V)", "public java.util.SortedSet<V> headSet(V)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.subSet(V, V)", "public java.util.SortedSet<V> subSet(V, V)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.tailSet(V)", "public java.util.SortedSet<V> tailSet(V)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.put(K, V)", "public boolean put(K, V)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.clear()", "public void clear()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1$1.getElement()", "public E getElement()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1$1.getCount()", "public int getCount()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1.hasNext()", "public boolean hasNext()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1.next()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1.next()", "public java.lang.Object next()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.hasNext()", "public boolean hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.next()", "public E next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.remove()", "public void remove()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.entrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> entrySet()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.clear()", "public void clear()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.size()", "public int size()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.add(E, int)", "public int add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.setCount(E, int)", "public int setCount(E, int)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Entries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultimap$EntrySet.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap$EntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Values.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Values.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.keySet()", "public java.util.Set<K> keySet()"], ["org.sonar.api.internal.google.common.collect.Multiset<K>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset<K> keys()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultimap.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMultimap.toString()", "public java.lang.String toString()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.AbstractMultiset$EntrySet.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset$EntrySet.size()", "public int size()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.AbstractMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.add(E)", "public boolean add(E)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.add(E, int)", "public int add(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMultiset.clear()", "public void clear()"], ["java.util.Set<E>", "org.sonar.api.internal.google.common.collect.AbstractMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.AbstractMultiset.entrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMultiset.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.firstKey()", "public K firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.floorKey(K)", "public K floorKey(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.contains(C)", "public boolean contains(C)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)", "public void add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public boolean enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public void addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.removeAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public void removeAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.toString()", "public final java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractSequentialIterator.hasNext()", "public final boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractSequentialIterator.next()", "public final T next()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()", "public java.util.SortedMap<K, java.util.Collection<V>> asMap()"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.AbstractSortedKeySortedSetMultimap.keySet()", "public java.util.SortedSet<K> keySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedKeySortedSetMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset$1.iterator()", "public java.util.Iterator<E> iterator()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> firstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> lastEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.pollFirstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.pollLastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.clear()", "public void clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.size()", "public int size()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.AbstractTable$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable$Values.clear()", "public void clear()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractTable$Values.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["java.util.Set<R>", "org.sonar.api.internal.google.common.collect.AbstractTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Set<C>", "org.sonar.api.internal.google.common.collect.AbstractTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable.clear()", "public void clear()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.AbstractTable.cellSet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.AbstractTable.values()", "public java.util.Collection<V> values()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractTable.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractTable.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.sortedCopy(java.lang.Iterable<E>)", "public <E> java.util.List<E> sortedCopy(java.lang.Iterable<E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.immutableSortedCopy(java.lang.Iterable<E>)", "public <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> immutableSortedCopy(java.lang.Iterable<E>)"], ["<S> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.reverse()", "public <S> org.sonar.api.internal.google.common.collect.Ordering<S> reverse()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.toString()", "public java.lang.String toString()"], ["<K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.create()", "public static <K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V> create()"], ["<K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.create(int, int)", "public static <K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V> create(int, int)"], ["<K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V> create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.trimToSize()", "public void trimToSize()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.asMap()", "public java.util.Map asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.List replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.removeAll(java.lang.Object)", "public java.util.List removeAll(java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.get(java.lang.Object)", "public java.util.List get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.values()", "public java.util.Collection values()"], ["void", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.size()", "public int size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.keySet()", "public java.util.Set keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.isEmpty()", "public boolean isEmpty()"], ["R", "org.sonar.api.internal.google.common.collect.ArrayTable$1$1.getRowKey()", "public R getRowKey()"], ["C", "org.sonar.api.internal.google.common.collect.ArrayTable$1$1.getColumnKey()", "public C getColumnKey()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$1$1.getValue()", "public V getValue()"], ["K", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1$1$1.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1$1$1.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1$1$1.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.keySet()", "public java.util.Set<K> keySet()"], ["int", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.clear()", "public void clear()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.ArrayTable$ColumnMap.put(C, java.util.Map<R, V>)", "public java.util.Map<R, V> put(C, java.util.Map<R, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ArrayTable$ColumnMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable$RowMap.put(R, java.util.Map<C, V>)", "public java.util.Map<C, V> put(R, java.util.Map<C, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ArrayTable$RowMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ArrayTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.ArrayTable<R, C, V> create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ArrayTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.create(org.sonar.api.internal.google.common.collect.Table<R, C, V>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.ArrayTable<R, C, V> create(org.sonar.api.internal.google.common.collect.Table<R, C, V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<R>", "org.sonar.api.internal.google.common.collect.ArrayTable.rowKeyList()", "public org.sonar.api.internal.google.common.collect.ImmutableList<R> rowKeyList()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<C>", "org.sonar.api.internal.google.common.collect.ArrayTable.columnKeyList()", "public org.sonar.api.internal.google.common.collect.ImmutableList<C> columnKeyList()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.at(int, int)", "public V at(int, int)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.set(int, int, V)", "public V set(int, int, V)"], ["V[][]", "org.sonar.api.internal.google.common.collect.ArrayTable.toArray(java.lang.Class<V>)", "public V[][] toArray(java.lang.Class<V>)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable.clear()", "public void clear()"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable.eraseAll()", "public void eraseAll()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.isEmpty()", "public boolean isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)", "public V erase(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ArrayTable.size()", "public int size()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable.cellSet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.column(C)", "public java.util.Map<R, V> column(C)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<C>", "org.sonar.api.internal.google.common.collect.ArrayTable.columnKeySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<C> columnKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.row(R)", "public java.util.Map<C, V> row(R)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<R>", "org.sonar.api.internal.google.common.collect.ArrayTable.rowKeySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<R> rowKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.ArrayTable.values()", "public java.util.Collection<V> values()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ArrayTable.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.ArrayTable.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ArrayTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ArrayTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$1.iterator()", "public java.util.Iterator<T> iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$2.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$2.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PostOrderIterator.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PostOrderIterator.next()", "public T next()"], ["boolean", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PreOrderIterator.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PreOrderIterator.next()", "public T next()"], ["T", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PreOrderIterator.peek()", "public T peek()"], ["org.sonar.api.internal.google.common.collect.BinaryTreeTraverser", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser()", "public org.sonar.api.internal.google.common.collect.BinaryTreeTraverser()"], ["java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser.children(T)", "public final java.lang.Iterable<T> children(T)"], ["org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser.inOrderTraversal(T)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<T> inOrderTraversal(T)"], ["org.sonar.api.internal.google.common.collect.BoundType[]", "org.sonar.api.internal.google.common.collect.BoundType.values()", "public static org.sonar.api.internal.google.common.collect.BoundType[] values()"], ["org.sonar.api.internal.google.common.collect.BoundType", "org.sonar.api.internal.google.common.collect.BoundType.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.BoundType valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.compare(F, F)", "public int compare(F, F)"], ["boolean", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.CartesianList$1.size()", "public int size()"], ["E", "org.sonar.api.internal.google.common.collect.CartesianList$1.get(int)", "public E get(int)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.CartesianList.get(int)", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> get(int)"], ["int", "org.sonar.api.internal.google.common.collect.CartesianList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.CartesianList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.CartesianList.get(int)", "public java.lang.Object get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Collections2$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["void", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.size()", "public int size()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.toArray(T[])", "public <T> T[] toArray(T[])"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.iterator()", "public java.util.Iterator<java.util.List<E>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.iterator()", "public java.util.Iterator<java.util.List<E>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.collect.Collections2$TransformedCollection.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$TransformedCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Collections2$TransformedCollection.iterator()", "public java.util.Iterator<T> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$TransformedCollection.size()", "public int size()"], ["<E> java.util.Collection<E>", "org.sonar.api.internal.google.common.collect.Collections2.filter(java.util.Collection<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public static <E> java.util.Collection<E> filter(java.util.Collection<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<F, T> java.util.Collection<T>", "org.sonar.api.internal.google.common.collect.Collections2.transform(java.util.Collection<F>, org.sonar.api.internal.google.common.base.Function<? super F, T>)", "public static <F, T> java.util.Collection<T> transform(java.util.Collection<F>, org.sonar.api.internal.google.common.base.Function<? super F, T>)"], ["<E extends java.lang.Comparable<? super E>> java.util.Collection<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>)", "public static <E extends java.lang.Comparable<? super E>> java.util.Collection<java.util.List<E>> orderedPermutations(java.lang.Iterable<E>)"], ["<E> java.util.Collection<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)", "public static <E> java.util.Collection<java.util.List<E>> orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)"], ["<E> java.util.Collection<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2.permutations(java.util.Collection<E>)", "public static <E> java.util.Collection<java.util.List<E>> permutations(java.util.Collection<E>)"], ["int", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.compare(T, T)", "public int compare(T, T)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(java.lang.Comparable, java.lang.Comparable)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(T, T, java.util.Comparator<T>)", "public <T> org.sonar.api.internal.google.common.collect.ComparisonChain compare(T, T, java.util.Comparator<T>)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(int, int)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(int, int)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(long, long)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(long, long)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(float, float)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(float, float)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(double, double)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(double, double)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compareTrueFirst(boolean, boolean)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compareTrueFirst(boolean, boolean)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compareFalseFirst(boolean, boolean)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compareFalseFirst(boolean, boolean)"], ["int", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.result()", "public int result()"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(java.lang.Comparable, java.lang.Comparable)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(T, T, java.util.Comparator<T>)", "public <T> org.sonar.api.internal.google.common.collect.ComparisonChain compare(T, T, java.util.Comparator<T>)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(int, int)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(int, int)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(long, long)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(long, long)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(float, float)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(float, float)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(double, double)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compare(double, double)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compareTrueFirst(boolean, boolean)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compareTrueFirst(boolean, boolean)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compareFalseFirst(boolean, boolean)", "public org.sonar.api.internal.google.common.collect.ComparisonChain compareFalseFirst(boolean, boolean)"], ["int", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.result()", "public int result()"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain.start()", "public static org.sonar.api.internal.google.common.collect.ComparisonChain start()"], ["int", "org.sonar.api.internal.google.common.collect.CompoundOrdering.compare(T, T)", "public int compare(T, T)"], ["boolean", "org.sonar.api.internal.google.common.collect.CompoundOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.CompoundOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.CompoundOrdering.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.ComputationException", "org.sonar.api.internal.google.common.collect.ComputationException(java.lang.Throwable)", "public org.sonar.api.internal.google.common.collect.ComputationException(java.lang.Throwable)"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.get()", "public V get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.getEntry()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.waitForValue()", "public V waitForValue() throws java.util.concurrent.ExecutionException"], ["void", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.get()", "public V get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.getEntry()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.waitForValue()", "public V waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference(org.sonar.api.internal.google.common.base.Function<? super K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference(org.sonar.api.internal.google.common.base.Function<? super K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.get()", "public V get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.getEntry()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.waitForValue()", "public V waitForValue() throws java.util.concurrent.ExecutionException"], ["void", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$3.next()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> next()"], ["void", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$3.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$3.next()", "public java.lang.Object next()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["<E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.create()", "public static <E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E> create()"], ["<E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.create(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E> create(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.create(org.sonar.api.internal.google.common.collect.MapMaker)", "public static <E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E> create(org.sonar.api.internal.google.common.collect.MapMaker)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.size()", "public int size()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.toArray(T[])", "public <T> T[] toArray(T[])"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.add(E, int)", "public int add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object, int)", "public boolean removeExactly(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.createEntrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> createEntrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.clear()", "public void clear()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection(java.util.Collection<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)", "public org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection(java.util.Collection<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.add(E)", "public boolean add(E)"], ["void", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.add(int, E)", "public void add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.listIterator()", "public java.util.ListIterator<E> listIterator()"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["E", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.set(int, E)", "public E set(int, E)"], ["java.util.List<E>", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.subList(int, int)", "public java.util.List<E> subList(int, int)"], ["org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator(java.util.ListIterator<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)", "public org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator(java.util.ListIterator<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["void", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator.add(E)", "public void add(E)"], ["void", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator.set(E)", "public void set(E)"], ["org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet(java.util.Set<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)", "public org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet(java.util.Set<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSortedSet.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSortedSet.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["<E> java.util.Collection<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedCollection(java.util.Collection<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)", "public static <E> java.util.Collection<E> constrainedCollection(java.util.Collection<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedSet(java.util.Set<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)", "public static <E> java.util.Set<E> constrainedSet(java.util.Set<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<E> java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedSortedSet(java.util.SortedSet<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)", "public static <E> java.util.SortedSet<E> constrainedSortedSet(java.util.SortedSet<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedList(java.util.List<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)", "public static <E> java.util.List<E> constrainedList(java.util.List<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.create(org.sonar.api.internal.google.common.collect.Range<C>, org.sonar.api.internal.google.common.collect.DiscreteDomain<C>)", "public static <C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ContiguousSet<C> create(org.sonar.api.internal.google.common.collect.Range<C>, org.sonar.api.internal.google.common.collect.DiscreteDomain<C>)"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(C)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> headSet(C)"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(C, boolean)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> headSet(C, boolean)"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(C, C)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> subSet(C, C)"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(C, boolean, C, boolean)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> subSet(C, boolean, C, boolean)"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(C)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> tailSet(C)"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(C, boolean)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> tailSet(C, boolean)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ContiguousSet.toString()", "public java.lang.String toString()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ContiguousSet.builder()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet subSet(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet headSet(java.lang.Object, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)", "public java.util.NavigableSet tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)", "public java.util.NavigableSet headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.google.common.collect.Count.get()", "public int get()"], ["int", "org.sonar.api.internal.google.common.collect.Count.getAndAdd(int)", "public int getAndAdd(int)"], ["int", "org.sonar.api.internal.google.common.collect.Count.addAndGet(int)", "public int addAndGet(int)"], ["void", "org.sonar.api.internal.google.common.collect.Count.set(int)", "public void set(int)"], ["int", "org.sonar.api.internal.google.common.collect.Count.getAndSet(int)", "public int getAndSet(int)"], ["int", "org.sonar.api.internal.google.common.collect.Count.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.Count.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Count.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveAll.compareTo(org.sonar.api.internal.google.common.collect.Cut<java.lang.Comparable<?>>)", "public int compareTo(org.sonar.api.internal.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$AboveAll.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveAll.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveValue.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$AboveValue.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveValue.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowAll.compareTo(org.sonar.api.internal.google.common.collect.Cut<java.lang.Comparable<?>>)", "public int compareTo(org.sonar.api.internal.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$BelowAll.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowAll.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowValue.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$BelowValue.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowValue.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut.compareTo(org.sonar.api.internal.google.common.collect.Cut<C>)", "public int compareTo(org.sonar.api.internal.google.common.collect.Cut<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Cut.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap.size()", "public int size()"], ["V", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.columnMap()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>> columnMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.rowMap()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>> rowMap()"], ["V", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.size()", "public int size()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> firstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> lastEntry()"], ["int", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> elementSet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> descendingMultiset()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.SortedMultiset descendingMultiset()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.descendingSet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> descendingSet()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.descendingIterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> descendingIterator()"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.higher(E)", "public E higher(E)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.descendingSet()", "public java.util.NavigableSet descendingSet()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.DescendingMultiset$1.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.DescendingMultiset$1.size()", "public int size()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.pollFirstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.pollLastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> firstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> lastEntry()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.entrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> entrySet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.DescendingMultiset.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.DescendingMultiset.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DescendingMultiset.toString()", "public java.lang.String toString()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.DescendingMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.DescendingMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.math.BigInteger)", "public java.math.BigInteger next(java.math.BigInteger)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.math.BigInteger)", "public java.math.BigInteger previous(java.math.BigInteger)"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.math.BigInteger, java.math.BigInteger)", "public long distance(java.math.BigInteger, java.math.BigInteger)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.toString()", "public java.lang.String toString()"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)", "public long distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.lang.Comparable)", "public java.lang.Comparable previous(java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.lang.Comparable)", "public java.lang.Comparable next(java.lang.Comparable)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Integer)", "public java.lang.Integer next(java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Integer)", "public java.lang.Integer previous(java.lang.Integer)"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Integer, java.lang.Integer)", "public long distance(java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.minValue()", "public java.lang.Integer minValue()"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()", "public java.lang.Integer maxValue()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.toString()", "public java.lang.String toString()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()", "public java.lang.Comparable maxValue()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.minValue()", "public java.lang.Comparable minValue()"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)", "public long distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Comparable)", "public java.lang.Comparable previous(java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Comparable)", "public java.lang.Comparable next(java.lang.Comparable)"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Long)", "public java.lang.Long next(java.lang.Long)"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Long)", "public java.lang.Long previous(java.lang.Long)"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Long, java.lang.Long)", "public long distance(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.minValue()", "public java.lang.Long minValue()"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.maxValue()", "public java.lang.Long maxValue()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.toString()", "public java.lang.String toString()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.maxValue()", "public java.lang.Comparable maxValue()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.minValue()", "public java.lang.Comparable minValue()"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Comparable, java.lang.Comparable)", "public long distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Comparable)", "public java.lang.Comparable previous(java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Comparable)", "public java.lang.Comparable next(java.lang.Comparable)"], ["org.sonar.api.internal.google.common.collect.DiscreteDomain<java.lang.Integer>", "org.sonar.api.internal.google.common.collect.DiscreteDomain.integers()", "public static org.sonar.api.internal.google.common.collect.DiscreteDomain<java.lang.Integer> integers()"], ["org.sonar.api.internal.google.common.collect.DiscreteDomain<java.lang.Long>", "org.sonar.api.internal.google.common.collect.DiscreteDomain.longs()", "public static org.sonar.api.internal.google.common.collect.DiscreteDomain<java.lang.Long> longs()"], ["org.sonar.api.internal.google.common.collect.DiscreteDomain<java.math.BigInteger>", "org.sonar.api.internal.google.common.collect.DiscreteDomain.bigIntegers()", "public static org.sonar.api.internal.google.common.collect.DiscreteDomain<java.math.BigInteger> bigIntegers()"], ["C", "org.sonar.api.internal.google.common.collect.DiscreteDomain.minValue()", "public C minValue()"], ["C", "org.sonar.api.internal.google.common.collect.DiscreteDomain.maxValue()", "public C maxValue()"], ["C", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.first()", "public C first()"], ["C", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.last()", "public C last()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.intersection(org.sonar.api.internal.google.common.collect.ContiguousSet<C>)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> intersection(org.sonar.api.internal.google.common.collect.ContiguousSet<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.range()", "public org.sonar.api.internal.google.common.collect.Range<C> range()"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.range(org.sonar.api.internal.google.common.collect.BoundType, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.Range<C> range(org.sonar.api.internal.google.common.collect.BoundType, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C>", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C> iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C>", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.descendingIterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C> descendingIterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.isEmpty()", "public boolean isEmpty()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<C>", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.asList()", "public org.sonar.api.internal.google.common.collect.ImmutableList<C> asList()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.last()", "public java.lang.Object last()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.first()", "public java.lang.Object first()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap<java.lang.Object, java.lang.Object> inverse()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<java.lang.Object, java.lang.Object>>", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.entrySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.asMultimap()", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<java.lang.Object, java.lang.Object> asMultimap()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.lang.Object>", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<java.lang.Object> keySet()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap inverse()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.keySet()", "public java.util.Set keySet()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.lang.Object>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.lang.Object> iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.Object>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.asList()", "public org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.Object> asList()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["V", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K> keySet()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.isEmpty()", "public boolean isEmpty()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<V>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.values()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<V> values()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.entrySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entrySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.asMultimap()", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> asMultimap()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.headMap(K, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> headMap(K, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.tailMap(K, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> tailMap(K, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.keySet()", "public java.util.Set keySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet keySet()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> firstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> lastEntry()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> elementSet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.asList()", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> asList()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.iterator()", "public java.util.Iterator iterator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.descendingIterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> descendingIterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.asList()", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> asList()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.toString()", "public java.lang.String toString()"], ["E", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.first()", "public E first()"], ["E", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.last()", "public E last()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> org.sonar.api.internal.google.common.collect.EnumBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumBiMap.create(java.lang.Class<K>, java.lang.Class<V>)", "public static <K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> org.sonar.api.internal.google.common.collect.EnumBiMap<K, V> create(java.lang.Class<K>, java.lang.Class<V>)"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> org.sonar.api.internal.google.common.collect.EnumBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumBiMap.create(java.util.Map<K, V>)", "public static <K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> org.sonar.api.internal.google.common.collect.EnumBiMap<K, V> create(java.util.Map<K, V>)"], ["java.lang.Class<K>", "org.sonar.api.internal.google.common.collect.EnumBiMap.keyType()", "public java.lang.Class<K> keyType()"], ["java.lang.Class<V>", "org.sonar.api.internal.google.common.collect.EnumBiMap.valueType()", "public java.lang.Class<V> valueType()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumBiMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumBiMap.values()", "public java.util.Set values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumBiMap.keySet()", "public java.util.Set keySet()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.EnumBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap inverse()"], ["void", "org.sonar.api.internal.google.common.collect.EnumBiMap.clear()", "public void clear()"], ["void", "org.sonar.api.internal.google.common.collect.EnumBiMap.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["<K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.EnumHashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.create(java.lang.Class<K>)", "public static <K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.EnumHashBiMap<K, V> create(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.EnumHashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.create(java.util.Map<K, ? extends V>)", "public static <K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.EnumHashBiMap<K, V> create(java.util.Map<K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["java.lang.Class<K>", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.keyType()", "public java.lang.Class<K> keyType()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.values()", "public java.util.Set values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.keySet()", "public java.util.Set keySet()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap inverse()"], ["void", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.clear()", "public void clear()"], ["void", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.forcePut(java.lang.Object, java.lang.Object)", "public java.lang.Object forcePut(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E>", "org.sonar.api.internal.google.common.collect.EnumMultiset.create(java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E> create(java.lang.Class<E>)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E>", "org.sonar.api.internal.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>)", "public static <E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E> create(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E>", "org.sonar.api.internal.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>, java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E> create(java.lang.Iterable<E>, java.lang.Class<E>)"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EnumMultiset.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.EnumMultiset.clear()", "public void clear()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EnumMultiset.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.isEmpty()", "public boolean isEmpty()"], ["<E> org.sonar.api.internal.google.common.collect.EvictingQueue<E>", "org.sonar.api.internal.google.common.collect.EvictingQueue.create(int)", "public static <E> org.sonar.api.internal.google.common.collect.EvictingQueue<E> create(int)"], ["int", "org.sonar.api.internal.google.common.collect.EvictingQueue.remainingCapacity()", "public int remainingCapacity()"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.offer(E)", "public boolean offer(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.compare(T, T)", "public int compare(T, T)"], ["boolean", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$3.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$3.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$3.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.clear()", "public void clear()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.remove(java.lang.Object)", "public java.util.Collection<V> remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.util.Map$Entry<K, java.util.Collection<V>>)", "public boolean apply(java.util.Map$Entry<K, java.util.Collection<V>>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<K>>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<K>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<K>>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys.entrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<K>> entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$ValuePredicate.apply(V)", "public boolean apply(V)"], ["org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.Multimap<K, V> unfiltered()"], ["org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.entryPredicate()", "public org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>> entryPredicate()"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.clear()", "public void clear()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.keySet()", "public java.util.Set<K> keySet()"], ["org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.SetMultimap<K, V> unfiltered()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.Multimap unfiltered()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.ListMultimap<K, V> unfiltered()"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.Multimap unfiltered()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(V)", "public boolean add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(java.util.Collection<? extends V>)", "public boolean addAll(java.util.Collection<? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(int, V)", "public void add(int, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(int, java.util.Collection<? extends V>)", "public boolean addAll(int, java.util.Collection<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingSet.add(V)", "public boolean add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingSet.addAll(java.util.Collection<? extends V>)", "public boolean addAll(java.util.Collection<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$Entries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.Multimap<K, V> unfiltered()"], ["org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.entryPredicate()", "public org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>> entryPredicate()"], ["int", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.clear()", "public void clear()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap$EntrySet.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap$EntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.SetMultimap<K, V> unfiltered()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.unfiltered()", "public org.sonar.api.internal.google.common.collect.Multimap unfiltered()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.clear()", "public void clear()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.FluentIterable$1.iterator()", "public java.util.Iterator<E> iterator()"], ["org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable$FromIterableFunction.apply(java.lang.Iterable<E>)", "public org.sonar.api.internal.google.common.collect.FluentIterable<E> apply(java.lang.Iterable<E>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.FluentIterable$FromIterableFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["<E> org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.from(java.lang.Iterable<E>)", "public static <E> org.sonar.api.internal.google.common.collect.FluentIterable<E> from(java.lang.Iterable<E>)"], ["<E> org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.from(org.sonar.api.internal.google.common.collect.FluentIterable<E>)", "public static <E> org.sonar.api.internal.google.common.collect.FluentIterable<E> from(org.sonar.api.internal.google.common.collect.FluentIterable<E>)"], ["<E> org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.of(E[])", "public static <E> org.sonar.api.internal.google.common.collect.FluentIterable<E> of(E[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.FluentIterable.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.FluentIterable.size()", "public final int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.contains(java.lang.Object)", "public final boolean contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.cycle()", "public final org.sonar.api.internal.google.common.collect.FluentIterable<E> cycle()"], ["org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.append(java.lang.Iterable<? extends E>)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<E> append(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.append(E...)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<E> append(E...)"], ["org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.filter(org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<E> filter(org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<T> org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.FluentIterable.filter(java.lang.Class<T>)", "public final <T> org.sonar.api.internal.google.common.collect.FluentIterable<T> filter(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.anyMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public final boolean anyMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.allMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public final boolean allMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["org.sonar.api.internal.google.common.base.Optional<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.firstMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public final org.sonar.api.internal.google.common.base.Optional<E> firstMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<T> org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.FluentIterable.transform(org.sonar.api.internal.google.common.base.Function<? super E, T>)", "public final <T> org.sonar.api.internal.google.common.collect.FluentIterable<T> transform(org.sonar.api.internal.google.common.base.Function<? super E, T>)"], ["<T> org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.FluentIterable.transformAndConcat(org.sonar.api.internal.google.common.base.Function<? super E, ? extends java.lang.Iterable<? extends T>>)", "public <T> org.sonar.api.internal.google.common.collect.FluentIterable<T> transformAndConcat(org.sonar.api.internal.google.common.base.Function<? super E, ? extends java.lang.Iterable<? extends T>>)"], ["org.sonar.api.internal.google.common.base.Optional<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.first()", "public final org.sonar.api.internal.google.common.base.Optional<E> first()"], ["org.sonar.api.internal.google.common.base.Optional<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.last()", "public final org.sonar.api.internal.google.common.base.Optional<E> last()"], ["org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.skip(int)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<E> skip(int)"], ["org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.limit(int)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<E> limit(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.isEmpty()", "public final boolean isEmpty()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.toList()", "public final org.sonar.api.internal.google.common.collect.ImmutableList<E> toList()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.toSortedList(java.util.Comparator<? super E>)", "public final org.sonar.api.internal.google.common.collect.ImmutableList<E> toSortedList(java.util.Comparator<? super E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.toSet()", "public final org.sonar.api.internal.google.common.collect.ImmutableSet<E> toSet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.toSortedSet(java.util.Comparator<? super E>)", "public final org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> toSortedSet(java.util.Comparator<? super E>)"], ["<V> org.sonar.api.internal.google.common.collect.ImmutableMap<E, V>", "org.sonar.api.internal.google.common.collect.FluentIterable.toMap(org.sonar.api.internal.google.common.base.Function<? super E, V>)", "public final <V> org.sonar.api.internal.google.common.collect.ImmutableMap<E, V> toMap(org.sonar.api.internal.google.common.base.Function<? super E, V>)"], ["<K> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, E>", "org.sonar.api.internal.google.common.collect.FluentIterable.index(org.sonar.api.internal.google.common.base.Function<? super E, K>)", "public final <K> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, E> index(org.sonar.api.internal.google.common.base.Function<? super E, K>)"], ["<K> org.sonar.api.internal.google.common.collect.ImmutableMap<K, E>", "org.sonar.api.internal.google.common.collect.FluentIterable.uniqueIndex(org.sonar.api.internal.google.common.base.Function<? super E, K>)", "public final <K> org.sonar.api.internal.google.common.collect.ImmutableMap<K, E> uniqueIndex(org.sonar.api.internal.google.common.base.Function<? super E, K>)"], ["E[]", "org.sonar.api.internal.google.common.collect.FluentIterable.toArray(java.lang.Class<E>)", "public final E[] toArray(java.lang.Class<E>)"], ["<C extends java.util.Collection<? super E>> C", "org.sonar.api.internal.google.common.collect.FluentIterable.copyInto(C)", "public final <C extends java.util.Collection<? super E>> C copyInto(C)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.FluentIterable.join(org.sonar.api.internal.google.common.base.Joiner)", "public final java.lang.String join(org.sonar.api.internal.google.common.base.Joiner)"], ["E", "org.sonar.api.internal.google.common.collect.FluentIterable.get(int)", "public final E get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.remainingCapacity()", "public int remainingCapacity()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.putFirst(E)", "public void putFirst(E) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.putLast(E)", "public void putLast(E) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.offerFirst(E, long, java.util.concurrent.TimeUnit)", "public boolean offerFirst(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.offerLast(E, long, java.util.concurrent.TimeUnit)", "public boolean offerLast(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.takeFirst()", "public E takeFirst() throws java.lang.InterruptedException"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.takeLast()", "public E takeLast() throws java.lang.InterruptedException"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.pollFirst(long, java.util.concurrent.TimeUnit)", "public E pollFirst(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.pollLast(long, java.util.concurrent.TimeUnit)", "public E pollLast(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.put(E)", "public void put(E) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.offer(E, long, java.util.concurrent.TimeUnit)", "public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.take()", "public E take() throws java.lang.InterruptedException"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.poll(long, java.util.concurrent.TimeUnit)", "public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>)", "public int drainTo(java.util.Collection<? super E>)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>, int)", "public int drainTo(java.util.Collection<? super E>, int)"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.ForwardingCollection.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingCollection.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingCollection.clear()", "public void clear()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ForwardingCollection.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ForwardingCollection.toArray(T[])", "public <T> T[] toArray(T[])"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.replace(K, V)", "public V replace(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingDeque.addFirst(E)", "public void addFirst(E)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingDeque.addLast(E)", "public void addLast(E)"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.ForwardingDeque.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.getFirst()", "public E getFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.getLast()", "public E getLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.offerFirst(E)", "public boolean offerFirst(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.offerLast(E)", "public boolean offerLast(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.peekFirst()", "public E peekFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.peekLast()", "public E peekLast()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.pollLast()", "public E pollLast()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.pop()", "public E pop()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingDeque.push(E)", "public void push(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeFirst()", "public E removeFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeLast()", "public E removeLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeFirstOccurrence(java.lang.Object)", "public boolean removeFirstOccurrence(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeLastOccurrence(java.lang.Object)", "public boolean removeLastOccurrence(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingIterator.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.ForwardingIterator.next()", "public T next()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingIterator.remove()", "public void remove()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingList.add(int, E)", "public void add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingList.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingList.get(int)", "public E get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.ForwardingList.listIterator()", "public java.util.ListIterator<E> listIterator()"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.ForwardingList.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingList.remove(int)", "public E remove(int)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingList.set(int, E)", "public E set(int, E)"], ["java.util.List<E>", "org.sonar.api.internal.google.common.collect.ForwardingList.subList(int, int)", "public java.util.List<E> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingList.hashCode()", "public int hashCode()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.add(E)", "public void add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.hasPrevious()", "public boolean hasPrevious()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.nextIndex()", "public int nextIndex()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.previous()", "public E previous()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.previousIndex()", "public int previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.set(E)", "public void set(E)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ForwardingMap$StandardEntrySet", "org.sonar.api.internal.google.common.collect.ForwardingMap$StandardEntrySet(org.sonar.api.internal.google.common.collect.ForwardingMap)", "public org.sonar.api.internal.google.common.collect.ForwardingMap$StandardEntrySet(org.sonar.api.internal.google.common.collect.ForwardingMap)"], ["org.sonar.api.internal.google.common.collect.ForwardingMap$StandardKeySet", "org.sonar.api.internal.google.common.collect.ForwardingMap$StandardKeySet(org.sonar.api.internal.google.common.collect.ForwardingMap)", "public org.sonar.api.internal.google.common.collect.ForwardingMap$StandardKeySet(org.sonar.api.internal.google.common.collect.ForwardingMap)"], ["org.sonar.api.internal.google.common.collect.ForwardingMap$StandardValues", "org.sonar.api.internal.google.common.collect.ForwardingMap$StandardValues(org.sonar.api.internal.google.common.collect.ForwardingMap)", "public org.sonar.api.internal.google.common.collect.ForwardingMap$StandardValues(org.sonar.api.internal.google.common.collect.ForwardingMap)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingMap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMap.put(K, V)", "public V put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.ForwardingMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.ForwardingMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ForwardingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMap.hashCode()", "public int hashCode()"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.hashCode()", "public int hashCode()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.isEmpty()", "public boolean isEmpty()"], ["org.sonar.api.internal.google.common.collect.Multiset<K>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset<K> keys()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.keySet()", "public java.util.Set<K> keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.size()", "public int size()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.values()", "public java.util.Collection<V> values()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.ForwardingMultiset$StandardElementSet", "org.sonar.api.internal.google.common.collect.ForwardingMultiset$StandardElementSet(org.sonar.api.internal.google.common.collect.ForwardingMultiset)", "public org.sonar.api.internal.google.common.collect.ForwardingMultiset$StandardElementSet(org.sonar.api.internal.google.common.collect.ForwardingMultiset)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.add(E, int)", "public int add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["java.util.Set<E>", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.entrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()", "public java.util.Map$Entry<K, V> next()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap(org.sonar.api.internal.google.common.collect.ForwardingNavigableMap)", "public org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap(org.sonar.api.internal.google.common.collect.ForwardingNavigableMap)"], ["org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet(org.sonar.api.internal.google.common.collect.ForwardingNavigableMap)", "public org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet(org.sonar.api.internal.google.common.collect.ForwardingNavigableMap)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["org.sonar.api.internal.google.common.collect.ForwardingNavigableSet$StandardDescendingSet", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet$StandardDescendingSet(org.sonar.api.internal.google.common.collect.ForwardingNavigableSet)", "public org.sonar.api.internal.google.common.collect.ForwardingNavigableSet$StandardDescendingSet(org.sonar.api.internal.google.common.collect.ForwardingNavigableSet)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.higher(E)", "public E higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ForwardingObject.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingQueue.offer(E)", "public boolean offer(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.poll()", "public E poll()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.remove()", "public E remove()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.peek()", "public E peek()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.element()", "public E element()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingSet.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.ForwardingSetMultimap", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap()", "public org.sonar.api.internal.google.common.collect.ForwardingSetMultimap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.entries()", "public java.util.Collection entries()"], ["org.sonar.api.internal.google.common.collect.ForwardingSortedMap$StandardKeySet", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap$StandardKeySet(org.sonar.api.internal.google.common.collect.ForwardingSortedMap)", "public org.sonar.api.internal.google.common.collect.ForwardingSortedMap$StandardKeySet(org.sonar.api.internal.google.common.collect.ForwardingSortedMap)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.firstKey()", "public K firstKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset(org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset)", "public org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset(org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset)"], ["org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardElementSet", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardElementSet(org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset)", "public org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardElementSet(org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> firstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> lastEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.pollFirstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.pollLastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.first()", "public E first()"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.last()", "public E last()"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.ForwardingTable.cellSet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingTable.clear()", "public void clear()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.ForwardingTable.column(C)", "public java.util.Map<R, V> column(C)"], ["java.util.Set<C>", "org.sonar.api.internal.google.common.collect.ForwardingTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.ForwardingTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.isEmpty()", "public boolean isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.ForwardingTable.row(R)", "public java.util.Map<C, V> row(R)"], ["java.util.Set<R>", "org.sonar.api.internal.google.common.collect.ForwardingTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.ForwardingTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingTable.size()", "public int size()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.ForwardingTable.values()", "public java.util.Collection<V> values()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingTable.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.GeneralRange.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.GeneralRange.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.GeneralRange.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener[]", "org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener.values()", "public static org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener[] values()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener", "org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener.onRemoval(org.sonar.api.internal.google.common.collect.MapMaker$RemovalNotification<java.lang.Object, java.lang.Object>)", "public void onRemoval(org.sonar.api.internal.google.common.collect.MapMaker$RemovalNotification<java.lang.Object, java.lang.Object>)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable$Factory.get()", "public java.util.Map<C, V> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.HashBasedTable$Factory.get()", "public java.lang.Object get()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable.create()", "public static <R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V> create()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable.create(int, int)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V> create(int, int)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable.create(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V> create(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBasedTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBasedTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashBasedTable.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashBasedTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashBasedTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.row(java.lang.Object)", "public java.util.Map row(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashBasedTable.cellSet()", "public java.util.Set cellSet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.HashBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.HashBasedTable.clear()", "public void clear()"], ["int", "org.sonar.api.internal.google.common.collect.HashBasedTable.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.HashBasedTable.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.HashBasedTable.hashCode()", "public int hashCode()"], ["void", "org.sonar.api.internal.google.common.collect.HashBasedTable.putAll(org.sonar.api.internal.google.common.collect.Table)", "public void putAll(org.sonar.api.internal.google.common.collect.Table)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet$1$MapEntry.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet$1$MapEntry.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet$1$MapEntry.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.getKey()", "public V getKey()"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.getValue()", "public K getValue()"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.setValue(K)", "public K setValue(K)"], ["java.util.Iterator<java.util.Map$Entry<V, K>>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<V, K>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$InverseKeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$InverseKeySet.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.get(java.lang.Object)", "public K get(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.put(V, K)", "public K put(V, K)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.forcePut(V, K)", "public K forcePut(V, K)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.remove(java.lang.Object)", "public K remove(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap<K, V> inverse()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.keySet()", "public java.util.Set<V> keySet()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.values()", "public java.util.Set<K> values()"], ["java.util.Set<java.util.Map$Entry<V, K>>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.entrySet()", "public java.util.Set<java.util.Map$Entry<V, K>> entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.values()", "public java.util.Collection values()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$Itr.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.HashBiMap$Itr.next()", "public T next()"], ["void", "org.sonar.api.internal.google.common.collect.HashBiMap$Itr.remove()", "public void remove()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.HashBiMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap.create()", "public static <K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V> create()"], ["<K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap.create(int)", "public static <K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V> create(int)"], ["<K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap.create(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V> create(java.util.Map<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.HashBiMap.clear()", "public void clear()"], ["int", "org.sonar.api.internal.google.common.collect.HashBiMap.size()", "public int size()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.HashBiMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.HashBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.HashBiMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.HashBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashBiMap.values()", "public java.util.Collection values()"], ["<K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.HashMultimap.create()", "public static <K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V> create()"], ["<K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.HashMultimap.create(int, int)", "public static <K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V> create(int, int)"], ["<K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.HashMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V> create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.entries()", "public java.util.Set entries()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashMultimap.values()", "public java.util.Collection values()"], ["void", "org.sonar.api.internal.google.common.collect.HashMultimap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultimap.size()", "public int size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.HashMultimap.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.HashMultimap.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.HashMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.keySet()", "public java.util.Set keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.isEmpty()", "public boolean isEmpty()"], ["<E> org.sonar.api.internal.google.common.collect.HashMultiset<E>", "org.sonar.api.internal.google.common.collect.HashMultiset.create()", "public static <E> org.sonar.api.internal.google.common.collect.HashMultiset<E> create()"], ["<E> org.sonar.api.internal.google.common.collect.HashMultiset<E>", "org.sonar.api.internal.google.common.collect.HashMultiset.create(int)", "public static <E> org.sonar.api.internal.google.common.collect.HashMultiset<E> create(int)"], ["<E> org.sonar.api.internal.google.common.collect.HashMultiset<E>", "org.sonar.api.internal.google.common.collect.HashMultiset.create(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.HashMultiset<E> create(java.lang.Iterable<? extends E>)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.setCount(java.lang.Object, int)", "public int setCount(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.add(java.lang.Object, int)", "public int add(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.HashMultiset.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.HashMultiset.clear()", "public void clear()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.HashMultiset.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.setCount(java.lang.Object, int, int)", "public boolean setCount(java.lang.Object, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableAsList.isEmpty()", "public boolean isEmpty()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.put(K, V)", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V> put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V> putAll(java.util.Map<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMap build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.put(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder put(java.lang.Object, java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.builder()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V> builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.copyOf(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.values()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<V> values()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.values()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection values()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.values()", "public java.util.Collection values()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap inverse()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.values()", "public java.util.Set values()"], ["org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder()"], ["<T extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder.put(java.lang.Class<T>, T)", "public <T extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B> put(java.lang.Class<T>, T)"], ["<T extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder.putAll(java.util.Map<? extends java.lang.Class<? extends T>, ? extends T>)", "public <T extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B> putAll(java.util.Map<? extends java.lang.Class<? extends T>, ? extends T>)"], ["org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap<B> build()"], ["<B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.builder()", "public static <B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B> builder()"], ["<B, S extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.copyOf(java.util.Map<? extends java.lang.Class<? extends S>, ? extends S>)", "public static <B, S extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap<B> copyOf(java.util.Map<? extends java.lang.Class<? extends S>, ? extends S>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder<E>", "org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(E)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder<E> add(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(E...)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E> add(E...)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder.addAll(java.lang.Iterable<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder.add(E...)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E> add(E...)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder.addAll(java.lang.Iterable<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder.addAll(java.util.Iterator<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ImmutableCollection.toArray()", "public final java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ImmutableCollection.toArray(T[])", "public final <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.add(E)", "public final boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.remove(java.lang.Object)", "public final boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)", "public final boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.removeAll(java.util.Collection<?>)", "public final boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.retainAll(java.util.Collection<?>)", "public final boolean retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableCollection.clear()", "public final void clear()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableCollection.asList()", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> asList()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableCollection.iterator()", "public java.util.Iterator iterator()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableEntry.getKey()", "public final K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableEntry.getValue()", "public final V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableEntry.setValue(V)", "public final V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$1.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<K>", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$1.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<K> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$1.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2$1.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableList$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableList$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(E)", "public org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E> add(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.addAll(java.lang.Iterable<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(E...)", "public org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E> add(E...)"], ["org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.addAll(java.util.Iterator<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.addAll(java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.addAll(java.util.Iterator)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.reverse()", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> reverse()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.subList(int, int)", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> subList(int, int)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.get(int)", "public E get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.size()", "public int size()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.listIterator()", "public java.util.ListIterator listIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.size()", "public int size()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.get(int)", "public E get(int)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.subList(int, int)", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> subList(int, int)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.listIterator()", "public java.util.ListIterator listIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.iterator()", "public java.util.Iterator iterator()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E, E, E...)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> of(E, E, E, E, E, E, E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(java.util.Collection<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> copyOf(java.util.Collection<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(java.util.Iterator<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(E[])", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList<E> copyOf(E[])"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.listIterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E> listIterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.listIterator(int)", "public org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E> listIterator(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.subList(int, int)", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList.addAll(int, java.util.Collection<? extends E>)", "public final boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList.set(int, E)", "public final E set(int, E)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableList.add(int, E)", "public final void add(int, E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList.remove(int)", "public final E remove(int)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.asList()", "public final org.sonar.api.internal.google.common.collect.ImmutableList<E> asList()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.reverse()", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> reverse()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList.hashCode()", "public int hashCode()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.builder()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E> builder()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableList.iterator()", "public java.util.Iterator iterator()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList.listIterator()", "public java.util.ListIterator listIterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(K, V)", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> putAll(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(K, V...)", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> putAll(K, V...)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> orderKeysBy(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> orderValuesBy(java.util.Comparator<? super V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object, java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.builder()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V> builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.get(K)", "public org.sonar.api.internal.google.common.collect.ImmutableList<V> get(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap<V, K>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap<V, K> inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableList<V> removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableList<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.get(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.List replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)", "public java.util.List removeAll(java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.get(java.lang.Object)", "public java.util.List get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.put(K, V)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V> put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V> putAll(java.util.Map<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> build()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getKey()", "public K getKey()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getValue()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<V> getValue()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getValue()", "public java.lang.Object getValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, org.sonar.api.internal.google.common.collect.ImmutableSet<V>>", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.next()", "public java.util.Map$Entry<K, org.sonar.api.internal.google.common.collect.ImmutableSet<V>> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, org.sonar.api.internal.google.common.collect.ImmutableSet<V>>>", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, org.sonar.api.internal.google.common.collect.ImmutableSet<V>>> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.get(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableSet<V> get(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.keySet()", "public java.util.Set keySet()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.builder()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V> builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.copyOf(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableMap.put(K, V)", "public final V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableMap.remove(java.lang.Object)", "public final V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableMap.putAll(java.util.Map<? extends K, ? extends V>)", "public final void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableMap.clear()", "public final void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableMap.entrySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entrySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<K>", "org.sonar.api.internal.google.common.collect.ImmutableMap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<K> keySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.values()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<V> values()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.asMultimap()", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> asMultimap()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMap.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableMap.toString()", "public java.lang.String toString()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMap.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap.keySet()", "public java.util.Set keySet()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMapEntrySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMapEntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet$1.get(int)", "public K get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<K>", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<K> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet.iterator()", "public java.util.Iterator iterator()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableMapValues$1.get(int)", "public V get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMapValues.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<V>", "org.sonar.api.internal.google.common.collect.ImmutableMapValues.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<V> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMapValues.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMapValues.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.put(K, V)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> putAll(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.putAll(K, V...)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> putAll(K, V...)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> orderKeysBy(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> orderValuesBy(java.util.Comparator<? super V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Itr.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Itr.next()", "public T next()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Keys.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Keys.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Keys.elementSet()", "public java.util.Set<K> elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Keys.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Values.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<V> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Values.size()", "public int size()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Values.iterator()", "public java.util.Iterator iterator()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.builder()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V> builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V> copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<V> removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<K>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<K> keySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.asMap()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<K, java.util.Collection<V>> asMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.entries()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<java.util.Map$Entry<K, V>> entries()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset<K>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.keys()", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset<K> keys()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.values()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<V> values()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.values()", "public java.util.Collection values()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.isEmpty()", "public boolean isEmpty()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$1.hasNext()", "public boolean hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$1.next()", "public E next()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.add(E)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E> add(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.addCopies(E, int)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E> addCopies(E, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.setCount(E, int)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E> setCount(E, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.add(E...)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E> add(E...)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.addAll(java.lang.Iterable<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.addAll(java.util.Iterator<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.addAll(java.util.Iterator)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.addAll(java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet$1.get(int)", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet$1.get(int)", "public java.lang.Object get(int)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.hashCode()", "public int hashCode()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> of()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E, E, E, E, E...)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.copyOf(E[])", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.copyOf(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> copyOf(java.util.Iterator<? extends E>)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.add(E, int)", "public final int add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.remove(java.lang.Object, int)", "public final int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.setCount(E, int)", "public final int setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.setCount(E, int, int)", "public final boolean setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.entrySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> entrySet()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.builder()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E> builder()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.iterator()", "public java.util.Iterator iterator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.entrySet()", "public java.util.Set entrySet()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$1.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.Range<K>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$1.get(int)", "public org.sonar.api.internal.google.common.collect.Range<K> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$1.get(int)", "public java.lang.Object get(int)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$2.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)", "public org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V> subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["org.sonar.api.internal.google.common.collect.RangeMap", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$2.subRangeMap(org.sonar.api.internal.google.common.collect.Range)", "public org.sonar.api.internal.google.common.collect.RangeMap subRangeMap(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$2.asMapOfRanges()", "public java.util.Map asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder.put(org.sonar.api.internal.google.common.collect.Range<K>, V)", "public org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V> put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V> putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V> build()"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.of()", "public static <K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V> of()"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.of(org.sonar.api.internal.google.common.collect.Range<K>, V)", "public static <K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V> of(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.copyOf(org.sonar.api.internal.google.common.collect.RangeMap<K, ? extends V>)", "public static <K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V> copyOf(org.sonar.api.internal.google.common.collect.RangeMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.builder()", "public static <K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V> builder()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.get(K)", "public V get(K)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.getEntry(K)", "public java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V> getEntry(K)"], ["org.sonar.api.internal.google.common.collect.Range<K>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.span()", "public org.sonar.api.internal.google.common.collect.Range<K> span()"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.put(org.sonar.api.internal.google.common.collect.Range<K>, V)", "public void put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)", "public void putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.clear()", "public void clear()"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.remove(org.sonar.api.internal.google.common.collect.Range<K>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.asMapOfRanges()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<org.sonar.api.internal.google.common.collect.Range<K>, V> asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)", "public org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V> subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.RangeMap", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range)", "public org.sonar.api.internal.google.common.collect.RangeMap subRangeMap(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.asMapOfRanges()", "public java.util.Map asMapOfRanges()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$1.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$1.get(int)", "public org.sonar.api.internal.google.common.collect.Range<C> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$1.get(int)", "public java.lang.Object get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C> iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.descendingIterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C> descendingIterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder.add(org.sonar.api.internal.google.common.collect.Range<C>)", "public org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder<C> add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder.addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder<C> addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C> build()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$ComplementRanges.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$ComplementRanges.get(int)", "public org.sonar.api.internal.google.common.collect.Range<C> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$ComplementRanges.get(int)", "public java.lang.Object get(int)"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.of()", "public static <C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C> of()"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.of(org.sonar.api.internal.google.common.collect.Range<C>)", "public static <C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C> of(org.sonar.api.internal.google.common.collect.Range<C>)"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.copyOf(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public static <C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C> copyOf(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.encloses(org.sonar.api.internal.google.common.collect.Range<C>)", "public boolean encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.rangeContaining(C)", "public org.sonar.api.internal.google.common.collect.Range<C> rangeContaining(C)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.span()", "public org.sonar.api.internal.google.common.collect.Range<C> span()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)", "public void add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public void addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.removeAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public void removeAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.asRanges()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.collect.Range<C>> asRanges()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.complement()", "public org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C> complement()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.subRangeSet(org.sonar.api.internal.google.common.collect.Range<C>)", "public org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C> subRangeSet(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.asSet(org.sonar.api.internal.google.common.collect.DiscreteDomain<C>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<C> asSet(org.sonar.api.internal.google.common.collect.DiscreteDomain<C>)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.builder()", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder<C> builder()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet)", "public boolean enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.contains(java.lang.Comparable)", "public boolean contains(java.lang.Comparable)"], ["org.sonar.api.internal.google.common.collect.RangeSet", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.subRangeSet(org.sonar.api.internal.google.common.collect.Range)", "public org.sonar.api.internal.google.common.collect.RangeSet subRangeSet(org.sonar.api.internal.google.common.collect.Range)"], ["org.sonar.api.internal.google.common.collect.RangeSet", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.complement()", "public org.sonar.api.internal.google.common.collect.RangeSet complement()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.asRanges()", "public java.util.Set asRanges()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(E)", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E> add(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(E...)", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E> add(E...)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.addAll(java.util.Iterator<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<E> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.addAll(java.util.Iterator)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> of()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E, E, E, E, E...)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(E[])", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(java.util.Iterator<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(java.util.Collection<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet<E> copyOf(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSet.hashCode()", "public int hashCode()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.builder()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E> builder()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(K, V)", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> putAll(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, V...)", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> putAll(K, V...)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> orderKeysBy(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> orderValuesBy(java.util.Comparator<? super V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.builder()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V> builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V> copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.get(K)", "public org.sonar.api.internal.google.common.collect.ImmutableSet<V> get(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<V, K>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<V, K> inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableSet<V> removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entries()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection entries()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()", "public java.util.Set entries()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.comparator()", "public java.util.Comparator<? super E> comparator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder(java.util.Comparator<? super K>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(K, V)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V> put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V> put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V> putAll(java.util.Map<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMap build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableMap$Builder put(java.lang.Object, java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of()"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V)", "public static <K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V, K, V)", "public static <K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>, java.util.Comparator<? super K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> copyOf(java.util.Map<? extends K, ? extends V>, java.util.Comparator<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.copyOfSorted(java.util.SortedMap<K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> copyOfSorted(java.util.SortedMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.naturalOrder()", "public static <K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V> naturalOrder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.orderedBy(java.util.Comparator<K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V> orderedBy(java.util.Comparator<K>)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.reverseOrder()", "public static <K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V> reverseOrder()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.entrySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.firstKey()", "public K firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lastKey()", "public K lastKey()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.headMap(K)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> headMap(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(K, K)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> subMap(K, K)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(K, boolean, K, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> subMap(K, boolean, K, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.tailMap(K)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> tailMap(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.pollFirstEntry()", "public final java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.pollLastEntry()", "public final java.util.Map$Entry<K, V> pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.descendingMap()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> descendingMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.navigableKeySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K> navigableKeySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.descendingKeySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K> descendingKeySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet keySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.entrySet()", "public java.util.Set entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.keySet()", "public java.util.Set keySet()"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.descendingKeySet()", "public java.util.NavigableSet descendingKeySet()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.navigableKeySet()", "public java.util.NavigableSet navigableKeySet()"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.builder()", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V> builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V, K, V)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> of(K, V, K, V, K, V, K, V, K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder(java.util.Comparator<? super E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder(java.util.Comparator<? super E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(E)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> add(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addCopies(E, int)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> addCopies(E, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.setCount(E, int)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> setCount(E, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(E...)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> add(E...)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.setCount(java.lang.Object, int)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addCopies(java.lang.Object, int)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of()"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E, E, E...)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(E[])", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Iterator<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOfSorted(org.sonar.api.internal.google.common.collect.SortedMultiset<E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> copyOfSorted(org.sonar.api.internal.google.common.collect.SortedMultiset<E>)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.comparator()", "public final java.util.Comparator<? super E> comparator()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> descendingMultiset()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.pollFirstEntry()", "public final org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.pollLastEntry()", "public final org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.orderedBy(java.util.Comparator<E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.reverseOrder()", "public static <E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> reverseOrder()"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.naturalOrder()", "public static <E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> naturalOrder()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.subMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType, java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset subMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType, java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.SortedMultiset descendingMultiset()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.builder()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E> builder()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E, E, E...)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.copyOf(E[])", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> copyOf(E[])"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder(java.util.Comparator<? super E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder(java.util.Comparator<? super E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(E)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> add(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(E...)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> add(E...)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> addAll(java.lang.Iterable<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator<? extends E>)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> addAll(java.util.Iterator<? extends E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> build()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableSet build()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableSet$Builder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$SerializedForm", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$SerializedForm(java.util.Comparator<? super E>, java.lang.Object[])", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet$SerializedForm(java.util.Comparator<? super E>, java.lang.Object[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of()"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E, E, E...)", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(E[])", "public static <E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Collection<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Collection<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Iterator<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOfSorted(java.util.SortedSet<E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOfSorted(java.util.SortedSet<E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.orderedBy(java.util.Comparator<E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.reverseOrder()", "public static <E extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> reverseOrder()"], ["<E extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.naturalOrder()", "public static <E extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> naturalOrder()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.headSet(E)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> headSet(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.headSet(E, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> headSet(E, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.subSet(E, E)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> subSet(E, E)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.subSet(E, boolean, E, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> subSet(E, boolean, E, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.tailSet(E)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> tailSet(E)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.tailSet(E, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> tailSet(E, boolean)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.higher(E)", "public E higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.first()", "public E first()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.last()", "public E last()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.pollFirst()", "public final E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.pollLast()", "public final E pollLast()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.descendingSet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> descendingSet()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object, boolean)", "public java.util.NavigableSet tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object, boolean)", "public java.util.NavigableSet headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.descendingSet()", "public java.util.NavigableSet descendingSet()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.builder()", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E> builder()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E, E, E...)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.copyOf(E[])", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> copyOf(E[])"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder()", "public org.sonar.api.internal.google.common.collect.ImmutableTable$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.orderRowsBy(java.util.Comparator<? super R>)", "public org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V> orderRowsBy(java.util.Comparator<? super R>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.orderColumnsBy(java.util.Comparator<? super C>)", "public org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V> orderColumnsBy(java.util.Comparator<? super C>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.put(R, C, V)", "public org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V> put(R, C, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.put(org.sonar.api.internal.google.common.collect.Table$Cell<? extends R, ? extends C, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V> put(org.sonar.api.internal.google.common.collect.Table$Cell<? extends R, ? extends C, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V> putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.build()", "public org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V> build()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.of()", "public static <R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V> of()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.of(R, C, V)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V> of(R, C, V)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.copyOf(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V> copyOf(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.builder()", "public static <R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V> builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.ImmutableTable.cellSet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.values()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<V> values()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.column(C)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<R, V> column(C)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableTable.columnKeySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<C> columnKeySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.row(R)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<C, V> row(R)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<R>", "org.sonar.api.internal.google.common.collect.ImmutableTable.rowKeySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<R> rowKeySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableTable.clear()", "public final void clear()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableTable.put(R, C, V)", "public final V put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public final void putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableTable.remove(java.lang.Object, java.lang.Object)", "public final V remove(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableTable.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableTable.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableTable.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableTable.cellSet()", "public java.util.Set cellSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableTable.get(java.lang.Object, java.lang.Object)", "public java.lang.Object get(java.lang.Object, java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.row(java.lang.Object)", "public java.util.Map row(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.Interners$1.intern(E)", "public E intern(E)"], ["org.sonar.api.internal.google.common.collect.Interners$InternerFunction", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction(org.sonar.api.internal.google.common.collect.Interner<E>)", "public org.sonar.api.internal.google.common.collect.Interners$InternerFunction(org.sonar.api.internal.google.common.collect.Interner<E>)"], ["E", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction.apply(E)", "public E apply(E)"], ["int", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy[]", "org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy.values()", "public static org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy[] values()"], ["org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy", "org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy valueOf(java.lang.String)"], ["E", "org.sonar.api.internal.google.common.collect.Interners$WeakInterner.intern(E)", "public E intern(E)"], ["<E> org.sonar.api.internal.google.common.collect.Interner<E>", "org.sonar.api.internal.google.common.collect.Interners.newStrongInterner()", "public static <E> org.sonar.api.internal.google.common.collect.Interner<E> newStrongInterner()"], ["<E> org.sonar.api.internal.google.common.collect.Interner<E>", "org.sonar.api.internal.google.common.collect.Interners.newWeakInterner()", "public static <E> org.sonar.api.internal.google.common.collect.Interner<E> newWeakInterner()"], ["<E> org.sonar.api.internal.google.common.base.Function<E, E>", "org.sonar.api.internal.google.common.collect.Interners.asFunction(org.sonar.api.internal.google.common.collect.Interner<E>)", "public static <E> org.sonar.api.internal.google.common.base.Function<E, E> asFunction(org.sonar.api.internal.google.common.collect.Interner<E>)"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$1.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$1.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables$10$1.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterables$10$1.next()", "public T next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterables$10$1.remove()", "public void remove()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$10.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$11.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$12.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$12.toString()", "public java.lang.String toString()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$13.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$13.toString()", "public java.lang.String toString()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$14.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<? extends T>", "org.sonar.api.internal.google.common.collect.Iterables$15.apply(java.lang.Iterable<? extends T>)", "public java.util.Iterator<? extends T> apply(java.lang.Iterable<? extends T>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterables$15.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$2.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterables$4.iterator()", "public java.util.Iterator<java.util.List<T>> iterator()"], ["java.util.Iterator<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterables$5.iterator()", "public java.util.Iterator<java.util.List<T>> iterator()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$6.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$7.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$8.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$9.iterator()", "public java.util.Iterator<T> iterator()"], ["T", "org.sonar.api.internal.google.common.collect.Iterables$ConsumingQueueIterator.computeNext()", "public T computeNext()"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterables$UnmodifiableIterable.iterator()", "public java.util.Iterator<T> iterator()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$UnmodifiableIterable.toString()", "public java.lang.String toString()"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.unmodifiableIterable(java.lang.Iterable<T>)", "public static <T> java.lang.Iterable<T> unmodifiableIterable(java.lang.Iterable<T>)"], ["<E> java.lang.Iterable<E>", "org.sonar.api.internal.google.common.collect.Iterables.unmodifiableIterable(org.sonar.api.internal.google.common.collect.ImmutableCollection<E>)", "public static <E> java.lang.Iterable<E> unmodifiableIterable(org.sonar.api.internal.google.common.collect.ImmutableCollection<E>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterables.size(java.lang.Iterable<?>)", "public static int size(java.lang.Iterable<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.contains(java.lang.Iterable<?>, java.lang.Object)", "public static boolean contains(java.lang.Iterable<?>, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.removeAll(java.lang.Iterable<?>, java.util.Collection<?>)", "public static boolean removeAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.retainAll(java.lang.Iterable<?>, java.util.Collection<?>)", "public static boolean retainAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.removeIf(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> boolean removeIf(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)", "public static boolean elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables.toString(java.lang.Iterable<?>)", "public static java.lang.String toString(java.lang.Iterable<?>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)", "public static <T> T getOnlyElement(java.lang.Iterable<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)", "public static <T> T getOnlyElement(java.lang.Iterable<? extends T>, T)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Iterables.toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)", "public static <T> T[] toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)", "public static <T> boolean addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterables.frequency(java.lang.Iterable<?>, java.lang.Object)", "public static int frequency(java.lang.Iterable<?>, java.lang.Object)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.cycle(java.lang.Iterable<T>)", "public static <T> java.lang.Iterable<T> cycle(java.lang.Iterable<T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.cycle(T...)", "public static <T> java.lang.Iterable<T> cycle(T...)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>...)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends T>...)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)", "public static <T> java.lang.Iterable<T> concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)"], ["<T> java.lang.Iterable<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<java.util.List<T>> partition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<java.util.List<T>> paddedPartition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.filter(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> java.lang.Iterable<T> filter(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.filter(java.lang.Iterable<?>, java.lang.Class<T>)", "public static <T> java.lang.Iterable<T> filter(java.lang.Iterable<?>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.any(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> boolean any(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.all(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> boolean all(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.find(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> T find(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.find(java.lang.Iterable<? extends T>, org.sonar.api.internal.google.common.base.Predicate<? super T>, T)", "public static <T> T find(java.lang.Iterable<? extends T>, org.sonar.api.internal.google.common.base.Predicate<? super T>, T)"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.collect.Iterables.tryFind(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> org.sonar.api.internal.google.common.base.Optional<T> tryFind(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> int", "org.sonar.api.internal.google.common.collect.Iterables.indexOf(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> int indexOf(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<F, T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.transform(java.lang.Iterable<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)", "public static <F, T> java.lang.Iterable<T> transform(java.lang.Iterable<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.get(java.lang.Iterable<T>, int)", "public static <T> T get(java.lang.Iterable<T>, int)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)", "public static <T> T get(java.lang.Iterable<? extends T>, int, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getFirst(java.lang.Iterable<? extends T>, T)", "public static <T> T getFirst(java.lang.Iterable<? extends T>, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getLast(java.lang.Iterable<T>)", "public static <T> T getLast(java.lang.Iterable<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getLast(java.lang.Iterable<? extends T>, T)", "public static <T> T getLast(java.lang.Iterable<? extends T>, T)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<T> skip(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)", "public static <T> java.lang.Iterable<T> limit(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.consumingIterable(java.lang.Iterable<T>)", "public static <T> java.lang.Iterable<T> consumingIterable(java.lang.Iterable<T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.isEmpty(java.lang.Iterable<?>)", "public static boolean isEmpty(java.lang.Iterable<?>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)", "public static <T> java.lang.Iterable<T> mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$1.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$1.next()", "public java.lang.Object next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$1.hasPrevious()", "public boolean hasPrevious()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$1.previous()", "public java.lang.Object previous()"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$1.nextIndex()", "public int nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$1.previousIndex()", "public int previousIndex()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$10.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$10.next()", "public T next()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterators$10.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$12.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$12.next()", "public T next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$13.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$13.next()", "public T next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$14.hasMoreElements()", "public boolean hasMoreElements()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$14.nextElement()", "public T nextElement()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$2.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$2.next()", "public java.lang.Object next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$2.remove()", "public void remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$3.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$3.next()", "public T next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$4.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$4.next()", "public T next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$4.remove()", "public void remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$5.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$5.next()", "public T next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$5.remove()", "public void remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$6.hasNext()", "public boolean hasNext()"], ["java.util.List<T>", "org.sonar.api.internal.google.common.collect.Iterators$6.next()", "public java.util.List<T> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$6.next()", "public java.lang.Object next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$9.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$9.next()", "public T next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$9.remove()", "public void remove()"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator$1.compare(org.sonar.api.internal.google.common.collect.PeekingIterator<T>, org.sonar.api.internal.google.common.collect.PeekingIterator<T>)", "public int compare(org.sonar.api.internal.google.common.collect.PeekingIterator<T>, org.sonar.api.internal.google.common.collect.PeekingIterator<T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Iterators$MergingIterator", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)", "public org.sonar.api.internal.google.common.collect.Iterators$MergingIterator(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator.next()", "public T next()"], ["org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl(java.util.Iterator<? extends E>)", "public org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl(java.util.Iterator<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.hasNext()", "public boolean hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.next()", "public E next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.remove()", "public void remove()"], ["E", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.peek()", "public E peek()"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.emptyIterator()", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> emptyIterator()"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator<T>)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> unmodifiableIterator(java.util.Iterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.unmodifiableIterator(org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> unmodifiableIterator(org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators.size(java.util.Iterator<?>)", "public static int size(java.util.Iterator<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.contains(java.util.Iterator<?>, java.lang.Object)", "public static boolean contains(java.util.Iterator<?>, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.removeAll(java.util.Iterator<?>, java.util.Collection<?>)", "public static boolean removeAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.removeIf(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> boolean removeIf(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.retainAll(java.util.Iterator<?>, java.util.Collection<?>)", "public static boolean retainAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)", "public static boolean elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterators.toString(java.util.Iterator<?>)", "public static java.lang.String toString(java.util.Iterator<?>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<T>)", "public static <T> T getOnlyElement(java.util.Iterator<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<? extends T>, T)", "public static <T> T getOnlyElement(java.util.Iterator<? extends T>, T)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Iterators.toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)", "public static <T> T[] toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)", "public static <T> boolean addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators.frequency(java.util.Iterator<?>, java.lang.Object)", "public static int frequency(java.util.Iterator<?>, java.lang.Object)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.cycle(java.lang.Iterable<T>)", "public static <T> java.util.Iterator<T> cycle(java.lang.Iterable<T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.cycle(T...)", "public static <T> java.util.Iterator<T> cycle(T...)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>...)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends T>...)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)", "public static <T> java.util.Iterator<T> concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.List<T>> partition(java.util.Iterator<T>, int)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.List<T>> paddedPartition(java.util.Iterator<T>, int)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.filter(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> filter(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.filter(java.util.Iterator<?>, java.lang.Class<T>)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> filter(java.util.Iterator<?>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.any(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> boolean any(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.all(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> boolean all(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.find(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> T find(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.find(java.util.Iterator<? extends T>, org.sonar.api.internal.google.common.base.Predicate<? super T>, T)", "public static <T> T find(java.util.Iterator<? extends T>, org.sonar.api.internal.google.common.base.Predicate<? super T>, T)"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.collect.Iterators.tryFind(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> org.sonar.api.internal.google.common.base.Optional<T> tryFind(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> int", "org.sonar.api.internal.google.common.collect.Iterators.indexOf(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)", "public static <T> int indexOf(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<F, T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.transform(java.util.Iterator<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)", "public static <F, T> java.util.Iterator<T> transform(java.util.Iterator<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.get(java.util.Iterator<T>, int)", "public static <T> T get(java.util.Iterator<T>, int)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)", "public static <T> T get(java.util.Iterator<? extends T>, int, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getNext(java.util.Iterator<? extends T>, T)", "public static <T> T getNext(java.util.Iterator<? extends T>, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getLast(java.util.Iterator<T>)", "public static <T> T getLast(java.util.Iterator<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getLast(java.util.Iterator<? extends T>, T)", "public static <T> T getLast(java.util.Iterator<? extends T>, T)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)", "public static int advance(java.util.Iterator<?>, int)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)", "public static <T> java.util.Iterator<T> limit(java.util.Iterator<T>, int)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.consumingIterator(java.util.Iterator<T>)", "public static <T> java.util.Iterator<T> consumingIterator(java.util.Iterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.forArray(T...)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> forArray(T...)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.singletonIterator(T)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> singletonIterator(T)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.forEnumeration(java.util.Enumeration<T>)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> forEnumeration(java.util.Enumeration<T>)"], ["<T> java.util.Enumeration<T>", "org.sonar.api.internal.google.common.collect.Iterators.asEnumeration(java.util.Iterator<T>)", "public static <T> java.util.Enumeration<T> asEnumeration(java.util.Iterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.PeekingIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.peekingIterator(java.util.Iterator<? extends T>)", "public static <T> org.sonar.api.internal.google.common.collect.PeekingIterator<T> peekingIterator(java.util.Iterator<? extends T>)"], ["<T> org.sonar.api.internal.google.common.collect.PeekingIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.peekingIterator(org.sonar.api.internal.google.common.collect.PeekingIterator<T>)", "public static <T> org.sonar.api.internal.google.common.collect.PeekingIterator<T> peekingIterator(org.sonar.api.internal.google.common.collect.PeekingIterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)", "public static <T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["int", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.compare(java.lang.Iterable<T>, java.lang.Iterable<T>)", "public int compare(java.lang.Iterable<T>, java.lang.Iterable<T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.next()", "public java.util.Map$Entry<K, V> next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInValueSet()", "public org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getPredecessorInValueSet()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()", "public org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getSuccessorInValueSet()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setPredecessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setSuccessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()", "public org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V> getPredecessorInMultimap()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInMultimap()", "public org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V> getSuccessorInMultimap()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)", "public void setSuccessorInMultimap(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)", "public void setPredecessorInMultimap(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet$1.hasNext()", "public boolean hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet$1.next()", "public V next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet$1.remove()", "public void remove()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.getPredecessorInValueSet()", "public org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getPredecessorInValueSet()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.getSuccessorInValueSet()", "public org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V> getSuccessorInValueSet()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.setPredecessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setPredecessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.setSuccessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)", "public void setSuccessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.add(V)", "public boolean add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.clear()", "public void clear()"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.create()", "public static <K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V> create()"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.create(int, int)", "public static <K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V> create(int, int)"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V> create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.values()", "public java.util.Collection<V> values()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.size()", "public int size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.keySet()", "public java.util.Set keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.isEmpty()", "public boolean isEmpty()"], ["<E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E>", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.create()", "public static <E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E> create()"], ["<E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E>", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.create(int)", "public static <E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E> create(int)"], ["<E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E>", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.create(java.lang.Iterable<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E> create(java.lang.Iterable<? extends E>)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int)", "public int setCount(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.add(java.lang.Object, int)", "public int add(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.clear()", "public void clear()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.entrySet()", "public java.util.Set entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int, int)", "public boolean setCount(java.lang.Object, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$1.size()", "public int size()"], ["java.util.ListIterator<V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$1.listIterator(int)", "public java.util.ListIterator<V> listIterator(int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$2.size()", "public int size()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$2.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$2.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$2.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$3$1.set(V)", "public void set(V)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$3.size()", "public int size()"], ["java.util.ListIterator<V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$3.listIterator(int)", "public java.util.ListIterator<V> listIterator(int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$4.size()", "public int size()"], ["java.util.ListIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$4.listIterator(int)", "public java.util.ListIterator<java.util.Map$Entry<K, V>> listIterator(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$DistinctKeyIterator.hasNext()", "public boolean hasNext()"], ["K", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$DistinctKeyIterator.next()", "public K next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$DistinctKeyIterator.remove()", "public void remove()"], ["K", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.hasNext()", "public boolean hasNext()"], ["org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.next()", "public org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node<K, V> next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.remove()", "public void remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.hasPrevious()", "public boolean hasPrevious()"], ["org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.previous()", "public org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node<K, V> previous()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.nextIndex()", "public int nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.previousIndex()", "public int previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.set(java.util.Map$Entry<K, V>)", "public void set(java.util.Map$Entry<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.add(java.util.Map$Entry<K, V>)", "public void add(java.util.Map$Entry<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.add(java.lang.Object)", "public void add(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.set(java.lang.Object)", "public void set(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.previous()", "public java.lang.Object previous()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator(org.sonar.api.internal.google.common.collect.LinkedListMultimap, java.lang.Object, int)", "public org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator(org.sonar.api.internal.google.common.collect.LinkedListMultimap, java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasNext()", "public boolean hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.next()", "public V next()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasPrevious()", "public boolean hasPrevious()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previous()", "public V previous()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.nextIndex()", "public int nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previousIndex()", "public int previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.remove()", "public void remove()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.set(V)", "public void set(V)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.add(V)", "public void add(V)"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.create()", "public static <K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V> create()"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.create(int)", "public static <K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V> create(int)"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V> create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.put(K, V)", "public boolean put(K, V)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.clear()", "public void clear()"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.values()", "public java.util.List<V> values()"], ["java.util.List<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.entries()", "public java.util.List<java.util.Map$Entry<K, V>> entries()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.values()", "public java.util.Collection values()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.Lists$1.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.Lists$2.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.add(int, E)", "public void add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.get(int)", "public E get(int)"], ["E", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.remove(int)", "public E remove(int)"], ["E", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.set(int, E)", "public E set(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.size()", "public int size()"], ["java.lang.Character", "org.sonar.api.internal.google.common.collect.Lists$CharSequenceAsList.get(int)", "public java.lang.Character get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$CharSequenceAsList.size()", "public int size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Lists$CharSequenceAsList.get(int)", "public java.lang.Object get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$OnePlusArrayList.size()", "public int size()"], ["E", "org.sonar.api.internal.google.common.collect.Lists$OnePlusArrayList.get(int)", "public E get(int)"], ["java.util.List<T>", "org.sonar.api.internal.google.common.collect.Lists$Partition.get(int)", "public java.util.List<T> get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$Partition.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$Partition.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Lists$Partition.get(int)", "public java.lang.Object get(int)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.add(T)", "public void add(T)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.hasNext()", "public boolean hasNext()"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.hasPrevious()", "public boolean hasPrevious()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.next()", "public T next()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.nextIndex()", "public int nextIndex()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.previous()", "public T previous()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.previousIndex()", "public int previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.remove()", "public void remove()"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.set(T)", "public void set(T)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.add(int, T)", "public void add(int, T)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.clear()", "public void clear()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.remove(int)", "public T remove(int)"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.set(int, T)", "public T set(int, T)"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.get(int)", "public T get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.size()", "public int size()"], ["java.util.List<T>", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.subList(int, int)", "public java.util.List<T> subList(int, int)"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.ListIterator<T>", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.listIterator(int)", "public java.util.ListIterator<T> listIterator(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.Character>", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.subList(int, int)", "public org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.Character> subList(int, int)"], ["java.lang.Character", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.get(int)", "public java.lang.Character get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.size()", "public int size()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.get(int)", "public java.lang.Object get(int)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.clear()", "public void clear()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.get(int)", "public T get(int)"], ["java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.iterator()", "public java.util.Iterator<T> iterator()"], ["java.util.ListIterator<T>", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.listIterator(int)", "public java.util.ListIterator<T> listIterator(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.isEmpty()", "public boolean isEmpty()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.remove(int)", "public T remove(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.Lists$TransformingSequentialList.clear()", "public void clear()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$TransformingSequentialList.size()", "public int size()"], ["java.util.ListIterator<T>", "org.sonar.api.internal.google.common.collect.Lists$TransformingSequentialList.listIterator(int)", "public java.util.ListIterator<T> listIterator(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$TwoPlusArrayList.size()", "public int size()"], ["E", "org.sonar.api.internal.google.common.collect.Lists$TwoPlusArrayList.get(int)", "public E get(int)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList()", "public static <E> java.util.ArrayList<E> newArrayList()"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList(E...)", "public static <E> java.util.ArrayList<E> newArrayList(E...)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList(java.lang.Iterable<? extends E>)", "public static <E> java.util.ArrayList<E> newArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)", "public static <E> java.util.ArrayList<E> newArrayList(java.util.Iterator<? extends E>)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayListWithCapacity(int)", "public static <E> java.util.ArrayList<E> newArrayListWithCapacity(int)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayListWithExpectedSize(int)", "public static <E> java.util.ArrayList<E> newArrayListWithExpectedSize(int)"], ["<E> java.util.LinkedList<E>", "org.sonar.api.internal.google.common.collect.Lists.newLinkedList()", "public static <E> java.util.LinkedList<E> newLinkedList()"], ["<E> java.util.LinkedList<E>", "org.sonar.api.internal.google.common.collect.Lists.newLinkedList(java.lang.Iterable<? extends E>)", "public static <E> java.util.LinkedList<E> newLinkedList(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newCopyOnWriteArrayList()", "public static <E> java.util.concurrent.CopyOnWriteArrayList<E> newCopyOnWriteArrayList()"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.CopyOnWriteArrayList<E> newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Lists.asList(E, E[])", "public static <E> java.util.List<E> asList(E, E[])"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Lists.asList(E, E, E[])", "public static <E> java.util.List<E> asList(E, E, E[])"], ["<F, T> java.util.List<T>", "org.sonar.api.internal.google.common.collect.Lists.transform(java.util.List<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)", "public static <F, T> java.util.List<T> transform(java.util.List<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)"], ["<T> java.util.List<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Lists.partition(java.util.List<T>, int)", "public static <T> java.util.List<java.util.List<T>> partition(java.util.List<T>, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.Character>", "org.sonar.api.internal.google.common.collect.Lists.charactersOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.Character> charactersOf(java.lang.String)"], ["java.util.List<java.lang.Character>", "org.sonar.api.internal.google.common.collect.Lists.charactersOf(java.lang.CharSequence)", "public static java.util.List<java.lang.Character> charactersOf(java.lang.CharSequence)"], ["<T> java.util.List<T>", "org.sonar.api.internal.google.common.collect.Lists.reverse(java.util.List<T>)", "public static <T> java.util.List<T> reverse(java.util.List<T>)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$1.setValue(V)", "public V setValue(V)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$2$1.checkElement(V)", "public V checkElement(V)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$2.getValue()", "public java.util.Collection<V> getValue()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$2.getValue()", "public java.lang.Object getValue()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1.next()", "public java.util.Map$Entry<K, java.util.Collection<V>> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.hasNext()", "public boolean hasNext()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.next()", "public java.util.Collection<V> next()"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.iterator()", "public java.util.Iterator<java.util.Collection<V>> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedBiMap.values()", "public java.util.Collection values()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntrySet.hashCode()", "public int hashCode()"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMap.put(K, V)", "public V put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.entrySet()", "public java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>> entrySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Collection<java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.values()", "public java.util.Collection<java.util.Collection<V>> values()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$2.checkElement(V)", "public V checkElement(V)"], ["org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)", "public org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.MapConstraints$InverseConstraint", "org.sonar.api.internal.google.common.collect.MapConstraints$InverseConstraint(org.sonar.api.internal.google.common.collect.MapConstraint<? super V, ? super K>)", "public org.sonar.api.internal.google.common.collect.MapConstraints$InverseConstraint(org.sonar.api.internal.google.common.collect.MapConstraint<? super V, ? super K>)"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$InverseConstraint.checkKeyValue(K, V)", "public void checkKeyValue(K, V)"], ["org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint[]", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.values()", "public static org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint[] values()"], ["org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.checkKeyValue(java.lang.Object, java.lang.Object)", "public void checkKeyValue(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.MapConstraint<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapConstraints.notNull()", "public static org.sonar.api.internal.google.common.collect.MapConstraint<java.lang.Object, java.lang.Object> notNull()"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedMap(java.util.Map<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> java.util.Map<K, V> constrainedMap(java.util.Map<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> constrainedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> constrainedListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> constrainedSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V> constrainedSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedBiMap(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V> constrainedBiMap(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$ComputingMapAdapter.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullComputingConcurrentMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.replace(K, V)", "public V replace(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause[]", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause.values()", "public static org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause[] values()"], ["org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalNotification.getCause()", "public org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause getCause()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalNotification.wasEvicted()", "public boolean wasEvicted()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker()", "public org.sonar.api.internal.google.common.collect.MapMaker()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.initialCapacity(int)", "public org.sonar.api.internal.google.common.collect.MapMaker initialCapacity(int)"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.concurrencyLevel(int)", "public org.sonar.api.internal.google.common.collect.MapMaker concurrencyLevel(int)"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakKeys()", "public org.sonar.api.internal.google.common.collect.MapMaker weakKeys()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakValues()", "public org.sonar.api.internal.google.common.collect.MapMaker weakValues()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.softValues()", "public org.sonar.api.internal.google.common.collect.MapMaker softValues()"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.collect.MapMaker.makeMap()", "public <K, V> java.util.concurrent.ConcurrentMap<K, V> makeMap()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.MapMaker.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.softValues()", "public org.sonar.api.internal.google.common.collect.GenericMapMaker softValues()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakValues()", "public org.sonar.api.internal.google.common.collect.GenericMapMaker weakValues()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakKeys()", "public org.sonar.api.internal.google.common.collect.GenericMapMaker weakKeys()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.concurrencyLevel(int)", "public org.sonar.api.internal.google.common.collect.GenericMapMaker concurrencyLevel(int)"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.initialCapacity(int)", "public org.sonar.api.internal.google.common.collect.GenericMapMaker initialCapacity(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.get()", "public java.lang.Object get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.getEntry()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object> copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.isComputingReference()", "public boolean isComputingReference()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.waitForValue()", "public java.lang.Object waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)", "public void clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.poll()", "public java.lang.Object poll()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.size()", "public int size()"], ["java.util.Iterator<java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.iterator()", "public java.util.Iterator<java.lang.Object> iterator()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getValueReference()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNext()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getHash()", "public int getHash()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getKey()", "public K getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$CleanupMapTask", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$CleanupMapTask(org.sonar.api.internal.google.common.collect.MapMakerInternalMap<?, ?>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$CleanupMapTask(org.sonar.api.internal.google.common.collect.MapMakerInternalMap<?, ?>)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$CleanupMapTask.run()", "public void run()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory[]", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory.values()", "public static org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory[] values()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryIterator.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryIterator.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.clear()", "public void clear()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.offer(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public boolean offer(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.peek()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> peek()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.poll()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.clear()", "public void clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.poll()", "public java.lang.Object poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.offer(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public boolean offer(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.peek()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> peek()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.poll()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.clear()", "public void clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>> iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.peek()", "public java.lang.Object peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.poll()", "public java.lang.Object poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.offer(java.lang.Object)", "public boolean offer(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$HashIterator.hasNext()", "public boolean hasNext()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$HashIterator.remove()", "public void remove()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeyIterator.next()", "public K next()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.clear()", "public void clear()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry[]", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.values()", "public static org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry[] values()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getValueReference()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object> getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)", "public void setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getNext()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getNext()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getHash()", "public int getHash()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getKey()", "public java.lang.Object getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getKey()", "public K getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getValueReference()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getHash()", "public int getHash()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getNext()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.getEntry()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.waitForValue()", "public V waitForValue()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength[]", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength.values()", "public static org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength[] values()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength valueOf(java.lang.String)"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getKey()", "public K getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getValueReference()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getHash()", "public int getHash()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getNext()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.get()", "public V get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.getEntry()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.waitForValue()", "public V waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueIterator.next()", "public V next()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.clear()", "public void clear()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getKey()", "public K getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getValueReference()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getHash()", "public int getHash()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getNext()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNext()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getExpirationTime()", "public long getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setExpirationTime(long)", "public void setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getNextExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getPreviousExpirable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getNextEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getPreviousEvictable()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public void setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.getEntry()", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V> getEntry()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)", "public void clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)", "public org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V> copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.isComputingReference()", "public boolean isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.waitForValue()", "public V waitForValue()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getValue()", "public V getValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.hashCode()", "public int hashCode()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.size()", "public int size()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.replace(K, V)", "public V replace(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.clear()", "public void clear()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$1.hasNext()", "public boolean hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$1.next()", "public V next()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$10.getKey()", "public K getKey()"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$10.getValue()", "public V2 getValue()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$11.apply(java.util.Map$Entry<K, V1>)", "public java.util.Map$Entry<K, V2> apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$11.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$3.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$3.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$4.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$4.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Maps$4.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Maps$4.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Maps$4.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$5.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$5.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Maps$5.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Maps$5.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Maps$5.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Maps$5.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Maps$5.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Maps$5.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Maps$5.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$6.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$6.getValue()", "public V getValue()"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$7.transformEntry(K, V1)", "public V2 transformEntry(K, V1)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$8.apply(V1)", "public V2 apply(V1)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$9.apply(java.util.Map$Entry<K, V1>)", "public V2 apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$9.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.put(K, V)", "public V put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$AsMapView$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.createKeySet()", "public java.util.Set<K> createKeySet()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$BiMapConverter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$BiMapConverter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$BiMapConverter.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.firstKey()", "public K firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.values()", "public java.util.Collection<V> values()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$1.apply(java.util.Map$Entry<?, ?>)", "public java.lang.Object apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$2.apply(java.util.Map$Entry<?, ?>)", "public java.lang.Object apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Maps$EntryFunction[]", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction.values()", "public static org.sonar.api.internal.google.common.collect.Maps$EntryFunction[] values()"], ["org.sonar.api.internal.google.common.collect.Maps$EntryFunction", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.Maps$EntryFunction valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.util.Map$Entry<V, K>)", "public boolean apply(java.util.Map$Entry<V, K>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap.values()", "public java.util.Collection values()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.values()", "public java.util.Collection<V> values()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.put(K, V)", "public V put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.clear()", "public void clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.first()", "public K first()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.last()", "public K last()"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.keySet()", "public java.util.SortedSet<K> keySet()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.firstKey()", "public K firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.keySet()", "public java.util.Set keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredKeyMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$ImprovedAbstractMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Maps$ImprovedAbstractMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Maps$ImprovedAbstractMap.values()", "public java.util.Collection<V> values()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.Maps$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$KeySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$KeySet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.areEqual()", "public boolean areEqual()"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnLeft()", "public java.util.Map<K, V> entriesOnlyOnLeft()"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnRight()", "public java.util.Map<K, V> entriesOnlyOnRight()"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesInCommon()", "public java.util.Map<K, V> entriesInCommon()"], ["java.util.Map<K, org.sonar.api.internal.google.common.collect.MapDifference$ValueDifference<V>>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesDiffering()", "public java.util.Map<K, org.sonar.api.internal.google.common.collect.MapDifference$ValueDifference<V>> entriesDiffering()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.toString()", "public java.lang.String toString()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.comparator()", "public java.util.Comparator<? super K> comparator()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.get(java.lang.Object)", "public V get(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.clear()", "public void clear()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.size()", "public int size()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.lower(K)", "public K lower(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.floor(K)", "public K floor(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.ceiling(K)", "public K ceiling(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.higher(K)", "public K higher(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.pollFirst()", "public K pollFirst()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.pollLast()", "public K pollLast()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.descendingSet()", "public java.util.NavigableSet<K> descendingSet()"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.descendingIterator()", "public java.util.Iterator<K> descendingIterator()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.subSet(K, boolean, K, boolean)", "public java.util.NavigableSet<K> subSet(K, boolean, K, boolean)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.headSet(K, boolean)", "public java.util.NavigableSet<K> headSet(K, boolean)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.tailSet(K, boolean)", "public java.util.NavigableSet<K> tailSet(K, boolean)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.keySet()", "public java.util.Set<K> keySet()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.firstKey()", "public K firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.lastKey()", "public K lastKey()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.subSet(K, K)", "public java.util.SortedSet<K> subSet(K, K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.headSet(K)", "public java.util.SortedSet<K> headSet(K)"], ["java.util.SortedSet<K>", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.tailSet(K)", "public java.util.SortedSet<K> tailSet(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.first()", "public K first()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.last()", "public K last()"], ["java.util.SortedMap<K, org.sonar.api.internal.google.common.collect.MapDifference$ValueDifference<V>>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()", "public java.util.SortedMap<K, org.sonar.api.internal.google.common.collect.MapDifference$ValueDifference<V>> entriesDiffering()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()", "public java.util.SortedMap<K, V> entriesInCommon()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()", "public java.util.SortedMap<K, V> entriesOnlyOnLeft()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()", "public java.util.SortedMap<K, V> entriesOnlyOnRight()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()", "public java.util.Map entriesDiffering()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()", "public java.util.Map entriesInCommon()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()", "public java.util.Map entriesOnlyOnRight()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()", "public java.util.Map entriesOnlyOnLeft()"], ["java.util.Iterator<java.util.Map$Entry<K, V2>>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V2>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.get(java.lang.Object)", "public V2 get(java.lang.Object)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.remove(java.lang.Object)", "public V2 remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.clear()", "public void clear()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V2> ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V2> descendingMap()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V2> firstEntry()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V2> floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K)", "public java.util.NavigableMap<K, V2> headMap(K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V2> headMap(K, boolean)"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V2> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V2> lastEntry()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V2> lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V2> pollFirstEntry()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V2> pollLastEntry()"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V2> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, K)", "public java.util.NavigableMap<K, V2> subMap(K, K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K)", "public java.util.NavigableMap<K, V2> tailMap(K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V2> tailMap(K, boolean)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.firstKey()", "public K firstKey()"], ["java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.headMap(K)", "public java.util.SortedMap<K, V2> headMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.subMap(K, K)", "public java.util.SortedMap<K, V2> subMap(K, K)"], ["java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.tailMap(K)", "public java.util.SortedMap<K, V2> tailMap(K)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableBiMap.values()", "public java.util.Set<V> values()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableBiMap.values()", "public java.util.Collection values()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries$1.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntrySet.hashCode()", "public int hashCode()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.pollFirstEntry()", "public final java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.pollLastEntry()", "public final java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.leftValue()", "public V leftValue()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.rightValue()", "public V rightValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.toString()", "public java.lang.String toString()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.Maps$Values.iterator()", "public java.util.Iterator<V> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$Values.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$Values.clear()", "public void clear()"], ["<K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.immutableEnumMap(java.util.Map<K, ? extends V>)", "public static <K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> immutableEnumMap(java.util.Map<K, ? extends V>)"], ["<K, V> java.util.HashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newHashMap()", "public static <K, V> java.util.HashMap<K, V> newHashMap()"], ["<K, V> java.util.HashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newHashMapWithExpectedSize(int)", "public static <K, V> java.util.HashMap<K, V> newHashMapWithExpectedSize(int)"], ["<K, V> java.util.HashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newHashMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> java.util.HashMap<K, V> newHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.LinkedHashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newLinkedHashMap()", "public static <K, V> java.util.LinkedHashMap<K, V> newLinkedHashMap()"], ["<K, V> java.util.LinkedHashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newLinkedHashMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> java.util.LinkedHashMap<K, V> newLinkedHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newConcurrentMap()", "public static <K, V> java.util.concurrent.ConcurrentMap<K, V> newConcurrentMap()"], ["<K extends java.lang.Comparable, V> java.util.TreeMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newTreeMap()", "public static <K extends java.lang.Comparable, V> java.util.TreeMap<K, V> newTreeMap()"], ["<K, V> java.util.TreeMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newTreeMap(java.util.SortedMap<K, ? extends V>)", "public static <K, V> java.util.TreeMap<K, V> newTreeMap(java.util.SortedMap<K, ? extends V>)"], ["<C, K extends C, V> java.util.TreeMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newTreeMap(java.util.Comparator<C>)", "public static <C, K extends C, V> java.util.TreeMap<K, V> newTreeMap(java.util.Comparator<C>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newEnumMap(java.lang.Class<K>)", "public static <K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V> newEnumMap(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newEnumMap(java.util.Map<K, ? extends V>)", "public static <K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V> newEnumMap(java.util.Map<K, ? extends V>)"], ["<K, V> java.util.IdentityHashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newIdentityHashMap()", "public static <K, V> java.util.IdentityHashMap<K, V> newIdentityHashMap()"], ["<K, V> org.sonar.api.internal.google.common.collect.MapDifference<K, V>", "org.sonar.api.internal.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.MapDifference<K, V> difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.MapDifference<K, V>", "org.sonar.api.internal.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, org.sonar.api.internal.google.common.base.Equivalence<? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.MapDifference<K, V> difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, org.sonar.api.internal.google.common.base.Equivalence<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedMapDifference<K, V>", "org.sonar.api.internal.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SortedMapDifference<K, V> difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.asMap(java.util.Set<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)", "public static <K, V> java.util.Map<K, V> asMap(java.util.Set<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.asMap(java.util.SortedSet<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)", "public static <K, V> java.util.SortedMap<K, V> asMap(java.util.SortedSet<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.asMap(java.util.NavigableSet<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)", "public static <K, V> java.util.NavigableMap<K, V> asMap(java.util.NavigableSet<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.toMap(java.lang.Iterable<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> toMap(java.lang.Iterable<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.toMap(java.util.Iterator<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> toMap(java.util.Iterator<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.uniqueIndex(java.lang.Iterable<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> uniqueIndex(java.lang.Iterable<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.uniqueIndex(java.util.Iterator<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V> uniqueIndex(java.util.Iterator<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.collect.Maps.fromProperties(java.util.Properties)", "public static org.sonar.api.internal.google.common.collect.ImmutableMap<java.lang.String, java.lang.String> fromProperties(java.util.Properties)"], ["<K, V> java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps.immutableEntry(K, V)", "public static <K, V> java.util.Map$Entry<K, V> immutableEntry(K, V)"], ["<A, B> org.sonar.api.internal.google.common.base.Converter<A, B>", "org.sonar.api.internal.google.common.collect.Maps.asConverter(org.sonar.api.internal.google.common.collect.BiMap<A, B>)", "public static <A, B> org.sonar.api.internal.google.common.base.Converter<A, B> asConverter(org.sonar.api.internal.google.common.collect.BiMap<A, B>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.synchronizedBiMap(org.sonar.api.internal.google.common.collect.BiMap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V> synchronizedBiMap(org.sonar.api.internal.google.common.collect.BiMap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.unmodifiableBiMap(org.sonar.api.internal.google.common.collect.BiMap<? extends K, ? extends V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V> unmodifiableBiMap(org.sonar.api.internal.google.common.collect.BiMap<? extends K, ? extends V>)"], ["<K, V1, V2> java.util.Map<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformValues(java.util.Map<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> java.util.Map<K, V2> transformValues(java.util.Map<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformValues(java.util.SortedMap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> java.util.SortedMap<K, V2> transformValues(java.util.SortedMap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformValues(java.util.NavigableMap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> java.util.NavigableMap<K, V2> transformValues(java.util.NavigableMap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.Map<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformEntries(java.util.Map<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> java.util.Map<K, V2> transformEntries(java.util.Map<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformEntries(java.util.SortedMap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> java.util.SortedMap<K, V2> transformEntries(java.util.SortedMap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformEntries(java.util.NavigableMap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> java.util.NavigableMap<K, V2> transformEntries(java.util.NavigableMap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)", "public static <K, V> java.util.Map<K, V> filterKeys(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)", "public static <K, V> java.util.SortedMap<K, V> filterKeys(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)", "public static <K, V> java.util.NavigableMap<K, V> filterKeys(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V> filterKeys(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)", "public static <K, V> java.util.Map<K, V> filterValues(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)", "public static <K, V> java.util.SortedMap<K, V> filterValues(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)", "public static <K, V> java.util.NavigableMap<K, V> filterValues(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V> filterValues(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> java.util.Map<K, V> filterEntries(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> java.util.SortedMap<K, V> filterEntries(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> java.util.NavigableMap<K, V> filterEntries(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V> filterEntries(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.unmodifiableNavigableMap(java.util.NavigableMap<K, V>)", "public static <K, V> java.util.NavigableMap<K, V> unmodifiableNavigableMap(java.util.NavigableMap<K, V>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.synchronizedNavigableMap(java.util.NavigableMap<K, V>)", "public static <K, V> java.util.NavigableMap<K, V> synchronizedNavigableMap(java.util.NavigableMap<K, V>)"], ["org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<B>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder.expectedSize(int)", "public org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<B> expectedSize(int)"], ["org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<B>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder.maximumSize(int)", "public org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<B> maximumSize(int)"], ["<T extends B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<T>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder.create()", "public <T extends B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<T> create()"], ["<T extends B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<T>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder.create(java.lang.Iterable<? extends T>)", "public <T extends B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<T> create(java.lang.Iterable<? extends T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$QueueIterator.hasNext()", "public boolean hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$QueueIterator.next()", "public E next()"], ["void", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$QueueIterator.remove()", "public void remove()"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<E>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.create()", "public static <E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<E> create()"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<E>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.create(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<E> create(java.lang.Iterable<? extends E>)"], ["<B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<B>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.orderedBy(java.util.Comparator<B>)", "public static <B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<B> orderedBy(java.util.Comparator<B>)"], ["org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.expectedSize(int)", "public static org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable> expectedSize(int)"], ["org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.maximumSize(int)", "public static org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<java.lang.Comparable> maximumSize(int)"], ["int", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.offer(E)", "public boolean offer(E)"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.poll()", "public E poll()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.peek()", "public E peek()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.removeFirst()", "public E removeFirst()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.peekFirst()", "public E peekFirst()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.pollLast()", "public E pollLast()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.removeLast()", "public E removeLast()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.peekLast()", "public E peekLast()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.iterator()", "public java.util.Iterator<E> iterator()"], ["void", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.clear()", "public void clear()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.toArray()", "public java.lang.Object[] toArray()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ArrayListSupplier.get()", "public java.util.List<V> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ArrayListSupplier.get()", "public java.lang.Object get()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$EnumSetSupplier.get()", "public java.util.Set<V> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$EnumSetSupplier.get()", "public java.lang.Object get()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$HashSetSupplier.get()", "public java.util.Set<V> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$HashSetSupplier.get()", "public java.lang.Object get()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedHashSetSupplier.get()", "public java.util.Set<V> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedHashSetSupplier.get()", "public java.lang.Object get()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier[]", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.values()", "public static org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier[] values()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier valueOf(java.lang.String)"], ["<V> org.sonar.api.internal.google.common.base.Supplier<java.util.List<V>>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.instance()", "public static <V> org.sonar.api.internal.google.common.base.Supplier<java.util.List<V>> instance()"], ["java.util.List<java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.get()", "public java.util.List<java.lang.Object> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.get()", "public java.lang.Object get()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)", "public org.sonar.api.internal.google.common.collect.Multimap build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()", "public <K extends K0, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()", "public <K extends K0, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()", "public <K extends K0, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()", "public <K extends K0, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()", "public <K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()", "public org.sonar.api.internal.google.common.collect.SetMultimap build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()", "public <K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues()", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object> arrayListValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues(int)", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object> arrayListValues(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedListValues()", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object> linkedListValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues()", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> hashSetValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues(int)", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> hashSetValues(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues()", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> linkedHashSetValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues(int)", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object> linkedHashSetValues(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, java.lang.Comparable>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues()", "public org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, java.lang.Comparable> treeSetValues()"], ["<V0> org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, V0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues(java.util.Comparator<V0>)", "public <V0> org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, V0> treeSetValues(java.util.Comparator<V0>)"], ["<V0 extends java.lang.Enum<V0>> org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, V0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.enumSetValues(java.lang.Class<V0>)", "public <V0 extends java.lang.Enum<V0>> org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, V0> enumSetValues(java.lang.Class<V0>)"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)", "public org.sonar.api.internal.google.common.collect.Multimap build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V> build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)", "public org.sonar.api.internal.google.common.collect.SetMultimap build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()", "public org.sonar.api.internal.google.common.collect.SetMultimap build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)", "public org.sonar.api.internal.google.common.collect.Multimap build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()", "public org.sonar.api.internal.google.common.collect.Multimap build()"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$TreeSetSupplier.get()", "public java.util.SortedSet<V> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$TreeSetSupplier.get()", "public java.lang.Object get()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.hashKeys()", "public static org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> hashKeys()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.hashKeys(int)", "public static org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> hashKeys(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.linkedHashKeys()", "public static org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> linkedHashKeys()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.linkedHashKeys(int)", "public static org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Object> linkedHashKeys(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Comparable>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.treeKeys()", "public static org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<java.lang.Comparable> treeKeys()"], ["<K0> org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.treeKeys(java.util.Comparator<K0>)", "public static <K0> org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0> treeKeys(java.util.Comparator<K0>)"], ["<K0 extends java.lang.Enum<K0>> org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.enumKeys(java.lang.Class<K0>)", "public static <K0 extends java.lang.Enum<K0>> org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0> enumKeys(java.lang.Class<K0>)"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public <K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.Multimap<K, V> build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap$EntrySet$1.apply(K)", "public java.util.Collection<V> apply(K)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap$EntrySet$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.size()", "public int size()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.remove(java.lang.Object)", "public java.util.Collection<V> remove(java.lang.Object)"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.keySet()", "public java.util.Set<K> keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.clear()", "public void clear()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.Multimaps$CustomSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.clear()", "public void clear()"], ["K", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$1$1.getElement()", "public K getElement()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$1$1.getCount()", "public int getCount()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<K>>", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.iterator()", "public java.util.Iterator<org.sonar.api.internal.google.common.collect.Multiset$Entry<K>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<K>", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.iterator()", "public java.util.Iterator<K> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.clear()", "public void clear()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.elementSet()", "public java.util.Set<K> elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1$1.hasNext()", "public boolean hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1$1.next()", "public V next()"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1$1.remove()", "public void remove()"], ["java.util.Iterator<V>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1.size()", "public int size()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.get(K)", "public java.util.Set<V> get(K)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.clear()", "public void clear()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.hashCode()", "public int hashCode()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.List<V2>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.get(K)", "public java.util.List<V2> get(K)"], ["java.util.List<V2>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.removeAll(java.lang.Object)", "public java.util.List<V2> removeAll(java.lang.Object)"], ["java.util.List<V2>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)", "public java.util.List<V2> replaceValues(K, java.lang.Iterable<? extends V2>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection<V2>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap$1.transformEntry(K, java.util.Collection<V1>)", "public java.util.Collection<V2> transformEntry(K, java.util.Collection<V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap$1.transformEntry(java.lang.Object, java.lang.Object)", "public java.lang.Object transformEntry(java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Collection<V2>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.get(K)", "public java.util.Collection<V2> get(K)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.isEmpty()", "public boolean isEmpty()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.keySet()", "public java.util.Set<K> keySet()"], ["org.sonar.api.internal.google.common.collect.Multiset<K>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset<K> keys()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.put(K, V2)", "public boolean put(K, V2)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(K, java.lang.Iterable<? extends V2>)", "public boolean putAll(K, java.lang.Iterable<? extends V2>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V2>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V2>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V2>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V2> removeAll(java.lang.Object)"], ["java.util.Collection<V2>", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.replaceValues(K, java.lang.Iterable<? extends V2>)", "public java.util.Collection<V2> replaceValues(K, java.lang.Iterable<? extends V2>)"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()", "public org.sonar.api.internal.google.common.collect.ListMultimap<K, V> delegate()"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()", "public org.sonar.api.internal.google.common.collect.Multimap delegate()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()", "public java.lang.Object delegate()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap$1.apply(java.util.Collection<V>)", "public java.util.Collection<V> apply(java.util.Collection<V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.clear()", "public void clear()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["org.sonar.api.internal.google.common.collect.Multiset<K>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset<K> keys()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.keySet()", "public java.util.Set<K> keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.values()", "public java.util.Collection<V> values()"], ["org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()", "public org.sonar.api.internal.google.common.collect.SetMultimap<K, V> delegate()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()", "public java.util.Collection entries()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()", "public org.sonar.api.internal.google.common.collect.Multimap delegate()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()", "public java.lang.Object delegate()"], ["org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V> delegate()"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public org.sonar.api.internal.google.common.collect.SetMultimap delegate()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public org.sonar.api.internal.google.common.collect.Multimap delegate()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()", "public java.lang.Object delegate()"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Collection<V>>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> newMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Collection<V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newListMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.List<V>>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> newListMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.List<V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newSetMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Set<V>>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> newSetMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Set<V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.SortedSet<V>>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V> newSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.SortedSet<V>>)"], ["<K, V, M extends org.sonar.api.internal.google.common.collect.Multimap<K, V>> M", "org.sonar.api.internal.google.common.collect.Multimaps.invertFrom(org.sonar.api.internal.google.common.collect.Multimap<? extends V, ? extends K>, M)", "public static <K, V, M extends org.sonar.api.internal.google.common.collect.Multimap<K, V>> M invertFrom(org.sonar.api.internal.google.common.collect.Multimap<? extends V, ? extends K>, M)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> synchronizedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> unmodifiableMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableMultimap(org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> unmodifiableMultimap(org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> synchronizedSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> unmodifiableSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableSetMultimap(org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> unmodifiableSetMultimap(org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V> synchronizedSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V> unmodifiableSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> synchronizedListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> unmodifiableListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableListMultimap(org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> unmodifiableListMultimap(org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.List<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.List<V>> asMap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Set<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.Set<V>> asMap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.SortedSet<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.SortedSet<V>> asMap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)", "public static <K, V> java.util.Map<K, java.util.Collection<V>> asMap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.forMap(java.util.Map<K, V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> forMap(java.util.Map<K, V>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.Multimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformValues(org.sonar.api.internal.google.common.collect.Multimap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> org.sonar.api.internal.google.common.collect.Multimap<K, V2> transformValues(org.sonar.api.internal.google.common.collect.Multimap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.Multimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformEntries(org.sonar.api.internal.google.common.collect.Multimap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> org.sonar.api.internal.google.common.collect.Multimap<K, V2> transformEntries(org.sonar.api.internal.google.common.collect.Multimap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.ListMultimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformValues(org.sonar.api.internal.google.common.collect.ListMultimap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)", "public static <K, V1, V2> org.sonar.api.internal.google.common.collect.ListMultimap<K, V2> transformValues(org.sonar.api.internal.google.common.collect.ListMultimap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.ListMultimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformEntries(org.sonar.api.internal.google.common.collect.ListMultimap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)", "public static <K, V1, V2> org.sonar.api.internal.google.common.collect.ListMultimap<K, V2> transformEntries(org.sonar.api.internal.google.common.collect.ListMultimap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.index(java.lang.Iterable<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> index(java.lang.Iterable<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.index(java.util.Iterator<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V> index(java.util.Iterator<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterKeys(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> filterKeys(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterKeys(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> filterKeys(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterKeys(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)", "public static <K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V> filterKeys(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterValues(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> filterValues(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterValues(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> filterValues(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterEntries(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V> filterEntries(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterEntries(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)", "public static <K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V> filterEntries(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$1.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$1.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$2.count(java.lang.Object)", "public int count(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$3.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$3.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$3.size()", "public int size()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$3.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$4.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$5.compare(org.sonar.api.internal.google.common.collect.Multiset$Entry<?>, org.sonar.api.internal.google.common.collect.Multiset$Entry<?>)", "public int compare(org.sonar.api.internal.google.common.collect.Multiset$Entry<?>, org.sonar.api.internal.google.common.collect.Multiset$Entry<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$5.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$AbstractEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$AbstractEntry.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Multisets$AbstractEntry.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$EntrySet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset$1.apply(org.sonar.api.internal.google.common.collect.Multiset$Entry<E>)", "public boolean apply(org.sonar.api.internal.google.common.collect.Multiset$Entry<E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.add(E, int)", "public int add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.clear()", "public void clear()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.iterator()", "public java.util.Iterator iterator()"], ["E", "org.sonar.api.internal.google.common.collect.Multisets$ImmutableEntry.getElement()", "public E getElement()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$ImmutableEntry.getCount()", "public int getCount()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$MultisetIteratorImpl.hasNext()", "public boolean hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.Multisets$MultisetIteratorImpl.next()", "public E next()"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$MultisetIteratorImpl.remove()", "public void remove()"], ["java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.entrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> entrySet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.add(E)", "public boolean add(E)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.add(E, int)", "public int add(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.clear()", "public void clear()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.unmodifiableMultiset(org.sonar.api.internal.google.common.collect.Multiset<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset<E> unmodifiableMultiset(org.sonar.api.internal.google.common.collect.Multiset<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.unmodifiableMultiset(org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset<E> unmodifiableMultiset(org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>)"], ["<E> org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.unmodifiableSortedMultiset(org.sonar.api.internal.google.common.collect.SortedMultiset<E>)", "public static <E> org.sonar.api.internal.google.common.collect.SortedMultiset<E> unmodifiableSortedMultiset(org.sonar.api.internal.google.common.collect.SortedMultiset<E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.Multisets.immutableEntry(E, int)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset$Entry<E> immutableEntry(E, int)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.filter(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset<E> filter(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.union(org.sonar.api.internal.google.common.collect.Multiset<? extends E>, org.sonar.api.internal.google.common.collect.Multiset<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset<E> union(org.sonar.api.internal.google.common.collect.Multiset<? extends E>, org.sonar.api.internal.google.common.collect.Multiset<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.intersection(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.collect.Multiset<?>)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset<E> intersection(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.sum(org.sonar.api.internal.google.common.collect.Multiset<? extends E>, org.sonar.api.internal.google.common.collect.Multiset<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset<E> sum(org.sonar.api.internal.google.common.collect.Multiset<? extends E>, org.sonar.api.internal.google.common.collect.Multiset<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.difference(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.collect.Multiset<?>)", "public static <E> org.sonar.api.internal.google.common.collect.Multiset<E> difference(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets.containsOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, org.sonar.api.internal.google.common.collect.Multiset<?>)", "public static boolean containsOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets.retainOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, org.sonar.api.internal.google.common.collect.Multiset<?>)", "public static boolean retainOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets.removeOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, java.lang.Iterable<?>)", "public static boolean removeOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, java.lang.Iterable<?>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.copyHighestCountFirst(org.sonar.api.internal.google.common.collect.Multiset<E>)", "public static <E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E> copyHighestCountFirst(org.sonar.api.internal.google.common.collect.Multiset<E>)"], ["void", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap$1.checkKeyValue(java.lang.Class<?>, java.lang.Object)", "public void checkKeyValue(java.lang.Class<?>, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap$1.checkKeyValue(java.lang.Object, java.lang.Object)", "public void checkKeyValue(java.lang.Object, java.lang.Object)"], ["<B> org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap<B>", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.create()", "public static <B> org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap<B> create()"], ["<B> org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap<B>", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.create(java.util.Map<java.lang.Class<? extends B>, B>)", "public static <B> org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap<B> create(java.util.Map<java.lang.Class<? extends B>, B>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["void", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.entrySet()", "public java.util.Set entrySet()"], ["int", "org.sonar.api.internal.google.common.collect.NaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NaturalOrdering.reverse()", "public <S extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<S> reverse()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.NaturalOrdering.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.NaturalOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.compare(T, T)", "public int compare(T, T)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.reverse()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> reverse()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.nullsFirst()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> nullsFirst()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.nullsLast()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> nullsLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.compare(T, T)", "public int compare(T, T)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.reverse()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> reverse()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.nullsFirst()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> nullsFirst()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.nullsLast()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> nullsLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.toString()", "public java.lang.String toString()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.newArray(java.lang.Class<T>, int)", "public static <T> T[] newArray(java.lang.Class<T>, int)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.newArray(T[], int)", "public static <T> T[] newArray(T[], int)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.concat(T[], T[], java.lang.Class<T>)", "public static <T> T[] concat(T[], T[], java.lang.Class<T>)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.concat(T, T[])", "public static <T> T[] concat(T, T[])"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.concat(T[], T)", "public static <T> T[] concat(T[], T)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering$1.apply(java.lang.Object)", "public java.lang.Integer apply(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering.toString()", "public java.lang.String toString()"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<C>", "org.sonar.api.internal.google.common.collect.Ordering.natural()", "public static <C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<C> natural()"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.from(java.util.Comparator<T>)", "public static <T> org.sonar.api.internal.google.common.collect.Ordering<T> from(java.util.Comparator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.from(org.sonar.api.internal.google.common.collect.Ordering<T>)", "public static <T> org.sonar.api.internal.google.common.collect.Ordering<T> from(org.sonar.api.internal.google.common.collect.Ordering<T>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.explicit(java.util.List<T>)", "public static <T> org.sonar.api.internal.google.common.collect.Ordering<T> explicit(java.util.List<T>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.explicit(T, T...)", "public static <T> org.sonar.api.internal.google.common.collect.Ordering<T> explicit(T, T...)"], ["org.sonar.api.internal.google.common.collect.Ordering<java.lang.Object>", "org.sonar.api.internal.google.common.collect.Ordering.allEqual()", "public static org.sonar.api.internal.google.common.collect.Ordering<java.lang.Object> allEqual()"], ["org.sonar.api.internal.google.common.collect.Ordering<java.lang.Object>", "org.sonar.api.internal.google.common.collect.Ordering.usingToString()", "public static org.sonar.api.internal.google.common.collect.Ordering<java.lang.Object> usingToString()"], ["org.sonar.api.internal.google.common.collect.Ordering<java.lang.Object>", "org.sonar.api.internal.google.common.collect.Ordering.arbitrary()", "public static org.sonar.api.internal.google.common.collect.Ordering<java.lang.Object> arbitrary()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.Ordering.reverse()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> reverse()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.Ordering.nullsFirst()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> nullsFirst()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.Ordering.nullsLast()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> nullsLast()"], ["<F> org.sonar.api.internal.google.common.collect.Ordering<F>", "org.sonar.api.internal.google.common.collect.Ordering.onResultOf(org.sonar.api.internal.google.common.base.Function<F, ? extends T>)", "public <F> org.sonar.api.internal.google.common.collect.Ordering<F> onResultOf(org.sonar.api.internal.google.common.base.Function<F, ? extends T>)"], ["<U extends T> org.sonar.api.internal.google.common.collect.Ordering<U>", "org.sonar.api.internal.google.common.collect.Ordering.compound(java.util.Comparator<? super U>)", "public <U extends T> org.sonar.api.internal.google.common.collect.Ordering<U> compound(java.util.Comparator<? super U>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)", "public static <T> org.sonar.api.internal.google.common.collect.Ordering<T> compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<java.lang.Iterable<S>>", "org.sonar.api.internal.google.common.collect.Ordering.lexicographical()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<java.lang.Iterable<S>> lexicographical()"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(java.util.Iterator<E>)", "public <E extends T> E min(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(java.lang.Iterable<E>)", "public <E extends T> E min(java.lang.Iterable<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(E, E)", "public <E extends T> E min(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(E, E, E, E...)", "public <E extends T> E min(E, E, E, E...)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(java.util.Iterator<E>)", "public <E extends T> E max(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(java.lang.Iterable<E>)", "public <E extends T> E max(java.lang.Iterable<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(E, E)", "public <E extends T> E max(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(E, E, E, E...)", "public <E extends T> E max(E, E, E, E...)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.leastOf(java.lang.Iterable<E>, int)", "public <E extends T> java.util.List<E> leastOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.leastOf(java.util.Iterator<E>, int)", "public <E extends T> java.util.List<E> leastOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.greatestOf(java.lang.Iterable<E>, int)", "public <E extends T> java.util.List<E> greatestOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.greatestOf(java.util.Iterator<E>, int)", "public <E extends T> java.util.List<E> greatestOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.sortedCopy(java.lang.Iterable<E>)", "public <E extends T> java.util.List<E> sortedCopy(java.lang.Iterable<E>)"], ["<E extends T> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.Ordering.immutableSortedCopy(java.lang.Iterable<E>)", "public <E extends T> org.sonar.api.internal.google.common.collect.ImmutableList<E> immutableSortedCopy(java.lang.Iterable<E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Ordering.isOrdered(java.lang.Iterable<? extends T>)", "public boolean isOrdered(java.lang.Iterable<? extends T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)", "public boolean isStrictlyOrdered(java.lang.Iterable<? extends T>)"], ["int", "org.sonar.api.internal.google.common.collect.Ordering.binarySearch(java.util.List<? extends T>, T)", "public int binarySearch(java.util.List<? extends T>, T)"], ["<E> java.util.concurrent.ArrayBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newArrayBlockingQueue(int)", "public static <E> java.util.concurrent.ArrayBlockingQueue<E> newArrayBlockingQueue(int)"], ["<E> java.util.ArrayDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newArrayDeque()", "public static <E> java.util.ArrayDeque<E> newArrayDeque()"], ["<E> java.util.ArrayDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newArrayDeque(java.lang.Iterable<? extends E>)", "public static <E> java.util.ArrayDeque<E> newArrayDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newConcurrentLinkedQueue()", "public static <E> java.util.concurrent.ConcurrentLinkedQueue<E> newConcurrentLinkedQueue()"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newConcurrentLinkedQueue(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.ConcurrentLinkedQueue<E> newConcurrentLinkedQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingDeque()", "public static <E> java.util.concurrent.LinkedBlockingDeque<E> newLinkedBlockingDeque()"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingDeque(int)", "public static <E> java.util.concurrent.LinkedBlockingDeque<E> newLinkedBlockingDeque(int)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingDeque(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.LinkedBlockingDeque<E> newLinkedBlockingDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingQueue()", "public static <E> java.util.concurrent.LinkedBlockingQueue<E> newLinkedBlockingQueue()"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingQueue(int)", "public static <E> java.util.concurrent.LinkedBlockingQueue<E> newLinkedBlockingQueue(int)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingQueue(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.LinkedBlockingQueue<E> newLinkedBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityBlockingQueue()", "public static <E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E> newPriorityBlockingQueue()"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityBlockingQueue(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E> newPriorityBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityQueue()", "public static <E extends java.lang.Comparable> java.util.PriorityQueue<E> newPriorityQueue()"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityQueue(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> java.util.PriorityQueue<E> newPriorityQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.SynchronousQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newSynchronousQueue()", "public static <E> java.util.concurrent.SynchronousQueue<E> newSynchronousQueue()"], ["<E> int", "org.sonar.api.internal.google.common.collect.Queues.drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)", "public static <E> int drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<E> int", "org.sonar.api.internal.google.common.collect.Queues.drainUninterruptibly(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)", "public static <E> int drainUninterruptibly(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)"], ["<E> java.util.Queue<E>", "org.sonar.api.internal.google.common.collect.Queues.synchronizedQueue(java.util.Queue<E>)", "public static <E> java.util.Queue<E> synchronizedQueue(java.util.Queue<E>)"], ["<E> java.util.Deque<E>", "org.sonar.api.internal.google.common.collect.Queues.synchronizedDeque(java.util.Deque<E>)", "public static <E> java.util.Deque<E> synchronizedDeque(java.util.Deque<E>)"], ["org.sonar.api.internal.google.common.collect.Cut", "org.sonar.api.internal.google.common.collect.Range$1.apply(org.sonar.api.internal.google.common.collect.Range)", "public org.sonar.api.internal.google.common.collect.Cut apply(org.sonar.api.internal.google.common.collect.Range)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Range$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Cut", "org.sonar.api.internal.google.common.collect.Range$2.apply(org.sonar.api.internal.google.common.collect.Range)", "public org.sonar.api.internal.google.common.collect.Cut apply(org.sonar.api.internal.google.common.collect.Range)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Range$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Range$3.compare(org.sonar.api.internal.google.common.collect.Range<?>, org.sonar.api.internal.google.common.collect.Range<?>)", "public int compare(org.sonar.api.internal.google.common.collect.Range<?>, org.sonar.api.internal.google.common.collect.Range<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Range$3.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.open(C, C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> open(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.closed(C, C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> closed(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.closedOpen(C, C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> closedOpen(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.openClosed(C, C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> openClosed(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.range(C, org.sonar.api.internal.google.common.collect.BoundType, C, org.sonar.api.internal.google.common.collect.BoundType)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> range(C, org.sonar.api.internal.google.common.collect.BoundType, C, org.sonar.api.internal.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.lessThan(C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> lessThan(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.atMost(C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> atMost(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.upTo(C, org.sonar.api.internal.google.common.collect.BoundType)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> upTo(C, org.sonar.api.internal.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.greaterThan(C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> greaterThan(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.atLeast(C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> atLeast(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.downTo(C, org.sonar.api.internal.google.common.collect.BoundType)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> downTo(C, org.sonar.api.internal.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.all()", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> all()"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.singleton(C)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> singleton(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.encloseAll(java.lang.Iterable<C>)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C> encloseAll(java.lang.Iterable<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.hasLowerBound()", "public boolean hasLowerBound()"], ["C", "org.sonar.api.internal.google.common.collect.Range.lowerEndpoint()", "public C lowerEndpoint()"], ["org.sonar.api.internal.google.common.collect.BoundType", "org.sonar.api.internal.google.common.collect.Range.lowerBoundType()", "public org.sonar.api.internal.google.common.collect.BoundType lowerBoundType()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.hasUpperBound()", "public boolean hasUpperBound()"], ["C", "org.sonar.api.internal.google.common.collect.Range.upperEndpoint()", "public C upperEndpoint()"], ["org.sonar.api.internal.google.common.collect.BoundType", "org.sonar.api.internal.google.common.collect.Range.upperBoundType()", "public org.sonar.api.internal.google.common.collect.BoundType upperBoundType()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.contains(C)", "public boolean contains(C)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.apply(C)", "public boolean apply(C)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.containsAll(java.lang.Iterable<? extends C>)", "public boolean containsAll(java.lang.Iterable<? extends C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.encloses(org.sonar.api.internal.google.common.collect.Range<C>)", "public boolean encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.isConnected(org.sonar.api.internal.google.common.collect.Range<C>)", "public boolean isConnected(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.intersection(org.sonar.api.internal.google.common.collect.Range<C>)", "public org.sonar.api.internal.google.common.collect.Range<C> intersection(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.span(org.sonar.api.internal.google.common.collect.Range<C>)", "public org.sonar.api.internal.google.common.collect.Range<C> span(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.canonical(org.sonar.api.internal.google.common.collect.DiscreteDomain<C>)", "public org.sonar.api.internal.google.common.collect.Range<C> canonical(org.sonar.api.internal.google.common.collect.DiscreteDomain<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Range.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Range.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C>", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C> iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C>", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.descendingIterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<C> descendingIterator()"], ["C", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.first()", "public C first()"], ["C", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.last()", "public C last()"], ["int", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.isEmpty()", "public boolean isEmpty()"], ["org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.intersection(org.sonar.api.internal.google.common.collect.ContiguousSet<C>)", "public org.sonar.api.internal.google.common.collect.ContiguousSet<C> intersection(org.sonar.api.internal.google.common.collect.ContiguousSet<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.range()", "public org.sonar.api.internal.google.common.collect.Range<C> range()"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.range(org.sonar.api.internal.google.common.collect.BoundType, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.Range<C> range(org.sonar.api.internal.google.common.collect.BoundType, org.sonar.api.internal.google.common.collect.BoundType)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.last()", "public java.lang.Object last()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.first()", "public java.lang.Object first()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableAsList.listIterator(int)", "public org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E> listIterator(int)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableAsList.get(int)", "public E get(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.RegularImmutableAsList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$1.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$1.hashCode()", "public int hashCode()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$1.iterator()", "public java.util.Iterator iterator()"], ["java.util.Map$Entry<V, K>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)", "public java.util.Map$Entry<V, K> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)", "public java.lang.Object get(int)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<V, K>>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<V, K>> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V> inverse()"], ["K", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.get(java.lang.Object)", "public K get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap inverse()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<V, K>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap<V, K> inverse()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap inverse()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableList.size()", "public int size()"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableList.get(int)", "public E get(int)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableList.listIterator(int)", "public org.sonar.api.internal.google.common.collect.UnmodifiableListIterator<E> listIterator(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.RegularImmutableList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableMap$EntrySet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableMap$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMap.size()", "public int size()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.elementSet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<E> elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.hashCode()", "public int hashCode()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.elementSet()", "public java.util.Set elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.hashCode()", "public int hashCode()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet$1.get(int)", "public java.util.Map$Entry<K, V> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet$1.get(int)", "public java.lang.Object get(int)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<K> keySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<V>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.values()", "public org.sonar.api.internal.google.common.collect.ImmutableCollection<V> values()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.headMap(K, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> headMap(K, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.tailMap(K, boolean)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V> tailMap(K, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.keySet()", "public java.util.Set keySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.keySet()", "public org.sonar.api.internal.google.common.collect.ImmutableSet keySet()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> firstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> lastEntry()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E> elementSet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E> tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.descendingIterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> descendingIterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.first()", "public E first()"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.last()", "public E last()"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.higher(E)", "public E higher(E)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.descendingIterator()", "public java.util.Iterator descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$1.compare(org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>, org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>)", "public int compare(org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>, org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet$1.get(int)", "public org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet$1.get(int)", "public java.lang.Object get(int)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$Values.size()", "public int size()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$Values.get(int)", "public V get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.reverse()", "public <S extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<S> reverse()"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(E, E)", "public <E extends java.lang.Comparable> E min(E, E)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(E, E, E, E...)", "public <E extends java.lang.Comparable> E min(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator<E>)", "public <E extends java.lang.Comparable> E min(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable<E>)", "public <E extends java.lang.Comparable> E min(java.lang.Iterable<E>)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(E, E)", "public <E extends java.lang.Comparable> E max(E, E)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(E, E, E, E...)", "public <E extends java.lang.Comparable> E max(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator<E>)", "public <E extends java.lang.Comparable> E max(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable<E>)", "public <E extends java.lang.Comparable> E max(java.lang.Iterable<E>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])", "public java.lang.Object max(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object)", "public java.lang.Object max(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable)", "public java.lang.Object max(java.lang.Iterable)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator)", "public java.lang.Object max(java.util.Iterator)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])", "public java.lang.Object min(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object)", "public java.lang.Object min(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable)", "public java.lang.Object min(java.lang.Iterable)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator)", "public java.lang.Object min(java.util.Iterator)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseOrdering.compare(T, T)", "public int compare(T, T)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.ReverseOrdering.reverse()", "public <S extends T> org.sonar.api.internal.google.common.collect.Ordering<S> reverse()"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(E, E)", "public <E extends T> E min(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(E, E, E, E...)", "public <E extends T> E min(E, E, E, E...)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(java.util.Iterator<E>)", "public <E extends T> E min(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(java.lang.Iterable<E>)", "public <E extends T> E min(java.lang.Iterable<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(E, E)", "public <E extends T> E max(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(E, E, E, E...)", "public <E extends T> E max(E, E, E, E...)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(java.util.Iterator<E>)", "public <E extends T> E max(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(java.lang.Iterable<E>)", "public <E extends T> E max(java.lang.Iterable<E>)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseOrdering.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ReverseOrdering.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ReverseOrdering.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.Sets$1.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$1.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$1.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["<S extends java.util.Set<E>> S", "org.sonar.api.internal.google.common.collect.Sets$1.copyInto(S)", "public <S extends java.util.Set<E>> S copyInto(S)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$1.immutableCopy()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<E> immutableCopy()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$2.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Sets$2.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$2.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$2.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$2.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$3.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Sets$3.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$3.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$3.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet$1.size()", "public int size()"], ["java.util.List<E>", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet$1.get(int)", "public java.util.List<E> get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet$1.get(int)", "public java.lang.Object get(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet.hashCode()", "public int hashCode()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.higher(E)", "public E higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.first()", "public E first()"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.last()", "public E last()"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.iterator()", "public java.util.Iterator<E> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.toString()", "public java.lang.String toString()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.higher(E)", "public E higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.last()", "public E last()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$FilteredSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$FilteredSet.hashCode()", "public int hashCode()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.first()", "public E first()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.last()", "public E last()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$ImprovedAbstractSet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$ImprovedAbstractSet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<java.util.Set<E>>", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.iterator()", "public java.util.Iterator<java.util.Set<E>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$SetView.immutableCopy()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<E> immutableCopy()"], ["<S extends java.util.Set<E>> S", "org.sonar.api.internal.google.common.collect.Sets$SetView.copyInto(S)", "public <S extends java.util.Set<E>> S copyInto(S)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$SubSet$1.hasNext()", "public boolean hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$SubSet$1.next()", "public E next()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$SubSet.iterator()", "public java.util.Iterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Sets$SubSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$SubSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.higher(E)", "public E higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.immutableEnumSet(E, E...)", "public static <E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.ImmutableSet<E> immutableEnumSet(E, E...)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.immutableEnumSet(java.lang.Iterable<E>)", "public static <E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.ImmutableSet<E> immutableEnumSet(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet()", "public static <E> java.util.HashSet<E> newHashSet()"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet(E...)", "public static <E> java.util.HashSet<E> newHashSet(E...)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSetWithExpectedSize(int)", "public static <E> java.util.HashSet<E> newHashSetWithExpectedSize(int)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet(java.lang.Iterable<? extends E>)", "public static <E> java.util.HashSet<E> newHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)", "public static <E> java.util.HashSet<E> newHashSet(java.util.Iterator<? extends E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newConcurrentHashSet()", "public static <E> java.util.Set<E> newConcurrentHashSet()"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newConcurrentHashSet(java.lang.Iterable<? extends E>)", "public static <E> java.util.Set<E> newConcurrentHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.LinkedHashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newLinkedHashSet()", "public static <E> java.util.LinkedHashSet<E> newLinkedHashSet()"], ["<E> java.util.LinkedHashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(int)", "public static <E> java.util.LinkedHashSet<E> newLinkedHashSetWithExpectedSize(int)"], ["<E> java.util.LinkedHashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newLinkedHashSet(java.lang.Iterable<? extends E>)", "public static <E> java.util.LinkedHashSet<E> newLinkedHashSet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newTreeSet()", "public static <E extends java.lang.Comparable> java.util.TreeSet<E> newTreeSet()"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newTreeSet(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> java.util.TreeSet<E> newTreeSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.TreeSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newTreeSet(java.util.Comparator<? super E>)", "public static <E> java.util.TreeSet<E> newTreeSet(java.util.Comparator<? super E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newIdentityHashSet()", "public static <E> java.util.Set<E> newIdentityHashSet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "org.sonar.api.internal.google.common.collect.Sets.newCopyOnWriteArraySet()", "public static <E> java.util.concurrent.CopyOnWriteArraySet<E> newCopyOnWriteArraySet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "org.sonar.api.internal.google.common.collect.Sets.newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)", "public static <E> java.util.concurrent.CopyOnWriteArraySet<E> newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "org.sonar.api.internal.google.common.collect.Sets.complementOf(java.util.Collection<E>)", "public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> complementOf(java.util.Collection<E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "org.sonar.api.internal.google.common.collect.Sets.complementOf(java.util.Collection<E>, java.lang.Class<E>)", "public static <E extends java.lang.Enum<E>> java.util.EnumSet<E> complementOf(java.util.Collection<E>, java.lang.Class<E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newSetFromMap(java.util.Map<E, java.lang.Boolean>)", "public static <E> java.util.Set<E> newSetFromMap(java.util.Map<E, java.lang.Boolean>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.Sets$SetView<E> union(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)", "public static <E> org.sonar.api.internal.google.common.collect.Sets$SetView<E> intersection(java.util.Set<E>, java.util.Set<?>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)", "public static <E> org.sonar.api.internal.google.common.collect.Sets$SetView<E> difference(java.util.Set<E>, java.util.Set<?>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)", "public static <E> org.sonar.api.internal.google.common.collect.Sets$SetView<E> symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.filter(java.util.Set<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public static <E> java.util.Set<E> filter(java.util.Set<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<E> java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets.filter(java.util.SortedSet<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public static <E> java.util.SortedSet<E> filter(java.util.SortedSet<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<E> java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.filter(java.util.NavigableSet<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)", "public static <E> java.util.NavigableSet<E> filter(java.util.NavigableSet<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<B> java.util.Set<java.util.List<B>>", "org.sonar.api.internal.google.common.collect.Sets.cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)", "public static <B> java.util.Set<java.util.List<B>> cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)"], ["<B> java.util.Set<java.util.List<B>>", "org.sonar.api.internal.google.common.collect.Sets.cartesianProduct(java.util.Set<? extends B>...)", "public static <B> java.util.Set<java.util.List<B>> cartesianProduct(java.util.Set<? extends B>...)"], ["<E> java.util.Set<java.util.Set<E>>", "org.sonar.api.internal.google.common.collect.Sets.powerSet(java.util.Set<E>)", "public static <E> java.util.Set<java.util.Set<E>> powerSet(java.util.Set<E>)"], ["<E> java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.unmodifiableNavigableSet(java.util.NavigableSet<E>)", "public static <E> java.util.NavigableSet<E> unmodifiableNavigableSet(java.util.NavigableSet<E>)"], ["<E> java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.synchronizedNavigableSet(java.util.NavigableSet<E>)", "public static <E> java.util.NavigableSet<E> synchronizedNavigableSet(java.util.NavigableSet<E>)"], ["V", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<V, K>", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.ImmutableBiMap<V, K> inverse()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap inverse()"], ["E", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.get(int)", "public E get(int)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.subList(int, int)", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> subList(int, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.reverse()", "public org.sonar.api.internal.google.common.collect.ImmutableList<E> reverse()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.isEmpty()", "public boolean isEmpty()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.iterator()", "public java.util.Iterator iterator()"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E>", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.toString()", "public java.lang.String toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, V>", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.column(C)", "public org.sonar.api.internal.google.common.collect.ImmutableMap<R, V> column(C)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.columnMap()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>> columnMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.rowMap()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>> rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.size()", "public int size()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)", "public static boolean hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)"], ["<E> java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.SortedIterables.comparator(java.util.SortedSet<E>)", "public static <E> java.util.Comparator<? super E> comparator(java.util.SortedSet<E>)"], ["int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior$2.resultIndex(int)", "public int resultIndex(int)"], ["int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior$3.resultIndex(int)", "public int resultIndex(int)"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior[]", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior.values()", "public static org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior[] values()"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior valueOf(java.lang.String)"], ["<E> int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior$4.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)", "public <E> int resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["<E> int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior$5.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)", "public <E> int resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior[]", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior.values()", "public static org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior[] values()"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior valueOf(java.lang.String)"], ["<E extends java.lang.Comparable> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E extends java.lang.Comparable> int binarySearch(java.util.List<? extends E>, E, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K extends java.lang.Comparable> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<E>, org.sonar.api.internal.google.common.base.Function<? super E, K>, K, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E, K extends java.lang.Comparable> int binarySearch(java.util.List<E>, org.sonar.api.internal.google.common.base.Function<? super E, K>, K, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<E>, org.sonar.api.internal.google.common.base.Function<? super E, K>, K, java.util.Comparator<? super K>, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E, K> int binarySearch(java.util.List<E>, org.sonar.api.internal.google.common.base.Function<? super E, K>, K, java.util.Comparator<? super K>, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)", "public static <E> int binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.first()", "public E first()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.last()", "public E last()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.floor(E)", "public E floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.ceiling(E)", "public E ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.higher(E)", "public E higher(E)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.columnMap()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>> columnMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.rowMap()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>> rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.size()", "public int size()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.SortedSet<R>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.keySet()", "public java.util.SortedSet<R> keySet()"], ["java.util.Comparator<? super R>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.comparator()", "public java.util.Comparator<? super R> comparator()"], ["R", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.firstKey()", "public R firstKey()"], ["R", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.lastKey()", "public R lastKey()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.headMap(R)", "public java.util.SortedMap<R, java.util.Map<C, V>> headMap(R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.subMap(R, R)", "public java.util.SortedMap<R, java.util.Map<C, V>> subMap(R, R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.tailMap(R)", "public java.util.SortedMap<R, java.util.Map<C, V>> tailMap(R)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.keySet()", "public java.util.Set keySet()"], ["java.util.SortedSet<R>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable.rowKeySet()", "public java.util.SortedSet<R> rowKeySet()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable.rowMap()", "public java.util.SortedMap<R, java.util.Map<C, V>> rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.hasNext()", "public boolean hasNext()"], ["org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.next()", "public org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V> next()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<R, V>>", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<R, V>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["R", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySetIterator$1.getKey()", "public R getKey()"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySetIterator$1.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySetIterator$1.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$Values.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$Values.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$Values.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column.put(R, V)", "public V put(R, V)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["java.util.Iterator<C>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.iterator()", "public java.util.Iterator<C> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(C)", "public java.util.Map<R, V> apply(C)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<C, java.util.Map<R, V>>>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<C, java.util.Map<R, V>>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)", "public java.util.Map<R, V> get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)", "public java.util.Map<R, V> remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<C, java.util.Map<R, V>>>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.createEntrySet()", "public java.util.Set<java.util.Map$Entry<C, java.util.Map<R, V>>> createEntrySet()"], ["java.util.Set<C>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.keySet()", "public java.util.Set<C> keySet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1$1.setValue(V)", "public V setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.hasNext()", "public boolean hasNext()"], ["java.util.Map$Entry<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.next()", "public java.util.Map$Entry<C, V> next()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.next()", "public java.lang.Object next()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet.size()", "public int size()"], ["java.util.Iterator<java.util.Map$Entry<C, V>>", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<C, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Row.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row.put(C, V)", "public V put(C, V)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$Row.clear()", "public void clear()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(R)", "public java.util.Map<C, V> apply(R)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<R, java.util.Map<C, V>>>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<R, java.util.Map<C, V>>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.get(java.lang.Object)", "public java.util.Map<C, V> get(java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)", "public java.util.Map<C, V> remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$TableSet.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$TableSet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.isEmpty()", "public boolean isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable.clear()", "public void clear()"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable.put(R, C, V)", "public V put(R, C, V)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.StandardTable.cellSet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable.row(R)", "public java.util.Map<C, V> row(R)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable.column(C)", "public java.util.Map<R, V> column(C)"], ["java.util.Set<R>", "org.sonar.api.internal.google.common.collect.StandardTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Set<C>", "org.sonar.api.internal.google.common.collect.StandardTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.StandardTable.values()", "public java.util.Collection<V> values()"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.StandardTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.get(java.lang.Object)", "public java.util.Collection<V> get(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>> entrySet()"], ["java.util.Collection<java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.values()", "public java.util.Collection<java.util.Collection<V>> values()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.getValue()", "public java.util.Collection<V> getValue()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.getValue()", "public java.lang.Object getValue()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries$1.next()", "public java.util.Map$Entry<K, java.util.Collection<V>> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapValues$1.next()", "public java.util.Collection<V> next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapValues$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapValues.iterator()", "public java.util.Iterator<java.util.Collection<V>> iterator()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedBiMap.values()", "public java.util.Set<V> values()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedBiMap.forcePut(K, V)", "public V forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedBiMap.inverse()", "public org.sonar.api.internal.google.common.collect.BiMap<V, K> inverse()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedBiMap.values()", "public java.util.Collection values()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.add(E)", "public boolean add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.size()", "public int size()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.toArray(T[])", "public <T> T[] toArray(T[])"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.addFirst(E)", "public void addFirst(E)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.addLast(E)", "public void addLast(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.offerFirst(E)", "public boolean offerFirst(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.offerLast(E)", "public boolean offerLast(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeFirst()", "public E removeFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeLast()", "public E removeLast()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.pollLast()", "public E pollLast()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.getFirst()", "public E getFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.getLast()", "public E getLast()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.peekFirst()", "public E peekFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.peekLast()", "public E peekLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeFirstOccurrence(java.lang.Object)", "public boolean removeFirstOccurrence(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeLastOccurrence(java.lang.Object)", "public boolean removeLastOccurrence(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.push(E)", "public void push(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.pop()", "public E pop()"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.hashCode()", "public int hashCode()"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.setValue(V)", "public V setValue(V)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.add(int, E)", "public void add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.addAll(int, java.util.Collection<? extends E>)", "public boolean addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.get(int)", "public E get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.listIterator()", "public java.util.ListIterator<E> listIterator()"], ["java.util.ListIterator<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.remove(int)", "public E remove(int)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.set(int, E)", "public E set(int, E)"], ["java.util.List<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.subList(int, int)", "public java.util.List<E> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.hashCode()", "public int hashCode()"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.get(K)", "public java.util.List<V> get(K)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.removeAll(java.lang.Object)", "public java.util.List<V> removeAll(java.lang.Object)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.List<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.isEmpty()", "public boolean isEmpty()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.keySet()", "public java.util.Set<K> keySet()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.put(K, V)", "public V put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.size()", "public int size()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.values()", "public java.util.Collection<V> values()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.get(K)", "public java.util.Collection<V> get(K)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.put(K, V)", "public boolean put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.putAll(K, java.lang.Iterable<? extends V>)", "public boolean putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Collection<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.removeAll(java.lang.Object)", "public java.util.Collection<V> removeAll(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.clear()", "public void clear()"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.values()", "public java.util.Collection<V> values()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.entries()", "public java.util.Collection<java.util.Map$Entry<K, V>> entries()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.asMap()", "public java.util.Map<K, java.util.Collection<V>> asMap()"], ["org.sonar.api.internal.google.common.collect.Multiset<K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset<K> keys()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.hashCode()", "public int hashCode()"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.add(E, int)", "public int add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.elementSet()", "public java.util.Set<E> elementSet()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.entrySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Multiset$Entry<E>> entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.hashCode()", "public int hashCode()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.descendingMap()", "public java.util.NavigableMap<K, V> descendingMap()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.floorKey(K)", "public K floorKey(K)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K, boolean)", "public java.util.NavigableMap<K, V> headMap(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.higherKey(K)", "public K higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Set<K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, boolean, K, boolean)", "public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K, boolean)", "public java.util.NavigableMap<K, V> tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.ceiling(E)", "public E ceiling(E)"], ["java.util.Iterator<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.floor(E)", "public E floor(E)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.higher(E)", "public E higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.lower(E)", "public E lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.pollFirst()", "public E pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.pollLast()", "public E pollLast()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedObject.toString()", "public java.lang.String toString()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.element()", "public E element()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.offer(E)", "public boolean offer(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.peek()", "public E peek()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.poll()", "public E poll()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.remove()", "public E remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSet.hashCode()", "public int hashCode()"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.get(K)", "public java.util.Set<V> get(K)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set<V> removeAll(java.lang.Object)"], ["java.util.Set<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.Set<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()", "public java.util.Set<java.util.Map$Entry<K, V>> entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()", "public java.util.Collection entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey()", "public K firstKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.headMap(K)", "public java.util.SortedMap<K, V> headMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey()", "public K lastKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.subMap(K, K)", "public java.util.SortedMap<K, V> subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.tailMap(K)", "public java.util.SortedMap<K, V> tailMap(K)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.subSet(E, E)", "public java.util.SortedSet<E> subSet(E, E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.headSet(E)", "public java.util.SortedSet<E> headSet(E)"], ["java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.tailSet(E)", "public java.util.SortedSet<E> tailSet(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.first()", "public E first()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.last()", "public E last()"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(K)", "public java.util.SortedSet<V> get(K)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet<V> removeAll(java.lang.Object)"], ["java.util.SortedSet<V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(K, java.lang.Iterable<? extends V>)", "public java.util.SortedSet<V> replaceValues(K, java.lang.Iterable<? extends V>)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Set removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)", "public java.util.Collection removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Map<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.Tables$1.apply(java.util.Map<java.lang.Object, java.lang.Object>)", "public java.util.Map<java.lang.Object, java.lang.Object> apply(java.util.Map<java.lang.Object, java.lang.Object>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$AbstractCell.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Tables$AbstractCell.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Tables$AbstractCell.toString()", "public java.lang.String toString()"], ["R", "org.sonar.api.internal.google.common.collect.Tables$ImmutableCell.getRowKey()", "public R getRowKey()"], ["C", "org.sonar.api.internal.google.common.collect.Tables$ImmutableCell.getColumnKey()", "public C getColumnKey()"], ["V", "org.sonar.api.internal.google.common.collect.Tables$ImmutableCell.getValue()", "public V getValue()"], ["org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$1.apply(org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V1>)", "public org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V2> apply(org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Map<C, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$2.apply(java.util.Map<C, V1>)", "public java.util.Map<C, V2> apply(java.util.Map<C, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.Map<R, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$3.apply(java.util.Map<R, V1>)", "public java.util.Map<R, V2> apply(java.util.Map<R, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["V2", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.get(java.lang.Object, java.lang.Object)", "public V2 get(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.size()", "public int size()"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.clear()", "public void clear()"], ["V2", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.put(R, C, V2)", "public V2 put(R, C, V2)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V2>)", "public void putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V2>)"], ["V2", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.remove(java.lang.Object, java.lang.Object)", "public V2 remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.row(R)", "public java.util.Map<C, V2> row(R)"], ["java.util.Map<R, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.column(C)", "public java.util.Map<R, V2> column(C)"], ["java.util.Set<R>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Set<C>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Map<R, java.util.Map<C, V2>>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V2>> rowMap()"], ["java.util.Map<C, java.util.Map<R, V2>>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V2>> columnMap()"], ["org.sonar.api.internal.google.common.collect.Table$Cell<?, ?, ?>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable$1.apply(org.sonar.api.internal.google.common.collect.Table$Cell<?, ?, ?>)", "public org.sonar.api.internal.google.common.collect.Table$Cell<?, ?, ?> apply(org.sonar.api.internal.google.common.collect.Table$Cell<?, ?, ?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.clear()", "public void clear()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.column(R)", "public java.util.Map<C, V> column(R)"], ["java.util.Set<R>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.columnKeySet()", "public java.util.Set<R> columnKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.columnMap()", "public java.util.Map<R, java.util.Map<C, V>> columnMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.get(java.lang.Object, java.lang.Object)", "public V get(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.put(C, R, V)", "public V put(C, R, V)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends C, ? extends R, ? extends V>)", "public void putAll(org.sonar.api.internal.google.common.collect.Table<? extends C, ? extends R, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.row(C)", "public java.util.Map<R, V> row(C)"], ["java.util.Set<C>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.rowKeySet()", "public java.util.Set<C> rowKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.rowMap()", "public java.util.Map<C, java.util.Map<R, V>> rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.size()", "public int size()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.values()", "public java.util.Collection<V> values()"], ["org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap(org.sonar.api.internal.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)", "public org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap(org.sonar.api.internal.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()", "public java.util.SortedMap<R, java.util.Map<C, V>> rowMap()"], ["java.util.SortedSet<R>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap.rowKeySet()", "public java.util.SortedSet<R> rowKeySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()", "public java.util.Map rowMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.cellSet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>> cellSet()"], ["void", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.clear()", "public void clear()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.column(C)", "public java.util.Map<R, V> column(C)"], ["java.util.Set<C>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.columnKeySet()", "public java.util.Set<C> columnKeySet()"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.columnMap()", "public java.util.Map<C, java.util.Map<R, V>> columnMap()"], ["V", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.put(R, C, V)", "public V put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public void putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.remove(java.lang.Object, java.lang.Object)", "public V remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.row(R)", "public java.util.Map<C, V> row(R)"], ["java.util.Set<R>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.rowKeySet()", "public java.util.Set<R> rowKeySet()"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.rowMap()", "public java.util.Map<R, java.util.Map<C, V>> rowMap()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.values()", "public java.util.Collection<V> values()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.immutableCell(R, C, V)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V> immutableCell(R, C, V)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table<C, R, V>", "org.sonar.api.internal.google.common.collect.Tables.transpose(org.sonar.api.internal.google.common.collect.Table<R, C, V>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.Table<C, R, V> transpose(org.sonar.api.internal.google.common.collect.Table<R, C, V>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.newCustomTable(java.util.Map<R, java.util.Map<C, V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Map<C, V>>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.Table<R, C, V> newCustomTable(java.util.Map<R, java.util.Map<C, V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Map<C, V>>)"], ["<R, C, V1, V2> org.sonar.api.internal.google.common.collect.Table<R, C, V2>", "org.sonar.api.internal.google.common.collect.Tables.transformValues(org.sonar.api.internal.google.common.collect.Table<R, C, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)", "public static <R, C, V1, V2> org.sonar.api.internal.google.common.collect.Table<R, C, V2> transformValues(org.sonar.api.internal.google.common.collect.Table<R, C, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.unmodifiableTable(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.Table<R, C, V> unmodifiableTable(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.RowSortedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.unmodifiableRowSortedTable(org.sonar.api.internal.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.RowSortedTable<R, C, V> unmodifiableRowSortedTable(org.sonar.api.internal.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TransformedIterator.hasNext()", "public final boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.TransformedIterator.next()", "public final T next()"], ["void", "org.sonar.api.internal.google.common.collect.TransformedIterator.remove()", "public final void remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.TransformedListIterator.hasPrevious()", "public final boolean hasPrevious()"], ["T", "org.sonar.api.internal.google.common.collect.TransformedListIterator.previous()", "public final T previous()"], ["int", "org.sonar.api.internal.google.common.collect.TransformedListIterator.nextIndex()", "public final int nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.TransformedListIterator.previousIndex()", "public final int previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.TransformedListIterator.set(T)", "public void set(T)"], ["void", "org.sonar.api.internal.google.common.collect.TransformedListIterator.add(T)", "public void add(T)"], ["java.util.Iterator<C>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$1.apply(java.util.Map<C, V>)", "public java.util.Iterator<C> apply(java.util.Map<C, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.TreeMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$Factory.get()", "public java.util.TreeMap<C, V> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable$Factory.get()", "public java.lang.Object get()"], ["java.util.SortedSet<C>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.keySet()", "public java.util.SortedSet<C> keySet()"], ["java.util.Comparator<? super C>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.comparator()", "public java.util.Comparator<? super C> comparator()"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.subMap(C, C)", "public java.util.SortedMap<C, V> subMap(C, C)"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.headMap(C)", "public java.util.SortedMap<C, V> headMap(C)"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.tailMap(C)", "public java.util.SortedMap<C, V> tailMap(C)"], ["C", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.firstKey()", "public C firstKey()"], ["C", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.lastKey()", "public C lastKey()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.put(C, V)", "public V put(C, V)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.keySet()", "public java.util.Set keySet()"], ["<R extends java.lang.Comparable, C extends java.lang.Comparable, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.create()", "public static <R extends java.lang.Comparable, C extends java.lang.Comparable, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V> create()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V> create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.create(org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, ? extends V>)", "public static <R, C, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V> create(org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, ? extends V>)"], ["java.util.Comparator<? super R>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowComparator()", "public java.util.Comparator<? super R> rowComparator()"], ["java.util.Comparator<? super C>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.columnComparator()", "public java.util.Comparator<? super C> columnComparator()"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.row(R)", "public java.util.SortedMap<C, V> row(R)"], ["java.util.SortedSet<R>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowKeySet()", "public java.util.SortedSet<R> rowKeySet()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowMap()", "public java.util.SortedMap<R, java.util.Map<C, V>> rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowMap()", "public java.util.Map rowMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowKeySet()", "public java.util.Set rowKeySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.row(java.lang.Object)", "public java.util.Map row(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.columnMap()", "public java.util.Map columnMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.TreeBasedTable.values()", "public java.util.Collection values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable.columnKeySet()", "public java.util.Set columnKeySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.column(java.lang.Object)", "public java.util.Map column(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable.cellSet()", "public java.util.Set cellSet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable.remove(java.lang.Object, java.lang.Object)", "public java.lang.Object remove(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeBasedTable.clear()", "public void clear()"], ["int", "org.sonar.api.internal.google.common.collect.TreeBasedTable.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable.get(java.lang.Object, java.lang.Object)", "public java.lang.Object get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.containsRow(java.lang.Object)", "public boolean containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.containsColumn(java.lang.Object)", "public boolean containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.contains(java.lang.Object, java.lang.Object)", "public boolean contains(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeBasedTable.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeBasedTable.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeBasedTable.putAll(org.sonar.api.internal.google.common.collect.Table)", "public void putAll(org.sonar.api.internal.google.common.collect.Table)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.create()", "public static <K extends java.lang.Comparable, V extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V> create()"], ["<K, V> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)", "public static <K, V> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V> create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)", "public static <K extends java.lang.Comparable, V extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V> create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.TreeMultimap.keyComparator()", "public java.util.Comparator<? super K> keyComparator()"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.valueComparator()", "public java.util.Comparator<? super V> valueComparator()"], ["java.util.NavigableSet<V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.get(K)", "public java.util.NavigableSet<V> get(K)"], ["java.util.NavigableSet<K>", "org.sonar.api.internal.google.common.collect.TreeMultimap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.TreeMultimap.asMap()", "public java.util.NavigableMap<K, java.util.Collection<V>> asMap()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.keySet()", "public java.util.SortedSet keySet()"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.TreeMultimap.asMap()", "public java.util.SortedMap asMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.TreeMultimap.values()", "public java.util.Collection values()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeMultimap.asMap()", "public java.util.Map asMap()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.replaceValues(java.lang.Object, java.lang.Iterable)", "public java.util.SortedSet replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.removeAll(java.lang.Object)", "public java.util.SortedSet removeAll(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.get(java.lang.Object)", "public java.util.SortedSet get(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultimap.get(java.lang.Object)", "public java.util.Set get(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultimap.keySet()", "public java.util.Set keySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.TreeMultimap.get(java.lang.Object)", "public java.util.Collection get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.put(java.lang.Object, java.lang.Object)", "public boolean put(java.lang.Object, java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultimap.entries()", "public java.util.Set entries()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultimap.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultimap.size()", "public int size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeMultimap.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultimap.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.TreeMultimap.keys()", "public org.sonar.api.internal.google.common.collect.Multiset keys()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)", "public boolean putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.putAll(java.lang.Object, java.lang.Iterable)", "public boolean putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.containsEntry(java.lang.Object, java.lang.Object)", "public boolean containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.isEmpty()", "public boolean isEmpty()"], ["E", "org.sonar.api.internal.google.common.collect.TreeMultiset$1.getElement()", "public E getElement()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset$1.getCount()", "public int getCount()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset$2.hasNext()", "public boolean hasNext()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset$2.next()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> next()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset$2.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeMultiset$2.next()", "public java.lang.Object next()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset$3.hasNext()", "public boolean hasNext()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset$3.next()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> next()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset$3.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeMultiset$3.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate[]", "org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate.values()", "public static org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate[] values()"], ["org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate", "org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.count(java.util.Comparator<? super E>, E)", "public int count(java.util.Comparator<? super E>, E)"], ["E", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.getElement()", "public E getElement()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.getCount()", "public int getCount()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.toString()", "public java.lang.String toString()"], ["T", "org.sonar.api.internal.google.common.collect.TreeMultiset$Reference.get()", "public T get()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset$Reference.checkAndSet(T, T)", "public void checkAndSet(T, T)"], ["<E extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.create()", "public static <E extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultiset<E> create()"], ["<E> org.sonar.api.internal.google.common.collect.TreeMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.create(java.util.Comparator<? super E>)", "public static <E> org.sonar.api.internal.google.common.collect.TreeMultiset<E> create(java.util.Comparator<? super E>)"], ["<E extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.create(java.lang.Iterable<? extends E>)", "public static <E extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultiset<E> create(java.lang.Iterable<? extends E>)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.size()", "public int size()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.count(java.lang.Object)", "public int count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.add(E, int)", "public int add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.remove(java.lang.Object, int)", "public int remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.setCount(E, int)", "public int setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.setCount(E, int, int)", "public boolean setCount(E, int, int)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.TreeMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.SortedMultiset descendingMultiset()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.TreeMultiset.subMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType, java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset subMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType, java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.pollLastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.pollFirstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry pollFirstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry lastEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry firstEntry()"], ["java.util.Comparator", "org.sonar.api.internal.google.common.collect.TreeMultiset.comparator()", "public java.util.Comparator comparator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.TreeMultiset.elementSet()", "public java.util.NavigableSet elementSet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeMultiset.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultiset.entrySet()", "public java.util.Set entrySet()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeMultiset.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.get(java.lang.Comparable)", "public java.lang.Object get(java.lang.Comparable)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range, java.lang.Object>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.getEntry(java.lang.Comparable)", "public java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range, java.lang.Object> getEntry(java.lang.Comparable)"], ["org.sonar.api.internal.google.common.collect.Range", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.span()", "public org.sonar.api.internal.google.common.collect.Range span()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.put(org.sonar.api.internal.google.common.collect.Range, java.lang.Object)", "public void put(org.sonar.api.internal.google.common.collect.Range, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.putAll(org.sonar.api.internal.google.common.collect.RangeMap)", "public void putAll(org.sonar.api.internal.google.common.collect.RangeMap)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.clear()", "public void clear()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.remove(org.sonar.api.internal.google.common.collect.Range)", "public void remove(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Map<org.sonar.api.internal.google.common.collect.Range, java.lang.Object>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.asMapOfRanges()", "public java.util.Map<org.sonar.api.internal.google.common.collect.Range, java.lang.Object> asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.RangeMap", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.subRangeMap(org.sonar.api.internal.google.common.collect.Range)", "public org.sonar.api.internal.google.common.collect.RangeMap subRangeMap(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Iterator<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>> iterator()"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges$1.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges.get(java.lang.Object)", "public V get(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges.entrySet()", "public java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>> entrySet()"], ["org.sonar.api.internal.google.common.collect.Range<K>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()", "public org.sonar.api.internal.google.common.collect.Range<K> getKey()"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()", "public V getValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$RangeMapEntry.contains(K)", "public boolean contains(K)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()", "public java.lang.Object getKey()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Iterator<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.iterator()", "public java.util.Iterator<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>> iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.clear()", "public void clear()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Range<K>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.keySet()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Range<K>> keySet()"], ["java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.entrySet()", "public java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>> entrySet()"], ["java.util.Collection<V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.values()", "public java.util.Collection<V> values()"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.get(K)", "public V get(K)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.getEntry(K)", "public java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V> getEntry(K)"], ["org.sonar.api.internal.google.common.collect.Range<K>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.span()", "public org.sonar.api.internal.google.common.collect.Range<K> span()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.put(org.sonar.api.internal.google.common.collect.Range<K>, V)", "public void put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)", "public void putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.clear()", "public void clear()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.remove(org.sonar.api.internal.google.common.collect.Range<K>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<K>)"], ["org.sonar.api.internal.google.common.collect.RangeMap<K, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)", "public org.sonar.api.internal.google.common.collect.RangeMap<K, V> subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["java.util.Map<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.asMapOfRanges()", "public java.util.Map<org.sonar.api.internal.google.common.collect.Range<K>, V> asMapOfRanges()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.toString()", "public java.lang.String toString()"], ["<K extends java.lang.Comparable, V> org.sonar.api.internal.google.common.collect.TreeRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.create()", "public static <K extends java.lang.Comparable, V> org.sonar.api.internal.google.common.collect.TreeRangeMap<K, V> create()"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap.get(K)", "public V get(K)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.getEntry(K)", "public java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V> getEntry(K)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.put(org.sonar.api.internal.google.common.collect.Range<K>, V)", "public void put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)", "public void putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.clear()", "public void clear()"], ["org.sonar.api.internal.google.common.collect.Range<K>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.span()", "public org.sonar.api.internal.google.common.collect.Range<K> span()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.remove(org.sonar.api.internal.google.common.collect.Range<K>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<K>)"], ["java.util.Map<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.asMapOfRanges()", "public java.util.Map<org.sonar.api.internal.google.common.collect.Range<K>, V> asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.RangeMap<K, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)", "public org.sonar.api.internal.google.common.collect.RangeMap<K, V> subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeRangeMap.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$AsRanges.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$AsRanges.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$Complement.add(org.sonar.api.internal.google.common.collect.Range<C>)", "public void add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$Complement.remove(org.sonar.api.internal.google.common.collect.Range<C>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$Complement.contains(C)", "public boolean contains(C)"], ["org.sonar.api.internal.google.common.collect.RangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$Complement.complement()", "public org.sonar.api.internal.google.common.collect.RangeSet<C> complement()"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.comparator()", "public java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>> comparator()"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.size()", "public int size()"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.get(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.Range<C> get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.comparator()", "public java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>> comparator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.get(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.Range<C> get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.isEmpty()", "public boolean isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.encloses(org.sonar.api.internal.google.common.collect.Range<C>)", "public boolean encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.rangeContaining(C)", "public org.sonar.api.internal.google.common.collect.Range<C> rangeContaining(C)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)", "public void add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.contains(C)", "public boolean contains(C)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.clear()", "public void clear()"], ["org.sonar.api.internal.google.common.collect.RangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.subRangeSet(org.sonar.api.internal.google.common.collect.Range<C>)", "public org.sonar.api.internal.google.common.collect.RangeSet<C> subRangeSet(org.sonar.api.internal.google.common.collect.Range<C>)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)", "public java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>> tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.comparator()", "public java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>> comparator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.get(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.Range<C> get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.size()", "public int size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.TreeRangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.create()", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.TreeRangeSet<C> create()"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.TreeRangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.create(org.sonar.api.internal.google.common.collect.RangeSet<C>)", "public static <C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.TreeRangeSet<C> create(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.asRanges()", "public java.util.Set<org.sonar.api.internal.google.common.collect.Range<C>> asRanges()"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.rangeContaining(C)", "public org.sonar.api.internal.google.common.collect.Range<C> rangeContaining(C)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.encloses(org.sonar.api.internal.google.common.collect.Range<C>)", "public boolean encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.span()", "public org.sonar.api.internal.google.common.collect.Range<C> span()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)", "public void add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)", "public void remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["org.sonar.api.internal.google.common.collect.RangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.complement()", "public org.sonar.api.internal.google.common.collect.RangeSet<C> complement()"], ["org.sonar.api.internal.google.common.collect.RangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.subRangeSet(org.sonar.api.internal.google.common.collect.Range<C>)", "public org.sonar.api.internal.google.common.collect.RangeSet<C> subRangeSet(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.removeAll(org.sonar.api.internal.google.common.collect.RangeSet)", "public void removeAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.addAll(org.sonar.api.internal.google.common.collect.RangeSet)", "public void addAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet)", "public boolean enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.clear()", "public void clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.contains(java.lang.Comparable)", "public boolean contains(java.lang.Comparable)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.TreeTraverser$1.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeTraverser$1.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.TreeTraverser$2.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeTraverser$2.iterator()", "public java.util.Iterator iterator()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.TreeTraverser$3.iterator()", "public org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T> iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeTraverser$3.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeTraverser$BreadthFirstIterator.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.TreeTraverser$BreadthFirstIterator.peek()", "public T peek()"], ["T", "org.sonar.api.internal.google.common.collect.TreeTraverser$BreadthFirstIterator.next()", "public T next()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeTraverser$PreOrderIterator.hasNext()", "public boolean hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.TreeTraverser$PreOrderIterator.next()", "public T next()"], ["org.sonar.api.internal.google.common.collect.TreeTraverser", "org.sonar.api.internal.google.common.collect.TreeTraverser()", "public org.sonar.api.internal.google.common.collect.TreeTraverser()"], ["org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.TreeTraverser.preOrderTraversal(T)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<T> preOrderTraversal(T)"], ["org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.TreeTraverser.postOrderTraversal(T)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<T> postOrderTraversal(T)"], ["org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.TreeTraverser.breadthFirstTraversal(T)", "public final org.sonar.api.internal.google.common.collect.FluentIterable<T> breadthFirstTraversal(T)"], ["void", "org.sonar.api.internal.google.common.collect.UnmodifiableIterator.remove()", "public final void remove()"], ["void", "org.sonar.api.internal.google.common.collect.UnmodifiableListIterator.add(E)", "public final void add(E)"], ["void", "org.sonar.api.internal.google.common.collect.UnmodifiableListIterator.set(E)", "public final void set(E)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.comparator()", "public java.util.Comparator<? super E> comparator()"], ["java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.elementSet()", "public java.util.NavigableSet<E> elementSet()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.descendingMultiset()", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> descendingMultiset()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.firstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> firstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.lastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> lastEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.pollFirstEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollFirstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.pollLastEntry()", "public org.sonar.api.internal.google.common.collect.Multiset$Entry<E> pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> headMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> subMultiset(E, org.sonar.api.internal.google.common.collect.BoundType, E, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)", "public org.sonar.api.internal.google.common.collect.SortedMultiset<E> tailMultiset(E, org.sonar.api.internal.google.common.collect.BoundType)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.elementSet()", "public java.util.Set elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.elementSet()", "public java.util.SortedSet elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.UsingToStringOrdering.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.UsingToStringOrdering.toString()", "public java.lang.String toString()"], ["K", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet$1$1.getKey()", "public K getKey()"], ["V", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet$1$1.getValue()", "public V getValue()"], ["V", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet$1$1.setValue(V)", "public V setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.WellBehavedMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.ArrayBasedCharEscaper.escape(java.lang.String)", "public final java.lang.String escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.ArrayBasedEscaperMap", "org.sonar.api.internal.google.common.escape.ArrayBasedEscaperMap.create(java.util.Map<java.lang.Character, java.lang.String>)", "public static org.sonar.api.internal.google.common.escape.ArrayBasedEscaperMap create(java.util.Map<java.lang.Character, java.lang.String>)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)", "public final java.lang.String escape(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.CharEscaper.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder$CharArrayDecorator.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.CharEscaperBuilder", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder()", "public org.sonar.api.internal.google.common.escape.CharEscaperBuilder()"], ["org.sonar.api.internal.google.common.escape.CharEscaperBuilder", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.addEscape(char, java.lang.String)", "public org.sonar.api.internal.google.common.escape.CharEscaperBuilder addEscape(char, java.lang.String)"], ["org.sonar.api.internal.google.common.escape.CharEscaperBuilder", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.addEscapes(char[], java.lang.String)", "public org.sonar.api.internal.google.common.escape.CharEscaperBuilder addEscapes(char[], java.lang.String)"], ["char[][]", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.toArray()", "public char[][] toArray()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.toEscaper()", "public org.sonar.api.internal.google.common.escape.Escaper toEscaper()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escaper$1.apply(java.lang.String)", "public java.lang.String apply(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.escape.Escaper$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Function<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.escape.Escaper.asFunction()", "public final org.sonar.api.internal.google.common.base.Function<java.lang.String, java.lang.String> asFunction()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escapers$1.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers$Builder.setSafeRange(char, char)", "public org.sonar.api.internal.google.common.escape.Escapers$Builder setSafeRange(char, char)"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers$Builder.setUnsafeReplacement(java.lang.String)", "public org.sonar.api.internal.google.common.escape.Escapers$Builder setUnsafeReplacement(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers$Builder.addEscape(char, java.lang.String)", "public org.sonar.api.internal.google.common.escape.Escapers$Builder addEscape(char, java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.escape.Escapers$Builder.build()", "public org.sonar.api.internal.google.common.escape.Escaper build()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.escape.Escapers.nullEscaper()", "public static org.sonar.api.internal.google.common.escape.Escaper nullEscaper()"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers.builder()", "public static org.sonar.api.internal.google.common.escape.Escapers$Builder builder()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escapers.computeReplacement(org.sonar.api.internal.google.common.escape.CharEscaper, char)", "public static java.lang.String computeReplacement(org.sonar.api.internal.google.common.escape.CharEscaper, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escapers.computeReplacement(org.sonar.api.internal.google.common.escape.UnicodeEscaper, int)", "public static java.lang.String computeReplacement(org.sonar.api.internal.google.common.escape.UnicodeEscaper, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.UnicodeEscaper.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.reflect.Method>", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder$1.load(java.lang.Class<?>)", "public org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.reflect.Method> load(java.lang.Class<?>) throws java.lang.Exception"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder$1.load(java.lang.Object)", "public java.lang.Object load(java.lang.Object) throws java.lang.Exception"], ["int", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap<java.lang.Class<?>, org.sonar.api.internal.google.common.eventbus.EventSubscriber>", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder.findAllSubscribers(java.lang.Object)", "public org.sonar.api.internal.google.common.collect.Multimap<java.lang.Class<?>, org.sonar.api.internal.google.common.eventbus.EventSubscriber> findAllSubscribers(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus$1.run()", "public void run()"], ["org.sonar.api.internal.google.common.eventbus.AsyncEventBus", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.lang.String, java.util.concurrent.Executor)", "public org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.lang.String, java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.eventbus.AsyncEventBus", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor, org.sonar.api.internal.google.common.eventbus.SubscriberExceptionHandler)", "public org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor, org.sonar.api.internal.google.common.eventbus.SubscriberExceptionHandler)"], ["org.sonar.api.internal.google.common.eventbus.AsyncEventBus", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor)", "public org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.eventbus.DeadEvent", "org.sonar.api.internal.google.common.eventbus.DeadEvent(java.lang.Object, java.lang.Object)", "public org.sonar.api.internal.google.common.eventbus.DeadEvent(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.DeadEvent.getSource()", "public java.lang.Object getSource()"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.DeadEvent.getEvent()", "public java.lang.Object getEvent()"], ["java.util.Set<java.lang.Class<?>>", "org.sonar.api.internal.google.common.eventbus.EventBus$1.load(java.lang.Class<?>)", "public java.util.Set<java.lang.Class<?>> load(java.lang.Class<?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.EventBus$1.load(java.lang.Object)", "public java.lang.Object load(java.lang.Object) throws java.lang.Exception"], ["org.sonar.api.internal.google.common.eventbus.EventBus$EventWithSubscriber", "org.sonar.api.internal.google.common.eventbus.EventBus$EventWithSubscriber(java.lang.Object, org.sonar.api.internal.google.common.eventbus.EventSubscriber)", "public org.sonar.api.internal.google.common.eventbus.EventBus$EventWithSubscriber(java.lang.Object, org.sonar.api.internal.google.common.eventbus.EventSubscriber)"], ["org.sonar.api.internal.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler", "org.sonar.api.internal.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler(java.lang.String)", "public org.sonar.api.internal.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler.handleException(java.lang.Throwable, org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext)", "public void handleException(java.lang.Throwable, org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext)"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.EventBus()", "public org.sonar.api.internal.google.common.eventbus.EventBus()"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.EventBus(java.lang.String)", "public org.sonar.api.internal.google.common.eventbus.EventBus(java.lang.String)"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.EventBus(org.sonar.api.internal.google.common.eventbus.SubscriberExceptionHandler)", "public org.sonar.api.internal.google.common.eventbus.EventBus(org.sonar.api.internal.google.common.eventbus.SubscriberExceptionHandler)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus.register(java.lang.Object)", "public void register(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus.unregister(java.lang.Object)", "public void unregister(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus.post(java.lang.Object)", "public void post(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.handleEvent(java.lang.Object)", "public void handleEvent(java.lang.Object) throws java.lang.reflect.InvocationTargetException"], ["java.lang.String", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.getSubscriber()", "public java.lang.Object getSubscriber()"], ["java.lang.reflect.Method", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.getMethod()", "public java.lang.reflect.Method getMethod()"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getEventBus()", "public org.sonar.api.internal.google.common.eventbus.EventBus getEventBus()"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getEvent()", "public java.lang.Object getEvent()"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getSubscriber()", "public java.lang.Object getSubscriber()"], ["java.lang.reflect.Method", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getSubscriberMethod()", "public java.lang.reflect.Method getSubscriberMethod()"], ["org.sonar.api.internal.google.common.eventbus.SynchronizedEventSubscriber", "org.sonar.api.internal.google.common.eventbus.SynchronizedEventSubscriber(java.lang.Object, java.lang.reflect.Method)", "public org.sonar.api.internal.google.common.eventbus.SynchronizedEventSubscriber(java.lang.Object, java.lang.reflect.Method)"], ["void", "org.sonar.api.internal.google.common.eventbus.SynchronizedEventSubscriber.handleEvent(java.lang.Object)", "public void handleEvent(java.lang.Object) throws java.lang.reflect.InvocationTargetException"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putByte(byte)", "public org.sonar.api.internal.google.common.hash.Hasher putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[])", "public org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putShort(short)", "public org.sonar.api.internal.google.common.hash.Hasher putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putInt(int)", "public org.sonar.api.internal.google.common.hash.Hasher putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putLong(long)", "public org.sonar.api.internal.google.common.hash.Hasher putLong(long)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putChar(char)", "public org.sonar.api.internal.google.common.hash.Hasher putChar(char)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)", "public <T> org.sonar.api.internal.google.common.hash.Hasher putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putChar(char)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putLong(long)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putInt(int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putShort(short)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[])", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putByte(byte)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)", "public org.sonar.api.internal.google.common.hash.Hasher putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])", "public org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)", "public org.sonar.api.internal.google.common.hash.Hasher putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)", "public org.sonar.api.internal.google.common.hash.Hasher putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)", "public org.sonar.api.internal.google.common.hash.Hasher putLong(long)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)", "public org.sonar.api.internal.google.common.hash.Hasher putFloat(float)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)", "public org.sonar.api.internal.google.common.hash.Hasher putDouble(double)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)", "public org.sonar.api.internal.google.common.hash.Hasher putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)", "public org.sonar.api.internal.google.common.hash.Hasher putChar(char)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.hash.Hasher putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)", "public <T> org.sonar.api.internal.google.common.hash.Hasher putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.hash()", "public org.sonar.api.internal.google.common.hash.HashCode hash()"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putDouble(double)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putFloat(float)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putBoolean(boolean)", "public final org.sonar.api.internal.google.common.hash.Hasher putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putDouble(double)", "public final org.sonar.api.internal.google.common.hash.Hasher putDouble(double)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putFloat(float)", "public final org.sonar.api.internal.google.common.hash.Hasher putFloat(float)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.hash.Hasher putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putBoolean(boolean)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putDouble(double)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putDouble(double)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putFloat(float)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putFloat(float)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)", "public org.sonar.api.internal.google.common.hash.Hasher putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[])", "public org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putShort(short)", "public org.sonar.api.internal.google.common.hash.Hasher putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putInt(int)", "public org.sonar.api.internal.google.common.hash.Hasher putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putLong(long)", "public org.sonar.api.internal.google.common.hash.Hasher putLong(long)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putChar(char)", "public org.sonar.api.internal.google.common.hash.Hasher putChar(char)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)", "public <T> org.sonar.api.internal.google.common.hash.Hasher putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.hash()", "public org.sonar.api.internal.google.common.hash.HashCode hash()"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putChar(char)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putLong(long)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putInt(int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putShort(short)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[])", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.newHasher(int)", "public org.sonar.api.internal.google.common.hash.Hasher newHasher(int)"], ["<T> org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)", "public <T> org.sonar.api.internal.google.common.hash.HashCode hashObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.hash.HashCode hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashInt(int)", "public org.sonar.api.internal.google.common.hash.HashCode hashInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashLong(long)", "public org.sonar.api.internal.google.common.hash.HashCode hashLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashBytes(byte[])", "public org.sonar.api.internal.google.common.hash.HashCode hashBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[])", "public final org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[], int, int)", "public final org.sonar.api.internal.google.common.hash.Hasher putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putUnencodedChars(java.lang.CharSequence)", "public final org.sonar.api.internal.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putByte(byte)", "public final org.sonar.api.internal.google.common.hash.Hasher putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putShort(short)", "public final org.sonar.api.internal.google.common.hash.Hasher putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putChar(char)", "public final org.sonar.api.internal.google.common.hash.Hasher putChar(char)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putInt(int)", "public final org.sonar.api.internal.google.common.hash.Hasher putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putLong(long)", "public final org.sonar.api.internal.google.common.hash.Hasher putLong(long)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)", "public final <T> org.sonar.api.internal.google.common.hash.Hasher putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.hash()", "public final org.sonar.api.internal.google.common.hash.HashCode hash()"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putChar(char)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putLong(long)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putInt(int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putShort(short)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[])", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putByte(byte)", "public org.sonar.api.internal.google.common.hash.PrimitiveSink putByte(byte)"], ["<T> org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)", "public <T> org.sonar.api.internal.google.common.hash.HashCode hashObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.hash.HashCode hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashInt(int)", "public org.sonar.api.internal.google.common.hash.HashCode hashInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashLong(long)", "public org.sonar.api.internal.google.common.hash.HashCode hashLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashBytes(byte[])", "public org.sonar.api.internal.google.common.hash.HashCode hashBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashBytes(byte[], int, int)", "public org.sonar.api.internal.google.common.hash.HashCode hashBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.newHasher(int)", "public org.sonar.api.internal.google.common.hash.Hasher newHasher(int)"], ["org.sonar.api.internal.google.common.hash.BloomFilter<T>", "org.sonar.api.internal.google.common.hash.BloomFilter.copy()", "public org.sonar.api.internal.google.common.hash.BloomFilter<T> copy()"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.mightContain(T)", "public boolean mightContain(T)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.apply(T)", "public boolean apply(T)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.put(T)", "public boolean put(T)"], ["double", "org.sonar.api.internal.google.common.hash.BloomFilter.expectedFpp()", "public double expectedFpp()"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.isCompatible(org.sonar.api.internal.google.common.hash.BloomFilter<T>)", "public boolean isCompatible(org.sonar.api.internal.google.common.hash.BloomFilter<T>)"], ["void", "org.sonar.api.internal.google.common.hash.BloomFilter.putAll(org.sonar.api.internal.google.common.hash.BloomFilter<T>)", "public void putAll(org.sonar.api.internal.google.common.hash.BloomFilter<T>)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.BloomFilter.hashCode()", "public int hashCode()"], ["<T> org.sonar.api.internal.google.common.hash.BloomFilter<T>", "org.sonar.api.internal.google.common.hash.BloomFilter.create(org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, double)", "public static <T> org.sonar.api.internal.google.common.hash.BloomFilter<T> create(org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, double)"], ["<T> org.sonar.api.internal.google.common.hash.BloomFilter<T>", "org.sonar.api.internal.google.common.hash.BloomFilter.create(org.sonar.api.internal.google.common.hash.Funnel<? super T>, int)", "public static <T> org.sonar.api.internal.google.common.hash.BloomFilter<T> create(org.sonar.api.internal.google.common.hash.Funnel<? super T>, int)"], ["void", "org.sonar.api.internal.google.common.hash.BloomFilter.writeTo(java.io.OutputStream)", "public void writeTo(java.io.OutputStream) throws java.io.IOException"], ["<T> org.sonar.api.internal.google.common.hash.BloomFilter<T>", "org.sonar.api.internal.google.common.hash.BloomFilter.readFrom(java.io.InputStream, org.sonar.api.internal.google.common.hash.Funnel<T>)", "public static <T> org.sonar.api.internal.google.common.hash.BloomFilter<T> readFrom(java.io.InputStream, org.sonar.api.internal.google.common.hash.Funnel<T>) throws java.io.IOException"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$1.put(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean put(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$1.mightContain(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean mightContain(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$2.put(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean put(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$2.mightContain(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)", "public <T> boolean mightContain(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.hash.BloomFilterStrategies[]", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies.values()", "public static org.sonar.api.internal.google.common.hash.BloomFilterStrategies[] values()"], ["org.sonar.api.internal.google.common.hash.BloomFilterStrategies", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.hash.BloomFilterStrategies valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction$ChecksumHasher.hash()", "public org.sonar.api.internal.google.common.hash.HashCode hash()"], ["int", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction.bits()", "public int bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction$Crc32cHasher.update(byte)", "public void update(byte)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction$Crc32cHasher.hash()", "public org.sonar.api.internal.google.common.hash.HashCode hash()"], ["int", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction.bits()", "public int bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.values()", "public static org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel[] values()"], ["org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.funnel(byte[], org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(byte[], org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.values()", "public static org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel[] values()"], ["org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Integer, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Integer, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["org.sonar.api.internal.google.common.hash.Funnels$LongFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.values()", "public static org.sonar.api.internal.google.common.hash.Funnels$LongFunnel[] values()"], ["org.sonar.api.internal.google.common.hash.Funnels$LongFunnel", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.hash.Funnels$LongFunnel valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Long, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Long, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Iterable<? extends E>, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Iterable<? extends E>, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.hashCode()", "public int hashCode()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.write(int)", "public void write(int)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.write(byte[])", "public void write(byte[])"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.write(byte[], int, int)", "public void write(byte[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.CharSequence, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.CharSequence, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.hashCode()", "public int hashCode()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.values()", "public static org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel[] values()"], ["org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.CharSequence, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.CharSequence, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public void funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["org.sonar.api.internal.google.common.hash.Funnel<byte[]>", "org.sonar.api.internal.google.common.hash.Funnels.byteArrayFunnel()", "public static org.sonar.api.internal.google.common.hash.Funnel<byte[]> byteArrayFunnel()"], ["org.sonar.api.internal.google.common.hash.Funnel<java.lang.CharSequence>", "org.sonar.api.internal.google.common.hash.Funnels.unencodedCharsFunnel()", "public static org.sonar.api.internal.google.common.hash.Funnel<java.lang.CharSequence> unencodedCharsFunnel()"], ["org.sonar.api.internal.google.common.hash.Funnel<java.lang.CharSequence>", "org.sonar.api.internal.google.common.hash.Funnels.stringFunnel(java.nio.charset.Charset)", "public static org.sonar.api.internal.google.common.hash.Funnel<java.lang.CharSequence> stringFunnel(java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.Funnel<java.lang.Integer>", "org.sonar.api.internal.google.common.hash.Funnels.integerFunnel()", "public static org.sonar.api.internal.google.common.hash.Funnel<java.lang.Integer> integerFunnel()"], ["<E> org.sonar.api.internal.google.common.hash.Funnel<java.lang.Iterable<? extends E>>", "org.sonar.api.internal.google.common.hash.Funnels.sequentialFunnel(org.sonar.api.internal.google.common.hash.Funnel<E>)", "public static <E> org.sonar.api.internal.google.common.hash.Funnel<java.lang.Iterable<? extends E>> sequentialFunnel(org.sonar.api.internal.google.common.hash.Funnel<E>)"], ["org.sonar.api.internal.google.common.hash.Funnel<java.lang.Long>", "org.sonar.api.internal.google.common.hash.Funnels.longFunnel()", "public static org.sonar.api.internal.google.common.hash.Funnel<java.lang.Long> longFunnel()"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.hash.Funnels.asOutputStream(org.sonar.api.internal.google.common.hash.PrimitiveSink)", "public static java.io.OutputStream asOutputStream(org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.bits()", "public int bits()"], ["byte[]", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.asBytes()", "public byte[] asBytes()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.asInt()", "public int asInt()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.asLong()", "public long asLong()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.padToLong()", "public long padToLong()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.bits()", "public int bits()"], ["byte[]", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.asBytes()", "public byte[] asBytes()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.asInt()", "public int asInt()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.asLong()", "public long asLong()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.padToLong()", "public long padToLong()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.bits()", "public int bits()"], ["byte[]", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.asBytes()", "public byte[] asBytes()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.asInt()", "public int asInt()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.asLong()", "public long asLong()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.padToLong()", "public long padToLong()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode.writeBytesTo(byte[], int, int)", "public int writeBytesTo(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromInt(int)", "public static org.sonar.api.internal.google.common.hash.HashCode fromInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromLong(long)", "public static org.sonar.api.internal.google.common.hash.HashCode fromLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromBytes(byte[])", "public static org.sonar.api.internal.google.common.hash.HashCode fromBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromString(java.lang.String)", "public static org.sonar.api.internal.google.common.hash.HashCode fromString(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.hash.HashCode.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.HashCode.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.HashCode.toString()", "public final java.lang.String toString()"], ["java.util.zip.Checksum", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$1.get()", "public java.util.zip.Checksum get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$1.get()", "public java.lang.Object get()"], ["java.util.zip.Checksum", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$2.get()", "public java.util.zip.Checksum get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$2.get()", "public java.lang.Object get()"], ["org.sonar.api.internal.google.common.hash.Hashing$ChecksumType[]", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType.values()", "public static org.sonar.api.internal.google.common.hash.Hashing$ChecksumType[] values()"], ["org.sonar.api.internal.google.common.hash.Hashing$ChecksumType", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.hash.Hashing$ChecksumType valueOf(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType.get()", "public java.lang.Object get()"], ["int", "org.sonar.api.internal.google.common.hash.Hashing$ConcatenatedHashFunction.bits()", "public int bits()"], ["boolean", "org.sonar.api.internal.google.common.hash.Hashing$ConcatenatedHashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Hashing$ConcatenatedHashFunction.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.hash.Hashing$LinearCongruentialGenerator", "org.sonar.api.internal.google.common.hash.Hashing$LinearCongruentialGenerator(long)", "public org.sonar.api.internal.google.common.hash.Hashing$LinearCongruentialGenerator(long)"], ["double", "org.sonar.api.internal.google.common.hash.Hashing$LinearCongruentialGenerator.nextDouble()", "public double nextDouble()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.goodFastHash(int)", "public static org.sonar.api.internal.google.common.hash.HashFunction goodFastHash(int)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_32(int)", "public static org.sonar.api.internal.google.common.hash.HashFunction murmur3_32(int)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_32()", "public static org.sonar.api.internal.google.common.hash.HashFunction murmur3_32()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_128(int)", "public static org.sonar.api.internal.google.common.hash.HashFunction murmur3_128(int)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_128()", "public static org.sonar.api.internal.google.common.hash.HashFunction murmur3_128()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sipHash24()", "public static org.sonar.api.internal.google.common.hash.HashFunction sipHash24()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sipHash24(long, long)", "public static org.sonar.api.internal.google.common.hash.HashFunction sipHash24(long, long)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.md5()", "public static org.sonar.api.internal.google.common.hash.HashFunction md5()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sha1()", "public static org.sonar.api.internal.google.common.hash.HashFunction sha1()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sha256()", "public static org.sonar.api.internal.google.common.hash.HashFunction sha256()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sha512()", "public static org.sonar.api.internal.google.common.hash.HashFunction sha512()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.crc32c()", "public static org.sonar.api.internal.google.common.hash.HashFunction crc32c()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.crc32()", "public static org.sonar.api.internal.google.common.hash.HashFunction crc32()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.adler32()", "public static org.sonar.api.internal.google.common.hash.HashFunction adler32()"], ["int", "org.sonar.api.internal.google.common.hash.Hashing.consistentHash(org.sonar.api.internal.google.common.hash.HashCode, int)", "public static int consistentHash(org.sonar.api.internal.google.common.hash.HashCode, int)"], ["int", "org.sonar.api.internal.google.common.hash.Hashing.consistentHash(long, int)", "public static int consistentHash(long, int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Hashing.combineOrdered(java.lang.Iterable<org.sonar.api.internal.google.common.hash.HashCode>)", "public static org.sonar.api.internal.google.common.hash.HashCode combineOrdered(java.lang.Iterable<org.sonar.api.internal.google.common.hash.HashCode>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Hashing.combineUnordered(java.lang.Iterable<org.sonar.api.internal.google.common.hash.HashCode>)", "public static org.sonar.api.internal.google.common.hash.HashCode combineUnordered(java.lang.Iterable<org.sonar.api.internal.google.common.hash.HashCode>)"], ["org.sonar.api.internal.google.common.hash.HashingInputStream", "org.sonar.api.internal.google.common.hash.HashingInputStream(org.sonar.api.internal.google.common.hash.HashFunction, java.io.InputStream)", "public org.sonar.api.internal.google.common.hash.HashingInputStream(org.sonar.api.internal.google.common.hash.HashFunction, java.io.InputStream)"], ["int", "org.sonar.api.internal.google.common.hash.HashingInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.hash.HashingInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.hash.HashingInputStream.markSupported()", "public boolean markSupported()"], ["void", "org.sonar.api.internal.google.common.hash.HashingInputStream.mark(int)", "public void mark(int)"], ["void", "org.sonar.api.internal.google.common.hash.HashingInputStream.reset()", "public void reset() throws java.io.IOException"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashingInputStream.hash()", "public org.sonar.api.internal.google.common.hash.HashCode hash()"], ["org.sonar.api.internal.google.common.hash.HashingOutputStream", "org.sonar.api.internal.google.common.hash.HashingOutputStream(org.sonar.api.internal.google.common.hash.HashFunction, java.io.OutputStream)", "public org.sonar.api.internal.google.common.hash.HashingOutputStream(org.sonar.api.internal.google.common.hash.HashFunction, java.io.OutputStream)"], ["void", "org.sonar.api.internal.google.common.hash.HashingOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.hash.HashingOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashingOutputStream.hash()", "public org.sonar.api.internal.google.common.hash.HashCode hash()"], ["void", "org.sonar.api.internal.google.common.hash.HashingOutputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction$MessageDigestHasher.hash()", "public org.sonar.api.internal.google.common.hash.HashCode hash()"], ["int", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction.bits()", "public int bits()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher.makeHash()", "public org.sonar.api.internal.google.common.hash.HashCode makeHash()"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.bits()", "public int bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.makeHash()", "public org.sonar.api.internal.google.common.hash.HashCode makeHash()"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.bits()", "public int bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashInt(int)", "public org.sonar.api.internal.google.common.hash.HashCode hashInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashLong(long)", "public org.sonar.api.internal.google.common.hash.HashCode hashLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashUnencodedChars(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.SipHashFunction$SipHasher.makeHash()", "public org.sonar.api.internal.google.common.hash.HashCode makeHash()"], ["int", "org.sonar.api.internal.google.common.hash.SipHashFunction.bits()", "public int bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.SipHashFunction.newHasher()", "public org.sonar.api.internal.google.common.hash.Hasher newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.SipHashFunction.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.SipHashFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.SipHashFunction.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.html.HtmlEscapers.htmlEscaper()", "public static org.sonar.api.internal.google.common.escape.Escaper htmlEscaper()"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.AppendableWriter.append(char)", "public java.io.Writer append(char) throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence) throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.AppendableWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.BaseEncoding$1.openStream()", "public java.io.OutputStream openStream() throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.BaseEncoding$2.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.BaseEncoding$3.read()", "public int read() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$3.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$4.write(char)", "public void write(char) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$4.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$4.close()", "public void close() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.BaseEncoding$Alphabet.matches(char)", "public boolean matches(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding$Alphabet.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.omitPadding()", "public org.sonar.api.internal.google.common.io.BaseEncoding omitPadding()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.withPadChar(char)", "public org.sonar.api.internal.google.common.io.BaseEncoding withPadChar(char)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.withSeparator(java.lang.String, int)", "public org.sonar.api.internal.google.common.io.BaseEncoding withSeparator(java.lang.String, int)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.upperCase()", "public org.sonar.api.internal.google.common.io.BaseEncoding upperCase()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.lowerCase()", "public org.sonar.api.internal.google.common.io.BaseEncoding lowerCase()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$1.write(byte)", "public void write(byte) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$1.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$1.close()", "public void close() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$2.read()", "public int read() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$2.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.omitPadding()", "public org.sonar.api.internal.google.common.io.BaseEncoding omitPadding()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.withPadChar(char)", "public org.sonar.api.internal.google.common.io.BaseEncoding withPadChar(char)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.withSeparator(java.lang.String, int)", "public org.sonar.api.internal.google.common.io.BaseEncoding withSeparator(java.lang.String, int)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.upperCase()", "public org.sonar.api.internal.google.common.io.BaseEncoding upperCase()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.lowerCase()", "public org.sonar.api.internal.google.common.io.BaseEncoding lowerCase()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding.encode(byte[])", "public java.lang.String encode(byte[])"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding.encode(byte[], int, int)", "public final java.lang.String encode(byte[], int, int)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.BaseEncoding.encodingStream(java.io.Writer)", "public final java.io.OutputStream encodingStream(java.io.Writer)"], ["org.sonar.api.internal.google.common.io.ByteSink", "org.sonar.api.internal.google.common.io.BaseEncoding.encodingSink(org.sonar.api.internal.google.common.io.CharSink)", "public final org.sonar.api.internal.google.common.io.ByteSink encodingSink(org.sonar.api.internal.google.common.io.CharSink)"], ["byte[]", "org.sonar.api.internal.google.common.io.BaseEncoding.decode(java.lang.CharSequence)", "public final byte[] decode(java.lang.CharSequence)"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.BaseEncoding.decodingStream(java.io.Reader)", "public final java.io.InputStream decodingStream(java.io.Reader)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.BaseEncoding.decodingSource(org.sonar.api.internal.google.common.io.CharSource)", "public final org.sonar.api.internal.google.common.io.ByteSource decodingSource(org.sonar.api.internal.google.common.io.CharSource)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base64()", "public static org.sonar.api.internal.google.common.io.BaseEncoding base64()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base64Url()", "public static org.sonar.api.internal.google.common.io.BaseEncoding base64Url()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base32()", "public static org.sonar.api.internal.google.common.io.BaseEncoding base32()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base32Hex()", "public static org.sonar.api.internal.google.common.io.BaseEncoding base32Hex()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base16()", "public static org.sonar.api.internal.google.common.io.BaseEncoding base16()"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.ByteSink$AsCharSink.openStream()", "public java.io.Writer openStream() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSink$AsCharSink.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.io.CharSink", "org.sonar.api.internal.google.common.io.ByteSink.asCharSink(java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.io.CharSink asCharSink(java.nio.charset.Charset)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.ByteSink.openBufferedStream()", "public java.io.OutputStream openBufferedStream() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.ByteSink.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteSink.writeFrom(java.io.InputStream)", "public long writeFrom(java.io.InputStream) throws java.io.IOException"], ["java.io.Reader", "org.sonar.api.internal.google.common.io.ByteSource$AsCharSource.openStream()", "public java.io.Reader openStream() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$AsCharSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.openStream()", "public java.io.InputStream openStream()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.openBufferedStream()", "public java.io.InputStream openBufferedStream() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.isEmpty()", "public boolean isEmpty()"], ["long", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.size()", "public long size()"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.read()", "public byte[] read()"], ["long", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.copyTo(java.io.OutputStream)", "public long copyTo(java.io.OutputStream) throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.read(org.sonar.api.internal.google.common.io.ByteProcessor<T>)", "public <T> T read(org.sonar.api.internal.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.hash(org.sonar.api.internal.google.common.hash.HashFunction)", "public org.sonar.api.internal.google.common.hash.HashCode hash(org.sonar.api.internal.google.common.hash.HashFunction) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.size()", "public long size() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.ByteSource$EmptyByteSource.asCharSource(java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.io.CharSource asCharSource(java.nio.charset.Charset)"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteSource$EmptyByteSource.read()", "public byte[] read()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$EmptyByteSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.openBufferedStream()", "public java.io.InputStream openBufferedStream() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.slice(long, long)", "public org.sonar.api.internal.google.common.io.ByteSource slice(long, long)"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.ByteSource.asCharSource(java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.io.CharSource asCharSource(java.nio.charset.Charset)"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource.openBufferedStream()", "public java.io.InputStream openBufferedStream() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.slice(long, long)", "public org.sonar.api.internal.google.common.io.ByteSource slice(long, long)"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteSource.size()", "public long size() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteSource.copyTo(java.io.OutputStream)", "public long copyTo(java.io.OutputStream) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteSource.copyTo(org.sonar.api.internal.google.common.io.ByteSink)", "public long copyTo(org.sonar.api.internal.google.common.io.ByteSink) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteSource.read()", "public byte[] read() throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.ByteSource.read(org.sonar.api.internal.google.common.io.ByteProcessor<T>)", "public <T> T read(org.sonar.api.internal.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.io.ByteSource.hash(org.sonar.api.internal.google.common.hash.HashFunction)", "public org.sonar.api.internal.google.common.hash.HashCode hash(org.sonar.api.internal.google.common.hash.HashFunction) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource.contentEquals(org.sonar.api.internal.google.common.io.ByteSource)", "public boolean contentEquals(org.sonar.api.internal.google.common.io.ByteSource) throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.concat(java.lang.Iterable<? extends org.sonar.api.internal.google.common.io.ByteSource>)", "public static org.sonar.api.internal.google.common.io.ByteSource concat(java.lang.Iterable<? extends org.sonar.api.internal.google.common.io.ByteSource>)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.concat(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.ByteSource>)", "public static org.sonar.api.internal.google.common.io.ByteSource concat(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.ByteSource>)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.concat(org.sonar.api.internal.google.common.io.ByteSource...)", "public static org.sonar.api.internal.google.common.io.ByteSource concat(org.sonar.api.internal.google.common.io.ByteSource...)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.wrap(byte[])", "public static org.sonar.api.internal.google.common.io.ByteSource wrap(byte[])"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.empty()", "public static org.sonar.api.internal.google.common.io.ByteSource empty()"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$1.write(int)", "public void write(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$1.write(byte[])", "public void write(byte[])"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$1.write(byte[], int, int)", "public void write(byte[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteStreams$1.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[])", "public void readFully(byte[])"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[], int, int)", "public void readFully(byte[], int, int)"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.skipBytes(int)", "public int skipBytes(int)"], ["boolean", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readBoolean()", "public boolean readBoolean()"], ["byte", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readByte()", "public byte readByte()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedByte()", "public int readUnsignedByte()"], ["short", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readShort()", "public short readShort()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedShort()", "public int readUnsignedShort()"], ["char", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readChar()", "public char readChar()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readInt()", "public int readInt()"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readLong()", "public long readLong()"], ["float", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readFloat()", "public float readFloat()"], ["double", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readDouble()", "public double readDouble()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readLine()", "public java.lang.String readLine()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readUTF()", "public java.lang.String readUTF()"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(int)", "public void write(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[])", "public void write(byte[])"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBoolean(boolean)", "public void writeBoolean(boolean)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeByte(int)", "public void writeByte(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBytes(java.lang.String)", "public void writeBytes(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChar(int)", "public void writeChar(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChars(java.lang.String)", "public void writeChars(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeDouble(double)", "public void writeDouble(double)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeFloat(float)", "public void writeFloat(float)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeInt(int)", "public void writeInt(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeLong(long)", "public void writeLong(long)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeShort(int)", "public void writeShort(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeUTF(java.lang.String)", "public void writeUTF(java.lang.String)"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.toByteArray()", "public byte[] toByteArray()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.available()", "public int available() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.void mark(int)", "public synchronized void mark(int)"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams.copy(java.io.InputStream, java.io.OutputStream)", "public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams.copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel)", "public static long copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel) throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteStreams.toByteArray(java.io.InputStream)", "public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.ByteArrayDataInput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataInput(byte[])", "public static org.sonar.api.internal.google.common.io.ByteArrayDataInput newDataInput(byte[])"], ["org.sonar.api.internal.google.common.io.ByteArrayDataInput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataInput(byte[], int)", "public static org.sonar.api.internal.google.common.io.ByteArrayDataInput newDataInput(byte[], int)"], ["org.sonar.api.internal.google.common.io.ByteArrayDataInput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataInput(java.io.ByteArrayInputStream)", "public static org.sonar.api.internal.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)"], ["org.sonar.api.internal.google.common.io.ByteArrayDataOutput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataOutput()", "public static org.sonar.api.internal.google.common.io.ByteArrayDataOutput newDataOutput()"], ["org.sonar.api.internal.google.common.io.ByteArrayDataOutput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataOutput(int)", "public static org.sonar.api.internal.google.common.io.ByteArrayDataOutput newDataOutput(int)"], ["org.sonar.api.internal.google.common.io.ByteArrayDataOutput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataOutput(java.io.ByteArrayOutputStream)", "public static org.sonar.api.internal.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.ByteStreams.nullOutputStream()", "public static java.io.OutputStream nullOutputStream()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteStreams.limit(java.io.InputStream, long)", "public static java.io.InputStream limit(java.io.InputStream, long)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams.skipFully(java.io.InputStream, long)", "public static void skipFully(java.io.InputStream, long) throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.ByteStreams.readBytes(java.io.InputStream, org.sonar.api.internal.google.common.io.ByteProcessor<T>)", "public static <T> T readBytes(java.io.InputStream, org.sonar.api.internal.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams.read(java.io.InputStream, byte[], int, int)", "public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.CharSequenceReader", "org.sonar.api.internal.google.common.io.CharSequenceReader(java.lang.CharSequence)", "public org.sonar.api.internal.google.common.io.CharSequenceReader(java.lang.CharSequence)"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.int read(java.nio.CharBuffer)", "public synchronized int read(java.nio.CharBuffer) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.int read()", "public synchronized int read() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.int read(char[], int, int)", "public synchronized int read(char[], int, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.long skip(long)", "public synchronized long skip(long) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.boolean ready()", "public synchronized boolean ready() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.CharSequenceReader.markSupported()", "public boolean markSupported()"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.void mark(int)", "public synchronized void mark(int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.void reset()", "public synchronized void reset() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.void close()", "public synchronized void close() throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharSink.openBufferedStream()", "public java.io.Writer openBufferedStream() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CharSink.write(java.lang.CharSequence)", "public void write(java.lang.CharSequence) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>)", "public void writeLines(java.lang.Iterable<? extends java.lang.CharSequence>) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String)", "public void writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.CharSink.writeFrom(java.lang.Readable)", "public long writeFrom(java.lang.Readable) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource$1.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["java.io.Reader", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.openStream()", "public java.io.Reader openStream()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.read()", "public java.lang.String read()"], ["boolean", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.readFirstLine()", "public java.lang.String readFirstLine()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.String>", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.readLines()", "public org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.String> readLines()"], ["<T> T", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.readLines(org.sonar.api.internal.google.common.io.LineProcessor<T>)", "public <T> T readLines(org.sonar.api.internal.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.toString()", "public java.lang.String toString()"], ["java.io.Reader", "org.sonar.api.internal.google.common.io.CharSource$ConcatenatedCharSource.openStream()", "public java.io.Reader openStream() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.CharSource$ConcatenatedCharSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$ConcatenatedCharSource.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$EmptyCharSource.toString()", "public java.lang.String toString()"], ["java.io.BufferedReader", "org.sonar.api.internal.google.common.io.CharSource.openBufferedStream()", "public java.io.BufferedReader openBufferedStream() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.CharSource.copyTo(java.lang.Appendable)", "public long copyTo(java.lang.Appendable) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.CharSource.copyTo(org.sonar.api.internal.google.common.io.CharSink)", "public long copyTo(org.sonar.api.internal.google.common.io.CharSink) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource.read()", "public java.lang.String read() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource.readFirstLine()", "public java.lang.String readFirstLine() throws java.io.IOException"], ["org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.String>", "org.sonar.api.internal.google.common.io.CharSource.readLines()", "public org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.String> readLines() throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.CharSource.readLines(org.sonar.api.internal.google.common.io.LineProcessor<T>)", "public <T> T readLines(org.sonar.api.internal.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.CharSource.isEmpty()", "public boolean isEmpty() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.concat(java.lang.Iterable<? extends org.sonar.api.internal.google.common.io.CharSource>)", "public static org.sonar.api.internal.google.common.io.CharSource concat(java.lang.Iterable<? extends org.sonar.api.internal.google.common.io.CharSource>)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.concat(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.CharSource>)", "public static org.sonar.api.internal.google.common.io.CharSource concat(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.CharSource>)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.concat(org.sonar.api.internal.google.common.io.CharSource...)", "public static org.sonar.api.internal.google.common.io.CharSource concat(org.sonar.api.internal.google.common.io.CharSource...)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.wrap(java.lang.CharSequence)", "public static org.sonar.api.internal.google.common.io.CharSource wrap(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.empty()", "public static org.sonar.api.internal.google.common.io.CharSource empty()"], ["int", "org.sonar.api.internal.google.common.io.CharStreams$1.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.CharStreams$1.read(java.nio.CharBuffer)", "public int read(java.nio.CharBuffer) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$1.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(int)", "public void write(int)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(char[])", "public void write(char[])"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)", "public java.io.Writer append(java.lang.CharSequence)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)", "public java.io.Writer append(java.lang.CharSequence, int, int)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(char)", "public java.io.Writer append(char)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.flush()", "public void flush()"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.close()", "public void close()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.toString()", "public java.lang.String toString()"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.CharStreams.copy(java.lang.Readable, java.lang.Appendable)", "public static long copy(java.lang.Readable, java.lang.Appendable) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharStreams.toString(java.lang.Readable)", "public static java.lang.String toString(java.lang.Readable) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.google.common.io.CharStreams.readLines(java.lang.Readable)", "public static java.util.List<java.lang.String> readLines(java.lang.Readable) throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.CharStreams.readLines(java.lang.Readable, org.sonar.api.internal.google.common.io.LineProcessor<T>)", "public static <T> T readLines(java.lang.Readable, org.sonar.api.internal.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CharStreams.skipFully(java.io.Reader, long)", "public static void skipFully(java.io.Reader, long) throws java.io.IOException"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams.nullWriter()", "public static java.io.Writer nullWriter()"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams.asWriter(java.lang.Appendable)", "public static java.io.Writer asWriter(java.lang.Appendable)"], ["void", "org.sonar.api.internal.google.common.io.Closeables.close(java.io.Closeable, boolean)", "public static void close(java.io.Closeable, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Closeables.closeQuietly(java.io.InputStream)", "public static void closeQuietly(java.io.InputStream)"], ["void", "org.sonar.api.internal.google.common.io.Closeables.closeQuietly(java.io.Reader)", "public static void closeQuietly(java.io.Reader)"], ["void", "org.sonar.api.internal.google.common.io.Closer$LoggingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)", "public void suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.io.Closer$SuppressingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)", "public void suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["org.sonar.api.internal.google.common.io.Closer", "org.sonar.api.internal.google.common.io.Closer.create()", "public static org.sonar.api.internal.google.common.io.Closer create()"], ["<C extends java.io.Closeable> C", "org.sonar.api.internal.google.common.io.Closer.register(C)", "public <C extends java.io.Closeable> C register(C)"], ["java.lang.RuntimeException", "org.sonar.api.internal.google.common.io.Closer.rethrow(java.lang.Throwable)", "public java.lang.RuntimeException rethrow(java.lang.Throwable) throws java.io.IOException"], ["<X extends java.lang.Exception> java.lang.RuntimeException", "org.sonar.api.internal.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)", "public <X extends java.lang.Exception> java.lang.RuntimeException rethrow(java.lang.Throwable, java.lang.Class<X>) throws java/io/IOException, X"], ["<X1 extends java.lang.Exception, X2 extends java.lang.Exception> java.lang.RuntimeException", "org.sonar.api.internal.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)", "public <X1 extends java.lang.Exception, X2 extends java.lang.Exception> java.lang.RuntimeException rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>) throws java/io/IOException, X1, X2"], ["void", "org.sonar.api.internal.google.common.io.Closer.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.CountingInputStream", "org.sonar.api.internal.google.common.io.CountingInputStream(java.io.InputStream)", "public org.sonar.api.internal.google.common.io.CountingInputStream(java.io.InputStream)"], ["long", "org.sonar.api.internal.google.common.io.CountingInputStream.getCount()", "public long getCount()"], ["int", "org.sonar.api.internal.google.common.io.CountingInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.CountingInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.CountingInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.CountingInputStream.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "org.sonar.api.internal.google.common.io.CountingInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.CountingOutputStream", "org.sonar.api.internal.google.common.io.CountingOutputStream(java.io.OutputStream)", "public org.sonar.api.internal.google.common.io.CountingOutputStream(java.io.OutputStream)"], ["long", "org.sonar.api.internal.google.common.io.CountingOutputStream.getCount()", "public long getCount()"], ["void", "org.sonar.api.internal.google.common.io.CountingOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CountingOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.CountingOutputStream.close()", "public void close() throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream$1.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream$2.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.FileBackedOutputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream(int)", "public org.sonar.api.internal.google.common.io.FileBackedOutputStream(int)"], ["org.sonar.api.internal.google.common.io.FileBackedOutputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream(int, boolean)", "public org.sonar.api.internal.google.common.io.FileBackedOutputStream(int, boolean)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.asByteSource()", "public org.sonar.api.internal.google.common.io.ByteSource asByteSource()"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void write(int)", "public synchronized void write(int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void write(byte[])", "public synchronized void write(byte[]) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void write(byte[], int, int)", "public synchronized void write(byte[], int, int) throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void close()", "public synchronized void close() throws java.io.IOException"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void flush()", "public synchronized void flush() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.FileWriteMode[]", "org.sonar.api.internal.google.common.io.FileWriteMode.values()", "public static org.sonar.api.internal.google.common.io.FileWriteMode[] values()"], ["org.sonar.api.internal.google.common.io.FileWriteMode", "org.sonar.api.internal.google.common.io.FileWriteMode.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.io.FileWriteMode valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.io.Files$1.processLine(java.lang.String)", "public boolean processLine(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.google.common.io.Files$1.getResult()", "public java.util.List<java.lang.String> getResult()"], ["java.lang.Object", "org.sonar.api.internal.google.common.io.Files$1.getResult()", "public java.lang.Object getResult()"], ["java.lang.Iterable<java.io.File>", "org.sonar.api.internal.google.common.io.Files$2.children(java.io.File)", "public java.lang.Iterable<java.io.File> children(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$2.toString()", "public java.lang.String toString()"], ["java.lang.Iterable", "org.sonar.api.internal.google.common.io.Files$2.children(java.lang.Object)", "public java.lang.Iterable children(java.lang.Object)"], ["java.io.FileOutputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSink.openStream()", "public java.io.FileOutputStream openStream() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FileByteSink.toString()", "public java.lang.String toString()"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSink.openStream()", "public java.io.OutputStream openStream() throws java.io.IOException"], ["java.io.FileInputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSource.openStream()", "public java.io.FileInputStream openStream() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.Files$FileByteSource.size()", "public long size() throws java.io.IOException"], ["byte[]", "org.sonar.api.internal.google.common.io.Files$FileByteSource.read()", "public byte[] read() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FileByteSource.toString()", "public java.lang.String toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$1.apply(java.io.File)", "public boolean apply(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FilePredicate$1.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$2.apply(java.io.File)", "public boolean apply(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FilePredicate$2.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.io.Files$FilePredicate[]", "org.sonar.api.internal.google.common.io.Files$FilePredicate.values()", "public static org.sonar.api.internal.google.common.io.Files$FilePredicate[] values()"], ["org.sonar.api.internal.google.common.io.Files$FilePredicate", "org.sonar.api.internal.google.common.io.Files$FilePredicate.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.io.Files$FilePredicate valueOf(java.lang.String)"], ["java.io.BufferedReader", "org.sonar.api.internal.google.common.io.Files.newReader(java.io.File, java.nio.charset.Charset)", "public static java.io.BufferedReader newReader(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException"], ["java.io.BufferedWriter", "org.sonar.api.internal.google.common.io.Files.newWriter(java.io.File, java.nio.charset.Charset)", "public static java.io.BufferedWriter newWriter(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.Files.asByteSource(java.io.File)", "public static org.sonar.api.internal.google.common.io.ByteSource asByteSource(java.io.File)"], ["org.sonar.api.internal.google.common.io.ByteSink", "org.sonar.api.internal.google.common.io.Files.asByteSink(java.io.File, org.sonar.api.internal.google.common.io.FileWriteMode...)", "public static org.sonar.api.internal.google.common.io.ByteSink asByteSink(java.io.File, org.sonar.api.internal.google.common.io.FileWriteMode...)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.Files.asCharSource(java.io.File, java.nio.charset.Charset)", "public static org.sonar.api.internal.google.common.io.CharSource asCharSource(java.io.File, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.io.CharSink", "org.sonar.api.internal.google.common.io.Files.asCharSink(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.FileWriteMode...)", "public static org.sonar.api.internal.google.common.io.CharSink asCharSink(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.FileWriteMode...)"], ["byte[]", "org.sonar.api.internal.google.common.io.Files.toByteArray(java.io.File)", "public static byte[] toByteArray(java.io.File) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.toString(java.io.File, java.nio.charset.Charset)", "public static java.lang.String toString(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.write(byte[], java.io.File)", "public static void write(byte[], java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.copy(java.io.File, java.io.OutputStream)", "public static void copy(java.io.File, java.io.OutputStream) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.copy(java.io.File, java.io.File)", "public static void copy(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)", "public static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)", "public static void append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable)", "public static void copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.Files.equal(java.io.File, java.io.File)", "public static boolean equal(java.io.File, java.io.File) throws java.io.IOException"], ["java.io.File", "org.sonar.api.internal.google.common.io.Files.createTempDir()", "public static java.io.File createTempDir()"], ["void", "org.sonar.api.internal.google.common.io.Files.touch(java.io.File)", "public static void touch(java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.createParentDirs(java.io.File)", "public static void createParentDirs(java.io.File) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Files.move(java.io.File, java.io.File)", "public static void move(java.io.File, java.io.File) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.readFirstLine(java.io.File, java.nio.charset.Charset)", "public static java.lang.String readFirstLine(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.google.common.io.Files.readLines(java.io.File, java.nio.charset.Charset)", "public static java.util.List<java.lang.String> readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.Files.readLines(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.LineProcessor<T>)", "public static <T> T readLines(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.Files.readBytes(java.io.File, org.sonar.api.internal.google.common.io.ByteProcessor<T>)", "public static <T> T readBytes(java.io.File, org.sonar.api.internal.google.common.io.ByteProcessor<T>) throws java.io.IOException"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.io.Files.hash(java.io.File, org.sonar.api.internal.google.common.hash.HashFunction)", "public static org.sonar.api.internal.google.common.hash.HashCode hash(java.io.File, org.sonar.api.internal.google.common.hash.HashFunction) throws java.io.IOException"], ["java.nio.MappedByteBuffer", "org.sonar.api.internal.google.common.io.Files.map(java.io.File)", "public static java.nio.MappedByteBuffer map(java.io.File) throws java.io.IOException"], ["java.nio.MappedByteBuffer", "org.sonar.api.internal.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode)", "public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode) throws java.io.IOException"], ["java.nio.MappedByteBuffer", "org.sonar.api.internal.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode, long)", "public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.FileNotFoundException, java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.simplifyPath(java.lang.String)", "public static java.lang.String simplifyPath(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.getFileExtension(java.lang.String)", "public static java.lang.String getFileExtension(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.getNameWithoutExtension(java.lang.String)", "public static java.lang.String getNameWithoutExtension(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.TreeTraverser<java.io.File>", "org.sonar.api.internal.google.common.io.Files.fileTreeTraverser()", "public static org.sonar.api.internal.google.common.collect.TreeTraverser<java.io.File> fileTreeTraverser()"], ["org.sonar.api.internal.google.common.base.Predicate<java.io.File>", "org.sonar.api.internal.google.common.io.Files.isDirectory()", "public static org.sonar.api.internal.google.common.base.Predicate<java.io.File> isDirectory()"], ["org.sonar.api.internal.google.common.base.Predicate<java.io.File>", "org.sonar.api.internal.google.common.io.Files.isFile()", "public static org.sonar.api.internal.google.common.base.Predicate<java.io.File> isFile()"], ["void", "org.sonar.api.internal.google.common.io.Flushables.flush(java.io.Flushable, boolean)", "public static void flush(java.io.Flushable, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Flushables.flushQuietly(java.io.Flushable)", "public static void flushQuietly(java.io.Flushable)"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$1.read()", "public int read() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$1.close()", "public void close() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$2.read()", "public int read()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$2.close()", "public void close()"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$3.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$3.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$3.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$4.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$4.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$4.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$5.write(char)", "public void write(char) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$5.flush()", "public void flush() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$5.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.write(char)", "public void write(char)"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.flush()", "public void flush()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.close()", "public void close()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.io.LineReader", "org.sonar.api.internal.google.common.io.LineReader(java.lang.Readable)", "public org.sonar.api.internal.google.common.io.LineReader(java.lang.Readable)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.LineReader.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.LittleEndianDataInputStream", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream(java.io.InputStream)", "public org.sonar.api.internal.google.common.io.LittleEndianDataInputStream(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readLine()", "public java.lang.String readLine()"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readFully(byte[])", "public void readFully(byte[]) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readFully(byte[], int, int)", "public void readFully(byte[], int, int) throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readUnsignedShort()", "public int readUnsignedShort() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readInt()", "public int readInt() throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readLong()", "public long readLong() throws java.io.IOException"], ["float", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readFloat()", "public float readFloat() throws java.io.IOException"], ["double", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readDouble()", "public double readDouble() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readUTF()", "public java.lang.String readUTF() throws java.io.IOException"], ["short", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readShort()", "public short readShort() throws java.io.IOException"], ["char", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readChar()", "public char readChar() throws java.io.IOException"], ["byte", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readByte()", "public byte readByte() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readBoolean()", "public boolean readBoolean() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream(java.io.OutputStream)", "public org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeBoolean(boolean)", "public void writeBoolean(boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeByte(int)", "public void writeByte(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeBytes(java.lang.String)", "public void writeBytes(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeChar(int)", "public void writeChar(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeChars(java.lang.String)", "public void writeChars(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeDouble(double)", "public void writeDouble(double) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeFloat(float)", "public void writeFloat(float) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeInt(int)", "public void writeInt(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeLong(long)", "public void writeLong(long) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeShort(int)", "public void writeShort(int) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeUTF(java.lang.String)", "public void writeUTF(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.MultiInputStream", "org.sonar.api.internal.google.common.io.MultiInputStream(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.ByteSource>)", "public org.sonar.api.internal.google.common.io.MultiInputStream(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.ByteSource>) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.MultiInputStream.close()", "public void close() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.MultiInputStream.available()", "public int available() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.MultiInputStream.markSupported()", "public boolean markSupported()"], ["int", "org.sonar.api.internal.google.common.io.MultiInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.MultiInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.MultiInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.sonar.api.internal.google.common.io.MultiReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["long", "org.sonar.api.internal.google.common.io.MultiReader.skip(long)", "public long skip(long) throws java.io.IOException"], ["boolean", "org.sonar.api.internal.google.common.io.MultiReader.ready()", "public boolean ready() throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.MultiReader.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.google.common.io.PatternFilenameFilter", "org.sonar.api.internal.google.common.io.PatternFilenameFilter(java.lang.String)", "public org.sonar.api.internal.google.common.io.PatternFilenameFilter(java.lang.String)"], ["org.sonar.api.internal.google.common.io.PatternFilenameFilter", "org.sonar.api.internal.google.common.io.PatternFilenameFilter(java.util.regex.Pattern)", "public org.sonar.api.internal.google.common.io.PatternFilenameFilter(java.util.regex.Pattern)"], ["boolean", "org.sonar.api.internal.google.common.io.PatternFilenameFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.io.Resources$1.processLine(java.lang.String)", "public boolean processLine(java.lang.String)"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.google.common.io.Resources$1.getResult()", "public java.util.List<java.lang.String> getResult()"], ["java.lang.Object", "org.sonar.api.internal.google.common.io.Resources$1.getResult()", "public java.lang.Object getResult()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.Resources$UrlByteSource.openStream()", "public java.io.InputStream openStream() throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Resources$UrlByteSource.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.Resources.asByteSource(java.net.URL)", "public static org.sonar.api.internal.google.common.io.ByteSource asByteSource(java.net.URL)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.Resources.asCharSource(java.net.URL, java.nio.charset.Charset)", "public static org.sonar.api.internal.google.common.io.CharSource asCharSource(java.net.URL, java.nio.charset.Charset)"], ["byte[]", "org.sonar.api.internal.google.common.io.Resources.toByteArray(java.net.URL)", "public static byte[] toByteArray(java.net.URL) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Resources.toString(java.net.URL, java.nio.charset.Charset)", "public static java.lang.String toString(java.net.URL, java.nio.charset.Charset) throws java.io.IOException"], ["<T> T", "org.sonar.api.internal.google.common.io.Resources.readLines(java.net.URL, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.LineProcessor<T>)", "public static <T> T readLines(java.net.URL, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.LineProcessor<T>) throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.sonar.api.internal.google.common.io.Resources.readLines(java.net.URL, java.nio.charset.Charset)", "public static java.util.List<java.lang.String> readLines(java.net.URL, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.sonar.api.internal.google.common.io.Resources.copy(java.net.URL, java.io.OutputStream)", "public static void copy(java.net.URL, java.io.OutputStream) throws java.io.IOException"], ["java.net.URL", "org.sonar.api.internal.google.common.io.Resources.getResource(java.lang.String)", "public static java.net.URL getResource(java.lang.String)"], ["java.net.URL", "org.sonar.api.internal.google.common.io.Resources.getResource(java.lang.Class<?>, java.lang.String)", "public static java.net.URL getResource(java.lang.Class<?>, java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.math.BigIntegerMath.isPowerOfTwo(java.math.BigInteger)", "public static boolean isPowerOfTwo(java.math.BigInteger)"], ["int", "org.sonar.api.internal.google.common.math.BigIntegerMath.log2(java.math.BigInteger, java.math.RoundingMode)", "public static int log2(java.math.BigInteger, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.BigIntegerMath.log10(java.math.BigInteger, java.math.RoundingMode)", "public static int log10(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.sqrt(java.math.BigInteger, java.math.RoundingMode)", "public static java.math.BigInteger sqrt(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)", "public static java.math.BigInteger divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.factorial(int)", "public static java.math.BigInteger factorial(int)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.binomial(int, int)", "public static java.math.BigInteger binomial(int, int)"], ["int", "org.sonar.api.internal.google.common.math.DoubleMath.roundToInt(double, java.math.RoundingMode)", "public static int roundToInt(double, java.math.RoundingMode)"], ["long", "org.sonar.api.internal.google.common.math.DoubleMath.roundToLong(double, java.math.RoundingMode)", "public static long roundToLong(double, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.DoubleMath.roundToBigInteger(double, java.math.RoundingMode)", "public static java.math.BigInteger roundToBigInteger(double, java.math.RoundingMode)"], ["boolean", "org.sonar.api.internal.google.common.math.DoubleMath.isPowerOfTwo(double)", "public static boolean isPowerOfTwo(double)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.log2(double)", "public static double log2(double)"], ["int", "org.sonar.api.internal.google.common.math.DoubleMath.log2(double, java.math.RoundingMode)", "public static int log2(double, java.math.RoundingMode)"], ["boolean", "org.sonar.api.internal.google.common.math.DoubleMath.isMathematicalInteger(double)", "public static boolean isMathematicalInteger(double)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.factorial(int)", "public static double factorial(int)"], ["boolean", "org.sonar.api.internal.google.common.math.DoubleMath.fuzzyEquals(double, double, double)", "public static boolean fuzzyEquals(double, double, double)"], ["int", "org.sonar.api.internal.google.common.math.DoubleMath.fuzzyCompare(double, double, double)", "public static int fuzzyCompare(double, double, double)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(double...)", "public static double mean(double...)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(int...)", "public static double mean(int...)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(long...)", "public static double mean(long...)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(java.lang.Iterable<? extends java.lang.Number>)", "public static double mean(java.lang.Iterable<? extends java.lang.Number>)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(java.util.Iterator<? extends java.lang.Number>)", "public static double mean(java.util.Iterator<? extends java.lang.Number>)"], ["boolean", "org.sonar.api.internal.google.common.math.IntMath.isPowerOfTwo(int)", "public static boolean isPowerOfTwo(int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.log2(int, java.math.RoundingMode)", "public static int log2(int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.log10(int, java.math.RoundingMode)", "public static int log10(int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.pow(int, int)", "public static int pow(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.sqrt(int, java.math.RoundingMode)", "public static int sqrt(int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.divide(int, int, java.math.RoundingMode)", "public static int divide(int, int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.mod(int, int)", "public static int mod(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.gcd(int, int)", "public static int gcd(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedAdd(int, int)", "public static int checkedAdd(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedSubtract(int, int)", "public static int checkedSubtract(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedMultiply(int, int)", "public static int checkedMultiply(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedPow(int, int)", "public static int checkedPow(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.factorial(int)", "public static int factorial(int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.binomial(int, int)", "public static int binomial(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.mean(int, int)", "public static int mean(int, int)"], ["boolean", "org.sonar.api.internal.google.common.math.LongMath.isPowerOfTwo(long)", "public static boolean isPowerOfTwo(long)"], ["int", "org.sonar.api.internal.google.common.math.LongMath.log2(long, java.math.RoundingMode)", "public static int log2(long, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.LongMath.log10(long, java.math.RoundingMode)", "public static int log10(long, java.math.RoundingMode)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.pow(long, int)", "public static long pow(long, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.sqrt(long, java.math.RoundingMode)", "public static long sqrt(long, java.math.RoundingMode)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.divide(long, long, java.math.RoundingMode)", "public static long divide(long, long, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.LongMath.mod(long, int)", "public static int mod(long, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.mod(long, long)", "public static long mod(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.gcd(long, long)", "public static long gcd(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedAdd(long, long)", "public static long checkedAdd(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedSubtract(long, long)", "public static long checkedSubtract(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedMultiply(long, long)", "public static long checkedMultiply(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedPow(long, int)", "public static long checkedPow(long, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.factorial(int)", "public static long factorial(int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.binomial(int, int)", "public static long binomial(int, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.mean(long, long)", "public static long mean(long, long)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.HostAndPort.getHostText()", "public java.lang.String getHostText()"], ["boolean", "org.sonar.api.internal.google.common.net.HostAndPort.hasPort()", "public boolean hasPort()"], ["int", "org.sonar.api.internal.google.common.net.HostAndPort.getPort()", "public int getPort()"], ["int", "org.sonar.api.internal.google.common.net.HostAndPort.getPortOrDefault(int)", "public int getPortOrDefault(int)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.fromParts(java.lang.String, int)", "public static org.sonar.api.internal.google.common.net.HostAndPort fromParts(java.lang.String, int)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.fromHost(java.lang.String)", "public static org.sonar.api.internal.google.common.net.HostAndPort fromHost(java.lang.String)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.fromString(java.lang.String)", "public static org.sonar.api.internal.google.common.net.HostAndPort fromString(java.lang.String)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.withDefaultPort(int)", "public org.sonar.api.internal.google.common.net.HostAndPort withDefaultPort(int)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.requireBracketsForIPv6()", "public org.sonar.api.internal.google.common.net.HostAndPort requireBracketsForIPv6()"], ["boolean", "org.sonar.api.internal.google.common.net.HostAndPort.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.HostAndPort.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.HostAndPort.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.net.HostSpecifier", "org.sonar.api.internal.google.common.net.HostSpecifier.fromValid(java.lang.String)", "public static org.sonar.api.internal.google.common.net.HostSpecifier fromValid(java.lang.String)"], ["org.sonar.api.internal.google.common.net.HostSpecifier", "org.sonar.api.internal.google.common.net.HostSpecifier.from(java.lang.String)", "public static org.sonar.api.internal.google.common.net.HostSpecifier from(java.lang.String) throws java.text.ParseException"], ["boolean", "org.sonar.api.internal.google.common.net.HostSpecifier.isValid(java.lang.String)", "public static boolean isValid(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.HostSpecifier.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.HostSpecifier.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.HostSpecifier.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo(java.net.Inet4Address, java.net.Inet4Address, int, int)", "public org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo(java.net.Inet4Address, java.net.Inet4Address, int, int)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getServer()", "public java.net.Inet4Address getServer()"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getClient()", "public java.net.Inet4Address getClient()"], ["int", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getPort()", "public int getPort()"], ["int", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getFlags()", "public int getFlags()"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.forString(java.lang.String)", "public static java.net.InetAddress forString(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isInetAddress(java.lang.String)", "public static boolean isInetAddress(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.InetAddresses.toAddrString(java.net.InetAddress)", "public static java.lang.String toAddrString(java.net.InetAddress)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.InetAddresses.toUriString(java.net.InetAddress)", "public static java.lang.String toUriString(java.net.InetAddress)"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.forUriString(java.lang.String)", "public static java.net.InetAddress forUriString(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isUriInetAddress(java.lang.String)", "public static boolean isUriInetAddress(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isCompatIPv4Address(java.net.Inet6Address)", "public static boolean isCompatIPv4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getCompatIPv4Address(java.net.Inet6Address)", "public static java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.is6to4Address(java.net.Inet6Address)", "public static boolean is6to4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.get6to4IPv4Address(java.net.Inet6Address)", "public static java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isTeredoAddress(java.net.Inet6Address)", "public static boolean isTeredoAddress(java.net.Inet6Address)"], ["org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo", "org.sonar.api.internal.google.common.net.InetAddresses.getTeredoInfo(java.net.Inet6Address)", "public static org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isIsatapAddress(java.net.Inet6Address)", "public static boolean isIsatapAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getIsatapIPv4Address(java.net.Inet6Address)", "public static java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)", "public static boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getEmbeddedIPv4ClientAddress(java.net.Inet6Address)", "public static java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isMappedIPv4Address(java.lang.String)", "public static boolean isMappedIPv4Address(java.lang.String)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getCoercedIPv4Address(java.net.InetAddress)", "public static java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)"], ["int", "org.sonar.api.internal.google.common.net.InetAddresses.coerceToInteger(java.net.InetAddress)", "public static int coerceToInteger(java.net.InetAddress)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.fromInteger(int)", "public static java.net.Inet4Address fromInteger(int)"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.fromLittleEndianByteArray(byte[])", "public static java.net.InetAddress fromLittleEndianByteArray(byte[]) throws java.net.UnknownHostException"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.decrement(java.net.InetAddress)", "public static java.net.InetAddress decrement(java.net.InetAddress)"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.increment(java.net.InetAddress)", "public static java.net.InetAddress increment(java.net.InetAddress)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isMaximum(java.net.InetAddress)", "public static boolean isMaximum(java.net.InetAddress)"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.from(java.lang.String)", "public static org.sonar.api.internal.google.common.net.InternetDomainName from(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.String>", "org.sonar.api.internal.google.common.net.InternetDomainName.parts()", "public org.sonar.api.internal.google.common.collect.ImmutableList<java.lang.String> parts()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isPublicSuffix()", "public boolean isPublicSuffix()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.hasPublicSuffix()", "public boolean hasPublicSuffix()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.publicSuffix()", "public org.sonar.api.internal.google.common.net.InternetDomainName publicSuffix()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isUnderPublicSuffix()", "public boolean isUnderPublicSuffix()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isTopPrivateDomain()", "public boolean isTopPrivateDomain()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.topPrivateDomain()", "public org.sonar.api.internal.google.common.net.InternetDomainName topPrivateDomain()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.hasParent()", "public boolean hasParent()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.parent()", "public org.sonar.api.internal.google.common.net.InternetDomainName parent()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.child(java.lang.String)", "public org.sonar.api.internal.google.common.net.InternetDomainName child(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isValid(java.lang.String)", "public static boolean isValid(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.InternetDomainName.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.InternetDomainName.hashCode()", "public int hashCode()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset<java.lang.String>", "org.sonar.api.internal.google.common.net.MediaType$1.apply(java.util.Collection<java.lang.String>)", "public org.sonar.api.internal.google.common.collect.ImmutableMultiset<java.lang.String> apply(java.util.Collection<java.lang.String>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.net.MediaType$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType$2.apply(java.lang.String)", "public java.lang.String apply(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.net.MediaType$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType.type()", "public java.lang.String type()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType.subtype()", "public java.lang.String subtype()"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.net.MediaType.parameters()", "public org.sonar.api.internal.google.common.collect.ImmutableListMultimap<java.lang.String, java.lang.String> parameters()"], ["org.sonar.api.internal.google.common.base.Optional<java.nio.charset.Charset>", "org.sonar.api.internal.google.common.net.MediaType.charset()", "public org.sonar.api.internal.google.common.base.Optional<java.nio.charset.Charset> charset()"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withoutParameters()", "public org.sonar.api.internal.google.common.net.MediaType withoutParameters()"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withParameters(org.sonar.api.internal.google.common.collect.Multimap<java.lang.String, java.lang.String>)", "public org.sonar.api.internal.google.common.net.MediaType withParameters(org.sonar.api.internal.google.common.collect.Multimap<java.lang.String, java.lang.String>)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withParameter(java.lang.String, java.lang.String)", "public org.sonar.api.internal.google.common.net.MediaType withParameter(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withCharset(java.nio.charset.Charset)", "public org.sonar.api.internal.google.common.net.MediaType withCharset(java.nio.charset.Charset)"], ["boolean", "org.sonar.api.internal.google.common.net.MediaType.hasWildcard()", "public boolean hasWildcard()"], ["boolean", "org.sonar.api.internal.google.common.net.MediaType.is(org.sonar.api.internal.google.common.net.MediaType)", "public boolean is(org.sonar.api.internal.google.common.net.MediaType)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.create(java.lang.String, java.lang.String)", "public static org.sonar.api.internal.google.common.net.MediaType create(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.parse(java.lang.String)", "public static org.sonar.api.internal.google.common.net.MediaType parse(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.MediaType.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.MediaType.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.net.PercentEscaper", "org.sonar.api.internal.google.common.net.PercentEscaper(java.lang.String, boolean)", "public org.sonar.api.internal.google.common.net.PercentEscaper(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.PercentEscaper.escape(java.lang.String)", "public java.lang.String escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.net.UrlEscapers.urlFormParameterEscaper()", "public static org.sonar.api.internal.google.common.escape.Escaper urlFormParameterEscaper()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.net.UrlEscapers.urlPathSegmentEscaper()", "public static org.sonar.api.internal.google.common.escape.Escaper urlPathSegmentEscaper()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.net.UrlEscapers.urlFragmentEscaper()", "public static org.sonar.api.internal.google.common.escape.Escaper urlFragmentEscaper()"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.get(int)", "public java.lang.Boolean get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Boolean)", "public java.lang.Boolean set(int, java.lang.Boolean)"], ["java.util.List<java.lang.Boolean>", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.subList(int, int)", "public java.util.List<java.lang.Boolean> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.get(int)", "public java.lang.Object get(int)"], ["org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.compare(boolean[], boolean[])", "public int compare(boolean[], boolean[])"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.hashCode(boolean)", "public static int hashCode(boolean)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.compare(boolean, boolean)", "public static int compare(boolean, boolean)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans.contains(boolean[], boolean)", "public static boolean contains(boolean[], boolean)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.indexOf(boolean[], boolean)", "public static int indexOf(boolean[], boolean)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.indexOf(boolean[], boolean[])", "public static int indexOf(boolean[], boolean[])"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.lastIndexOf(boolean[], boolean)", "public static int lastIndexOf(boolean[], boolean)"], ["boolean[]", "org.sonar.api.internal.google.common.primitives.Booleans.concat(boolean[]...)", "public static boolean[] concat(boolean[]...)"], ["boolean[]", "org.sonar.api.internal.google.common.primitives.Booleans.ensureCapacity(boolean[], int, int)", "public static boolean[] ensureCapacity(boolean[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Booleans.join(java.lang.String, boolean...)", "public static java.lang.String join(java.lang.String, boolean...)"], ["java.util.Comparator<boolean[]>", "org.sonar.api.internal.google.common.primitives.Booleans.lexicographicalComparator()", "public static java.util.Comparator<boolean[]> lexicographicalComparator()"], ["boolean[]", "org.sonar.api.internal.google.common.primitives.Booleans.toArray(java.util.Collection<java.lang.Boolean>)", "public static boolean[] toArray(java.util.Collection<java.lang.Boolean>)"], ["java.util.List<java.lang.Boolean>", "org.sonar.api.internal.google.common.primitives.Booleans.asList(boolean...)", "public static java.util.List<java.lang.Boolean> asList(boolean...)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.countTrue(boolean...)", "public static int countTrue(boolean...)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Byte", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.get(int)", "public java.lang.Byte get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Byte", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Byte)", "public java.lang.Byte set(int, java.lang.Byte)"], ["java.util.List<java.lang.Byte>", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.subList(int, int)", "public java.util.List<java.lang.Byte> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.get(int)", "public java.lang.Object get(int)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.hashCode(byte)", "public static int hashCode(byte)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes.contains(byte[], byte)", "public static boolean contains(byte[], byte)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.indexOf(byte[], byte)", "public static int indexOf(byte[], byte)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.indexOf(byte[], byte[])", "public static int indexOf(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.lastIndexOf(byte[], byte)", "public static int lastIndexOf(byte[], byte)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Bytes.concat(byte[]...)", "public static byte[] concat(byte[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Bytes.ensureCapacity(byte[], int, int)", "public static byte[] ensureCapacity(byte[], int, int)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Bytes.toArray(java.util.Collection<? extends java.lang.Number>)", "public static byte[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Byte>", "org.sonar.api.internal.google.common.primitives.Bytes.asList(byte...)", "public static java.util.List<java.lang.Byte> asList(byte...)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Character", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.get(int)", "public java.lang.Character get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Character", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Character)", "public java.lang.Character set(int, java.lang.Character)"], ["java.util.List<java.lang.Character>", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.subList(int, int)", "public java.util.List<java.lang.Character> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.get(int)", "public java.lang.Object get(int)"], ["org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.compare(char[], char[])", "public int compare(char[], char[])"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.hashCode(char)", "public static int hashCode(char)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.checkedCast(long)", "public static char checkedCast(long)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.saturatedCast(long)", "public static char saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.compare(char, char)", "public static int compare(char, char)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars.contains(char[], char)", "public static boolean contains(char[], char)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.indexOf(char[], char)", "public static int indexOf(char[], char)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.indexOf(char[], char[])", "public static int indexOf(char[], char[])"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.lastIndexOf(char[], char)", "public static int lastIndexOf(char[], char)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.min(char...)", "public static char min(char...)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.max(char...)", "public static char max(char...)"], ["char[]", "org.sonar.api.internal.google.common.primitives.Chars.concat(char[]...)", "public static char[] concat(char[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Chars.toByteArray(char)", "public static byte[] toByteArray(char)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.fromByteArray(byte[])", "public static char fromByteArray(byte[])"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.fromBytes(byte, byte)", "public static char fromBytes(byte, byte)"], ["char[]", "org.sonar.api.internal.google.common.primitives.Chars.ensureCapacity(char[], int, int)", "public static char[] ensureCapacity(char[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Chars.join(java.lang.String, char...)", "public static java.lang.String join(java.lang.String, char...)"], ["java.util.Comparator<char[]>", "org.sonar.api.internal.google.common.primitives.Chars.lexicographicalComparator()", "public static java.util.Comparator<char[]> lexicographicalComparator()"], ["char[]", "org.sonar.api.internal.google.common.primitives.Chars.toArray(java.util.Collection<java.lang.Character>)", "public static char[] toArray(java.util.Collection<java.lang.Character>)"], ["java.util.List<java.lang.Character>", "org.sonar.api.internal.google.common.primitives.Chars.asList(char...)", "public static java.util.List<java.lang.Character> asList(char...)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Double", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.get(int)", "public java.lang.Double get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Double", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Double)", "public java.lang.Double set(int, java.lang.Double)"], ["java.util.List<java.lang.Double>", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.subList(int, int)", "public java.util.List<java.lang.Double> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleConverter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.compare(double[], double[])", "public int compare(double[], double[])"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.hashCode(double)", "public static int hashCode(double)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.compare(double, double)", "public static int compare(double, double)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles.isFinite(double)", "public static boolean isFinite(double)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles.contains(double[], double)", "public static boolean contains(double[], double)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.indexOf(double[], double)", "public static int indexOf(double[], double)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.indexOf(double[], double[])", "public static int indexOf(double[], double[])"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.lastIndexOf(double[], double)", "public static int lastIndexOf(double[], double)"], ["double", "org.sonar.api.internal.google.common.primitives.Doubles.min(double...)", "public static double min(double...)"], ["double", "org.sonar.api.internal.google.common.primitives.Doubles.max(double...)", "public static double max(double...)"], ["double[]", "org.sonar.api.internal.google.common.primitives.Doubles.concat(double[]...)", "public static double[] concat(double[]...)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Double>", "org.sonar.api.internal.google.common.primitives.Doubles.stringConverter()", "public static org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Double> stringConverter()"], ["double[]", "org.sonar.api.internal.google.common.primitives.Doubles.ensureCapacity(double[], int, int)", "public static double[] ensureCapacity(double[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Doubles.join(java.lang.String, double...)", "public static java.lang.String join(java.lang.String, double...)"], ["java.util.Comparator<double[]>", "org.sonar.api.internal.google.common.primitives.Doubles.lexicographicalComparator()", "public static java.util.Comparator<double[]> lexicographicalComparator()"], ["double[]", "org.sonar.api.internal.google.common.primitives.Doubles.toArray(java.util.Collection<? extends java.lang.Number>)", "public static double[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Double>", "org.sonar.api.internal.google.common.primitives.Doubles.asList(double...)", "public static java.util.List<java.lang.Double> asList(double...)"], ["java.lang.Double", "org.sonar.api.internal.google.common.primitives.Doubles.tryParse(java.lang.String)", "public static java.lang.Double tryParse(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Float", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.get(int)", "public java.lang.Float get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Float", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Float)", "public java.lang.Float set(int, java.lang.Float)"], ["java.util.List<java.lang.Float>", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.subList(int, int)", "public java.util.List<java.lang.Float> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Floats$FloatConverter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.compare(float[], float[])", "public int compare(float[], float[])"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.hashCode(float)", "public static int hashCode(float)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.compare(float, float)", "public static int compare(float, float)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats.isFinite(float)", "public static boolean isFinite(float)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats.contains(float[], float)", "public static boolean contains(float[], float)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.indexOf(float[], float)", "public static int indexOf(float[], float)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.indexOf(float[], float[])", "public static int indexOf(float[], float[])"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.lastIndexOf(float[], float)", "public static int lastIndexOf(float[], float)"], ["float", "org.sonar.api.internal.google.common.primitives.Floats.min(float...)", "public static float min(float...)"], ["float", "org.sonar.api.internal.google.common.primitives.Floats.max(float...)", "public static float max(float...)"], ["float[]", "org.sonar.api.internal.google.common.primitives.Floats.concat(float[]...)", "public static float[] concat(float[]...)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Float>", "org.sonar.api.internal.google.common.primitives.Floats.stringConverter()", "public static org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Float> stringConverter()"], ["float[]", "org.sonar.api.internal.google.common.primitives.Floats.ensureCapacity(float[], int, int)", "public static float[] ensureCapacity(float[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Floats.join(java.lang.String, float...)", "public static java.lang.String join(java.lang.String, float...)"], ["java.util.Comparator<float[]>", "org.sonar.api.internal.google.common.primitives.Floats.lexicographicalComparator()", "public static java.util.Comparator<float[]> lexicographicalComparator()"], ["float[]", "org.sonar.api.internal.google.common.primitives.Floats.toArray(java.util.Collection<? extends java.lang.Number>)", "public static float[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Float>", "org.sonar.api.internal.google.common.primitives.Floats.asList(float...)", "public static java.util.List<java.lang.Float> asList(float...)"], ["java.lang.Float", "org.sonar.api.internal.google.common.primitives.Floats.tryParse(java.lang.String)", "public static java.lang.Float tryParse(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Integer", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.get(int)", "public java.lang.Integer get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Integer)", "public java.lang.Integer set(int, java.lang.Integer)"], ["java.util.List<java.lang.Integer>", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.subList(int, int)", "public java.util.List<java.lang.Integer> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Ints$IntConverter.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.compare(int[], int[])", "public int compare(int[], int[])"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.hashCode(int)", "public static int hashCode(int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.checkedCast(long)", "public static int checkedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.saturatedCast(long)", "public static int saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.compare(int, int)", "public static int compare(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints.contains(int[], int)", "public static boolean contains(int[], int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.indexOf(int[], int)", "public static int indexOf(int[], int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.indexOf(int[], int[])", "public static int indexOf(int[], int[])"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.lastIndexOf(int[], int)", "public static int lastIndexOf(int[], int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.min(int...)", "public static int min(int...)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.max(int...)", "public static int max(int...)"], ["int[]", "org.sonar.api.internal.google.common.primitives.Ints.concat(int[]...)", "public static int[] concat(int[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Ints.toByteArray(int)", "public static byte[] toByteArray(int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.fromByteArray(byte[])", "public static int fromByteArray(byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.fromBytes(byte, byte, byte, byte)", "public static int fromBytes(byte, byte, byte, byte)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Integer>", "org.sonar.api.internal.google.common.primitives.Ints.stringConverter()", "public static org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Integer> stringConverter()"], ["int[]", "org.sonar.api.internal.google.common.primitives.Ints.ensureCapacity(int[], int, int)", "public static int[] ensureCapacity(int[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Ints.join(java.lang.String, int...)", "public static java.lang.String join(java.lang.String, int...)"], ["java.util.Comparator<int[]>", "org.sonar.api.internal.google.common.primitives.Ints.lexicographicalComparator()", "public static java.util.Comparator<int[]> lexicographicalComparator()"], ["int[]", "org.sonar.api.internal.google.common.primitives.Ints.toArray(java.util.Collection<? extends java.lang.Number>)", "public static int[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Integer>", "org.sonar.api.internal.google.common.primitives.Ints.asList(int...)", "public static java.util.List<java.lang.Integer> asList(int...)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.primitives.Ints.tryParse(java.lang.String)", "public static java.lang.Integer tryParse(java.lang.String)"], ["org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.compare(long[], long[])", "public int compare(long[], long[])"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Long", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.get(int)", "public java.lang.Long get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Long", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Long)", "public java.lang.Long set(int, java.lang.Long)"], ["java.util.List<java.lang.Long>", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.subList(int, int)", "public java.util.List<java.lang.Long> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Longs$LongConverter.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.hashCode(long)", "public static int hashCode(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.compare(long, long)", "public static int compare(long, long)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs.contains(long[], long)", "public static boolean contains(long[], long)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.indexOf(long[], long)", "public static int indexOf(long[], long)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.indexOf(long[], long[])", "public static int indexOf(long[], long[])"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.lastIndexOf(long[], long)", "public static int lastIndexOf(long[], long)"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.min(long...)", "public static long min(long...)"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.max(long...)", "public static long max(long...)"], ["long[]", "org.sonar.api.internal.google.common.primitives.Longs.concat(long[]...)", "public static long[] concat(long[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Longs.toByteArray(long)", "public static byte[] toByteArray(long)"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.fromByteArray(byte[])", "public static long fromByteArray(byte[])"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)", "public static long fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)"], ["java.lang.Long", "org.sonar.api.internal.google.common.primitives.Longs.tryParse(java.lang.String)", "public static java.lang.Long tryParse(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Long>", "org.sonar.api.internal.google.common.primitives.Longs.stringConverter()", "public static org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Long> stringConverter()"], ["long[]", "org.sonar.api.internal.google.common.primitives.Longs.ensureCapacity(long[], int, int)", "public static long[] ensureCapacity(long[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Longs.join(java.lang.String, long...)", "public static java.lang.String join(java.lang.String, long...)"], ["java.util.Comparator<long[]>", "org.sonar.api.internal.google.common.primitives.Longs.lexicographicalComparator()", "public static java.util.Comparator<long[]> lexicographicalComparator()"], ["long[]", "org.sonar.api.internal.google.common.primitives.Longs.toArray(java.util.Collection<? extends java.lang.Number>)", "public static long[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Long>", "org.sonar.api.internal.google.common.primitives.Longs.asList(long...)", "public static java.util.List<java.lang.Long> asList(long...)"], ["java.util.Set<java.lang.Class<?>>", "org.sonar.api.internal.google.common.primitives.Primitives.allPrimitiveTypes()", "public static java.util.Set<java.lang.Class<?>> allPrimitiveTypes()"], ["java.util.Set<java.lang.Class<?>>", "org.sonar.api.internal.google.common.primitives.Primitives.allWrapperTypes()", "public static java.util.Set<java.lang.Class<?>> allWrapperTypes()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Primitives.isWrapperType(java.lang.Class<?>)", "public static boolean isWrapperType(java.lang.Class<?>)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.common.primitives.Primitives.wrap(java.lang.Class<T>)", "public static <T> java.lang.Class<T> wrap(java.lang.Class<T>)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.common.primitives.Primitives.unwrap(java.lang.Class<T>)", "public static <T> java.lang.Class<T> unwrap(java.lang.Class<T>)"], ["org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.compare(short[], short[])", "public int compare(short[], short[])"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.isEmpty()", "public boolean isEmpty()"], ["java.lang.Short", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.get(int)", "public java.lang.Short get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.lang.Short", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Short)", "public java.lang.Short set(int, java.lang.Short)"], ["java.util.List<java.lang.Short>", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.subList(int, int)", "public java.util.List<java.lang.Short> subList(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.get(int)", "public java.lang.Object get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Shorts$ShortConverter.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.hashCode(short)", "public static int hashCode(short)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.checkedCast(long)", "public static short checkedCast(long)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.saturatedCast(long)", "public static short saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.compare(short, short)", "public static int compare(short, short)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts.contains(short[], short)", "public static boolean contains(short[], short)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.indexOf(short[], short)", "public static int indexOf(short[], short)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.indexOf(short[], short[])", "public static int indexOf(short[], short[])"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.lastIndexOf(short[], short)", "public static int lastIndexOf(short[], short)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.min(short...)", "public static short min(short...)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.max(short...)", "public static short max(short...)"], ["short[]", "org.sonar.api.internal.google.common.primitives.Shorts.concat(short[]...)", "public static short[] concat(short[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Shorts.toByteArray(short)", "public static byte[] toByteArray(short)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.fromByteArray(byte[])", "public static short fromByteArray(byte[])"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.fromBytes(byte, byte)", "public static short fromBytes(byte, byte)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Short>", "org.sonar.api.internal.google.common.primitives.Shorts.stringConverter()", "public static org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Short> stringConverter()"], ["short[]", "org.sonar.api.internal.google.common.primitives.Shorts.ensureCapacity(short[], int, int)", "public static short[] ensureCapacity(short[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Shorts.join(java.lang.String, short...)", "public static java.lang.String join(java.lang.String, short...)"], ["java.util.Comparator<short[]>", "org.sonar.api.internal.google.common.primitives.Shorts.lexicographicalComparator()", "public static java.util.Comparator<short[]> lexicographicalComparator()"], ["short[]", "org.sonar.api.internal.google.common.primitives.Shorts.toArray(java.util.Collection<? extends java.lang.Number>)", "public static short[] toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.util.List<java.lang.Short>", "org.sonar.api.internal.google.common.primitives.Shorts.asList(short...)", "public static java.util.List<java.lang.Short> asList(short...)"], ["org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.checkedCast(long)", "public static byte checkedCast(long)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.saturatedCast(long)", "public static byte saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.SignedBytes.compare(byte, byte)", "public static int compare(byte, byte)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.min(byte...)", "public static byte min(byte...)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.max(byte...)", "public static byte max(byte...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.SignedBytes.join(java.lang.String, byte...)", "public static java.lang.String join(java.lang.String, byte...)"], ["java.util.Comparator<byte[]>", "org.sonar.api.internal.google.common.primitives.SignedBytes.lexicographicalComparator()", "public static java.util.Comparator<byte[]> lexicographicalComparator()"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.values()", "public static org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["sun.misc.Unsafe", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()", "public sun.misc.Unsafe run() throws java.lang.Exception"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.values()", "public static org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.toInt(byte)", "public static int toInt(byte)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.checkedCast(long)", "public static byte checkedCast(long)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.saturatedCast(long)", "public static byte saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.compare(byte, byte)", "public static int compare(byte, byte)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.min(byte...)", "public static byte min(byte...)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.max(byte...)", "public static byte max(byte...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.toString(byte)", "public static java.lang.String toString(byte)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.toString(byte, int)", "public static java.lang.String toString(byte, int)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String)", "public static byte parseUnsignedByte(java.lang.String)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String, int)", "public static byte parseUnsignedByte(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.join(java.lang.String, byte...)", "public static java.lang.String join(java.lang.String, byte...)"], ["java.util.Comparator<byte[]>", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.lexicographicalComparator()", "public static java.util.Comparator<byte[]> lexicographicalComparator()"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.fromIntBits(int)", "public static org.sonar.api.internal.google.common.primitives.UnsignedInteger fromIntBits(int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(long)", "public static org.sonar.api.internal.google.common.primitives.UnsignedInteger valueOf(long)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(java.math.BigInteger)", "public static org.sonar.api.internal.google.common.primitives.UnsignedInteger valueOf(java.math.BigInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.UnsignedInteger valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(java.lang.String, int)", "public static org.sonar.api.internal.google.common.primitives.UnsignedInteger valueOf(java.lang.String, int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.plus(org.sonar.api.internal.google.common.primitives.UnsignedInteger)", "public org.sonar.api.internal.google.common.primitives.UnsignedInteger plus(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.minus(org.sonar.api.internal.google.common.primitives.UnsignedInteger)", "public org.sonar.api.internal.google.common.primitives.UnsignedInteger minus(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.times(org.sonar.api.internal.google.common.primitives.UnsignedInteger)", "public org.sonar.api.internal.google.common.primitives.UnsignedInteger times(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.dividedBy(org.sonar.api.internal.google.common.primitives.UnsignedInteger)", "public org.sonar.api.internal.google.common.primitives.UnsignedInteger dividedBy(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.mod(org.sonar.api.internal.google.common.primitives.UnsignedInteger)", "public org.sonar.api.internal.google.common.primitives.UnsignedInteger mod(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.doubleValue()", "public double doubleValue()"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.bigIntegerValue()", "public java.math.BigInteger bigIntegerValue()"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.compareTo(org.sonar.api.internal.google.common.primitives.UnsignedInteger)", "public int compareTo(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.toString(int)", "public java.lang.String toString(int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(int[], int[])", "public int compare(int[], int[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.compare(int, int)", "public static int compare(int, int)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedInts.toLong(int)", "public static long toLong(int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.min(int...)", "public static int min(int...)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.max(int...)", "public static int max(int...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInts.join(java.lang.String, int...)", "public static java.lang.String join(java.lang.String, int...)"], ["java.util.Comparator<int[]>", "org.sonar.api.internal.google.common.primitives.UnsignedInts.lexicographicalComparator()", "public static java.util.Comparator<int[]> lexicographicalComparator()"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.divide(int, int)", "public static int divide(int, int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.remainder(int, int)", "public static int remainder(int, int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.decode(java.lang.String)", "public static int decode(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String)", "public static int parseUnsignedInt(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String, int)", "public static int parseUnsignedInt(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInts.toString(int)", "public static java.lang.String toString(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInts.toString(int, int)", "public static java.lang.String toString(int, int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.fromLongBits(long)", "public static org.sonar.api.internal.google.common.primitives.UnsignedLong fromLongBits(long)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(long)", "public static org.sonar.api.internal.google.common.primitives.UnsignedLong valueOf(long)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(java.math.BigInteger)", "public static org.sonar.api.internal.google.common.primitives.UnsignedLong valueOf(java.math.BigInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.UnsignedLong valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(java.lang.String, int)", "public static org.sonar.api.internal.google.common.primitives.UnsignedLong valueOf(java.lang.String, int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.plus(org.sonar.api.internal.google.common.primitives.UnsignedLong)", "public org.sonar.api.internal.google.common.primitives.UnsignedLong plus(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.minus(org.sonar.api.internal.google.common.primitives.UnsignedLong)", "public org.sonar.api.internal.google.common.primitives.UnsignedLong minus(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.times(org.sonar.api.internal.google.common.primitives.UnsignedLong)", "public org.sonar.api.internal.google.common.primitives.UnsignedLong times(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.dividedBy(org.sonar.api.internal.google.common.primitives.UnsignedLong)", "public org.sonar.api.internal.google.common.primitives.UnsignedLong dividedBy(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.mod(org.sonar.api.internal.google.common.primitives.UnsignedLong)", "public org.sonar.api.internal.google.common.primitives.UnsignedLong mod(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLong.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.google.common.primitives.UnsignedLong.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.google.common.primitives.UnsignedLong.doubleValue()", "public double doubleValue()"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.primitives.UnsignedLong.bigIntegerValue()", "public java.math.BigInteger bigIntegerValue()"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.compareTo(org.sonar.api.internal.google.common.primitives.UnsignedLong)", "public int compareTo(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.primitives.UnsignedLong.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLong.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLong.toString(int)", "public java.lang.String toString(int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.values()", "public static org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator[] values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(long[], long[])", "public int compare(long[], long[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.compare(long, long)", "public static int compare(long, long)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.min(long...)", "public static long min(long...)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.max(long...)", "public static long max(long...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.join(java.lang.String, long...)", "public static java.lang.String join(java.lang.String, long...)"], ["java.util.Comparator<long[]>", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.lexicographicalComparator()", "public static java.util.Comparator<long[]> lexicographicalComparator()"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.divide(long, long)", "public static long divide(long, long)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.remainder(long, long)", "public static long remainder(long, long)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)", "public static long parseUnsignedLong(java.lang.String)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.decode(java.lang.String)", "public static long decode(java.lang.String)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)", "public static long parseUnsignedLong(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.toString(long)", "public static java.lang.String toString(long)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.toString(long, int)", "public static java.lang.String toString(long, int)"], ["org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler()", "public org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler()"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public final java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["boolean", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.reflect.ClassPath$1.apply(org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo)", "public boolean apply(org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo)"], ["boolean", "org.sonar.api.internal.google.common.reflect.ClassPath$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.getPackageName()", "public java.lang.String getPackageName()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.getSimpleName()", "public java.lang.String getSimpleName()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.getName()", "public java.lang.String getName()"], ["java.lang.Class<?>", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.load()", "public java.lang.Class<?> load()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.toString()", "public java.lang.String toString()"], ["java.net.URL", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.url()", "public final java.net.URL url()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.getResourceName()", "public final java.lang.String getResourceName()"], ["int", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.reflect.ClassPath", "org.sonar.api.internal.google.common.reflect.ClassPath.from(java.lang.ClassLoader)", "public static org.sonar.api.internal.google.common.reflect.ClassPath from(java.lang.ClassLoader) throws java.io.IOException"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo>", "org.sonar.api.internal.google.common.reflect.ClassPath.getResources()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo> getResources()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo>", "org.sonar.api.internal.google.common.reflect.ClassPath.getAllClasses()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo> getAllClasses()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo>", "org.sonar.api.internal.google.common.reflect.ClassPath.getTopLevelClasses()", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo> getTopLevelClasses()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo>", "org.sonar.api.internal.google.common.reflect.ClassPath.getTopLevelClasses(java.lang.String)", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo> getTopLevelClasses(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo>", "org.sonar.api.internal.google.common.reflect.ClassPath.getTopLevelClassesRecursive(java.lang.String)", "public org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo> getTopLevelClassesRecursive(java.lang.String)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<?>", "org.sonar.api.internal.google.common.reflect.Element.getOwnerType()", "public org.sonar.api.internal.google.common.reflect.TypeToken<?> getOwnerType()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public final boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.internal.google.common.reflect.Element.getAnnotation(java.lang.Class<A>)", "public final <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Element.getAnnotations()", "public final java.lang.annotation.Annotation[] getAnnotations()"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Element.getDeclaredAnnotations()", "public final java.lang.annotation.Annotation[] getDeclaredAnnotations()"], ["void", "org.sonar.api.internal.google.common.reflect.Element.setAccessible(boolean)", "public final void setAccessible(boolean) throws java.lang.SecurityException"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isAccessible()", "public final boolean isAccessible()"], ["java.lang.Class<?>", "org.sonar.api.internal.google.common.reflect.Element.getDeclaringClass()", "public java.lang.Class<?> getDeclaringClass()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Element.getName()", "public final java.lang.String getName()"], ["int", "org.sonar.api.internal.google.common.reflect.Element.getModifiers()", "public final int getModifiers()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isSynthetic()", "public final boolean isSynthetic()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isPublic()", "public final boolean isPublic()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isProtected()", "public final boolean isProtected()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isPackagePrivate()", "public final boolean isPackagePrivate()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isPrivate()", "public final boolean isPrivate()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isStatic()", "public final boolean isStatic()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isFinal()", "public final boolean isFinal()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isAbstract()", "public final boolean isAbstract()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isNative()", "public final boolean isNative()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isSynchronized()", "public final boolean isSynchronized()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.Element.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Element.toString()", "public java.lang.String toString()"], ["<T extends B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(java.lang.Class<T>, T)", "public <T extends B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B> put(java.lang.Class<T>, T)"], ["<T extends B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)", "public <T extends B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B> put(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)"], ["org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder.build()", "public org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap<B> build()"], ["<B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.of()", "public static <B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap<B> of()"], ["<B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.builder()", "public static <B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B> builder()"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>)", "public <T extends B> T getInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)", "public <T extends B> T putInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["java.lang.reflect.TypeVariable<?>[]", "org.sonar.api.internal.google.common.reflect.Invokable$ConstructorInvokable.getTypeParameters()", "public final java.lang.reflect.TypeVariable<?>[] getTypeParameters()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$ConstructorInvokable.isOverridable()", "public final boolean isOverridable()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$ConstructorInvokable.isVarArgs()", "public final boolean isVarArgs()"], ["java.lang.reflect.TypeVariable<?>[]", "org.sonar.api.internal.google.common.reflect.Invokable$MethodInvokable.getTypeParameters()", "public final java.lang.reflect.TypeVariable<?>[] getTypeParameters()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$MethodInvokable.isOverridable()", "public final boolean isOverridable()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$MethodInvokable.isVarArgs()", "public final boolean isVarArgs()"], ["org.sonar.api.internal.google.common.reflect.Invokable<?, java.lang.Object>", "org.sonar.api.internal.google.common.reflect.Invokable.from(java.lang.reflect.Method)", "public static org.sonar.api.internal.google.common.reflect.Invokable<?, java.lang.Object> from(java.lang.reflect.Method)"], ["<T> org.sonar.api.internal.google.common.reflect.Invokable<T, T>", "org.sonar.api.internal.google.common.reflect.Invokable.from(java.lang.reflect.Constructor<T>)", "public static <T> org.sonar.api.internal.google.common.reflect.Invokable<T, T> from(java.lang.reflect.Constructor<T>)"], ["R", "org.sonar.api.internal.google.common.reflect.Invokable.invoke(T, java.lang.Object...)", "public final R invoke(T, java.lang.Object...) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException"], ["org.sonar.api.internal.google.common.reflect.TypeToken<? extends R>", "org.sonar.api.internal.google.common.reflect.Invokable.getReturnType()", "public final org.sonar.api.internal.google.common.reflect.TypeToken<? extends R> getReturnType()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.reflect.Parameter>", "org.sonar.api.internal.google.common.reflect.Invokable.getParameters()", "public final org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.reflect.Parameter> getParameters()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.reflect.TypeToken<? extends java.lang.Throwable>>", "org.sonar.api.internal.google.common.reflect.Invokable.getExceptionTypes()", "public final org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.reflect.TypeToken<? extends java.lang.Throwable>> getExceptionTypes()"], ["<R1 extends R> org.sonar.api.internal.google.common.reflect.Invokable<T, R1>", "org.sonar.api.internal.google.common.reflect.Invokable.returning(java.lang.Class<R1>)", "public final <R1 extends R> org.sonar.api.internal.google.common.reflect.Invokable<T, R1> returning(java.lang.Class<R1>)"], ["<R1 extends R> org.sonar.api.internal.google.common.reflect.Invokable<T, R1>", "org.sonar.api.internal.google.common.reflect.Invokable.returning(org.sonar.api.internal.google.common.reflect.TypeToken<R1>)", "public final <R1 extends R> org.sonar.api.internal.google.common.reflect.Invokable<T, R1> returning(org.sonar.api.internal.google.common.reflect.TypeToken<R1>)"], ["java.lang.Class<? super T>", "org.sonar.api.internal.google.common.reflect.Invokable.getDeclaringClass()", "public final java.lang.Class<? super T> getDeclaringClass()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.Invokable.getOwnerType()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T> getOwnerType()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Invokable.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Invokable.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.util.Map$Entry<K, V>)", "public java.util.Map$Entry<K, V> apply(java.util.Map$Entry<K, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry.setValue(V)", "public V setValue(V)"], ["org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap()", "public org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap()"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.getInstance(java.lang.Class<T>)", "public <T extends B> T getInstance(java.lang.Class<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)", "public <T extends B> T putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.getInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>)", "public <T extends B> T getInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.putInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)", "public <T extends B> T putInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)"], ["B", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.put(org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, B)", "public B put(org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, B)"], ["void", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.putAll(java.util.Map<? extends org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, ? extends B>)", "public void putAll(java.util.Map<? extends org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, ? extends B>)"], ["java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, B>>", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.entrySet()", "public java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, B>> entrySet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<?>", "org.sonar.api.internal.google.common.reflect.Parameter.getType()", "public org.sonar.api.internal.google.common.reflect.TypeToken<?> getType()"], ["org.sonar.api.internal.google.common.reflect.Invokable<?, ?>", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaringInvokable()", "public org.sonar.api.internal.google.common.reflect.Invokable<?, ?> getDeclaringInvokable()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Parameter.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.internal.google.common.reflect.Parameter.getAnnotation(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Parameter.getAnnotations()", "public java.lang.annotation.Annotation[] getAnnotations()"], ["<A extends java.lang.annotation.Annotation> A[]", "org.sonar.api.internal.google.common.reflect.Parameter.getAnnotationsByType(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A[] getAnnotationsByType(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaredAnnotations()", "public java.lang.annotation.Annotation[] getDeclaredAnnotations()"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaredAnnotation(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A getDeclaredAnnotation(java.lang.Class<A>)"], ["<A extends java.lang.annotation.Annotation> A[]", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class<A>)", "public <A extends java.lang.annotation.Annotation> A[] getDeclaredAnnotationsByType(java.lang.Class<A>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.Parameter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.Parameter.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Parameter.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Reflection.getPackageName(java.lang.Class<?>)", "public static java.lang.String getPackageName(java.lang.Class<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Reflection.getPackageName(java.lang.String)", "public static java.lang.String getPackageName(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.reflect.Reflection.initialize(java.lang.Class<?>...)", "public static void initialize(java.lang.Class<?>...)"], ["<T> T", "org.sonar.api.internal.google.common.reflect.Reflection.newProxy(java.lang.Class<T>, java.lang.reflect.InvocationHandler)", "public static <T> T newProxy(java.lang.Class<T>, java.lang.reflect.InvocationHandler)"], ["int", "org.sonar.api.internal.google.common.reflect.TypeParameter.hashCode()", "public final int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeParameter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeParameter.toString()", "public java.lang.String toString()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeTable$1.resolveInternal(java.lang.reflect.TypeVariable<?>, org.sonar.api.internal.google.common.reflect.TypeResolver$TypeTable)", "public java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable<?>, org.sonar.api.internal.google.common.reflect.TypeResolver$TypeTable)"], ["int", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeVariableKey.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeVariableKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeVariableKey.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.reflect.TypeResolver", "org.sonar.api.internal.google.common.reflect.TypeResolver()", "public org.sonar.api.internal.google.common.reflect.TypeResolver()"], ["org.sonar.api.internal.google.common.reflect.TypeResolver", "org.sonar.api.internal.google.common.reflect.TypeResolver.where(java.lang.reflect.Type, java.lang.reflect.Type)", "public org.sonar.api.internal.google.common.reflect.TypeResolver where(java.lang.reflect.Type, java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.TypeResolver.resolveType(java.lang.reflect.Type)", "public java.lang.reflect.Type resolveType(java.lang.reflect.Type)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken$1.getOwnerType()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T> getOwnerType()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeToken$1.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken$2.getOwnerType()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T> getOwnerType()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeToken$2.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet", "org.sonar.api.internal.google.common.reflect.TypeToken$ClassSet.classes()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet classes()"], ["java.util.Set<java.lang.Class<? super T>>", "org.sonar.api.internal.google.common.reflect.TypeToken$ClassSet.rawTypes()", "public java.util.Set<java.lang.Class<? super T>> rawTypes()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet", "org.sonar.api.internal.google.common.reflect.TypeToken$ClassSet.interfaces()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet interfaces()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Class<?>)", "public boolean apply(java.lang.Class<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet.interfaces()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet interfaces()"], ["java.util.Set<java.lang.Class<? super T>>", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet.rawTypes()", "public java.util.Set<java.lang.Class<? super T>> rawTypes()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet.classes()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet classes()"], ["int", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeCollector$4.compare(K, K)", "public int compare(K, K)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$1.apply(org.sonar.api.internal.google.common.reflect.TypeToken<?>)", "public boolean apply(org.sonar.api.internal.google.common.reflect.TypeToken<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$1.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$2.apply(org.sonar.api.internal.google.common.reflect.TypeToken<?>)", "public boolean apply(org.sonar.api.internal.google.common.reflect.TypeToken<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$2.apply(java.lang.Object)", "public boolean apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter[]", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter.values()", "public static org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter[] values()"], ["org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeSet.interfaces()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet interfaces()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeSet.classes()", "public org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet classes()"], ["java.util.Set<java.lang.Class<? super T>>", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeSet.rawTypes()", "public java.util.Set<java.lang.Class<? super T>> rawTypes()"], ["<T> org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.of(java.lang.Class<T>)", "public static <T> org.sonar.api.internal.google.common.reflect.TypeToken<T> of(java.lang.Class<T>)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<?>", "org.sonar.api.internal.google.common.reflect.TypeToken.of(java.lang.reflect.Type)", "public static org.sonar.api.internal.google.common.reflect.TypeToken<?> of(java.lang.reflect.Type)"], ["java.lang.Class<? super T>", "org.sonar.api.internal.google.common.reflect.TypeToken.getRawType()", "public final java.lang.Class<? super T> getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.TypeToken.getType()", "public final java.lang.reflect.Type getType()"], ["<X> org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.where(org.sonar.api.internal.google.common.reflect.TypeParameter<X>, org.sonar.api.internal.google.common.reflect.TypeToken<X>)", "public final <X> org.sonar.api.internal.google.common.reflect.TypeToken<T> where(org.sonar.api.internal.google.common.reflect.TypeParameter<X>, org.sonar.api.internal.google.common.reflect.TypeToken<X>)"], ["<X> org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.where(org.sonar.api.internal.google.common.reflect.TypeParameter<X>, java.lang.Class<X>)", "public final <X> org.sonar.api.internal.google.common.reflect.TypeToken<T> where(org.sonar.api.internal.google.common.reflect.TypeParameter<X>, java.lang.Class<X>)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<?>", "org.sonar.api.internal.google.common.reflect.TypeToken.resolveType(java.lang.reflect.Type)", "public final org.sonar.api.internal.google.common.reflect.TypeToken<?> resolveType(java.lang.reflect.Type)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet", "org.sonar.api.internal.google.common.reflect.TypeToken.getTypes()", "public final org.sonar.api.internal.google.common.reflect.TypeToken<T>.TypeSet getTypes()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<? super T>", "org.sonar.api.internal.google.common.reflect.TypeToken.getSupertype(java.lang.Class<? super T>)", "public final org.sonar.api.internal.google.common.reflect.TypeToken<? super T> getSupertype(java.lang.Class<? super T>)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<? extends T>", "org.sonar.api.internal.google.common.reflect.TypeToken.getSubtype(java.lang.Class<?>)", "public final org.sonar.api.internal.google.common.reflect.TypeToken<? extends T> getSubtype(java.lang.Class<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isAssignableFrom(org.sonar.api.internal.google.common.reflect.TypeToken<?>)", "public final boolean isAssignableFrom(org.sonar.api.internal.google.common.reflect.TypeToken<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type)", "public final boolean isAssignableFrom(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isArray()", "public final boolean isArray()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isPrimitive()", "public final boolean isPrimitive()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.wrap()", "public final org.sonar.api.internal.google.common.reflect.TypeToken<T> wrap()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.unwrap()", "public final org.sonar.api.internal.google.common.reflect.TypeToken<T> unwrap()"], ["org.sonar.api.internal.google.common.reflect.TypeToken<?>", "org.sonar.api.internal.google.common.reflect.TypeToken.getComponentType()", "public final org.sonar.api.internal.google.common.reflect.TypeToken<?> getComponentType()"], ["org.sonar.api.internal.google.common.reflect.Invokable<T, java.lang.Object>", "org.sonar.api.internal.google.common.reflect.TypeToken.method(java.lang.reflect.Method)", "public final org.sonar.api.internal.google.common.reflect.Invokable<T, java.lang.Object> method(java.lang.reflect.Method)"], ["org.sonar.api.internal.google.common.reflect.Invokable<T, T>", "org.sonar.api.internal.google.common.reflect.TypeToken.constructor(java.lang.reflect.Constructor<?>)", "public final org.sonar.api.internal.google.common.reflect.Invokable<T, T> constructor(java.lang.reflect.Constructor<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.TypeToken.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeToken.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.reflect.TypeVisitor.visit(java.lang.reflect.Type...)", "public final void visit(java.lang.reflect.Type...)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$1.apply(java.lang.reflect.Type)", "public java.lang.String apply(java.lang.reflect.Type)"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.Types$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.Types$ClassOwnership[]", "org.sonar.api.internal.google.common.reflect.Types$ClassOwnership.values()", "public static org.sonar.api.internal.google.common.reflect.Types$ClassOwnership[] values()"], ["org.sonar.api.internal.google.common.reflect.Types$ClassOwnership", "org.sonar.api.internal.google.common.reflect.Types$ClassOwnership.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.reflect.Types$ClassOwnership valueOf(java.lang.String)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.getGenericComponentType()", "public java.lang.reflect.Type getGenericComponentType()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.Types$JavaVersion[]", "org.sonar.api.internal.google.common.reflect.Types$JavaVersion.values()", "public static org.sonar.api.internal.google.common.reflect.Types$JavaVersion[] values()"], ["org.sonar.api.internal.google.common.reflect.Types$JavaVersion", "org.sonar.api.internal.google.common.reflect.Types$JavaVersion.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.reflect.Types$JavaVersion valueOf(java.lang.String)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.getActualTypeArguments()", "public java.lang.reflect.Type[] getActualTypeArguments()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.getRawType()", "public java.lang.reflect.Type getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.getOwnerType()", "public java.lang.reflect.Type getOwnerType()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.getBounds()", "public java.lang.reflect.Type[] getBounds()"], ["D", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.getGenericDeclaration()", "public D getGenericDeclaration()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.getLowerBounds()", "public java.lang.reflect.Type[] getLowerBounds()"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.getUpperBounds()", "public java.lang.reflect.Type[] getUpperBounds()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.hashCode()", "public int hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.toString()", "public java.lang.String toString()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractCheckedFuture.checkedGet()", "public V checkedGet() throws X"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit) throws java/util/concurrent/TimeoutException, X"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()", "public java.lang.String get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()", "public java.lang.Object get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$1$2.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$2.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.isRunning()", "public final boolean isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.state()", "public final org.sonar.api.internal.google.common.util.concurrent.Service$State state()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.failureCause()", "public final java.lang.Throwable failureCause()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.startAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.stopAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning()", "public final void awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.get(long, java.util.concurrent.TimeUnit)", "public V get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.get()", "public V get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.isDone()", "public boolean isDone()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$1.get()", "public java.lang.String get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$1.get()", "public java.lang.Object get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$2$1.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$2$2.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$3.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.isRunning()", "public final boolean isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.state()", "public final org.sonar.api.internal.google.common.util.concurrent.Service$State state()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.failureCause()", "public final java.lang.Throwable failureCause()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.startAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.stopAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitRunning()", "public final void awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService()", "public org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService()"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<?> submit(java.lang.Runnable)"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, T)", "public <T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T> submit(java.lang.Runnable, T)"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable<T>)", "public <T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T> submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable)", "public java.util.concurrent.Future submit(java.util.concurrent.Callable)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)", "public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable)", "public java.util.concurrent.Future submit(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$1.run()", "public void run()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$2.get()", "public java.lang.String get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$2.get()", "public java.lang.Object get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$3.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$4.run()", "public void run()"], ["java.lang.Thread", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$2.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$3.terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)", "public void terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$3.failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)", "public void failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.lang.Void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()", "public java.lang.Void call() throws java.lang.Exception"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.reschedule()", "public void reschedule()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.cancel(boolean)", "public boolean cancel(boolean)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule(long, java.util.concurrent.TimeUnit)", "public org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler()", "public org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler()"], ["java.util.concurrent.Future<?>", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler$1.schedule(org.sonar.api.internal.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)", "public java.util.concurrent.Future<?> schedule(org.sonar.api.internal.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)"], ["java.util.concurrent.Future<?>", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler$2.schedule(org.sonar.api.internal.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)", "public java.util.concurrent.Future<?> schedule(org.sonar.api.internal.google.common.util.concurrent.AbstractService, java.util.concurrent.ScheduledExecutorService, java.lang.Runnable)"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)", "public static org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)", "public static org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.toString()", "public java.lang.String toString()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.isRunning()", "public final boolean isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.state()", "public final org.sonar.api.internal.google.common.util.concurrent.Service$State state()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.failureCause()", "public final java.lang.Throwable failureCause()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.startAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.stopAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitRunning()", "public final void awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$5.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$6.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$7.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$8.isSatisfied()", "public boolean isSatisfied()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.startAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.stopAsync()", "public final org.sonar.api.internal.google.common.util.concurrent.Service stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitRunning()", "public final void awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitRunning(long, java.util.concurrent.TimeUnit)", "public final void awaitRunning(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitTerminated()", "public final void awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitTerminated(long, java.util.concurrent.TimeUnit)", "public final void awaitTerminated(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.isRunning()", "public final boolean isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.state()", "public final org.sonar.api.internal.google.common.util.concurrent.Service$State state()"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.failureCause()", "public final java.lang.Throwable failureCause()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)", "public final void addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.toString()", "public java.lang.String toString()"], ["<V> org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.create()", "public static <V> org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture<V> create()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.setFuture(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>)", "public boolean setFuture(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.setValue(V)", "public boolean setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.setException(java.lang.Throwable)", "public boolean setException(java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.isSet()", "public boolean isSet()"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDouble", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble(double)", "public org.sonar.api.internal.google.common.util.concurrent.AtomicDouble(double)"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDouble", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble()", "public org.sonar.api.internal.google.common.util.concurrent.AtomicDouble()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.get()", "public final double get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.set(double)", "public final void set(double)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.lazySet(double)", "public final void lazySet(double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.getAndSet(double)", "public final double getAndSet(double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.compareAndSet(double, double)", "public final boolean compareAndSet(double, double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.weakCompareAndSet(double, double)", "public final boolean weakCompareAndSet(double, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.getAndAdd(double)", "public final double getAndAdd(double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.addAndGet(double)", "public final double addAndGet(double)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.intValue()", "public int intValue()"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.longValue()", "public long longValue()"], ["float", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.floatValue()", "public float floatValue()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.doubleValue()", "public double doubleValue()"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray(int)", "public org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray(int)"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray(double[])", "public org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray(double[])"], ["int", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.length()", "public final int length()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.get(int)", "public final double get(int)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.set(int, double)", "public final void set(int, double)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)", "public final void lazySet(int, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)", "public final double getAndSet(int, double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)", "public final boolean compareAndSet(int, double, double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)", "public final boolean weakCompareAndSet(int, double, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)", "public final double getAndAdd(int, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)", "public double addAndGet(int, double)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.toString()", "public java.lang.String toString()"], ["java.lang.Long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap$1.apply(java.util.concurrent.atomic.AtomicLong)", "public java.lang.Long apply(java.util.concurrent.atomic.AtomicLong)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["<K> org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap<K>", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.create()", "public static <K> org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap<K> create()"], ["<K> org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap<K>", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.create(java.util.Map<? extends K, ? extends java.lang.Long>)", "public static <K> org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap<K> create(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.get(K)", "public long get(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.incrementAndGet(K)", "public long incrementAndGet(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.decrementAndGet(K)", "public long decrementAndGet(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.addAndGet(K, long)", "public long addAndGet(K, long)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.getAndIncrement(K)", "public long getAndIncrement(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.getAndDecrement(K)", "public long getAndDecrement(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.getAndAdd(K, long)", "public long getAndAdd(K, long)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.put(K, long)", "public long put(K, long)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.putAll(java.util.Map<? extends K, ? extends java.lang.Long>)", "public void putAll(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.remove(K)", "public long remove(K)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.removeAllZeros()", "public void removeAllZeros()"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.sum()", "public long sum()"], ["java.util.Map<K, java.lang.Long>", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.asMap()", "public java.util.Map<K, java.lang.Long> asMap()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.size()", "public int size()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.isEmpty()", "public boolean isEmpty()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.clear()", "public void clear()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.toString()", "public java.lang.String toString()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReference()", "public static <V> java.util.concurrent.atomic.AtomicReference<V> newReference()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReference(V)", "public static <V> java.util.concurrent.atomic.AtomicReference<V> newReference(V)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReferenceArray(int)", "public static <E> java.util.concurrent.atomic.AtomicReferenceArray<E> newReferenceArray(int)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReferenceArray(E[])", "public static <E> java.util.concurrent.atomic.AtomicReferenceArray<E> newReferenceArray(E[])"], ["T", "org.sonar.api.internal.google.common.util.concurrent.Callables$1.call()", "public T call()"], ["T", "org.sonar.api.internal.google.common.util.concurrent.Callables$2.call()", "public T call() throws java.lang.Exception"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Callables$3.run()", "public void run()"], ["<T> java.util.concurrent.Callable<T>", "org.sonar.api.internal.google.common.util.concurrent.Callables.returning(T)", "public static <T> java.util.concurrent.Callable<T> returning(T)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.getLockGraphNode()", "public org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.isAcquiredByCurrentThread()", "public boolean isAcquiredByCurrentThread()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lock()", "public void lock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lockInterruptibly()", "public void lockInterruptibly() throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock()", "public boolean tryLock()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.unlock()", "public void unlock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lock()", "public void lock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lockInterruptibly()", "public void lockInterruptibly() throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock()", "public boolean tryLock()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.unlock()", "public void unlock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()", "public java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()", "public java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.getLockGraphNode()", "public org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.isAcquiredByCurrentThread()", "public boolean isAcquiredByCurrentThread()"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()", "public java.util.concurrent.locks.Lock writeLock()"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()", "public java.util.concurrent.locks.Lock readLock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lock()", "public void lock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lockInterruptibly()", "public void lockInterruptibly() throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock()", "public boolean tryLock()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.unlock()", "public void unlock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1.handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)", "public void handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2.handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)", "public void handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3.handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)", "public void handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies[]", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies.values()", "public static org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] values()"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getConflictingStackTrace()", "public org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getMessage()", "public java.lang.String getMessage()"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(E)"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E, boolean)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(E, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(E)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E, boolean)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(E, boolean)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newInstance(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policy)", "public static org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory newInstance(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String, boolean)", "public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String, boolean)", "public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String, boolean)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E>", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newInstanceWithExplicitOrdering(java.lang.Class<E>, org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policy)", "public static <E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E> newInstanceWithExplicitOrdering(java.lang.Class<E>, org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["org.sonar.api.internal.google.common.util.concurrent.ExecutionError", "org.sonar.api.internal.google.common.util.concurrent.ExecutionError(java.lang.String, java.lang.Error)", "public org.sonar.api.internal.google.common.util.concurrent.ExecutionError(java.lang.String, java.lang.Error)"], ["org.sonar.api.internal.google.common.util.concurrent.ExecutionError", "org.sonar.api.internal.google.common.util.concurrent.ExecutionError(java.lang.Error)", "public org.sonar.api.internal.google.common.util.concurrent.ExecutionError(java.lang.Error)"], ["org.sonar.api.internal.google.common.util.concurrent.ExecutionList", "org.sonar.api.internal.google.common.util.concurrent.ExecutionList()", "public org.sonar.api.internal.google.common.util.concurrent.ExecutionList()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)", "public void add(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ExecutionList.execute()", "public void execute()"], ["org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter", "org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter()", "public org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter()"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)", "public <T> T newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean)", "public <T> T callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception"], ["int", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>, int)", "public int drainTo(java.util.Collection<? super E>, int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>)", "public int drainTo(java.util.Collection<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.offer(E, long, java.util.concurrent.TimeUnit)", "public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.poll(long, java.util.concurrent.TimeUnit)", "public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.put(E)", "public void put(E) throws java.lang.InterruptedException"], ["int", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.remainingCapacity()", "public int remainingCapacity()"], ["E", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.take()", "public E take() throws java.lang.InterruptedException"], ["org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture", "org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture()", "public org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet()", "public V checkedGet() throws X"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit) throws java/util/concurrent/TimeoutException, X"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.isShutdown()", "public boolean isShutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.isTerminated()", "public boolean isTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.shutdown()", "public void shutdown()"], ["java.util.List<java.lang.Runnable>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.submit(java.util.concurrent.Callable<T>)", "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future<?>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.submit(java.lang.Runnable)", "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.submit(java.lang.Runnable, T)", "public <T> java.util.concurrent.Future<T> submit(java.lang.Runnable, T)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.isDone()", "public boolean isDone()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.get()", "public V get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.get(long, java.util.concurrent.TimeUnit)", "public V get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable<T>)", "public <T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T> submit(java.util.concurrent.Callable<T>)"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<?> submit(java.lang.Runnable)"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, T)", "public <T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T> submit(java.lang.Runnable, T)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)", "public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable)", "public java.util.concurrent.Future submit(java.lang.Runnable)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable)", "public java.util.concurrent.Future submit(java.util.concurrent.Callable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$1$1.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$1.run()", "public void run()"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures$2.apply(I)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O> apply(I)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.isDone()", "public boolean isDone()"], ["O", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.get()", "public O get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["O", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.get(long, java.util.concurrent.TimeUnit)", "public O get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.lang.Object>", "org.sonar.api.internal.google.common.util.concurrent.Futures$4.apply(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.lang.Object>)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.lang.Object> apply(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.lang.Object>)"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture", "org.sonar.api.internal.google.common.util.concurrent.Futures$4.apply(java.lang.Object)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableFuture apply(java.lang.Object) throws java.lang.Exception"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$5.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$6.run()", "public void run()"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$7.apply(java.lang.reflect.Constructor<?>)", "public java.lang.Boolean apply(java.lang.reflect.Constructor<?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Futures$7.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["java.util.List<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures$8.combine(java.util.List<org.sonar.api.internal.google.common.base.Optional<V>>)", "public java.util.List<V> combine(java.util.List<org.sonar.api.internal.google.common.base.Optional<V>>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Futures$8.combine(java.util.List)", "public java.lang.Object combine(java.util.List)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$ChainingListenableFuture$1.run()", "public void run()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ChainingListenableFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$ChainingListenableFuture.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$CombinedFuture$1.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$CombinedFuture$2.run()", "public void run()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$CombinerFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1$1.onSuccess(V)", "public void onSuccess(V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1$1.onFailure(java.lang.Throwable)", "public void onFailure(java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1.onSuccess(V)", "public void onSuccess(V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1.onFailure(java.lang.Throwable)", "public void onFailure(java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateCancelledFuture.isCancelled()", "public boolean isCancelled()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateCancelledFuture.get()", "public V get()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.get()", "public V get() throws java.util.concurrent.ExecutionException"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.checkedGet()", "public V checkedGet() throws X"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit) throws X"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedFuture.get()", "public V get() throws java.util.concurrent.ExecutionException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.cancel(boolean)", "public boolean cancel(boolean)"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.get(long, java.util.concurrent.TimeUnit)", "public V get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.isDone()", "public boolean isDone()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.get()", "public V get()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.checkedGet()", "public V checkedGet()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)", "public V checkedGet(long, java.util.concurrent.TimeUnit)"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture.get()", "public V get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1.onSuccess(V)", "public void onSuccess(V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1.onFailure(java.lang.Throwable)", "public void onFailure(java.lang.Throwable)"], ["T", "org.sonar.api.internal.google.common.util.concurrent.Futures$WrappedCombiner.call()", "public T call() throws java.lang.Exception"], ["<V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X>", "org.sonar.api.internal.google.common.util.concurrent.Futures.makeChecked(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.base.Function<? super java.lang.Exception, X>)", "public static <V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X> makeChecked(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.base.Function<? super java.lang.Exception, X>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateFuture(V)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> immediateFuture(V)"], ["<V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateCheckedFuture(V)", "public static <V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X> immediateCheckedFuture(V)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateFailedFuture(java.lang.Throwable)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> immediateFailedFuture(java.lang.Throwable)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateCancelledFuture()", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> immediateCancelledFuture()"], ["<V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateFailedCheckedFuture(X)", "public static <V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X> immediateFailedCheckedFuture(X)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.withFallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>, org.sonar.api.internal.google.common.util.concurrent.FutureFallback<? extends V>)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> withFallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>, org.sonar.api.internal.google.common.util.concurrent.FutureFallback<? extends V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.withFallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>, org.sonar.api.internal.google.common.util.concurrent.FutureFallback<? extends V>, java.util.concurrent.Executor)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> withFallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>, org.sonar.api.internal.google.common.util.concurrent.FutureFallback<? extends V>, java.util.concurrent.Executor)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>)", "public static <I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O> transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)", "public static <I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O> transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>)", "public static <I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O> transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)", "public static <I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O> transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> java.util.concurrent.Future<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.lazyTransform(java.util.concurrent.Future<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>)", "public static <I, O> java.util.concurrent.Future<O> lazyTransform(java.util.concurrent.Future<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.dereference(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> dereference(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.allAsList(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>...)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>> allAsList(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.allAsList(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>> allAsList(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.nonCancellationPropagating(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> nonCancellationPropagating(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.successfulAsList(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>...)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>> successfulAsList(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.successfulAsList(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>> successfulAsList(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<T> org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.inCompletionOrder(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends T>>)", "public static <T> org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>> inCompletionOrder(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends T>>)"], ["<V> void", "org.sonar.api.internal.google.common.util.concurrent.Futures.addCallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.util.concurrent.FutureCallback<? super V>)", "public static <V> void addCallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.util.concurrent.FutureCallback<? super V>)"], ["<V> void", "org.sonar.api.internal.google.common.util.concurrent.Futures.addCallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)", "public static <V> void addCallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)"], ["<V, X extends java.lang.Exception> V", "org.sonar.api.internal.google.common.util.concurrent.Futures.get(java.util.concurrent.Future<V>, java.lang.Class<X>)", "public static <V, X extends java.lang.Exception> V get(java.util.concurrent.Future<V>, java.lang.Class<X>) throws X"], ["<V, X extends java.lang.Exception> V", "org.sonar.api.internal.google.common.util.concurrent.Futures.get(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit, java.lang.Class<X>)", "public static <V, X extends java.lang.Exception> V get(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit, java.lang.Class<X>) throws X"], ["<V> V", "org.sonar.api.internal.google.common.util.concurrent.Futures.getUnchecked(java.util.concurrent.Future<V>)", "public static <V> V getUnchecked(java.util.concurrent.Future<V>)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> listenInPoolThread(java.util.concurrent.Future<V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V> listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask<V>", "org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask.create(java.util.concurrent.Callable<V>)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask<V> create(java.util.concurrent.Callable<V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask<V>", "org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask.create(java.lang.Runnable, V)", "public static <V> org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask<V> create(java.lang.Runnable, V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask.addListener(java.lang.Runnable, java.util.concurrent.Executor)", "public void addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ListenerCallQueue.run()", "public void run()"], ["org.sonar.api.internal.google.common.util.concurrent.Monitor", "org.sonar.api.internal.google.common.util.concurrent.Monitor()", "public org.sonar.api.internal.google.common.util.concurrent.Monitor()"], ["org.sonar.api.internal.google.common.util.concurrent.Monitor", "org.sonar.api.internal.google.common.util.concurrent.Monitor(boolean)", "public org.sonar.api.internal.google.common.util.concurrent.Monitor(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enter()", "public void enter()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterInterruptibly()", "public void enterInterruptibly() throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enter(long, java.util.concurrent.TimeUnit)", "public boolean enter(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterInterruptibly(long, java.util.concurrent.TimeUnit)", "public boolean enterInterruptibly(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.tryEnter()", "public boolean tryEnter()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhen(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public void enterWhen(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public void enterWhenUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhen(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterWhen(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterWhenUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public boolean enterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIfInterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public boolean enterIfInterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIfInterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean enterIfInterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.tryEnterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public boolean tryEnterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitFor(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public void waitFor(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitForUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public void waitForUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitFor(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean waitFor(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitForUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)", "public boolean waitForUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.leave()", "public void leave()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.isFair()", "public boolean isFair()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.isOccupied()", "public boolean isOccupied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.isOccupiedByCurrentThread()", "public boolean isOccupiedByCurrentThread()"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Monitor.getOccupiedDepth()", "public int getOccupiedDepth()"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Monitor.getQueueLength()", "public int getQueueLength()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.hasQueuedThreads()", "public boolean hasQueuedThreads()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.hasQueuedThread(java.lang.Thread)", "public boolean hasQueuedThread(java.lang.Thread)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.hasWaiters(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public boolean hasWaiters(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Monitor.getWaitQueueLength(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)", "public int getWaitQueueLength(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$1.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$2.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$Application$1.run()", "public void run()"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor[]", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor.values()", "public static org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor[] values()"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isShutdown()", "public boolean isShutdown()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.shutdown()", "public void shutdown()"], ["java.util.List<java.lang.Runnable>", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()", "public boolean isTerminated()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isShutdown()", "public boolean isShutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isTerminated()", "public boolean isTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.shutdown()", "public void shutdown()"], ["java.util.List<java.lang.Runnable>", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, java.util.concurrent.ScheduledFuture<?>)", "public org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, java.util.concurrent.ScheduledFuture<?>)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.cancel(boolean)", "public boolean cancel(boolean)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.getDelay(java.util.concurrent.TimeUnit)", "public long getDelay(java.util.concurrent.TimeUnit)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.util.concurrent.Delayed)", "public int compareTo(java.util.concurrent.Delayed)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask(java.lang.Runnable)", "public org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask.run()", "public void run()"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)", "public <V> org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)", "public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)", "public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)", "public static void addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)", "public static java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)"], ["java.util.concurrent.ScheduledExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)", "public static java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()", "public static org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()", "public static org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService()"], ["java.util.concurrent.Executor", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.directExecutor()", "public static java.util.concurrent.Executor directExecutor()"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ExecutorService)", "public static org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningScheduledExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ScheduledExecutorService)", "public static org.sonar.api.internal.google.common.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService)"], ["java.util.concurrent.ThreadFactory", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.platformThreadFactory()", "public static java.util.concurrent.ThreadFactory platformThreadFactory()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)", "public static boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.RateLimiter", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.create(double)", "public static org.sonar.api.internal.google.common.util.concurrent.RateLimiter create(double)"], ["org.sonar.api.internal.google.common.util.concurrent.RateLimiter", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.create(double, long, java.util.concurrent.TimeUnit)", "public static org.sonar.api.internal.google.common.util.concurrent.RateLimiter create(double, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.setRate(double)", "public final void setRate(double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.getRate()", "public final double getRate()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.acquire()", "public double acquire()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.acquire(int)", "public double acquire(int)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire(long, java.util.concurrent.TimeUnit)", "public boolean tryAcquire(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire(int)", "public boolean tryAcquire(int)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire()", "public boolean tryAcquire()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire(int, long, java.util.concurrent.TimeUnit)", "public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Runnables$1.run()", "public void run()"], ["java.lang.Runnable", "org.sonar.api.internal.google.common.util.concurrent.Runnables.doNothing()", "public static java.lang.Runnable doNothing()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor$1.toString()", "public java.lang.String toString()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor$TaskRunner.run()", "public void run()"], ["org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor(java.util.concurrent.Executor)", "public org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor(java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["org.sonar.api.internal.google.common.util.concurrent.Service$Listener", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener()", "public org.sonar.api.internal.google.common.util.concurrent.Service$Listener()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.starting()", "public void starting()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.running()", "public void running()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.stopping(org.sonar.api.internal.google.common.util.concurrent.Service$State)", "public void stopping(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)", "public void terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)", "public void failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State[]", "org.sonar.api.internal.google.common.util.concurrent.Service$State.values()", "public static org.sonar.api.internal.google.common.util.concurrent.Service$State[] values()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.Service$State.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.common.util.concurrent.Service$State valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener()", "public org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener.healthy()", "public void healthy()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener.stopped()", "public void stopped()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener.failure(org.sonar.api.internal.google.common.util.concurrent.Service)", "public void failure(org.sonar.api.internal.google.common.util.concurrent.Service)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.starting()", "public void starting()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.running()", "public void running()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.stopping(org.sonar.api.internal.google.common.util.concurrent.Service$State)", "public void stopping(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)", "public void terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)", "public void failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.util.Set<org.sonar.api.internal.google.common.util.concurrent.Service>", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$1.get()", "public java.util.Set<org.sonar.api.internal.google.common.util.concurrent.Service> get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$1.get()", "public java.lang.Object get()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$2.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$3.isSatisfied()", "public boolean isSatisfied()"], ["java.lang.Long", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$4.apply(java.util.Map$Entry<org.sonar.api.internal.google.common.util.concurrent.Service, java.lang.Long>)", "public java.lang.Long apply(java.util.Map$Entry<org.sonar.api.internal.google.common.util.concurrent.Service, java.lang.Long>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.Service>)", "public org.sonar.api.internal.google.common.util.concurrent.ServiceManager(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.Service>)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.addListener(org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor)", "public void addListener(org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.addListener(org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener)", "public void addListener(org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener)"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.startAsync()", "public org.sonar.api.internal.google.common.util.concurrent.ServiceManager startAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitHealthy()", "public void awaitHealthy()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitHealthy(long, java.util.concurrent.TimeUnit)", "public void awaitHealthy(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.stopAsync()", "public org.sonar.api.internal.google.common.util.concurrent.ServiceManager stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitStopped()", "public void awaitStopped()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitStopped(long, java.util.concurrent.TimeUnit)", "public void awaitStopped(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.isHealthy()", "public boolean isHealthy()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap<org.sonar.api.internal.google.common.util.concurrent.Service$State, org.sonar.api.internal.google.common.util.concurrent.Service>", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.servicesByState()", "public org.sonar.api.internal.google.common.collect.ImmutableMultimap<org.sonar.api.internal.google.common.util.concurrent.Service$State, org.sonar.api.internal.google.common.util.concurrent.Service> servicesByState()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<org.sonar.api.internal.google.common.util.concurrent.Service, java.lang.Long>", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.startupTimes()", "public org.sonar.api.internal.google.common.collect.ImmutableMap<org.sonar.api.internal.google.common.util.concurrent.Service, java.lang.Long> startupTimes()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.toString()", "public java.lang.String toString()"], ["<V> org.sonar.api.internal.google.common.util.concurrent.SettableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.SettableFuture.create()", "public static <V> org.sonar.api.internal.google.common.util.concurrent.SettableFuture<V> create()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.SettableFuture.set(V)", "public boolean set(V)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.SettableFuture.setException(java.lang.Throwable)", "public boolean setException(java.lang.Throwable)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter$1$1.call()", "public java.lang.Object call() throws java.lang.Exception"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter(java.util.concurrent.ExecutorService)", "public org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter(java.util.concurrent.ExecutorService)"], ["org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter()", "public org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter()"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)", "public <T> T newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean)", "public <T> T callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean) throws java.lang.Exception"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.Striped$1.get()", "public java.util.concurrent.locks.Lock get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$1.get()", "public java.lang.Object get()"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.Striped$2.get()", "public java.util.concurrent.locks.Lock get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$2.get()", "public java.lang.Object get()"], ["java.util.concurrent.Semaphore", "org.sonar.api.internal.google.common.util.concurrent.Striped$3.get()", "public java.util.concurrent.Semaphore get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$3.get()", "public java.lang.Object get()"], ["java.util.concurrent.Semaphore", "org.sonar.api.internal.google.common.util.concurrent.Striped$4.get()", "public java.util.concurrent.Semaphore get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$4.get()", "public java.lang.Object get()"], ["java.util.concurrent.locks.ReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.Striped$5.get()", "public java.util.concurrent.locks.ReadWriteLock get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$5.get()", "public java.lang.Object get()"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$CompactStriped.getAt(int)", "public L getAt(int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Striped$CompactStriped.size()", "public int size()"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$LargeLazyStriped.getAt(int)", "public L getAt(int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Striped$LargeLazyStriped.size()", "public int size()"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$PowerOfTwoStriped.get(java.lang.Object)", "public final L get(java.lang.Object)"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$SmallLazyStriped.getAt(int)", "public L getAt(int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Striped$SmallLazyStriped.size()", "public int size()"], ["java.lang.Iterable<L>", "org.sonar.api.internal.google.common.util.concurrent.Striped.bulkGet(java.lang.Iterable<?>)", "public java.lang.Iterable<L> bulkGet(java.lang.Iterable<?>)"], ["org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock>", "org.sonar.api.internal.google.common.util.concurrent.Striped.lock(int)", "public static org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock> lock(int)"], ["org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock>", "org.sonar.api.internal.google.common.util.concurrent.Striped.lazyWeakLock(int)", "public static org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock> lazyWeakLock(int)"], ["org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore>", "org.sonar.api.internal.google.common.util.concurrent.Striped.semaphore(int, int)", "public static org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore> semaphore(int, int)"], ["org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore>", "org.sonar.api.internal.google.common.util.concurrent.Striped.lazyWeakSemaphore(int, int)", "public static org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore> lazyWeakSemaphore(int, int)"], ["org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock>", "org.sonar.api.internal.google.common.util.concurrent.Striped.readWriteLock(int)", "public static org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock> readWriteLock(int)"], ["org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock>", "org.sonar.api.internal.google.common.util.concurrent.Striped.lazyWeakReadWriteLock(int)", "public static org.sonar.api.internal.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock> lazyWeakReadWriteLock(int)"], ["java.lang.Thread", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder$1.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder()", "public org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder()"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setNameFormat(java.lang.String)", "public org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setDaemon(boolean)", "public org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setPriority(int)", "public org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)", "public org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setThreadFactory(java.util.concurrent.ThreadFactory)", "public org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)"], ["java.util.concurrent.ThreadFactory", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.build()", "public java.util.concurrent.ThreadFactory build()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter.uncaughtException(java.lang.Thread, java.lang.Throwable)", "public void uncaughtException(java.lang.Thread, java.lang.Throwable)"], ["java.lang.Thread$UncaughtExceptionHandler", "org.sonar.api.internal.google.common.util.concurrent.UncaughtExceptionHandlers.systemExit()", "public static java.lang.Thread$UncaughtExceptionHandler systemExit()"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException(java.lang.Throwable)", "public org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException(java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException()", "public org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException()"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String)", "public org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.Throwable)", "public org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String, java.lang.Throwable)", "public org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String, java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch)", "public static void awaitUninterruptibly(java.util.concurrent.CountDownLatch)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)", "public static boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread)", "public static void joinUninterruptibly(java.lang.Thread)"], ["<V> V", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>)", "public static <V> V getUninterruptibly(java.util.concurrent.Future<V>) throws java.util.concurrent.ExecutionException"], ["<V> V", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit)", "public static <V> V getUninterruptibly(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)", "public static void joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)"], ["<E> E", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly(java.util.concurrent.BlockingQueue<E>)", "public static <E> E takeUninterruptibly(java.util.concurrent.BlockingQueue<E>)"], ["<E> void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.putUninterruptibly(java.util.concurrent.BlockingQueue<E>, E)", "public static <E> void putUninterruptibly(java.util.concurrent.BlockingQueue<E>, E)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(long, java.util.concurrent.TimeUnit)", "public static void sleepUninterruptibly(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)", "public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)", "public static boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService$1.run()", "public void run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable)", "public final void execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.submit(java.util.concurrent.Callable<T>)", "public final <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future<?>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable)", "public final java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable, T)", "public final <T> java.util.concurrent.Future<T> submit(java.lang.Runnable, T)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public final <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public final <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public final <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public final <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.shutdown()", "public final void shutdown()"], ["java.util.List<java.lang.Runnable>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.shutdownNow()", "public final java.util.List<java.lang.Runnable> shutdownNow()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.isShutdown()", "public final boolean isShutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.isTerminated()", "public final boolean isTerminated()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)", "public final boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["java.util.concurrent.ScheduledFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.WrappingScheduledExecutorService.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public final java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.concurrent.ScheduledFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.WrappingScheduledExecutorService.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)", "public final <V> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.WrappingScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public final java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture<?>", "org.sonar.api.internal.google.common.util.concurrent.WrappingScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public final java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.xml.XmlEscapers.xmlContentEscaper()", "public static org.sonar.api.internal.google.common.escape.Escaper xmlContentEscaper()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.xml.XmlEscapers.xmlAttributeEscaper()", "public static org.sonar.api.internal.google.common.escape.Escaper xmlAttributeEscaper()"], ["org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType[]", "org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType.values()", "public static org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType[] values()"], ["org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType", "org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType.valueOf(java.lang.String)", "public static org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.csv.Assertions.notNull(java.lang.Object, java.lang.String)", "public static void notNull(java.lang.Object, java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined[]", "org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined.values()", "public static org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined[] values()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined", "org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined valueOf(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined.getFormat()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat getFormat()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.newFormat(char)", "public static org.sonar.api.internal.apachecommons.csv.CSVFormat newFormat(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.csv.CSVFormat valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.format(java.lang.Object...)", "public java.lang.String format(java.lang.Object...)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getAllowMissingColumnNames()", "public boolean getAllowMissingColumnNames()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getCommentMarker()", "public java.lang.Character getCommentMarker()"], ["char", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getDelimiter()", "public char getDelimiter()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getEscapeCharacter()", "public java.lang.Character getEscapeCharacter()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getHeader()", "public java.lang.String[] getHeader()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getHeaderComments()", "public java.lang.String[] getHeaderComments()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getIgnoreEmptyLines()", "public boolean getIgnoreEmptyLines()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getIgnoreHeaderCase()", "public boolean getIgnoreHeaderCase()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getIgnoreSurroundingSpaces()", "public boolean getIgnoreSurroundingSpaces()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getNullString()", "public java.lang.String getNullString()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getQuoteCharacter()", "public java.lang.Character getQuoteCharacter()"], ["org.sonar.api.internal.apachecommons.csv.QuoteMode", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getQuoteMode()", "public org.sonar.api.internal.apachecommons.csv.QuoteMode getQuoteMode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getRecordSeparator()", "public java.lang.String getRecordSeparator()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getSkipHeaderRecord()", "public boolean getSkipHeaderRecord()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getTrailingDelimiter()", "public boolean getTrailingDelimiter()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getTrim()", "public boolean getTrim()"], ["int", "org.sonar.api.internal.apachecommons.csv.CSVFormat.hashCode()", "public int hashCode()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isCommentMarkerSet()", "public boolean isCommentMarkerSet()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isEscapeCharacterSet()", "public boolean isEscapeCharacterSet()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isNullStringSet()", "public boolean isNullStringSet()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isQuoteCharacterSet()", "public boolean isQuoteCharacterSet()"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVFormat.parse(java.io.Reader)", "public org.sonar.api.internal.apachecommons.csv.CSVParser parse(java.io.Reader) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.csv.CSVPrinter", "org.sonar.api.internal.apachecommons.csv.CSVFormat.print(java.lang.Appendable)", "public org.sonar.api.internal.apachecommons.csv.CSVPrinter print(java.lang.Appendable) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVFormat.print(java.lang.Object, java.lang.Appendable, boolean)", "public void print(java.lang.Object, java.lang.Appendable, boolean) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVFormat.println(java.lang.Appendable)", "public void println(java.lang.Appendable) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVFormat.printRecord(java.lang.Appendable, java.lang.Object...)", "public void printRecord(java.lang.Appendable, java.lang.Object...) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.toString()", "public java.lang.String toString()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withAllowMissingColumnNames()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withAllowMissingColumnNames()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withAllowMissingColumnNames(boolean)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withAllowMissingColumnNames(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withCommentMarker(char)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withCommentMarker(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withCommentMarker(java.lang.Character)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withCommentMarker(java.lang.Character)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withDelimiter(char)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withDelimiter(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withEscape(char)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withEscape(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withEscape(java.lang.Character)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withEscape(java.lang.Character)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withFirstRecordAsHeader()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withFirstRecordAsHeader()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.lang.Class<? extends java.lang.Enum<?>>)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withHeader(java.lang.Class<? extends java.lang.Enum<?>>)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.sql.ResultSet)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withHeader(java.sql.ResultSet) throws java.sql.SQLException"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.sql.ResultSetMetaData)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withHeader(java.sql.ResultSetMetaData) throws java.sql.SQLException"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.lang.String...)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withHeader(java.lang.String...)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeaderComments(java.lang.Object...)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withHeaderComments(java.lang.Object...)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreEmptyLines()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withIgnoreEmptyLines()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreEmptyLines(boolean)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withIgnoreEmptyLines(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreHeaderCase()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withIgnoreHeaderCase()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreHeaderCase(boolean)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withIgnoreHeaderCase(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreSurroundingSpaces()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withIgnoreSurroundingSpaces()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withIgnoreSurroundingSpaces(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withNullString(java.lang.String)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withNullString(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withQuote(char)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withQuote(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withQuote(java.lang.Character)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withQuote(java.lang.Character)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withQuoteMode(org.sonar.api.internal.apachecommons.csv.QuoteMode)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withQuoteMode(org.sonar.api.internal.apachecommons.csv.QuoteMode)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withRecordSeparator(char)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withRecordSeparator(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withRecordSeparator(java.lang.String)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withRecordSeparator(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withSkipHeaderRecord()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withSkipHeaderRecord()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withSkipHeaderRecord(boolean)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withSkipHeaderRecord(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrailingDelimiter()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withTrailingDelimiter()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrailingDelimiter(boolean)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withTrailingDelimiter(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrim()", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withTrim()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrim(boolean)", "public org.sonar.api.internal.apachecommons.csv.CSVFormat withTrim(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.hasNext()", "public boolean hasNext()"], ["org.sonar.api.internal.apachecommons.csv.CSVRecord", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.next()", "public org.sonar.api.internal.apachecommons.csv.CSVRecord next()"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.remove()", "public void remove()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.next()", "public java.lang.Object next()"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser.parse(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.csv.CSVFormat)", "public static org.sonar.api.internal.apachecommons.csv.CSVParser parse(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.csv.CSVFormat) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser.parse(java.lang.String, org.sonar.api.internal.apachecommons.csv.CSVFormat)", "public static org.sonar.api.internal.apachecommons.csv.CSVParser parse(java.lang.String, org.sonar.api.internal.apachecommons.csv.CSVFormat) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser.parse(java.net.URL, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.csv.CSVFormat)", "public static org.sonar.api.internal.apachecommons.csv.CSVParser parse(java.net.URL, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.csv.CSVFormat) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser(java.io.Reader, org.sonar.api.internal.apachecommons.csv.CSVFormat)", "public org.sonar.api.internal.apachecommons.csv.CSVParser(java.io.Reader, org.sonar.api.internal.apachecommons.csv.CSVFormat) throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser(java.io.Reader, org.sonar.api.internal.apachecommons.csv.CSVFormat, long, long)", "public org.sonar.api.internal.apachecommons.csv.CSVParser(java.io.Reader, org.sonar.api.internal.apachecommons.csv.CSVFormat, long, long) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVParser.close()", "public void close() throws java.io.IOException"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVParser.getCurrentLineNumber()", "public long getCurrentLineNumber()"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.sonar.api.internal.apachecommons.csv.CSVParser.getHeaderMap()", "public java.util.Map<java.lang.String, java.lang.Integer> getHeaderMap()"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVParser.getRecordNumber()", "public long getRecordNumber()"], ["java.util.List<org.sonar.api.internal.apachecommons.csv.CSVRecord>", "org.sonar.api.internal.apachecommons.csv.CSVParser.getRecords()", "public java.util.List<org.sonar.api.internal.apachecommons.csv.CSVRecord> getRecords() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVParser.isClosed()", "public boolean isClosed()"], ["java.util.Iterator<org.sonar.api.internal.apachecommons.csv.CSVRecord>", "org.sonar.api.internal.apachecommons.csv.CSVParser.iterator()", "public java.util.Iterator<org.sonar.api.internal.apachecommons.csv.CSVRecord> iterator()"], ["org.sonar.api.internal.apachecommons.csv.CSVPrinter", "org.sonar.api.internal.apachecommons.csv.CSVPrinter(java.lang.Appendable, org.sonar.api.internal.apachecommons.csv.CSVFormat)", "public org.sonar.api.internal.apachecommons.csv.CSVPrinter(java.lang.Appendable, org.sonar.api.internal.apachecommons.csv.CSVFormat) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.flush()", "public void flush() throws java.io.IOException"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.getOut()", "public java.lang.Appendable getOut()"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.print(java.lang.Object)", "public void print(java.lang.Object) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printComment(java.lang.String)", "public void printComment(java.lang.String) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.println()", "public void println() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecord(java.lang.Iterable<?>)", "public void printRecord(java.lang.Iterable<?>) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecord(java.lang.Object...)", "public void printRecord(java.lang.Object...) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecords(java.lang.Iterable<?>)", "public void printRecords(java.lang.Iterable<?>) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecords(java.lang.Object...)", "public void printRecords(java.lang.Object...) throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecords(java.sql.ResultSet)", "public void printRecords(java.sql.ResultSet) throws java.sql.SQLException, java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.get(java.lang.Enum<?>)", "public java.lang.String get(java.lang.Enum<?>)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.get(int)", "public java.lang.String get(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.get(java.lang.String)", "public java.lang.String get(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVRecord.getCharacterPosition()", "public long getCharacterPosition()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.getComment()", "public java.lang.String getComment()"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVRecord.getRecordNumber()", "public long getRecordNumber()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.isConsistent()", "public boolean isConsistent()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.hasComment()", "public boolean hasComment()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.isMapped(java.lang.String)", "public boolean isMapped(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.isSet(java.lang.String)", "public boolean isSet(java.lang.String)"], ["java.util.Iterator<java.lang.String>", "org.sonar.api.internal.apachecommons.csv.CSVRecord.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["int", "org.sonar.api.internal.apachecommons.csv.CSVRecord.size()", "public int size()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.internal.apachecommons.csv.CSVRecord.toMap()", "public java.util.Map<java.lang.String, java.lang.String> toMap()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.toString()", "public java.lang.String toString()"], ["int", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.read()", "public int read() throws java.io.IOException"], ["int", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["boolean", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.isClosed()", "public boolean isClosed()"], ["void", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.close()", "public void close() throws java.io.IOException"], ["void", "org.sonar.api.internal.apachecommons.csv.Lexer.close()", "public void close() throws java.io.IOException"], ["org.sonar.api.internal.apachecommons.csv.QuoteMode[]", "org.sonar.api.internal.apachecommons.csv.QuoteMode.values()", "public static org.sonar.api.internal.apachecommons.csv.QuoteMode[] values()"], ["org.sonar.api.internal.apachecommons.csv.QuoteMode", "org.sonar.api.internal.apachecommons.csv.QuoteMode.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.csv.QuoteMode valueOf(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.Token$Type[]", "org.sonar.api.internal.apachecommons.csv.Token$Type.values()", "public static org.sonar.api.internal.apachecommons.csv.Token$Type[] values()"], ["org.sonar.api.internal.apachecommons.csv.Token$Type", "org.sonar.api.internal.apachecommons.csv.Token$Type.valueOf(java.lang.String)", "public static org.sonar.api.internal.apachecommons.csv.Token$Type valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.Token.toString()", "public java.lang.String toString()"], ["org.sonar.check.Priority[]", "org.sonar.check.Priority.values()", "public static org.sonar.check.Priority[] values()"], ["org.sonar.check.Priority", "org.sonar.check.Priority.valueOf(java.lang.String)", "public static org.sonar.check.Priority valueOf(java.lang.String)"], ["org.sonar.check.Cardinality[]", "org.sonar.check.Cardinality.values()", "public static org.sonar.check.Cardinality[] values()"], ["org.sonar.check.Cardinality", "org.sonar.check.Cardinality.valueOf(java.lang.String)", "public static org.sonar.check.Cardinality valueOf(java.lang.String)"]]}