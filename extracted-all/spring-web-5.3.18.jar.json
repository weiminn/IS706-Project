{
    "spring-web-5.3.18.jar": [
        [
            "org.springframework.web.util.HttpSessionMutexListener",
            "org.springframework.web.util.HttpSessionMutexListener()",
            "public org.springframework.web.util.HttpSessionMutexListener()"
        ],
        [
            "void",
            "org.springframework.web.util.HttpSessionMutexListener.sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "public void sessionCreated(javax.servlet.http.HttpSessionEvent)"
        ],
        [
            "void",
            "org.springframework.web.util.HttpSessionMutexListener.sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "public void sessionDestroyed(javax.servlet.http.HttpSessionEvent)"
        ],
        [
            "org.springframework.web.util.IntrospectorCleanupListener",
            "org.springframework.web.util.IntrospectorCleanupListener()",
            "public org.springframework.web.util.IntrospectorCleanupListener()"
        ],
        [
            "void",
            "org.springframework.web.util.IntrospectorCleanupListener.contextInitialized(javax.servlet.ServletContextEvent)",
            "public void contextInitialized(javax.servlet.ServletContextEvent)"
        ],
        [
            "void",
            "org.springframework.web.util.IntrospectorCleanupListener.contextDestroyed(javax.servlet.ServletContextEvent)",
            "public void contextDestroyed(javax.servlet.ServletContextEvent)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.util.pattern.PathPattern$PathMatchInfo.getUriVariables()",
            "public java.util.Map<java.lang.String, java.lang.String> getUriVariables()"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.util.pattern.PathPattern$PathMatchInfo.getMatrixVariables()",
            "public java.util.Map<java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> getMatrixVariables()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PathPattern$PathMatchInfo.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.util.pattern.PathPattern$MatchingContext",
            "org.springframework.web.util.pattern.PathPattern$MatchingContext(org.springframework.web.util.pattern.PathPattern, org.springframework.http.server.PathContainer, boolean)",
            "public org.springframework.web.util.pattern.PathPattern$MatchingContext(org.springframework.web.util.pattern.PathPattern, org.springframework.http.server.PathContainer, boolean)"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPattern$MatchingContext.setMatchAllowExtraPath()",
            "public void setMatchAllowExtraPath()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPattern$MatchingContext.isMatchOptionalTrailingSeparator()",
            "public boolean isMatchOptionalTrailingSeparator()"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPattern$MatchingContext.set(java.lang.String, java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void set(java.lang.String, java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.util.pattern.PathPattern$PathMatchInfo",
            "org.springframework.web.util.pattern.PathPattern$MatchingContext.getPathMatchResult()",
            "public org.springframework.web.util.pattern.PathPattern$PathMatchInfo getPathMatchResult()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher$PathContainerRoute.value()",
            "public java.lang.String value()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher$PathContainerRoute.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.util.pattern.WildcardPathElement",
            "org.springframework.web.util.pattern.WildcardPathElement(int, char)",
            "public org.springframework.web.util.pattern.WildcardPathElement(int, char)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.WildcardPathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.WildcardPathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.WildcardPathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.WildcardPathElement.getWildcardCount()",
            "public int getWildcardCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.WildcardPathElement.getScore()",
            "public int getScore()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.WildcardPathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPatternParser$1.setMatchOptionalTrailingSeparator(boolean)",
            "public void setMatchOptionalTrailingSeparator(boolean)"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPatternParser$1.setCaseSensitive(boolean)",
            "public void setCaseSensitive(boolean)"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPatternParser$1.setPathOptions(org.springframework.http.server.PathContainer$Options)",
            "public void setPathOptions(org.springframework.http.server.PathContainer$Options)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PathPattern.getPatternString()",
            "public java.lang.String getPatternString()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPattern.hasPatternSyntax()",
            "public boolean hasPatternSyntax()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPattern.matches(org.springframework.http.server.PathContainer)",
            "public boolean matches(org.springframework.http.server.PathContainer)"
        ],
        [
            "org.springframework.web.util.pattern.PathPattern$PathMatchInfo",
            "org.springframework.web.util.pattern.PathPattern.matchAndExtract(org.springframework.http.server.PathContainer)",
            "public org.springframework.web.util.pattern.PathPattern$PathMatchInfo matchAndExtract(org.springframework.http.server.PathContainer)"
        ],
        [
            "org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo",
            "org.springframework.web.util.pattern.PathPattern.matchStartOfPath(org.springframework.http.server.PathContainer)",
            "public org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo matchStartOfPath(org.springframework.http.server.PathContainer)"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.web.util.pattern.PathPattern.extractPathWithinPattern(org.springframework.http.server.PathContainer)",
            "public org.springframework.http.server.PathContainer extractPathWithinPattern(org.springframework.http.server.PathContainer)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.PathPattern.compareTo(org.springframework.web.util.pattern.PathPattern)",
            "public int compareTo(org.springframework.web.util.pattern.PathPattern)"
        ],
        [
            "org.springframework.web.util.pattern.PathPattern",
            "org.springframework.web.util.pattern.PathPattern.combine(org.springframework.web.util.pattern.PathPattern)",
            "public org.springframework.web.util.pattern.PathPattern combine(org.springframework.web.util.pattern.PathPattern)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPattern.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.PathPattern.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PathPattern.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.PathPattern.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PatternParseException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PatternParseException.toDetailedString()",
            "public java.lang.String toDetailedString()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.PatternParseException.getPosition()",
            "public int getPosition()"
        ],
        [
            "org.springframework.web.util.pattern.PatternParseException$PatternMessage",
            "org.springframework.web.util.pattern.PatternParseException.getMessageType()",
            "public org.springframework.web.util.pattern.PatternParseException$PatternMessage getMessageType()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.web.util.pattern.PatternParseException.getInserts()",
            "public java.lang.Object[] getInserts()"
        ],
        [
            "java.util.regex.Pattern",
            "org.springframework.web.util.pattern.RegexPathElement.buildPattern(char[], char[])",
            "public java.util.regex.Pattern buildPattern(char[], char[])"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.pattern.RegexPathElement.getVariableNames()",
            "public java.util.List<java.lang.String> getVariableNames()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.RegexPathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.RegexPathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.RegexPathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.RegexPathElement.getCaptureCount()",
            "public int getCaptureCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.RegexPathElement.getWildcardCount()",
            "public int getWildcardCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.RegexPathElement.getScore()",
            "public int getScore()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.RegexPathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.util.pattern.PathPattern",
            "org.springframework.web.util.pattern.InternalPathPatternParser.parse(java.lang.String)",
            "public org.springframework.web.util.pattern.PathPattern parse(java.lang.String) throws org.springframework.web.util.pattern.PatternParseException"
        ],
        [
            "org.springframework.web.util.pattern.PatternParseException$PatternMessage[]",
            "org.springframework.web.util.pattern.PatternParseException$PatternMessage.values()",
            "public static org.springframework.web.util.pattern.PatternParseException$PatternMessage[] values()"
        ],
        [
            "org.springframework.web.util.pattern.PatternParseException$PatternMessage",
            "org.springframework.web.util.pattern.PatternParseException$PatternMessage.valueOf(java.lang.String)",
            "public static org.springframework.web.util.pattern.PatternParseException$PatternMessage valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PatternParseException$PatternMessage.formatMessage(java.lang.Object...)",
            "public java.lang.String formatMessage(java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.pattern.PathPatternRouteMatcher",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher()",
            "public org.springframework.web.util.pattern.PathPatternRouteMatcher()"
        ],
        [
            "org.springframework.web.util.pattern.PathPatternRouteMatcher",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher(org.springframework.web.util.pattern.PathPatternParser)",
            "public org.springframework.web.util.pattern.PathPatternRouteMatcher(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "org.springframework.util.RouteMatcher$Route",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher.parseRoute(java.lang.String)",
            "public org.springframework.util.RouteMatcher$Route parseRoute(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher.isPattern(java.lang.String)",
            "public boolean isPattern(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher.combine(java.lang.String, java.lang.String)",
            "public java.lang.String combine(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher.match(java.lang.String, org.springframework.util.RouteMatcher$Route)",
            "public boolean match(java.lang.String, org.springframework.util.RouteMatcher$Route)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher.matchAndExtract(java.lang.String, org.springframework.util.RouteMatcher$Route)",
            "public java.util.Map<java.lang.String, java.lang.String> matchAndExtract(java.lang.String, org.springframework.util.RouteMatcher$Route)"
        ],
        [
            "java.util.Comparator<java.lang.String>",
            "org.springframework.web.util.pattern.PathPatternRouteMatcher.getPatternComparator(org.springframework.util.RouteMatcher$Route)",
            "public java.util.Comparator<java.lang.String> getPatternComparator(org.springframework.util.RouteMatcher$Route)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.PathElement.getCaptureCount()",
            "public int getCaptureCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.PathElement.getWildcardCount()",
            "public int getWildcardCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.PathElement.getScore()",
            "public int getScore()"
        ],
        [
            "org.springframework.web.util.pattern.LiteralPathElement",
            "org.springframework.web.util.pattern.LiteralPathElement(int, char[], boolean, char)",
            "public org.springframework.web.util.pattern.LiteralPathElement(int, char[], boolean, char)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.LiteralPathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.LiteralPathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.LiteralPathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.LiteralPathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo.getPathMatched()",
            "public org.springframework.http.server.PathContainer getPathMatched()"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo.getPathRemaining()",
            "public org.springframework.http.server.PathContainer getPathRemaining()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo.getUriVariables()",
            "public java.util.Map<java.lang.String, java.lang.String> getUriVariables()"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.util.pattern.PathPattern$PathRemainingMatchInfo.getMatrixVariables()",
            "public java.util.Map<java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> getMatrixVariables()"
        ],
        [
            "org.springframework.web.util.pattern.PathPatternParser",
            "org.springframework.web.util.pattern.PathPatternParser()",
            "public org.springframework.web.util.pattern.PathPatternParser()"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPatternParser.setMatchOptionalTrailingSeparator(boolean)",
            "public void setMatchOptionalTrailingSeparator(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPatternParser.isMatchOptionalTrailingSeparator()",
            "public boolean isMatchOptionalTrailingSeparator()"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPatternParser.setCaseSensitive(boolean)",
            "public void setCaseSensitive(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.PathPatternParser.isCaseSensitive()",
            "public boolean isCaseSensitive()"
        ],
        [
            "void",
            "org.springframework.web.util.pattern.PathPatternParser.setPathOptions(org.springframework.http.server.PathContainer$Options)",
            "public void setPathOptions(org.springframework.http.server.PathContainer$Options)"
        ],
        [
            "org.springframework.http.server.PathContainer$Options",
            "org.springframework.web.util.pattern.PathPatternParser.getPathOptions()",
            "public org.springframework.http.server.PathContainer$Options getPathOptions()"
        ],
        [
            "org.springframework.web.util.pattern.PathPattern",
            "org.springframework.web.util.pattern.PathPatternParser.parse(java.lang.String)",
            "public org.springframework.web.util.pattern.PathPattern parse(java.lang.String) throws org.springframework.web.util.pattern.PatternParseException"
        ],
        [
            "org.springframework.web.util.pattern.SingleCharWildcardedPathElement",
            "org.springframework.web.util.pattern.SingleCharWildcardedPathElement(int, char[], int, boolean, char)",
            "public org.springframework.web.util.pattern.SingleCharWildcardedPathElement(int, char[], int, boolean, char)"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.SingleCharWildcardedPathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.SingleCharWildcardedPathElement.getWildcardCount()",
            "public int getWildcardCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.SingleCharWildcardedPathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.SingleCharWildcardedPathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.SingleCharWildcardedPathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.CaptureTheRestPathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.CaptureTheRestPathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.CaptureTheRestPathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.CaptureTheRestPathElement.getWildcardCount()",
            "public int getWildcardCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.CaptureTheRestPathElement.getCaptureCount()",
            "public int getCaptureCount()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.CaptureTheRestPathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.getVariableName()",
            "public java.lang.String getVariableName()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.getWildcardCount()",
            "public int getWildcardCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.getCaptureCount()",
            "public int getCaptureCount()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.getScore()",
            "public int getScore()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.CaptureVariablePathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.WildcardTheRestPathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.WildcardTheRestPathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.WildcardTheRestPathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.WildcardTheRestPathElement.getWildcardCount()",
            "public int getWildcardCount()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.WildcardTheRestPathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.web.util.pattern.SeparatorPathElement.matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)",
            "public boolean matches(int, org.springframework.web.util.pattern.PathPattern$MatchingContext)"
        ],
        [
            "int",
            "org.springframework.web.util.pattern.SeparatorPathElement.getNormalizedLength()",
            "public int getNormalizedLength()"
        ],
        [
            "char[]",
            "org.springframework.web.util.pattern.SeparatorPathElement.getChars()",
            "public char[] getChars()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.pattern.SeparatorPathElement.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$UriTemplateEncoder",
            "org.springframework.web.util.HierarchicalUriComponents$UriTemplateEncoder(java.nio.charset.Charset)",
            "public org.springframework.web.util.HierarchicalUriComponents$UriTemplateEncoder(java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents$UriTemplateEncoder.apply(java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type)",
            "public java.lang.String apply(java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.HierarchicalUriComponents$UriTemplateEncoder.apply(java.lang.Object, java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponsePrintWriter",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponsePrintWriter(org.springframework.web.util.ContentCachingResponseWrapper, java.lang.String)",
            "public org.springframework.web.util.ContentCachingResponseWrapper$ResponsePrintWriter(org.springframework.web.util.ContentCachingResponseWrapper, java.lang.String) throws java.io.UnsupportedEncodingException"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponsePrintWriter.write(char[], int, int)",
            "public void write(char[], int, int)"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponsePrintWriter.write(java.lang.String, int, int)",
            "public void write(java.lang.String, int, int)"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponsePrintWriter.write(int)",
            "public void write(int)"
        ],
        [
            "void",
            "org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.append(java.lang.String)",
            "public void append(java.lang.String)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.build()",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent build()"
        ],
        [
            "void",
            "org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.removeTrailingSlash()",
            "public void removeTrailingSlash()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder",
            "org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder()",
            "public org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder cloneBuilder()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$PathComponentBuilder",
            "org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder()",
            "public org.springframework.web.util.UriComponentsBuilder$PathComponentBuilder cloneBuilder()"
        ],
        [
            "org.springframework.web.util.WebUtils",
            "org.springframework.web.util.WebUtils()",
            "public org.springframework.web.util.WebUtils()"
        ],
        [
            "void",
            "org.springframework.web.util.WebUtils.setWebAppRootSystemProperty(javax.servlet.ServletContext)",
            "public static void setWebAppRootSystemProperty(javax.servlet.ServletContext) throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.web.util.WebUtils.removeWebAppRootSystemProperty(javax.servlet.ServletContext)",
            "public static void removeWebAppRootSystemProperty(javax.servlet.ServletContext)"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.web.util.WebUtils.getDefaultHtmlEscape(javax.servlet.ServletContext)",
            "public static java.lang.Boolean getDefaultHtmlEscape(javax.servlet.ServletContext)"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.web.util.WebUtils.getResponseEncodedHtmlEscape(javax.servlet.ServletContext)",
            "public static java.lang.Boolean getResponseEncodedHtmlEscape(javax.servlet.ServletContext)"
        ],
        [
            "java.io.File",
            "org.springframework.web.util.WebUtils.getTempDir(javax.servlet.ServletContext)",
            "public static java.io.File getTempDir(javax.servlet.ServletContext)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.WebUtils.getRealPath(javax.servlet.ServletContext, java.lang.String)",
            "public static java.lang.String getRealPath(javax.servlet.ServletContext, java.lang.String) throws java.io.FileNotFoundException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.WebUtils.getSessionId(javax.servlet.http.HttpServletRequest)",
            "public static java.lang.String getSessionId(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.WebUtils.getSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public static java.lang.Object getSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.WebUtils.getRequiredSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public static java.lang.Object getRequiredSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String) throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.web.util.WebUtils.setSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.Object)",
            "public static void setSessionAttribute(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.WebUtils.getSessionMutex(javax.servlet.http.HttpSession)",
            "public static java.lang.Object getSessionMutex(javax.servlet.http.HttpSession)"
        ],
        [
            "<T> T",
            "org.springframework.web.util.WebUtils.getNativeRequest(javax.servlet.ServletRequest, java.lang.Class<T>)",
            "public static <T> T getNativeRequest(javax.servlet.ServletRequest, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.web.util.WebUtils.getNativeResponse(javax.servlet.ServletResponse, java.lang.Class<T>)",
            "public static <T> T getNativeResponse(javax.servlet.ServletResponse, java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.springframework.web.util.WebUtils.isIncludeRequest(javax.servlet.ServletRequest)",
            "public static boolean isIncludeRequest(javax.servlet.ServletRequest)"
        ],
        [
            "void",
            "org.springframework.web.util.WebUtils.exposeErrorRequestAttributes(javax.servlet.http.HttpServletRequest, java.lang.Throwable, java.lang.String)",
            "public static void exposeErrorRequestAttributes(javax.servlet.http.HttpServletRequest, java.lang.Throwable, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.util.WebUtils.clearErrorRequestAttributes(javax.servlet.http.HttpServletRequest)",
            "public static void clearErrorRequestAttributes(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "javax.servlet.http.Cookie",
            "org.springframework.web.util.WebUtils.getCookie(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public static javax.servlet.http.Cookie getCookie(javax.servlet.http.HttpServletRequest, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.WebUtils.hasSubmitParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static boolean hasSubmitParameter(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.WebUtils.findParameterValue(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.String findParameterValue(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.WebUtils.findParameterValue(java.util.Map<java.lang.String, ?>, java.lang.String)",
            "public static java.lang.String findParameterValue(java.util.Map<java.lang.String, ?>, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.util.WebUtils.getParametersStartingWith(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.util.Map<java.lang.String, java.lang.Object> getParametersStartingWith(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.util.WebUtils.parseMatrixVariables(java.lang.String)",
            "public static org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> parseMatrixVariables(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.WebUtils.isValidOrigin(org.springframework.http.HttpRequest, java.util.Collection<java.lang.String>)",
            "public static boolean isValidOrigin(org.springframework.http.HttpRequest, java.util.Collection<java.lang.String>)"
        ],
        [
            "boolean",
            "org.springframework.web.util.WebUtils.isSameOrigin(org.springframework.http.HttpRequest)",
            "public static boolean isSameOrigin(org.springframework.http.HttpRequest)"
        ],
        [
            "org.springframework.web.util.HtmlUtils",
            "org.springframework.web.util.HtmlUtils()",
            "public org.springframework.web.util.HtmlUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlUtils.htmlEscape(java.lang.String)",
            "public static java.lang.String htmlEscape(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlUtils.htmlEscape(java.lang.String, java.lang.String)",
            "public static java.lang.String htmlEscape(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlUtils.htmlEscapeDecimal(java.lang.String)",
            "public static java.lang.String htmlEscapeDecimal(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlUtils.htmlEscapeDecimal(java.lang.String, java.lang.String)",
            "public static java.lang.String htmlEscapeDecimal(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlUtils.htmlEscapeHex(java.lang.String)",
            "public static java.lang.String htmlEscapeHex(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlUtils.htmlEscapeHex(java.lang.String, java.lang.String)",
            "public static java.lang.String htmlEscapeHex(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlUtils.htmlUnescape(java.lang.String)",
            "public static java.lang.String htmlUnescape(java.lang.String)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent(java.util.List<java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.getPathSegments()",
            "public java.util.List<java.lang.String> getPathSegments()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.verify()",
            "public void verify()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)",
            "public void copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.web.util.TagUtils",
            "org.springframework.web.util.TagUtils()",
            "public org.springframework.web.util.TagUtils()"
        ],
        [
            "int",
            "org.springframework.web.util.TagUtils.getScope(java.lang.String)",
            "public static int getScope(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.TagUtils.hasAncestorOfType(javax.servlet.jsp.tagext.Tag, java.lang.Class<?>)",
            "public static boolean hasAncestorOfType(javax.servlet.jsp.tagext.Tag, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.web.util.TagUtils.assertHasAncestorOfType(javax.servlet.jsp.tagext.Tag, java.lang.Class<?>, java.lang.String, java.lang.String)",
            "public static void assertHasAncestorOfType(javax.servlet.jsp.tagext.Tag, java.lang.Class<?>, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.util.HtmlCharacterEntityDecoder",
            "org.springframework.web.util.HtmlCharacterEntityDecoder(org.springframework.web.util.HtmlCharacterEntityReferences, java.lang.String)",
            "public org.springframework.web.util.HtmlCharacterEntityDecoder(org.springframework.web.util.HtmlCharacterEntityReferences, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlCharacterEntityDecoder.decode()",
            "public java.lang.String decode()"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$2.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory",
            "org.springframework.web.util.DefaultUriBuilderFactory()",
            "public org.springframework.web.util.DefaultUriBuilderFactory()"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory",
            "org.springframework.web.util.DefaultUriBuilderFactory(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory",
            "org.springframework.web.util.DefaultUriBuilderFactory(org.springframework.web.util.UriComponentsBuilder)",
            "public org.springframework.web.util.DefaultUriBuilderFactory(org.springframework.web.util.UriComponentsBuilder)"
        ],
        [
            "void",
            "org.springframework.web.util.DefaultUriBuilderFactory.setEncodingMode(org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode)",
            "public void setEncodingMode(org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode",
            "org.springframework.web.util.DefaultUriBuilderFactory.getEncodingMode()",
            "public org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode getEncodingMode()"
        ],
        [
            "void",
            "org.springframework.web.util.DefaultUriBuilderFactory.setDefaultUriVariables(java.util.Map<java.lang.String, ?>)",
            "public void setDefaultUriVariables(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.web.util.DefaultUriBuilderFactory.getDefaultUriVariables()",
            "public java.util.Map<java.lang.String, ?> getDefaultUriVariables()"
        ],
        [
            "void",
            "org.springframework.web.util.DefaultUriBuilderFactory.setParsePath(boolean)",
            "public void setParsePath(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.DefaultUriBuilderFactory.shouldParsePath()",
            "public boolean shouldParsePath()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.DefaultUriBuilderFactory.expand(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public java.net.URI expand(java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.DefaultUriBuilderFactory.expand(java.lang.String, java.lang.Object...)",
            "public java.net.URI expand(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory.uriString(java.lang.String)",
            "public org.springframework.web.util.UriBuilder uriString(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory.builder()",
            "public org.springframework.web.util.UriBuilder builder()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$QueryUriTemplateVariables",
            "org.springframework.web.util.HierarchicalUriComponents$QueryUriTemplateVariables(org.springframework.web.util.UriComponents$UriTemplateVariables)",
            "public org.springframework.web.util.HierarchicalUriComponents$QueryUriTemplateVariables(org.springframework.web.util.UriComponents$UriTemplateVariables)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.HierarchicalUriComponents$QueryUriTemplateVariables.getValue(java.lang.String)",
            "public java.lang.Object getValue(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponents$VarArgsTemplateVariables",
            "org.springframework.web.util.UriComponents$VarArgsTemplateVariables(java.lang.Object...)",
            "public org.springframework.web.util.UriComponents$VarArgsTemplateVariables(java.lang.Object...)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.UriComponents$VarArgsTemplateVariables.getValue(java.lang.String)",
            "public java.lang.Object getValue(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.OpaqueUriComponents.getSchemeSpecificPart()",
            "public java.lang.String getSchemeSpecificPart()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.OpaqueUriComponents.getUserInfo()",
            "public java.lang.String getUserInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.OpaqueUriComponents.getHost()",
            "public java.lang.String getHost()"
        ],
        [
            "int",
            "org.springframework.web.util.OpaqueUriComponents.getPort()",
            "public int getPort()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.OpaqueUriComponents.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.OpaqueUriComponents.getPathSegments()",
            "public java.util.List<java.lang.String> getPathSegments()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.OpaqueUriComponents.getQuery()",
            "public java.lang.String getQuery()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.util.OpaqueUriComponents.getQueryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> getQueryParams()"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.OpaqueUriComponents.encode(java.nio.charset.Charset)",
            "public org.springframework.web.util.UriComponents encode(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.OpaqueUriComponents.normalize()",
            "public org.springframework.web.util.UriComponents normalize()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.OpaqueUriComponents.toUriString()",
            "public java.lang.String toUriString()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.OpaqueUriComponents.toUri()",
            "public java.net.URI toUri()"
        ],
        [
            "boolean",
            "org.springframework.web.util.OpaqueUriComponents.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.util.OpaqueUriComponents.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.web.util.ServletRequestPathUtils",
            "org.springframework.web.util.ServletRequestPathUtils()",
            "public org.springframework.web.util.ServletRequestPathUtils()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.util.ServletRequestPathUtils.parseAndCache(javax.servlet.http.HttpServletRequest)",
            "public static org.springframework.http.server.RequestPath parseAndCache(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.util.ServletRequestPathUtils.getParsedRequestPath(javax.servlet.ServletRequest)",
            "public static org.springframework.http.server.RequestPath getParsedRequestPath(javax.servlet.ServletRequest)"
        ],
        [
            "void",
            "org.springframework.web.util.ServletRequestPathUtils.setParsedRequestPath(org.springframework.http.server.RequestPath, javax.servlet.ServletRequest)",
            "public static void setParsedRequestPath(org.springframework.http.server.RequestPath, javax.servlet.ServletRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.util.ServletRequestPathUtils.hasParsedRequestPath(javax.servlet.ServletRequest)",
            "public static boolean hasParsedRequestPath(javax.servlet.ServletRequest)"
        ],
        [
            "void",
            "org.springframework.web.util.ServletRequestPathUtils.clearParsedRequestPath(javax.servlet.ServletRequest)",
            "public static void clearParsedRequestPath(javax.servlet.ServletRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.ServletRequestPathUtils.getCachedPath(javax.servlet.ServletRequest)",
            "public static java.lang.Object getCachedPath(javax.servlet.ServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ServletRequestPathUtils.getCachedPathValue(javax.servlet.ServletRequest)",
            "public static java.lang.String getCachedPathValue(javax.servlet.ServletRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.util.ServletRequestPathUtils.hasCachedPath(javax.servlet.ServletRequest)",
            "public static boolean hasCachedPath(javax.servlet.ServletRequest)"
        ],
        [
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponseServletOutputStream",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponseServletOutputStream(org.springframework.web.util.ContentCachingResponseWrapper, javax.servlet.ServletOutputStream)",
            "public org.springframework.web.util.ContentCachingResponseWrapper$ResponseServletOutputStream(org.springframework.web.util.ContentCachingResponseWrapper, javax.servlet.ServletOutputStream)"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponseServletOutputStream.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponseServletOutputStream.write(byte[], int, int)",
            "public void write(byte[], int, int) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponseServletOutputStream.isReady()",
            "public boolean isReady()"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper$ResponseServletOutputStream.setWriteListener(javax.servlet.WriteListener)",
            "public void setWriteListener(javax.servlet.WriteListener)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$EncodeState[]",
            "org.springframework.web.util.HierarchicalUriComponents$EncodeState.values()",
            "public static org.springframework.web.util.HierarchicalUriComponents$EncodeState[] values()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$EncodeState",
            "org.springframework.web.util.HierarchicalUriComponents$EncodeState.valueOf(java.lang.String)",
            "public static org.springframework.web.util.HierarchicalUriComponents$EncodeState valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$EncodeState.isEncoded()",
            "public boolean isEncoded()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.newInstance()",
            "public static org.springframework.web.util.UriComponentsBuilder newInstance()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fromPath(java.lang.String)",
            "public static org.springframework.web.util.UriComponentsBuilder fromPath(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fromUri(java.net.URI)",
            "public static org.springframework.web.util.UriComponentsBuilder fromUri(java.net.URI)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fromUriString(java.lang.String)",
            "public static org.springframework.web.util.UriComponentsBuilder fromUriString(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fromHttpUrl(java.lang.String)",
            "public static org.springframework.web.util.UriComponentsBuilder fromHttpUrl(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fromHttpRequest(org.springframework.http.HttpRequest)",
            "public static org.springframework.web.util.UriComponentsBuilder fromHttpRequest(org.springframework.http.HttpRequest)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.web.util.UriComponentsBuilder.parseForwardedFor(org.springframework.http.HttpRequest, java.net.InetSocketAddress)",
            "public static java.net.InetSocketAddress parseForwardedFor(org.springframework.http.HttpRequest, java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fromOriginHeader(java.lang.String)",
            "public static org.springframework.web.util.UriComponentsBuilder fromOriginHeader(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.encode()",
            "public final org.springframework.web.util.UriComponentsBuilder encode()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.encode(java.nio.charset.Charset)",
            "public org.springframework.web.util.UriComponentsBuilder encode(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponentsBuilder.build()",
            "public org.springframework.web.util.UriComponents build()"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponentsBuilder.build(boolean)",
            "public org.springframework.web.util.UriComponents build(boolean)"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponentsBuilder.buildAndExpand(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.util.UriComponents buildAndExpand(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponentsBuilder.buildAndExpand(java.lang.Object...)",
            "public org.springframework.web.util.UriComponents buildAndExpand(java.lang.Object...)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.UriComponentsBuilder.build(java.lang.Object...)",
            "public java.net.URI build(java.lang.Object...)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.UriComponentsBuilder.build(java.util.Map<java.lang.String, ?>)",
            "public java.net.URI build(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriComponentsBuilder.toUriString()",
            "public java.lang.String toUriString()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.uri(java.net.URI)",
            "public org.springframework.web.util.UriComponentsBuilder uri(java.net.URI)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.uriComponents(org.springframework.web.util.UriComponents)",
            "public org.springframework.web.util.UriComponentsBuilder uriComponents(org.springframework.web.util.UriComponents)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.scheme(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder scheme(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.schemeSpecificPart(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder schemeSpecificPart(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.userInfo(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder userInfo(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.host(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder host(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.port(int)",
            "public org.springframework.web.util.UriComponentsBuilder port(int)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.port(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder port(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.path(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder path(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.pathSegment(java.lang.String...)",
            "public org.springframework.web.util.UriComponentsBuilder pathSegment(java.lang.String...) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replacePath(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder replacePath(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.query(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder query(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQuery(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder replaceQuery(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParam(java.lang.String, java.lang.Object...)",
            "public org.springframework.web.util.UriComponentsBuilder queryParam(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParam(java.lang.String, java.util.Collection<?>)",
            "public org.springframework.web.util.UriComponentsBuilder queryParam(java.lang.String, java.util.Collection<?>)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParamIfPresent(java.lang.String, java.util.Optional<?>)",
            "public org.springframework.web.util.UriComponentsBuilder queryParamIfPresent(java.lang.String, java.util.Optional<?>)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.web.util.UriComponentsBuilder queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQueryParam(java.lang.String, java.lang.Object...)",
            "public org.springframework.web.util.UriComponentsBuilder replaceQueryParam(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQueryParam(java.lang.String, java.util.Collection<?>)",
            "public org.springframework.web.util.UriComponentsBuilder replaceQueryParam(java.lang.String, java.util.Collection<?>)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQueryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.web.util.UriComponentsBuilder replaceQueryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fragment(java.lang.String)",
            "public org.springframework.web.util.UriComponentsBuilder fragment(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.uriVariables(java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.web.util.UriComponentsBuilder uriVariables(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.UriComponentsBuilder.clone()",
            "public java.lang.Object clone()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder",
            "org.springframework.web.util.UriComponentsBuilder.cloneBuilder()",
            "public org.springframework.web.util.UriComponentsBuilder cloneBuilder()"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.fragment(java.lang.String)",
            "public org.springframework.web.util.UriBuilder fragment(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQueryParams(org.springframework.util.MultiValueMap)",
            "public org.springframework.web.util.UriBuilder replaceQueryParams(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQueryParam(java.lang.String, java.util.Collection)",
            "public org.springframework.web.util.UriBuilder replaceQueryParam(java.lang.String, java.util.Collection)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQueryParam(java.lang.String, java.lang.Object[])",
            "public org.springframework.web.util.UriBuilder replaceQueryParam(java.lang.String, java.lang.Object[])"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParams(org.springframework.util.MultiValueMap)",
            "public org.springframework.web.util.UriBuilder queryParams(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParamIfPresent(java.lang.String, java.util.Optional)",
            "public org.springframework.web.util.UriBuilder queryParamIfPresent(java.lang.String, java.util.Optional)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParam(java.lang.String, java.util.Collection)",
            "public org.springframework.web.util.UriBuilder queryParam(java.lang.String, java.util.Collection)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.queryParam(java.lang.String, java.lang.Object[])",
            "public org.springframework.web.util.UriBuilder queryParam(java.lang.String, java.lang.Object[])"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replaceQuery(java.lang.String)",
            "public org.springframework.web.util.UriBuilder replaceQuery(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.query(java.lang.String)",
            "public org.springframework.web.util.UriBuilder query(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.pathSegment(java.lang.String[])",
            "public org.springframework.web.util.UriBuilder pathSegment(java.lang.String[]) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.replacePath(java.lang.String)",
            "public org.springframework.web.util.UriBuilder replacePath(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.path(java.lang.String)",
            "public org.springframework.web.util.UriBuilder path(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.port(java.lang.String)",
            "public org.springframework.web.util.UriBuilder port(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.port(int)",
            "public org.springframework.web.util.UriBuilder port(int)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.host(java.lang.String)",
            "public org.springframework.web.util.UriBuilder host(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.userInfo(java.lang.String)",
            "public org.springframework.web.util.UriBuilder userInfo(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.UriComponentsBuilder.scheme(java.lang.String)",
            "public org.springframework.web.util.UriBuilder scheme(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.JavaScriptUtils",
            "org.springframework.web.util.JavaScriptUtils()",
            "public org.springframework.web.util.JavaScriptUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.JavaScriptUtils.javaScriptEscape(java.lang.String)",
            "public static java.lang.String javaScriptEscape(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriUtils",
            "org.springframework.web.util.UriUtils()",
            "public org.springframework.web.util.UriUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeScheme(java.lang.String, java.lang.String)",
            "public static java.lang.String encodeScheme(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeScheme(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeScheme(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeAuthority(java.lang.String, java.lang.String)",
            "public static java.lang.String encodeAuthority(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeAuthority(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeAuthority(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeUserInfo(java.lang.String, java.lang.String)",
            "public static java.lang.String encodeUserInfo(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeUserInfo(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeUserInfo(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeHost(java.lang.String, java.lang.String)",
            "public static java.lang.String encodeHost(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeHost(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeHost(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodePort(java.lang.String, java.lang.String)",
            "public static java.lang.String encodePort(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodePort(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodePort(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodePath(java.lang.String, java.lang.String)",
            "public static java.lang.String encodePath(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodePath(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodePath(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodePathSegment(java.lang.String, java.lang.String)",
            "public static java.lang.String encodePathSegment(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodePathSegment(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodePathSegment(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeQuery(java.lang.String, java.lang.String)",
            "public static java.lang.String encodeQuery(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeQuery(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeQuery(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeQueryParam(java.lang.String, java.lang.String)",
            "public static java.lang.String encodeQueryParam(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeQueryParam(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeQueryParam(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.util.UriUtils.encodeQueryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public static org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> encodeQueryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeFragment(java.lang.String, java.lang.String)",
            "public static java.lang.String encodeFragment(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encodeFragment(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeFragment(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encode(java.lang.String, java.lang.String)",
            "public static java.lang.String encode(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.encode(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encode(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.util.UriUtils.encodeUriVariables(java.util.Map<java.lang.String, ?>)",
            "public static java.util.Map<java.lang.String, java.lang.String> encodeUriVariables(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.web.util.UriUtils.encodeUriVariables(java.lang.Object...)",
            "public static java.lang.Object[] encodeUriVariables(java.lang.Object...)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.decode(java.lang.String, java.lang.String)",
            "public static java.lang.String decode(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.decode(java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String decode(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriUtils.extractFileExtension(java.lang.String)",
            "public static java.lang.String extractFileExtension(java.lang.String)"
        ],
        [
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream(org.springframework.web.util.ContentCachingRequestWrapper, javax.servlet.ServletInputStream)",
            "public org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream(org.springframework.web.util.ContentCachingRequestWrapper, javax.servlet.ServletInputStream)"
        ],
        [
            "int",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream.read()",
            "public int read() throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream.read(byte[])",
            "public int read(byte[]) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream.read(byte[], int, int)",
            "public int read(byte[], int, int) throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream.readLine(byte[], int, int)",
            "public int readLine(byte[], int, int) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream.isFinished()",
            "public boolean isFinished()"
        ],
        [
            "boolean",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream.isReady()",
            "public boolean isReady()"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingRequestWrapper$ContentCachingInputStream.setReadListener(javax.servlet.ReadListener)",
            "public void setReadListener(javax.servlet.ReadListener)"
        ],
        [
            "org.springframework.web.util.UriComponents$MapTemplateVariables",
            "org.springframework.web.util.UriComponents$MapTemplateVariables(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.util.UriComponents$MapTemplateVariables(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.util.UriComponents$MapTemplateVariables.getValue(java.lang.String)",
            "public java.lang.Object getValue(java.lang.String)"
        ],
        [
            "org.springframework.web.util.ContentCachingResponseWrapper",
            "org.springframework.web.util.ContentCachingResponseWrapper(javax.servlet.http.HttpServletResponse)",
            "public org.springframework.web.util.ContentCachingResponseWrapper(javax.servlet.http.HttpServletResponse)"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.sendError(int)",
            "public void sendError(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.sendError(int, java.lang.String)",
            "public void sendError(int, java.lang.String) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.sendRedirect(java.lang.String)",
            "public void sendRedirect(java.lang.String) throws java.io.IOException"
        ],
        [
            "javax.servlet.ServletOutputStream",
            "org.springframework.web.util.ContentCachingResponseWrapper.getOutputStream()",
            "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"
        ],
        [
            "java.io.PrintWriter",
            "org.springframework.web.util.ContentCachingResponseWrapper.getWriter()",
            "public java.io.PrintWriter getWriter() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.flushBuffer()",
            "public void flushBuffer() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.setContentLength(int)",
            "public void setContentLength(int)"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.setContentLengthLong(long)",
            "public void setContentLengthLong(long)"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.setBufferSize(int)",
            "public void setBufferSize(int)"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.resetBuffer()",
            "public void resetBuffer()"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.reset()",
            "public void reset()"
        ],
        [
            "int",
            "org.springframework.web.util.ContentCachingResponseWrapper.getStatusCode()",
            "public int getStatusCode()"
        ],
        [
            "byte[]",
            "org.springframework.web.util.ContentCachingResponseWrapper.getContentAsByteArray()",
            "public byte[] getContentAsByteArray()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.util.ContentCachingResponseWrapper.getContentInputStream()",
            "public java.io.InputStream getContentInputStream()"
        ],
        [
            "int",
            "org.springframework.web.util.ContentCachingResponseWrapper.getContentSize()",
            "public int getContentSize()"
        ],
        [
            "void",
            "org.springframework.web.util.ContentCachingResponseWrapper.copyBodyToResponse()",
            "public void copyBodyToResponse() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$12.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$3.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent(java.lang.String)",
            "public org.springframework.web.util.HierarchicalUriComponents$FullPathComponent(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPathSegments()",
            "public java.util.List<java.lang.String> getPathSegments()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.verify()",
            "public void verify()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)",
            "public void copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.web.util.UrlPathHelper$Servlet4Delegate.skipServletPathDetermination(javax.servlet.http.HttpServletRequest)",
            "public static boolean skipServletPathDetermination(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.util.NestedServletException",
            "org.springframework.web.util.NestedServletException(java.lang.String)",
            "public org.springframework.web.util.NestedServletException(java.lang.String)"
        ],
        [
            "org.springframework.web.util.NestedServletException",
            "org.springframework.web.util.NestedServletException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.util.NestedServletException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.NestedServletException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$EncodingHint[]",
            "org.springframework.web.util.UriComponentsBuilder$EncodingHint.values()",
            "public static org.springframework.web.util.UriComponentsBuilder$EncodingHint[] values()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$EncodingHint",
            "org.springframework.web.util.UriComponentsBuilder$EncodingHint.valueOf(java.lang.String)",
            "public static org.springframework.web.util.UriComponentsBuilder$EncodingHint valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriTemplate",
            "org.springframework.web.util.UriTemplate(java.lang.String)",
            "public org.springframework.web.util.UriTemplate(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.UriTemplate.getVariableNames()",
            "public java.util.List<java.lang.String> getVariableNames()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.UriTemplate.expand(java.util.Map<java.lang.String, ?>)",
            "public java.net.URI expand(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.UriTemplate.expand(java.lang.Object...)",
            "public java.net.URI expand(java.lang.Object...)"
        ],
        [
            "boolean",
            "org.springframework.web.util.UriTemplate.matches(java.lang.String)",
            "public boolean matches(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.util.UriTemplate.match(java.lang.String)",
            "public java.util.Map<java.lang.String, java.lang.String> match(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriTemplate.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriComponents.getScheme()",
            "public final java.lang.String getScheme()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriComponents.getFragment()",
            "public final java.lang.String getFragment()"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponents.encode()",
            "public final org.springframework.web.util.UriComponents encode()"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponents.expand(java.util.Map<java.lang.String, ?>)",
            "public final org.springframework.web.util.UriComponents expand(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponents.expand(java.lang.Object...)",
            "public final org.springframework.web.util.UriComponents expand(java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.UriComponents.expand(org.springframework.web.util.UriComponents$UriTemplateVariables)",
            "public final org.springframework.web.util.UriComponents expand(org.springframework.web.util.UriComponents$UriTemplateVariables)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UriComponents.toString()",
            "public final java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$5.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.UrlPathHelper",
            "org.springframework.web.util.UrlPathHelper()",
            "public org.springframework.web.util.UrlPathHelper()"
        ],
        [
            "void",
            "org.springframework.web.util.UrlPathHelper.setAlwaysUseFullPath(boolean)",
            "public void setAlwaysUseFullPath(boolean)"
        ],
        [
            "void",
            "org.springframework.web.util.UrlPathHelper.setUrlDecode(boolean)",
            "public void setUrlDecode(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.UrlPathHelper.isUrlDecode()",
            "public boolean isUrlDecode()"
        ],
        [
            "void",
            "org.springframework.web.util.UrlPathHelper.setRemoveSemicolonContent(boolean)",
            "public void setRemoveSemicolonContent(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.UrlPathHelper.shouldRemoveSemicolonContent()",
            "public boolean shouldRemoveSemicolonContent()"
        ],
        [
            "void",
            "org.springframework.web.util.UrlPathHelper.setDefaultEncoding(java.lang.String)",
            "public void setDefaultEncoding(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.resolveAndCacheLookupPath(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String resolveAndCacheLookupPath(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getResolvedLookupPath(javax.servlet.ServletRequest)",
            "public static java.lang.String getResolvedLookupPath(javax.servlet.ServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getLookupPathForRequest(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getLookupPathForRequest(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getLookupPathForRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getPathWithinServletMapping(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getPathWithinServletMapping(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getPathWithinApplication(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getPathWithinApplication(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getRequestUri(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getRequestUri(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getContextPath(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getContextPath(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getServletPath(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getServletPath(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getOriginatingRequestUri(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getOriginatingRequestUri(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getOriginatingContextPath(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getOriginatingContextPath(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getOriginatingServletPath(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getOriginatingServletPath(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.getOriginatingQueryString(javax.servlet.http.HttpServletRequest)",
            "public java.lang.String getOriginatingQueryString(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.decodeRequestString(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper.removeSemicolonContent(java.lang.String)",
            "public java.lang.String removeSemicolonContent(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.util.UrlPathHelper.decodePathVariables(javax.servlet.http.HttpServletRequest, java.util.Map<java.lang.String, java.lang.String>)",
            "public java.util.Map<java.lang.String, java.lang.String> decodePathVariables(javax.servlet.http.HttpServletRequest, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.util.UrlPathHelper.decodeMatrixVariables(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> decodeMatrixVariables(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite",
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite(java.util.List<org.springframework.web.util.HierarchicalUriComponents$PathComponent>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite(java.util.List<org.springframework.web.util.HierarchicalUriComponents$PathComponent>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite.getPathSegments()",
            "public java.util.List<java.lang.String> getPathSegments()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite.encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite.verify()",
            "public void verify()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite.expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$PathComponentComposite.copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)",
            "public void copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)"
        ],
        [
            "org.springframework.web.util.DefaultUriTemplateHandler",
            "org.springframework.web.util.DefaultUriTemplateHandler()",
            "public org.springframework.web.util.DefaultUriTemplateHandler()"
        ],
        [
            "void",
            "org.springframework.web.util.DefaultUriTemplateHandler.setParsePath(boolean)",
            "public void setParsePath(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.DefaultUriTemplateHandler.shouldParsePath()",
            "public boolean shouldParsePath()"
        ],
        [
            "void",
            "org.springframework.web.util.DefaultUriTemplateHandler.setStrictEncoding(boolean)",
            "public void setStrictEncoding(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.DefaultUriTemplateHandler.isStrictEncoding()",
            "public boolean isStrictEncoding()"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$10.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.HtmlCharacterEntityReferences",
            "org.springframework.web.util.HtmlCharacterEntityReferences()",
            "public org.springframework.web.util.HtmlCharacterEntityReferences()"
        ],
        [
            "int",
            "org.springframework.web.util.HtmlCharacterEntityReferences.getSupportedReferenceCount()",
            "public int getSupportedReferenceCount()"
        ],
        [
            "boolean",
            "org.springframework.web.util.HtmlCharacterEntityReferences.isMappedToReference(char)",
            "public boolean isMappedToReference(char)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HtmlCharacterEntityReferences.isMappedToReference(char, java.lang.String)",
            "public boolean isMappedToReference(char, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlCharacterEntityReferences.convertToReference(char)",
            "public java.lang.String convertToReference(char)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HtmlCharacterEntityReferences.convertToReference(char, java.lang.String)",
            "public java.lang.String convertToReference(char, java.lang.String)"
        ],
        [
            "char",
            "org.springframework.web.util.HtmlCharacterEntityReferences.convertToCharacter(java.lang.String)",
            "public char convertToCharacter(java.lang.String)"
        ],
        [
            "org.springframework.web.util.WebAppRootListener",
            "org.springframework.web.util.WebAppRootListener()",
            "public org.springframework.web.util.WebAppRootListener()"
        ],
        [
            "void",
            "org.springframework.web.util.WebAppRootListener.contextInitialized(javax.servlet.ServletContextEvent)",
            "public void contextInitialized(javax.servlet.ServletContextEvent)"
        ],
        [
            "void",
            "org.springframework.web.util.WebAppRootListener.contextDestroyed(javax.servlet.ServletContextEvent)",
            "public void contextDestroyed(javax.servlet.ServletContextEvent)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.UriTemplate$TemplateInfo.getVariableNames()",
            "public java.util.List<java.lang.String> getVariableNames()"
        ],
        [
            "java.util.regex.Pattern",
            "org.springframework.web.util.UriTemplate$TemplateInfo.getMatchPattern()",
            "public java.util.regex.Pattern getMatchPattern()"
        ],
        [
            "org.springframework.web.util.UriTemplate$TemplateInfo",
            "org.springframework.web.util.UriTemplate$TemplateInfo.parse(java.lang.String)",
            "public static org.springframework.web.util.UriTemplate$TemplateInfo parse(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents$1.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.HierarchicalUriComponents$1.getPathSegments()",
            "public java.util.List<java.lang.String> getPathSegments()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$1.encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent encode(java.util.function.BiFunction<java.lang.String, org.springframework.web.util.HierarchicalUriComponents$Type, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$1.verify()",
            "public void verify()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.HierarchicalUriComponents$1.expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent expand(org.springframework.web.util.UriComponents$UriTemplateVariables, java.util.function.UnaryOperator<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.util.HierarchicalUriComponents$1.copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)",
            "public void copyToUriComponentsBuilder(org.springframework.web.util.UriComponentsBuilder)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$1.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.util.HierarchicalUriComponents$1.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$6.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$8.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.ContentCachingRequestWrapper",
            "org.springframework.web.util.ContentCachingRequestWrapper(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.util.ContentCachingRequestWrapper(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.util.ContentCachingRequestWrapper",
            "org.springframework.web.util.ContentCachingRequestWrapper(javax.servlet.http.HttpServletRequest, int)",
            "public org.springframework.web.util.ContentCachingRequestWrapper(javax.servlet.http.HttpServletRequest, int)"
        ],
        [
            "javax.servlet.ServletInputStream",
            "org.springframework.web.util.ContentCachingRequestWrapper.getInputStream()",
            "public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ContentCachingRequestWrapper.getCharacterEncoding()",
            "public java.lang.String getCharacterEncoding()"
        ],
        [
            "java.io.BufferedReader",
            "org.springframework.web.util.ContentCachingRequestWrapper.getReader()",
            "public java.io.BufferedReader getReader() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ContentCachingRequestWrapper.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.util.ContentCachingRequestWrapper.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.web.util.ContentCachingRequestWrapper.getParameterNames()",
            "public java.util.Enumeration<java.lang.String> getParameterNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.util.ContentCachingRequestWrapper.getParameterValues(java.lang.String)",
            "public java.lang.String[] getParameterValues(java.lang.String)"
        ],
        [
            "byte[]",
            "org.springframework.web.util.ContentCachingRequestWrapper.getContentAsByteArray()",
            "public byte[] getContentAsByteArray()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.value()",
            "public java.lang.String value()"
        ],
        [
            "java.util.List<org.springframework.http.server.PathContainer$Element>",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.elements()",
            "public java.util.List<org.springframework.http.server.PathContainer$Element> elements()"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.contextPath()",
            "public org.springframework.http.server.PathContainer contextPath()"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.pathWithinApplication()",
            "public org.springframework.http.server.PathContainer pathWithinApplication()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.modifyContextPath(java.lang.String)",
            "public org.springframework.http.server.RequestPath modifyContextPath(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.web.util.ServletRequestPathUtils$ServletRequestPath.parse(javax.servlet.http.HttpServletRequest)",
            "public static org.springframework.http.server.RequestPath parse(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.UrlPathHelper$1.removeSemicolonContent(java.lang.String)",
            "public java.lang.String removeSemicolonContent(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.util.UriComponentsBuilder$PathSegmentComponentBuilder.append(java.lang.String...)",
            "public void append(java.lang.String...)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.UriComponentsBuilder$PathSegmentComponentBuilder.build()",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent build()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$PathSegmentComponentBuilder",
            "org.springframework.web.util.UriComponentsBuilder$PathSegmentComponentBuilder.cloneBuilder()",
            "public org.springframework.web.util.UriComponentsBuilder$PathSegmentComponentBuilder cloneBuilder()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$PathComponentBuilder",
            "org.springframework.web.util.UriComponentsBuilder$PathSegmentComponentBuilder.cloneBuilder()",
            "public org.springframework.web.util.UriComponentsBuilder$PathComponentBuilder cloneBuilder()"
        ],
        [
            "org.springframework.web.util.ServletContextPropertyUtils$ServletContextPlaceholderResolver",
            "org.springframework.web.util.ServletContextPropertyUtils$ServletContextPlaceholderResolver(java.lang.String, javax.servlet.ServletContext)",
            "public org.springframework.web.util.ServletContextPropertyUtils$ServletContextPlaceholderResolver(java.lang.String, javax.servlet.ServletContext)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ServletContextPropertyUtils$ServletContextPlaceholderResolver.resolvePlaceholder(java.lang.String)",
            "public java.lang.String resolvePlaceholder(java.lang.String)"
        ],
        [
            "org.springframework.web.util.CookieGenerator",
            "org.springframework.web.util.CookieGenerator()",
            "public org.springframework.web.util.CookieGenerator()"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.setCookieName(java.lang.String)",
            "public void setCookieName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.CookieGenerator.getCookieName()",
            "public java.lang.String getCookieName()"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.setCookieDomain(java.lang.String)",
            "public void setCookieDomain(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.CookieGenerator.getCookieDomain()",
            "public java.lang.String getCookieDomain()"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.setCookiePath(java.lang.String)",
            "public void setCookiePath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.CookieGenerator.getCookiePath()",
            "public java.lang.String getCookiePath()"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.setCookieMaxAge(java.lang.Integer)",
            "public void setCookieMaxAge(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.web.util.CookieGenerator.getCookieMaxAge()",
            "public java.lang.Integer getCookieMaxAge()"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.setCookieSecure(boolean)",
            "public void setCookieSecure(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.CookieGenerator.isCookieSecure()",
            "public boolean isCookieSecure()"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.setCookieHttpOnly(boolean)",
            "public void setCookieHttpOnly(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.util.CookieGenerator.isCookieHttpOnly()",
            "public boolean isCookieHttpOnly()"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.addCookie(javax.servlet.http.HttpServletResponse, java.lang.String)",
            "public void addCookie(javax.servlet.http.HttpServletResponse, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.util.CookieGenerator.removeCookie(javax.servlet.http.HttpServletResponse)",
            "public void removeCookie(javax.servlet.http.HttpServletResponse)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$9.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ServletRequestPathUtils$Servlet4Delegate.getServletPathPrefix(javax.servlet.http.HttpServletRequest)",
            "public static java.lang.String getServletPathPrefix(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$Type[]",
            "org.springframework.web.util.HierarchicalUriComponents$Type.values()",
            "public static org.springframework.web.util.HierarchicalUriComponents$Type[] values()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$Type",
            "org.springframework.web.util.HierarchicalUriComponents$Type.valueOf(java.lang.String)",
            "public static org.springframework.web.util.HierarchicalUriComponents$Type valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode[]",
            "org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode.values()",
            "public static org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode[] values()"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode",
            "org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode.valueOf(java.lang.String)",
            "public static org.springframework.web.util.DefaultUriBuilderFactory$EncodingMode valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder(org.springframework.web.util.DefaultUriBuilderFactory, java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder(org.springframework.web.util.DefaultUriBuilderFactory, java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.scheme(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder scheme(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.userInfo(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder userInfo(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.host(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder host(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.port(int)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder port(int)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.port(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder port(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.path(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder path(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replacePath(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder replacePath(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.pathSegment(java.lang.String...)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder pathSegment(java.lang.String...)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.query(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder query(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQuery(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder replaceQuery(java.lang.String)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParam(java.lang.String, java.lang.Object...)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder queryParam(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParam(java.lang.String, java.util.Collection<?>)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder queryParam(java.lang.String, java.util.Collection<?>)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParamIfPresent(java.lang.String, java.util.Optional<?>)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder queryParamIfPresent(java.lang.String, java.util.Optional<?>)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder queryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQueryParam(java.lang.String, java.lang.Object...)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder replaceQueryParam(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQueryParam(java.lang.String, java.util.Collection<?>)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder replaceQueryParam(java.lang.String, java.util.Collection<?>)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQueryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder replaceQueryParams(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.fragment(java.lang.String)",
            "public org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder fragment(java.lang.String)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.build(java.util.Map<java.lang.String, ?>)",
            "public java.net.URI build(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.build(java.lang.Object...)",
            "public java.net.URI build(java.lang.Object...)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.fragment(java.lang.String)",
            "public org.springframework.web.util.UriBuilder fragment(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQueryParams(org.springframework.util.MultiValueMap)",
            "public org.springframework.web.util.UriBuilder replaceQueryParams(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQueryParam(java.lang.String, java.util.Collection)",
            "public org.springframework.web.util.UriBuilder replaceQueryParam(java.lang.String, java.util.Collection)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQueryParam(java.lang.String, java.lang.Object[])",
            "public org.springframework.web.util.UriBuilder replaceQueryParam(java.lang.String, java.lang.Object[])"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParams(org.springframework.util.MultiValueMap)",
            "public org.springframework.web.util.UriBuilder queryParams(org.springframework.util.MultiValueMap)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParamIfPresent(java.lang.String, java.util.Optional)",
            "public org.springframework.web.util.UriBuilder queryParamIfPresent(java.lang.String, java.util.Optional)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParam(java.lang.String, java.util.Collection)",
            "public org.springframework.web.util.UriBuilder queryParam(java.lang.String, java.util.Collection)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.queryParam(java.lang.String, java.lang.Object[])",
            "public org.springframework.web.util.UriBuilder queryParam(java.lang.String, java.lang.Object[])"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replaceQuery(java.lang.String)",
            "public org.springframework.web.util.UriBuilder replaceQuery(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.query(java.lang.String)",
            "public org.springframework.web.util.UriBuilder query(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.pathSegment(java.lang.String[])",
            "public org.springframework.web.util.UriBuilder pathSegment(java.lang.String[]) throws java.lang.IllegalArgumentException"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.replacePath(java.lang.String)",
            "public org.springframework.web.util.UriBuilder replacePath(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.path(java.lang.String)",
            "public org.springframework.web.util.UriBuilder path(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.port(java.lang.String)",
            "public org.springframework.web.util.UriBuilder port(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.port(int)",
            "public org.springframework.web.util.UriBuilder port(int)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.host(java.lang.String)",
            "public org.springframework.web.util.UriBuilder host(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.userInfo(java.lang.String)",
            "public org.springframework.web.util.UriBuilder userInfo(java.lang.String)"
        ],
        [
            "org.springframework.web.util.UriBuilder",
            "org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.scheme(java.lang.String)",
            "public org.springframework.web.util.UriBuilder scheme(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents$Type$11.isAllowed(int)",
            "public boolean isAllowed(int)"
        ],
        [
            "org.springframework.web.util.ServletContextPropertyUtils",
            "org.springframework.web.util.ServletContextPropertyUtils()",
            "public org.springframework.web.util.ServletContextPropertyUtils()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ServletContextPropertyUtils.resolvePlaceholders(java.lang.String, javax.servlet.ServletContext)",
            "public static java.lang.String resolvePlaceholders(java.lang.String, javax.servlet.ServletContext)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.ServletContextPropertyUtils.resolvePlaceholders(java.lang.String, javax.servlet.ServletContext, boolean)",
            "public static java.lang.String resolvePlaceholders(java.lang.String, javax.servlet.ServletContext, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents.getSchemeSpecificPart()",
            "public java.lang.String getSchemeSpecificPart()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents.getUserInfo()",
            "public java.lang.String getUserInfo()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents.getHost()",
            "public java.lang.String getHost()"
        ],
        [
            "int",
            "org.springframework.web.util.HierarchicalUriComponents.getPort()",
            "public int getPort()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.util.HierarchicalUriComponents.getPathSegments()",
            "public java.util.List<java.lang.String> getPathSegments()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents.getQuery()",
            "public java.lang.String getQuery()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.web.util.HierarchicalUriComponents.getQueryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> getQueryParams()"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents",
            "org.springframework.web.util.HierarchicalUriComponents.encode(java.nio.charset.Charset)",
            "public org.springframework.web.util.HierarchicalUriComponents encode(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.HierarchicalUriComponents.normalize()",
            "public org.springframework.web.util.UriComponents normalize()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.HierarchicalUriComponents.toUriString()",
            "public java.lang.String toUriString()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.HierarchicalUriComponents.toUri()",
            "public java.net.URI toUri()"
        ],
        [
            "boolean",
            "org.springframework.web.util.HierarchicalUriComponents.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.util.HierarchicalUriComponents.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.web.util.UriComponents",
            "org.springframework.web.util.HierarchicalUriComponents.encode(java.nio.charset.Charset)",
            "public org.springframework.web.util.UriComponents encode(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.util.AbstractUriTemplateHandler",
            "org.springframework.web.util.AbstractUriTemplateHandler()",
            "public org.springframework.web.util.AbstractUriTemplateHandler()"
        ],
        [
            "void",
            "org.springframework.web.util.AbstractUriTemplateHandler.setBaseUrl(java.lang.String)",
            "public void setBaseUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.util.AbstractUriTemplateHandler.getBaseUrl()",
            "public java.lang.String getBaseUrl()"
        ],
        [
            "void",
            "org.springframework.web.util.AbstractUriTemplateHandler.setDefaultUriVariables(java.util.Map<java.lang.String, ?>)",
            "public void setDefaultUriVariables(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.web.util.AbstractUriTemplateHandler.getDefaultUriVariables()",
            "public java.util.Map<java.lang.String, ?> getDefaultUriVariables()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.AbstractUriTemplateHandler.expand(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public java.net.URI expand(java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.net.URI",
            "org.springframework.web.util.AbstractUriTemplateHandler.expand(java.lang.String, java.lang.Object...)",
            "public java.net.URI expand(java.lang.String, java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.addPathSegments(java.lang.String...)",
            "public void addPathSegments(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.addPath(java.lang.String)",
            "public void addPath(java.lang.String)"
        ],
        [
            "org.springframework.web.util.HierarchicalUriComponents$PathComponent",
            "org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.build()",
            "public org.springframework.web.util.HierarchicalUriComponents$PathComponent build()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder",
            "org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.cloneBuilder()",
            "public org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder cloneBuilder()"
        ],
        [
            "org.springframework.web.util.UriComponentsBuilder$PathComponentBuilder",
            "org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.cloneBuilder()",
            "public org.springframework.web.util.UriComponentsBuilder$PathComponentBuilder cloneBuilder()"
        ],
        [
            "org.springframework.web.client.UnknownContentTypeException",
            "org.springframework.web.client.UnknownContentTypeException(java.lang.reflect.Type, org.springframework.http.MediaType, int, java.lang.String, org.springframework.http.HttpHeaders, byte[])",
            "public org.springframework.web.client.UnknownContentTypeException(java.lang.reflect.Type, org.springframework.http.MediaType, int, java.lang.String, org.springframework.http.HttpHeaders, byte[])"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.web.client.UnknownContentTypeException.getTargetType()",
            "public java.lang.reflect.Type getTargetType()"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.client.UnknownContentTypeException.getContentType()",
            "public org.springframework.http.MediaType getContentType()"
        ],
        [
            "int",
            "org.springframework.web.client.UnknownContentTypeException.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.client.UnknownContentTypeException.getStatusText()",
            "public java.lang.String getStatusText()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.UnknownContentTypeException.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "byte[]",
            "org.springframework.web.client.UnknownContentTypeException.getResponseBody()",
            "public byte[] getResponseBody()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.client.UnknownContentTypeException.getResponseBodyAsString()",
            "public java.lang.String getResponseBodyAsString()"
        ],
        [
            "org.springframework.web.client.RestTemplate",
            "org.springframework.web.client.RestTemplate()",
            "public org.springframework.web.client.RestTemplate()"
        ],
        [
            "org.springframework.web.client.RestTemplate",
            "org.springframework.web.client.RestTemplate(org.springframework.http.client.ClientHttpRequestFactory)",
            "public org.springframework.web.client.RestTemplate(org.springframework.http.client.ClientHttpRequestFactory)"
        ],
        [
            "org.springframework.web.client.RestTemplate",
            "org.springframework.web.client.RestTemplate(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public org.springframework.web.client.RestTemplate(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.setMessageConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public void setMessageConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>",
            "org.springframework.web.client.RestTemplate.getMessageConverters()",
            "public java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> getMessageConverters()"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.setErrorHandler(org.springframework.web.client.ResponseErrorHandler)",
            "public void setErrorHandler(org.springframework.web.client.ResponseErrorHandler)"
        ],
        [
            "org.springframework.web.client.ResponseErrorHandler",
            "org.springframework.web.client.RestTemplate.getErrorHandler()",
            "public org.springframework.web.client.ResponseErrorHandler getErrorHandler()"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.setDefaultUriVariables(java.util.Map<java.lang.String, ?>)",
            "public void setDefaultUriVariables(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.setUriTemplateHandler(org.springframework.web.util.UriTemplateHandler)",
            "public void setUriTemplateHandler(org.springframework.web.util.UriTemplateHandler)"
        ],
        [
            "org.springframework.web.util.UriTemplateHandler",
            "org.springframework.web.client.RestTemplate.getUriTemplateHandler()",
            "public org.springframework.web.util.UriTemplateHandler getUriTemplateHandler()"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.getForObject(java.lang.String, java.lang.Class<T>, java.lang.Object...)",
            "public <T> T getForObject(java.lang.String, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.getForObject(java.lang.String, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> T getForObject(java.lang.String, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.getForObject(java.net.URI, java.lang.Class<T>)",
            "public <T> T getForObject(java.net.URI, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.getForEntity(java.lang.String, java.lang.Class<T>, java.lang.Object...)",
            "public <T> org.springframework.http.ResponseEntity<T> getForEntity(java.lang.String, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.getForEntity(java.lang.String, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.http.ResponseEntity<T> getForEntity(java.lang.String, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.getForEntity(java.net.URI, java.lang.Class<T>)",
            "public <T> org.springframework.http.ResponseEntity<T> getForEntity(java.net.URI, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.RestTemplate.headForHeaders(java.lang.String, java.lang.Object...)",
            "public org.springframework.http.HttpHeaders headForHeaders(java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.RestTemplate.headForHeaders(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.http.HttpHeaders headForHeaders(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.RestTemplate.headForHeaders(java.net.URI)",
            "public org.springframework.http.HttpHeaders headForHeaders(java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.net.URI",
            "org.springframework.web.client.RestTemplate.postForLocation(java.lang.String, java.lang.Object, java.lang.Object...)",
            "public java.net.URI postForLocation(java.lang.String, java.lang.Object, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.net.URI",
            "org.springframework.web.client.RestTemplate.postForLocation(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>)",
            "public java.net.URI postForLocation(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.net.URI",
            "org.springframework.web.client.RestTemplate.postForLocation(java.net.URI, java.lang.Object)",
            "public java.net.URI postForLocation(java.net.URI, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.postForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.lang.Object...)",
            "public <T> T postForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.postForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> T postForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.postForObject(java.net.URI, java.lang.Object, java.lang.Class<T>)",
            "public <T> T postForObject(java.net.URI, java.lang.Object, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.postForEntity(java.lang.String, java.lang.Object, java.lang.Class<T>, java.lang.Object...)",
            "public <T> org.springframework.http.ResponseEntity<T> postForEntity(java.lang.String, java.lang.Object, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.postForEntity(java.lang.String, java.lang.Object, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.http.ResponseEntity<T> postForEntity(java.lang.String, java.lang.Object, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.postForEntity(java.net.URI, java.lang.Object, java.lang.Class<T>)",
            "public <T> org.springframework.http.ResponseEntity<T> postForEntity(java.net.URI, java.lang.Object, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.put(java.lang.String, java.lang.Object, java.lang.Object...)",
            "public void put(java.lang.String, java.lang.Object, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.put(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>)",
            "public void put(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.put(java.net.URI, java.lang.Object)",
            "public void put(java.net.URI, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.patchForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.lang.Object...)",
            "public <T> T patchForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.patchForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> T patchForObject(java.lang.String, java.lang.Object, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.patchForObject(java.net.URI, java.lang.Object, java.lang.Class<T>)",
            "public <T> T patchForObject(java.net.URI, java.lang.Object, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.delete(java.lang.String, java.lang.Object...)",
            "public void delete(java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.delete(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public void delete(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate.delete(java.net.URI)",
            "public void delete(java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.util.Set<org.springframework.http.HttpMethod>",
            "org.springframework.web.client.RestTemplate.optionsForAllow(java.lang.String, java.lang.Object...)",
            "public java.util.Set<org.springframework.http.HttpMethod> optionsForAllow(java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.util.Set<org.springframework.http.HttpMethod>",
            "org.springframework.web.client.RestTemplate.optionsForAllow(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public java.util.Set<org.springframework.http.HttpMethod> optionsForAllow(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.util.Set<org.springframework.http.HttpMethod>",
            "org.springframework.web.client.RestTemplate.optionsForAllow(java.net.URI)",
            "public java.util.Set<org.springframework.http.HttpMethod> optionsForAllow(java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.lang.Object...)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.lang.Object...)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(org.springframework.http.RequestEntity<?>, java.lang.Class<T>)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(org.springframework.http.RequestEntity<?>, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate.exchange(org.springframework.http.RequestEntity<?>, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> org.springframework.http.ResponseEntity<T> exchange(org.springframework.http.RequestEntity<?>, org.springframework.core.ParameterizedTypeReference<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.lang.Object...)",
            "public <T> T execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> T execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestTemplate.execute(java.net.URI, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor<T>)",
            "public <T> T execute(java.net.URI, org.springframework.http.HttpMethod, org.springframework.web.client.RequestCallback, org.springframework.web.client.ResponseExtractor<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.web.client.RequestCallback",
            "org.springframework.web.client.RestTemplate.acceptHeaderRequestCallback(java.lang.Class<T>)",
            "public <T> org.springframework.web.client.RequestCallback acceptHeaderRequestCallback(java.lang.Class<T>)"
        ],
        [
            "<T> org.springframework.web.client.RequestCallback",
            "org.springframework.web.client.RestTemplate.httpEntityCallback(java.lang.Object)",
            "public <T> org.springframework.web.client.RequestCallback httpEntityCallback(java.lang.Object)"
        ],
        [
            "<T> org.springframework.web.client.RequestCallback",
            "org.springframework.web.client.RestTemplate.httpEntityCallback(java.lang.Object, java.lang.reflect.Type)",
            "public <T> org.springframework.web.client.RequestCallback httpEntityCallback(java.lang.Object, java.lang.reflect.Type)"
        ],
        [
            "<T> org.springframework.web.client.ResponseExtractor<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.RestTemplate.responseEntityExtractor(java.lang.reflect.Type)",
            "public <T> org.springframework.web.client.ResponseExtractor<org.springframework.http.ResponseEntity<T>> responseEntityExtractor(java.lang.reflect.Type)"
        ],
        [
            "org.springframework.web.client.ResourceAccessException",
            "org.springframework.web.client.ResourceAccessException(java.lang.String)",
            "public org.springframework.web.client.ResourceAccessException(java.lang.String)"
        ],
        [
            "org.springframework.web.client.ResourceAccessException",
            "org.springframework.web.client.ResourceAccessException(java.lang.String, java.io.IOException)",
            "public org.springframework.web.client.ResourceAccessException(java.lang.String, java.io.IOException)"
        ],
        [
            "org.springframework.web.client.HttpServerErrorException",
            "org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus)",
            "public org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.client.HttpServerErrorException",
            "org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus, java.lang.String)",
            "public org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus, java.lang.String)"
        ],
        [
            "org.springframework.web.client.HttpServerErrorException",
            "org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus, java.lang.String, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus, java.lang.String, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpServerErrorException",
            "org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.HttpServerErrorException(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpServerErrorException",
            "org.springframework.web.client.HttpServerErrorException(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.HttpServerErrorException(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpServerErrorException",
            "org.springframework.web.client.HttpServerErrorException.create(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public static org.springframework.web.client.HttpServerErrorException create(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpServerErrorException",
            "org.springframework.web.client.HttpServerErrorException.create(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public static org.springframework.web.client.HttpServerErrorException create(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpClientErrorException",
            "org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus)",
            "public org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.client.HttpClientErrorException",
            "org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus, java.lang.String)",
            "public org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus, java.lang.String)"
        ],
        [
            "org.springframework.web.client.HttpClientErrorException",
            "org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus, java.lang.String, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus, java.lang.String, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpClientErrorException",
            "org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.HttpClientErrorException(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpClientErrorException",
            "org.springframework.web.client.HttpClientErrorException(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.HttpClientErrorException(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpClientErrorException",
            "org.springframework.web.client.HttpClientErrorException.create(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public static org.springframework.web.client.HttpClientErrorException create(org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpClientErrorException",
            "org.springframework.web.client.HttpClientErrorException.create(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public static org.springframework.web.client.HttpClientErrorException create(java.lang.String, org.springframework.http.HttpStatus, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.RestClientResponseException",
            "org.springframework.web.client.RestClientResponseException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.RestClientResponseException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "int",
            "org.springframework.web.client.RestClientResponseException.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.client.RestClientResponseException.getStatusText()",
            "public java.lang.String getStatusText()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.RestClientResponseException.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "byte[]",
            "org.springframework.web.client.RestClientResponseException.getResponseBodyAsByteArray()",
            "public byte[] getResponseBodyAsByteArray()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.client.RestClientResponseException.getResponseBodyAsString()",
            "public java.lang.String getResponseBodyAsString()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.client.RestClientResponseException.getResponseBodyAsString(java.nio.charset.Charset)",
            "public java.lang.String getResponseBodyAsString(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.AsyncRestTemplate",
            "org.springframework.web.client.AsyncRestTemplate()",
            "public org.springframework.web.client.AsyncRestTemplate()"
        ],
        [
            "org.springframework.web.client.AsyncRestTemplate",
            "org.springframework.web.client.AsyncRestTemplate(org.springframework.core.task.AsyncListenableTaskExecutor)",
            "public org.springframework.web.client.AsyncRestTemplate(org.springframework.core.task.AsyncListenableTaskExecutor)"
        ],
        [
            "org.springframework.web.client.AsyncRestTemplate",
            "org.springframework.web.client.AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory)",
            "public org.springframework.web.client.AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory)"
        ],
        [
            "org.springframework.web.client.AsyncRestTemplate",
            "org.springframework.web.client.AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory, org.springframework.http.client.ClientHttpRequestFactory)",
            "public org.springframework.web.client.AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory, org.springframework.http.client.ClientHttpRequestFactory)"
        ],
        [
            "org.springframework.web.client.AsyncRestTemplate",
            "org.springframework.web.client.AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory, org.springframework.web.client.RestTemplate)",
            "public org.springframework.web.client.AsyncRestTemplate(org.springframework.http.client.AsyncClientHttpRequestFactory, org.springframework.web.client.RestTemplate)"
        ],
        [
            "void",
            "org.springframework.web.client.AsyncRestTemplate.setErrorHandler(org.springframework.web.client.ResponseErrorHandler)",
            "public void setErrorHandler(org.springframework.web.client.ResponseErrorHandler)"
        ],
        [
            "org.springframework.web.client.ResponseErrorHandler",
            "org.springframework.web.client.AsyncRestTemplate.getErrorHandler()",
            "public org.springframework.web.client.ResponseErrorHandler getErrorHandler()"
        ],
        [
            "void",
            "org.springframework.web.client.AsyncRestTemplate.setDefaultUriVariables(java.util.Map<java.lang.String, ?>)",
            "public void setDefaultUriVariables(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "void",
            "org.springframework.web.client.AsyncRestTemplate.setUriTemplateHandler(org.springframework.web.util.UriTemplateHandler)",
            "public void setUriTemplateHandler(org.springframework.web.util.UriTemplateHandler)"
        ],
        [
            "org.springframework.web.util.UriTemplateHandler",
            "org.springframework.web.client.AsyncRestTemplate.getUriTemplateHandler()",
            "public org.springframework.web.util.UriTemplateHandler getUriTemplateHandler()"
        ],
        [
            "org.springframework.web.client.RestOperations",
            "org.springframework.web.client.AsyncRestTemplate.getRestOperations()",
            "public org.springframework.web.client.RestOperations getRestOperations()"
        ],
        [
            "void",
            "org.springframework.web.client.AsyncRestTemplate.setMessageConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public void setMessageConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>",
            "org.springframework.web.client.AsyncRestTemplate.getMessageConverters()",
            "public java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> getMessageConverters()"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.getForEntity(java.lang.String, java.lang.Class<T>, java.lang.Object...)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> getForEntity(java.lang.String, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.getForEntity(java.lang.String, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> getForEntity(java.lang.String, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.getForEntity(java.net.URI, java.lang.Class<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> getForEntity(java.net.URI, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.http.HttpHeaders>",
            "org.springframework.web.client.AsyncRestTemplate.headForHeaders(java.lang.String, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.http.HttpHeaders> headForHeaders(java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.http.HttpHeaders>",
            "org.springframework.web.client.AsyncRestTemplate.headForHeaders(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.http.HttpHeaders> headForHeaders(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.http.HttpHeaders>",
            "org.springframework.web.client.AsyncRestTemplate.headForHeaders(java.net.URI)",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.http.HttpHeaders> headForHeaders(java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.net.URI>",
            "org.springframework.web.client.AsyncRestTemplate.postForLocation(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<java.net.URI> postForLocation(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.net.URI>",
            "org.springframework.web.client.AsyncRestTemplate.postForLocation(java.lang.String, org.springframework.http.HttpEntity<?>, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.util.concurrent.ListenableFuture<java.net.URI> postForLocation(java.lang.String, org.springframework.http.HttpEntity<?>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.net.URI>",
            "org.springframework.web.client.AsyncRestTemplate.postForLocation(java.net.URI, org.springframework.http.HttpEntity<?>)",
            "public org.springframework.util.concurrent.ListenableFuture<java.net.URI> postForLocation(java.net.URI, org.springframework.http.HttpEntity<?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.postForEntity(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.lang.Object...)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> postForEntity(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.postForEntity(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> postForEntity(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.postForEntity(java.net.URI, org.springframework.http.HttpEntity<?>, java.lang.Class<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> postForEntity(java.net.URI, org.springframework.http.HttpEntity<?>, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.web.client.AsyncRestTemplate.put(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<?> put(java.lang.String, org.springframework.http.HttpEntity<?>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.web.client.AsyncRestTemplate.put(java.lang.String, org.springframework.http.HttpEntity<?>, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.util.concurrent.ListenableFuture<?> put(java.lang.String, org.springframework.http.HttpEntity<?>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.web.client.AsyncRestTemplate.put(java.net.URI, org.springframework.http.HttpEntity<?>)",
            "public org.springframework.util.concurrent.ListenableFuture<?> put(java.net.URI, org.springframework.http.HttpEntity<?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.web.client.AsyncRestTemplate.delete(java.lang.String, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<?> delete(java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.web.client.AsyncRestTemplate.delete(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.util.concurrent.ListenableFuture<?> delete(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<?>",
            "org.springframework.web.client.AsyncRestTemplate.delete(java.net.URI)",
            "public org.springframework.util.concurrent.ListenableFuture<?> delete(java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.util.Set<org.springframework.http.HttpMethod>>",
            "org.springframework.web.client.AsyncRestTemplate.optionsForAllow(java.lang.String, java.lang.Object...)",
            "public org.springframework.util.concurrent.ListenableFuture<java.util.Set<org.springframework.http.HttpMethod>> optionsForAllow(java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.util.Set<org.springframework.http.HttpMethod>>",
            "org.springframework.web.client.AsyncRestTemplate.optionsForAllow(java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public org.springframework.util.concurrent.ListenableFuture<java.util.Set<org.springframework.http.HttpMethod>> optionsForAllow(java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<java.util.Set<org.springframework.http.HttpMethod>>",
            "org.springframework.web.client.AsyncRestTemplate.optionsForAllow(java.net.URI)",
            "public org.springframework.util.concurrent.ListenableFuture<java.util.Set<org.springframework.http.HttpMethod>> optionsForAllow(java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.lang.Object...)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Class<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.lang.Object...)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> exchange(java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>>",
            "org.springframework.web.client.AsyncRestTemplate.exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<org.springframework.http.ResponseEntity<T>> exchange(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, org.springframework.core.ParameterizedTypeReference<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.web.client.AsyncRestTemplate.execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.AsyncRequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.lang.Object...)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.AsyncRequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.web.client.AsyncRestTemplate.execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.AsyncRequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.util.Map<java.lang.String, ?>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> execute(java.lang.String, org.springframework.http.HttpMethod, org.springframework.web.client.AsyncRequestCallback, org.springframework.web.client.ResponseExtractor<T>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.util.concurrent.ListenableFuture<T>",
            "org.springframework.web.client.AsyncRestTemplate.execute(java.net.URI, org.springframework.http.HttpMethod, org.springframework.web.client.AsyncRequestCallback, org.springframework.web.client.ResponseExtractor<T>)",
            "public <T> org.springframework.util.concurrent.ListenableFuture<T> execute(java.net.URI, org.springframework.http.HttpMethod, org.springframework.web.client.AsyncRequestCallback, org.springframework.web.client.ResponseExtractor<T>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.web.client.support.RestGatewaySupport",
            "org.springframework.web.client.support.RestGatewaySupport()",
            "public org.springframework.web.client.support.RestGatewaySupport()"
        ],
        [
            "org.springframework.web.client.support.RestGatewaySupport",
            "org.springframework.web.client.support.RestGatewaySupport(org.springframework.http.client.ClientHttpRequestFactory)",
            "public org.springframework.web.client.support.RestGatewaySupport(org.springframework.http.client.ClientHttpRequestFactory)"
        ],
        [
            "void",
            "org.springframework.web.client.support.RestGatewaySupport.setRestTemplate(org.springframework.web.client.RestTemplate)",
            "public void setRestTemplate(org.springframework.web.client.RestTemplate)"
        ],
        [
            "org.springframework.web.client.RestTemplate",
            "org.springframework.web.client.support.RestGatewaySupport.getRestTemplate()",
            "public org.springframework.web.client.RestTemplate getRestTemplate()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.client.HttpStatusCodeException.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor",
            "org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor(org.springframework.web.client.RestTemplate, java.lang.reflect.Type)",
            "public org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor(org.springframework.web.client.RestTemplate, java.lang.reflect.Type)"
        ],
        [
            "org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(org.springframework.http.client.ClientHttpResponse)",
            "public org.springframework.http.ResponseEntity<T> extractData(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(org.springframework.http.client.ClientHttpResponse)",
            "public java.lang.Object extractData(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback",
            "org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback(org.springframework.web.client.RestTemplate, java.lang.reflect.Type)",
            "public org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback(org.springframework.web.client.RestTemplate, java.lang.reflect.Type)"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback.doWithRequest(org.springframework.http.client.ClientHttpRequest)",
            "public void doWithRequest(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper(org.springframework.http.client.ClientHttpResponse)",
            "public org.springframework.web.client.MessageBodyClientHttpResponseWrapper(org.springframework.http.client.ClientHttpResponse)"
        ],
        [
            "boolean",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasMessageBody()",
            "public boolean hasMessageBody() throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.hasEmptyMessageBody()",
            "public boolean hasEmptyMessageBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode() throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.getRawStatusCode()",
            "public int getRawStatusCode() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.getStatusText()",
            "public java.lang.String getStatusText() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.client.MessageBodyClientHttpResponseWrapper.close()",
            "public void close()"
        ],
        [
            "default",
            "org.springframework.web.client.ResponseErrorHandler.void handleError(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.client.ClientHttpResponse)",
            "public default void handleError(java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter(org.springframework.web.client.RequestCallback)",
            "public org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter(org.springframework.web.client.RequestCallback)"
        ],
        [
            "void",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter.doWithRequest(org.springframework.http.client.AsyncClientHttpRequest)",
            "public void doWithRequest(org.springframework.http.client.AsyncClientHttpRequest) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter$1.execute()",
            "public org.springframework.http.client.ClientHttpResponse execute() throws java.io.IOException"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter$1.getBody()",
            "public java.io.OutputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter$1.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter$1.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter$1.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.AsyncRestTemplate$AsyncRequestCallbackAdapter$1.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.web.client.ExtractingResponseErrorHandler",
            "org.springframework.web.client.ExtractingResponseErrorHandler()",
            "public org.springframework.web.client.ExtractingResponseErrorHandler()"
        ],
        [
            "org.springframework.web.client.ExtractingResponseErrorHandler",
            "org.springframework.web.client.ExtractingResponseErrorHandler(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public org.springframework.web.client.ExtractingResponseErrorHandler(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "void",
            "org.springframework.web.client.ExtractingResponseErrorHandler.setMessageConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public void setMessageConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "void",
            "org.springframework.web.client.ExtractingResponseErrorHandler.setStatusMapping(java.util.Map<org.springframework.http.HttpStatus, java.lang.Class<? extends org.springframework.web.client.RestClientException>>)",
            "public void setStatusMapping(java.util.Map<org.springframework.http.HttpStatus, java.lang.Class<? extends org.springframework.web.client.RestClientException>>)"
        ],
        [
            "void",
            "org.springframework.web.client.ExtractingResponseErrorHandler.setSeriesMapping(java.util.Map<org.springframework.http.HttpStatus$Series, java.lang.Class<? extends org.springframework.web.client.RestClientException>>)",
            "public void setSeriesMapping(java.util.Map<org.springframework.http.HttpStatus$Series, java.lang.Class<? extends org.springframework.web.client.RestClientException>>)"
        ],
        [
            "void",
            "org.springframework.web.client.ExtractingResponseErrorHandler.handleError(org.springframework.http.client.ClientHttpResponse, org.springframework.http.HttpStatus)",
            "public void handleError(org.springframework.http.client.ClientHttpResponse, org.springframework.http.HttpStatus) throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.client.RestTemplate$HeadersExtractor.extractData(org.springframework.http.client.ClientHttpResponse)",
            "public org.springframework.http.HttpHeaders extractData(org.springframework.http.client.ClientHttpResponse)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestTemplate$HeadersExtractor.extractData(org.springframework.http.client.ClientHttpResponse)",
            "public java.lang.Object extractData(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback",
            "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback(org.springframework.web.client.RestTemplate, java.lang.Object)",
            "public org.springframework.web.client.RestTemplate$HttpEntityRequestCallback(org.springframework.web.client.RestTemplate, java.lang.Object)"
        ],
        [
            "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback",
            "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback(org.springframework.web.client.RestTemplate, java.lang.Object, java.lang.reflect.Type)",
            "public org.springframework.web.client.RestTemplate$HttpEntityRequestCallback(org.springframework.web.client.RestTemplate, java.lang.Object, java.lang.reflect.Type)"
        ],
        [
            "void",
            "org.springframework.web.client.RestTemplate$HttpEntityRequestCallback.doWithRequest(org.springframework.http.client.ClientHttpRequest)",
            "public void doWithRequest(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException"
        ],
        [
            "org.springframework.web.client.DefaultResponseErrorHandler",
            "org.springframework.web.client.DefaultResponseErrorHandler()",
            "public org.springframework.web.client.DefaultResponseErrorHandler()"
        ],
        [
            "boolean",
            "org.springframework.web.client.DefaultResponseErrorHandler.hasError(org.springframework.http.client.ClientHttpResponse)",
            "public boolean hasError(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.client.DefaultResponseErrorHandler.handleError(org.springframework.http.client.ClientHttpResponse)",
            "public void handleError(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.client.UnknownHttpStatusCodeException",
            "org.springframework.web.client.UnknownHttpStatusCodeException(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.UnknownHttpStatusCodeException(int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.UnknownHttpStatusCodeException",
            "org.springframework.web.client.UnknownHttpStatusCodeException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)",
            "public org.springframework.web.client.UnknownHttpStatusCodeException(java.lang.String, int, java.lang.String, org.springframework.http.HttpHeaders, byte[], java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.client.HttpMessageConverterExtractor",
            "org.springframework.web.client.HttpMessageConverterExtractor(java.lang.Class<T>, java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public org.springframework.web.client.HttpMessageConverterExtractor(java.lang.Class<T>, java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "org.springframework.web.client.HttpMessageConverterExtractor",
            "org.springframework.web.client.HttpMessageConverterExtractor(java.lang.reflect.Type, java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public org.springframework.web.client.HttpMessageConverterExtractor(java.lang.reflect.Type, java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "T",
            "org.springframework.web.client.HttpMessageConverterExtractor.extractData(org.springframework.http.client.ClientHttpResponse)",
            "public T extractData(org.springframework.http.client.ClientHttpResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture",
            "org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture(org.springframework.http.HttpMethod, java.net.URI, org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse>, org.springframework.web.client.ResponseExtractor<T>)",
            "public org.springframework.web.client.AsyncRestTemplate$ResponseExtractorFuture(org.springframework.http.HttpMethod, java.net.URI, org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse>, org.springframework.web.client.ResponseExtractor<T>)"
        ],
        [
            "org.springframework.web.client.RestClientException",
            "org.springframework.web.client.RestClientException(java.lang.String)",
            "public org.springframework.web.client.RestClientException(java.lang.String)"
        ],
        [
            "org.springframework.web.client.RestClientException",
            "org.springframework.web.client.RestClientException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.client.RestClientException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver",
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver()",
            "public org.springframework.web.jsf.el.SpringBeanFacesELResolver()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver.getValue(javax.el.ELContext, java.lang.Object, java.lang.Object)",
            "public java.lang.Object getValue(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver.getType(javax.el.ELContext, java.lang.Object, java.lang.Object)",
            "public java.lang.Class<?> getType(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "void",
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver.setValue(javax.el.ELContext, java.lang.Object, java.lang.Object, java.lang.Object)",
            "public void setValue(javax.el.ELContext, java.lang.Object, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "boolean",
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver.isReadOnly(javax.el.ELContext, java.lang.Object, java.lang.Object)",
            "public boolean isReadOnly(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "java.util.Iterator<java.beans.FeatureDescriptor>",
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver.getFeatureDescriptors(javax.el.ELContext, java.lang.Object)",
            "public java.util.Iterator<java.beans.FeatureDescriptor> getFeatureDescriptors(javax.el.ELContext, java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.jsf.el.SpringBeanFacesELResolver.getCommonPropertyType(javax.el.ELContext, java.lang.Object)",
            "public java.lang.Class<?> getCommonPropertyType(javax.el.ELContext, java.lang.Object)"
        ],
        [
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver",
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver()",
            "public org.springframework.web.jsf.el.WebApplicationContextFacesELResolver()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver.getValue(javax.el.ELContext, java.lang.Object, java.lang.Object)",
            "public java.lang.Object getValue(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver.getType(javax.el.ELContext, java.lang.Object, java.lang.Object)",
            "public java.lang.Class<?> getType(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "void",
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver.setValue(javax.el.ELContext, java.lang.Object, java.lang.Object, java.lang.Object)",
            "public void setValue(javax.el.ELContext, java.lang.Object, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "boolean",
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver.isReadOnly(javax.el.ELContext, java.lang.Object, java.lang.Object)",
            "public boolean isReadOnly(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException"
        ],
        [
            "java.util.Iterator<java.beans.FeatureDescriptor>",
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver.getFeatureDescriptors(javax.el.ELContext, java.lang.Object)",
            "public java.util.Iterator<java.beans.FeatureDescriptor> getFeatureDescriptors(javax.el.ELContext, java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.jsf.el.WebApplicationContextFacesELResolver.getCommonPropertyType(javax.el.ELContext, java.lang.Object)",
            "public java.lang.Class<?> getCommonPropertyType(javax.el.ELContext, java.lang.Object)"
        ],
        [
            "org.springframework.web.jsf.DelegatingNavigationHandlerProxy",
            "org.springframework.web.jsf.DelegatingNavigationHandlerProxy()",
            "public org.springframework.web.jsf.DelegatingNavigationHandlerProxy()"
        ],
        [
            "org.springframework.web.jsf.DelegatingNavigationHandlerProxy",
            "org.springframework.web.jsf.DelegatingNavigationHandlerProxy(javax.faces.application.NavigationHandler)",
            "public org.springframework.web.jsf.DelegatingNavigationHandlerProxy(javax.faces.application.NavigationHandler)"
        ],
        [
            "void",
            "org.springframework.web.jsf.DelegatingNavigationHandlerProxy.handleNavigation(javax.faces.context.FacesContext, java.lang.String, java.lang.String)",
            "public void handleNavigation(javax.faces.context.FacesContext, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.jsf.DelegatingPhaseListenerMulticaster",
            "org.springframework.web.jsf.DelegatingPhaseListenerMulticaster()",
            "public org.springframework.web.jsf.DelegatingPhaseListenerMulticaster()"
        ],
        [
            "javax.faces.event.PhaseId",
            "org.springframework.web.jsf.DelegatingPhaseListenerMulticaster.getPhaseId()",
            "public javax.faces.event.PhaseId getPhaseId()"
        ],
        [
            "void",
            "org.springframework.web.jsf.DelegatingPhaseListenerMulticaster.beforePhase(javax.faces.event.PhaseEvent)",
            "public void beforePhase(javax.faces.event.PhaseEvent)"
        ],
        [
            "void",
            "org.springframework.web.jsf.DelegatingPhaseListenerMulticaster.afterPhase(javax.faces.event.PhaseEvent)",
            "public void afterPhase(javax.faces.event.PhaseEvent)"
        ],
        [
            "org.springframework.web.jsf.FacesContextUtils",
            "org.springframework.web.jsf.FacesContextUtils()",
            "public org.springframework.web.jsf.FacesContextUtils()"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.jsf.FacesContextUtils.getWebApplicationContext(javax.faces.context.FacesContext)",
            "public static org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.faces.context.FacesContext)"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.jsf.FacesContextUtils.getRequiredWebApplicationContext(javax.faces.context.FacesContext)",
            "public static org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.faces.context.FacesContext) throws java.lang.IllegalStateException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.jsf.FacesContextUtils.getSessionMutex(javax.faces.context.FacesContext)",
            "public static java.lang.Object getSessionMutex(javax.faces.context.FacesContext)"
        ],
        [
            "javax.faces.application.NavigationHandler",
            "org.springframework.web.jsf.DecoratingNavigationHandler.getDecoratedNavigationHandler()",
            "public final javax.faces.application.NavigationHandler getDecoratedNavigationHandler()"
        ],
        [
            "void",
            "org.springframework.web.jsf.DecoratingNavigationHandler.handleNavigation(javax.faces.context.FacesContext, java.lang.String, java.lang.String)",
            "public final void handleNavigation(javax.faces.context.FacesContext, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.HttpMediaTypeNotSupportedException",
            "org.springframework.web.HttpMediaTypeNotSupportedException(java.lang.String)",
            "public org.springframework.web.HttpMediaTypeNotSupportedException(java.lang.String)"
        ],
        [
            "org.springframework.web.HttpMediaTypeNotSupportedException",
            "org.springframework.web.HttpMediaTypeNotSupportedException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.HttpMediaTypeNotSupportedException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.web.HttpMediaTypeNotSupportedException",
            "org.springframework.web.HttpMediaTypeNotSupportedException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, java.lang.String)",
            "public org.springframework.web.HttpMediaTypeNotSupportedException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, java.lang.String)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.HttpMediaTypeNotSupportedException.getContentType()",
            "public org.springframework.http.MediaType getContentType()"
        ],
        [
            "org.springframework.web.context.ContextLoaderListener",
            "org.springframework.web.context.ContextLoaderListener()",
            "public org.springframework.web.context.ContextLoaderListener()"
        ],
        [
            "org.springframework.web.context.ContextLoaderListener",
            "org.springframework.web.context.ContextLoaderListener(org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.web.context.ContextLoaderListener(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "void",
            "org.springframework.web.context.ContextLoaderListener.contextInitialized(javax.servlet.ServletContextEvent)",
            "public void contextInitialized(javax.servlet.ServletContextEvent)"
        ],
        [
            "void",
            "org.springframework.web.context.ContextLoaderListener.contextDestroyed(javax.servlet.ServletContextEvent)",
            "public void contextDestroyed(javax.servlet.ServletContextEvent)"
        ],
        [
            "org.springframework.web.context.AbstractContextLoaderInitializer",
            "org.springframework.web.context.AbstractContextLoaderInitializer()",
            "public org.springframework.web.context.AbstractContextLoaderInitializer()"
        ],
        [
            "void",
            "org.springframework.web.context.AbstractContextLoaderInitializer.onStartup(javax.servlet.ServletContext)",
            "public void onStartup(javax.servlet.ServletContext) throws javax.servlet.ServletException"
        ],
        [
            "org.springframework.web.context.support.ServletContextPropertySource",
            "org.springframework.web.context.support.ServletContextPropertySource(java.lang.String, javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.ServletContextPropertySource(java.lang.String, javax.servlet.ServletContext)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.support.ServletContextPropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletContextPropertySource.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.web.context.support.HttpRequestHandlerServlet",
            "org.springframework.web.context.support.HttpRequestHandlerServlet()",
            "public org.springframework.web.context.support.HttpRequestHandlerServlet()"
        ],
        [
            "void",
            "org.springframework.web.context.support.HttpRequestHandlerServlet.init()",
            "public void init() throws javax.servlet.ServletException"
        ],
        [
            "org.springframework.web.context.support.ServletContextAwareProcessor",
            "org.springframework.web.context.support.ServletContextAwareProcessor(javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.ServletContextAwareProcessor(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.support.ServletContextAwareProcessor",
            "org.springframework.web.context.support.ServletContextAwareProcessor(javax.servlet.ServletConfig)",
            "public org.springframework.web.context.support.ServletContextAwareProcessor(javax.servlet.ServletConfig)"
        ],
        [
            "org.springframework.web.context.support.ServletContextAwareProcessor",
            "org.springframework.web.context.support.ServletContextAwareProcessor(javax.servlet.ServletContext, javax.servlet.ServletConfig)",
            "public org.springframework.web.context.support.ServletContextAwareProcessor(javax.servlet.ServletContext, javax.servlet.ServletConfig)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextAwareProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextAwareProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String)"
        ],
        [
            "org.springframework.web.context.support.StaticWebApplicationContext",
            "org.springframework.web.context.support.StaticWebApplicationContext()",
            "public org.springframework.web.context.support.StaticWebApplicationContext()"
        ],
        [
            "void",
            "org.springframework.web.context.support.StaticWebApplicationContext.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.web.context.support.StaticWebApplicationContext.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "void",
            "org.springframework.web.context.support.StaticWebApplicationContext.setServletConfig(javax.servlet.ServletConfig)",
            "public void setServletConfig(javax.servlet.ServletConfig)"
        ],
        [
            "javax.servlet.ServletConfig",
            "org.springframework.web.context.support.StaticWebApplicationContext.getServletConfig()",
            "public javax.servlet.ServletConfig getServletConfig()"
        ],
        [
            "void",
            "org.springframework.web.context.support.StaticWebApplicationContext.setNamespace(java.lang.String)",
            "public void setNamespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.StaticWebApplicationContext.getNamespace()",
            "public java.lang.String getNamespace()"
        ],
        [
            "void",
            "org.springframework.web.context.support.StaticWebApplicationContext.setConfigLocation(java.lang.String)",
            "public void setConfigLocation(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.support.StaticWebApplicationContext.setConfigLocations(java.lang.String...)",
            "public void setConfigLocations(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.support.StaticWebApplicationContext.getConfigLocations()",
            "public java.lang.String[] getConfigLocations()"
        ],
        [
            "org.springframework.ui.context.Theme",
            "org.springframework.web.context.support.StaticWebApplicationContext.getTheme(java.lang.String)",
            "public org.springframework.ui.context.Theme getTheme(java.lang.String)"
        ],
        [
            "org.springframework.web.context.support.XmlWebApplicationContext",
            "org.springframework.web.context.support.XmlWebApplicationContext()",
            "public org.springframework.web.context.support.XmlWebApplicationContext()"
        ],
        [
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext()",
            "public org.springframework.web.context.support.AbstractRefreshableWebApplicationContext()"
        ],
        [
            "void",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "void",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.setServletConfig(javax.servlet.ServletConfig)",
            "public void setServletConfig(javax.servlet.ServletConfig)"
        ],
        [
            "javax.servlet.ServletConfig",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getServletConfig()",
            "public javax.servlet.ServletConfig getServletConfig()"
        ],
        [
            "void",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.setNamespace(java.lang.String)",
            "public void setNamespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getNamespace()",
            "public java.lang.String getNamespace()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getConfigLocations()",
            "public java.lang.String[] getConfigLocations()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getApplicationName()",
            "public java.lang.String getApplicationName()"
        ],
        [
            "org.springframework.ui.context.Theme",
            "org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.getTheme(java.lang.String)",
            "public org.springframework.ui.context.Theme getTheme(java.lang.String)"
        ],
        [
            "org.springframework.web.context.support.ServletContextAttributeFactoryBean",
            "org.springframework.web.context.support.ServletContextAttributeFactoryBean()",
            "public org.springframework.web.context.support.ServletContextAttributeFactoryBean()"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextAttributeFactoryBean.setAttributeName(java.lang.String)",
            "public void setAttributeName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextAttributeFactoryBean.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextAttributeFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.context.support.ServletContextAttributeFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.web.context.support.ServletContextAttributeFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.web.context.support.ContextExposingHttpServletRequest",
            "org.springframework.web.context.support.ContextExposingHttpServletRequest(javax.servlet.http.HttpServletRequest, org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.web.context.support.ContextExposingHttpServletRequest(javax.servlet.http.HttpServletRequest, org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "org.springframework.web.context.support.ContextExposingHttpServletRequest",
            "org.springframework.web.context.support.ContextExposingHttpServletRequest(javax.servlet.http.HttpServletRequest, org.springframework.web.context.WebApplicationContext, java.util.Set<java.lang.String>)",
            "public org.springframework.web.context.support.ContextExposingHttpServletRequest(javax.servlet.http.HttpServletRequest, org.springframework.web.context.WebApplicationContext, java.util.Set<java.lang.String>)"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.context.support.ContextExposingHttpServletRequest.getWebApplicationContext()",
            "public final org.springframework.web.context.WebApplicationContext getWebApplicationContext()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ContextExposingHttpServletRequest.getAttribute(java.lang.String)",
            "public java.lang.Object getAttribute(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.support.ContextExposingHttpServletRequest.setAttribute(java.lang.String, java.lang.Object)",
            "public void setAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.context.support.ServletRequestHandledEvent",
            "org.springframework.web.context.support.ServletRequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)",
            "public org.springframework.web.context.support.ServletRequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)"
        ],
        [
            "org.springframework.web.context.support.ServletRequestHandledEvent",
            "org.springframework.web.context.support.ServletRequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.Throwable)",
            "public org.springframework.web.context.support.ServletRequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.context.support.ServletRequestHandledEvent",
            "org.springframework.web.context.support.ServletRequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.Throwable, int)",
            "public org.springframework.web.context.support.ServletRequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, java.lang.Throwable, int)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletRequestHandledEvent.getRequestUrl()",
            "public java.lang.String getRequestUrl()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletRequestHandledEvent.getClientAddress()",
            "public java.lang.String getClientAddress()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletRequestHandledEvent.getMethod()",
            "public java.lang.String getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletRequestHandledEvent.getServletName()",
            "public java.lang.String getServletName()"
        ],
        [
            "int",
            "org.springframework.web.context.support.ServletRequestHandledEvent.getStatusCode()",
            "public int getStatusCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletRequestHandledEvent.getShortDescription()",
            "public java.lang.String getShortDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletRequestHandledEvent.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletRequestHandledEvent.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar.registerFacesDependencies(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public static void registerFacesDependencies(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ],
        [
            "org.springframework.web.context.support.AnnotationConfigWebApplicationContext",
            "org.springframework.web.context.support.AnnotationConfigWebApplicationContext()",
            "public org.springframework.web.context.support.AnnotationConfigWebApplicationContext()"
        ],
        [
            "void",
            "org.springframework.web.context.support.AnnotationConfigWebApplicationContext.setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)",
            "public void setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator)"
        ],
        [
            "void",
            "org.springframework.web.context.support.AnnotationConfigWebApplicationContext.setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)",
            "public void setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver)"
        ],
        [
            "void",
            "org.springframework.web.context.support.AnnotationConfigWebApplicationContext.register(java.lang.Class<?>...)",
            "public void register(java.lang.Class<?>...)"
        ],
        [
            "void",
            "org.springframework.web.context.support.AnnotationConfigWebApplicationContext.scan(java.lang.String...)",
            "public void scan(java.lang.String...)"
        ],
        [
            "org.springframework.web.context.support.ServletContextParameterFactoryBean",
            "org.springframework.web.context.support.ServletContextParameterFactoryBean()",
            "public org.springframework.web.context.support.ServletContextParameterFactoryBean()"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextParameterFactoryBean.setInitParamName(java.lang.String)",
            "public void setInitParamName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextParameterFactoryBean.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletContextParameterFactoryBean.getObject()",
            "public java.lang.String getObject()"
        ],
        [
            "java.lang.Class<java.lang.String>",
            "org.springframework.web.context.support.ServletContextParameterFactoryBean.getObjectType()",
            "public java.lang.Class<java.lang.String> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.web.context.support.ServletContextParameterFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextParameterFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.web.context.request.WebRequest",
            "org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory.getObject()",
            "public org.springframework.web.context.request.WebRequest getObject()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.WebApplicationContextUtils$WebRequestObjectFactory.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.web.context.support.ServletContextResourcePatternResolver",
            "org.springframework.web.context.support.ServletContextResourcePatternResolver(javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.ServletContextResourcePatternResolver(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.support.ServletContextResourcePatternResolver",
            "org.springframework.web.context.support.ServletContextResourcePatternResolver(org.springframework.core.io.ResourceLoader)",
            "public org.springframework.web.context.support.ServletContextResourcePatternResolver(org.springframework.core.io.ResourceLoader)"
        ],
        [
            "javax.faces.context.ExternalContext",
            "org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2.getObject()",
            "public javax.faces.context.ExternalContext getObject()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$2.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "javax.servlet.http.HttpSession",
            "org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory.getObject()",
            "public javax.servlet.http.HttpSession getObject()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.WebApplicationContextUtils$SessionObjectFactory.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.web.context.support.GenericWebApplicationContext",
            "org.springframework.web.context.support.GenericWebApplicationContext()",
            "public org.springframework.web.context.support.GenericWebApplicationContext()"
        ],
        [
            "org.springframework.web.context.support.GenericWebApplicationContext",
            "org.springframework.web.context.support.GenericWebApplicationContext(javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.GenericWebApplicationContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.support.GenericWebApplicationContext",
            "org.springframework.web.context.support.GenericWebApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory)",
            "public org.springframework.web.context.support.GenericWebApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory)"
        ],
        [
            "org.springframework.web.context.support.GenericWebApplicationContext",
            "org.springframework.web.context.support.GenericWebApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory, javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.GenericWebApplicationContext(org.springframework.beans.factory.support.DefaultListableBeanFactory, javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.context.support.GenericWebApplicationContext.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.web.context.support.GenericWebApplicationContext.getServletContext()",
            "public javax.servlet.ServletContext getServletContext()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.GenericWebApplicationContext.getApplicationName()",
            "public java.lang.String getApplicationName()"
        ],
        [
            "org.springframework.ui.context.Theme",
            "org.springframework.web.context.support.GenericWebApplicationContext.getTheme(java.lang.String)",
            "public org.springframework.ui.context.Theme getTheme(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.support.GenericWebApplicationContext.setServletConfig(javax.servlet.ServletConfig)",
            "public void setServletConfig(javax.servlet.ServletConfig)"
        ],
        [
            "javax.servlet.ServletConfig",
            "org.springframework.web.context.support.GenericWebApplicationContext.getServletConfig()",
            "public javax.servlet.ServletConfig getServletConfig()"
        ],
        [
            "void",
            "org.springframework.web.context.support.GenericWebApplicationContext.setNamespace(java.lang.String)",
            "public void setNamespace(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.GenericWebApplicationContext.getNamespace()",
            "public java.lang.String getNamespace()"
        ],
        [
            "void",
            "org.springframework.web.context.support.GenericWebApplicationContext.setConfigLocation(java.lang.String)",
            "public void setConfigLocation(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.support.GenericWebApplicationContext.setConfigLocations(java.lang.String...)",
            "public void setConfigLocations(java.lang.String...)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.support.GenericWebApplicationContext.getConfigLocations()",
            "public java.lang.String[] getConfigLocations()"
        ],
        [
            "javax.servlet.ServletRequest",
            "org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory.getObject()",
            "public javax.servlet.ServletRequest getObject()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.WebApplicationContextUtils$RequestObjectFactory.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.web.context.support.ServletContextResource",
            "org.springframework.web.context.support.ServletContextResource(javax.servlet.ServletContext, java.lang.String)",
            "public org.springframework.web.context.support.ServletContextResource(javax.servlet.ServletContext, java.lang.String)"
        ],
        [
            "javax.servlet.ServletContext",
            "org.springframework.web.context.support.ServletContextResource.getServletContext()",
            "public final javax.servlet.ServletContext getServletContext()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletContextResource.getPath()",
            "public final java.lang.String getPath()"
        ],
        [
            "boolean",
            "org.springframework.web.context.support.ServletContextResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.web.context.support.ServletContextResource.isReadable()",
            "public boolean isReadable()"
        ],
        [
            "boolean",
            "org.springframework.web.context.support.ServletContextResource.isFile()",
            "public boolean isFile()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.context.support.ServletContextResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "java.net.URL",
            "org.springframework.web.context.support.ServletContextResource.getURL()",
            "public java.net.URL getURL() throws java.io.IOException"
        ],
        [
            "java.io.File",
            "org.springframework.web.context.support.ServletContextResource.getFile()",
            "public java.io.File getFile() throws java.io.IOException"
        ],
        [
            "org.springframework.core.io.Resource",
            "org.springframework.web.context.support.ServletContextResource.createRelative(java.lang.String)",
            "public org.springframework.core.io.Resource createRelative(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletContextResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletContextResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletContextResource.getPathWithinContext()",
            "public java.lang.String getPathWithinContext()"
        ],
        [
            "boolean",
            "org.springframework.web.context.support.ServletContextResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.context.support.ServletContextResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.web.context.support.ServletContextScope",
            "org.springframework.web.context.support.ServletContextScope(javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.ServletContextScope(javax.servlet.ServletContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextScope.get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)",
            "public java.lang.Object get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextScope.remove(java.lang.String)",
            "public java.lang.Object remove(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextScope.registerDestructionCallback(java.lang.String, java.lang.Runnable)",
            "public void registerDestructionCallback(java.lang.String, java.lang.Runnable)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletContextScope.resolveContextualObject(java.lang.String)",
            "public java.lang.Object resolveContextualObject(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletContextScope.getConversationId()",
            "public java.lang.String getConversationId()"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextScope.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.web.context.support.ServletContextResourceLoader",
            "org.springframework.web.context.support.ServletContextResourceLoader(javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.ServletContextResourceLoader(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.support.ServletContextLiveBeansView",
            "org.springframework.web.context.support.ServletContextLiveBeansView(javax.servlet.ServletContext)",
            "public org.springframework.web.context.support.ServletContextLiveBeansView(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.support.LiveBeansViewServlet",
            "org.springframework.web.context.support.LiveBeansViewServlet()",
            "public org.springframework.web.context.support.LiveBeansViewServlet()"
        ],
        [
            "void",
            "org.springframework.web.context.support.LiveBeansViewServlet.init()",
            "public void init() throws javax.servlet.ServletException"
        ],
        [
            "org.springframework.web.context.support.ServletContextAttributeExporter",
            "org.springframework.web.context.support.ServletContextAttributeExporter()",
            "public org.springframework.web.context.support.ServletContextAttributeExporter()"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextAttributeExporter.setAttributes(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setAttributes(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.web.context.support.ServletContextAttributeExporter.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.support.WebApplicationContextUtils",
            "org.springframework.web.context.support.WebApplicationContextUtils()",
            "public org.springframework.web.context.support.WebApplicationContextUtils()"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.context.support.WebApplicationContextUtils.getRequiredWebApplicationContext(javax.servlet.ServletContext)",
            "public static org.springframework.web.context.WebApplicationContext getRequiredWebApplicationContext(javax.servlet.ServletContext) throws java.lang.IllegalStateException"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(javax.servlet.ServletContext)",
            "public static org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(javax.servlet.ServletContext, java.lang.String)",
            "public static org.springframework.web.context.WebApplicationContext getWebApplicationContext(javax.servlet.ServletContext, java.lang.String)"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.context.support.WebApplicationContextUtils.findWebApplicationContext(javax.servlet.ServletContext)",
            "public static org.springframework.web.context.WebApplicationContext findWebApplicationContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationContextUtils.registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "public static void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationContextUtils.registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext)",
            "public static void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationContextUtils.registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext)",
            "public static void registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationContextUtils.registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext, javax.servlet.ServletConfig)",
            "public static void registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, javax.servlet.ServletContext, javax.servlet.ServletConfig)"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationContextUtils.initServletPropertySources(org.springframework.core.env.MutablePropertySources, javax.servlet.ServletContext)",
            "public static void initServletPropertySources(org.springframework.core.env.MutablePropertySources, javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationContextUtils.initServletPropertySources(org.springframework.core.env.MutablePropertySources, javax.servlet.ServletContext, javax.servlet.ServletConfig)",
            "public static void initServletPropertySources(org.springframework.core.env.MutablePropertySources, javax.servlet.ServletContext, javax.servlet.ServletConfig)"
        ],
        [
            "org.springframework.web.context.support.ServletConfigPropertySource",
            "org.springframework.web.context.support.ServletConfigPropertySource(java.lang.String, javax.servlet.ServletConfig)",
            "public org.springframework.web.context.support.ServletConfigPropertySource(java.lang.String, javax.servlet.ServletConfig)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.support.ServletConfigPropertySource.getPropertyNames()",
            "public java.lang.String[] getPropertyNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.ServletConfigPropertySource.getProperty(java.lang.String)",
            "public java.lang.String getProperty(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.ServletConfigPropertySource.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.web.context.support.StandardServletEnvironment",
            "org.springframework.web.context.support.StandardServletEnvironment()",
            "public org.springframework.web.context.support.StandardServletEnvironment()"
        ],
        [
            "void",
            "org.springframework.web.context.support.StandardServletEnvironment.initPropertySources(javax.servlet.ServletContext, javax.servlet.ServletConfig)",
            "public void initPropertySources(javax.servlet.ServletContext, javax.servlet.ServletConfig)"
        ],
        [
            "org.springframework.web.context.support.GroovyWebApplicationContext",
            "org.springframework.web.context.support.GroovyWebApplicationContext()",
            "public org.springframework.web.context.support.GroovyWebApplicationContext()"
        ],
        [
            "void",
            "org.springframework.web.context.support.GroovyWebApplicationContext.setMetaClass(groovy.lang.MetaClass)",
            "public void setMetaClass(groovy.lang.MetaClass)"
        ],
        [
            "groovy.lang.MetaClass",
            "org.springframework.web.context.support.GroovyWebApplicationContext.getMetaClass()",
            "public groovy.lang.MetaClass getMetaClass()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.GroovyWebApplicationContext.invokeMethod(java.lang.String, java.lang.Object)",
            "public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.context.support.GroovyWebApplicationContext.setProperty(java.lang.String, java.lang.Object)",
            "public void setProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.GroovyWebApplicationContext.getProperty(java.lang.String)",
            "public java.lang.Object getProperty(java.lang.String)"
        ],
        [
            "org.springframework.web.context.support.WebApplicationObjectSupport",
            "org.springframework.web.context.support.WebApplicationObjectSupport()",
            "public org.springframework.web.context.support.WebApplicationObjectSupport()"
        ],
        [
            "void",
            "org.springframework.web.context.support.WebApplicationObjectSupport.setServletContext(javax.servlet.ServletContext)",
            "public final void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.support.SpringBeanAutowiringSupport",
            "org.springframework.web.context.support.SpringBeanAutowiringSupport()",
            "public org.springframework.web.context.support.SpringBeanAutowiringSupport()"
        ],
        [
            "void",
            "org.springframework.web.context.support.SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(java.lang.Object)",
            "public static void processInjectionBasedOnCurrentContext(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.context.support.SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(java.lang.Object, javax.servlet.ServletContext)",
            "public static void processInjectionBasedOnServletContext(java.lang.Object, javax.servlet.ServletContext)"
        ],
        [
            "javax.servlet.ServletResponse",
            "org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory.getObject()",
            "public javax.servlet.ServletResponse getObject()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.WebApplicationContextUtils$ResponseObjectFactory.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "javax.faces.context.FacesContext",
            "org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1.getObject()",
            "public javax.faces.context.FacesContext getObject()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.support.WebApplicationContextUtils$FacesDependencyRegistrar$1.getObject()",
            "public java.lang.Object getObject() throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.web.context.support.RequestHandledEvent",
            "org.springframework.web.context.support.RequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, long)",
            "public org.springframework.web.context.support.RequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, long)"
        ],
        [
            "org.springframework.web.context.support.RequestHandledEvent",
            "org.springframework.web.context.support.RequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, long, java.lang.Throwable)",
            "public org.springframework.web.context.support.RequestHandledEvent(java.lang.Object, java.lang.String, java.lang.String, long, java.lang.Throwable)"
        ],
        [
            "long",
            "org.springframework.web.context.support.RequestHandledEvent.getProcessingTimeMillis()",
            "public long getProcessingTimeMillis()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.RequestHandledEvent.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.RequestHandledEvent.getUserName()",
            "public java.lang.String getUserName()"
        ],
        [
            "boolean",
            "org.springframework.web.context.support.RequestHandledEvent.wasFailure()",
            "public boolean wasFailure()"
        ],
        [
            "java.lang.Throwable",
            "org.springframework.web.context.support.RequestHandledEvent.getFailureCause()",
            "public java.lang.Throwable getFailureCause()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.RequestHandledEvent.getShortDescription()",
            "public java.lang.String getShortDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.RequestHandledEvent.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.support.RequestHandledEvent.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.context.ContextLoader",
            "org.springframework.web.context.ContextLoader()",
            "public org.springframework.web.context.ContextLoader()"
        ],
        [
            "org.springframework.web.context.ContextLoader",
            "org.springframework.web.context.ContextLoader(org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.web.context.ContextLoader(org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "void",
            "org.springframework.web.context.ContextLoader.setContextInitializers(org.springframework.context.ApplicationContextInitializer<?>...)",
            "public void setContextInitializers(org.springframework.context.ApplicationContextInitializer<?>...)"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.context.ContextLoader.initWebApplicationContext(javax.servlet.ServletContext)",
            "public org.springframework.web.context.WebApplicationContext initWebApplicationContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.context.ContextLoader.closeWebApplicationContext(javax.servlet.ServletContext)",
            "public void closeWebApplicationContext(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.context.WebApplicationContext",
            "org.springframework.web.context.ContextLoader.getCurrentWebApplicationContext()",
            "public static org.springframework.web.context.WebApplicationContext getCurrentWebApplicationContext()"
        ],
        [
            "org.springframework.web.context.request.ServletRequestAttributes",
            "org.springframework.web.context.request.ServletRequestAttributes(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.context.request.ServletRequestAttributes(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.context.request.ServletRequestAttributes",
            "org.springframework.web.context.request.ServletRequestAttributes(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public org.springframework.web.context.request.ServletRequestAttributes(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)"
        ],
        [
            "javax.servlet.http.HttpServletRequest",
            "org.springframework.web.context.request.ServletRequestAttributes.getRequest()",
            "public final javax.servlet.http.HttpServletRequest getRequest()"
        ],
        [
            "javax.servlet.http.HttpServletResponse",
            "org.springframework.web.context.request.ServletRequestAttributes.getResponse()",
            "public final javax.servlet.http.HttpServletResponse getResponse()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.ServletRequestAttributes.getAttribute(java.lang.String, int)",
            "public java.lang.Object getAttribute(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.web.context.request.ServletRequestAttributes.setAttribute(java.lang.String, java.lang.Object, int)",
            "public void setAttribute(java.lang.String, java.lang.Object, int)"
        ],
        [
            "void",
            "org.springframework.web.context.request.ServletRequestAttributes.removeAttribute(java.lang.String, int)",
            "public void removeAttribute(java.lang.String, int)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.request.ServletRequestAttributes.getAttributeNames(int)",
            "public java.lang.String[] getAttributeNames(int)"
        ],
        [
            "void",
            "org.springframework.web.context.request.ServletRequestAttributes.registerDestructionCallback(java.lang.String, java.lang.Runnable, int)",
            "public void registerDestructionCallback(java.lang.String, java.lang.Runnable, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.ServletRequestAttributes.resolveReference(java.lang.String)",
            "public java.lang.Object resolveReference(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletRequestAttributes.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.ServletRequestAttributes.getSessionMutex()",
            "public java.lang.Object getSessionMutex()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletRequestAttributes.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.context.request.RequestContextListener",
            "org.springframework.web.context.request.RequestContextListener()",
            "public org.springframework.web.context.request.RequestContextListener()"
        ],
        [
            "void",
            "org.springframework.web.context.request.RequestContextListener.requestInitialized(javax.servlet.ServletRequestEvent)",
            "public void requestInitialized(javax.servlet.ServletRequestEvent)"
        ],
        [
            "void",
            "org.springframework.web.context.request.RequestContextListener.requestDestroyed(javax.servlet.ServletRequestEvent)",
            "public void requestDestroyed(javax.servlet.ServletRequestEvent)"
        ],
        [
            "org.springframework.web.context.request.FacesWebRequest",
            "org.springframework.web.context.request.FacesWebRequest(javax.faces.context.FacesContext)",
            "public org.springframework.web.context.request.FacesWebRequest(javax.faces.context.FacesContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.FacesWebRequest.getNativeRequest()",
            "public java.lang.Object getNativeRequest()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.FacesWebRequest.getNativeResponse()",
            "public java.lang.Object getNativeResponse()"
        ],
        [
            "<T> T",
            "org.springframework.web.context.request.FacesWebRequest.getNativeRequest(java.lang.Class<T>)",
            "public <T> T getNativeRequest(java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.web.context.request.FacesWebRequest.getNativeResponse(java.lang.Class<T>)",
            "public <T> T getNativeResponse(java.lang.Class<T>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.FacesWebRequest.getHeader(java.lang.String)",
            "public java.lang.String getHeader(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.request.FacesWebRequest.getHeaderValues(java.lang.String)",
            "public java.lang.String[] getHeaderValues(java.lang.String)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.web.context.request.FacesWebRequest.getHeaderNames()",
            "public java.util.Iterator<java.lang.String> getHeaderNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.FacesWebRequest.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.web.context.request.FacesWebRequest.getParameterNames()",
            "public java.util.Iterator<java.lang.String> getParameterNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.request.FacesWebRequest.getParameterValues(java.lang.String)",
            "public java.lang.String[] getParameterValues(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.context.request.FacesWebRequest.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "java.util.Locale",
            "org.springframework.web.context.request.FacesWebRequest.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.FacesWebRequest.getContextPath()",
            "public java.lang.String getContextPath()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.FacesWebRequest.getRemoteUser()",
            "public java.lang.String getRemoteUser()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.context.request.FacesWebRequest.getUserPrincipal()",
            "public java.security.Principal getUserPrincipal()"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.FacesWebRequest.isUserInRole(java.lang.String)",
            "public boolean isUserInRole(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.FacesWebRequest.isSecure()",
            "public boolean isSecure()"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.FacesWebRequest.checkNotModified(long)",
            "public boolean checkNotModified(long)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.FacesWebRequest.checkNotModified(java.lang.String)",
            "public boolean checkNotModified(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.FacesWebRequest.checkNotModified(java.lang.String, long)",
            "public boolean checkNotModified(java.lang.String, long)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.FacesWebRequest.getDescription(boolean)",
            "public java.lang.String getDescription(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.FacesWebRequest.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.context.request.AbstractRequestAttributes",
            "org.springframework.web.context.request.AbstractRequestAttributes()",
            "public org.springframework.web.context.request.AbstractRequestAttributes()"
        ],
        [
            "void",
            "org.springframework.web.context.request.AbstractRequestAttributes.requestCompleted()",
            "public void requestCompleted()"
        ],
        [
            "org.springframework.web.context.request.RequestContextHolder",
            "org.springframework.web.context.request.RequestContextHolder()",
            "public org.springframework.web.context.request.RequestContextHolder()"
        ],
        [
            "void",
            "org.springframework.web.context.request.RequestContextHolder.resetRequestAttributes()",
            "public static void resetRequestAttributes()"
        ],
        [
            "void",
            "org.springframework.web.context.request.RequestContextHolder.setRequestAttributes(org.springframework.web.context.request.RequestAttributes)",
            "public static void setRequestAttributes(org.springframework.web.context.request.RequestAttributes)"
        ],
        [
            "void",
            "org.springframework.web.context.request.RequestContextHolder.setRequestAttributes(org.springframework.web.context.request.RequestAttributes, boolean)",
            "public static void setRequestAttributes(org.springframework.web.context.request.RequestAttributes, boolean)"
        ],
        [
            "org.springframework.web.context.request.RequestAttributes",
            "org.springframework.web.context.request.RequestContextHolder.getRequestAttributes()",
            "public static org.springframework.web.context.request.RequestAttributes getRequestAttributes()"
        ],
        [
            "org.springframework.web.context.request.RequestAttributes",
            "org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes()",
            "public static org.springframework.web.context.request.RequestAttributes currentRequestAttributes() throws java.lang.IllegalStateException"
        ],
        [
            "org.springframework.web.context.request.ServletWebRequest",
            "org.springframework.web.context.request.ServletWebRequest(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.context.request.ServletWebRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.context.request.ServletWebRequest",
            "org.springframework.web.context.request.ServletWebRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public org.springframework.web.context.request.ServletWebRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.ServletWebRequest.getNativeRequest()",
            "public java.lang.Object getNativeRequest()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.ServletWebRequest.getNativeResponse()",
            "public java.lang.Object getNativeResponse()"
        ],
        [
            "<T> T",
            "org.springframework.web.context.request.ServletWebRequest.getNativeRequest(java.lang.Class<T>)",
            "public <T> T getNativeRequest(java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.web.context.request.ServletWebRequest.getNativeResponse(java.lang.Class<T>)",
            "public <T> T getNativeResponse(java.lang.Class<T>)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.context.request.ServletWebRequest.getHttpMethod()",
            "public org.springframework.http.HttpMethod getHttpMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletWebRequest.getHeader(java.lang.String)",
            "public java.lang.String getHeader(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.request.ServletWebRequest.getHeaderValues(java.lang.String)",
            "public java.lang.String[] getHeaderValues(java.lang.String)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.web.context.request.ServletWebRequest.getHeaderNames()",
            "public java.util.Iterator<java.lang.String> getHeaderNames()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletWebRequest.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.request.ServletWebRequest.getParameterValues(java.lang.String)",
            "public java.lang.String[] getParameterValues(java.lang.String)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.web.context.request.ServletWebRequest.getParameterNames()",
            "public java.util.Iterator<java.lang.String> getParameterNames()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.context.request.ServletWebRequest.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "java.util.Locale",
            "org.springframework.web.context.request.ServletWebRequest.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletWebRequest.getContextPath()",
            "public java.lang.String getContextPath()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletWebRequest.getRemoteUser()",
            "public java.lang.String getRemoteUser()"
        ],
        [
            "java.security.Principal",
            "org.springframework.web.context.request.ServletWebRequest.getUserPrincipal()",
            "public java.security.Principal getUserPrincipal()"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.ServletWebRequest.isUserInRole(java.lang.String)",
            "public boolean isUserInRole(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.ServletWebRequest.isSecure()",
            "public boolean isSecure()"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.ServletWebRequest.checkNotModified(long)",
            "public boolean checkNotModified(long)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.ServletWebRequest.checkNotModified(java.lang.String)",
            "public boolean checkNotModified(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.ServletWebRequest.checkNotModified(java.lang.String, long)",
            "public boolean checkNotModified(java.lang.String, long)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.ServletWebRequest.isNotModified()",
            "public boolean isNotModified()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletWebRequest.getDescription(boolean)",
            "public java.lang.String getDescription(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.ServletWebRequest.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.context.request.RequestScope",
            "org.springframework.web.context.request.RequestScope()",
            "public org.springframework.web.context.request.RequestScope()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.RequestScope.getConversationId()",
            "public java.lang.String getConversationId()"
        ],
        [
            "org.springframework.web.context.request.RequestAttributes",
            "org.springframework.web.context.request.RequestContextHolder$FacesRequestAttributesFactory.getFacesRequestAttributes()",
            "public static org.springframework.web.context.request.RequestAttributes getFacesRequestAttributes()"
        ],
        [
            "org.springframework.web.context.request.SessionScope",
            "org.springframework.web.context.request.SessionScope()",
            "public org.springframework.web.context.request.SessionScope()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.SessionScope.getConversationId()",
            "public java.lang.String getConversationId()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.SessionScope.get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)",
            "public java.lang.Object get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.SessionScope.remove(java.lang.String)",
            "public java.lang.Object remove(java.lang.String)"
        ],
        [
            "org.springframework.web.context.request.AbstractRequestAttributesScope",
            "org.springframework.web.context.request.AbstractRequestAttributesScope()",
            "public org.springframework.web.context.request.AbstractRequestAttributesScope()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.AbstractRequestAttributesScope.get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)",
            "public java.lang.Object get(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.AbstractRequestAttributesScope.remove(java.lang.String)",
            "public java.lang.Object remove(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.context.request.AbstractRequestAttributesScope.registerDestructionCallback(java.lang.String, java.lang.Runnable)",
            "public void registerDestructionCallback(java.lang.String, java.lang.Runnable)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.AbstractRequestAttributesScope.resolveContextualObject(java.lang.String)",
            "public java.lang.Object resolveContextualObject(java.lang.String)"
        ],
        [
            "org.springframework.web.context.request.DestructionCallbackBindingListener",
            "org.springframework.web.context.request.DestructionCallbackBindingListener(java.lang.Runnable)",
            "public org.springframework.web.context.request.DestructionCallbackBindingListener(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.web.context.request.DestructionCallbackBindingListener.valueBound(javax.servlet.http.HttpSessionBindingEvent)",
            "public void valueBound(javax.servlet.http.HttpSessionBindingEvent)"
        ],
        [
            "void",
            "org.springframework.web.context.request.DestructionCallbackBindingListener.valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "public void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)"
        ],
        [
            "org.springframework.web.context.request.FacesRequestAttributes",
            "org.springframework.web.context.request.FacesRequestAttributes(javax.faces.context.FacesContext)",
            "public org.springframework.web.context.request.FacesRequestAttributes(javax.faces.context.FacesContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.FacesRequestAttributes.getAttribute(java.lang.String, int)",
            "public java.lang.Object getAttribute(java.lang.String, int)"
        ],
        [
            "void",
            "org.springframework.web.context.request.FacesRequestAttributes.setAttribute(java.lang.String, java.lang.Object, int)",
            "public void setAttribute(java.lang.String, java.lang.Object, int)"
        ],
        [
            "void",
            "org.springframework.web.context.request.FacesRequestAttributes.removeAttribute(java.lang.String, int)",
            "public void removeAttribute(java.lang.String, int)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.context.request.FacesRequestAttributes.getAttributeNames(int)",
            "public java.lang.String[] getAttributeNames(int)"
        ],
        [
            "void",
            "org.springframework.web.context.request.FacesRequestAttributes.registerDestructionCallback(java.lang.String, java.lang.Runnable, int)",
            "public void registerDestructionCallback(java.lang.String, java.lang.Runnable, int)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.FacesRequestAttributes.resolveReference(java.lang.String)",
            "public java.lang.Object resolveReference(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.context.request.FacesRequestAttributes.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.FacesRequestAttributes.getSessionMutex()",
            "public java.lang.Object getSessionMutex()"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptor.beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public default <T> void beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptor.preProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public default <T> void preProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptor.postProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Object)",
            "public default <T> void postProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Object) throws java.lang.Exception"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.context.request.async.CallableProcessingInterceptor.handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public default <T> java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.context.request.async.CallableProcessingInterceptor.handleError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Throwable)",
            "public default <T> java.lang.Object handleError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptor.afterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public default <T> void afterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter",
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter()",
            "public org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter()"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter.beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public <T> void beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter.preProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public <T> void preProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter.postProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Object)",
            "public <T> void postProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Object) throws java.lang.Exception"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter.handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public <T> java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter.handleError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Throwable)",
            "public <T> java.lang.Object handleError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.CallableProcessingInterceptorAdapter.afterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public <T> void afterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.context.request.async.WebAsyncUtils",
            "org.springframework.web.context.request.async.WebAsyncUtils()",
            "public org.springframework.web.context.request.async.WebAsyncUtils()"
        ],
        [
            "org.springframework.web.context.request.async.WebAsyncManager",
            "org.springframework.web.context.request.async.WebAsyncUtils.getAsyncManager(javax.servlet.ServletRequest)",
            "public static org.springframework.web.context.request.async.WebAsyncManager getAsyncManager(javax.servlet.ServletRequest)"
        ],
        [
            "org.springframework.web.context.request.async.WebAsyncManager",
            "org.springframework.web.context.request.async.WebAsyncUtils.getAsyncManager(org.springframework.web.context.request.WebRequest)",
            "public static org.springframework.web.context.request.async.WebAsyncManager getAsyncManager(org.springframework.web.context.request.WebRequest)"
        ],
        [
            "org.springframework.web.context.request.async.AsyncWebRequest",
            "org.springframework.web.context.request.async.WebAsyncUtils.createAsyncWebRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public static org.springframework.web.context.request.async.AsyncWebRequest createAsyncWebRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptor.beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public default <T> void beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptor.preProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public default <T> void preProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptor.postProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Object)",
            "public default <T> void postProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Object) throws java.lang.Exception"
        ],
        [
            "<T> boolean",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptor.handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public default <T> boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "<T> boolean",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptor.handleError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Throwable)",
            "public default <T> boolean handleError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptor.afterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public default <T> void afterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.context.request.async.CallableInterceptorChain",
            "org.springframework.web.context.request.async.CallableInterceptorChain(java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor>)",
            "public org.springframework.web.context.request.async.CallableInterceptorChain(java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor>)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.CallableInterceptorChain.setTaskFuture(java.util.concurrent.Future<?>)",
            "public void setTaskFuture(java.util.concurrent.Future<?>)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.CallableInterceptorChain.applyBeforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>)",
            "public void applyBeforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.CallableInterceptorChain.applyPreProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>)",
            "public void applyPreProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>) throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.async.CallableInterceptorChain.applyPostProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>, java.lang.Object)",
            "public java.lang.Object applyPostProcess(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.async.CallableInterceptorChain.triggerAfterTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>)",
            "public java.lang.Object triggerAfterTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.async.CallableInterceptorChain.triggerAfterError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>, java.lang.Throwable)",
            "public java.lang.Object triggerAfterError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.CallableInterceptorChain.triggerAfterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>)",
            "public void triggerAfterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<?>)"
        ],
        [
            "org.springframework.web.context.request.async.DeferredResult",
            "org.springframework.web.context.request.async.DeferredResult()",
            "public org.springframework.web.context.request.async.DeferredResult()"
        ],
        [
            "org.springframework.web.context.request.async.DeferredResult",
            "org.springframework.web.context.request.async.DeferredResult(java.lang.Long)",
            "public org.springframework.web.context.request.async.DeferredResult(java.lang.Long)"
        ],
        [
            "org.springframework.web.context.request.async.DeferredResult",
            "org.springframework.web.context.request.async.DeferredResult(java.lang.Long, java.lang.Object)",
            "public org.springframework.web.context.request.async.DeferredResult(java.lang.Long, java.lang.Object)"
        ],
        [
            "org.springframework.web.context.request.async.DeferredResult",
            "org.springframework.web.context.request.async.DeferredResult(java.lang.Long, java.util.function.Supplier<?>)",
            "public org.springframework.web.context.request.async.DeferredResult(java.lang.Long, java.util.function.Supplier<?>)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.DeferredResult.isSetOrExpired()",
            "public final boolean isSetOrExpired()"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.DeferredResult.hasResult()",
            "public boolean hasResult()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.async.DeferredResult.getResult()",
            "public java.lang.Object getResult()"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResult.onTimeout(java.lang.Runnable)",
            "public void onTimeout(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResult.onError(java.util.function.Consumer<java.lang.Throwable>)",
            "public void onError(java.util.function.Consumer<java.lang.Throwable>)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResult.onCompletion(java.lang.Runnable)",
            "public void onCompletion(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResult.setResultHandler(org.springframework.web.context.request.async.DeferredResult$DeferredResultHandler)",
            "public final void setResultHandler(org.springframework.web.context.request.async.DeferredResult$DeferredResultHandler)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.DeferredResult.setResult(T)",
            "public boolean setResult(T)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.DeferredResult.setErrorResult(java.lang.Object)",
            "public boolean setErrorResult(java.lang.Object)"
        ],
        [
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter()",
            "public org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter()"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter.beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public <T> void beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter.preProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public <T> void preProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter.postProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Object)",
            "public <T> void postProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Object) throws java.lang.Exception"
        ],
        [
            "<T> boolean",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter.handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public <T> boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "<T> boolean",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter.handleError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Throwable)",
            "public <T> boolean handleError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptorAdapter.afterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public <T> void afterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain",
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain(java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor>)",
            "public org.springframework.web.context.request.async.DeferredResultInterceptorChain(java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor>)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain.applyBeforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>)",
            "public void applyBeforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain.applyPreProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>)",
            "public void applyPreProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>) throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain.applyPostProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>, java.lang.Object)",
            "public java.lang.Object applyPostProcess(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain.triggerAfterTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>)",
            "public void triggerAfterTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain.triggerAfterError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>, java.lang.Throwable)",
            "public boolean triggerAfterError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.DeferredResultInterceptorChain.triggerAfterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>)",
            "public void triggerAfterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<?>)"
        ],
        [
            "<S> boolean",
            "org.springframework.web.context.request.async.DeferredResult$1.handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<S>)",
            "public <S> boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<S>)"
        ],
        [
            "<S> boolean",
            "org.springframework.web.context.request.async.DeferredResult$1.handleError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<S>, java.lang.Throwable)",
            "public <S> boolean handleError(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<S>, java.lang.Throwable)"
        ],
        [
            "<S> void",
            "org.springframework.web.context.request.async.DeferredResult$1.afterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<S>)",
            "public <S> void afterCompletion(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<S>)"
        ],
        [
            "org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor",
            "org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor()",
            "public org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor()"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.context.request.async.TimeoutCallableProcessingInterceptor.handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public <T> java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.setAsyncWebRequest(org.springframework.web.context.request.async.AsyncWebRequest)",
            "public void setAsyncWebRequest(org.springframework.web.context.request.async.AsyncWebRequest)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.setTaskExecutor(org.springframework.core.task.AsyncTaskExecutor)",
            "public void setTaskExecutor(org.springframework.core.task.AsyncTaskExecutor)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.WebAsyncManager.isConcurrentHandlingStarted()",
            "public boolean isConcurrentHandlingStarted()"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.WebAsyncManager.hasConcurrentResult()",
            "public boolean hasConcurrentResult()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.context.request.async.WebAsyncManager.getConcurrentResult()",
            "public java.lang.Object getConcurrentResult()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.web.context.request.async.WebAsyncManager.getConcurrentResultContext()",
            "public java.lang.Object[] getConcurrentResultContext()"
        ],
        [
            "org.springframework.web.context.request.async.CallableProcessingInterceptor",
            "org.springframework.web.context.request.async.WebAsyncManager.getCallableInterceptor(java.lang.Object)",
            "public org.springframework.web.context.request.async.CallableProcessingInterceptor getCallableInterceptor(java.lang.Object)"
        ],
        [
            "org.springframework.web.context.request.async.DeferredResultProcessingInterceptor",
            "org.springframework.web.context.request.async.WebAsyncManager.getDeferredResultInterceptor(java.lang.Object)",
            "public org.springframework.web.context.request.async.DeferredResultProcessingInterceptor getDeferredResultInterceptor(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptor(java.lang.Object, org.springframework.web.context.request.async.CallableProcessingInterceptor)",
            "public void registerCallableInterceptor(java.lang.Object, org.springframework.web.context.request.async.CallableProcessingInterceptor)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.registerCallableInterceptors(org.springframework.web.context.request.async.CallableProcessingInterceptor...)",
            "public void registerCallableInterceptors(org.springframework.web.context.request.async.CallableProcessingInterceptor...)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptor(java.lang.Object, org.springframework.web.context.request.async.DeferredResultProcessingInterceptor)",
            "public void registerDeferredResultInterceptor(java.lang.Object, org.springframework.web.context.request.async.DeferredResultProcessingInterceptor)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.registerDeferredResultInterceptors(org.springframework.web.context.request.async.DeferredResultProcessingInterceptor...)",
            "public void registerDeferredResultInterceptors(org.springframework.web.context.request.async.DeferredResultProcessingInterceptor...)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.clearConcurrentResult()",
            "public void clearConcurrentResult()"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.startCallableProcessing(java.util.concurrent.Callable<?>, java.lang.Object...)",
            "public void startCallableProcessing(java.util.concurrent.Callable<?>, java.lang.Object...) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.startCallableProcessing(org.springframework.web.context.request.async.WebAsyncTask<?>, java.lang.Object...)",
            "public void startCallableProcessing(org.springframework.web.context.request.async.WebAsyncTask<?>, java.lang.Object...) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncManager.startDeferredResultProcessing(org.springframework.web.context.request.async.DeferredResult<?>, java.lang.Object...)",
            "public void startDeferredResultProcessing(org.springframework.web.context.request.async.DeferredResult<?>, java.lang.Object...) throws java.lang.Exception"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.context.request.async.WebAsyncTask$1.handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public <T> java.lang.Object handleTimeout(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "<T> java.lang.Object",
            "org.springframework.web.context.request.async.WebAsyncTask$1.handleError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Throwable)",
            "public <T> java.lang.Object handleError(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "<T> void",
            "org.springframework.web.context.request.async.WebAsyncTask$1.afterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>)",
            "public <T> void afterCompletion(org.springframework.web.context.request.NativeWebRequest, java.util.concurrent.Callable<T>) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public org.springframework.web.context.request.async.StandardServletAsyncWebRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.setTimeout(java.lang.Long)",
            "public void setTimeout(java.lang.Long)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.addTimeoutHandler(java.lang.Runnable)",
            "public void addTimeoutHandler(java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.addErrorHandler(java.util.function.Consumer<java.lang.Throwable>)",
            "public void addErrorHandler(java.util.function.Consumer<java.lang.Throwable>)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.addCompletionHandler(java.lang.Runnable)",
            "public void addCompletionHandler(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.isAsyncStarted()",
            "public boolean isAsyncStarted()"
        ],
        [
            "boolean",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.isAsyncComplete()",
            "public boolean isAsyncComplete()"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.startAsync()",
            "public void startAsync()"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.dispatch()",
            "public void dispatch()"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.onStartAsync(javax.servlet.AsyncEvent)",
            "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.onError(javax.servlet.AsyncEvent)",
            "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.onTimeout(javax.servlet.AsyncEvent)",
            "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.StandardServletAsyncWebRequest.onComplete(javax.servlet.AsyncEvent)",
            "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "org.springframework.web.context.request.async.AsyncRequestTimeoutException",
            "org.springframework.web.context.request.async.AsyncRequestTimeoutException()",
            "public org.springframework.web.context.request.async.AsyncRequestTimeoutException()"
        ],
        [
            "org.springframework.web.context.request.async.WebAsyncTask",
            "org.springframework.web.context.request.async.WebAsyncTask(java.util.concurrent.Callable<V>)",
            "public org.springframework.web.context.request.async.WebAsyncTask(java.util.concurrent.Callable<V>)"
        ],
        [
            "org.springframework.web.context.request.async.WebAsyncTask",
            "org.springframework.web.context.request.async.WebAsyncTask(long, java.util.concurrent.Callable<V>)",
            "public org.springframework.web.context.request.async.WebAsyncTask(long, java.util.concurrent.Callable<V>)"
        ],
        [
            "org.springframework.web.context.request.async.WebAsyncTask",
            "org.springframework.web.context.request.async.WebAsyncTask(java.lang.Long, java.lang.String, java.util.concurrent.Callable<V>)",
            "public org.springframework.web.context.request.async.WebAsyncTask(java.lang.Long, java.lang.String, java.util.concurrent.Callable<V>)"
        ],
        [
            "org.springframework.web.context.request.async.WebAsyncTask",
            "org.springframework.web.context.request.async.WebAsyncTask(java.lang.Long, org.springframework.core.task.AsyncTaskExecutor, java.util.concurrent.Callable<V>)",
            "public org.springframework.web.context.request.async.WebAsyncTask(java.lang.Long, org.springframework.core.task.AsyncTaskExecutor, java.util.concurrent.Callable<V>)"
        ],
        [
            "java.util.concurrent.Callable<?>",
            "org.springframework.web.context.request.async.WebAsyncTask.getCallable()",
            "public java.util.concurrent.Callable<?> getCallable()"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.context.request.async.WebAsyncTask.getTimeout()",
            "public java.lang.Long getTimeout()"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncTask.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.core.task.AsyncTaskExecutor",
            "org.springframework.web.context.request.async.WebAsyncTask.getExecutor()",
            "public org.springframework.core.task.AsyncTaskExecutor getExecutor()"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncTask.onTimeout(java.util.concurrent.Callable<V>)",
            "public void onTimeout(java.util.concurrent.Callable<V>)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncTask.onError(java.util.concurrent.Callable<V>)",
            "public void onError(java.util.concurrent.Callable<V>)"
        ],
        [
            "void",
            "org.springframework.web.context.request.async.WebAsyncTask.onCompletion(java.lang.Runnable)",
            "public void onCompletion(java.lang.Runnable)"
        ],
        [
            "org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor",
            "org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor()",
            "public org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor()"
        ],
        [
            "<T> boolean",
            "org.springframework.web.context.request.async.TimeoutDeferredResultProcessingInterceptor.handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>)",
            "public <T> boolean handleTimeout(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.context.request.async.DeferredResult<T>) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.context.ContextCleanupListener",
            "org.springframework.web.context.ContextCleanupListener()",
            "public org.springframework.web.context.ContextCleanupListener()"
        ],
        [
            "void",
            "org.springframework.web.context.ContextCleanupListener.contextInitialized(javax.servlet.ServletContextEvent)",
            "public void contextInitialized(javax.servlet.ServletContextEvent)"
        ],
        [
            "void",
            "org.springframework.web.context.ContextCleanupListener.contextDestroyed(javax.servlet.ServletContextEvent)",
            "public void contextDestroyed(javax.servlet.ServletContextEvent)"
        ],
        [
            "org.springframework.web.HttpMediaTypeNotAcceptableException",
            "org.springframework.web.HttpMediaTypeNotAcceptableException(java.lang.String)",
            "public org.springframework.web.HttpMediaTypeNotAcceptableException(java.lang.String)"
        ],
        [
            "org.springframework.web.HttpMediaTypeNotAcceptableException",
            "org.springframework.web.HttpMediaTypeNotAcceptableException(java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.HttpMediaTypeNotAcceptableException(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.HttpMediaTypeException.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "org.springframework.web.server.handler.DefaultWebFilterChain",
            "org.springframework.web.server.handler.DefaultWebFilterChain(org.springframework.web.server.WebHandler, java.util.List<org.springframework.web.server.WebFilter>)",
            "public org.springframework.web.server.handler.DefaultWebFilterChain(org.springframework.web.server.WebHandler, java.util.List<org.springframework.web.server.WebFilter>)"
        ],
        [
            "org.springframework.web.server.handler.DefaultWebFilterChain",
            "org.springframework.web.server.handler.DefaultWebFilterChain(org.springframework.web.server.WebHandler, org.springframework.web.server.WebFilter...)",
            "public org.springframework.web.server.handler.DefaultWebFilterChain(org.springframework.web.server.WebHandler, org.springframework.web.server.WebFilter...)"
        ],
        [
            "java.util.List<org.springframework.web.server.WebFilter>",
            "org.springframework.web.server.handler.DefaultWebFilterChain.getFilters()",
            "public java.util.List<org.springframework.web.server.WebFilter> getFilters()"
        ],
        [
            "org.springframework.web.server.WebHandler",
            "org.springframework.web.server.handler.DefaultWebFilterChain.getHandler()",
            "public org.springframework.web.server.WebHandler getHandler()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.handler.DefaultWebFilterChain.filter(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.server.handler.ExceptionHandlingWebHandler",
            "org.springframework.web.server.handler.ExceptionHandlingWebHandler(org.springframework.web.server.WebHandler, java.util.List<org.springframework.web.server.WebExceptionHandler>)",
            "public org.springframework.web.server.handler.ExceptionHandlingWebHandler(org.springframework.web.server.WebHandler, java.util.List<org.springframework.web.server.WebExceptionHandler>)"
        ],
        [
            "java.util.List<org.springframework.web.server.WebExceptionHandler>",
            "org.springframework.web.server.handler.ExceptionHandlingWebHandler.getExceptionHandlers()",
            "public java.util.List<org.springframework.web.server.WebExceptionHandler> getExceptionHandlers()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.handler.ExceptionHandlingWebHandler.handle(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.server.handler.FilteringWebHandler",
            "org.springframework.web.server.handler.FilteringWebHandler(org.springframework.web.server.WebHandler, java.util.List<org.springframework.web.server.WebFilter>)",
            "public org.springframework.web.server.handler.FilteringWebHandler(org.springframework.web.server.WebHandler, java.util.List<org.springframework.web.server.WebFilter>)"
        ],
        [
            "java.util.List<org.springframework.web.server.WebFilter>",
            "org.springframework.web.server.handler.FilteringWebHandler.getFilters()",
            "public java.util.List<org.springframework.web.server.WebFilter> getFilters()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.handler.FilteringWebHandler.handle(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.server.handler.WebHandlerDecorator",
            "org.springframework.web.server.handler.WebHandlerDecorator(org.springframework.web.server.WebHandler)",
            "public org.springframework.web.server.handler.WebHandlerDecorator(org.springframework.web.server.WebHandler)"
        ],
        [
            "org.springframework.web.server.WebHandler",
            "org.springframework.web.server.handler.WebHandlerDecorator.getDelegate()",
            "public org.springframework.web.server.WebHandler getDelegate()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.handler.WebHandlerDecorator.handle(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.handler.WebHandlerDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.handler.ExceptionHandlingWebHandler$CheckpointInsertingHandler.handle(org.springframework.web.server.ServerWebExchange, java.lang.Throwable)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.server.handler.ResponseStatusExceptionHandler",
            "org.springframework.web.server.handler.ResponseStatusExceptionHandler()",
            "public org.springframework.web.server.handler.ResponseStatusExceptionHandler()"
        ],
        [
            "void",
            "org.springframework.web.server.handler.ResponseStatusExceptionHandler.setWarnLogCategory(java.lang.String)",
            "public void setWarnLogCategory(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.handler.ResponseStatusExceptionHandler.handle(org.springframework.web.server.ServerWebExchange, java.lang.Throwable)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.web.server.ServerWebExchange, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.server.MediaTypeNotSupportedStatusException",
            "org.springframework.web.server.MediaTypeNotSupportedStatusException(java.lang.String)",
            "public org.springframework.web.server.MediaTypeNotSupportedStatusException(java.lang.String)"
        ],
        [
            "org.springframework.web.server.MediaTypeNotSupportedStatusException",
            "org.springframework.web.server.MediaTypeNotSupportedStatusException(java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.server.MediaTypeNotSupportedStatusException(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.server.MediaTypeNotSupportedStatusException.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver",
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver()",
            "public org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver()"
        ],
        [
            "void",
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver.setSupportedLocales(java.util.List<java.util.Locale>)",
            "public void setSupportedLocales(java.util.List<java.util.Locale>)"
        ],
        [
            "java.util.List<java.util.Locale>",
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver.getSupportedLocales()",
            "public java.util.List<java.util.Locale> getSupportedLocales()"
        ],
        [
            "void",
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver.setDefaultLocale(java.util.Locale)",
            "public void setDefaultLocale(java.util.Locale)"
        ],
        [
            "java.util.Locale",
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver.getDefaultLocale()",
            "public java.util.Locale getDefaultLocale()"
        ],
        [
            "org.springframework.context.i18n.LocaleContext",
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver.resolveLocaleContext(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.context.i18n.LocaleContext resolveLocaleContext(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "void",
            "org.springframework.web.server.i18n.AcceptHeaderLocaleContextResolver.setLocaleContext(org.springframework.web.server.ServerWebExchange, org.springframework.context.i18n.LocaleContext)",
            "public void setLocaleContext(org.springframework.web.server.ServerWebExchange, org.springframework.context.i18n.LocaleContext)"
        ],
        [
            "org.springframework.web.server.i18n.FixedLocaleContextResolver",
            "org.springframework.web.server.i18n.FixedLocaleContextResolver()",
            "public org.springframework.web.server.i18n.FixedLocaleContextResolver()"
        ],
        [
            "org.springframework.web.server.i18n.FixedLocaleContextResolver",
            "org.springframework.web.server.i18n.FixedLocaleContextResolver(java.util.Locale)",
            "public org.springframework.web.server.i18n.FixedLocaleContextResolver(java.util.Locale)"
        ],
        [
            "org.springframework.web.server.i18n.FixedLocaleContextResolver",
            "org.springframework.web.server.i18n.FixedLocaleContextResolver(java.util.Locale, java.util.TimeZone)",
            "public org.springframework.web.server.i18n.FixedLocaleContextResolver(java.util.Locale, java.util.TimeZone)"
        ],
        [
            "org.springframework.context.i18n.LocaleContext",
            "org.springframework.web.server.i18n.FixedLocaleContextResolver.resolveLocaleContext(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.context.i18n.LocaleContext resolveLocaleContext(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "void",
            "org.springframework.web.server.i18n.FixedLocaleContextResolver.setLocaleContext(org.springframework.web.server.ServerWebExchange, org.springframework.context.i18n.LocaleContext)",
            "public void setLocaleContext(org.springframework.web.server.ServerWebExchange, org.springframework.context.i18n.LocaleContext)"
        ],
        [
            "java.util.Locale",
            "org.springframework.web.server.i18n.FixedLocaleContextResolver$1.getLocale()",
            "public java.util.Locale getLocale()"
        ],
        [
            "java.util.TimeZone",
            "org.springframework.web.server.i18n.FixedLocaleContextResolver$1.getTimeZone()",
            "public java.util.TimeZone getTimeZone()"
        ],
        [
            "org.springframework.web.server.DefaultServerWebExchangeBuilder$MutativeDecorator",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder$MutativeDecorator(org.springframework.web.server.ServerWebExchange, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, reactor.core.publisher.Mono<java.security.Principal>)",
            "public org.springframework.web.server.DefaultServerWebExchangeBuilder$MutativeDecorator(org.springframework.web.server.ServerWebExchange, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, reactor.core.publisher.Mono<java.security.Principal>)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder$MutativeDecorator.getRequest()",
            "public org.springframework.http.server.reactive.ServerHttpRequest getRequest()"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpResponse",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder$MutativeDecorator.getResponse()",
            "public org.springframework.http.server.reactive.ServerHttpResponse getResponse()"
        ],
        [
            "<T extends java.security.Principal> reactor.core.publisher.Mono<T>",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder$MutativeDecorator.getPrincipal()",
            "public <T extends java.security.Principal> reactor.core.publisher.Mono<T> getPrincipal()"
        ],
        [
            "org.springframework.web.server.ServerErrorException",
            "org.springframework.web.server.ServerErrorException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.server.ServerErrorException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.server.ServerErrorException",
            "org.springframework.web.server.ServerErrorException(java.lang.String, java.lang.reflect.Method, java.lang.Throwable)",
            "public org.springframework.web.server.ServerErrorException(java.lang.String, java.lang.reflect.Method, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.server.ServerErrorException",
            "org.springframework.web.server.ServerErrorException(java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)",
            "public org.springframework.web.server.ServerErrorException(java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.server.ServerErrorException",
            "org.springframework.web.server.ServerErrorException(java.lang.String, org.springframework.core.MethodParameter)",
            "public org.springframework.web.server.ServerErrorException(java.lang.String, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.server.ServerErrorException",
            "org.springframework.web.server.ServerErrorException(java.lang.String)",
            "public org.springframework.web.server.ServerErrorException(java.lang.String)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.web.server.ServerErrorException.getHandlerMethod()",
            "public java.lang.reflect.Method getHandlerMethod()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.server.ServerErrorException.getMethodParameter()",
            "public org.springframework.core.MethodParameter getMethodParameter()"
        ],
        [
            "org.springframework.web.server.UnsupportedMediaTypeStatusException",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException(java.lang.String)",
            "public org.springframework.web.server.UnsupportedMediaTypeStatusException(java.lang.String)"
        ],
        [
            "org.springframework.web.server.UnsupportedMediaTypeStatusException",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.web.server.UnsupportedMediaTypeStatusException",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.core.ResolvableType)",
            "public org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.web.server.UnsupportedMediaTypeStatusException",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.http.HttpMethod)",
            "public org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.web.server.UnsupportedMediaTypeStatusException",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.core.ResolvableType, org.springframework.http.HttpMethod)",
            "public org.springframework.web.server.UnsupportedMediaTypeStatusException(org.springframework.http.MediaType, java.util.List<org.springframework.http.MediaType>, org.springframework.core.ResolvableType, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException.getContentType()",
            "public org.springframework.http.MediaType getContentType()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException.getBodyType()",
            "public org.springframework.core.ResolvableType getBodyType()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.server.UnsupportedMediaTypeStatusException.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "org.springframework.web.server.adapter.DefaultServerWebExchange",
            "org.springframework.web.server.adapter.DefaultServerWebExchange(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, org.springframework.web.server.session.WebSessionManager, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.server.i18n.LocaleContextResolver)",
            "public org.springframework.web.server.adapter.DefaultServerWebExchange(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, org.springframework.web.server.session.WebSessionManager, org.springframework.http.codec.ServerCodecConfigurer, org.springframework.web.server.i18n.LocaleContextResolver)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getRequest()",
            "public org.springframework.http.server.reactive.ServerHttpRequest getRequest()"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpResponse",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getResponse()",
            "public org.springframework.http.server.reactive.ServerHttpResponse getResponse()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getSession()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> getSession()"
        ],
        [
            "<T extends java.security.Principal> reactor.core.publisher.Mono<T>",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getPrincipal()",
            "public <T extends java.security.Principal> reactor.core.publisher.Mono<T> getPrincipal()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getFormData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> getFormData()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getMultipartData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> getMultipartData()"
        ],
        [
            "org.springframework.context.i18n.LocaleContext",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getLocaleContext()",
            "public org.springframework.context.i18n.LocaleContext getLocaleContext()"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.isNotModified()",
            "public boolean isNotModified()"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.checkNotModified(java.time.Instant)",
            "public boolean checkNotModified(java.time.Instant)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.checkNotModified(java.lang.String)",
            "public boolean checkNotModified(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.checkNotModified(java.lang.String, java.time.Instant)",
            "public boolean checkNotModified(java.lang.String, java.time.Instant)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.transformUrl(java.lang.String)",
            "public java.lang.String transformUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.addUrlTransformer(java.util.function.Function<java.lang.String, java.lang.String>)",
            "public void addUrlTransformer(java.util.function.Function<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.adapter.DefaultServerWebExchange.getLogPrefix()",
            "public java.lang.String getLogPrefix()"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.webHandler(org.springframework.web.server.WebHandler)",
            "public static org.springframework.web.server.adapter.WebHttpHandlerBuilder webHandler(org.springframework.web.server.WebHandler)"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.applicationContext(org.springframework.context.ApplicationContext)",
            "public static org.springframework.web.server.adapter.WebHttpHandlerBuilder applicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.filter(org.springframework.web.server.WebFilter...)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder filter(org.springframework.web.server.WebFilter...)"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.filters(java.util.function.Consumer<java.util.List<org.springframework.web.server.WebFilter>>)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder filters(java.util.function.Consumer<java.util.List<org.springframework.web.server.WebFilter>>)"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.exceptionHandler(org.springframework.web.server.WebExceptionHandler...)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder exceptionHandler(org.springframework.web.server.WebExceptionHandler...)"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.exceptionHandlers(java.util.function.Consumer<java.util.List<org.springframework.web.server.WebExceptionHandler>>)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder exceptionHandlers(java.util.function.Consumer<java.util.List<org.springframework.web.server.WebExceptionHandler>>)"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.sessionManager(org.springframework.web.server.session.WebSessionManager)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder sessionManager(org.springframework.web.server.session.WebSessionManager)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.hasSessionManager()",
            "public boolean hasSessionManager()"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.codecConfigurer(org.springframework.http.codec.ServerCodecConfigurer)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder codecConfigurer(org.springframework.http.codec.ServerCodecConfigurer)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.hasCodecConfigurer()",
            "public boolean hasCodecConfigurer()"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.localeContextResolver(org.springframework.web.server.i18n.LocaleContextResolver)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder localeContextResolver(org.springframework.web.server.i18n.LocaleContextResolver)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.hasLocaleContextResolver()",
            "public boolean hasLocaleContextResolver()"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.forwardedHeaderTransformer(org.springframework.web.server.adapter.ForwardedHeaderTransformer)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder forwardedHeaderTransformer(org.springframework.web.server.adapter.ForwardedHeaderTransformer)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.hasForwardedHeaderTransformer()",
            "public boolean hasForwardedHeaderTransformer()"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.httpHandlerDecorator(java.util.function.Function<org.springframework.http.server.reactive.HttpHandler, org.springframework.http.server.reactive.HttpHandler>)",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder httpHandlerDecorator(java.util.function.Function<org.springframework.http.server.reactive.HttpHandler, org.springframework.http.server.reactive.HttpHandler>)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.hasHttpHandlerDecorator()",
            "public boolean hasHttpHandlerDecorator()"
        ],
        [
            "org.springframework.http.server.reactive.HttpHandler",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.build()",
            "public org.springframework.http.server.reactive.HttpHandler build()"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.clone()",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder$SpringWebBlockHoundIntegration",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder$SpringWebBlockHoundIntegration()",
            "public org.springframework.web.server.adapter.WebHttpHandlerBuilder$SpringWebBlockHoundIntegration()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.WebHttpHandlerBuilder$SpringWebBlockHoundIntegration.applyTo(reactor.blockhound.BlockHound$Builder)",
            "public void applyTo(reactor.blockhound.BlockHound$Builder)"
        ],
        [
            "org.springframework.web.server.adapter.ForwardedHeaderTransformer",
            "org.springframework.web.server.adapter.ForwardedHeaderTransformer()",
            "public org.springframework.web.server.adapter.ForwardedHeaderTransformer()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.ForwardedHeaderTransformer.setRemoveOnly(boolean)",
            "public void setRemoveOnly(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.server.adapter.ForwardedHeaderTransformer.isRemoveOnly()",
            "public boolean isRemoveOnly()"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest",
            "org.springframework.web.server.adapter.ForwardedHeaderTransformer.apply(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public org.springframework.http.server.reactive.ServerHttpRequest apply(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.server.adapter.ForwardedHeaderTransformer.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "org.springframework.web.server.adapter.AbstractReactiveWebInitializer",
            "org.springframework.web.server.adapter.AbstractReactiveWebInitializer()",
            "public org.springframework.web.server.adapter.AbstractReactiveWebInitializer()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.AbstractReactiveWebInitializer.onStartup(javax.servlet.ServletContext)",
            "public void onStartup(javax.servlet.ServletContext) throws javax.servlet.ServletException"
        ],
        [
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter(org.springframework.web.server.WebHandler)",
            "public org.springframework.web.server.adapter.HttpWebHandlerAdapter(org.springframework.web.server.WebHandler)"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.setSessionManager(org.springframework.web.server.session.WebSessionManager)",
            "public void setSessionManager(org.springframework.web.server.session.WebSessionManager)"
        ],
        [
            "org.springframework.web.server.session.WebSessionManager",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.getSessionManager()",
            "public org.springframework.web.server.session.WebSessionManager getSessionManager()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.setCodecConfigurer(org.springframework.http.codec.ServerCodecConfigurer)",
            "public void setCodecConfigurer(org.springframework.http.codec.ServerCodecConfigurer)"
        ],
        [
            "org.springframework.http.codec.ServerCodecConfigurer",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.getCodecConfigurer()",
            "public org.springframework.http.codec.ServerCodecConfigurer getCodecConfigurer()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.setLocaleContextResolver(org.springframework.web.server.i18n.LocaleContextResolver)",
            "public void setLocaleContextResolver(org.springframework.web.server.i18n.LocaleContextResolver)"
        ],
        [
            "org.springframework.web.server.i18n.LocaleContextResolver",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.getLocaleContextResolver()",
            "public org.springframework.web.server.i18n.LocaleContextResolver getLocaleContextResolver()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.setForwardedHeaderTransformer(org.springframework.web.server.adapter.ForwardedHeaderTransformer)",
            "public void setForwardedHeaderTransformer(org.springframework.web.server.adapter.ForwardedHeaderTransformer)"
        ],
        [
            "org.springframework.web.server.adapter.ForwardedHeaderTransformer",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.getForwardedHeaderTransformer()",
            "public org.springframework.web.server.adapter.ForwardedHeaderTransformer getForwardedHeaderTransformer()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.adapter.HttpWebHandlerAdapter.handle(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "org.springframework.web.server.adapter.AbstractReactiveWebInitializer$ServletContextDestroyedListener",
            "org.springframework.web.server.adapter.AbstractReactiveWebInitializer$ServletContextDestroyedListener(org.springframework.context.ConfigurableApplicationContext)",
            "public org.springframework.web.server.adapter.AbstractReactiveWebInitializer$ServletContextDestroyedListener(org.springframework.context.ConfigurableApplicationContext)"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.AbstractReactiveWebInitializer$ServletContextDestroyedListener.contextInitialized(javax.servlet.ServletContextEvent)",
            "public void contextInitialized(javax.servlet.ServletContextEvent)"
        ],
        [
            "void",
            "org.springframework.web.server.adapter.AbstractReactiveWebInitializer$ServletContextDestroyedListener.contextDestroyed(javax.servlet.ServletContextEvent)",
            "public void contextDestroyed(javax.servlet.ServletContextEvent)"
        ],
        [
            "org.springframework.web.server.ServerWebExchange$Builder",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder.request(java.util.function.Consumer<org.springframework.http.server.reactive.ServerHttpRequest$Builder>)",
            "public org.springframework.web.server.ServerWebExchange$Builder request(java.util.function.Consumer<org.springframework.http.server.reactive.ServerHttpRequest$Builder>)"
        ],
        [
            "org.springframework.web.server.ServerWebExchange$Builder",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder.request(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public org.springframework.web.server.ServerWebExchange$Builder request(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "org.springframework.web.server.ServerWebExchange$Builder",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder.response(org.springframework.http.server.reactive.ServerHttpResponse)",
            "public org.springframework.web.server.ServerWebExchange$Builder response(org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "org.springframework.web.server.ServerWebExchange$Builder",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder.principal(reactor.core.publisher.Mono<java.security.Principal>)",
            "public org.springframework.web.server.ServerWebExchange$Builder principal(reactor.core.publisher.Mono<java.security.Principal>)"
        ],
        [
            "org.springframework.web.server.ServerWebExchange",
            "org.springframework.web.server.DefaultServerWebExchangeBuilder.build()",
            "public org.springframework.web.server.ServerWebExchange build()"
        ],
        [
            "org.springframework.web.server.MethodNotAllowedException",
            "org.springframework.web.server.MethodNotAllowedException(org.springframework.http.HttpMethod, java.util.Collection<org.springframework.http.HttpMethod>)",
            "public org.springframework.web.server.MethodNotAllowedException(org.springframework.http.HttpMethod, java.util.Collection<org.springframework.http.HttpMethod>)"
        ],
        [
            "org.springframework.web.server.MethodNotAllowedException",
            "org.springframework.web.server.MethodNotAllowedException(java.lang.String, java.util.Collection<org.springframework.http.HttpMethod>)",
            "public org.springframework.web.server.MethodNotAllowedException(java.lang.String, java.util.Collection<org.springframework.http.HttpMethod>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.server.MethodNotAllowedException.getHeaders()",
            "public java.util.Map<java.lang.String, java.lang.String> getHeaders()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.server.MethodNotAllowedException.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.MethodNotAllowedException.getHttpMethod()",
            "public java.lang.String getHttpMethod()"
        ],
        [
            "java.util.Set<org.springframework.http.HttpMethod>",
            "org.springframework.web.server.MethodNotAllowedException.getSupportedMethods()",
            "public java.util.Set<org.springframework.http.HttpMethod> getSupportedMethods()"
        ],
        [
            "org.springframework.web.server.ServerWebExchange",
            "org.springframework.web.server.ServerWebExchangeDecorator.getDelegate()",
            "public org.springframework.web.server.ServerWebExchange getDelegate()"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest",
            "org.springframework.web.server.ServerWebExchangeDecorator.getRequest()",
            "public org.springframework.http.server.reactive.ServerHttpRequest getRequest()"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpResponse",
            "org.springframework.web.server.ServerWebExchangeDecorator.getResponse()",
            "public org.springframework.http.server.reactive.ServerHttpResponse getResponse()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.server.ServerWebExchangeDecorator.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.server.ServerWebExchangeDecorator.getSession()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> getSession()"
        ],
        [
            "<T extends java.security.Principal> reactor.core.publisher.Mono<T>",
            "org.springframework.web.server.ServerWebExchangeDecorator.getPrincipal()",
            "public <T extends java.security.Principal> reactor.core.publisher.Mono<T> getPrincipal()"
        ],
        [
            "org.springframework.context.i18n.LocaleContext",
            "org.springframework.web.server.ServerWebExchangeDecorator.getLocaleContext()",
            "public org.springframework.context.i18n.LocaleContext getLocaleContext()"
        ],
        [
            "org.springframework.context.ApplicationContext",
            "org.springframework.web.server.ServerWebExchangeDecorator.getApplicationContext()",
            "public org.springframework.context.ApplicationContext getApplicationContext()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.web.server.ServerWebExchangeDecorator.getFormData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> getFormData()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.web.server.ServerWebExchangeDecorator.getMultipartData()",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> getMultipartData()"
        ],
        [
            "boolean",
            "org.springframework.web.server.ServerWebExchangeDecorator.isNotModified()",
            "public boolean isNotModified()"
        ],
        [
            "boolean",
            "org.springframework.web.server.ServerWebExchangeDecorator.checkNotModified(java.time.Instant)",
            "public boolean checkNotModified(java.time.Instant)"
        ],
        [
            "boolean",
            "org.springframework.web.server.ServerWebExchangeDecorator.checkNotModified(java.lang.String)",
            "public boolean checkNotModified(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.server.ServerWebExchangeDecorator.checkNotModified(java.lang.String, java.time.Instant)",
            "public boolean checkNotModified(java.lang.String, java.time.Instant)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.ServerWebExchangeDecorator.transformUrl(java.lang.String)",
            "public java.lang.String transformUrl(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.server.ServerWebExchangeDecorator.addUrlTransformer(java.util.function.Function<java.lang.String, java.lang.String>)",
            "public void addUrlTransformer(java.util.function.Function<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.ServerWebExchangeDecorator.getLogPrefix()",
            "public java.lang.String getLogPrefix()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.ServerWebExchangeDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.server.ServerWebInputException",
            "org.springframework.web.server.ServerWebInputException(java.lang.String)",
            "public org.springframework.web.server.ServerWebInputException(java.lang.String)"
        ],
        [
            "org.springframework.web.server.ServerWebInputException",
            "org.springframework.web.server.ServerWebInputException(java.lang.String, org.springframework.core.MethodParameter)",
            "public org.springframework.web.server.ServerWebInputException(java.lang.String, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.server.ServerWebInputException",
            "org.springframework.web.server.ServerWebInputException(java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)",
            "public org.springframework.web.server.ServerWebInputException(java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.server.ServerWebInputException.getMethodParameter()",
            "public org.springframework.core.MethodParameter getMethodParameter()"
        ],
        [
            "org.springframework.web.server.ResponseStatusException",
            "org.springframework.web.server.ResponseStatusException(org.springframework.http.HttpStatus)",
            "public org.springframework.web.server.ResponseStatusException(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.server.ResponseStatusException",
            "org.springframework.web.server.ResponseStatusException(org.springframework.http.HttpStatus, java.lang.String)",
            "public org.springframework.web.server.ResponseStatusException(org.springframework.http.HttpStatus, java.lang.String)"
        ],
        [
            "org.springframework.web.server.ResponseStatusException",
            "org.springframework.web.server.ResponseStatusException(org.springframework.http.HttpStatus, java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.server.ResponseStatusException(org.springframework.http.HttpStatus, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.server.ResponseStatusException",
            "org.springframework.web.server.ResponseStatusException(int, java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.server.ResponseStatusException(int, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.server.ResponseStatusException.getStatus()",
            "public org.springframework.http.HttpStatus getStatus()"
        ],
        [
            "int",
            "org.springframework.web.server.ResponseStatusException.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.server.ResponseStatusException.getHeaders()",
            "public java.util.Map<java.lang.String, java.lang.String> getHeaders()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.server.ResponseStatusException.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.ResponseStatusException.getReason()",
            "public java.lang.String getReason()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.ResponseStatusException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "<T> T",
            "org.springframework.web.server.ServerWebExchange.getAttribute(java.lang.String)",
            "public default <T> T getAttribute(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.web.server.ServerWebExchange.getRequiredAttribute(java.lang.String)",
            "public default <T> T getRequiredAttribute(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.web.server.ServerWebExchange.getAttributeOrDefault(java.lang.String, T)",
            "public default <T> T getAttributeOrDefault(java.lang.String, T)"
        ],
        [
            "default",
            "org.springframework.web.server.ServerWebExchange.org.springframework.web.server.ServerWebExchange$Builder mutate()",
            "public default org.springframework.web.server.ServerWebExchange$Builder mutate()"
        ],
        [
            "<T> T",
            "org.springframework.web.server.WebSession.getAttribute(java.lang.String)",
            "public default <T> T getAttribute(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.web.server.WebSession.getRequiredAttribute(java.lang.String)",
            "public default <T> T getRequiredAttribute(java.lang.String)"
        ],
        [
            "<T> T",
            "org.springframework.web.server.WebSession.getAttributeOrDefault(java.lang.String, T)",
            "public default <T> T getAttributeOrDefault(java.lang.String, T)"
        ],
        [
            "org.springframework.web.server.session.DefaultWebSessionManager",
            "org.springframework.web.server.session.DefaultWebSessionManager()",
            "public org.springframework.web.server.session.DefaultWebSessionManager()"
        ],
        [
            "void",
            "org.springframework.web.server.session.DefaultWebSessionManager.setSessionIdResolver(org.springframework.web.server.session.WebSessionIdResolver)",
            "public void setSessionIdResolver(org.springframework.web.server.session.WebSessionIdResolver)"
        ],
        [
            "org.springframework.web.server.session.WebSessionIdResolver",
            "org.springframework.web.server.session.DefaultWebSessionManager.getSessionIdResolver()",
            "public org.springframework.web.server.session.WebSessionIdResolver getSessionIdResolver()"
        ],
        [
            "void",
            "org.springframework.web.server.session.DefaultWebSessionManager.setSessionStore(org.springframework.web.server.session.WebSessionStore)",
            "public void setSessionStore(org.springframework.web.server.session.WebSessionStore)"
        ],
        [
            "org.springframework.web.server.session.WebSessionStore",
            "org.springframework.web.server.session.DefaultWebSessionManager.getSessionStore()",
            "public org.springframework.web.server.session.WebSessionStore getSessionStore()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.server.session.DefaultWebSessionManager.getSession(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> getSession(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.server.session.CookieWebSessionIdResolver",
            "org.springframework.web.server.session.CookieWebSessionIdResolver()",
            "public org.springframework.web.server.session.CookieWebSessionIdResolver()"
        ],
        [
            "void",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.setCookieName(java.lang.String)",
            "public void setCookieName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.getCookieName()",
            "public java.lang.String getCookieName()"
        ],
        [
            "void",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.setCookieMaxAge(java.time.Duration)",
            "public void setCookieMaxAge(java.time.Duration)"
        ],
        [
            "java.time.Duration",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.getCookieMaxAge()",
            "public java.time.Duration getCookieMaxAge()"
        ],
        [
            "void",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.addCookieInitializer(java.util.function.Consumer<org.springframework.http.ResponseCookie$ResponseCookieBuilder>)",
            "public void addCookieInitializer(java.util.function.Consumer<org.springframework.http.ResponseCookie$ResponseCookieBuilder>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.resolveSessionIds(org.springframework.web.server.ServerWebExchange)",
            "public java.util.List<java.lang.String> resolveSessionIds(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "void",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.setSessionId(org.springframework.web.server.ServerWebExchange, java.lang.String)",
            "public void setSessionId(org.springframework.web.server.ServerWebExchange, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.server.session.CookieWebSessionIdResolver.expireSession(org.springframework.web.server.ServerWebExchange)",
            "public void expireSession(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.server.session.HeaderWebSessionIdResolver",
            "org.springframework.web.server.session.HeaderWebSessionIdResolver()",
            "public org.springframework.web.server.session.HeaderWebSessionIdResolver()"
        ],
        [
            "void",
            "org.springframework.web.server.session.HeaderWebSessionIdResolver.setHeaderName(java.lang.String)",
            "public void setHeaderName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.session.HeaderWebSessionIdResolver.getHeaderName()",
            "public java.lang.String getHeaderName()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.server.session.HeaderWebSessionIdResolver.resolveSessionIds(org.springframework.web.server.ServerWebExchange)",
            "public java.util.List<java.lang.String> resolveSessionIds(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "void",
            "org.springframework.web.server.session.HeaderWebSessionIdResolver.setSessionId(org.springframework.web.server.ServerWebExchange, java.lang.String)",
            "public void setSessionId(org.springframework.web.server.ServerWebExchange, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.server.session.HeaderWebSessionIdResolver.expireSession(org.springframework.web.server.ServerWebExchange)",
            "public void expireSession(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.server.session.InMemoryWebSessionStore$State[]",
            "org.springframework.web.server.session.InMemoryWebSessionStore$State.values()",
            "public static org.springframework.web.server.session.InMemoryWebSessionStore$State[] values()"
        ],
        [
            "org.springframework.web.server.session.InMemoryWebSessionStore$State",
            "org.springframework.web.server.session.InMemoryWebSessionStore$State.valueOf(java.lang.String)",
            "public static org.springframework.web.server.session.InMemoryWebSessionStore$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession(org.springframework.web.server.session.InMemoryWebSessionStore, java.time.Instant)",
            "public org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession(org.springframework.web.server.session.InMemoryWebSessionStore, java.time.Instant)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.getAttributes()",
            "public java.util.Map<java.lang.String, java.lang.Object> getAttributes()"
        ],
        [
            "java.time.Instant",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.getCreationTime()",
            "public java.time.Instant getCreationTime()"
        ],
        [
            "java.time.Instant",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.getLastAccessTime()",
            "public java.time.Instant getLastAccessTime()"
        ],
        [
            "void",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.setMaxIdleTime(java.time.Duration)",
            "public void setMaxIdleTime(java.time.Duration)"
        ],
        [
            "java.time.Duration",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.getMaxIdleTime()",
            "public java.time.Duration getMaxIdleTime()"
        ],
        [
            "void",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.start()",
            "public void start()"
        ],
        [
            "boolean",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.isStarted()",
            "public boolean isStarted()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.changeSessionId()",
            "public reactor.core.publisher.Mono<java.lang.Void> changeSessionId()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.invalidate()",
            "public reactor.core.publisher.Mono<java.lang.Void> invalidate()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.save()",
            "public reactor.core.publisher.Mono<java.lang.Void> save()"
        ],
        [
            "boolean",
            "org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.isExpired()",
            "public boolean isExpired()"
        ],
        [
            "org.springframework.web.server.session.InMemoryWebSessionStore",
            "org.springframework.web.server.session.InMemoryWebSessionStore()",
            "public org.springframework.web.server.session.InMemoryWebSessionStore()"
        ],
        [
            "void",
            "org.springframework.web.server.session.InMemoryWebSessionStore.setMaxSessions(int)",
            "public void setMaxSessions(int)"
        ],
        [
            "int",
            "org.springframework.web.server.session.InMemoryWebSessionStore.getMaxSessions()",
            "public int getMaxSessions()"
        ],
        [
            "void",
            "org.springframework.web.server.session.InMemoryWebSessionStore.setClock(java.time.Clock)",
            "public void setClock(java.time.Clock)"
        ],
        [
            "java.time.Clock",
            "org.springframework.web.server.session.InMemoryWebSessionStore.getClock()",
            "public java.time.Clock getClock()"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.web.server.WebSession>",
            "org.springframework.web.server.session.InMemoryWebSessionStore.getSessions()",
            "public java.util.Map<java.lang.String, org.springframework.web.server.WebSession> getSessions()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.server.session.InMemoryWebSessionStore.createWebSession()",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> createWebSession()"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.server.session.InMemoryWebSessionStore.retrieveSession(java.lang.String)",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> retrieveSession(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.server.session.InMemoryWebSessionStore.removeSession(java.lang.String)",
            "public reactor.core.publisher.Mono<java.lang.Void> removeSession(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.web.server.WebSession>",
            "org.springframework.web.server.session.InMemoryWebSessionStore.updateLastAccessTime(org.springframework.web.server.WebSession)",
            "public reactor.core.publisher.Mono<org.springframework.web.server.WebSession> updateLastAccessTime(org.springframework.web.server.WebSession)"
        ],
        [
            "void",
            "org.springframework.web.server.session.InMemoryWebSessionStore.removeExpiredSessions()",
            "public void removeExpiredSessions()"
        ],
        [
            "void",
            "org.springframework.web.server.session.InMemoryWebSessionStore$ExpiredSessionChecker.checkIfNecessary(java.time.Instant)",
            "public void checkIfNecessary(java.time.Instant)"
        ],
        [
            "void",
            "org.springframework.web.server.session.InMemoryWebSessionStore$ExpiredSessionChecker.removeExpiredSessions(java.time.Instant)",
            "public void removeExpiredSessions(java.time.Instant)"
        ],
        [
            "org.springframework.web.server.NotAcceptableStatusException",
            "org.springframework.web.server.NotAcceptableStatusException(java.lang.String)",
            "public org.springframework.web.server.NotAcceptableStatusException(java.lang.String)"
        ],
        [
            "org.springframework.web.server.NotAcceptableStatusException",
            "org.springframework.web.server.NotAcceptableStatusException(java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.server.NotAcceptableStatusException(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.server.NotAcceptableStatusException.getHeaders()",
            "public java.util.Map<java.lang.String, java.lang.String> getHeaders()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.server.NotAcceptableStatusException.getResponseHeaders()",
            "public org.springframework.http.HttpHeaders getResponseHeaders()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.server.NotAcceptableStatusException.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "org.springframework.web.HttpRequestMethodNotSupportedException",
            "org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String)",
            "public org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String)"
        ],
        [
            "org.springframework.web.HttpRequestMethodNotSupportedException",
            "org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.lang.String)",
            "public org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.HttpRequestMethodNotSupportedException",
            "org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.util.Collection<java.lang.String>)",
            "public org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.util.Collection<java.lang.String>)"
        ],
        [
            "org.springframework.web.HttpRequestMethodNotSupportedException",
            "org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.lang.String[])",
            "public org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.web.HttpRequestMethodNotSupportedException",
            "org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.lang.String[], java.lang.String)",
            "public org.springframework.web.HttpRequestMethodNotSupportedException(java.lang.String, java.lang.String[], java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.HttpRequestMethodNotSupportedException.getMethod()",
            "public java.lang.String getMethod()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.HttpRequestMethodNotSupportedException.getSupportedMethods()",
            "public java.lang.String[] getSupportedMethods()"
        ],
        [
            "java.util.Set<org.springframework.http.HttpMethod>",
            "org.springframework.web.HttpRequestMethodNotSupportedException.getSupportedHttpMethods()",
            "public java.util.Set<org.springframework.http.HttpMethod> getSupportedHttpMethods()"
        ],
        [
            "org.springframework.web.bind.WebDataBinder",
            "org.springframework.web.bind.WebDataBinder(java.lang.Object)",
            "public org.springframework.web.bind.WebDataBinder(java.lang.Object)"
        ],
        [
            "org.springframework.web.bind.WebDataBinder",
            "org.springframework.web.bind.WebDataBinder(java.lang.Object, java.lang.String)",
            "public org.springframework.web.bind.WebDataBinder(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.WebDataBinder.setFieldMarkerPrefix(java.lang.String)",
            "public void setFieldMarkerPrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.WebDataBinder.getFieldMarkerPrefix()",
            "public java.lang.String getFieldMarkerPrefix()"
        ],
        [
            "void",
            "org.springframework.web.bind.WebDataBinder.setFieldDefaultPrefix(java.lang.String)",
            "public void setFieldDefaultPrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.WebDataBinder.getFieldDefaultPrefix()",
            "public java.lang.String getFieldDefaultPrefix()"
        ],
        [
            "void",
            "org.springframework.web.bind.WebDataBinder.setBindEmptyMultipartFiles(boolean)",
            "public void setBindEmptyMultipartFiles(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.bind.WebDataBinder.isBindEmptyMultipartFiles()",
            "public boolean isBindEmptyMultipartFiles()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.bind.WebDataBinder.getEmptyValue(java.lang.Class<?>)",
            "public java.lang.Object getEmptyValue(java.lang.Class<?>)"
        ],
        [
            "org.springframework.web.bind.MissingRequestValueException",
            "org.springframework.web.bind.MissingRequestValueException(java.lang.String)",
            "public org.springframework.web.bind.MissingRequestValueException(java.lang.String)"
        ],
        [
            "org.springframework.web.bind.MissingRequestValueException",
            "org.springframework.web.bind.MissingRequestValueException(java.lang.String, boolean)",
            "public org.springframework.web.bind.MissingRequestValueException(java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.bind.MissingRequestValueException.isMissingAfterConversion()",
            "public boolean isMissingAfterConversion()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.ServletRequestUtils$BooleanParser.parseBoolean(java.lang.String, java.lang.String)",
            "public boolean parseBoolean(java.lang.String, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "boolean[]",
            "org.springframework.web.bind.ServletRequestUtils$BooleanParser.parseBooleans(java.lang.String, java.lang.String[])",
            "public boolean[] parseBooleans(java.lang.String, java.lang.String[]) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "int",
            "org.springframework.web.bind.ServletRequestUtils$IntParser.parseInt(java.lang.String, java.lang.String)",
            "public int parseInt(java.lang.String, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "int[]",
            "org.springframework.web.bind.ServletRequestUtils$IntParser.parseInts(java.lang.String, java.lang.String[])",
            "public int[] parseInts(java.lang.String, java.lang.String[]) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException",
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException(java.lang.String[], java.util.Map<java.lang.String, java.lang.String[]>)",
            "public org.springframework.web.bind.UnsatisfiedServletRequestParameterException(java.lang.String[], java.util.Map<java.lang.String, java.lang.String[]>)"
        ],
        [
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException",
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException(java.util.List<java.lang.String[]>, java.util.Map<java.lang.String, java.lang.String[]>)",
            "public org.springframework.web.bind.UnsatisfiedServletRequestParameterException(java.util.List<java.lang.String[]>, java.util.Map<java.lang.String, java.lang.String[]>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException.getParamConditions()",
            "public final java.lang.String[] getParamConditions()"
        ],
        [
            "java.util.List<java.lang.String[]>",
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException.getParamConditionGroups()",
            "public final java.util.List<java.lang.String[]> getParamConditionGroups()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.bind.UnsatisfiedServletRequestParameterException.getActualParams()",
            "public final java.util.Map<java.lang.String, java.lang.String[]> getActualParams()"
        ],
        [
            "org.springframework.web.bind.MethodArgumentNotValidException",
            "org.springframework.web.bind.MethodArgumentNotValidException(org.springframework.core.MethodParameter, org.springframework.validation.BindingResult)",
            "public org.springframework.web.bind.MethodArgumentNotValidException(org.springframework.core.MethodParameter, org.springframework.validation.BindingResult)"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.bind.MethodArgumentNotValidException.getParameter()",
            "public final org.springframework.core.MethodParameter getParameter()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MethodArgumentNotValidException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "org.springframework.web.bind.ServletRequestDataBinder",
            "org.springframework.web.bind.ServletRequestDataBinder(java.lang.Object)",
            "public org.springframework.web.bind.ServletRequestDataBinder(java.lang.Object)"
        ],
        [
            "org.springframework.web.bind.ServletRequestDataBinder",
            "org.springframework.web.bind.ServletRequestDataBinder(java.lang.Object, java.lang.String)",
            "public org.springframework.web.bind.ServletRequestDataBinder(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.ServletRequestDataBinder.bind(javax.servlet.ServletRequest)",
            "public void bind(javax.servlet.ServletRequest)"
        ],
        [
            "void",
            "org.springframework.web.bind.ServletRequestDataBinder.closeNoCatch()",
            "public void closeNoCatch() throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "org.springframework.web.bind.MissingMatrixVariableException",
            "org.springframework.web.bind.MissingMatrixVariableException(java.lang.String, org.springframework.core.MethodParameter)",
            "public org.springframework.web.bind.MissingMatrixVariableException(java.lang.String, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.bind.MissingMatrixVariableException",
            "org.springframework.web.bind.MissingMatrixVariableException(java.lang.String, org.springframework.core.MethodParameter, boolean)",
            "public org.springframework.web.bind.MissingMatrixVariableException(java.lang.String, org.springframework.core.MethodParameter, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingMatrixVariableException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingMatrixVariableException.getVariableName()",
            "public final java.lang.String getVariableName()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.bind.MissingMatrixVariableException.getParameter()",
            "public final org.springframework.core.MethodParameter getParameter()"
        ],
        [
            "org.springframework.web.bind.MissingPathVariableException",
            "org.springframework.web.bind.MissingPathVariableException(java.lang.String, org.springframework.core.MethodParameter)",
            "public org.springframework.web.bind.MissingPathVariableException(java.lang.String, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.bind.MissingPathVariableException",
            "org.springframework.web.bind.MissingPathVariableException(java.lang.String, org.springframework.core.MethodParameter, boolean)",
            "public org.springframework.web.bind.MissingPathVariableException(java.lang.String, org.springframework.core.MethodParameter, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingPathVariableException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingPathVariableException.getVariableName()",
            "public final java.lang.String getVariableName()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.bind.MissingPathVariableException.getParameter()",
            "public final org.springframework.core.MethodParameter getParameter()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.ServletRequestUtils$StringParser.validateRequiredString(java.lang.String, java.lang.String)",
            "public java.lang.String validateRequiredString(java.lang.String, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.bind.ServletRequestUtils$StringParser.validateRequiredStrings(java.lang.String, java.lang.String[])",
            "public java.lang.String[] validateRequiredStrings(java.lang.String, java.lang.String[]) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "long",
            "org.springframework.web.bind.ServletRequestUtils$LongParser.parseLong(java.lang.String, java.lang.String)",
            "public long parseLong(java.lang.String, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "long[]",
            "org.springframework.web.bind.ServletRequestUtils$LongParser.parseLongs(java.lang.String, java.lang.String[])",
            "public long[] parseLongs(java.lang.String, java.lang.String[]) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "org.springframework.web.bind.support.DefaultSessionAttributeStore",
            "org.springframework.web.bind.support.DefaultSessionAttributeStore()",
            "public org.springframework.web.bind.support.DefaultSessionAttributeStore()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.DefaultSessionAttributeStore.setAttributeNamePrefix(java.lang.String)",
            "public void setAttributeNamePrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.DefaultSessionAttributeStore.storeAttribute(org.springframework.web.context.request.WebRequest, java.lang.String, java.lang.Object)",
            "public void storeAttribute(org.springframework.web.context.request.WebRequest, java.lang.String, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.bind.support.DefaultSessionAttributeStore.retrieveAttribute(org.springframework.web.context.request.WebRequest, java.lang.String)",
            "public java.lang.Object retrieveAttribute(org.springframework.web.context.request.WebRequest, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.DefaultSessionAttributeStore.cleanupAttribute(org.springframework.web.context.request.WebRequest, java.lang.String)",
            "public void cleanupAttribute(org.springframework.web.context.request.WebRequest, java.lang.String)"
        ],
        [
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer()",
            "public org.springframework.web.bind.support.ConfigurableWebBindingInitializer()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setAutoGrowNestedPaths(boolean)",
            "public void setAutoGrowNestedPaths(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.isAutoGrowNestedPaths()",
            "public boolean isAutoGrowNestedPaths()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setDirectFieldAccess(boolean)",
            "public final void setDirectFieldAccess(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.isDirectFieldAccess()",
            "public boolean isDirectFieldAccess()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)",
            "public final void setMessageCodesResolver(org.springframework.validation.MessageCodesResolver)"
        ],
        [
            "org.springframework.validation.MessageCodesResolver",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.getMessageCodesResolver()",
            "public final org.springframework.validation.MessageCodesResolver getMessageCodesResolver()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)",
            "public final void setBindingErrorProcessor(org.springframework.validation.BindingErrorProcessor)"
        ],
        [
            "org.springframework.validation.BindingErrorProcessor",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.getBindingErrorProcessor()",
            "public final org.springframework.validation.BindingErrorProcessor getBindingErrorProcessor()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setValidator(org.springframework.validation.Validator)",
            "public final void setValidator(org.springframework.validation.Validator)"
        ],
        [
            "org.springframework.validation.Validator",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.getValidator()",
            "public final org.springframework.validation.Validator getValidator()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setConversionService(org.springframework.core.convert.ConversionService)",
            "public final void setConversionService(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.core.convert.ConversionService",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.getConversionService()",
            "public final org.springframework.core.convert.ConversionService getConversionService()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)",
            "public final void setPropertyEditorRegistrar(org.springframework.beans.PropertyEditorRegistrar)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.setPropertyEditorRegistrars(org.springframework.beans.PropertyEditorRegistrar[])",
            "public final void setPropertyEditorRegistrars(org.springframework.beans.PropertyEditorRegistrar[])"
        ],
        [
            "org.springframework.beans.PropertyEditorRegistrar[]",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.getPropertyEditorRegistrars()",
            "public final org.springframework.beans.PropertyEditorRegistrar[] getPropertyEditorRegistrars()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.ConfigurableWebBindingInitializer.initBinder(org.springframework.web.bind.WebDataBinder)",
            "public void initBinder(org.springframework.web.bind.WebDataBinder)"
        ],
        [
            "default",
            "org.springframework.web.bind.support.WebBindingInitializer.initBinder(org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.WebRequest)",
            "public default void initBinder(org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.WebRequest)"
        ],
        [
            "org.springframework.web.bind.support.WebExchangeDataBinder",
            "org.springframework.web.bind.support.WebExchangeDataBinder(java.lang.Object)",
            "public org.springframework.web.bind.support.WebExchangeDataBinder(java.lang.Object)"
        ],
        [
            "org.springframework.web.bind.support.WebExchangeDataBinder",
            "org.springframework.web.bind.support.WebExchangeDataBinder(java.lang.Object, java.lang.String)",
            "public org.springframework.web.bind.support.WebExchangeDataBinder(java.lang.Object, java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.bind.support.WebExchangeDataBinder.bind(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.lang.Void> bind(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.web.bind.support.WebExchangeDataBinder.getValuesToBind(org.springframework.web.server.ServerWebExchange)",
            "public reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>> getValuesToBind(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>>",
            "org.springframework.web.bind.support.WebExchangeDataBinder.extractValuesToBind(org.springframework.web.server.ServerWebExchange)",
            "public static reactor.core.publisher.Mono<java.util.Map<java.lang.String, java.lang.Object>> extractValuesToBind(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.bind.support.SpringWebConstraintValidatorFactory",
            "org.springframework.web.bind.support.SpringWebConstraintValidatorFactory()",
            "public org.springframework.web.bind.support.SpringWebConstraintValidatorFactory()"
        ],
        [
            "<T extends javax.validation.ConstraintValidator<?, ?>> T",
            "org.springframework.web.bind.support.SpringWebConstraintValidatorFactory.getInstance(java.lang.Class<T>)",
            "public <T extends javax.validation.ConstraintValidator<?, ?>> T getInstance(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.SpringWebConstraintValidatorFactory.releaseInstance(javax.validation.ConstraintValidator<?, ?>)",
            "public void releaseInstance(javax.validation.ConstraintValidator<?, ?>)"
        ],
        [
            "org.springframework.web.bind.support.WebRequestDataBinder",
            "org.springframework.web.bind.support.WebRequestDataBinder(java.lang.Object)",
            "public org.springframework.web.bind.support.WebRequestDataBinder(java.lang.Object)"
        ],
        [
            "org.springframework.web.bind.support.WebRequestDataBinder",
            "org.springframework.web.bind.support.WebRequestDataBinder(java.lang.Object, java.lang.String)",
            "public org.springframework.web.bind.support.WebRequestDataBinder(java.lang.Object, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebRequestDataBinder.bind(org.springframework.web.context.request.WebRequest)",
            "public void bind(org.springframework.web.context.request.WebRequest)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebRequestDataBinder.closeNoCatch()",
            "public void closeNoCatch() throws org.springframework.validation.BindException"
        ],
        [
            "org.springframework.web.bind.support.WebExchangeBindException",
            "org.springframework.web.bind.support.WebExchangeBindException(org.springframework.core.MethodParameter, org.springframework.validation.BindingResult)",
            "public org.springframework.web.bind.support.WebExchangeBindException(org.springframework.core.MethodParameter, org.springframework.validation.BindingResult)"
        ],
        [
            "org.springframework.validation.BindingResult",
            "org.springframework.web.bind.support.WebExchangeBindException.getBindingResult()",
            "public final org.springframework.validation.BindingResult getBindingResult()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.support.WebExchangeBindException.getObjectName()",
            "public java.lang.String getObjectName()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.setNestedPath(java.lang.String)",
            "public void setNestedPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.support.WebExchangeBindException.getNestedPath()",
            "public java.lang.String getNestedPath()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.pushNestedPath(java.lang.String)",
            "public void pushNestedPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.popNestedPath()",
            "public void popNestedPath() throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.reject(java.lang.String)",
            "public void reject(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.reject(java.lang.String, java.lang.String)",
            "public void reject(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.reject(java.lang.String, java.lang.Object[], java.lang.String)",
            "public void reject(java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.rejectValue(java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.rejectValue(java.lang.String, java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.addAllErrors(org.springframework.validation.Errors)",
            "public void addAllErrors(org.springframework.validation.Errors)"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.WebExchangeBindException.hasErrors()",
            "public boolean hasErrors()"
        ],
        [
            "int",
            "org.springframework.web.bind.support.WebExchangeBindException.getErrorCount()",
            "public int getErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.web.bind.support.WebExchangeBindException.getAllErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getAllErrors()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.WebExchangeBindException.hasGlobalErrors()",
            "public boolean hasGlobalErrors()"
        ],
        [
            "int",
            "org.springframework.web.bind.support.WebExchangeBindException.getGlobalErrorCount()",
            "public int getGlobalErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.web.bind.support.WebExchangeBindException.getGlobalErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getGlobalErrors()"
        ],
        [
            "org.springframework.validation.ObjectError",
            "org.springframework.web.bind.support.WebExchangeBindException.getGlobalError()",
            "public org.springframework.validation.ObjectError getGlobalError()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.WebExchangeBindException.hasFieldErrors()",
            "public boolean hasFieldErrors()"
        ],
        [
            "int",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldErrorCount()",
            "public int getFieldErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldErrors()",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors()"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldError()",
            "public org.springframework.validation.FieldError getFieldError()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.WebExchangeBindException.hasFieldErrors(java.lang.String)",
            "public boolean hasFieldErrors(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldErrorCount(java.lang.String)",
            "public int getFieldErrorCount(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldErrors(java.lang.String)",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors(java.lang.String)"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldError(java.lang.String)",
            "public org.springframework.validation.FieldError getFieldError(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldValue(java.lang.String)",
            "public java.lang.Object getFieldValue(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.bind.support.WebExchangeBindException.getFieldType(java.lang.String)",
            "public java.lang.Class<?> getFieldType(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.bind.support.WebExchangeBindException.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.bind.support.WebExchangeBindException.getModel()",
            "public java.util.Map<java.lang.String, java.lang.Object> getModel()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.bind.support.WebExchangeBindException.getRawFieldValue(java.lang.String)",
            "public java.lang.Object getRawFieldValue(java.lang.String)"
        ],
        [
            "java.beans.PropertyEditor",
            "org.springframework.web.bind.support.WebExchangeBindException.findEditor(java.lang.String, java.lang.Class)",
            "public java.beans.PropertyEditor findEditor(java.lang.String, java.lang.Class)"
        ],
        [
            "org.springframework.beans.PropertyEditorRegistry",
            "org.springframework.web.bind.support.WebExchangeBindException.getPropertyEditorRegistry()",
            "public org.springframework.beans.PropertyEditorRegistry getPropertyEditorRegistry()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.bind.support.WebExchangeBindException.resolveMessageCodes(java.lang.String)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.bind.support.WebExchangeBindException.resolveMessageCodes(java.lang.String, java.lang.String)",
            "public java.lang.String[] resolveMessageCodes(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.addError(org.springframework.validation.ObjectError)",
            "public void addError(org.springframework.validation.ObjectError)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)",
            "public void recordFieldValue(java.lang.String, java.lang.Class<?>, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.web.bind.support.WebExchangeBindException.recordSuppressedField(java.lang.String)",
            "public void recordSuppressedField(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.bind.support.WebExchangeBindException.getSuppressedFields()",
            "public java.lang.String[] getSuppressedFields()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.support.WebExchangeBindException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.WebExchangeBindException.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.bind.support.WebExchangeBindException.hashCode()",
            "public int hashCode()"
        ],
        [
            "org.springframework.web.bind.support.DefaultDataBinderFactory",
            "org.springframework.web.bind.support.DefaultDataBinderFactory(org.springframework.web.bind.support.WebBindingInitializer)",
            "public org.springframework.web.bind.support.DefaultDataBinderFactory(org.springframework.web.bind.support.WebBindingInitializer)"
        ],
        [
            "org.springframework.web.bind.WebDataBinder",
            "org.springframework.web.bind.support.DefaultDataBinderFactory.createBinder(org.springframework.web.context.request.NativeWebRequest, java.lang.Object, java.lang.String)",
            "public final org.springframework.web.bind.WebDataBinder createBinder(org.springframework.web.context.request.NativeWebRequest, java.lang.Object, java.lang.String) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.bind.support.SimpleSessionStatus",
            "org.springframework.web.bind.support.SimpleSessionStatus()",
            "public org.springframework.web.bind.support.SimpleSessionStatus()"
        ],
        [
            "void",
            "org.springframework.web.bind.support.SimpleSessionStatus.setComplete()",
            "public void setComplete()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.support.SimpleSessionStatus.isComplete()",
            "public boolean isComplete()"
        ],
        [
            "org.springframework.web.bind.MissingServletRequestParameterException",
            "org.springframework.web.bind.MissingServletRequestParameterException(java.lang.String, java.lang.String)",
            "public org.springframework.web.bind.MissingServletRequestParameterException(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.bind.MissingServletRequestParameterException",
            "org.springframework.web.bind.MissingServletRequestParameterException(java.lang.String, java.lang.String, boolean)",
            "public org.springframework.web.bind.MissingServletRequestParameterException(java.lang.String, java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingServletRequestParameterException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingServletRequestParameterException.getParameterName()",
            "public final java.lang.String getParameterName()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingServletRequestParameterException.getParameterType()",
            "public final java.lang.String getParameterType()"
        ],
        [
            "float",
            "org.springframework.web.bind.ServletRequestUtils$FloatParser.parseFloat(java.lang.String, java.lang.String)",
            "public float parseFloat(java.lang.String, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "float[]",
            "org.springframework.web.bind.ServletRequestUtils$FloatParser.parseFloats(java.lang.String, java.lang.String[])",
            "public float[] parseFloats(java.lang.String, java.lang.String[]) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "org.springframework.web.bind.MissingRequestCookieException",
            "org.springframework.web.bind.MissingRequestCookieException(java.lang.String, org.springframework.core.MethodParameter)",
            "public org.springframework.web.bind.MissingRequestCookieException(java.lang.String, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.bind.MissingRequestCookieException",
            "org.springframework.web.bind.MissingRequestCookieException(java.lang.String, org.springframework.core.MethodParameter, boolean)",
            "public org.springframework.web.bind.MissingRequestCookieException(java.lang.String, org.springframework.core.MethodParameter, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingRequestCookieException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingRequestCookieException.getCookieName()",
            "public final java.lang.String getCookieName()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.bind.MissingRequestCookieException.getParameter()",
            "public final org.springframework.core.MethodParameter getParameter()"
        ],
        [
            "org.springframework.web.bind.annotation.RequestMethod[]",
            "org.springframework.web.bind.annotation.RequestMethod.values()",
            "public static org.springframework.web.bind.annotation.RequestMethod[] values()"
        ],
        [
            "org.springframework.web.bind.annotation.RequestMethod",
            "org.springframework.web.bind.annotation.RequestMethod.valueOf(java.lang.String)",
            "public static org.springframework.web.bind.annotation.RequestMethod valueOf(java.lang.String)"
        ],
        [
            "org.springframework.web.bind.ServletRequestBindingException",
            "org.springframework.web.bind.ServletRequestBindingException(java.lang.String)",
            "public org.springframework.web.bind.ServletRequestBindingException(java.lang.String)"
        ],
        [
            "org.springframework.web.bind.ServletRequestBindingException",
            "org.springframework.web.bind.ServletRequestBindingException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.bind.ServletRequestBindingException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.bind.MissingRequestHeaderException",
            "org.springframework.web.bind.MissingRequestHeaderException(java.lang.String, org.springframework.core.MethodParameter)",
            "public org.springframework.web.bind.MissingRequestHeaderException(java.lang.String, org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.bind.MissingRequestHeaderException",
            "org.springframework.web.bind.MissingRequestHeaderException(java.lang.String, org.springframework.core.MethodParameter, boolean)",
            "public org.springframework.web.bind.MissingRequestHeaderException(java.lang.String, org.springframework.core.MethodParameter, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingRequestHeaderException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.MissingRequestHeaderException.getHeaderName()",
            "public final java.lang.String getHeaderName()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.bind.MissingRequestHeaderException.getParameter()",
            "public final org.springframework.core.MethodParameter getParameter()"
        ],
        [
            "org.springframework.web.bind.ServletRequestParameterPropertyValues",
            "org.springframework.web.bind.ServletRequestParameterPropertyValues(javax.servlet.ServletRequest)",
            "public org.springframework.web.bind.ServletRequestParameterPropertyValues(javax.servlet.ServletRequest)"
        ],
        [
            "org.springframework.web.bind.ServletRequestParameterPropertyValues",
            "org.springframework.web.bind.ServletRequestParameterPropertyValues(javax.servlet.ServletRequest, java.lang.String)",
            "public org.springframework.web.bind.ServletRequestParameterPropertyValues(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "org.springframework.web.bind.ServletRequestParameterPropertyValues",
            "org.springframework.web.bind.ServletRequestParameterPropertyValues(javax.servlet.ServletRequest, java.lang.String, java.lang.String)",
            "public org.springframework.web.bind.ServletRequestParameterPropertyValues(javax.servlet.ServletRequest, java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.web.bind.EscapedErrors",
            "org.springframework.web.bind.EscapedErrors(org.springframework.validation.Errors)",
            "public org.springframework.web.bind.EscapedErrors(org.springframework.validation.Errors)"
        ],
        [
            "org.springframework.validation.Errors",
            "org.springframework.web.bind.EscapedErrors.getSource()",
            "public org.springframework.validation.Errors getSource()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.EscapedErrors.getObjectName()",
            "public java.lang.String getObjectName()"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.setNestedPath(java.lang.String)",
            "public void setNestedPath(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.EscapedErrors.getNestedPath()",
            "public java.lang.String getNestedPath()"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.pushNestedPath(java.lang.String)",
            "public void pushNestedPath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.popNestedPath()",
            "public void popNestedPath() throws java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.reject(java.lang.String)",
            "public void reject(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.reject(java.lang.String, java.lang.String)",
            "public void reject(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.reject(java.lang.String, java.lang.Object[], java.lang.String)",
            "public void reject(java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.rejectValue(java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.rejectValue(java.lang.String, java.lang.String, java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)",
            "public void rejectValue(java.lang.String, java.lang.String, java.lang.Object[], java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.bind.EscapedErrors.addAllErrors(org.springframework.validation.Errors)",
            "public void addAllErrors(org.springframework.validation.Errors)"
        ],
        [
            "boolean",
            "org.springframework.web.bind.EscapedErrors.hasErrors()",
            "public boolean hasErrors()"
        ],
        [
            "int",
            "org.springframework.web.bind.EscapedErrors.getErrorCount()",
            "public int getErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.web.bind.EscapedErrors.getAllErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getAllErrors()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.EscapedErrors.hasGlobalErrors()",
            "public boolean hasGlobalErrors()"
        ],
        [
            "int",
            "org.springframework.web.bind.EscapedErrors.getGlobalErrorCount()",
            "public int getGlobalErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.ObjectError>",
            "org.springframework.web.bind.EscapedErrors.getGlobalErrors()",
            "public java.util.List<org.springframework.validation.ObjectError> getGlobalErrors()"
        ],
        [
            "org.springframework.validation.ObjectError",
            "org.springframework.web.bind.EscapedErrors.getGlobalError()",
            "public org.springframework.validation.ObjectError getGlobalError()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.EscapedErrors.hasFieldErrors()",
            "public boolean hasFieldErrors()"
        ],
        [
            "int",
            "org.springframework.web.bind.EscapedErrors.getFieldErrorCount()",
            "public int getFieldErrorCount()"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.web.bind.EscapedErrors.getFieldErrors()",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors()"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.web.bind.EscapedErrors.getFieldError()",
            "public org.springframework.validation.FieldError getFieldError()"
        ],
        [
            "boolean",
            "org.springframework.web.bind.EscapedErrors.hasFieldErrors(java.lang.String)",
            "public boolean hasFieldErrors(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.web.bind.EscapedErrors.getFieldErrorCount(java.lang.String)",
            "public int getFieldErrorCount(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.validation.FieldError>",
            "org.springframework.web.bind.EscapedErrors.getFieldErrors(java.lang.String)",
            "public java.util.List<org.springframework.validation.FieldError> getFieldErrors(java.lang.String)"
        ],
        [
            "org.springframework.validation.FieldError",
            "org.springframework.web.bind.EscapedErrors.getFieldError(java.lang.String)",
            "public org.springframework.validation.FieldError getFieldError(java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.bind.EscapedErrors.getFieldValue(java.lang.String)",
            "public java.lang.Object getFieldValue(java.lang.String)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.bind.EscapedErrors.getFieldType(java.lang.String)",
            "public java.lang.Class<?> getFieldType(java.lang.String)"
        ],
        [
            "org.springframework.web.bind.ServletRequestUtils",
            "org.springframework.web.bind.ServletRequestUtils()",
            "public org.springframework.web.bind.ServletRequestUtils()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.web.bind.ServletRequestUtils.getIntParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.Integer getIntParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "int",
            "org.springframework.web.bind.ServletRequestUtils.getIntParameter(javax.servlet.ServletRequest, java.lang.String, int)",
            "public static int getIntParameter(javax.servlet.ServletRequest, java.lang.String, int)"
        ],
        [
            "int[]",
            "org.springframework.web.bind.ServletRequestUtils.getIntParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static int[] getIntParameters(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "int",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredIntParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static int getRequiredIntParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "int[]",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredIntParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static int[] getRequiredIntParameters(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.bind.ServletRequestUtils.getLongParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.Long getLongParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "long",
            "org.springframework.web.bind.ServletRequestUtils.getLongParameter(javax.servlet.ServletRequest, java.lang.String, long)",
            "public static long getLongParameter(javax.servlet.ServletRequest, java.lang.String, long)"
        ],
        [
            "long[]",
            "org.springframework.web.bind.ServletRequestUtils.getLongParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static long[] getLongParameters(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "long",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredLongParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static long getRequiredLongParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "long[]",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredLongParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static long[] getRequiredLongParameters(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.Float",
            "org.springframework.web.bind.ServletRequestUtils.getFloatParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.Float getFloatParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "float",
            "org.springframework.web.bind.ServletRequestUtils.getFloatParameter(javax.servlet.ServletRequest, java.lang.String, float)",
            "public static float getFloatParameter(javax.servlet.ServletRequest, java.lang.String, float)"
        ],
        [
            "float[]",
            "org.springframework.web.bind.ServletRequestUtils.getFloatParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static float[] getFloatParameters(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "float",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredFloatParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static float getRequiredFloatParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "float[]",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredFloatParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static float[] getRequiredFloatParameters(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.Double",
            "org.springframework.web.bind.ServletRequestUtils.getDoubleParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.Double getDoubleParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "double",
            "org.springframework.web.bind.ServletRequestUtils.getDoubleParameter(javax.servlet.ServletRequest, java.lang.String, double)",
            "public static double getDoubleParameter(javax.servlet.ServletRequest, java.lang.String, double)"
        ],
        [
            "double[]",
            "org.springframework.web.bind.ServletRequestUtils.getDoubleParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static double[] getDoubleParameters(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "double",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredDoubleParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static double getRequiredDoubleParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "double[]",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredDoubleParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static double[] getRequiredDoubleParameters(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.web.bind.ServletRequestUtils.getBooleanParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.Boolean getBooleanParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "boolean",
            "org.springframework.web.bind.ServletRequestUtils.getBooleanParameter(javax.servlet.ServletRequest, java.lang.String, boolean)",
            "public static boolean getBooleanParameter(javax.servlet.ServletRequest, java.lang.String, boolean)"
        ],
        [
            "boolean[]",
            "org.springframework.web.bind.ServletRequestUtils.getBooleanParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static boolean[] getBooleanParameters(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredBooleanParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static boolean getRequiredBooleanParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "boolean[]",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredBooleanParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static boolean[] getRequiredBooleanParameters(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.ServletRequestUtils.getStringParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.String getStringParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.ServletRequestUtils.getStringParameter(javax.servlet.ServletRequest, java.lang.String, java.lang.String)",
            "public static java.lang.String getStringParameter(javax.servlet.ServletRequest, java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.bind.ServletRequestUtils.getStringParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.String[] getStringParameters(javax.servlet.ServletRequest, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredStringParameter(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.String getRequiredStringParameter(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.bind.ServletRequestUtils.getRequiredStringParameters(javax.servlet.ServletRequest, java.lang.String)",
            "public static java.lang.String[] getRequiredStringParameters(javax.servlet.ServletRequest, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "double",
            "org.springframework.web.bind.ServletRequestUtils$DoubleParser.parseDouble(java.lang.String, java.lang.String)",
            "public double parseDouble(java.lang.String, java.lang.String) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "double[]",
            "org.springframework.web.bind.ServletRequestUtils$DoubleParser.parseDoubles(java.lang.String, java.lang.String[])",
            "public double[] parseDoubles(java.lang.String, java.lang.String[]) throws org.springframework.web.bind.ServletRequestBindingException"
        ],
        [
            "org.springframework.web.HttpSessionRequiredException",
            "org.springframework.web.HttpSessionRequiredException(java.lang.String)",
            "public org.springframework.web.HttpSessionRequiredException(java.lang.String)"
        ],
        [
            "org.springframework.web.HttpSessionRequiredException",
            "org.springframework.web.HttpSessionRequiredException(java.lang.String, java.lang.String)",
            "public org.springframework.web.HttpSessionRequiredException(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.HttpSessionRequiredException.getExpectedAttribute()",
            "public java.lang.String getExpectedAttribute()"
        ],
        [
            "org.springframework.web.filter.HiddenHttpMethodFilter$HttpMethodRequestWrapper",
            "org.springframework.web.filter.HiddenHttpMethodFilter$HttpMethodRequestWrapper(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public org.springframework.web.filter.HiddenHttpMethodFilter$HttpMethodRequestWrapper(javax.servlet.http.HttpServletRequest, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.HiddenHttpMethodFilter$HttpMethodRequestWrapper.getMethod()",
            "public java.lang.String getMethod()"
        ],
        [
            "org.springframework.web.filter.CorsFilter",
            "org.springframework.web.filter.CorsFilter(org.springframework.web.cors.CorsConfigurationSource)",
            "public org.springframework.web.filter.CorsFilter(org.springframework.web.cors.CorsConfigurationSource)"
        ],
        [
            "void",
            "org.springframework.web.filter.CorsFilter.setCorsProcessor(org.springframework.web.cors.CorsProcessor)",
            "public void setCorsProcessor(org.springframework.web.cors.CorsProcessor)"
        ],
        [
            "org.springframework.web.filter.HttpPutFormContentFilter$HttpPutFormContentRequestWrapper",
            "org.springframework.web.filter.HttpPutFormContentFilter$HttpPutFormContentRequestWrapper(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.web.filter.HttpPutFormContentFilter$HttpPutFormContentRequestWrapper(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.HttpPutFormContentFilter$HttpPutFormContentRequestWrapper.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.filter.HttpPutFormContentFilter$HttpPutFormContentRequestWrapper.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.web.filter.HttpPutFormContentFilter$HttpPutFormContentRequestWrapper.getParameterNames()",
            "public java.util.Enumeration<java.lang.String> getParameterNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.filter.HttpPutFormContentFilter$HttpPutFormContentRequestWrapper.getParameterValues(java.lang.String)",
            "public java.lang.String[] getParameterValues(java.lang.String)"
        ],
        [
            "org.springframework.web.filter.OncePerRequestFilter",
            "org.springframework.web.filter.OncePerRequestFilter()",
            "public org.springframework.web.filter.OncePerRequestFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.OncePerRequestFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)",
            "public final void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "org.springframework.web.filter.HiddenHttpMethodFilter",
            "org.springframework.web.filter.HiddenHttpMethodFilter()",
            "public org.springframework.web.filter.HiddenHttpMethodFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.HiddenHttpMethodFilter.setMethodParam(java.lang.String)",
            "public void setMethodParam(java.lang.String)"
        ],
        [
            "org.springframework.web.filter.AbstractRequestLoggingFilter",
            "org.springframework.web.filter.AbstractRequestLoggingFilter()",
            "public org.springframework.web.filter.AbstractRequestLoggingFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setIncludeQueryString(boolean)",
            "public void setIncludeQueryString(boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setIncludeClientInfo(boolean)",
            "public void setIncludeClientInfo(boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setIncludeHeaders(boolean)",
            "public void setIncludeHeaders(boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setIncludePayload(boolean)",
            "public void setIncludePayload(boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setHeaderPredicate(java.util.function.Predicate<java.lang.String>)",
            "public void setHeaderPredicate(java.util.function.Predicate<java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setMaxPayloadLength(int)",
            "public void setMaxPayloadLength(int)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setBeforeMessagePrefix(java.lang.String)",
            "public void setBeforeMessagePrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setBeforeMessageSuffix(java.lang.String)",
            "public void setBeforeMessageSuffix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setAfterMessagePrefix(java.lang.String)",
            "public void setAfterMessagePrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.filter.AbstractRequestLoggingFilter.setAfterMessageSuffix(java.lang.String)",
            "public void setAfterMessageSuffix(java.lang.String)"
        ],
        [
            "org.springframework.web.filter.GenericFilterBean$FilterConfigPropertyValues",
            "org.springframework.web.filter.GenericFilterBean$FilterConfigPropertyValues(javax.servlet.FilterConfig, java.util.Set<java.lang.String>)",
            "public org.springframework.web.filter.GenericFilterBean$FilterConfigPropertyValues(javax.servlet.FilterConfig, java.util.Set<java.lang.String>) throws javax.servlet.ServletException"
        ],
        [
            "org.springframework.web.filter.RelativeRedirectFilter",
            "org.springframework.web.filter.RelativeRedirectFilter()",
            "public org.springframework.web.filter.RelativeRedirectFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.RelativeRedirectFilter.setRedirectStatus(org.springframework.http.HttpStatus)",
            "public void setRedirectStatus(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.filter.RelativeRedirectFilter.getRedirectStatus()",
            "public org.springframework.http.HttpStatus getRedirectStatus()"
        ],
        [
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor(java.util.function.Supplier<javax.servlet.http.HttpServletRequest>, java.lang.String)",
            "public org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor(java.util.function.Supplier<javax.servlet.http.HttpServletRequest>, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.getContextPath()",
            "public java.lang.String getContextPath()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.getRequestUri()",
            "public java.lang.String getRequestUri()"
        ],
        [
            "java.lang.StringBuffer",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.getRequestUrl()",
            "public java.lang.StringBuffer getRequestUrl()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.filter.HttpPutFormContentFilter$1.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.web.filter.FormContentFilter$FormContentRequestWrapper",
            "org.springframework.web.filter.FormContentFilter$FormContentRequestWrapper(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.web.filter.FormContentFilter$FormContentRequestWrapper(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.FormContentFilter$FormContentRequestWrapper.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.filter.FormContentFilter$FormContentRequestWrapper.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.web.filter.FormContentFilter$FormContentRequestWrapper.getParameterNames()",
            "public java.util.Enumeration<java.lang.String> getParameterNames()"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.filter.FormContentFilter$FormContentRequestWrapper.getParameterValues(java.lang.String)",
            "public java.lang.String[] getParameterValues(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getScheme()",
            "public java.lang.String getScheme()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getServerName()",
            "public java.lang.String getServerName()"
        ],
        [
            "int",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getServerPort()",
            "public int getServerPort()"
        ],
        [
            "boolean",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.isSecure()",
            "public boolean isSecure()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getContextPath()",
            "public java.lang.String getContextPath()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getRequestURI()",
            "public java.lang.String getRequestURI()"
        ],
        [
            "java.lang.StringBuffer",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getRequestURL()",
            "public java.lang.StringBuffer getRequestURL()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getRemoteHost()",
            "public java.lang.String getRemoteHost()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getRemoteAddr()",
            "public java.lang.String getRemoteAddr()"
        ],
        [
            "int",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.getRemotePort()",
            "public int getRemotePort()"
        ],
        [
            "org.springframework.web.filter.HttpPutFormContentFilter",
            "org.springframework.web.filter.HttpPutFormContentFilter()",
            "public org.springframework.web.filter.HttpPutFormContentFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.HttpPutFormContentFilter.setFormConverter(org.springframework.http.converter.FormHttpMessageConverter)",
            "public void setFormConverter(org.springframework.http.converter.FormHttpMessageConverter)"
        ],
        [
            "org.springframework.http.converter.FormHttpMessageConverter",
            "org.springframework.web.filter.HttpPutFormContentFilter.getFormConverter()",
            "public org.springframework.http.converter.FormHttpMessageConverter getFormConverter()"
        ],
        [
            "void",
            "org.springframework.web.filter.HttpPutFormContentFilter.setCharset(java.nio.charset.Charset)",
            "public void setCharset(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.filter.RequestContextFilter",
            "org.springframework.web.filter.RequestContextFilter()",
            "public org.springframework.web.filter.RequestContextFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.RequestContextFilter.setThreadContextInheritable(boolean)",
            "public void setThreadContextInheritable(boolean)"
        ],
        [
            "org.springframework.web.filter.ServletRequestPathFilter",
            "org.springframework.web.filter.ServletRequestPathFilter()",
            "public org.springframework.web.filter.ServletRequestPathFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.ServletRequestPathFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.filter.FormContentFilter$1.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "javax.servlet.ServletOutputStream",
            "org.springframework.web.filter.ShallowEtagHeaderFilter$ConditionalContentCachingResponseWrapper.getOutputStream()",
            "public javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException"
        ],
        [
            "java.io.PrintWriter",
            "org.springframework.web.filter.ShallowEtagHeaderFilter$ConditionalContentCachingResponseWrapper.getWriter()",
            "public java.io.PrintWriter getWriter() throws java.io.IOException"
        ],
        [
            "org.springframework.web.filter.FormContentFilter",
            "org.springframework.web.filter.FormContentFilter()",
            "public org.springframework.web.filter.FormContentFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.FormContentFilter.setFormConverter(org.springframework.http.converter.FormHttpMessageConverter)",
            "public void setFormConverter(org.springframework.http.converter.FormHttpMessageConverter)"
        ],
        [
            "void",
            "org.springframework.web.filter.FormContentFilter.setCharset(java.nio.charset.Charset)",
            "public void setCharset(java.nio.charset.Charset)"
        ],
        [
            "org.springframework.web.filter.GenericFilterBean",
            "org.springframework.web.filter.GenericFilterBean()",
            "public org.springframework.web.filter.GenericFilterBean()"
        ],
        [
            "void",
            "org.springframework.web.filter.GenericFilterBean.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.filter.GenericFilterBean.setEnvironment(org.springframework.core.env.Environment)",
            "public void setEnvironment(org.springframework.core.env.Environment)"
        ],
        [
            "org.springframework.core.env.Environment",
            "org.springframework.web.filter.GenericFilterBean.getEnvironment()",
            "public org.springframework.core.env.Environment getEnvironment()"
        ],
        [
            "void",
            "org.springframework.web.filter.GenericFilterBean.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.filter.GenericFilterBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.web.filter.GenericFilterBean.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig)",
            "public final void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"
        ],
        [
            "javax.servlet.FilterConfig",
            "org.springframework.web.filter.GenericFilterBean.getFilterConfig()",
            "public javax.servlet.FilterConfig getFilterConfig()"
        ],
        [
            "org.springframework.web.filter.CompositeFilter",
            "org.springframework.web.filter.CompositeFilter()",
            "public org.springframework.web.filter.CompositeFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.CompositeFilter.setFilters(java.util.List<? extends javax.servlet.Filter>)",
            "public void setFilters(java.util.List<? extends javax.servlet.Filter>)"
        ],
        [
            "void",
            "org.springframework.web.filter.CompositeFilter.init(javax.servlet.FilterConfig)",
            "public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.web.filter.CompositeFilter.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "void",
            "org.springframework.web.filter.CompositeFilter.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.web.filter.CommonsRequestLoggingFilter",
            "org.springframework.web.filter.CommonsRequestLoggingFilter()",
            "public org.springframework.web.filter.CommonsRequestLoggingFilter()"
        ],
        [
            "org.springframework.web.filter.ServletContextRequestLoggingFilter",
            "org.springframework.web.filter.ServletContextRequestLoggingFilter()",
            "public org.springframework.web.filter.ServletContextRequestLoggingFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.RelativeRedirectResponseWrapper.sendRedirect(java.lang.String)",
            "public void sendRedirect(java.lang.String)"
        ],
        [
            "javax.servlet.http.HttpServletResponse",
            "org.springframework.web.filter.RelativeRedirectResponseWrapper.wrapIfNecessary(javax.servlet.http.HttpServletResponse, org.springframework.http.HttpStatus)",
            "public static javax.servlet.http.HttpServletResponse wrapIfNecessary(javax.servlet.http.HttpServletResponse, org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.web.filter.ShallowEtagHeaderFilter",
            "org.springframework.web.filter.ShallowEtagHeaderFilter()",
            "public org.springframework.web.filter.ShallowEtagHeaderFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.ShallowEtagHeaderFilter.setWriteWeakETag(boolean)",
            "public void setWriteWeakETag(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.filter.ShallowEtagHeaderFilter.isWriteWeakETag()",
            "public boolean isWriteWeakETag()"
        ],
        [
            "void",
            "org.springframework.web.filter.ShallowEtagHeaderFilter.disableContentCaching(javax.servlet.ServletRequest)",
            "public static void disableContentCaching(javax.servlet.ServletRequest)"
        ],
        [
            "void",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingResponse.sendRedirect(java.lang.String)",
            "public void sendRedirect(java.lang.String) throws java.io.IOException"
        ],
        [
            "org.springframework.web.filter.CompositeFilter$VirtualFilterChain",
            "org.springframework.web.filter.CompositeFilter$VirtualFilterChain(javax.servlet.FilterChain, java.util.List<? extends javax.servlet.Filter>)",
            "public org.springframework.web.filter.CompositeFilter$VirtualFilterChain(javax.servlet.FilterChain, java.util.List<? extends javax.servlet.Filter>)"
        ],
        [
            "void",
            "org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.io.IOException, javax.servlet.ServletException"
        ],
        [
            "org.springframework.web.filter.CharacterEncodingFilter",
            "org.springframework.web.filter.CharacterEncodingFilter()",
            "public org.springframework.web.filter.CharacterEncodingFilter()"
        ],
        [
            "org.springframework.web.filter.CharacterEncodingFilter",
            "org.springframework.web.filter.CharacterEncodingFilter(java.lang.String)",
            "public org.springframework.web.filter.CharacterEncodingFilter(java.lang.String)"
        ],
        [
            "org.springframework.web.filter.CharacterEncodingFilter",
            "org.springframework.web.filter.CharacterEncodingFilter(java.lang.String, boolean)",
            "public org.springframework.web.filter.CharacterEncodingFilter(java.lang.String, boolean)"
        ],
        [
            "org.springframework.web.filter.CharacterEncodingFilter",
            "org.springframework.web.filter.CharacterEncodingFilter(java.lang.String, boolean, boolean)",
            "public org.springframework.web.filter.CharacterEncodingFilter(java.lang.String, boolean, boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.CharacterEncodingFilter.setEncoding(java.lang.String)",
            "public void setEncoding(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.CharacterEncodingFilter.getEncoding()",
            "public java.lang.String getEncoding()"
        ],
        [
            "void",
            "org.springframework.web.filter.CharacterEncodingFilter.setForceEncoding(boolean)",
            "public void setForceEncoding(boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.CharacterEncodingFilter.setForceRequestEncoding(boolean)",
            "public void setForceRequestEncoding(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.filter.CharacterEncodingFilter.isForceRequestEncoding()",
            "public boolean isForceRequestEncoding()"
        ],
        [
            "void",
            "org.springframework.web.filter.CharacterEncodingFilter.setForceResponseEncoding(boolean)",
            "public void setForceResponseEncoding(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.filter.CharacterEncodingFilter.isForceResponseEncoding()",
            "public boolean isForceResponseEncoding()"
        ],
        [
            "org.springframework.web.filter.ForwardedHeaderFilter",
            "org.springframework.web.filter.ForwardedHeaderFilter()",
            "public org.springframework.web.filter.ForwardedHeaderFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.ForwardedHeaderFilter.setRemoveOnly(boolean)",
            "public void setRemoveOnly(boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.ForwardedHeaderFilter.setRelativeRedirects(boolean)",
            "public void setRelativeRedirects(boolean)"
        ],
        [
            "org.springframework.web.filter.DelegatingFilterProxy",
            "org.springframework.web.filter.DelegatingFilterProxy()",
            "public org.springframework.web.filter.DelegatingFilterProxy()"
        ],
        [
            "org.springframework.web.filter.DelegatingFilterProxy",
            "org.springframework.web.filter.DelegatingFilterProxy(javax.servlet.Filter)",
            "public org.springframework.web.filter.DelegatingFilterProxy(javax.servlet.Filter)"
        ],
        [
            "org.springframework.web.filter.DelegatingFilterProxy",
            "org.springframework.web.filter.DelegatingFilterProxy(java.lang.String)",
            "public org.springframework.web.filter.DelegatingFilterProxy(java.lang.String)"
        ],
        [
            "org.springframework.web.filter.DelegatingFilterProxy",
            "org.springframework.web.filter.DelegatingFilterProxy(java.lang.String, org.springframework.web.context.WebApplicationContext)",
            "public org.springframework.web.filter.DelegatingFilterProxy(java.lang.String, org.springframework.web.context.WebApplicationContext)"
        ],
        [
            "void",
            "org.springframework.web.filter.DelegatingFilterProxy.setContextAttribute(java.lang.String)",
            "public void setContextAttribute(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.DelegatingFilterProxy.getContextAttribute()",
            "public java.lang.String getContextAttribute()"
        ],
        [
            "void",
            "org.springframework.web.filter.DelegatingFilterProxy.setTargetBeanName(java.lang.String)",
            "public void setTargetBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.filter.DelegatingFilterProxy.setTargetFilterLifecycle(boolean)",
            "public void setTargetFilterLifecycle(boolean)"
        ],
        [
            "void",
            "org.springframework.web.filter.DelegatingFilterProxy.doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)",
            "public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.filter.DelegatingFilterProxy.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderRemovingRequest",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderRemovingRequest(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderRemovingRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderRemovingRequest.getHeader(java.lang.String)",
            "public java.lang.String getHeader(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderRemovingRequest.getHeaders(java.lang.String)",
            "public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderRemovingRequest.getHeaderNames()",
            "public java.util.Enumeration<java.lang.String> getHeaderNames()"
        ],
        [
            "org.springframework.web.filter.reactive.HiddenHttpMethodFilter",
            "org.springframework.web.filter.reactive.HiddenHttpMethodFilter()",
            "public org.springframework.web.filter.reactive.HiddenHttpMethodFilter()"
        ],
        [
            "void",
            "org.springframework.web.filter.reactive.HiddenHttpMethodFilter.setMethodParamName(java.lang.String)",
            "public void setMethodParamName(java.lang.String)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.filter.reactive.HiddenHttpMethodFilter.filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)",
            "public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)"
        ],
        [
            "org.springframework.web.filter.reactive.ServerWebExchangeContextFilter",
            "org.springframework.web.filter.reactive.ServerWebExchangeContextFilter()",
            "public org.springframework.web.filter.reactive.ServerWebExchangeContextFilter()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.filter.reactive.ServerWebExchangeContextFilter.filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)",
            "public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)"
        ],
        [
            "java.util.Optional<org.springframework.web.server.ServerWebExchange>",
            "org.springframework.web.filter.reactive.ServerWebExchangeContextFilter.get(reactor.util.context.Context)",
            "public static java.util.Optional<org.springframework.web.server.ServerWebExchange> get(reactor.util.context.Context)"
        ],
        [
            "org.springframework.web.filter.reactive.ForwardedHeaderFilter",
            "org.springframework.web.filter.reactive.ForwardedHeaderFilter()",
            "public org.springframework.web.filter.reactive.ForwardedHeaderFilter()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.filter.reactive.ForwardedHeaderFilter.filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)",
            "public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)"
        ],
        [
            "org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy",
            "org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext)",
            "public org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext)"
        ],
        [
            "org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy",
            "org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext, java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext, java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy.getMediaTypeForResource(org.springframework.core.io.Resource)",
            "public org.springframework.http.MediaType getMediaTypeForResource(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.web.accept.FixedContentNegotiationStrategy",
            "org.springframework.web.accept.FixedContentNegotiationStrategy(org.springframework.http.MediaType)",
            "public org.springframework.web.accept.FixedContentNegotiationStrategy(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.web.accept.FixedContentNegotiationStrategy",
            "org.springframework.web.accept.FixedContentNegotiationStrategy(java.util.List<org.springframework.http.MediaType>)",
            "public org.springframework.web.accept.FixedContentNegotiationStrategy(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.accept.FixedContentNegotiationStrategy.getContentTypes()",
            "public java.util.List<org.springframework.http.MediaType> getContentTypes()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.accept.FixedContentNegotiationStrategy.resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)"
        ],
        [
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy",
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy()",
            "public org.springframework.web.accept.PathExtensionContentNegotiationStrategy()"
        ],
        [
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy",
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public org.springframework.web.accept.PathExtensionContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy.setUrlPathHelper(org.springframework.web.util.UrlPathHelper)",
            "public void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)"
        ],
        [
            "void",
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy.setUseJaf(boolean)",
            "public void setUseJaf(boolean)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.web.accept.PathExtensionContentNegotiationStrategy.getMediaTypeForResource(org.springframework.core.io.Resource)",
            "public org.springframework.http.MediaType getMediaTypeForResource(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public org.springframework.web.accept.AbstractMappingContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.setUseRegisteredExtensionsOnly(boolean)",
            "public void setUseRegisteredExtensionsOnly(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.isUseRegisteredExtensionsOnly()",
            "public boolean isUseRegisteredExtensionsOnly()"
        ],
        [
            "void",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.setIgnoreUnknownExtensions(boolean)",
            "public void setIgnoreUnknownExtensions(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.isIgnoreUnknownExtensions()",
            "public boolean isIgnoreUnknownExtensions()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest) throws org.springframework.web.HttpMediaTypeNotAcceptableException"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.accept.AbstractMappingContentNegotiationStrategy.resolveMediaTypeKey(org.springframework.web.context.request.NativeWebRequest, java.lang.String)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypeKey(org.springframework.web.context.request.NativeWebRequest, java.lang.String) throws org.springframework.web.HttpMediaTypeNotAcceptableException"
        ],
        [
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean()",
            "public org.springframework.web.accept.ContentNegotiationManagerFactoryBean()"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setStrategies(java.util.List<org.springframework.web.accept.ContentNegotiationStrategy>)",
            "public void setStrategies(java.util.List<org.springframework.web.accept.ContentNegotiationStrategy>)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setFavorParameter(boolean)",
            "public void setFavorParameter(boolean)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setParameterName(java.lang.String)",
            "public void setParameterName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setFavorPathExtension(boolean)",
            "public void setFavorPathExtension(boolean)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setMediaTypes(java.util.Properties)",
            "public void setMediaTypes(java.util.Properties)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.addMediaType(java.lang.String, org.springframework.http.MediaType)",
            "public void addMediaType(java.lang.String, org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.addMediaTypes(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public void addMediaTypes(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setIgnoreUnknownPathExtensions(boolean)",
            "public void setIgnoreUnknownPathExtensions(boolean)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setUseJaf(boolean)",
            "public void setUseJaf(boolean)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setUseRegisteredExtensionsOnly(boolean)",
            "public void setUseRegisteredExtensionsOnly(boolean)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setIgnoreAcceptHeader(boolean)",
            "public void setIgnoreAcceptHeader(boolean)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentType(org.springframework.http.MediaType)",
            "public void setDefaultContentType(org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentTypes(java.util.List<org.springframework.http.MediaType>)",
            "public void setDefaultContentTypes(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setDefaultContentTypeStrategy(org.springframework.web.accept.ContentNegotiationStrategy)",
            "public void setDefaultContentTypeStrategy(org.springframework.web.accept.ContentNegotiationStrategy)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.web.accept.ContentNegotiationManager",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.build()",
            "public org.springframework.web.accept.ContentNegotiationManager build()"
        ],
        [
            "org.springframework.web.accept.ContentNegotiationManager",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.getObject()",
            "public org.springframework.web.accept.ContentNegotiationManager getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.accept.ContentNegotiationManagerFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.web.accept.HeaderContentNegotiationStrategy",
            "org.springframework.web.accept.HeaderContentNegotiationStrategy()",
            "public org.springframework.web.accept.HeaderContentNegotiationStrategy()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.accept.HeaderContentNegotiationStrategy.resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest) throws org.springframework.web.HttpMediaTypeNotAcceptableException"
        ],
        [
            "org.springframework.web.accept.MappingMediaTypeFileExtensionResolver",
            "org.springframework.web.accept.MappingMediaTypeFileExtensionResolver(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public org.springframework.web.accept.MappingMediaTypeFileExtensionResolver(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.http.MediaType>",
            "org.springframework.web.accept.MappingMediaTypeFileExtensionResolver.getMediaTypes()",
            "public java.util.Map<java.lang.String, org.springframework.http.MediaType> getMediaTypes()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.accept.MappingMediaTypeFileExtensionResolver.resolveFileExtensions(org.springframework.http.MediaType)",
            "public java.util.List<java.lang.String> resolveFileExtensions(org.springframework.http.MediaType)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.accept.MappingMediaTypeFileExtensionResolver.getAllFileExtensions()",
            "public java.util.List<java.lang.String> getAllFileExtensions()"
        ],
        [
            "org.springframework.web.accept.ContentNegotiationManager",
            "org.springframework.web.accept.ContentNegotiationManager(org.springframework.web.accept.ContentNegotiationStrategy...)",
            "public org.springframework.web.accept.ContentNegotiationManager(org.springframework.web.accept.ContentNegotiationStrategy...)"
        ],
        [
            "org.springframework.web.accept.ContentNegotiationManager",
            "org.springframework.web.accept.ContentNegotiationManager(java.util.Collection<org.springframework.web.accept.ContentNegotiationStrategy>)",
            "public org.springframework.web.accept.ContentNegotiationManager(java.util.Collection<org.springframework.web.accept.ContentNegotiationStrategy>)"
        ],
        [
            "org.springframework.web.accept.ContentNegotiationManager",
            "org.springframework.web.accept.ContentNegotiationManager()",
            "public org.springframework.web.accept.ContentNegotiationManager()"
        ],
        [
            "java.util.List<org.springframework.web.accept.ContentNegotiationStrategy>",
            "org.springframework.web.accept.ContentNegotiationManager.getStrategies()",
            "public java.util.List<org.springframework.web.accept.ContentNegotiationStrategy> getStrategies()"
        ],
        [
            "<T extends org.springframework.web.accept.ContentNegotiationStrategy> T",
            "org.springframework.web.accept.ContentNegotiationManager.getStrategy(java.lang.Class<T>)",
            "public <T extends org.springframework.web.accept.ContentNegotiationStrategy> T getStrategy(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.springframework.web.accept.ContentNegotiationManager.addFileExtensionResolvers(org.springframework.web.accept.MediaTypeFileExtensionResolver...)",
            "public void addFileExtensionResolvers(org.springframework.web.accept.MediaTypeFileExtensionResolver...)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.web.accept.ContentNegotiationManager.resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest)",
            "public java.util.List<org.springframework.http.MediaType> resolveMediaTypes(org.springframework.web.context.request.NativeWebRequest) throws org.springframework.web.HttpMediaTypeNotAcceptableException"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.accept.ContentNegotiationManager.resolveFileExtensions(org.springframework.http.MediaType)",
            "public java.util.List<java.lang.String> resolveFileExtensions(org.springframework.http.MediaType)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.accept.ContentNegotiationManager.getAllFileExtensions()",
            "public java.util.List<java.lang.String> getAllFileExtensions()"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.http.MediaType>",
            "org.springframework.web.accept.ContentNegotiationManager.getMediaTypeMappings()",
            "public java.util.Map<java.lang.String, org.springframework.http.MediaType> getMediaTypeMappings()"
        ],
        [
            "org.springframework.web.accept.ParameterContentNegotiationStrategy",
            "org.springframework.web.accept.ParameterContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>)",
            "public org.springframework.web.accept.ParameterContentNegotiationStrategy(java.util.Map<java.lang.String, org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.web.accept.ParameterContentNegotiationStrategy.setParameterName(java.lang.String)",
            "public void setParameterName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.accept.ParameterContentNegotiationStrategy.getParameterName()",
            "public java.lang.String getParameterName()"
        ],
        [
            "org.springframework.web.multipart.MultipartException",
            "org.springframework.web.multipart.MultipartException(java.lang.String)",
            "public org.springframework.web.multipart.MultipartException(java.lang.String)"
        ],
        [
            "org.springframework.web.multipart.MultipartException",
            "org.springframework.web.multipart.MultipartException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.web.multipart.MultipartException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.web.multipart.MultipartFileResource",
            "org.springframework.web.multipart.MultipartFileResource(org.springframework.web.multipart.MultipartFile)",
            "public org.springframework.web.multipart.MultipartFileResource(org.springframework.web.multipart.MultipartFile)"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.MultipartFileResource.exists()",
            "public boolean exists()"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.MultipartFileResource.isOpen()",
            "public boolean isOpen()"
        ],
        [
            "long",
            "org.springframework.web.multipart.MultipartFileResource.contentLength()",
            "public long contentLength()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.MultipartFileResource.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.multipart.MultipartFileResource.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.MultipartFileResource.getDescription()",
            "public java.lang.String getDescription()"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.MultipartFileResource.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.multipart.MultipartFileResource.hashCode()",
            "public int hashCode()"
        ],
        [
            "default",
            "org.springframework.web.multipart.MultipartFile.org.springframework.core.io.Resource getResource()",
            "public default org.springframework.core.io.Resource getResource()"
        ],
        [
            "default",
            "org.springframework.web.multipart.MultipartFile.void transferTo(java.nio.file.Path)",
            "public default void transferTo(java.nio.file.Path) throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "org.springframework.web.multipart.MaxUploadSizeExceededException",
            "org.springframework.web.multipart.MaxUploadSizeExceededException(long)",
            "public org.springframework.web.multipart.MaxUploadSizeExceededException(long)"
        ],
        [
            "org.springframework.web.multipart.MaxUploadSizeExceededException",
            "org.springframework.web.multipart.MaxUploadSizeExceededException(long, java.lang.Throwable)",
            "public org.springframework.web.multipart.MaxUploadSizeExceededException(long, java.lang.Throwable)"
        ],
        [
            "long",
            "org.springframework.web.multipart.MaxUploadSizeExceededException.getMaxUploadSize()",
            "public long getMaxUploadSize()"
        ],
        [
            "org.springframework.web.multipart.support.StringMultipartFileEditor",
            "org.springframework.web.multipart.support.StringMultipartFileEditor()",
            "public org.springframework.web.multipart.support.StringMultipartFileEditor()"
        ],
        [
            "org.springframework.web.multipart.support.StringMultipartFileEditor",
            "org.springframework.web.multipart.support.StringMultipartFileEditor(java.lang.String)",
            "public org.springframework.web.multipart.support.StringMultipartFileEditor(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StringMultipartFileEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StringMultipartFileEditor.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "org.springframework.web.multipart.support.MissingServletRequestPartException",
            "org.springframework.web.multipart.support.MissingServletRequestPartException(java.lang.String)",
            "public org.springframework.web.multipart.support.MissingServletRequestPartException(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.MissingServletRequestPartException.getRequestPartName()",
            "public java.lang.String getRequestPartName()"
        ],
        [
            "javax.servlet.http.HttpServletRequest",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getRequest()",
            "public javax.servlet.http.HttpServletRequest getRequest()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getRequestMethod()",
            "public org.springframework.http.HttpMethod getRequestMethod()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getRequestHeaders()",
            "public org.springframework.http.HttpHeaders getRequestHeaders()"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getFileNames()",
            "public java.util.Iterator<java.lang.String> getFileNames()"
        ],
        [
            "org.springframework.web.multipart.MultipartFile",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getFile(java.lang.String)",
            "public org.springframework.web.multipart.MultipartFile getFile(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.web.multipart.MultipartFile>",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getFiles(java.lang.String)",
            "public java.util.List<org.springframework.web.multipart.MultipartFile> getFiles(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.web.multipart.MultipartFile>",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getFileMap()",
            "public java.util.Map<java.lang.String, org.springframework.web.multipart.MultipartFile> getFileMap()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile>",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getMultiFileMap()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile> getMultiFileMap()"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.isResolved()",
            "public boolean isResolved()"
        ],
        [
            "javax.servlet.ServletRequest",
            "org.springframework.web.multipart.support.AbstractMultipartHttpServletRequest.getRequest()",
            "public javax.servlet.ServletRequest getRequest()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$MimeDelegate.decode(java.lang.String)",
            "public static java.lang.String decode(java.lang.String)"
        ],
        [
            "org.springframework.web.multipart.MultipartRequest",
            "org.springframework.web.multipart.support.MultipartResolutionDelegate.resolveMultipartRequest(org.springframework.web.context.request.NativeWebRequest)",
            "public static org.springframework.web.multipart.MultipartRequest resolveMultipartRequest(org.springframework.web.context.request.NativeWebRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.support.MultipartResolutionDelegate.isMultipartRequest(javax.servlet.http.HttpServletRequest)",
            "public static boolean isMultipartRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.support.MultipartResolutionDelegate.isMultipartArgument(org.springframework.core.MethodParameter)",
            "public static boolean isMultipartArgument(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.multipart.support.MultipartResolutionDelegate.resolveMultipartArgument(java.lang.String, org.springframework.core.MethodParameter, javax.servlet.http.HttpServletRequest)",
            "public static java.lang.Object resolveMultipartArgument(java.lang.String, org.springframework.core.MethodParameter, javax.servlet.http.HttpServletRequest) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.multipart.support.ByteArrayMultipartFileEditor",
            "org.springframework.web.multipart.support.ByteArrayMultipartFileEditor()",
            "public org.springframework.web.multipart.support.ByteArrayMultipartFileEditor()"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.ByteArrayMultipartFileEditor.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.ByteArrayMultipartFileEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile>, java.util.Map<java.lang.String, java.lang.String[]>, java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest, org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile>, java.util.Map<java.lang.String, java.lang.String[]>, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest.getParameter(java.lang.String)",
            "public java.lang.String getParameter(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest.getParameterValues(java.lang.String)",
            "public java.lang.String[] getParameterValues(java.lang.String)"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest.getParameterNames()",
            "public java.util.Enumeration<java.lang.String> getParameterNames()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest.getMultipartContentType(java.lang.String)",
            "public java.lang.String getMultipartContentType(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest.getMultipartHeaders(java.lang.String)",
            "public org.springframework.http.HttpHeaders getMultipartHeaders(java.lang.String)"
        ],
        [
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.multipart.support.StandardMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest) throws org.springframework.web.multipart.MultipartException"
        ],
        [
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest, boolean)",
            "public org.springframework.web.multipart.support.StandardMultipartHttpServletRequest(javax.servlet.http.HttpServletRequest, boolean) throws org.springframework.web.multipart.MultipartException"
        ],
        [
            "java.util.Enumeration<java.lang.String>",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.getParameterNames()",
            "public java.util.Enumeration<java.lang.String> getParameterNames()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.getParameterMap()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.getMultipartContentType(java.lang.String)",
            "public java.lang.String getMultipartContentType(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.getMultipartHeaders(java.lang.String)",
            "public org.springframework.http.HttpHeaders getMultipartHeaders(java.lang.String)"
        ],
        [
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile(javax.servlet.http.Part, java.lang.String)",
            "public org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile(javax.servlet.http.Part, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.getOriginalFilename()",
            "public java.lang.String getOriginalFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "long",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.getSize()",
            "public long getSize()"
        ],
        [
            "byte[]",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.getBytes()",
            "public byte[] getBytes() throws java.io.IOException"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.transferTo(java.io.File)",
            "public void transferTo(java.io.File) throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile.transferTo(java.nio.file.Path)",
            "public void transferTo(java.nio.file.Path) throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "org.springframework.web.multipart.support.RequestPartServletServerHttpRequest",
            "org.springframework.web.multipart.support.RequestPartServletServerHttpRequest(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public org.springframework.web.multipart.support.RequestPartServletServerHttpRequest(javax.servlet.http.HttpServletRequest, java.lang.String) throws org.springframework.web.multipart.support.MissingServletRequestPartException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.web.multipart.support.RequestPartServletServerHttpRequest.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.multipart.support.RequestPartServletServerHttpRequest.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.web.multipart.support.StandardServletPartUtils",
            "org.springframework.web.multipart.support.StandardServletPartUtils()",
            "public org.springframework.web.multipart.support.StandardServletPartUtils()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, javax.servlet.http.Part>",
            "org.springframework.web.multipart.support.StandardServletPartUtils.getParts(javax.servlet.http.HttpServletRequest)",
            "public static org.springframework.util.MultiValueMap<java.lang.String, javax.servlet.http.Part> getParts(javax.servlet.http.HttpServletRequest) throws org.springframework.web.multipart.MultipartException"
        ],
        [
            "java.util.List<javax.servlet.http.Part>",
            "org.springframework.web.multipart.support.StandardServletPartUtils.getParts(javax.servlet.http.HttpServletRequest, java.lang.String)",
            "public static java.util.List<javax.servlet.http.Part> getParts(javax.servlet.http.HttpServletRequest, java.lang.String) throws org.springframework.web.multipart.MultipartException"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StandardServletPartUtils.bindParts(javax.servlet.http.HttpServletRequest, org.springframework.beans.MutablePropertyValues, boolean)",
            "public static void bindParts(javax.servlet.http.HttpServletRequest, org.springframework.beans.MutablePropertyValues, boolean) throws org.springframework.web.multipart.MultipartException"
        ],
        [
            "org.springframework.web.multipart.support.StandardServletMultipartResolver",
            "org.springframework.web.multipart.support.StandardServletMultipartResolver()",
            "public org.springframework.web.multipart.support.StandardServletMultipartResolver()"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StandardServletMultipartResolver.setResolveLazily(boolean)",
            "public void setResolveLazily(boolean)"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StandardServletMultipartResolver.setStrictServletCompliance(boolean)",
            "public void setStrictServletCompliance(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.support.StandardServletMultipartResolver.isMultipart(javax.servlet.http.HttpServletRequest)",
            "public boolean isMultipart(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.multipart.MultipartHttpServletRequest",
            "org.springframework.web.multipart.support.StandardServletMultipartResolver.resolveMultipart(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.multipart.MultipartHttpServletRequest resolveMultipart(javax.servlet.http.HttpServletRequest) throws org.springframework.web.multipart.MultipartException"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)",
            "public void cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)"
        ],
        [
            "org.springframework.web.multipart.support.MultipartFilter",
            "org.springframework.web.multipart.support.MultipartFilter()",
            "public org.springframework.web.multipart.support.MultipartFilter()"
        ],
        [
            "void",
            "org.springframework.web.multipart.support.MultipartFilter.setMultipartResolverBeanName(java.lang.String)",
            "public void setMultipartResolverBeanName(java.lang.String)"
        ],
        [
            "org.springframework.web.multipart.commons.CommonsMultipartResolver",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver()",
            "public org.springframework.web.multipart.commons.CommonsMultipartResolver()"
        ],
        [
            "org.springframework.web.multipart.commons.CommonsMultipartResolver",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver(javax.servlet.ServletContext)",
            "public org.springframework.web.multipart.commons.CommonsMultipartResolver(javax.servlet.ServletContext)"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver.setResolveLazily(boolean)",
            "public void setResolveLazily(boolean)"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver.setSupportedMethods(java.lang.String...)",
            "public void setSupportedMethods(java.lang.String...)"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver.setServletContext(javax.servlet.ServletContext)",
            "public void setServletContext(javax.servlet.ServletContext)"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver.isMultipart(javax.servlet.http.HttpServletRequest)",
            "public boolean isMultipart(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.multipart.MultipartHttpServletRequest",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver.resolveMultipart(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.multipart.MultipartHttpServletRequest resolveMultipart(javax.servlet.http.HttpServletRequest) throws org.springframework.web.multipart.MultipartException"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsMultipartResolver.cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)",
            "public void cleanupMultipart(org.springframework.web.multipart.MultipartHttpServletRequest)"
        ],
        [
            "org.springframework.web.multipart.commons.CommonsMultipartFile",
            "org.springframework.web.multipart.commons.CommonsMultipartFile(org.apache.commons.fileupload.FileItem)",
            "public org.springframework.web.multipart.commons.CommonsMultipartFile(org.apache.commons.fileupload.FileItem)"
        ],
        [
            "org.apache.commons.fileupload.FileItem",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getFileItem()",
            "public final org.apache.commons.fileupload.FileItem getFileItem()"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.setPreserveFilename(boolean)",
            "public void setPreserveFilename(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getOriginalFilename()",
            "public java.lang.String getOriginalFilename()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "boolean",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "long",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getSize()",
            "public long getSize()"
        ],
        [
            "byte[]",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getBytes()",
            "public byte[] getBytes()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getInputStream()",
            "public java.io.InputStream getInputStream() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.transferTo(java.io.File)",
            "public void transferTo(java.io.File) throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.transferTo(java.nio.file.Path)",
            "public void transferTo(java.nio.file.Path) throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.getStorageDescription()",
            "public java.lang.String getStorageDescription()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.multipart.commons.CommonsMultipartFile.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport()",
            "public org.springframework.web.multipart.commons.CommonsFileUploadSupport()"
        ],
        [
            "org.apache.commons.fileupload.disk.DiskFileItemFactory",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.getFileItemFactory()",
            "public org.apache.commons.fileupload.disk.DiskFileItemFactory getFileItemFactory()"
        ],
        [
            "org.apache.commons.fileupload.FileUpload",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.getFileUpload()",
            "public org.apache.commons.fileupload.FileUpload getFileUpload()"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.setMaxUploadSize(long)",
            "public void setMaxUploadSize(long)"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.setMaxUploadSizePerFile(long)",
            "public void setMaxUploadSizePerFile(long)"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.setDefaultEncoding(java.lang.String)",
            "public void setDefaultEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.setUploadTempDir(org.springframework.core.io.Resource)",
            "public void setUploadTempDir(org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport.setPreserveFilename(boolean)",
            "public void setPreserveFilename(boolean)"
        ],
        [
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult(org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile>, java.util.Map<java.lang.String, java.lang.String[]>, java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult(org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile>, java.util.Map<java.lang.String, java.lang.String[]>, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile>",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult.getMultipartFiles()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.web.multipart.MultipartFile> getMultipartFiles()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String[]>",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult.getMultipartParameters()",
            "public java.util.Map<java.lang.String, java.lang.String[]> getMultipartParameters()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.web.multipart.commons.CommonsFileUploadSupport$MultipartParsingResult.getMultipartParameterContentTypes()",
            "public java.util.Map<java.lang.String, java.lang.String> getMultipartParameterContentTypes()"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.method.HandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.web.method.HandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.method.HandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...)",
            "public org.springframework.web.method.HandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...) throws java.lang.NoSuchMethodException"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.method.HandlerMethod(java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Method)",
            "public org.springframework.web.method.HandlerMethod(java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.method.HandlerMethod(java.lang.String, org.springframework.beans.factory.BeanFactory, org.springframework.context.MessageSource, java.lang.reflect.Method)",
            "public org.springframework.web.method.HandlerMethod(java.lang.String, org.springframework.beans.factory.BeanFactory, org.springframework.context.MessageSource, java.lang.reflect.Method)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.HandlerMethod.getBean()",
            "public java.lang.Object getBean()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.web.method.HandlerMethod.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.method.HandlerMethod.getBeanType()",
            "public java.lang.Class<?> getBeanType()"
        ],
        [
            "org.springframework.core.MethodParameter[]",
            "org.springframework.web.method.HandlerMethod.getMethodParameters()",
            "public org.springframework.core.MethodParameter[] getMethodParameters()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.method.HandlerMethod.getReturnType()",
            "public org.springframework.core.MethodParameter getReturnType()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.method.HandlerMethod.getReturnValueType(java.lang.Object)",
            "public org.springframework.core.MethodParameter getReturnValueType(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.web.method.HandlerMethod.isVoid()",
            "public boolean isVoid()"
        ],
        [
            "<A extends java.lang.annotation.Annotation> A",
            "org.springframework.web.method.HandlerMethod.getMethodAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> A getMethodAnnotation(java.lang.Class<A>)"
        ],
        [
            "<A extends java.lang.annotation.Annotation> boolean",
            "org.springframework.web.method.HandlerMethod.hasMethodAnnotation(java.lang.Class<A>)",
            "public <A extends java.lang.annotation.Annotation> boolean hasMethodAnnotation(java.lang.Class<A>)"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.method.HandlerMethod.getResolvedFromHandlerMethod()",
            "public org.springframework.web.method.HandlerMethod getResolvedFromHandlerMethod()"
        ],
        [
            "org.springframework.web.method.HandlerMethod",
            "org.springframework.web.method.HandlerMethod.createWithResolvedBean()",
            "public org.springframework.web.method.HandlerMethod createWithResolvedBean()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.HandlerMethod.getShortLogMessage()",
            "public java.lang.String getShortLogMessage()"
        ],
        [
            "boolean",
            "org.springframework.web.method.HandlerMethod.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.method.HandlerMethod.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.HandlerMethod.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.web.method.HandlerTypePredicate.test(java.lang.Class<?>)",
            "public boolean test(java.lang.Class<?>)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate",
            "org.springframework.web.method.HandlerTypePredicate.forAnyHandlerType()",
            "public static org.springframework.web.method.HandlerTypePredicate forAnyHandlerType()"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate",
            "org.springframework.web.method.HandlerTypePredicate.forBasePackage(java.lang.String...)",
            "public static org.springframework.web.method.HandlerTypePredicate forBasePackage(java.lang.String...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate",
            "org.springframework.web.method.HandlerTypePredicate.forBasePackageClass(java.lang.Class<?>...)",
            "public static org.springframework.web.method.HandlerTypePredicate forBasePackageClass(java.lang.Class<?>...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate",
            "org.springframework.web.method.HandlerTypePredicate.forAssignableType(java.lang.Class<?>...)",
            "public static org.springframework.web.method.HandlerTypePredicate forAssignableType(java.lang.Class<?>...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate",
            "org.springframework.web.method.HandlerTypePredicate.forAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>...)",
            "public static org.springframework.web.method.HandlerTypePredicate forAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate$Builder",
            "org.springframework.web.method.HandlerTypePredicate.builder()",
            "public static org.springframework.web.method.HandlerTypePredicate$Builder builder()"
        ],
        [
            "boolean",
            "org.springframework.web.method.HandlerTypePredicate.test(java.lang.Object)",
            "public boolean test(java.lang.Object)"
        ],
        [
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter",
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter(org.springframework.web.method.HandlerMethod, java.lang.Object)",
            "public org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter(org.springframework.web.method.HandlerMethod, java.lang.Object)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter.getParameterType()",
            "public java.lang.Class<?> getParameterType()"
        ],
        [
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter",
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter clone()"
        ],
        [
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter",
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.web.method.HandlerMethod$HandlerMethodParameter clone()"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.core.annotation.SynthesizingMethodParameter clone()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public org.springframework.core.MethodParameter clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.HandlerMethod$ReturnValueMethodParameter.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite()",
            "public org.springframework.web.method.support.HandlerMethodArgumentResolverComposite()"
        ],
        [
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.addResolver(org.springframework.web.method.support.HandlerMethodArgumentResolver)",
            "public org.springframework.web.method.support.HandlerMethodArgumentResolverComposite addResolver(org.springframework.web.method.support.HandlerMethodArgumentResolver)"
        ],
        [
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.addResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver...)",
            "public org.springframework.web.method.support.HandlerMethodArgumentResolverComposite addResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolver...)"
        ],
        [
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.addResolvers(java.util.List<? extends org.springframework.web.method.support.HandlerMethodArgumentResolver>)",
            "public org.springframework.web.method.support.HandlerMethodArgumentResolverComposite addResolvers(java.util.List<? extends org.springframework.web.method.support.HandlerMethodArgumentResolver>)"
        ],
        [
            "java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver>",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.getResolvers()",
            "public java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> getResolvers()"
        ],
        [
            "void",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.clear()",
            "public void clear()"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.support.InvocableHandlerMethod",
            "org.springframework.web.method.support.InvocableHandlerMethod(org.springframework.web.method.HandlerMethod)",
            "public org.springframework.web.method.support.InvocableHandlerMethod(org.springframework.web.method.HandlerMethod)"
        ],
        [
            "org.springframework.web.method.support.InvocableHandlerMethod",
            "org.springframework.web.method.support.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.web.method.support.InvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.web.method.support.InvocableHandlerMethod",
            "org.springframework.web.method.support.InvocableHandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...)",
            "public org.springframework.web.method.support.InvocableHandlerMethod(java.lang.Object, java.lang.String, java.lang.Class<?>...) throws java.lang.NoSuchMethodException"
        ],
        [
            "void",
            "org.springframework.web.method.support.InvocableHandlerMethod.setHandlerMethodArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolverComposite)",
            "public void setHandlerMethodArgumentResolvers(org.springframework.web.method.support.HandlerMethodArgumentResolverComposite)"
        ],
        [
            "void",
            "org.springframework.web.method.support.InvocableHandlerMethod.setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)",
            "public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)"
        ],
        [
            "void",
            "org.springframework.web.method.support.InvocableHandlerMethod.setDataBinderFactory(org.springframework.web.bind.support.WebDataBinderFactory)",
            "public void setDataBinderFactory(org.springframework.web.bind.support.WebDataBinderFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.method.support.ModelAndViewContainer, java.lang.Object...)",
            "public java.lang.Object invokeForRequest(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.method.support.ModelAndViewContainer, java.lang.Object...) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite()",
            "public org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite()"
        ],
        [
            "java.util.List<org.springframework.web.method.support.HandlerMethodReturnValueHandler>",
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.getHandlers()",
            "public java.util.List<org.springframework.web.method.support.HandlerMethodReturnValueHandler> getHandlers()"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.addHandler(org.springframework.web.method.support.HandlerMethodReturnValueHandler)",
            "public org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite addHandler(org.springframework.web.method.support.HandlerMethodReturnValueHandler)"
        ],
        [
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite",
            "org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.addHandlers(java.util.List<? extends org.springframework.web.method.support.HandlerMethodReturnValueHandler>)",
            "public org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite addHandlers(java.util.List<? extends org.springframework.web.method.support.HandlerMethodReturnValueHandler>)"
        ],
        [
            "org.springframework.web.method.support.CompositeUriComponentsContributor",
            "org.springframework.web.method.support.CompositeUriComponentsContributor(org.springframework.web.method.support.UriComponentsContributor...)",
            "public org.springframework.web.method.support.CompositeUriComponentsContributor(org.springframework.web.method.support.UriComponentsContributor...)"
        ],
        [
            "org.springframework.web.method.support.CompositeUriComponentsContributor",
            "org.springframework.web.method.support.CompositeUriComponentsContributor(java.util.Collection<?>)",
            "public org.springframework.web.method.support.CompositeUriComponentsContributor(java.util.Collection<?>)"
        ],
        [
            "org.springframework.web.method.support.CompositeUriComponentsContributor",
            "org.springframework.web.method.support.CompositeUriComponentsContributor(java.util.Collection<?>, org.springframework.core.convert.ConversionService)",
            "public org.springframework.web.method.support.CompositeUriComponentsContributor(java.util.Collection<?>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.CompositeUriComponentsContributor.hasContributors()",
            "public boolean hasContributors()"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.CompositeUriComponentsContributor.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.web.method.support.CompositeUriComponentsContributor.contributeMethodArgument(org.springframework.core.MethodParameter, java.lang.Object, org.springframework.web.util.UriComponentsBuilder, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.core.convert.ConversionService)",
            "public void contributeMethodArgument(org.springframework.core.MethodParameter, java.lang.Object, org.springframework.web.util.UriComponentsBuilder, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "void",
            "org.springframework.web.method.support.CompositeUriComponentsContributor.contributeMethodArgument(org.springframework.core.MethodParameter, java.lang.Object, org.springframework.web.util.UriComponentsBuilder, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void contributeMethodArgument(org.springframework.core.MethodParameter, java.lang.Object, org.springframework.web.util.UriComponentsBuilder, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.web.method.support.ModelAndViewContainer",
            "org.springframework.web.method.support.ModelAndViewContainer()",
            "public org.springframework.web.method.support.ModelAndViewContainer()"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setIgnoreDefaultModelOnRedirect(boolean)",
            "public void setIgnoreDefaultModelOnRedirect(boolean)"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setViewName(java.lang.String)",
            "public void setViewName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.support.ModelAndViewContainer.getViewName()",
            "public java.lang.String getViewName()"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setView(java.lang.Object)",
            "public void setView(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.support.ModelAndViewContainer.getView()",
            "public java.lang.Object getView()"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.ModelAndViewContainer.isViewReference()",
            "public boolean isViewReference()"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.web.method.support.ModelAndViewContainer.getModel()",
            "public org.springframework.ui.ModelMap getModel()"
        ],
        [
            "org.springframework.ui.ModelMap",
            "org.springframework.web.method.support.ModelAndViewContainer.getDefaultModel()",
            "public org.springframework.ui.ModelMap getDefaultModel()"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setRedirectModel(org.springframework.ui.ModelMap)",
            "public void setRedirectModel(org.springframework.ui.ModelMap)"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setRedirectModelScenario(boolean)",
            "public void setRedirectModelScenario(boolean)"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setStatus(org.springframework.http.HttpStatus)",
            "public void setStatus(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.web.method.support.ModelAndViewContainer.getStatus()",
            "public org.springframework.http.HttpStatus getStatus()"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setBindingDisabled(java.lang.String)",
            "public void setBindingDisabled(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.ModelAndViewContainer.isBindingDisabled(java.lang.String)",
            "public boolean isBindingDisabled(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setBinding(java.lang.String, boolean)",
            "public void setBinding(java.lang.String, boolean)"
        ],
        [
            "org.springframework.web.bind.support.SessionStatus",
            "org.springframework.web.method.support.ModelAndViewContainer.getSessionStatus()",
            "public org.springframework.web.bind.support.SessionStatus getSessionStatus()"
        ],
        [
            "void",
            "org.springframework.web.method.support.ModelAndViewContainer.setRequestHandled(boolean)",
            "public void setRequestHandled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.ModelAndViewContainer.isRequestHandled()",
            "public boolean isRequestHandled()"
        ],
        [
            "org.springframework.web.method.support.ModelAndViewContainer",
            "org.springframework.web.method.support.ModelAndViewContainer.addAttribute(java.lang.String, java.lang.Object)",
            "public org.springframework.web.method.support.ModelAndViewContainer addAttribute(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.web.method.support.ModelAndViewContainer",
            "org.springframework.web.method.support.ModelAndViewContainer.addAttribute(java.lang.Object)",
            "public org.springframework.web.method.support.ModelAndViewContainer addAttribute(java.lang.Object)"
        ],
        [
            "org.springframework.web.method.support.ModelAndViewContainer",
            "org.springframework.web.method.support.ModelAndViewContainer.addAllAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.method.support.ModelAndViewContainer addAllAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.method.support.ModelAndViewContainer",
            "org.springframework.web.method.support.ModelAndViewContainer.mergeAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.method.support.ModelAndViewContainer mergeAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.web.method.support.ModelAndViewContainer",
            "org.springframework.web.method.support.ModelAndViewContainer.removeAttributes(java.util.Map<java.lang.String, ?>)",
            "public org.springframework.web.method.support.ModelAndViewContainer removeAttributes(java.util.Map<java.lang.String, ?>)"
        ],
        [
            "boolean",
            "org.springframework.web.method.support.ModelAndViewContainer.containsAttribute(java.lang.String)",
            "public boolean containsAttribute(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.support.ModelAndViewContainer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver$RequestParamNamedValueInfo",
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver$RequestParamNamedValueInfo()",
            "public org.springframework.web.method.annotation.RequestParamMethodArgumentResolver$RequestParamNamedValueInfo()"
        ],
        [
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver$RequestParamNamedValueInfo",
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver$RequestParamNamedValueInfo(org.springframework.web.bind.annotation.RequestParam)",
            "public org.springframework.web.method.annotation.RequestParamMethodArgumentResolver$RequestParamNamedValueInfo(org.springframework.web.bind.annotation.RequestParam)"
        ],
        [
            "org.springframework.web.method.annotation.AbstractWebArgumentResolverAdapter",
            "org.springframework.web.method.annotation.AbstractWebArgumentResolverAdapter(org.springframework.web.bind.support.WebArgumentResolver)",
            "public org.springframework.web.method.annotation.AbstractWebArgumentResolverAdapter(org.springframework.web.bind.support.WebArgumentResolver)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.AbstractWebArgumentResolverAdapter.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.AbstractWebArgumentResolverAdapter.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver",
            "org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver()",
            "public org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver()"
        ],
        [
            "org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver",
            "org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public final java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.ExceptionHandlerMethodResolver",
            "org.springframework.web.method.annotation.ExceptionHandlerMethodResolver(java.lang.Class<?>)",
            "public org.springframework.web.method.annotation.ExceptionHandlerMethodResolver(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.hasExceptionMappings()",
            "public boolean hasExceptionMappings()"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.resolveMethod(java.lang.Exception)",
            "public java.lang.reflect.Method resolveMethod(java.lang.Exception)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.resolveMethodByThrowable(java.lang.Throwable)",
            "public java.lang.reflect.Method resolveMethodByThrowable(java.lang.Throwable)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.web.method.annotation.ExceptionHandlerMethodResolver.resolveMethodByExceptionType(java.lang.Class<? extends java.lang.Throwable>)",
            "public java.lang.reflect.Method resolveMethodByExceptionType(java.lang.Class<? extends java.lang.Throwable>)"
        ],
        [
            "org.springframework.web.method.annotation.ModelFactory$ModelMethod",
            "org.springframework.web.method.annotation.ModelFactory$ModelMethod(org.springframework.web.method.support.InvocableHandlerMethod)",
            "public org.springframework.web.method.annotation.ModelFactory$ModelMethod(org.springframework.web.method.support.InvocableHandlerMethod)"
        ],
        [
            "org.springframework.web.method.support.InvocableHandlerMethod",
            "org.springframework.web.method.annotation.ModelFactory$ModelMethod.getHandlerMethod()",
            "public org.springframework.web.method.support.InvocableHandlerMethod getHandlerMethod()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ModelFactory$ModelMethod.checkDependencies(org.springframework.web.method.support.ModelAndViewContainer)",
            "public boolean checkDependencies(org.springframework.web.method.support.ModelAndViewContainer)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.annotation.ModelFactory$ModelMethod.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver",
            "org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.method.annotation.RequestHeaderMapMethodArgumentResolver",
            "org.springframework.web.method.annotation.RequestHeaderMapMethodArgumentResolver()",
            "public org.springframework.web.method.annotation.RequestHeaderMapMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.RequestHeaderMapMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.RequestHeaderMapMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.ModelFactory",
            "org.springframework.web.method.annotation.ModelFactory(java.util.List<org.springframework.web.method.support.InvocableHandlerMethod>, org.springframework.web.bind.support.WebDataBinderFactory, org.springframework.web.method.annotation.SessionAttributesHandler)",
            "public org.springframework.web.method.annotation.ModelFactory(java.util.List<org.springframework.web.method.support.InvocableHandlerMethod>, org.springframework.web.bind.support.WebDataBinderFactory, org.springframework.web.method.annotation.SessionAttributesHandler)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.ModelFactory.initModel(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.method.HandlerMethod)",
            "public void initModel(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.method.HandlerMethod) throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.ModelFactory.updateModel(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.method.support.ModelAndViewContainer)",
            "public void updateModel(org.springframework.web.context.request.NativeWebRequest, org.springframework.web.method.support.ModelAndViewContainer) throws java.lang.Exception"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.annotation.ModelFactory.getNameForParameter(org.springframework.core.MethodParameter)",
            "public static java.lang.String getNameForParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.annotation.ModelFactory.getNameForReturnValue(java.lang.Object, org.springframework.core.MethodParameter)",
            "public static java.lang.String getNameForReturnValue(java.lang.Object, org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor$1.getTarget()",
            "public java.lang.Object getTarget()"
        ],
        [
            "org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver",
            "org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ExpressionValueMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.method.annotation.InitBinderDataBinderFactory",
            "org.springframework.web.method.annotation.InitBinderDataBinderFactory(java.util.List<org.springframework.web.method.support.InvocableHandlerMethod>, org.springframework.web.bind.support.WebBindingInitializer)",
            "public org.springframework.web.method.annotation.InitBinderDataBinderFactory(java.util.List<org.springframework.web.method.support.InvocableHandlerMethod>, org.springframework.web.bind.support.WebBindingInitializer)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.InitBinderDataBinderFactory.initBinder(org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.NativeWebRequest)",
            "public void initBinder(org.springframework.web.bind.WebDataBinder, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.ModelMethodProcessor",
            "org.springframework.web.method.annotation.ModelMethodProcessor()",
            "public org.springframework.web.method.annotation.ModelMethodProcessor()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ModelMethodProcessor.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.ModelMethodProcessor.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ModelMethodProcessor.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.ModelMethodProcessor.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.MapMethodProcessor",
            "org.springframework.web.method.annotation.MapMethodProcessor()",
            "public org.springframework.web.method.annotation.MapMethodProcessor()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.MapMethodProcessor.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.MapMethodProcessor.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.MapMethodProcessor.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.MapMethodProcessor.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.SessionStatusMethodArgumentResolver",
            "org.springframework.web.method.annotation.SessionStatusMethodArgumentResolver()",
            "public org.springframework.web.method.annotation.SessionStatusMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.SessionStatusMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.SessionStatusMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver",
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver(boolean)",
            "public org.springframework.web.method.annotation.RequestParamMethodArgumentResolver(boolean)"
        ],
        [
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver",
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, boolean)",
            "public org.springframework.web.method.annotation.RequestParamMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory, boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.contributeMethodArgument(org.springframework.core.MethodParameter, java.lang.Object, org.springframework.web.util.UriComponentsBuilder, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.core.convert.ConversionService)",
            "public void contributeMethodArgument(org.springframework.core.MethodParameter, java.lang.Object, org.springframework.web.util.UriComponentsBuilder, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor(boolean)",
            "public org.springframework.web.method.annotation.ModelAttributeMethodProcessor(boolean)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public final java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveConstructorArgument(java.lang.String, java.lang.Class<?>, org.springframework.web.context.request.NativeWebRequest)",
            "public java.lang.Object resolveConstructorArgument(java.lang.String, java.lang.Class<?>, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor.supportsReturnType(org.springframework.core.MethodParameter)",
            "public boolean supportsReturnType(org.springframework.core.MethodParameter)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor.handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest)",
            "public void handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException",
            "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException(java.lang.Object, java.lang.Class<?>, java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)",
            "public org.springframework.web.method.annotation.MethodArgumentTypeMismatchException(java.lang.Object, java.lang.Class<?>, java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException.getName()",
            "public java.lang.String getName()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException.getParameter()",
            "public org.springframework.core.MethodParameter getParameter()"
        ],
        [
            "org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver",
            "org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)",
            "public org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver(org.springframework.beans.factory.config.ConfigurableBeanFactory)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "org.springframework.web.method.annotation.SessionAttributesHandler",
            "org.springframework.web.method.annotation.SessionAttributesHandler(java.lang.Class<?>, org.springframework.web.bind.support.SessionAttributeStore)",
            "public org.springframework.web.method.annotation.SessionAttributesHandler(java.lang.Class<?>, org.springframework.web.bind.support.SessionAttributeStore)"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.SessionAttributesHandler.hasSessionAttributes()",
            "public boolean hasSessionAttributes()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.SessionAttributesHandler.isHandlerSessionAttribute(java.lang.String, java.lang.Class<?>)",
            "public boolean isHandlerSessionAttribute(java.lang.String, java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.SessionAttributesHandler.storeAttributes(org.springframework.web.context.request.WebRequest, java.util.Map<java.lang.String, ?>)",
            "public void storeAttributes(org.springframework.web.context.request.WebRequest, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.web.method.annotation.SessionAttributesHandler.retrieveAttributes(org.springframework.web.context.request.WebRequest)",
            "public java.util.Map<java.lang.String, java.lang.Object> retrieveAttributes(org.springframework.web.context.request.WebRequest)"
        ],
        [
            "void",
            "org.springframework.web.method.annotation.SessionAttributesHandler.cleanupAttributes(org.springframework.web.context.request.WebRequest)",
            "public void cleanupAttributes(org.springframework.web.context.request.WebRequest)"
        ],
        [
            "org.springframework.web.method.annotation.ErrorsMethodArgumentResolver",
            "org.springframework.web.method.annotation.ErrorsMethodArgumentResolver()",
            "public org.springframework.web.method.annotation.ErrorsMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.ErrorsMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.ErrorsMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor$FieldAwareConstructorParameter",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor$FieldAwareConstructorParameter(java.lang.reflect.Constructor<?>, int, java.lang.String)",
            "public org.springframework.web.method.annotation.ModelAttributeMethodProcessor$FieldAwareConstructorParameter(java.lang.reflect.Constructor<?>, int, java.lang.String)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor$FieldAwareConstructorParameter.getParameterAnnotations()",
            "public java.lang.annotation.Annotation[] getParameterAnnotations()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.annotation.ModelAttributeMethodProcessor$FieldAwareConstructorParameter.getParameterName()",
            "public java.lang.String getParameterName()"
        ],
        [
            "org.springframework.web.method.annotation.MethodArgumentConversionNotSupportedException",
            "org.springframework.web.method.annotation.MethodArgumentConversionNotSupportedException(java.lang.Object, java.lang.Class<?>, java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)",
            "public org.springframework.web.method.annotation.MethodArgumentConversionNotSupportedException(java.lang.Object, java.lang.Class<?>, java.lang.String, org.springframework.core.MethodParameter, java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.annotation.MethodArgumentConversionNotSupportedException.getName()",
            "public java.lang.String getName()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.method.annotation.MethodArgumentConversionNotSupportedException.getParameter()",
            "public org.springframework.core.MethodParameter getParameter()"
        ],
        [
            "org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver$NamedValueInfo",
            "org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver$NamedValueInfo(java.lang.String, boolean, java.lang.String)",
            "public org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver$NamedValueInfo(java.lang.String, boolean, java.lang.String)"
        ],
        [
            "org.springframework.web.method.annotation.RequestParamMapMethodArgumentResolver",
            "org.springframework.web.method.annotation.RequestParamMapMethodArgumentResolver()",
            "public org.springframework.web.method.annotation.RequestParamMapMethodArgumentResolver()"
        ],
        [
            "boolean",
            "org.springframework.web.method.annotation.RequestParamMapMethodArgumentResolver.supportsParameter(org.springframework.core.MethodParameter)",
            "public boolean supportsParameter(org.springframework.core.MethodParameter)"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.annotation.RequestParamMapMethodArgumentResolver.resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory)",
            "public java.lang.Object resolveArgument(org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest, org.springframework.web.bind.support.WebDataBinderFactory) throws java.lang.Exception"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate$Builder",
            "org.springframework.web.method.HandlerTypePredicate$Builder()",
            "public org.springframework.web.method.HandlerTypePredicate$Builder()"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate$Builder",
            "org.springframework.web.method.HandlerTypePredicate$Builder.basePackage(java.lang.String...)",
            "public org.springframework.web.method.HandlerTypePredicate$Builder basePackage(java.lang.String...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate$Builder",
            "org.springframework.web.method.HandlerTypePredicate$Builder.basePackageClass(java.lang.Class<?>...)",
            "public org.springframework.web.method.HandlerTypePredicate$Builder basePackageClass(java.lang.Class<?>...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate$Builder",
            "org.springframework.web.method.HandlerTypePredicate$Builder.assignableType(java.lang.Class<?>...)",
            "public org.springframework.web.method.HandlerTypePredicate$Builder assignableType(java.lang.Class<?>...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate$Builder",
            "org.springframework.web.method.HandlerTypePredicate$Builder.annotation(java.lang.Class<? extends java.lang.annotation.Annotation>...)",
            "public final org.springframework.web.method.HandlerTypePredicate$Builder annotation(java.lang.Class<? extends java.lang.annotation.Annotation>...)"
        ],
        [
            "org.springframework.web.method.HandlerTypePredicate",
            "org.springframework.web.method.HandlerTypePredicate$Builder.build()",
            "public org.springframework.web.method.HandlerTypePredicate build()"
        ],
        [
            "org.springframework.web.method.ControllerAdviceBean",
            "org.springframework.web.method.ControllerAdviceBean(java.lang.Object)",
            "public org.springframework.web.method.ControllerAdviceBean(java.lang.Object)"
        ],
        [
            "org.springframework.web.method.ControllerAdviceBean",
            "org.springframework.web.method.ControllerAdviceBean(java.lang.String, org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.web.method.ControllerAdviceBean(java.lang.String, org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.web.method.ControllerAdviceBean",
            "org.springframework.web.method.ControllerAdviceBean(java.lang.String, org.springframework.beans.factory.BeanFactory, org.springframework.web.bind.annotation.ControllerAdvice)",
            "public org.springframework.web.method.ControllerAdviceBean(java.lang.String, org.springframework.beans.factory.BeanFactory, org.springframework.web.bind.annotation.ControllerAdvice)"
        ],
        [
            "int",
            "org.springframework.web.method.ControllerAdviceBean.getOrder()",
            "public int getOrder()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.method.ControllerAdviceBean.getBeanType()",
            "public java.lang.Class<?> getBeanType()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.ControllerAdviceBean.resolveBean()",
            "public java.lang.Object resolveBean()"
        ],
        [
            "boolean",
            "org.springframework.web.method.ControllerAdviceBean.isApplicableToBeanType(java.lang.Class<?>)",
            "public boolean isApplicableToBeanType(java.lang.Class<?>)"
        ],
        [
            "boolean",
            "org.springframework.web.method.ControllerAdviceBean.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.method.ControllerAdviceBean.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.method.ControllerAdviceBean.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.util.List<org.springframework.web.method.ControllerAdviceBean>",
            "org.springframework.web.method.ControllerAdviceBean.findAnnotatedBeans(org.springframework.context.ApplicationContext)",
            "public static java.util.List<org.springframework.web.method.ControllerAdviceBean> findAnnotatedBeans(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter(org.springframework.web.method.HandlerMethod, int)",
            "public org.springframework.web.method.HandlerMethod$HandlerMethodParameter(org.springframework.web.method.HandlerMethod, int)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.getContainingClass()",
            "public java.lang.Class<?> getContainingClass()"
        ],
        [
            "<T extends java.lang.annotation.Annotation> T",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.getMethodAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> T getMethodAnnotation(java.lang.Class<T>)"
        ],
        [
            "<T extends java.lang.annotation.Annotation> boolean",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.hasMethodAnnotation(java.lang.Class<T>)",
            "public <T extends java.lang.annotation.Annotation> boolean hasMethodAnnotation(java.lang.Class<T>)"
        ],
        [
            "java.lang.annotation.Annotation[]",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.getParameterAnnotations()",
            "public java.lang.annotation.Annotation[] getParameterAnnotations()"
        ],
        [
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.clone()",
            "public org.springframework.web.method.HandlerMethod$HandlerMethodParameter clone()"
        ],
        [
            "org.springframework.core.annotation.SynthesizingMethodParameter",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.clone()",
            "public org.springframework.core.annotation.SynthesizingMethodParameter clone()"
        ],
        [
            "org.springframework.core.MethodParameter",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.clone()",
            "public org.springframework.core.MethodParameter clone()"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.method.HandlerMethod$HandlerMethodParameter.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "java.lang.String",
            "org.springframework.web.cors.CorsConfiguration$OriginPattern.getDeclaredPattern()",
            "public java.lang.String getDeclaredPattern()"
        ],
        [
            "java.util.regex.Pattern",
            "org.springframework.web.cors.CorsConfiguration$OriginPattern.getPattern()",
            "public java.util.regex.Pattern getPattern()"
        ],
        [
            "boolean",
            "org.springframework.web.cors.CorsConfiguration$OriginPattern.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.web.cors.CorsConfiguration$OriginPattern.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.web.cors.CorsConfiguration$OriginPattern.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.web.cors.CorsUtils",
            "org.springframework.web.cors.CorsUtils()",
            "public org.springframework.web.cors.CorsUtils()"
        ],
        [
            "boolean",
            "org.springframework.web.cors.CorsUtils.isCorsRequest(javax.servlet.http.HttpServletRequest)",
            "public static boolean isCorsRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.cors.CorsUtils.isPreFlightRequest(javax.servlet.http.HttpServletRequest)",
            "public static boolean isPreFlightRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource()",
            "public org.springframework.web.cors.UrlBasedCorsConfigurationSource()"
        ],
        [
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource(org.springframework.web.util.pattern.PathPatternParser)",
            "public org.springframework.web.cors.UrlBasedCorsConfigurationSource(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setAlwaysUseFullPath(boolean)",
            "public void setAlwaysUseFullPath(boolean)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setUrlDecode(boolean)",
            "public void setUrlDecode(boolean)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setRemoveSemicolonContent(boolean)",
            "public void setRemoveSemicolonContent(boolean)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setUrlPathHelper(org.springframework.web.util.UrlPathHelper)",
            "public void setUrlPathHelper(org.springframework.web.util.UrlPathHelper)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setAllowInitLookupPath(boolean)",
            "public void setAllowInitLookupPath(boolean)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setLookupPathAttributeName(java.lang.String)",
            "public void setLookupPathAttributeName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setPathMatcher(org.springframework.util.PathMatcher)",
            "public void setPathMatcher(org.springframework.util.PathMatcher)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.setCorsConfigurations(java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration>)",
            "public void setCorsConfigurations(java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration>)"
        ],
        [
            "void",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.registerCorsConfiguration(java.lang.String, org.springframework.web.cors.CorsConfiguration)",
            "public void registerCorsConfiguration(java.lang.String, org.springframework.web.cors.CorsConfiguration)"
        ],
        [
            "java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration>",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.getCorsConfigurations()",
            "public java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration> getCorsConfigurations()"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.cors.UrlBasedCorsConfigurationSource.getCorsConfiguration(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.web.cors.CorsConfiguration getCorsConfiguration(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "org.springframework.web.cors.DefaultCorsProcessor",
            "org.springframework.web.cors.DefaultCorsProcessor()",
            "public org.springframework.web.cors.DefaultCorsProcessor()"
        ],
        [
            "boolean",
            "org.springframework.web.cors.DefaultCorsProcessor.processRequest(org.springframework.web.cors.CorsConfiguration, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public boolean processRequest(org.springframework.web.cors.CorsConfiguration, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException"
        ],
        [
            "org.springframework.web.cors.reactive.PreFlightRequestWebFilter",
            "org.springframework.web.cors.reactive.PreFlightRequestWebFilter(org.springframework.web.cors.reactive.PreFlightRequestHandler)",
            "public org.springframework.web.cors.reactive.PreFlightRequestWebFilter(org.springframework.web.cors.reactive.PreFlightRequestHandler)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.cors.reactive.PreFlightRequestWebFilter.filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)",
            "public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)"
        ],
        [
            "org.springframework.web.cors.reactive.CorsUtils",
            "org.springframework.web.cors.reactive.CorsUtils()",
            "public org.springframework.web.cors.reactive.CorsUtils()"
        ],
        [
            "boolean",
            "org.springframework.web.cors.reactive.CorsUtils.isCorsRequest(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public static boolean isCorsRequest(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.cors.reactive.CorsUtils.isPreFlightRequest(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public static boolean isPreFlightRequest(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "boolean",
            "org.springframework.web.cors.reactive.CorsUtils.isSameOrigin(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public static boolean isSameOrigin(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource",
            "org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource()",
            "public org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource()"
        ],
        [
            "org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource",
            "org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource(org.springframework.web.util.pattern.PathPatternParser)",
            "public org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource(org.springframework.web.util.pattern.PathPatternParser)"
        ],
        [
            "void",
            "org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource.setCorsConfigurations(java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration>)",
            "public void setCorsConfigurations(java.util.Map<java.lang.String, org.springframework.web.cors.CorsConfiguration>)"
        ],
        [
            "void",
            "org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource.registerCorsConfiguration(java.lang.String, org.springframework.web.cors.CorsConfiguration)",
            "public void registerCorsConfiguration(java.lang.String, org.springframework.web.cors.CorsConfiguration)"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource.getCorsConfiguration(org.springframework.web.server.ServerWebExchange)",
            "public org.springframework.web.cors.CorsConfiguration getCorsConfiguration(org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.cors.reactive.DefaultCorsProcessor",
            "org.springframework.web.cors.reactive.DefaultCorsProcessor()",
            "public org.springframework.web.cors.reactive.DefaultCorsProcessor()"
        ],
        [
            "boolean",
            "org.springframework.web.cors.reactive.DefaultCorsProcessor.process(org.springframework.web.cors.CorsConfiguration, org.springframework.web.server.ServerWebExchange)",
            "public boolean process(org.springframework.web.cors.CorsConfiguration, org.springframework.web.server.ServerWebExchange)"
        ],
        [
            "org.springframework.web.cors.reactive.CorsWebFilter",
            "org.springframework.web.cors.reactive.CorsWebFilter(org.springframework.web.cors.reactive.CorsConfigurationSource)",
            "public org.springframework.web.cors.reactive.CorsWebFilter(org.springframework.web.cors.reactive.CorsConfigurationSource)"
        ],
        [
            "org.springframework.web.cors.reactive.CorsWebFilter",
            "org.springframework.web.cors.reactive.CorsWebFilter(org.springframework.web.cors.reactive.CorsConfigurationSource, org.springframework.web.cors.reactive.CorsProcessor)",
            "public org.springframework.web.cors.reactive.CorsWebFilter(org.springframework.web.cors.reactive.CorsConfigurationSource, org.springframework.web.cors.reactive.CorsProcessor)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.web.cors.reactive.CorsWebFilter.filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)",
            "public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain)"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.cors.CorsConfiguration()",
            "public org.springframework.web.cors.CorsConfiguration()"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.cors.CorsConfiguration(org.springframework.web.cors.CorsConfiguration)",
            "public org.springframework.web.cors.CorsConfiguration(org.springframework.web.cors.CorsConfiguration)"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.setAllowedOrigins(java.util.List<java.lang.String>)",
            "public void setAllowedOrigins(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.cors.CorsConfiguration.getAllowedOrigins()",
            "public java.util.List<java.lang.String> getAllowedOrigins()"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.addAllowedOrigin(java.lang.String)",
            "public void addAllowedOrigin(java.lang.String)"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.cors.CorsConfiguration.setAllowedOriginPatterns(java.util.List<java.lang.String>)",
            "public org.springframework.web.cors.CorsConfiguration setAllowedOriginPatterns(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.cors.CorsConfiguration.getAllowedOriginPatterns()",
            "public java.util.List<java.lang.String> getAllowedOriginPatterns()"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.addAllowedOriginPattern(java.lang.String)",
            "public void addAllowedOriginPattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.setAllowedMethods(java.util.List<java.lang.String>)",
            "public void setAllowedMethods(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.cors.CorsConfiguration.getAllowedMethods()",
            "public java.util.List<java.lang.String> getAllowedMethods()"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.addAllowedMethod(org.springframework.http.HttpMethod)",
            "public void addAllowedMethod(org.springframework.http.HttpMethod)"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.addAllowedMethod(java.lang.String)",
            "public void addAllowedMethod(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.setAllowedHeaders(java.util.List<java.lang.String>)",
            "public void setAllowedHeaders(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.cors.CorsConfiguration.getAllowedHeaders()",
            "public java.util.List<java.lang.String> getAllowedHeaders()"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.addAllowedHeader(java.lang.String)",
            "public void addAllowedHeader(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.setExposedHeaders(java.util.List<java.lang.String>)",
            "public void setExposedHeaders(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.cors.CorsConfiguration.getExposedHeaders()",
            "public java.util.List<java.lang.String> getExposedHeaders()"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.addExposedHeader(java.lang.String)",
            "public void addExposedHeader(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.setAllowCredentials(java.lang.Boolean)",
            "public void setAllowCredentials(java.lang.Boolean)"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.web.cors.CorsConfiguration.getAllowCredentials()",
            "public java.lang.Boolean getAllowCredentials()"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.setMaxAge(java.time.Duration)",
            "public void setMaxAge(java.time.Duration)"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.setMaxAge(java.lang.Long)",
            "public void setMaxAge(java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.springframework.web.cors.CorsConfiguration.getMaxAge()",
            "public java.lang.Long getMaxAge()"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.cors.CorsConfiguration.applyPermitDefaultValues()",
            "public org.springframework.web.cors.CorsConfiguration applyPermitDefaultValues()"
        ],
        [
            "void",
            "org.springframework.web.cors.CorsConfiguration.validateAllowCredentials()",
            "public void validateAllowCredentials()"
        ],
        [
            "org.springframework.web.cors.CorsConfiguration",
            "org.springframework.web.cors.CorsConfiguration.combine(org.springframework.web.cors.CorsConfiguration)",
            "public org.springframework.web.cors.CorsConfiguration combine(org.springframework.web.cors.CorsConfiguration)"
        ],
        [
            "java.lang.String",
            "org.springframework.web.cors.CorsConfiguration.checkOrigin(java.lang.String)",
            "public java.lang.String checkOrigin(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.http.HttpMethod>",
            "org.springframework.web.cors.CorsConfiguration.checkHttpMethod(org.springframework.http.HttpMethod)",
            "public java.util.List<org.springframework.http.HttpMethod> checkHttpMethod(org.springframework.http.HttpMethod)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.web.cors.CorsConfiguration.checkHeaders(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> checkHeaders(java.util.List<java.lang.String>)"
        ],
        [
            "org.springframework.web.SpringServletContainerInitializer",
            "org.springframework.web.SpringServletContainerInitializer()",
            "public org.springframework.web.SpringServletContainerInitializer()"
        ],
        [
            "void",
            "org.springframework.web.SpringServletContainerInitializer.onStartup(java.util.Set<java.lang.Class<?>>, javax.servlet.ServletContext)",
            "public void onStartup(java.util.Set<java.lang.Class<?>>, javax.servlet.ServletContext) throws javax.servlet.ServletException"
        ],
        [
            "org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean",
            "org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean()",
            "public org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter",
            "org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter()",
            "public org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter.setBaseAddress(java.lang.String)",
            "public void setBaseAddress(java.lang.String)"
        ],
        [
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor()",
            "public org.springframework.remoting.jaxws.JaxWsPortClientInterceptor()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setJaxWsService(javax.xml.ws.Service)",
            "public void setJaxWsService(javax.xml.ws.Service)"
        ],
        [
            "javax.xml.ws.Service",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getJaxWsService()",
            "public javax.xml.ws.Service getJaxWsService()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setPortName(java.lang.String)",
            "public void setPortName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getPortName()",
            "public java.lang.String getPortName()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setUsername(java.lang.String)",
            "public void setUsername(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getUsername()",
            "public java.lang.String getUsername()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setPassword(java.lang.String)",
            "public void setPassword(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getPassword()",
            "public java.lang.String getPassword()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setEndpointAddress(java.lang.String)",
            "public void setEndpointAddress(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getEndpointAddress()",
            "public java.lang.String getEndpointAddress()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setMaintainSession(boolean)",
            "public void setMaintainSession(boolean)"
        ],
        [
            "boolean",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.isMaintainSession()",
            "public boolean isMaintainSession()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setUseSoapAction(boolean)",
            "public void setUseSoapAction(boolean)"
        ],
        [
            "boolean",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.isUseSoapAction()",
            "public boolean isUseSoapAction()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setSoapActionUri(java.lang.String)",
            "public void setSoapActionUri(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getSoapActionUri()",
            "public java.lang.String getSoapActionUri()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setCustomProperties(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setCustomProperties(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getCustomProperties()",
            "public java.util.Map<java.lang.String, java.lang.Object> getCustomProperties()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.addCustomProperty(java.lang.String, java.lang.Object)",
            "public void addCustomProperty(java.lang.String, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setPortFeatures(javax.xml.ws.WebServiceFeature...)",
            "public void setPortFeatures(javax.xml.ws.WebServiceFeature...)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setServiceInterface(java.lang.Class<?>)",
            "public void setServiceInterface(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.getServiceInterface()",
            "public java.lang.Class<?> getServiceInterface()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setLookupServiceOnStartup(boolean)",
            "public void setLookupServiceOnStartup(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.prepare()",
            "public void prepare()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.jaxws.JaxWsPortClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean()",
            "public org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.xml.ws.Service",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean.getObject()",
            "public javax.xml.ws.Service getObject()"
        ],
        [
            "java.lang.Class<? extends javax.xml.ws.Service>",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean.getObjectType()",
            "public java.lang.Class<? extends javax.xml.ws.Service> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter()",
            "public org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setServer(com.sun.net.httpserver.HttpServer)",
            "public void setServer(com.sun.net.httpserver.HttpServer)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setPort(int)",
            "public void setPort(int)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setHostname(java.lang.String)",
            "public void setHostname(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setBacklog(int)",
            "public void setBacklog(int)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setShutdownDelay(int)",
            "public void setShutdownDelay(int)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setBasePath(java.lang.String)",
            "public void setBasePath(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setFilters(java.util.List<com.sun.net.httpserver.Filter>)",
            "public void setFilters(java.util.List<com.sun.net.httpserver.Filter>)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.setAuthenticator(com.sun.net.httpserver.Authenticator)",
            "public void setAuthenticator(com.sun.net.httpserver.Authenticator)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter()",
            "public org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.setEndpointProperties(java.util.Map<java.lang.String, java.lang.Object>)",
            "public void setEndpointProperties(java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.setExecutor(java.util.concurrent.Executor)",
            "public void setExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.setBindingType(java.lang.String)",
            "public void setBindingType(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.setEndpointFeatures(javax.xml.ws.WebServiceFeature...)",
            "public void setEndpointFeatures(javax.xml.ws.WebServiceFeature...)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.publishEndpoints()",
            "public void publishEndpoints()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.AbstractJaxWsServiceExporter.destroy()",
            "public void destroy()"
        ],
        [
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory()",
            "public org.springframework.remoting.jaxws.LocalJaxWsServiceFactory()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.setWsdlDocumentUrl(java.net.URL)",
            "public void setWsdlDocumentUrl(java.net.URL)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.setWsdlDocumentResource(org.springframework.core.io.Resource)",
            "public void setWsdlDocumentResource(org.springframework.core.io.Resource) throws java.io.IOException"
        ],
        [
            "java.net.URL",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.getWsdlDocumentUrl()",
            "public java.net.URL getWsdlDocumentUrl()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.setNamespaceUri(java.lang.String)",
            "public void setNamespaceUri(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.getNamespaceUri()",
            "public java.lang.String getNamespaceUri()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.setServiceName(java.lang.String)",
            "public void setServiceName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.getServiceName()",
            "public java.lang.String getServiceName()"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.setServiceFeatures(javax.xml.ws.WebServiceFeature...)",
            "public void setServiceFeatures(javax.xml.ws.WebServiceFeature...)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.setExecutor(java.util.concurrent.Executor)",
            "public void setExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.setHandlerResolver(javax.xml.ws.handler.HandlerResolver)",
            "public void setHandlerResolver(javax.xml.ws.handler.HandlerResolver)"
        ],
        [
            "javax.xml.ws.Service",
            "org.springframework.remoting.jaxws.LocalJaxWsServiceFactory.createJaxWsService()",
            "public javax.xml.ws.Service createJaxWsService()"
        ],
        [
            "org.springframework.remoting.jaxws.JaxWsSoapFaultException",
            "org.springframework.remoting.jaxws.JaxWsSoapFaultException(javax.xml.ws.soap.SOAPFaultException)",
            "public org.springframework.remoting.jaxws.JaxWsSoapFaultException(javax.xml.ws.soap.SOAPFaultException)"
        ],
        [
            "javax.xml.soap.SOAPFault",
            "org.springframework.remoting.jaxws.JaxWsSoapFaultException.getFault()",
            "public final javax.xml.soap.SOAPFault getFault()"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsSoapFaultException.getFaultCode()",
            "public java.lang.String getFaultCode()"
        ],
        [
            "javax.xml.namespace.QName",
            "org.springframework.remoting.jaxws.JaxWsSoapFaultException.getFaultCodeAsQName()",
            "public javax.xml.namespace.QName getFaultCodeAsQName()"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsSoapFaultException.getFaultString()",
            "public java.lang.String getFaultString()"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.jaxws.JaxWsSoapFaultException.getFaultActor()",
            "public java.lang.String getFaultActor()"
        ],
        [
            "org.springframework.remoting.caucho.HessianServiceExporter",
            "org.springframework.remoting.caucho.HessianServiceExporter()",
            "public org.springframework.remoting.caucho.HessianServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianServiceExporter.handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public void handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "org.springframework.remoting.caucho.SimpleHessianServiceExporter",
            "org.springframework.remoting.caucho.SimpleHessianServiceExporter()",
            "public org.springframework.remoting.caucho.SimpleHessianServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.SimpleHessianServiceExporter.handle(com.sun.net.httpserver.HttpExchange)",
            "public void handle(com.sun.net.httpserver.HttpExchange) throws java.io.IOException"
        ],
        [
            "org.springframework.remoting.caucho.HessianProxyFactoryBean",
            "org.springframework.remoting.caucho.HessianProxyFactoryBean()",
            "public org.springframework.remoting.caucho.HessianProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.caucho.HessianProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.caucho.HessianProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.caucho.HessianProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.remoting.caucho.HessianExporter",
            "org.springframework.remoting.caucho.HessianExporter()",
            "public org.springframework.remoting.caucho.HessianExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.setSerializerFactory(com.caucho.hessian.io.SerializerFactory)",
            "public void setSerializerFactory(com.caucho.hessian.io.SerializerFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.setSendCollectionType(boolean)",
            "public void setSendCollectionType(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.setAllowNonSerializable(boolean)",
            "public void setAllowNonSerializable(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.setRemoteResolver(com.caucho.hessian.io.HessianRemoteResolver)",
            "public void setRemoteResolver(com.caucho.hessian.io.HessianRemoteResolver)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.setDebug(boolean)",
            "public void setDebug(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.prepare()",
            "public void prepare()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianExporter.invoke(java.io.InputStream, java.io.OutputStream)",
            "public void invoke(java.io.InputStream, java.io.OutputStream) throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.caucho.HessianClientInterceptor",
            "org.springframework.remoting.caucho.HessianClientInterceptor()",
            "public org.springframework.remoting.caucho.HessianClientInterceptor()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setProxyFactory(com.caucho.hessian.client.HessianProxyFactory)",
            "public void setProxyFactory(com.caucho.hessian.client.HessianProxyFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setSerializerFactory(com.caucho.hessian.io.SerializerFactory)",
            "public void setSerializerFactory(com.caucho.hessian.io.SerializerFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setSendCollectionType(boolean)",
            "public void setSendCollectionType(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setAllowNonSerializable(boolean)",
            "public void setAllowNonSerializable(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setOverloadEnabled(boolean)",
            "public void setOverloadEnabled(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setUsername(java.lang.String)",
            "public void setUsername(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setPassword(java.lang.String)",
            "public void setPassword(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setDebug(boolean)",
            "public void setDebug(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setChunkedPost(boolean)",
            "public void setChunkedPost(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setConnectionFactory(com.caucho.hessian.client.HessianConnectionFactory)",
            "public void setConnectionFactory(com.caucho.hessian.client.HessianConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setConnectTimeout(long)",
            "public void setConnectTimeout(long)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setReadTimeout(long)",
            "public void setReadTimeout(long)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setHessian2(boolean)",
            "public void setHessian2(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setHessian2Request(boolean)",
            "public void setHessian2Request(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.setHessian2Reply(boolean)",
            "public void setHessian2Reply(boolean)"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.remoting.caucho.HessianClientInterceptor.prepare()",
            "public void prepare() throws org.springframework.remoting.RemoteLookupFailureException"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.caucho.HessianClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter",
            "org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter()",
            "public org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
            "public void handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor",
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor()",
            "public org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.setContentType(java.lang.String)",
            "public void setContentType(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.getContentType()",
            "public java.lang.String getContentType()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.setAcceptGzipEncoding(boolean)",
            "public void setAcceptGzipEncoding(boolean)"
        ],
        [
            "boolean",
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.isAcceptGzipEncoding()",
            "public boolean isAcceptGzipEncoding()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.remoting.support.RemoteInvocationResult",
            "org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor.executeRequest(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration, org.springframework.remoting.support.RemoteInvocation)",
            "public final org.springframework.remoting.support.RemoteInvocationResult executeRequest(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration, org.springframework.remoting.support.RemoteInvocation) throws java.lang.Exception"
        ],
        [
            "org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter",
            "org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter()",
            "public org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.SimpleHttpInvokerServiceExporter.handle(com.sun.net.httpserver.HttpExchange)",
            "public void handle(com.sun.net.httpserver.HttpExchange) throws java.io.IOException"
        ],
        [
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor",
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor()",
            "public org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.setCodebaseUrl(java.lang.String)",
            "public void setCodebaseUrl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.getCodebaseUrl()",
            "public java.lang.String getCodebaseUrl()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.setHttpInvokerRequestExecutor(org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor)",
            "public void setHttpInvokerRequestExecutor(org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor)"
        ],
        [
            "org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor",
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.getHttpInvokerRequestExecutor()",
            "public org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor getHttpInvokerRequestExecutor()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter$FlushGuardedOutputStream",
            "org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter$FlushGuardedOutputStream(java.io.OutputStream)",
            "public org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter$FlushGuardedOutputStream(java.io.OutputStream)"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter$FlushGuardedOutputStream.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor",
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor()",
            "public org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor()"
        ],
        [
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor",
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor(org.apache.http.client.HttpClient)",
            "public org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor(org.apache.http.client.HttpClient)"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.setHttpClient(org.apache.http.client.HttpClient)",
            "public void setHttpClient(org.apache.http.client.HttpClient)"
        ],
        [
            "org.apache.http.client.HttpClient",
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.getHttpClient()",
            "public org.apache.http.client.HttpClient getHttpClient()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.setConnectTimeout(int)",
            "public void setConnectTimeout(int)"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.setConnectionRequestTimeout(int)",
            "public void setConnectionRequestTimeout(int)"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor.setReadTimeout(int)",
            "public void setReadTimeout(int)"
        ],
        [
            "org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor",
            "org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor()",
            "public org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor.setConnectTimeout(int)",
            "public void setConnectTimeout(int)"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor.setReadTimeout(int)",
            "public void setReadTimeout(int)"
        ],
        [
            "org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean",
            "org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean()",
            "public org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.time.Duration",
            "org.springframework.http.ResponseCookie.getMaxAge()",
            "public java.time.Duration getMaxAge()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ResponseCookie.getDomain()",
            "public java.lang.String getDomain()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ResponseCookie.getPath()",
            "public java.lang.String getPath()"
        ],
        [
            "boolean",
            "org.springframework.http.ResponseCookie.isSecure()",
            "public boolean isSecure()"
        ],
        [
            "boolean",
            "org.springframework.http.ResponseCookie.isHttpOnly()",
            "public boolean isHttpOnly()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ResponseCookie.getSameSite()",
            "public java.lang.String getSameSite()"
        ],
        [
            "boolean",
            "org.springframework.http.ResponseCookie.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.ResponseCookie.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ResponseCookie.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie.from(java.lang.String, java.lang.String)",
            "public static org.springframework.http.ResponseCookie$ResponseCookieBuilder from(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie.fromClientResponse(java.lang.String, java.lang.String)",
            "public static org.springframework.http.ResponseCookie$ResponseCookieBuilder fromClientResponse(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.http.HttpMethod[]",
            "org.springframework.http.HttpMethod.values()",
            "public static org.springframework.http.HttpMethod[] values()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.HttpMethod.valueOf(java.lang.String)",
            "public static org.springframework.http.HttpMethod valueOf(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.HttpMethod.resolve(java.lang.String)",
            "public static org.springframework.http.HttpMethod resolve(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.http.HttpMethod.matches(java.lang.String)",
            "public boolean matches(java.lang.String)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(java.lang.String)",
            "public org.springframework.http.MediaType(java.lang.String)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(java.lang.String, java.lang.String)",
            "public org.springframework.http.MediaType(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(java.lang.String, java.lang.String, java.nio.charset.Charset)",
            "public org.springframework.http.MediaType(java.lang.String, java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(java.lang.String, java.lang.String, double)",
            "public org.springframework.http.MediaType(java.lang.String, java.lang.String, double)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(org.springframework.http.MediaType, java.nio.charset.Charset)",
            "public org.springframework.http.MediaType(org.springframework.http.MediaType, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(org.springframework.http.MediaType, java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.http.MediaType(org.springframework.http.MediaType, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)",
            "public org.springframework.http.MediaType(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType(org.springframework.util.MimeType)",
            "public org.springframework.http.MediaType(org.springframework.util.MimeType)"
        ],
        [
            "double",
            "org.springframework.http.MediaType.getQualityValue()",
            "public double getQualityValue()"
        ],
        [
            "boolean",
            "org.springframework.http.MediaType.includes(org.springframework.http.MediaType)",
            "public boolean includes(org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.MediaType.isCompatibleWith(org.springframework.http.MediaType)",
            "public boolean isCompatibleWith(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType.copyQualityValue(org.springframework.http.MediaType)",
            "public org.springframework.http.MediaType copyQualityValue(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType.removeQualityValue()",
            "public org.springframework.http.MediaType removeQualityValue()"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType.valueOf(java.lang.String)",
            "public static org.springframework.http.MediaType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType.parseMediaType(java.lang.String)",
            "public static org.springframework.http.MediaType parseMediaType(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.MediaType.parseMediaTypes(java.lang.String)",
            "public static java.util.List<org.springframework.http.MediaType> parseMediaTypes(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.MediaType.parseMediaTypes(java.util.List<java.lang.String>)",
            "public static java.util.List<org.springframework.http.MediaType> parseMediaTypes(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.MediaType.asMediaTypes(java.util.List<org.springframework.util.MimeType>)",
            "public static java.util.List<org.springframework.http.MediaType> asMediaTypes(java.util.List<org.springframework.util.MimeType>)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.MediaType.asMediaType(org.springframework.util.MimeType)",
            "public static org.springframework.http.MediaType asMediaType(org.springframework.util.MimeType)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.MediaType.toString(java.util.Collection<org.springframework.http.MediaType>)",
            "public static java.lang.String toString(java.util.Collection<org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.http.MediaType.sortBySpecificity(java.util.List<org.springframework.http.MediaType>)",
            "public static void sortBySpecificity(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.http.MediaType.sortByQualityValue(java.util.List<org.springframework.http.MediaType>)",
            "public static void sortByQualityValue(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.http.MediaType.sortBySpecificityAndQuality(java.util.List<org.springframework.http.MediaType>)",
            "public static void sortBySpecificityAndQuality(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "org.springframework.http.client.AbstractClientHttpRequest",
            "org.springframework.http.client.AbstractClientHttpRequest()",
            "public org.springframework.http.client.AbstractClientHttpRequest()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.AbstractClientHttpRequest.getHeaders()",
            "public final org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.http.client.AbstractClientHttpRequest.getBody()",
            "public final java.io.OutputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.http.client.AbstractClientHttpRequest.execute()",
            "public final org.springframework.http.client.ClientHttpResponse execute() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.SimpleBufferingAsyncClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.SimpleBufferingAsyncClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder(java.lang.String, org.springframework.http.HttpHeaders, P, java.lang.Class<S>)",
            "public org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder(java.lang.String, org.springframework.http.HttpHeaders, P, java.lang.Class<S>)"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder(java.lang.String, org.springframework.http.HttpHeaders, P, org.springframework.core.ParameterizedTypeReference<S>)",
            "public org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder(java.lang.String, org.springframework.http.HttpHeaders, P, org.springframework.core.ParameterizedTypeReference<S>)"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder(java.lang.String, org.springframework.http.client.MultipartBodyBuilder$PublisherEntity<S, P>)",
            "public org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder(java.lang.String, org.springframework.http.client.MultipartBodyBuilder$PublisherEntity<S, P>)"
        ],
        [
            "org.springframework.http.HttpEntity<?>",
            "org.springframework.http.client.MultipartBodyBuilder$PublisherPartBuilder.build()",
            "public org.springframework.http.HttpEntity<?> build()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.SimpleStreamingAsyncClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.SimpleStreamingAsyncClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.OkHttp3ClientHttpRequest",
            "org.springframework.http.client.OkHttp3ClientHttpRequest(okhttp3.OkHttpClient, java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.OkHttp3ClientHttpRequest(okhttp3.OkHttpClient, java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.OkHttp3ClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.OkHttp3ClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.OkHttp3ClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.SimpleBufferingClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.SimpleBufferingClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.Netty4ClientHttpRequest",
            "org.springframework.http.client.Netty4ClientHttpRequest(io.netty.bootstrap.Bootstrap, java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.Netty4ClientHttpRequest(io.netty.bootstrap.Bootstrap, java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.Netty4ClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.Netty4ClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.Netty4ClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.http.client.Netty4ClientHttpRequest.execute()",
            "public org.springframework.http.client.ClientHttpResponse execute() throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory()",
            "public org.springframework.http.client.HttpComponentsClientHttpRequestFactory()"
        ],
        [
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory(org.apache.http.client.HttpClient)",
            "public org.springframework.http.client.HttpComponentsClientHttpRequestFactory(org.apache.http.client.HttpClient)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.setHttpClient(org.apache.http.client.HttpClient)",
            "public void setHttpClient(org.apache.http.client.HttpClient)"
        ],
        [
            "org.apache.http.client.HttpClient",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.getHttpClient()",
            "public org.apache.http.client.HttpClient getHttpClient()"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.setConnectTimeout(int)",
            "public void setConnectTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.setConnectionRequestTimeout(int)",
            "public void setConnectionRequestTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.setReadTimeout(int)",
            "public void setReadTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.setBufferRequestBody(boolean)",
            "public void setBufferRequestBody(boolean)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.setHttpContextFactory(java.util.function.BiFunction<org.springframework.http.HttpMethod, java.net.URI, org.apache.http.protocol.HttpContext>)",
            "public void setHttpContextFactory(java.util.function.BiFunction<org.springframework.http.HttpMethod, java.net.URI, org.apache.http.protocol.HttpContext>)"
        ],
        [
            "org.springframework.http.client.ClientHttpRequest",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.createRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory.destroy()",
            "public void destroy() throws java.lang.Exception"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.InterceptingClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.InterceptingClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.InterceptingClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "int",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpResponse.getStatusText()",
            "public java.lang.String getStatusText() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpResponse.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpResponse.close()",
            "public void close()"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder",
            "org.springframework.http.client.MultipartBodyBuilder()",
            "public org.springframework.http.client.MultipartBodyBuilder()"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder.part(java.lang.String, java.lang.Object)",
            "public org.springframework.http.client.MultipartBodyBuilder$PartBuilder part(java.lang.String, java.lang.Object)"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder.part(java.lang.String, java.lang.Object, org.springframework.http.MediaType)",
            "public org.springframework.http.client.MultipartBodyBuilder$PartBuilder part(java.lang.String, java.lang.Object, org.springframework.http.MediaType)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder.asyncPart(java.lang.String, P, java.lang.Class<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.http.client.MultipartBodyBuilder$PartBuilder asyncPart(java.lang.String, P, java.lang.Class<T>)"
        ],
        [
            "<T, P extends org.reactivestreams.Publisher<T>> org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder.asyncPart(java.lang.String, P, org.springframework.core.ParameterizedTypeReference<T>)",
            "public <T, P extends org.reactivestreams.Publisher<T>> org.springframework.http.client.MultipartBodyBuilder$PartBuilder asyncPart(java.lang.String, P, org.springframework.core.ParameterizedTypeReference<T>)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpEntity<?>>",
            "org.springframework.http.client.MultipartBodyBuilder.build()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpEntity<?>> build()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest.setBody(org.springframework.http.StreamingHttpOutputMessage$Body)",
            "public void setBody(org.springframework.http.StreamingHttpOutputMessage$Body)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.BufferingClientHttpRequestWrapper.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.BufferingClientHttpRequestWrapper.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.BufferingClientHttpRequestWrapper.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest(org.springframework.http.client.AsyncClientHttpRequestFactory, java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor>, java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.InterceptingAsyncClientHttpRequest(org.springframework.http.client.AsyncClientHttpRequestFactory, java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor>, java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.InterceptingClientHttpRequestFactory",
            "org.springframework.http.client.InterceptingClientHttpRequestFactory(org.springframework.http.client.ClientHttpRequestFactory, java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor>)",
            "public org.springframework.http.client.InterceptingClientHttpRequestFactory(org.springframework.http.client.ClientHttpRequestFactory, java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor>)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.AbstractAsyncClientHttpRequest.getHeaders()",
            "public final org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.http.client.AbstractAsyncClientHttpRequest.getBody()",
            "public final java.io.OutputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse>",
            "org.springframework.http.client.AbstractAsyncClientHttpRequest.executeAsync()",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse> executeAsync() throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory$HttpDelete",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory$HttpDelete(java.net.URI)",
            "public org.springframework.http.client.HttpComponentsClientHttpRequestFactory$HttpDelete(java.net.URI)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.HttpComponentsClientHttpRequestFactory$HttpDelete.getMethod()",
            "public java.lang.String getMethod()"
        ],
        [
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback(org.apache.http.client.methods.HttpUriRequest)",
            "public org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback(org.apache.http.client.methods.HttpUriRequest)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super org.springframework.http.client.ClientHttpResponse>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super org.springframework.http.client.ClientHttpResponse>)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback.addSuccessCallback(org.springframework.util.concurrent.SuccessCallback<? super org.springframework.http.client.ClientHttpResponse>)",
            "public void addSuccessCallback(org.springframework.util.concurrent.SuccessCallback<? super org.springframework.http.client.ClientHttpResponse>)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback.addFailureCallback(org.springframework.util.concurrent.FailureCallback)",
            "public void addFailureCallback(org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback.completed(org.apache.http.HttpResponse)",
            "public void completed(org.apache.http.HttpResponse)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback.failed(java.lang.Exception)",
            "public void failed(java.lang.Exception)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback.cancelled()",
            "public void cancelled()"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback.completed(java.lang.Object)",
            "public void completed(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.client.HttpComponentsClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.HttpComponentsClientHttpResponse.getStatusText()",
            "public java.lang.String getStatusText() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.HttpComponentsClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.client.HttpComponentsClientHttpResponse.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsClientHttpResponse.close()",
            "public void close()"
        ],
        [
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest$AsyncRequestExecution",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest$AsyncRequestExecution(org.springframework.http.client.InterceptingAsyncClientHttpRequest)",
            "public org.springframework.http.client.InterceptingAsyncClientHttpRequest$AsyncRequestExecution(org.springframework.http.client.InterceptingAsyncClientHttpRequest)"
        ],
        [
            "org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse>",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequest$AsyncRequestExecution.executeAsync(org.springframework.http.HttpRequest, byte[])",
            "public org.springframework.util.concurrent.ListenableFuture<org.springframework.http.client.ClientHttpResponse> executeAsync(org.springframework.http.HttpRequest, byte[]) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.support.ProxyFactoryBean",
            "org.springframework.http.client.support.ProxyFactoryBean()",
            "public org.springframework.http.client.support.ProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.http.client.support.ProxyFactoryBean.setType(java.net.Proxy$Type)",
            "public void setType(java.net.Proxy$Type)"
        ],
        [
            "void",
            "org.springframework.http.client.support.ProxyFactoryBean.setHostname(java.lang.String)",
            "public void setHostname(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.support.ProxyFactoryBean.setPort(int)",
            "public void setPort(int)"
        ],
        [
            "void",
            "org.springframework.http.client.support.ProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.IllegalArgumentException"
        ],
        [
            "java.net.Proxy",
            "org.springframework.http.client.support.ProxyFactoryBean.getObject()",
            "public java.net.Proxy getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.http.client.support.ProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.http.client.support.ProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.support.ProxyFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.http.client.support.HttpAccessor",
            "org.springframework.http.client.support.HttpAccessor()",
            "public org.springframework.http.client.support.HttpAccessor()"
        ],
        [
            "void",
            "org.springframework.http.client.support.HttpAccessor.setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)",
            "public void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)"
        ],
        [
            "org.springframework.http.client.ClientHttpRequestFactory",
            "org.springframework.http.client.support.HttpAccessor.getRequestFactory()",
            "public org.springframework.http.client.ClientHttpRequestFactory getRequestFactory()"
        ],
        [
            "void",
            "org.springframework.http.client.support.HttpAccessor.setClientHttpRequestInitializers(java.util.List<org.springframework.http.client.ClientHttpRequestInitializer>)",
            "public void setClientHttpRequestInitializers(java.util.List<org.springframework.http.client.ClientHttpRequestInitializer>)"
        ],
        [
            "java.util.List<org.springframework.http.client.ClientHttpRequestInitializer>",
            "org.springframework.http.client.support.HttpAccessor.getClientHttpRequestInitializers()",
            "public java.util.List<org.springframework.http.client.ClientHttpRequestInitializer> getClientHttpRequestInitializers()"
        ],
        [
            "org.springframework.http.client.support.BasicAuthenticationInterceptor",
            "org.springframework.http.client.support.BasicAuthenticationInterceptor(java.lang.String, java.lang.String)",
            "public org.springframework.http.client.support.BasicAuthenticationInterceptor(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.http.client.support.BasicAuthenticationInterceptor",
            "org.springframework.http.client.support.BasicAuthenticationInterceptor(java.lang.String, java.lang.String, java.nio.charset.Charset)",
            "public org.springframework.http.client.support.BasicAuthenticationInterceptor(java.lang.String, java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.http.client.support.BasicAuthenticationInterceptor.intercept(org.springframework.http.HttpRequest, byte[], org.springframework.http.client.ClientHttpRequestExecution)",
            "public org.springframework.http.client.ClientHttpResponse intercept(org.springframework.http.HttpRequest, byte[], org.springframework.http.client.ClientHttpRequestExecution) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.support.AsyncHttpAccessor",
            "org.springframework.http.client.support.AsyncHttpAccessor()",
            "public org.springframework.http.client.support.AsyncHttpAccessor()"
        ],
        [
            "void",
            "org.springframework.http.client.support.AsyncHttpAccessor.setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory)",
            "public void setAsyncRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory)"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequestFactory",
            "org.springframework.http.client.support.AsyncHttpAccessor.getAsyncRequestFactory()",
            "public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory()"
        ],
        [
            "org.springframework.http.client.support.InterceptingHttpAccessor",
            "org.springframework.http.client.support.InterceptingHttpAccessor()",
            "public org.springframework.http.client.support.InterceptingHttpAccessor()"
        ],
        [
            "void",
            "org.springframework.http.client.support.InterceptingHttpAccessor.setInterceptors(java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor>)",
            "public void setInterceptors(java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor>)"
        ],
        [
            "java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor>",
            "org.springframework.http.client.support.InterceptingHttpAccessor.getInterceptors()",
            "public java.util.List<org.springframework.http.client.ClientHttpRequestInterceptor> getInterceptors()"
        ],
        [
            "void",
            "org.springframework.http.client.support.InterceptingHttpAccessor.setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)",
            "public void setRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)"
        ],
        [
            "org.springframework.http.client.ClientHttpRequestFactory",
            "org.springframework.http.client.support.InterceptingHttpAccessor.getRequestFactory()",
            "public org.springframework.http.client.ClientHttpRequestFactory getRequestFactory()"
        ],
        [
            "org.springframework.http.client.support.InterceptingAsyncHttpAccessor",
            "org.springframework.http.client.support.InterceptingAsyncHttpAccessor()",
            "public org.springframework.http.client.support.InterceptingAsyncHttpAccessor()"
        ],
        [
            "void",
            "org.springframework.http.client.support.InterceptingAsyncHttpAccessor.setInterceptors(java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor>)",
            "public void setInterceptors(java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor>)"
        ],
        [
            "java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor>",
            "org.springframework.http.client.support.InterceptingAsyncHttpAccessor.getInterceptors()",
            "public java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> getInterceptors()"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequestFactory",
            "org.springframework.http.client.support.InterceptingAsyncHttpAccessor.getAsyncRequestFactory()",
            "public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory()"
        ],
        [
            "org.springframework.http.client.support.BasicAuthorizationInterceptor",
            "org.springframework.http.client.support.BasicAuthorizationInterceptor(java.lang.String, java.lang.String)",
            "public org.springframework.http.client.support.BasicAuthorizationInterceptor(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.http.client.support.BasicAuthorizationInterceptor.intercept(org.springframework.http.HttpRequest, byte[], org.springframework.http.client.ClientHttpRequestExecution)",
            "public org.springframework.http.client.ClientHttpResponse intercept(org.springframework.http.HttpRequest, byte[], org.springframework.http.client.ClientHttpRequestExecution) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.support.HttpRequestWrapper",
            "org.springframework.http.client.support.HttpRequestWrapper(org.springframework.http.HttpRequest)",
            "public org.springframework.http.client.support.HttpRequestWrapper(org.springframework.http.HttpRequest)"
        ],
        [
            "org.springframework.http.HttpRequest",
            "org.springframework.http.client.support.HttpRequestWrapper.getRequest()",
            "public org.springframework.http.HttpRequest getRequest()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.support.HttpRequestWrapper.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.support.HttpRequestWrapper.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.support.HttpRequestWrapper.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.support.HttpRequestWrapper.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.http.client.ClientHttpRequest",
            "org.springframework.http.client.AbstractClientHttpRequestFactoryWrapper.createRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public final org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.OkHttp3ClientHttpResponse",
            "org.springframework.http.client.OkHttp3ClientHttpResponse(okhttp3.Response)",
            "public org.springframework.http.client.OkHttp3ClientHttpResponse(okhttp3.Response)"
        ],
        [
            "int",
            "org.springframework.http.client.OkHttp3ClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.OkHttp3ClientHttpResponse.getStatusText()",
            "public java.lang.String getStatusText()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.client.OkHttp3ClientHttpResponse.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.OkHttp3ClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "void",
            "org.springframework.http.client.OkHttp3ClientHttpResponse.close()",
            "public void close()"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder(java.lang.String, org.springframework.http.HttpHeaders, java.lang.Object)",
            "public org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder(java.lang.String, org.springframework.http.HttpHeaders, java.lang.Object)"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder.contentType(org.springframework.http.MediaType)",
            "public org.springframework.http.client.MultipartBodyBuilder$PartBuilder contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder.filename(java.lang.String)",
            "public org.springframework.http.client.MultipartBodyBuilder$PartBuilder filename(java.lang.String)"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.http.client.MultipartBodyBuilder$PartBuilder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.http.client.MultipartBodyBuilder$PartBuilder",
            "org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.http.client.MultipartBodyBuilder$PartBuilder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.http.HttpEntity<?>",
            "org.springframework.http.client.MultipartBodyBuilder$DefaultPartBuilder.build()",
            "public org.springframework.http.HttpEntity<?> build()"
        ],
        [
            "org.springframework.http.client.SimpleClientHttpRequestFactory",
            "org.springframework.http.client.SimpleClientHttpRequestFactory()",
            "public org.springframework.http.client.SimpleClientHttpRequestFactory()"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.setProxy(java.net.Proxy)",
            "public void setProxy(java.net.Proxy)"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.setBufferRequestBody(boolean)",
            "public void setBufferRequestBody(boolean)"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.setChunkSize(int)",
            "public void setChunkSize(int)"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.setConnectTimeout(int)",
            "public void setConnectTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.setReadTimeout(int)",
            "public void setReadTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.setOutputStreaming(boolean)",
            "public void setOutputStreaming(boolean)"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor)",
            "public void setTaskExecutor(org.springframework.core.task.AsyncListenableTaskExecutor)"
        ],
        [
            "org.springframework.http.client.ClientHttpRequest",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.createRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequest",
            "org.springframework.http.client.SimpleClientHttpRequestFactory.createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.Netty4ClientHttpRequestFactory",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory()",
            "public org.springframework.http.client.Netty4ClientHttpRequestFactory()"
        ],
        [
            "org.springframework.http.client.Netty4ClientHttpRequestFactory",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory(io.netty.channel.EventLoopGroup)",
            "public org.springframework.http.client.Netty4ClientHttpRequestFactory(io.netty.channel.EventLoopGroup)"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.setMaxResponseSize(int)",
            "public void setMaxResponseSize(int)"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.setSslContext(io.netty.handler.ssl.SslContext)",
            "public void setSslContext(io.netty.handler.ssl.SslContext)"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.setConnectTimeout(int)",
            "public void setConnectTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.setReadTimeout(int)",
            "public void setReadTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.http.client.ClientHttpRequest",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.createRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequest",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpRequestFactory.destroy()",
            "public void destroy() throws java.lang.InterruptedException"
        ],
        [
            "org.springframework.http.client.Netty4ClientHttpRequest$RequestExecuteHandler",
            "org.springframework.http.client.Netty4ClientHttpRequest$RequestExecuteHandler(org.springframework.util.concurrent.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse>)",
            "public org.springframework.http.client.Netty4ClientHttpRequest$RequestExecuteHandler(org.springframework.util.concurrent.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse>)"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpRequest$RequestExecuteHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)",
            "public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception"
        ],
        [
            "int",
            "org.springframework.http.client.SimpleClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.SimpleClientHttpResponse.getStatusText()",
            "public java.lang.String getStatusText() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.SimpleClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.client.SimpleClientHttpResponse.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.SimpleClientHttpResponse.close()",
            "public void close()"
        ],
        [
            "org.springframework.http.client.Netty4ClientHttpResponse",
            "org.springframework.http.client.Netty4ClientHttpResponse(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.FullHttpResponse)",
            "public org.springframework.http.client.Netty4ClientHttpResponse(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.FullHttpResponse)"
        ],
        [
            "int",
            "org.springframework.http.client.Netty4ClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.Netty4ClientHttpResponse.getStatusText()",
            "public java.lang.String getStatusText() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.Netty4ClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.client.Netty4ClientHttpResponse.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.Netty4ClientHttpResponse.close()",
            "public void close()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.HttpComponentsClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.HttpComponentsClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory()",
            "public org.springframework.http.client.OkHttp3ClientHttpRequestFactory()"
        ],
        [
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory(okhttp3.OkHttpClient)",
            "public org.springframework.http.client.OkHttp3ClientHttpRequestFactory(okhttp3.OkHttpClient)"
        ],
        [
            "void",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory.setReadTimeout(int)",
            "public void setReadTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory.setWriteTimeout(int)",
            "public void setWriteTimeout(int)"
        ],
        [
            "void",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory.setConnectTimeout(int)",
            "public void setConnectTimeout(int)"
        ],
        [
            "org.springframework.http.client.ClientHttpRequest",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory.createRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.ClientHttpRequest createRequest(java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequest",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory.createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "void",
            "org.springframework.http.client.OkHttp3ClientHttpRequestFactory.destroy()",
            "public void destroy() throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory()",
            "public org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory()"
        ],
        [
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.nio.client.HttpAsyncClient)",
            "public org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.nio.client.HttpAsyncClient)"
        ],
        [
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.impl.nio.client.CloseableHttpAsyncClient)",
            "public org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.impl.nio.client.CloseableHttpAsyncClient)"
        ],
        [
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.client.HttpClient, org.apache.http.nio.client.HttpAsyncClient)",
            "public org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.client.HttpClient, org.apache.http.nio.client.HttpAsyncClient)"
        ],
        [
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.impl.client.CloseableHttpClient, org.apache.http.impl.nio.client.CloseableHttpAsyncClient)",
            "public org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory(org.apache.http.impl.client.CloseableHttpClient, org.apache.http.impl.nio.client.CloseableHttpAsyncClient)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.setAsyncClient(org.apache.http.nio.client.HttpAsyncClient)",
            "public void setAsyncClient(org.apache.http.nio.client.HttpAsyncClient)"
        ],
        [
            "org.apache.http.nio.client.HttpAsyncClient",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.getAsyncClient()",
            "public org.apache.http.nio.client.HttpAsyncClient getAsyncClient()"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.setHttpAsyncClient(org.apache.http.impl.nio.client.CloseableHttpAsyncClient)",
            "public void setHttpAsyncClient(org.apache.http.impl.nio.client.CloseableHttpAsyncClient)"
        ],
        [
            "org.apache.http.impl.nio.client.CloseableHttpAsyncClient",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.getHttpAsyncClient()",
            "public org.apache.http.impl.nio.client.CloseableHttpAsyncClient getHttpAsyncClient()"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequest",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory.destroy()",
            "public void destroy() throws java.lang.Exception"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.SimpleStreamingClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.SimpleStreamingClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$ClientHttpResponseFuture",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$ClientHttpResponseFuture(java.util.concurrent.Future<org.apache.http.HttpResponse>, org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback)",
            "public org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$ClientHttpResponseFuture(java.util.concurrent.Future<org.apache.http.HttpResponse>, org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$HttpResponseFutureCallback)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$ClientHttpResponseFuture.addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super org.springframework.http.client.ClientHttpResponse>)",
            "public void addCallback(org.springframework.util.concurrent.ListenableFutureCallback<? super org.springframework.http.client.ClientHttpResponse>)"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest$ClientHttpResponseFuture.addCallback(org.springframework.util.concurrent.SuccessCallback<? super org.springframework.http.client.ClientHttpResponse>, org.springframework.util.concurrent.FailureCallback)",
            "public void addCallback(org.springframework.util.concurrent.SuccessCallback<? super org.springframework.http.client.ClientHttpResponse>, org.springframework.util.concurrent.FailureCallback)"
        ],
        [
            "void",
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest$OkHttpListenableFuture$1.onResponse(okhttp3.Call, okhttp3.Response)",
            "public void onResponse(okhttp3.Call, okhttp3.Response)"
        ],
        [
            "void",
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest$OkHttpListenableFuture$1.onFailure(okhttp3.Call, java.io.IOException)",
            "public void onFailure(okhttp3.Call, java.io.IOException)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.HttpComponentsAsyncClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.core.ResolvableType",
            "org.springframework.http.client.MultipartBodyBuilder$PublisherEntity.getResolvableType()",
            "public org.springframework.core.ResolvableType getResolvableType()"
        ],
        [
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest$OkHttpListenableFuture",
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest$OkHttpListenableFuture(okhttp3.Call)",
            "public org.springframework.http.client.OkHttp3AsyncClientHttpRequest$OkHttpListenableFuture(okhttp3.Call)"
        ],
        [
            "org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution",
            "org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution(org.springframework.http.client.InterceptingClientHttpRequest)",
            "public org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution(org.springframework.http.client.InterceptingClientHttpRequest)"
        ],
        [
            "org.springframework.http.client.ClientHttpResponse",
            "org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(org.springframework.http.HttpRequest, byte[])",
            "public org.springframework.http.client.ClientHttpResponse execute(org.springframework.http.HttpRequest, byte[]) throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.BufferingClientHttpRequestFactory",
            "org.springframework.http.client.BufferingClientHttpRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)",
            "public org.springframework.http.client.BufferingClientHttpRequestFactory(org.springframework.http.client.ClientHttpRequestFactory)"
        ],
        [
            "org.springframework.http.client.AbstractClientHttpResponse",
            "org.springframework.http.client.AbstractClientHttpResponse()",
            "public org.springframework.http.client.AbstractClientHttpResponse()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.client.AbstractClientHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode() throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity(org.springframework.http.HttpHeaders, org.springframework.http.StreamingHttpOutputMessage$Body)",
            "public org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity(org.springframework.http.HttpHeaders, org.springframework.http.StreamingHttpOutputMessage$Body)"
        ],
        [
            "boolean",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.isRepeatable()",
            "public boolean isRepeatable()"
        ],
        [
            "boolean",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.isChunked()",
            "public boolean isChunked()"
        ],
        [
            "long",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.getContentLength()",
            "public long getContentLength()"
        ],
        [
            "org.apache.http.Header",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.getContentType()",
            "public org.apache.http.Header getContentType()"
        ],
        [
            "org.apache.http.Header",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.getContentEncoding()",
            "public org.apache.http.Header getContentEncoding()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.getContent()",
            "public java.io.InputStream getContent() throws java.io.IOException, java.lang.IllegalStateException"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.writeTo(java.io.OutputStream)",
            "public void writeTo(java.io.OutputStream) throws java.io.IOException"
        ],
        [
            "boolean",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.isStreaming()",
            "public boolean isStreaming()"
        ],
        [
            "void",
            "org.springframework.http.client.HttpComponentsStreamingClientHttpRequest$StreamingHttpEntity.consumeContent()",
            "public void consumeContent() throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest",
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest(okhttp3.OkHttpClient, java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.OkHttp3AsyncClientHttpRequest(okhttp3.OkHttpClient, java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.OkHttp3AsyncClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.client.BufferingClientHttpResponseWrapper.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode() throws java.io.IOException"
        ],
        [
            "int",
            "org.springframework.http.client.BufferingClientHttpResponseWrapper.getRawStatusCode()",
            "public int getRawStatusCode() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.BufferingClientHttpResponseWrapper.getStatusText()",
            "public java.lang.String getStatusText() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.BufferingClientHttpResponseWrapper.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.client.BufferingClientHttpResponseWrapper.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.client.BufferingClientHttpResponseWrapper.close()",
            "public void close()"
        ],
        [
            "org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory, java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor>)",
            "public org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory(org.springframework.http.client.AsyncClientHttpRequestFactory, java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor>)"
        ],
        [
            "org.springframework.http.client.AsyncClientHttpRequest",
            "org.springframework.http.client.InterceptingAsyncClientHttpRequestFactory.createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)",
            "public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(java.net.URI, org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.client.reactive.ReactorClientHttpResponse",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse(reactor.netty.http.client.HttpClientResponse, reactor.netty.Connection)",
            "public org.springframework.http.client.reactive.ReactorClientHttpResponse(reactor.netty.http.client.HttpClientResponse, reactor.netty.Connection)"
        ],
        [
            "org.springframework.http.client.reactive.ReactorClientHttpResponse",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse(reactor.netty.http.client.HttpClientResponse, reactor.netty.NettyInbound, io.netty.buffer.ByteBufAllocator)",
            "public org.springframework.http.client.reactive.ReactorClientHttpResponse(reactor.netty.http.client.HttpClientResponse, reactor.netty.NettyInbound, io.netty.buffer.ByteBufAllocator)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse.getId()",
            "public java.lang.String getId()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.client.reactive.AbstractClientHttpRequest",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest()",
            "public org.springframework.http.client.reactive.AbstractClientHttpRequest()"
        ],
        [
            "org.springframework.http.client.reactive.AbstractClientHttpRequest",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest(org.springframework.http.HttpHeaders)",
            "public org.springframework.http.client.reactive.AbstractClientHttpRequest(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest.beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)",
            "public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest.isCommitted()",
            "public boolean isCommitted()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$EntryIterator.next()",
            "public java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$1.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> iterator()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$1.size()",
            "public int size()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.ReactorClientHttpResponse$ChannelOperationsIdHelper.getId(reactor.netty.http.client.HttpClientResponse)",
            "public static java.lang.String getId(reactor.netty.http.client.HttpClientResponse)"
        ],
        [
            "org.springframework.http.client.reactive.JettyClientHttpRequest",
            "org.springframework.http.client.reactive.JettyClientHttpRequest(org.eclipse.jetty.client.api.Request, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.client.reactive.JettyClientHttpRequest(org.eclipse.jetty.client.api.Request, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "<T> T",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "org.eclipse.jetty.reactive.client.ReactiveRequest",
            "org.springframework.http.client.reactive.JettyClientHttpRequest.toReactiveRequest()",
            "public org.eclipse.jetty.reactive.client.ReactiveRequest toReactiveRequest()"
        ],
        [
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator(org.springframework.http.client.reactive.ClientHttpRequest)",
            "public org.springframework.http.client.reactive.ClientHttpRequestDecorator(org.springframework.http.client.reactive.ClientHttpRequest)"
        ],
        [
            "org.springframework.http.client.reactive.ClientHttpRequest",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.getDelegate()",
            "public org.springframework.http.client.reactive.ClientHttpRequest getDelegate()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "<T> T",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)",
            "public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.isCommitted()",
            "public boolean isCommitted()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.ClientHttpRequestDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$1.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> iterator()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$1.size()",
            "public int size()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderNamesIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.String next()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderNamesIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector$MonoFutureCallbackAdapter",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector$MonoFutureCallbackAdapter(reactor.core.publisher.MonoSink<org.springframework.http.client.reactive.ClientHttpResponse>, org.springframework.core.io.buffer.DataBufferFactory, org.apache.hc.client5.http.protocol.HttpClientContext)",
            "public org.springframework.http.client.reactive.HttpComponentsClientHttpConnector$MonoFutureCallbackAdapter(reactor.core.publisher.MonoSink<org.springframework.http.client.reactive.ClientHttpResponse>, org.springframework.core.io.buffer.DataBufferFactory, org.apache.hc.client5.http.protocol.HttpClientContext)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector$MonoFutureCallbackAdapter.completed(org.apache.hc.core5.http.Message<org.apache.hc.core5.http.HttpResponse, org.reactivestreams.Publisher<java.nio.ByteBuffer>>)",
            "public void completed(org.apache.hc.core5.http.Message<org.apache.hc.core5.http.HttpResponse, org.reactivestreams.Publisher<java.nio.ByteBuffer>>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector$MonoFutureCallbackAdapter.failed(java.lang.Exception)",
            "public void failed(java.lang.Exception)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector$MonoFutureCallbackAdapter.cancelled()",
            "public void cancelled()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector$MonoFutureCallbackAdapter.completed(java.lang.Object)",
            "public void completed(java.lang.Object)"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$1.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> iterator()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$1.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$EntryIterator.next()",
            "public java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.reactive.JettyClientHttpResponse$Jetty10HttpFieldsHelper.getHttpHeaders(org.eclipse.jetty.reactive.client.ReactiveResponse)",
            "public static org.springframework.http.HttpHeaders getHttpHeaders(org.eclipse.jetty.reactive.client.ReactiveResponse)"
        ],
        [
            "org.springframework.http.client.reactive.HttpComponentsClientHttpResponse",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpResponse(org.springframework.core.io.buffer.DataBufferFactory, org.apache.hc.core5.http.Message<org.apache.hc.core5.http.HttpResponse, org.reactivestreams.Publisher<java.nio.ByteBuffer>>, org.apache.hc.client5.http.protocol.HttpClientContext)",
            "public org.springframework.http.client.reactive.HttpComponentsClientHttpResponse(org.springframework.core.io.buffer.DataBufferFactory, org.apache.hc.core5.http.Message<org.apache.hc.core5.http.HttpResponse, org.reactivestreams.Publisher<java.nio.ByteBuffer>>, org.apache.hc.client5.http.protocol.HttpClientContext)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpResponse.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpResponse.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$HeaderEntry.getValue()",
            "public java.util.List<java.lang.String> getValue()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$HeaderEntry.setValue(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> setValue(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$HeaderEntry.setValue(java.lang.Object)",
            "public java.lang.Object setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$HeaderEntry.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyClientHttpRequest$1.succeeded()",
            "public void succeeded()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyClientHttpRequest$1.failed(java.lang.Throwable)",
            "public void failed(java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.util.List<java.lang.String> getValue()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderEntry.setValue(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> setValue(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderEntry.setValue(java.lang.Object)",
            "public java.lang.Object setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.util.List<java.lang.String> getValue()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderEntry.setValue(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> setValue(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderEntry.setValue(java.lang.Object)",
            "public java.lang.Object setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector()",
            "public org.springframework.http.client.reactive.HttpComponentsClientHttpConnector()"
        ],
        [
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector(org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient)",
            "public org.springframework.http.client.reactive.HttpComponentsClientHttpConnector(org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient)"
        ],
        [
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector(org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient, java.util.function.BiFunction<org.springframework.http.HttpMethod, java.net.URI, ? extends org.apache.hc.client5.http.protocol.HttpClientContext>)",
            "public org.springframework.http.client.reactive.HttpComponentsClientHttpConnector(org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient, java.util.function.BiFunction<org.springframework.http.HttpMethod, java.net.URI, ? extends org.apache.hc.client5.http.protocol.HttpClientContext>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector.setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)",
            "public void setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse>",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector.connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpConnector.close()",
            "public void close() throws java.io.IOException"
        ],
        [
            "org.springframework.http.client.reactive.AbstractClientHttpRequest$State[]",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest$State.values()",
            "public static org.springframework.http.client.reactive.AbstractClientHttpRequest$State[] values()"
        ],
        [
            "org.springframework.http.client.reactive.AbstractClientHttpRequest$State",
            "org.springframework.http.client.reactive.AbstractClientHttpRequest$State.valueOf(java.lang.String)",
            "public static org.springframework.http.client.reactive.AbstractClientHttpRequest$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.http.client.reactive.ReactorResourceFactory",
            "org.springframework.http.client.reactive.ReactorResourceFactory()",
            "public org.springframework.http.client.reactive.ReactorResourceFactory()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.setUseGlobalResources(boolean)",
            "public void setUseGlobalResources(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.ReactorResourceFactory.isUseGlobalResources()",
            "public boolean isUseGlobalResources()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.addGlobalResourcesConsumer(java.util.function.Consumer<reactor.netty.http.HttpResources>)",
            "public void addGlobalResourcesConsumer(java.util.function.Consumer<reactor.netty.http.HttpResources>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.setConnectionProviderSupplier(java.util.function.Supplier<reactor.netty.resources.ConnectionProvider>)",
            "public void setConnectionProviderSupplier(java.util.function.Supplier<reactor.netty.resources.ConnectionProvider>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.setConnectionProvider(reactor.netty.resources.ConnectionProvider)",
            "public void setConnectionProvider(reactor.netty.resources.ConnectionProvider)"
        ],
        [
            "reactor.netty.resources.ConnectionProvider",
            "org.springframework.http.client.reactive.ReactorResourceFactory.getConnectionProvider()",
            "public reactor.netty.resources.ConnectionProvider getConnectionProvider()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.setLoopResourcesSupplier(java.util.function.Supplier<reactor.netty.resources.LoopResources>)",
            "public void setLoopResourcesSupplier(java.util.function.Supplier<reactor.netty.resources.LoopResources>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.setLoopResources(reactor.netty.resources.LoopResources)",
            "public void setLoopResources(reactor.netty.resources.LoopResources)"
        ],
        [
            "reactor.netty.resources.LoopResources",
            "org.springframework.http.client.reactive.ReactorResourceFactory.getLoopResources()",
            "public reactor.netty.resources.LoopResources getLoopResources()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.setShutdownQuietPeriod(java.time.Duration)",
            "public void setShutdownQuietPeriod(java.time.Duration)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.setShutdownTimeout(java.time.Duration)",
            "public void setShutdownTimeout(java.time.Duration)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.ReactorResourceFactory.destroy()",
            "public void destroy()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderNamesIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.String next()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderNamesIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$EntryIterator.next()",
            "public java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI, org.apache.hc.client5.http.protocol.HttpClientContext, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.client.reactive.HttpComponentsClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI, org.apache.hc.client5.http.protocol.HttpClientContext, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "<T> T",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "org.apache.hc.core5.http.nio.AsyncRequestProducer",
            "org.springframework.http.client.reactive.HttpComponentsClientHttpRequest.toRequestProducer()",
            "public org.apache.hc.core5.http.nio.AsyncRequestProducer toRequestProducer()"
        ],
        [
            "org.springframework.http.client.reactive.ReactorClientHttpConnector",
            "org.springframework.http.client.reactive.ReactorClientHttpConnector()",
            "public org.springframework.http.client.reactive.ReactorClientHttpConnector()"
        ],
        [
            "org.springframework.http.client.reactive.ReactorClientHttpConnector",
            "org.springframework.http.client.reactive.ReactorClientHttpConnector(org.springframework.http.client.reactive.ReactorResourceFactory, java.util.function.Function<reactor.netty.http.client.HttpClient, reactor.netty.http.client.HttpClient>)",
            "public org.springframework.http.client.reactive.ReactorClientHttpConnector(org.springframework.http.client.reactive.ReactorResourceFactory, java.util.function.Function<reactor.netty.http.client.HttpClient, reactor.netty.http.client.HttpClient>)"
        ],
        [
            "org.springframework.http.client.reactive.ReactorClientHttpConnector",
            "org.springframework.http.client.reactive.ReactorClientHttpConnector(reactor.netty.http.client.HttpClient)",
            "public org.springframework.http.client.reactive.ReactorClientHttpConnector(reactor.netty.http.client.HttpClient)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse>",
            "org.springframework.http.client.reactive.ReactorClientHttpConnector.connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "org.springframework.http.client.reactive.JettyClientHttpConnector",
            "org.springframework.http.client.reactive.JettyClientHttpConnector()",
            "public org.springframework.http.client.reactive.JettyClientHttpConnector()"
        ],
        [
            "org.springframework.http.client.reactive.JettyClientHttpConnector",
            "org.springframework.http.client.reactive.JettyClientHttpConnector(org.eclipse.jetty.client.HttpClient)",
            "public org.springframework.http.client.reactive.JettyClientHttpConnector(org.eclipse.jetty.client.HttpClient)"
        ],
        [
            "org.springframework.http.client.reactive.JettyClientHttpConnector",
            "org.springframework.http.client.reactive.JettyClientHttpConnector(org.eclipse.jetty.client.HttpClient, org.springframework.http.client.reactive.JettyResourceFactory)",
            "public org.springframework.http.client.reactive.JettyClientHttpConnector(org.eclipse.jetty.client.HttpClient, org.springframework.http.client.reactive.JettyResourceFactory)"
        ],
        [
            "org.springframework.http.client.reactive.JettyClientHttpConnector",
            "org.springframework.http.client.reactive.JettyClientHttpConnector(org.springframework.http.client.reactive.JettyResourceFactory, java.util.function.Consumer<org.eclipse.jetty.client.HttpClient>)",
            "public org.springframework.http.client.reactive.JettyClientHttpConnector(org.springframework.http.client.reactive.JettyResourceFactory, java.util.function.Consumer<org.eclipse.jetty.client.HttpClient>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyClientHttpConnector.setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)",
            "public void setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse>",
            "org.springframework.http.client.reactive.JettyClientHttpConnector.connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)",
            "public reactor.core.publisher.Mono<org.springframework.http.client.reactive.ClientHttpResponse> connect(org.springframework.http.HttpMethod, java.net.URI, java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest, reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator(org.springframework.http.client.reactive.ClientHttpResponse)",
            "public org.springframework.http.client.reactive.ClientHttpResponseDecorator(org.springframework.http.client.reactive.ClientHttpResponse)"
        ],
        [
            "org.springframework.http.client.reactive.ClientHttpResponse",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.getDelegate()",
            "public org.springframework.http.client.reactive.ClientHttpResponse getDelegate()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.getId()",
            "public java.lang.String getId()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.ClientHttpResponseDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderNames.iterator()",
            "public java.util.Iterator<java.lang.String> iterator()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.JettyHeadersAdapter$HeaderNames.size()",
            "public int size()"
        ],
        [
            "org.springframework.http.client.reactive.ReactorClientHttpRequest",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI, reactor.netty.http.client.HttpClientRequest, reactor.netty.NettyOutbound)",
            "public org.springframework.http.client.reactive.ReactorClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI, reactor.netty.http.client.HttpClientRequest, reactor.netty.NettyOutbound)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "<T> T",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.writeWith(java.nio.file.Path, long, long)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(java.nio.file.Path, long, long)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.client.reactive.ReactorClientHttpRequest.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "org.springframework.http.client.reactive.JettyResourceFactory",
            "org.springframework.http.client.reactive.JettyResourceFactory()",
            "public org.springframework.http.client.reactive.JettyResourceFactory()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyResourceFactory.setExecutor(java.util.concurrent.Executor)",
            "public void setExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyResourceFactory.setByteBufferPool(org.eclipse.jetty.io.ByteBufferPool)",
            "public void setByteBufferPool(org.eclipse.jetty.io.ByteBufferPool)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyResourceFactory.setScheduler(org.eclipse.jetty.util.thread.Scheduler)",
            "public void setScheduler(org.eclipse.jetty.util.thread.Scheduler)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyResourceFactory.setThreadPrefix(java.lang.String)",
            "public void setThreadPrefix(java.lang.String)"
        ],
        [
            "java.util.concurrent.Executor",
            "org.springframework.http.client.reactive.JettyResourceFactory.getExecutor()",
            "public java.util.concurrent.Executor getExecutor()"
        ],
        [
            "org.eclipse.jetty.io.ByteBufferPool",
            "org.springframework.http.client.reactive.JettyResourceFactory.getByteBufferPool()",
            "public org.eclipse.jetty.io.ByteBufferPool getByteBufferPool()"
        ],
        [
            "org.eclipse.jetty.util.thread.Scheduler",
            "org.springframework.http.client.reactive.JettyResourceFactory.getScheduler()",
            "public org.eclipse.jetty.util.thread.Scheduler getScheduler()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyResourceFactory.afterPropertiesSet()",
            "public void afterPropertiesSet() throws java.lang.Exception"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyResourceFactory.destroy()",
            "public void destroy() throws java.lang.Exception"
        ],
        [
            "org.springframework.http.client.reactive.JettyClientHttpResponse",
            "org.springframework.http.client.reactive.JettyClientHttpResponse(org.eclipse.jetty.reactive.client.ReactiveResponse, org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.http.client.reactive.JettyClientHttpResponse(org.eclipse.jetty.reactive.client.ReactiveResponse, org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.client.reactive.JettyClientHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.JettyClientHttpResponse.getRawStatusCode()",
            "public int getRawStatusCode()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.http.client.reactive.JettyClientHttpResponse.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.client.reactive.JettyClientHttpResponse.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.client.reactive.JettyClientHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "default",
            "org.springframework.http.client.reactive.ClientHttpResponse.java.lang.String getId()",
            "public default java.lang.String getId()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.HttpComponentsHeadersAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.client.reactive.JettyHeadersAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderNames.iterator()",
            "public java.util.Iterator<java.lang.String> iterator()"
        ],
        [
            "int",
            "org.springframework.http.client.reactive.NettyHeadersAdapter$HeaderNames.size()",
            "public int size()"
        ],
        [
            "org.springframework.http.HttpStatus[]",
            "org.springframework.http.HttpStatus.values()",
            "public static org.springframework.http.HttpStatus[] values()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.HttpStatus.valueOf(java.lang.String)",
            "public static org.springframework.http.HttpStatus valueOf(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.http.HttpStatus.value()",
            "public int value()"
        ],
        [
            "org.springframework.http.HttpStatus$Series",
            "org.springframework.http.HttpStatus.series()",
            "public org.springframework.http.HttpStatus$Series series()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpStatus.getReasonPhrase()",
            "public java.lang.String getReasonPhrase()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpStatus.is1xxInformational()",
            "public boolean is1xxInformational()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpStatus.is2xxSuccessful()",
            "public boolean is2xxSuccessful()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpStatus.is3xxRedirection()",
            "public boolean is3xxRedirection()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpStatus.is4xxClientError()",
            "public boolean is4xxClientError()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpStatus.is5xxServerError()",
            "public boolean is5xxServerError()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpStatus.isError()",
            "public boolean isError()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpStatus.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.HttpStatus.valueOf(int)",
            "public static org.springframework.http.HttpStatus valueOf(int)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.HttpStatus.resolve(int)",
            "public static org.springframework.http.HttpStatus resolve(int)"
        ],
        [
            "org.springframework.http.HttpEntity",
            "org.springframework.http.HttpEntity(T)",
            "public org.springframework.http.HttpEntity(T)"
        ],
        [
            "org.springframework.http.HttpEntity",
            "org.springframework.http.HttpEntity(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.http.HttpEntity(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.http.HttpEntity",
            "org.springframework.http.HttpEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.http.HttpEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.HttpEntity.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "T",
            "org.springframework.http.HttpEntity.getBody()",
            "public T getBody()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpEntity.hasBody()",
            "public boolean hasBody()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpEntity.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.HttpEntity.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpEntity.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.ReadOnlyHttpHeaders.getContentType()",
            "public org.springframework.http.MediaType getContentType()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.ReadOnlyHttpHeaders.getAccept()",
            "public java.util.List<org.springframework.http.MediaType> getAccept()"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.clearContentHeaders()",
            "public void clearContentHeaders()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.ReadOnlyHttpHeaders.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.ReadOnlyHttpHeaders.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.ReadOnlyHttpHeaders.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.ReadOnlyHttpHeaders.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.ReadOnlyHttpHeaders.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.clear()",
            "public void clear()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.ReadOnlyHttpHeaders.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.ReadOnlyHttpHeaders.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.ReadOnlyHttpHeaders.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.ReadOnlyHttpHeaders.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.ReadOnlyHttpHeaders.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.ReadOnlyHttpHeaders.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.ResponseCookie$Rfc6265Utils.validateCookieName(java.lang.String)",
            "public static void validateCookieName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.ResponseCookie$Rfc6265Utils.validateCookieValue(java.lang.String)",
            "public static void validateCookieValue(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.ResponseCookie$Rfc6265Utils.validateDomain(java.lang.String)",
            "public static void validateDomain(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.ResponseCookie$Rfc6265Utils.validatePath(java.lang.String)",
            "public static void validatePath(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpRange$SuffixByteRange",
            "org.springframework.http.HttpRange$SuffixByteRange(long)",
            "public org.springframework.http.HttpRange$SuffixByteRange(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpRange$SuffixByteRange.getRangeStart(long)",
            "public long getRangeStart(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpRange$SuffixByteRange.getRangeEnd(long)",
            "public long getRangeEnd(long)"
        ],
        [
            "boolean",
            "org.springframework.http.HttpRange$SuffixByteRange.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.HttpRange$SuffixByteRange.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpRange$SuffixByteRange.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.http.ResponseEntity(org.springframework.http.HttpStatus)",
            "public org.springframework.http.ResponseEntity(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.http.ResponseEntity(T, org.springframework.http.HttpStatus)",
            "public org.springframework.http.ResponseEntity(T, org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.http.ResponseEntity(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpStatus)",
            "public org.springframework.http.ResponseEntity(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.http.ResponseEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpStatus)",
            "public org.springframework.http.ResponseEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.http.ResponseEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, int)",
            "public org.springframework.http.ResponseEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, int)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.ResponseEntity.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "int",
            "org.springframework.http.ResponseEntity.getStatusCodeValue()",
            "public int getStatusCodeValue()"
        ],
        [
            "boolean",
            "org.springframework.http.ResponseEntity.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.ResponseEntity.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ResponseEntity.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.status(org.springframework.http.HttpStatus)",
            "public static org.springframework.http.ResponseEntity$BodyBuilder status(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.status(int)",
            "public static org.springframework.http.ResponseEntity$BodyBuilder status(int)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.ok()",
            "public static org.springframework.http.ResponseEntity$BodyBuilder ok()"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.http.ResponseEntity.ok(T)",
            "public static <T> org.springframework.http.ResponseEntity<T> ok(T)"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.http.ResponseEntity.of(java.util.Optional<T>)",
            "public static <T> org.springframework.http.ResponseEntity<T> of(java.util.Optional<T>)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.created(java.net.URI)",
            "public static org.springframework.http.ResponseEntity$BodyBuilder created(java.net.URI)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.accepted()",
            "public static org.springframework.http.ResponseEntity$BodyBuilder accepted()"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder<?>",
            "org.springframework.http.ResponseEntity.noContent()",
            "public static org.springframework.http.ResponseEntity$HeadersBuilder<?> noContent()"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.badRequest()",
            "public static org.springframework.http.ResponseEntity$BodyBuilder badRequest()"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder<?>",
            "org.springframework.http.ResponseEntity.notFound()",
            "public static org.springframework.http.ResponseEntity$HeadersBuilder<?> notFound()"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.unprocessableEntity()",
            "public static org.springframework.http.ResponseEntity$BodyBuilder unprocessableEntity()"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity.internalServerError()",
            "public static org.springframework.http.ResponseEntity$BodyBuilder internalServerError()"
        ],
        [
            "org.springframework.http.MediaTypeEditor",
            "org.springframework.http.MediaTypeEditor()",
            "public org.springframework.http.MediaTypeEditor()"
        ],
        [
            "void",
            "org.springframework.http.MediaTypeEditor.setAsText(java.lang.String)",
            "public void setAsText(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.MediaTypeEditor.getAsText()",
            "public java.lang.String getAsText()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.RequestEntity$UriTemplateRequestEntity.getUriTemplate()",
            "public java.lang.String getUriTemplate()"
        ],
        [
            "java.lang.Object[]",
            "org.springframework.http.RequestEntity$UriTemplateRequestEntity.getVars()",
            "public java.lang.Object[] getVars()"
        ],
        [
            "java.util.Map<java.lang.String, ?>",
            "org.springframework.http.RequestEntity$UriTemplateRequestEntity.getVarsMap()",
            "public java.util.Map<java.lang.String, ?> getVarsMap()"
        ],
        [
            "boolean",
            "org.springframework.http.RequestEntity$UriTemplateRequestEntity.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.RequestEntity$UriTemplateRequestEntity.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.RequestEntity$UriTemplateRequestEntity.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.DecoderHttpMessageReader",
            "org.springframework.http.codec.DecoderHttpMessageReader(org.springframework.core.codec.Decoder<T>)",
            "public org.springframework.http.codec.DecoderHttpMessageReader(org.springframework.core.codec.Decoder<T>)"
        ],
        [
            "org.springframework.core.codec.Decoder<T>",
            "org.springframework.http.codec.DecoderHttpMessageReader.getDecoder()",
            "public org.springframework.core.codec.Decoder<T> getDecoder()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.DecoderHttpMessageReader.getReadableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.DecoderHttpMessageReader.getReadableMediaTypes(org.springframework.core.ResolvableType)",
            "public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Flux<T>",
            "org.springframework.http.codec.DecoderHttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<T>",
            "org.springframework.http.codec.DecoderHttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Flux<T>",
            "org.springframework.http.codec.DecoderHttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<T>",
            "org.springframework.http.codec.DecoderHttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.EncoderHttpMessageWriter",
            "org.springframework.http.codec.EncoderHttpMessageWriter(org.springframework.core.codec.Encoder<T>)",
            "public org.springframework.http.codec.EncoderHttpMessageWriter(org.springframework.core.codec.Encoder<T>)"
        ],
        [
            "org.springframework.core.codec.Encoder<T>",
            "org.springframework.http.codec.EncoderHttpMessageWriter.getEncoder()",
            "public org.springframework.core.codec.Encoder<T> getEncoder()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.EncoderHttpMessageWriter.getWritableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.EncoderHttpMessageWriter.getWritableMediaTypes(org.springframework.core.ResolvableType)",
            "public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "boolean",
            "org.springframework.http.codec.EncoderHttpMessageWriter.canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.EncoderHttpMessageWriter.write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.EncoderHttpMessageWriter.write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl()",
            "public org.springframework.http.codec.ServerSentEvent$BuilderImpl()"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl(T)",
            "public org.springframework.http.codec.ServerSentEvent$BuilderImpl(T)"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent$Builder<T>",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl.id(java.lang.String)",
            "public org.springframework.http.codec.ServerSentEvent$Builder<T> id(java.lang.String)"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent$Builder<T>",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl.event(java.lang.String)",
            "public org.springframework.http.codec.ServerSentEvent$Builder<T> event(java.lang.String)"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent$Builder<T>",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl.retry(java.time.Duration)",
            "public org.springframework.http.codec.ServerSentEvent$Builder<T> retry(java.time.Duration)"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent$Builder<T>",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl.comment(java.lang.String)",
            "public org.springframework.http.codec.ServerSentEvent$Builder<T> comment(java.lang.String)"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent$Builder<T>",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl.data(T)",
            "public org.springframework.http.codec.ServerSentEvent$Builder<T> data(T)"
        ],
        [
            "org.springframework.http.codec.ServerSentEvent<T>",
            "org.springframework.http.codec.ServerSentEvent$BuilderImpl.build()",
            "public org.springframework.http.codec.ServerSentEvent<T> build()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.HttpMessageReader.getReadableMediaTypes(org.springframework.core.ResolvableType)",
            "public default java.util.List<org.springframework.http.MediaType> getReadableMediaTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "reactor.core.publisher.Flux<T>",
            "org.springframework.http.codec.HttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public default reactor.core.publisher.Flux<T> read(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<T>",
            "org.springframework.http.codec.HttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public default reactor.core.publisher.Mono<T> readMono(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.ResourceHttpMessageReader",
            "org.springframework.http.codec.ResourceHttpMessageReader()",
            "public org.springframework.http.codec.ResourceHttpMessageReader()"
        ],
        [
            "org.springframework.http.codec.ResourceHttpMessageReader",
            "org.springframework.http.codec.ResourceHttpMessageReader(org.springframework.core.codec.ResourceDecoder)",
            "public org.springframework.http.codec.ResourceHttpMessageReader(org.springframework.core.codec.ResourceDecoder)"
        ],
        [
            "org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent",
            "org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent(int)",
            "public org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent(int)"
        ],
        [
            "java.util.List<? extends javax.xml.stream.events.XMLEvent>",
            "org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent.apply(org.springframework.core.io.buffer.DataBuffer)",
            "public java.util.List<? extends javax.xml.stream.events.XMLEvent> apply(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent.endOfInput()",
            "public void endOfInput()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler(javax.xml.namespace.QName)",
            "public org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler(javax.xml.namespace.QName)"
        ],
        [
            "void",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler.accept(javax.xml.stream.events.XMLEvent, reactor.core.publisher.SynchronousSink<java.util.List<javax.xml.stream.events.XMLEvent>>)",
            "public void accept(javax.xml.stream.events.XMLEvent, reactor.core.publisher.SynchronousSink<java.util.List<javax.xml.stream.events.XMLEvent>>)"
        ],
        [
            "void",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder$SplitHandler.accept(java.lang.Object, java.lang.Object)",
            "public void accept(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.springframework.http.codec.xml.XmlEventDecoder",
            "org.springframework.http.codec.xml.XmlEventDecoder()",
            "public org.springframework.http.codec.xml.XmlEventDecoder()"
        ],
        [
            "void",
            "org.springframework.http.codec.xml.XmlEventDecoder.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.xml.XmlEventDecoder.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "reactor.core.publisher.Flux<javax.xml.stream.events.XMLEvent>",
            "org.springframework.http.codec.xml.XmlEventDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<javax.xml.stream.events.XMLEvent> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder()",
            "public org.springframework.http.codec.xml.Jaxb2XmlDecoder()"
        ],
        [
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder(org.springframework.util.MimeType...)",
            "public org.springframework.http.codec.xml.Jaxb2XmlDecoder(org.springframework.util.MimeType...)"
        ],
        [
            "void",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.setUnmarshallerProcessor(java.util.function.Function<javax.xml.bind.Unmarshaller, javax.xml.bind.Unmarshaller>)",
            "public void setUnmarshallerProcessor(java.util.function.Function<javax.xml.bind.Unmarshaller, javax.xml.bind.Unmarshaller>)"
        ],
        [
            "java.util.function.Function<javax.xml.bind.Unmarshaller, javax.xml.bind.Unmarshaller>",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.getUnmarshallerProcessor()",
            "public java.util.function.Function<javax.xml.bind.Unmarshaller, javax.xml.bind.Unmarshaller> getUnmarshallerProcessor()"
        ],
        [
            "void",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<java.lang.Object>",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<java.lang.Object> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Object> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.xml.Jaxb2XmlDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.http.codec.xml.Jaxb2XmlEncoder",
            "org.springframework.http.codec.xml.Jaxb2XmlEncoder()",
            "public org.springframework.http.codec.xml.Jaxb2XmlEncoder()"
        ],
        [
            "void",
            "org.springframework.http.codec.xml.Jaxb2XmlEncoder.setMarshallerProcessor(java.util.function.Function<javax.xml.bind.Marshaller, javax.xml.bind.Marshaller>)",
            "public void setMarshallerProcessor(java.util.function.Function<javax.xml.bind.Marshaller, javax.xml.bind.Marshaller>)"
        ],
        [
            "java.util.function.Function<javax.xml.bind.Marshaller, javax.xml.bind.Marshaller>",
            "org.springframework.http.codec.xml.Jaxb2XmlEncoder.getMarshallerProcessor()",
            "public java.util.function.Function<javax.xml.bind.Marshaller, javax.xml.bind.Marshaller> getMarshallerProcessor()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.xml.Jaxb2XmlEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.xml.Jaxb2XmlEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "javax.xml.bind.Marshaller",
            "org.springframework.http.codec.xml.JaxbContextContainer.createMarshaller(java.lang.Class<?>)",
            "public javax.xml.bind.Marshaller createMarshaller(java.lang.Class<?>) throws org.springframework.core.codec.CodecException, javax.xml.bind.JAXBException"
        ],
        [
            "javax.xml.bind.Unmarshaller",
            "org.springframework.http.codec.xml.JaxbContextContainer.createUnmarshaller(java.lang.Class<?>)",
            "public javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class<?>) throws org.springframework.core.codec.CodecException, javax.xml.bind.JAXBException"
        ],
        [
            "org.springframework.http.codec.FormHttpMessageReader",
            "org.springframework.http.codec.FormHttpMessageReader()",
            "public org.springframework.http.codec.FormHttpMessageReader()"
        ],
        [
            "void",
            "org.springframework.http.codec.FormHttpMessageReader.setDefaultCharset(java.nio.charset.Charset)",
            "public void setDefaultCharset(java.nio.charset.Charset)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.http.codec.FormHttpMessageReader.getDefaultCharset()",
            "public java.nio.charset.Charset getDefaultCharset()"
        ],
        [
            "void",
            "org.springframework.http.codec.FormHttpMessageReader.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.FormHttpMessageReader.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.FormHttpMessageReader.canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.http.codec.FormHttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.http.codec.FormHttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.FormHttpMessageReader.getReadableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.ServerSentEvent.id()",
            "public java.lang.String id()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.ServerSentEvent.event()",
            "public java.lang.String event()"
        ],
        [
            "java.time.Duration",
            "org.springframework.http.codec.ServerSentEvent.retry()",
            "public java.time.Duration retry()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.ServerSentEvent.comment()",
            "public java.lang.String comment()"
        ],
        [
            "T",
            "org.springframework.http.codec.ServerSentEvent.data()",
            "public T data()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.ServerSentEvent.toString()",
            "public java.lang.String toString()"
        ],
        [
            "<T> org.springframework.http.codec.ServerSentEvent$Builder<T>",
            "org.springframework.http.codec.ServerSentEvent.builder()",
            "public static <T> org.springframework.http.codec.ServerSentEvent$Builder<T> builder()"
        ],
        [
            "<T> org.springframework.http.codec.ServerSentEvent$Builder<T>",
            "org.springframework.http.codec.ServerSentEvent.builder(T)",
            "public static <T> org.springframework.http.codec.ServerSentEvent$Builder<T> builder(T)"
        ],
        [
            "org.springframework.http.codec.ServerSentEventHttpMessageReader",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader()",
            "public org.springframework.http.codec.ServerSentEventHttpMessageReader()"
        ],
        [
            "org.springframework.http.codec.ServerSentEventHttpMessageReader",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader(org.springframework.core.codec.Decoder<?>)",
            "public org.springframework.http.codec.ServerSentEventHttpMessageReader(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "org.springframework.core.codec.Decoder<?>",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader.getDecoder()",
            "public org.springframework.core.codec.Decoder<?> getDecoder()"
        ],
        [
            "void",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader.getReadableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader.canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Flux<java.lang.Object>",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<java.lang.Object> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Object> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.http.codec.ServerSentEventHttpMessageReader$LimitTracker.afterLineParsed(java.lang.String)",
            "public void afterLineParsed(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.http.codec.HttpMessageEncoder.getEncodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)",
            "public default java.util.Map<java.lang.String, java.lang.Object> getEncodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "org.springframework.http.codec.ClientCodecConfigurer$MultipartCodecs",
            "org.springframework.http.codec.support.ClientDefaultCodecsImpl.multipartCodecs()",
            "public org.springframework.http.codec.ClientCodecConfigurer$MultipartCodecs multipartCodecs()"
        ],
        [
            "void",
            "org.springframework.http.codec.support.ClientDefaultCodecsImpl.serverSentEventDecoder(org.springframework.core.codec.Decoder<?>)",
            "public void serverSentEventDecoder(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.ServerDefaultCodecsImpl.multipartReader(org.springframework.http.codec.HttpMessageReader<?>)",
            "public void multipartReader(org.springframework.http.codec.HttpMessageReader<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.ServerDefaultCodecsImpl.serverSentEventEncoder(org.springframework.core.codec.Encoder<?>)",
            "public void serverSentEventEncoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer$DefaultCodecs",
            "org.springframework.http.codec.support.BaseCodecConfigurer.defaultCodecs()",
            "public org.springframework.http.codec.CodecConfigurer$DefaultCodecs defaultCodecs()"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer.registerDefaults(boolean)",
            "public void registerDefaults(boolean)"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer$CustomCodecs",
            "org.springframework.http.codec.support.BaseCodecConfigurer.customCodecs()",
            "public org.springframework.http.codec.CodecConfigurer$CustomCodecs customCodecs()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageReader<?>>",
            "org.springframework.http.codec.support.BaseCodecConfigurer.getReaders()",
            "public java.util.List<org.springframework.http.codec.HttpMessageReader<?>> getReaders()"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.http.codec.support.BaseCodecConfigurer.getWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> getWriters()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.support.BaseCodecConfigurer.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.http.codec.ClientCodecConfigurer$MultipartCodecs",
            "org.springframework.http.codec.support.ClientDefaultCodecsImpl$DefaultMultipartCodecs.encoder(org.springframework.core.codec.Encoder<?>)",
            "public org.springframework.http.codec.ClientCodecConfigurer$MultipartCodecs encoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "org.springframework.http.codec.ClientCodecConfigurer$MultipartCodecs",
            "org.springframework.http.codec.support.ClientDefaultCodecsImpl$DefaultMultipartCodecs.writer(org.springframework.http.codec.HttpMessageWriter<?>)",
            "public org.springframework.http.codec.ClientCodecConfigurer$MultipartCodecs writer(org.springframework.http.codec.HttpMessageWriter<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.jackson2JsonDecoder(org.springframework.core.codec.Decoder<?>)",
            "public void jackson2JsonDecoder(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.jackson2JsonEncoder(org.springframework.core.codec.Encoder<?>)",
            "public void jackson2JsonEncoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.jackson2SmileDecoder(org.springframework.core.codec.Decoder<?>)",
            "public void jackson2SmileDecoder(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.jackson2SmileEncoder(org.springframework.core.codec.Encoder<?>)",
            "public void jackson2SmileEncoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.protobufDecoder(org.springframework.core.codec.Decoder<?>)",
            "public void protobufDecoder(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.protobufEncoder(org.springframework.core.codec.Encoder<?>)",
            "public void protobufEncoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.jaxb2Decoder(org.springframework.core.codec.Decoder<?>)",
            "public void jaxb2Decoder(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.jaxb2Encoder(org.springframework.core.codec.Encoder<?>)",
            "public void jaxb2Encoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.kotlinSerializationJsonDecoder(org.springframework.core.codec.Decoder<?>)",
            "public void kotlinSerializationJsonDecoder(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.kotlinSerializationJsonEncoder(org.springframework.core.codec.Encoder<?>)",
            "public void kotlinSerializationJsonEncoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.configureDefaultCodec(java.util.function.Consumer<java.lang.Object>)",
            "public void configureDefaultCodec(java.util.function.Consumer<java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.maxInMemorySize(int)",
            "public void maxInMemorySize(int)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.codec.support.BaseDefaultCodecs.maxInMemorySize()",
            "public java.lang.Integer maxInMemorySize()"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseDefaultCodecs.enableLoggingRequestDetails(boolean)",
            "public void enableLoggingRequestDetails(boolean)"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.http.codec.support.BaseDefaultCodecs.isEnableLoggingRequestDetails()",
            "public java.lang.Boolean isEnableLoggingRequestDetails()"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.register(java.lang.Object)",
            "public void register(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.registerWithDefaultConfig(java.lang.Object)",
            "public void registerWithDefaultConfig(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.registerWithDefaultConfig(java.lang.Object, java.util.function.Consumer<org.springframework.http.codec.CodecConfigurer$DefaultCodecConfig>)",
            "public void registerWithDefaultConfig(java.lang.Object, java.util.function.Consumer<org.springframework.http.codec.CodecConfigurer$DefaultCodecConfig>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.decoder(org.springframework.core.codec.Decoder<?>)",
            "public void decoder(org.springframework.core.codec.Decoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.encoder(org.springframework.core.codec.Encoder<?>)",
            "public void encoder(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.reader(org.springframework.http.codec.HttpMessageReader<?>)",
            "public void reader(org.springframework.http.codec.HttpMessageReader<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.writer(org.springframework.http.codec.HttpMessageWriter<?>)",
            "public void writer(org.springframework.http.codec.HttpMessageWriter<?>)"
        ],
        [
            "void",
            "org.springframework.http.codec.support.BaseCodecConfigurer$DefaultCustomCodecs.withDefaultCodecConfig(java.util.function.Consumer<org.springframework.http.codec.CodecConfigurer$DefaultCodecConfig>)",
            "public void withDefaultCodecConfig(java.util.function.Consumer<org.springframework.http.codec.CodecConfigurer$DefaultCodecConfig>)"
        ],
        [
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer()",
            "public org.springframework.http.codec.support.DefaultClientCodecConfigurer()"
        ],
        [
            "org.springframework.http.codec.ClientCodecConfigurer$ClientDefaultCodecs",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.defaultCodecs()",
            "public org.springframework.http.codec.ClientCodecConfigurer$ClientDefaultCodecs defaultCodecs()"
        ],
        [
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.clone()",
            "public org.springframework.http.codec.support.DefaultClientCodecConfigurer clone()"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.clone()",
            "public org.springframework.http.codec.CodecConfigurer clone()"
        ],
        [
            "java.util.List",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.getWriters()",
            "public java.util.List getWriters()"
        ],
        [
            "java.util.List",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.getReaders()",
            "public java.util.List getReaders()"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer$CustomCodecs",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.customCodecs()",
            "public org.springframework.http.codec.CodecConfigurer$CustomCodecs customCodecs()"
        ],
        [
            "void",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.registerDefaults(boolean)",
            "public void registerDefaults(boolean)"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer$DefaultCodecs",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.defaultCodecs()",
            "public org.springframework.http.codec.CodecConfigurer$DefaultCodecs defaultCodecs()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.http.codec.ClientCodecConfigurer",
            "org.springframework.http.codec.support.DefaultClientCodecConfigurer.clone()",
            "public org.springframework.http.codec.ClientCodecConfigurer clone()"
        ],
        [
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer()",
            "public org.springframework.http.codec.support.DefaultServerCodecConfigurer()"
        ],
        [
            "org.springframework.http.codec.ServerCodecConfigurer$ServerDefaultCodecs",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.defaultCodecs()",
            "public org.springframework.http.codec.ServerCodecConfigurer$ServerDefaultCodecs defaultCodecs()"
        ],
        [
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.clone()",
            "public org.springframework.http.codec.support.DefaultServerCodecConfigurer clone()"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.clone()",
            "public org.springframework.http.codec.CodecConfigurer clone()"
        ],
        [
            "java.util.List",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.getWriters()",
            "public java.util.List getWriters()"
        ],
        [
            "java.util.List",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.getReaders()",
            "public java.util.List getReaders()"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer$CustomCodecs",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.customCodecs()",
            "public org.springframework.http.codec.CodecConfigurer$CustomCodecs customCodecs()"
        ],
        [
            "void",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.registerDefaults(boolean)",
            "public void registerDefaults(boolean)"
        ],
        [
            "org.springframework.http.codec.CodecConfigurer$DefaultCodecs",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.defaultCodecs()",
            "public org.springframework.http.codec.CodecConfigurer$DefaultCodecs defaultCodecs()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.clone()",
            "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"
        ],
        [
            "org.springframework.http.codec.ServerCodecConfigurer",
            "org.springframework.http.codec.support.DefaultServerCodecConfigurer.clone()",
            "public org.springframework.http.codec.ServerCodecConfigurer clone()"
        ],
        [
            "<T extends org.springframework.http.codec.CodecConfigurer> T",
            "org.springframework.http.codec.CodecConfigurerFactory.create(java.lang.Class<T>)",
            "public static <T extends org.springframework.http.codec.CodecConfigurer> T create(java.lang.Class<T>)"
        ],
        [
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter",
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter()",
            "public org.springframework.http.codec.ServerSentEventHttpMessageWriter()"
        ],
        [
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter",
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter(org.springframework.core.codec.Encoder<?>)",
            "public org.springframework.http.codec.ServerSentEventHttpMessageWriter(org.springframework.core.codec.Encoder<?>)"
        ],
        [
            "org.springframework.core.codec.Encoder<?>",
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter.getEncoder()",
            "public org.springframework.core.codec.Encoder<?> getEncoder()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter.getWritableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter.canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter.write(org.reactivestreams.Publisher<?>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<?>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.ServerSentEventHttpMessageWriter.write(org.reactivestreams.Publisher<?>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<?>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.ResourceHttpMessageWriter",
            "org.springframework.http.codec.ResourceHttpMessageWriter()",
            "public org.springframework.http.codec.ResourceHttpMessageWriter()"
        ],
        [
            "org.springframework.http.codec.ResourceHttpMessageWriter",
            "org.springframework.http.codec.ResourceHttpMessageWriter(int)",
            "public org.springframework.http.codec.ResourceHttpMessageWriter(int)"
        ],
        [
            "boolean",
            "org.springframework.http.codec.ResourceHttpMessageWriter.canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.ResourceHttpMessageWriter.getWritableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.ResourceHttpMessageWriter.write(org.reactivestreams.Publisher<? extends org.springframework.core.io.Resource>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.core.io.Resource>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.ResourceHttpMessageWriter.write(org.reactivestreams.Publisher<? extends org.springframework.core.io.Resource>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.core.io.Resource>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.FormHttpMessageWriter",
            "org.springframework.http.codec.FormHttpMessageWriter()",
            "public org.springframework.http.codec.FormHttpMessageWriter()"
        ],
        [
            "void",
            "org.springframework.http.codec.FormHttpMessageWriter.setDefaultCharset(java.nio.charset.Charset)",
            "public void setDefaultCharset(java.nio.charset.Charset)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.http.codec.FormHttpMessageWriter.getDefaultCharset()",
            "public java.nio.charset.Charset getDefaultCharset()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.FormHttpMessageWriter.getWritableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.FormHttpMessageWriter.canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.FormHttpMessageWriter.write(org.reactivestreams.Publisher<? extends org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.ClientCodecConfigurer",
            "org.springframework.http.codec.ClientCodecConfigurer.create()",
            "public static org.springframework.http.codec.ClientCodecConfigurer create()"
        ],
        [
            "default",
            "org.springframework.http.codec.ClientCodecConfigurer.org.springframework.http.codec.CodecConfigurer clone()",
            "public default org.springframework.http.codec.CodecConfigurer clone()"
        ],
        [
            "default",
            "org.springframework.http.codec.ClientCodecConfigurer.org.springframework.http.codec.CodecConfigurer$DefaultCodecs defaultCodecs()",
            "public default org.springframework.http.codec.CodecConfigurer$DefaultCodecs defaultCodecs()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.HttpMessageWriter.getWritableMediaTypes(org.springframework.core.ResolvableType)",
            "public default java.util.List<org.springframework.http.MediaType> getWritableMediaTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.HttpMessageWriter.write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)",
            "public default reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.json.Jackson2JsonDecoder",
            "org.springframework.http.codec.json.Jackson2JsonDecoder()",
            "public org.springframework.http.codec.json.Jackson2JsonDecoder()"
        ],
        [
            "org.springframework.http.codec.json.Jackson2JsonDecoder",
            "org.springframework.http.codec.json.Jackson2JsonDecoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)",
            "public org.springframework.http.codec.json.Jackson2JsonDecoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)"
        ],
        [
            "void",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.setStreamingMediaTypes(java.util.List<org.springframework.http.MediaType>)",
            "public void setStreamingMediaTypes(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "boolean",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.encode(org.reactivestreams.Publisher<?>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<?>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.getEncodableMimeTypes()",
            "public java.util.List<org.springframework.util.MimeType> getEncodableMimeTypes()"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.getEncodableMimeTypes(org.springframework.core.ResolvableType)",
            "public java.util.List<org.springframework.util.MimeType> getEncodableMimeTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.getStreamingMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getStreamingMediaTypes()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.http.codec.json.AbstractJackson2Encoder.getEncodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)",
            "public java.util.Map<java.lang.String, java.lang.Object> getEncodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "reactor.core.publisher.Flux<com.fasterxml.jackson.databind.util.TokenBuffer>",
            "org.springframework.http.codec.json.Jackson2Tokenizer.tokenize(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.databind.ObjectMapper, boolean, boolean, int)",
            "public static reactor.core.publisher.Flux<com.fasterxml.jackson.databind.util.TokenBuffer> tokenize(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.databind.ObjectMapper, boolean, boolean, int)"
        ],
        [
            "org.springframework.http.codec.json.Jackson2JsonEncoder",
            "org.springframework.http.codec.json.Jackson2JsonEncoder()",
            "public org.springframework.http.codec.json.Jackson2JsonEncoder()"
        ],
        [
            "org.springframework.http.codec.json.Jackson2JsonEncoder",
            "org.springframework.http.codec.json.Jackson2JsonEncoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)",
            "public org.springframework.http.codec.json.Jackson2JsonEncoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)"
        ],
        [
            "org.springframework.http.codec.json.Jackson2SmileEncoder",
            "org.springframework.http.codec.json.Jackson2SmileEncoder()",
            "public org.springframework.http.codec.json.Jackson2SmileEncoder()"
        ],
        [
            "org.springframework.http.codec.json.Jackson2SmileEncoder",
            "org.springframework.http.codec.json.Jackson2SmileEncoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)",
            "public org.springframework.http.codec.json.Jackson2SmileEncoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)"
        ],
        [
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder",
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder()",
            "public org.springframework.http.codec.json.KotlinSerializationJsonDecoder()"
        ],
        [
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder",
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder(kotlinx.serialization.json.Json)",
            "public org.springframework.http.codec.json.KotlinSerializationJsonDecoder(kotlinx.serialization.json.Json)"
        ],
        [
            "void",
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<java.lang.Object>",
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<java.lang.Object> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.http.codec.json.KotlinSerializationJsonDecoder.decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Object> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "void",
            "org.springframework.http.codec.json.Jackson2CodecSupport.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "com.fasterxml.jackson.databind.ObjectMapper",
            "org.springframework.http.codec.json.Jackson2CodecSupport.getObjectMapper()",
            "public com.fasterxml.jackson.databind.ObjectMapper getObjectMapper()"
        ],
        [
            "void",
            "org.springframework.http.codec.json.Jackson2CodecSupport.registerObjectMappersForType(java.lang.Class<?>, java.util.function.Consumer<java.util.Map<org.springframework.util.MimeType, com.fasterxml.jackson.databind.ObjectMapper>>)",
            "public void registerObjectMappersForType(java.lang.Class<?>, java.util.function.Consumer<java.util.Map<org.springframework.util.MimeType, com.fasterxml.jackson.databind.ObjectMapper>>)"
        ],
        [
            "java.util.Map<org.springframework.util.MimeType, com.fasterxml.jackson.databind.ObjectMapper>",
            "org.springframework.http.codec.json.Jackson2CodecSupport.getObjectMappersForType(java.lang.Class<?>)",
            "public java.util.Map<org.springframework.util.MimeType, com.fasterxml.jackson.databind.ObjectMapper> getObjectMappersForType(java.lang.Class<?>)"
        ],
        [
            "org.springframework.http.codec.json.Jackson2SmileDecoder",
            "org.springframework.http.codec.json.Jackson2SmileDecoder()",
            "public org.springframework.http.codec.json.Jackson2SmileDecoder()"
        ],
        [
            "org.springframework.http.codec.json.Jackson2SmileDecoder",
            "org.springframework.http.codec.json.Jackson2SmileDecoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)",
            "public org.springframework.http.codec.json.Jackson2SmileDecoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)"
        ],
        [
            "void",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<java.lang.Object>",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<java.lang.Object> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Object>",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Object> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.Object>",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.getDecodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)",
            "public java.util.Map<java.lang.String, java.lang.Object> getDecodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.getDecodableMimeTypes()",
            "public java.util.List<org.springframework.util.MimeType> getDecodableMimeTypes()"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.http.codec.json.AbstractJackson2Decoder.getDecodableMimeTypes(org.springframework.core.ResolvableType)",
            "public java.util.List<org.springframework.util.MimeType> getDecodableMimeTypes(org.springframework.core.ResolvableType)"
        ],
        [
            "org.springframework.http.codec.json.KotlinSerializationJsonEncoder",
            "org.springframework.http.codec.json.KotlinSerializationJsonEncoder()",
            "public org.springframework.http.codec.json.KotlinSerializationJsonEncoder()"
        ],
        [
            "org.springframework.http.codec.json.KotlinSerializationJsonEncoder",
            "org.springframework.http.codec.json.KotlinSerializationJsonEncoder(kotlinx.serialization.json.Json)",
            "public org.springframework.http.codec.json.KotlinSerializationJsonEncoder(kotlinx.serialization.json.Json)"
        ],
        [
            "boolean",
            "org.springframework.http.codec.json.KotlinSerializationJsonEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.json.KotlinSerializationJsonEncoder.encode(org.reactivestreams.Publisher<?>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<?>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.json.KotlinSerializationJsonEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.ServerCodecConfigurer",
            "org.springframework.http.codec.ServerCodecConfigurer.create()",
            "public static org.springframework.http.codec.ServerCodecConfigurer create()"
        ],
        [
            "default",
            "org.springframework.http.codec.ServerCodecConfigurer.org.springframework.http.codec.CodecConfigurer clone()",
            "public default org.springframework.http.codec.CodecConfigurer clone()"
        ],
        [
            "default",
            "org.springframework.http.codec.ServerCodecConfigurer.org.springframework.http.codec.CodecConfigurer$DefaultCodecs defaultCodecs()",
            "public default org.springframework.http.codec.CodecConfigurer$DefaultCodecs defaultCodecs()"
        ],
        [
            "org.springframework.http.codec.LoggingCodecSupport",
            "org.springframework.http.codec.LoggingCodecSupport()",
            "public org.springframework.http.codec.LoggingCodecSupport()"
        ],
        [
            "void",
            "org.springframework.http.codec.LoggingCodecSupport.setEnableLoggingRequestDetails(boolean)",
            "public void setEnableLoggingRequestDetails(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.codec.LoggingCodecSupport.isEnableLoggingRequestDetails()",
            "public boolean isEnableLoggingRequestDetails()"
        ],
        [
            "org.springframework.http.codec.cbor.Jackson2CborEncoder",
            "org.springframework.http.codec.cbor.Jackson2CborEncoder()",
            "public org.springframework.http.codec.cbor.Jackson2CborEncoder()"
        ],
        [
            "org.springframework.http.codec.cbor.Jackson2CborEncoder",
            "org.springframework.http.codec.cbor.Jackson2CborEncoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)",
            "public org.springframework.http.codec.cbor.Jackson2CborEncoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.cbor.Jackson2CborEncoder.encode(org.reactivestreams.Publisher<?>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<?>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.cbor.Jackson2CborDecoder",
            "org.springframework.http.codec.cbor.Jackson2CborDecoder()",
            "public org.springframework.http.codec.cbor.Jackson2CborDecoder()"
        ],
        [
            "org.springframework.http.codec.cbor.Jackson2CborDecoder",
            "org.springframework.http.codec.cbor.Jackson2CborDecoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)",
            "public org.springframework.http.codec.cbor.Jackson2CborDecoder(com.fasterxml.jackson.databind.ObjectMapper, org.springframework.util.MimeType...)"
        ],
        [
            "reactor.core.publisher.Flux<java.lang.Object>",
            "org.springframework.http.codec.cbor.Jackson2CborDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<java.lang.Object> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.multipart.FileStorage$PathFileStorage",
            "org.springframework.http.codec.multipart.FileStorage$PathFileStorage(java.nio.file.Path)",
            "public org.springframework.http.codec.multipart.FileStorage$PathFileStorage(java.nio.file.Path)"
        ],
        [
            "reactor.core.publisher.Mono<java.nio.file.Path>",
            "org.springframework.http.codec.multipart.FileStorage$PathFileStorage.directory()",
            "public reactor.core.publisher.Mono<java.nio.file.Path> directory()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFilePart.filename()",
            "public java.lang.String filename()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFilePart.transferTo(java.nio.file.Path)",
            "public reactor.core.publisher.Mono<java.lang.Void> transferTo(java.nio.file.Path)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFilePart.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.PartGenerator$InMemoryState",
            "org.springframework.http.codec.multipart.PartGenerator$InMemoryState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.HttpHeaders)",
            "public org.springframework.http.codec.multipart.PartGenerator$InMemoryState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.HttpHeaders)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$InMemoryState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$InMemoryState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$InMemoryState.dispose()",
            "public void dispose()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$InMemoryState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader()",
            "public org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.setMaxDiskUsagePerPart(long)",
            "public void setMaxDiskUsagePerPart(long)"
        ],
        [
            "long",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.getMaxDiskUsagePerPart()",
            "public long getMaxDiskUsagePerPart()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.setMaxParts(int)",
            "public void setMaxParts(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.getMaxParts()",
            "public int getMaxParts()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.setFileStorageDirectory(java.nio.file.Path)",
            "public void setFileStorageDirectory(java.nio.file.Path) throws java.io.IOException"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.getReadableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part>",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.codec.multipart.Part>",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<org.springframework.http.codec.multipart.Part> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.multipart.DefaultParts$FileContent",
            "org.springframework.http.codec.multipart.DefaultParts$FileContent(java.nio.file.Path, reactor.core.scheduler.Scheduler)",
            "public org.springframework.http.codec.multipart.DefaultParts$FileContent(java.nio.file.Path, reactor.core.scheduler.Scheduler)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.multipart.DefaultParts$FileContent.content()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> content()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.DefaultParts$FileContent.transferTo(java.nio.file.Path)",
            "public reactor.core.publisher.Mono<java.lang.Void> transferTo(java.nio.file.Path)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.DefaultParts$FileContent.delete()",
            "public reactor.core.publisher.Mono<java.lang.Void> delete()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$DisposedState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$DisposedState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$DisposedState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.FilePart.transferTo(java.io.File)",
            "public default reactor.core.publisher.Mono<java.lang.Void> transferTo(java.io.File)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPart.content()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> content()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPart.delete()",
            "public reactor.core.publisher.Mono<java.lang.Void> delete()"
        ],
        [
            "org.springframework.http.codec.multipart.FormFieldPart",
            "org.springframework.http.codec.multipart.DefaultParts.formFieldPart(org.springframework.http.HttpHeaders, java.lang.String)",
            "public static org.springframework.http.codec.multipart.FormFieldPart formFieldPart(org.springframework.http.HttpHeaders, java.lang.String)"
        ],
        [
            "org.springframework.http.codec.multipart.Part",
            "org.springframework.http.codec.multipart.DefaultParts.part(org.springframework.http.HttpHeaders, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)",
            "public static org.springframework.http.codec.multipart.Part part(org.springframework.http.HttpHeaders, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "org.springframework.http.codec.multipart.Part",
            "org.springframework.http.codec.multipart.DefaultParts.part(org.springframework.http.HttpHeaders, java.nio.file.Path, reactor.core.scheduler.Scheduler)",
            "public static org.springframework.http.codec.multipart.Part part(org.springframework.http.HttpHeaders, java.nio.file.Path, reactor.core.scheduler.Scheduler)"
        ],
        [
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader()",
            "public org.springframework.http.codec.multipart.DefaultPartHttpMessageReader()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setMaxHeadersSize(int)",
            "public void setMaxHeadersSize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.getMaxInMemorySize()",
            "public int getMaxInMemorySize()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setMaxInMemorySize(int)",
            "public void setMaxInMemorySize(int)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setMaxDiskUsagePerPart(long)",
            "public void setMaxDiskUsagePerPart(long)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setMaxParts(int)",
            "public void setMaxParts(int)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setFileStorageDirectory(java.nio.file.Path)",
            "public void setFileStorageDirectory(java.nio.file.Path) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setBlockingOperationScheduler(reactor.core.scheduler.Scheduler)",
            "public void setBlockingOperationScheduler(reactor.core.scheduler.Scheduler)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setStreaming(boolean)",
            "public void setStreaming(boolean)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.setHeadersCharset(java.nio.charset.Charset)",
            "public void setHeadersCharset(java.nio.charset.Charset)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.getReadableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.http.codec.multipart.Part>",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<org.springframework.http.codec.multipart.Part> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part>",
            "org.springframework.http.codec.multipart.DefaultPartHttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartParser$Token",
            "org.springframework.http.codec.multipart.MultipartParser$Token()",
            "public org.springframework.http.codec.multipart.MultipartParser$Token()"
        ],
        [
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFilePart",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFilePart(org.springframework.http.HttpHeaders, org.springframework.http.codec.multipart.DefaultParts$Content)",
            "public org.springframework.http.codec.multipart.DefaultParts$DefaultFilePart(org.springframework.http.HttpHeaders, org.springframework.http.codec.multipart.DefaultParts$Content)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFilePart.filename()",
            "public java.lang.String filename()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFilePart.transferTo(java.nio.file.Path)",
            "public reactor.core.publisher.Mono<java.lang.Void> transferTo(java.nio.file.Path)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFilePart.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$DisposedState.onNext(org.springframework.core.io.buffer.DataBuffer)",
            "public void onNext(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$DisposedState.onComplete()",
            "public void onComplete()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.MultipartParser$DisposedState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.PartHttpMessageWriter",
            "org.springframework.http.codec.multipart.PartHttpMessageWriter()",
            "public org.springframework.http.codec.multipart.PartHttpMessageWriter()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.PartHttpMessageWriter.write(org.reactivestreams.Publisher<? extends org.springframework.http.codec.multipart.Part>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.http.codec.multipart.Part>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.multipart.FileStorage",
            "org.springframework.http.codec.multipart.FileStorage.fromPath(java.nio.file.Path)",
            "public static org.springframework.http.codec.multipart.FileStorage fromPath(java.nio.file.Path) throws java.io.IOException"
        ],
        [
            "org.springframework.http.codec.multipart.FileStorage",
            "org.springframework.http.codec.multipart.FileStorage.tempDirectory(java.util.function.Supplier<reactor.core.scheduler.Scheduler>)",
            "public static org.springframework.http.codec.multipart.FileStorage tempDirectory(java.util.function.Supplier<reactor.core.scheduler.Scheduler>)"
        ],
        [
            "int",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$LimitedPartBodyStreamStorageFactory.getCurrentPartIndex()",
            "public int getCurrentPartIndex()"
        ],
        [
            "org.synchronoss.cloud.nio.stream.storage.StreamStorage",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$LimitedPartBodyStreamStorageFactory.newStreamStorageForPartBody(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, int)",
            "public org.synchronoss.cloud.nio.stream.storage.StreamStorage newStreamStorageForPartBody(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, int)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$LimitedPartBodyStreamStorageFactory.increaseByteCount(long)",
            "public void increaseByteCount(long)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$LimitedPartBodyStreamStorageFactory.partFinished()",
            "public void partFinished()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartParser$PreambleState",
            "org.springframework.http.codec.multipart.MultipartParser$PreambleState(org.springframework.http.codec.multipart.MultipartParser)",
            "public org.springframework.http.codec.multipart.MultipartParser$PreambleState(org.springframework.http.codec.multipart.MultipartParser)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$PreambleState.onNext(org.springframework.core.io.buffer.DataBuffer)",
            "public void onNext(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$PreambleState.onComplete()",
            "public void onComplete()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.MultipartParser$PreambleState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartHttpMessageReader",
            "org.springframework.http.codec.multipart.MultipartHttpMessageReader(org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part>)",
            "public org.springframework.http.codec.multipart.MultipartHttpMessageReader(org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part>)"
        ],
        [
            "org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageReader.getPartReader()",
            "public org.springframework.http.codec.HttpMessageReader<org.springframework.http.codec.multipart.Part> getPartReader()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageReader.getReadableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.multipart.MultipartHttpMessageReader.canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageReader.read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageReader.readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.codec.multipart.Part>> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.multipart.PartGenerator$FormFieldState",
            "org.springframework.http.codec.multipart.PartGenerator$FormFieldState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.HttpHeaders)",
            "public org.springframework.http.codec.multipart.PartGenerator$FormFieldState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.HttpHeaders)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$FormFieldState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$FormFieldState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$FormFieldState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.DefaultParts$FluxContent",
            "org.springframework.http.codec.multipart.DefaultParts$FluxContent(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.http.codec.multipart.DefaultParts$FluxContent(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.multipart.DefaultParts$FluxContent.content()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> content()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.DefaultParts$FluxContent.transferTo(java.nio.file.Path)",
            "public reactor.core.publisher.Mono<java.lang.Void> transferTo(java.nio.file.Path)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.DefaultParts$FluxContent.delete()",
            "public reactor.core.publisher.Mono<java.lang.Void> delete()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$AbstractSynchronossPart.name()",
            "public java.lang.String name()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$AbstractSynchronossPart.headers()",
            "public org.springframework.http.HttpHeaders headers()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$AbstractSynchronossPart.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFormFieldPart.value()",
            "public java.lang.String value()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFormFieldPart.content()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> content()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossFormFieldPart.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartParser$HeadersToken",
            "org.springframework.http.codec.multipart.MultipartParser$HeadersToken(org.springframework.http.HttpHeaders)",
            "public org.springframework.http.codec.multipart.MultipartParser$HeadersToken(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.codec.multipart.MultipartParser$HeadersToken.headers()",
            "public org.springframework.http.HttpHeaders headers()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.multipart.MultipartParser$HeadersToken.buffer()",
            "public org.springframework.core.io.buffer.DataBuffer buffer()"
        ],
        [
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator(org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader, org.springframework.http.ReactiveHttpInputMessage, java.nio.file.Path)",
            "public org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator(org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader, org.springframework.http.ReactiveHttpInputMessage, java.nio.file.Path)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator.accept(reactor.core.publisher.FluxSink<org.springframework.http.codec.multipart.Part>)",
            "public void accept(reactor.core.publisher.FluxSink<org.springframework.http.codec.multipart.Part>)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$SynchronossPartGenerator.accept(java.lang.Object)",
            "public void accept(java.lang.Object)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.http.codec.multipart.MultipartParser$Token>",
            "org.springframework.http.codec.multipart.MultipartParser.parse(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, byte[], int, java.nio.charset.Charset)",
            "public static reactor.core.publisher.Flux<org.springframework.http.codec.multipart.MultipartParser$Token> parse(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, byte[], int, java.nio.charset.Charset)"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.http.codec.multipart.MultipartParser.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "org.springframework.http.codec.multipart.PartGenerator$StreamingState",
            "org.springframework.http.codec.multipart.PartGenerator$StreamingState(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>)",
            "public org.springframework.http.codec.multipart.PartGenerator$StreamingState(reactor.core.publisher.FluxSink<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$StreamingState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$StreamingState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$StreamingState.error(java.lang.Throwable)",
            "public void error(java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$StreamingState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.DefaultParts$AbstractPart.name()",
            "public java.lang.String name()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.codec.multipart.DefaultParts$AbstractPart.headers()",
            "public org.springframework.http.HttpHeaders headers()"
        ],
        [
            "org.springframework.http.codec.multipart.DefaultParts$DefaultPart",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultPart(org.springframework.http.HttpHeaders, org.springframework.http.codec.multipart.DefaultParts$Content)",
            "public org.springframework.http.codec.multipart.DefaultParts$DefaultPart(org.springframework.http.HttpHeaders, org.springframework.http.codec.multipart.DefaultParts$Content)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultPart.content()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> content()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultPart.delete()",
            "public reactor.core.publisher.Mono<java.lang.Void> delete()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultPart.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState",
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.codec.multipart.PartGenerator$CreateFileState, java.nio.file.Path, java.nio.channels.WritableByteChannel)",
            "public org.springframework.http.codec.multipart.PartGenerator$WritingFileState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.codec.multipart.PartGenerator$CreateFileState, java.nio.file.Path, java.nio.channels.WritableByteChannel)"
        ],
        [
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState",
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.codec.multipart.PartGenerator$IdleFileState)",
            "public org.springframework.http.codec.multipart.PartGenerator$WritingFileState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.codec.multipart.PartGenerator$IdleFileState)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState.writeBuffer(org.springframework.core.io.buffer.DataBuffer)",
            "public void writeBuffer(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState.writeBuffers(java.lang.Iterable<org.springframework.core.io.buffer.DataBuffer>)",
            "public void writeBuffers(java.lang.Iterable<org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$WritingFileState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$FluxSinkAdapterListener.onPartFinished(org.synchronoss.cloud.nio.stream.storage.StreamStorage, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public void onPartFinished(org.synchronoss.cloud.nio.stream.storage.StreamStorage, java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$FluxSinkAdapterListener.onError(java.lang.String, java.lang.Throwable)",
            "public void onError(java.lang.String, java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$FluxSinkAdapterListener.onAllPartsFinished()",
            "public void onAllPartsFinished()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$FluxSinkAdapterListener.onNestedPartStarted(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)",
            "public void onNestedPartStarted(java.util.Map<java.lang.String, java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader$FluxSinkAdapterListener.onNestedPartFinished()",
            "public void onNestedPartFinished()"
        ],
        [
            "default",
            "org.springframework.http.codec.multipart.MultipartParser$State.void dispose()",
            "public default void dispose()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part>",
            "org.springframework.http.codec.multipart.PartGenerator.createParts(reactor.core.publisher.Flux<org.springframework.http.codec.multipart.MultipartParser$Token>, int, int, long, boolean, reactor.core.publisher.Mono<java.nio.file.Path>, reactor.core.scheduler.Scheduler)",
            "public static reactor.core.publisher.Flux<org.springframework.http.codec.multipart.Part> createParts(reactor.core.publisher.Flux<org.springframework.http.codec.multipart.MultipartParser$Token>, int, int, long, boolean, reactor.core.publisher.Mono<java.nio.file.Path>, reactor.core.scheduler.Scheduler)"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.http.codec.multipart.PartGenerator.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartParser$BodyState",
            "org.springframework.http.codec.multipart.MultipartParser$BodyState(org.springframework.http.codec.multipart.MultipartParser)",
            "public org.springframework.http.codec.multipart.MultipartParser$BodyState(org.springframework.http.codec.multipart.MultipartParser)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$BodyState.onNext(org.springframework.core.io.buffer.DataBuffer)",
            "public void onNext(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$BodyState.onComplete()",
            "public void onComplete()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$BodyState.dispose()",
            "public void dispose()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.MultipartParser$BodyState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.http.codec.multipart.MultipartWriterSupport.getCharset()",
            "public java.nio.charset.Charset getCharset()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartWriterSupport.setCharset(java.nio.charset.Charset)",
            "public void setCharset(java.nio.charset.Charset)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.multipart.MultipartWriterSupport.getWritableMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.multipart.MultipartWriterSupport.canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)",
            "public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFormFieldPart",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFormFieldPart(org.springframework.http.HttpHeaders, java.lang.String)",
            "public org.springframework.http.codec.multipart.DefaultParts$DefaultFormFieldPart(org.springframework.http.HttpHeaders, java.lang.String)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFormFieldPart.content()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> content()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFormFieldPart.value()",
            "public java.lang.String value()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.DefaultParts$DefaultFormFieldPart.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$InitialState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$InitialState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$InitialState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$HeadersState.onNext(org.springframework.core.io.buffer.DataBuffer)",
            "public void onNext(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$HeadersState.onComplete()",
            "public void onComplete()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartParser$HeadersState.dispose()",
            "public void dispose()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.MultipartParser$HeadersState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.PartGenerator$IdleFileState",
            "org.springframework.http.codec.multipart.PartGenerator$IdleFileState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.codec.multipart.PartGenerator$WritingFileState)",
            "public org.springframework.http.codec.multipart.PartGenerator$IdleFileState(org.springframework.http.codec.multipart.PartGenerator, org.springframework.http.codec.multipart.PartGenerator$WritingFileState)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$IdleFileState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$IdleFileState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$IdleFileState.dispose()",
            "public void dispose()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$IdleFileState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartParser$BodyToken",
            "org.springframework.http.codec.multipart.MultipartParser$BodyToken(org.springframework.core.io.buffer.DataBuffer)",
            "public org.springframework.http.codec.multipart.MultipartParser$BodyToken(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.codec.multipart.MultipartParser$BodyToken.headers()",
            "public org.springframework.http.HttpHeaders headers()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.multipart.MultipartParser$BodyToken.buffer()",
            "public org.springframework.core.io.buffer.DataBuffer buffer()"
        ],
        [
            "org.springframework.http.codec.multipart.FileStorage$TempFileStorage",
            "org.springframework.http.codec.multipart.FileStorage$TempFileStorage(java.util.function.Supplier<reactor.core.scheduler.Scheduler>)",
            "public org.springframework.http.codec.multipart.FileStorage$TempFileStorage(java.util.function.Supplier<reactor.core.scheduler.Scheduler>)"
        ],
        [
            "reactor.core.publisher.Mono<java.nio.file.Path>",
            "org.springframework.http.codec.multipart.FileStorage$TempFileStorage.directory()",
            "public reactor.core.publisher.Mono<java.nio.file.Path> directory()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage(org.springframework.http.codec.multipart.MultipartHttpMessageWriter, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage(org.springframework.http.codec.multipart.MultipartHttpMessageWriter, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)",
            "public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "boolean",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.isCommitted()",
            "public boolean isCommitted()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter$MultipartHttpOutputMessage.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.http.codec.multipart.MultipartUtils.charset(org.springframework.http.HttpHeaders)",
            "public static java.nio.charset.Charset charset(org.springframework.http.HttpHeaders)"
        ],
        [
            "byte[]",
            "org.springframework.http.codec.multipart.MultipartUtils.concat(byte[]...)",
            "public static byte[] concat(byte[]...)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.multipart.MultipartUtils.sliceTo(org.springframework.core.io.buffer.DataBuffer, int)",
            "public static org.springframework.core.io.buffer.DataBuffer sliceTo(org.springframework.core.io.buffer.DataBuffer, int)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.multipart.MultipartUtils.sliceFrom(org.springframework.core.io.buffer.DataBuffer, int)",
            "public static org.springframework.core.io.buffer.DataBuffer sliceFrom(org.springframework.core.io.buffer.DataBuffer, int)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.MultipartUtils.closeChannel(java.nio.channels.Channel)",
            "public static void closeChannel(java.nio.channels.Channel)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.Part.delete()",
            "public default reactor.core.publisher.Mono<java.lang.Void> delete()"
        ],
        [
            "default",
            "org.springframework.http.codec.multipart.PartGenerator$State.void error(java.lang.Throwable)",
            "public default void error(java.lang.Throwable)"
        ],
        [
            "default",
            "org.springframework.http.codec.multipart.PartGenerator$State.void dispose()",
            "public default void dispose()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter()",
            "public org.springframework.http.codec.multipart.MultipartHttpMessageWriter()"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>)",
            "public org.springframework.http.codec.multipart.MultipartHttpMessageWriter(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>)"
        ],
        [
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)",
            "public org.springframework.http.codec.multipart.MultipartHttpMessageWriter(java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>, org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>)"
        ],
        [
            "java.util.List<org.springframework.http.codec.HttpMessageWriter<?>>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter.getPartWriters()",
            "public java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> getPartWriters()"
        ],
        [
            "org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter.getFormWriter()",
            "public org.springframework.http.codec.HttpMessageWriter<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> getFormWriter()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.multipart.MultipartHttpMessageWriter.write(org.reactivestreams.Publisher<? extends org.springframework.util.MultiValueMap<java.lang.String, ?>>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends org.springframework.util.MultiValueMap<java.lang.String, ?>>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.http.codec.multipart.PartGenerator$CreateFileState",
            "org.springframework.http.codec.multipart.PartGenerator$CreateFileState(org.springframework.http.HttpHeaders, java.util.Collection<org.springframework.core.io.buffer.DataBuffer>, long)",
            "public org.springframework.http.codec.multipart.PartGenerator$CreateFileState(org.springframework.http.HttpHeaders, java.util.Collection<org.springframework.core.io.buffer.DataBuffer>, long)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$CreateFileState.body(org.springframework.core.io.buffer.DataBuffer)",
            "public void body(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$CreateFileState.partComplete(boolean)",
            "public void partComplete(boolean)"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$CreateFileState.createFile()",
            "public void createFile()"
        ],
        [
            "void",
            "org.springframework.http.codec.multipart.PartGenerator$CreateFileState.dispose()",
            "public void dispose()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.codec.multipart.PartGenerator$CreateFileState.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.codec.protobuf.ProtobufDecoder",
            "org.springframework.http.codec.protobuf.ProtobufDecoder()",
            "public org.springframework.http.codec.protobuf.ProtobufDecoder()"
        ],
        [
            "org.springframework.http.codec.protobuf.ProtobufDecoder",
            "org.springframework.http.codec.protobuf.ProtobufDecoder(com.google.protobuf.ExtensionRegistry)",
            "public org.springframework.http.codec.protobuf.ProtobufDecoder(com.google.protobuf.ExtensionRegistry)"
        ],
        [
            "void",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.setMaxMessageSize(int)",
            "public void setMaxMessageSize(int)"
        ],
        [
            "int",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.getMaxMessageSize()",
            "public int getMaxMessageSize()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canDecode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<com.google.protobuf.Message>",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<com.google.protobuf.Message> decode(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<com.google.protobuf.Message>",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<com.google.protobuf.Message> decodeToMono(org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "com.google.protobuf.Message",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public com.google.protobuf.Message decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.getDecodableMimeTypes()",
            "public java.util.List<org.springframework.util.MimeType> getDecodableMimeTypes()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.protobuf.ProtobufDecoder.decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public java.lang.Object decode(org.springframework.core.io.buffer.DataBuffer, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map) throws org.springframework.core.codec.DecodingException"
        ],
        [
            "org.springframework.http.codec.protobuf.ProtobufCodecSupport",
            "org.springframework.http.codec.protobuf.ProtobufCodecSupport()",
            "public org.springframework.http.codec.protobuf.ProtobufCodecSupport()"
        ],
        [
            "org.springframework.http.codec.protobuf.ProtobufEncoder",
            "org.springframework.http.codec.protobuf.ProtobufEncoder()",
            "public org.springframework.http.codec.protobuf.ProtobufEncoder()"
        ],
        [
            "boolean",
            "org.springframework.http.codec.protobuf.ProtobufEncoder.canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)",
            "public boolean canEncode(org.springframework.core.ResolvableType, org.springframework.util.MimeType)"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.codec.protobuf.ProtobufEncoder.encode(org.reactivestreams.Publisher<? extends com.google.protobuf.Message>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encode(org.reactivestreams.Publisher<? extends com.google.protobuf.Message>, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.protobuf.ProtobufEncoder.encodeValue(com.google.protobuf.Message, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(com.google.protobuf.Message, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.codec.protobuf.ProtobufEncoder.getStreamingMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getStreamingMediaTypes()"
        ],
        [
            "java.util.List<org.springframework.util.MimeType>",
            "org.springframework.http.codec.protobuf.ProtobufEncoder.getEncodableMimeTypes()",
            "public java.util.List<org.springframework.util.MimeType> getEncodableMimeTypes()"
        ],
        [
            "org.springframework.core.io.buffer.DataBuffer",
            "org.springframework.http.codec.protobuf.ProtobufEncoder.encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)",
            "public org.springframework.core.io.buffer.DataBuffer encodeValue(java.lang.Object, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, org.springframework.util.MimeType, java.util.Map)"
        ],
        [
            "org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction",
            "org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction(org.springframework.http.codec.protobuf.ProtobufDecoder, org.springframework.core.ResolvableType, int)",
            "public org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction(org.springframework.http.codec.protobuf.ProtobufDecoder, org.springframework.core.ResolvableType, int)"
        ],
        [
            "java.lang.Iterable<? extends com.google.protobuf.Message>",
            "org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction.apply(org.springframework.core.io.buffer.DataBuffer)",
            "public java.lang.Iterable<? extends com.google.protobuf.Message> apply(org.springframework.core.io.buffer.DataBuffer)"
        ],
        [
            "void",
            "org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction.discard()",
            "public void discard()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction.apply(java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object)"
        ],
        [
            "org.springframework.http.codec.protobuf.ProtobufHttpMessageWriter",
            "org.springframework.http.codec.protobuf.ProtobufHttpMessageWriter()",
            "public org.springframework.http.codec.protobuf.ProtobufHttpMessageWriter()"
        ],
        [
            "org.springframework.http.codec.protobuf.ProtobufHttpMessageWriter",
            "org.springframework.http.codec.protobuf.ProtobufHttpMessageWriter(org.springframework.core.codec.Encoder<com.google.protobuf.Message>)",
            "public org.springframework.http.codec.protobuf.ProtobufHttpMessageWriter(org.springframework.core.codec.Encoder<com.google.protobuf.Message>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.codec.protobuf.ProtobufHttpMessageWriter.write(org.reactivestreams.Publisher<? extends com.google.protobuf.Message>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)",
            "public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends com.google.protobuf.Message>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.ZeroCopyHttpOutputMessage.writeWith(java.io.File, long, long)",
            "public default reactor.core.publisher.Mono<java.lang.Void> writeWith(java.io.File, long, long)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.http.RequestEntity$BodyBuilder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.http.RequestEntity$BodyBuilder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.http.RequestEntity$BodyBuilder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.accept(org.springframework.http.MediaType...)",
            "public org.springframework.http.RequestEntity$BodyBuilder accept(org.springframework.http.MediaType...)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.acceptCharset(java.nio.charset.Charset...)",
            "public org.springframework.http.RequestEntity$BodyBuilder acceptCharset(java.nio.charset.Charset...)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.contentLength(long)",
            "public org.springframework.http.RequestEntity$BodyBuilder contentLength(long)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.contentType(org.springframework.http.MediaType)",
            "public org.springframework.http.RequestEntity$BodyBuilder contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifModifiedSince(java.time.ZonedDateTime)",
            "public org.springframework.http.RequestEntity$BodyBuilder ifModifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifModifiedSince(java.time.Instant)",
            "public org.springframework.http.RequestEntity$BodyBuilder ifModifiedSince(java.time.Instant)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifModifiedSince(long)",
            "public org.springframework.http.RequestEntity$BodyBuilder ifModifiedSince(long)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifNoneMatch(java.lang.String...)",
            "public org.springframework.http.RequestEntity$BodyBuilder ifNoneMatch(java.lang.String...)"
        ],
        [
            "org.springframework.http.RequestEntity<java.lang.Void>",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.build()",
            "public org.springframework.http.RequestEntity<java.lang.Void> build()"
        ],
        [
            "<T> org.springframework.http.RequestEntity<T>",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.body(T)",
            "public <T> org.springframework.http.RequestEntity<T> body(T)"
        ],
        [
            "<T> org.springframework.http.RequestEntity<T>",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.body(T, java.lang.reflect.Type)",
            "public <T> org.springframework.http.RequestEntity<T> body(T, java.lang.reflect.Type)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifNoneMatch(java.lang.String[])",
            "public org.springframework.http.RequestEntity$HeadersBuilder ifNoneMatch(java.lang.String[])"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifModifiedSince(long)",
            "public org.springframework.http.RequestEntity$HeadersBuilder ifModifiedSince(long)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifModifiedSince(java.time.Instant)",
            "public org.springframework.http.RequestEntity$HeadersBuilder ifModifiedSince(java.time.Instant)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.ifModifiedSince(java.time.ZonedDateTime)",
            "public org.springframework.http.RequestEntity$HeadersBuilder ifModifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.acceptCharset(java.nio.charset.Charset[])",
            "public org.springframework.http.RequestEntity$HeadersBuilder acceptCharset(java.nio.charset.Charset[])"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.accept(org.springframework.http.MediaType[])",
            "public org.springframework.http.RequestEntity$HeadersBuilder accept(org.springframework.http.MediaType[])"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.headers(java.util.function.Consumer)",
            "public org.springframework.http.RequestEntity$HeadersBuilder headers(java.util.function.Consumer)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.http.RequestEntity$HeadersBuilder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder",
            "org.springframework.http.RequestEntity$DefaultBodyBuilder.header(java.lang.String, java.lang.String[])",
            "public org.springframework.http.RequestEntity$HeadersBuilder header(java.lang.String, java.lang.String[])"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.empty()",
            "public static org.springframework.http.CacheControl empty()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.maxAge(long, java.util.concurrent.TimeUnit)",
            "public static org.springframework.http.CacheControl maxAge(long, java.util.concurrent.TimeUnit)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.maxAge(java.time.Duration)",
            "public static org.springframework.http.CacheControl maxAge(java.time.Duration)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.noCache()",
            "public static org.springframework.http.CacheControl noCache()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.noStore()",
            "public static org.springframework.http.CacheControl noStore()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.mustRevalidate()",
            "public org.springframework.http.CacheControl mustRevalidate()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.noTransform()",
            "public org.springframework.http.CacheControl noTransform()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.cachePublic()",
            "public org.springframework.http.CacheControl cachePublic()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.cachePrivate()",
            "public org.springframework.http.CacheControl cachePrivate()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.proxyRevalidate()",
            "public org.springframework.http.CacheControl proxyRevalidate()"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.sMaxAge(long, java.util.concurrent.TimeUnit)",
            "public org.springframework.http.CacheControl sMaxAge(long, java.util.concurrent.TimeUnit)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.sMaxAge(java.time.Duration)",
            "public org.springframework.http.CacheControl sMaxAge(java.time.Duration)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.staleWhileRevalidate(long, java.util.concurrent.TimeUnit)",
            "public org.springframework.http.CacheControl staleWhileRevalidate(long, java.util.concurrent.TimeUnit)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.staleWhileRevalidate(java.time.Duration)",
            "public org.springframework.http.CacheControl staleWhileRevalidate(java.time.Duration)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.staleIfError(long, java.util.concurrent.TimeUnit)",
            "public org.springframework.http.CacheControl staleIfError(long, java.util.concurrent.TimeUnit)"
        ],
        [
            "org.springframework.http.CacheControl",
            "org.springframework.http.CacheControl.staleIfError(java.time.Duration)",
            "public org.springframework.http.CacheControl staleIfError(java.time.Duration)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.CacheControl.getHeaderValue()",
            "public java.lang.String getHeaderValue()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.CacheControl.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.HttpRange",
            "org.springframework.http.HttpRange()",
            "public org.springframework.http.HttpRange()"
        ],
        [
            "org.springframework.core.io.support.ResourceRegion",
            "org.springframework.http.HttpRange.toResourceRegion(org.springframework.core.io.Resource)",
            "public org.springframework.core.io.support.ResourceRegion toResourceRegion(org.springframework.core.io.Resource)"
        ],
        [
            "org.springframework.http.HttpRange",
            "org.springframework.http.HttpRange.createByteRange(long)",
            "public static org.springframework.http.HttpRange createByteRange(long)"
        ],
        [
            "org.springframework.http.HttpRange",
            "org.springframework.http.HttpRange.createByteRange(long, long)",
            "public static org.springframework.http.HttpRange createByteRange(long, long)"
        ],
        [
            "org.springframework.http.HttpRange",
            "org.springframework.http.HttpRange.createSuffixRange(long)",
            "public static org.springframework.http.HttpRange createSuffixRange(long)"
        ],
        [
            "java.util.List<org.springframework.http.HttpRange>",
            "org.springframework.http.HttpRange.parseRanges(java.lang.String)",
            "public static java.util.List<org.springframework.http.HttpRange> parseRanges(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.core.io.support.ResourceRegion>",
            "org.springframework.http.HttpRange.toResourceRegions(java.util.List<org.springframework.http.HttpRange>, org.springframework.core.io.Resource)",
            "public static java.util.List<org.springframework.core.io.support.ResourceRegion> toResourceRegions(java.util.List<org.springframework.http.HttpRange>, org.springframework.core.io.Resource)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpRange.toString(java.util.Collection<org.springframework.http.HttpRange>)",
            "public static java.lang.String toString(java.util.Collection<org.springframework.http.HttpRange>)"
        ],
        [
            "org.springframework.http.ResponseEntity$DefaultBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder(java.lang.Object)",
            "public org.springframework.http.ResponseEntity$DefaultBuilder(java.lang.Object)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.http.ResponseEntity$BodyBuilder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.http.ResponseEntity$BodyBuilder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.http.ResponseEntity$BodyBuilder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.allow(org.springframework.http.HttpMethod...)",
            "public org.springframework.http.ResponseEntity$BodyBuilder allow(org.springframework.http.HttpMethod...)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.contentLength(long)",
            "public org.springframework.http.ResponseEntity$BodyBuilder contentLength(long)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.contentType(org.springframework.http.MediaType)",
            "public org.springframework.http.ResponseEntity$BodyBuilder contentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.eTag(java.lang.String)",
            "public org.springframework.http.ResponseEntity$BodyBuilder eTag(java.lang.String)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.lastModified(java.time.ZonedDateTime)",
            "public org.springframework.http.ResponseEntity$BodyBuilder lastModified(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.lastModified(java.time.Instant)",
            "public org.springframework.http.ResponseEntity$BodyBuilder lastModified(java.time.Instant)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.lastModified(long)",
            "public org.springframework.http.ResponseEntity$BodyBuilder lastModified(long)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.location(java.net.URI)",
            "public org.springframework.http.ResponseEntity$BodyBuilder location(java.net.URI)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.cacheControl(org.springframework.http.CacheControl)",
            "public org.springframework.http.ResponseEntity$BodyBuilder cacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.http.ResponseEntity$BodyBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.varyBy(java.lang.String...)",
            "public org.springframework.http.ResponseEntity$BodyBuilder varyBy(java.lang.String...)"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.http.ResponseEntity$DefaultBuilder.build()",
            "public <T> org.springframework.http.ResponseEntity<T> build()"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.http.ResponseEntity$DefaultBuilder.body(T)",
            "public <T> org.springframework.http.ResponseEntity<T> body(T)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.varyBy(java.lang.String[])",
            "public org.springframework.http.ResponseEntity$HeadersBuilder varyBy(java.lang.String[])"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.cacheControl(org.springframework.http.CacheControl)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder cacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.location(java.net.URI)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder location(java.net.URI)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.lastModified(long)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder lastModified(long)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.lastModified(java.time.Instant)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder lastModified(java.time.Instant)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.lastModified(java.time.ZonedDateTime)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder lastModified(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.eTag(java.lang.String)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder eTag(java.lang.String)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.allow(org.springframework.http.HttpMethod[])",
            "public org.springframework.http.ResponseEntity$HeadersBuilder allow(org.springframework.http.HttpMethod[])"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.headers(java.util.function.Consumer)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder headers(java.util.function.Consumer)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.headers(org.springframework.http.HttpHeaders)",
            "public org.springframework.http.ResponseEntity$HeadersBuilder headers(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.ResponseEntity$HeadersBuilder",
            "org.springframework.http.ResponseEntity$DefaultBuilder.header(java.lang.String, java.lang.String[])",
            "public org.springframework.http.ResponseEntity$HeadersBuilder header(java.lang.String, java.lang.String[])"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultPathContainer$DefaultPathSegment.value()",
            "public java.lang.String value()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultPathContainer$DefaultPathSegment.valueToMatch()",
            "public java.lang.String valueToMatch()"
        ],
        [
            "char[]",
            "org.springframework.http.server.DefaultPathContainer$DefaultPathSegment.valueToMatchAsChars()",
            "public char[] valueToMatchAsChars()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.http.server.DefaultPathContainer$DefaultPathSegment.parameters()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> parameters()"
        ],
        [
            "boolean",
            "org.springframework.http.server.DefaultPathContainer$DefaultPathSegment.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.server.DefaultPathContainer$DefaultPathSegment.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultPathContainer$DefaultPathSegment.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.server.ServletServerHttpResponse",
            "org.springframework.http.server.ServletServerHttpResponse(javax.servlet.http.HttpServletResponse)",
            "public org.springframework.http.server.ServletServerHttpResponse(javax.servlet.http.HttpServletResponse)"
        ],
        [
            "javax.servlet.http.HttpServletResponse",
            "org.springframework.http.server.ServletServerHttpResponse.getServletResponse()",
            "public javax.servlet.http.HttpServletResponse getServletResponse()"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpResponse.setStatusCode(org.springframework.http.HttpStatus)",
            "public void setStatusCode(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.server.ServletServerHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.http.server.ServletServerHttpResponse.getBody()",
            "public java.io.OutputStream getBody() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpResponse.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpResponse.close()",
            "public void close()"
        ],
        [
            "org.springframework.http.server.ServletServerHttpRequest",
            "org.springframework.http.server.ServletServerHttpRequest(javax.servlet.http.HttpServletRequest)",
            "public org.springframework.http.server.ServletServerHttpRequest(javax.servlet.http.HttpServletRequest)"
        ],
        [
            "javax.servlet.http.HttpServletRequest",
            "org.springframework.http.server.ServletServerHttpRequest.getServletRequest()",
            "public javax.servlet.http.HttpServletRequest getServletRequest()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.server.ServletServerHttpRequest.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.ServletServerHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.server.ServletServerHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.server.ServletServerHttpRequest.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.security.Principal",
            "org.springframework.http.server.ServletServerHttpRequest.getPrincipal()",
            "public java.security.Principal getPrincipal()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.ServletServerHttpRequest.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.ServletServerHttpRequest.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.server.ServletServerHttpRequest.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.server.ServerHttpAsyncRequestControl",
            "org.springframework.http.server.ServletServerHttpRequest.getAsyncRequestControl(org.springframework.http.server.ServerHttpResponse)",
            "public org.springframework.http.server.ServerHttpAsyncRequestControl getAsyncRequestControl(org.springframework.http.server.ServerHttpResponse)"
        ],
        [
            "boolean",
            "org.springframework.http.server.ServletServerHttpResponse$ServletResponseHttpHeaders.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.ServletServerHttpResponse$ServletResponseHttpHeaders.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.ServletServerHttpResponse$ServletResponseHttpHeaders.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.ServletServerHttpResponse$ServletResponseHttpHeaders.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.ServletServerHttpResponse$ServletResponseHttpHeaders.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultRequestPath.value()",
            "public java.lang.String value()"
        ],
        [
            "java.util.List<org.springframework.http.server.PathContainer$Element>",
            "org.springframework.http.server.DefaultRequestPath.elements()",
            "public java.util.List<org.springframework.http.server.PathContainer$Element> elements()"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.http.server.DefaultRequestPath.contextPath()",
            "public org.springframework.http.server.PathContainer contextPath()"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.http.server.DefaultRequestPath.pathWithinApplication()",
            "public org.springframework.http.server.PathContainer pathWithinApplication()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.http.server.DefaultRequestPath.modifyContextPath(java.lang.String)",
            "public org.springframework.http.server.RequestPath modifyContextPath(java.lang.String)"
        ],
        [
            "boolean",
            "org.springframework.http.server.DefaultRequestPath.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.server.DefaultRequestPath.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultRequestPath.toString()",
            "public java.lang.String toString()"
        ],
        [
            "default",
            "org.springframework.http.server.PathContainer.org.springframework.http.server.PathContainer subPath(int)",
            "public default org.springframework.http.server.PathContainer subPath(int)"
        ],
        [
            "default",
            "org.springframework.http.server.PathContainer.org.springframework.http.server.PathContainer subPath(int, int)",
            "public default org.springframework.http.server.PathContainer subPath(int, int)"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.http.server.PathContainer.parsePath(java.lang.String)",
            "public static org.springframework.http.server.PathContainer parsePath(java.lang.String)"
        ],
        [
            "org.springframework.http.server.PathContainer",
            "org.springframework.http.server.PathContainer.parsePath(java.lang.String, org.springframework.http.server.PathContainer$Options)",
            "public static org.springframework.http.server.PathContainer parsePath(java.lang.String, org.springframework.http.server.PathContainer$Options)"
        ],
        [
            "org.springframework.http.server.DelegatingServerHttpResponse",
            "org.springframework.http.server.DelegatingServerHttpResponse(org.springframework.http.server.ServerHttpResponse)",
            "public org.springframework.http.server.DelegatingServerHttpResponse(org.springframework.http.server.ServerHttpResponse)"
        ],
        [
            "org.springframework.http.server.ServerHttpResponse",
            "org.springframework.http.server.DelegatingServerHttpResponse.getDelegate()",
            "public org.springframework.http.server.ServerHttpResponse getDelegate()"
        ],
        [
            "void",
            "org.springframework.http.server.DelegatingServerHttpResponse.setStatusCode(org.springframework.http.HttpStatus)",
            "public void setStatusCode(org.springframework.http.HttpStatus)"
        ],
        [
            "void",
            "org.springframework.http.server.DelegatingServerHttpResponse.flush()",
            "public void flush() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.DelegatingServerHttpResponse.close()",
            "public void close()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.http.server.DelegatingServerHttpResponse.getBody()",
            "public java.io.OutputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.server.DelegatingServerHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultPathContainer.value()",
            "public java.lang.String value()"
        ],
        [
            "java.util.List<org.springframework.http.server.PathContainer$Element>",
            "org.springframework.http.server.DefaultPathContainer.elements()",
            "public java.util.List<org.springframework.http.server.PathContainer$Element> elements()"
        ],
        [
            "boolean",
            "org.springframework.http.server.DefaultPathContainer.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.server.DefaultPathContainer.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultPathContainer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "char",
            "org.springframework.http.server.PathContainer$Options.separator()",
            "public char separator()"
        ],
        [
            "boolean",
            "org.springframework.http.server.PathContainer$Options.shouldDecodeAndParseSegments()",
            "public boolean shouldDecodeAndParseSegments()"
        ],
        [
            "org.springframework.http.server.PathContainer$Options",
            "org.springframework.http.server.PathContainer$Options.create(char, boolean)",
            "public static org.springframework.http.server.PathContainer$Options create(char, boolean)"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.http.server.RequestPath.parse(java.net.URI, java.lang.String)",
            "public static org.springframework.http.server.RequestPath parse(java.net.URI, java.lang.String)"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.http.server.RequestPath.parse(java.lang.String, java.lang.String)",
            "public static org.springframework.http.server.RequestPath parse(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl(org.springframework.http.server.ServletServerHttpRequest, org.springframework.http.server.ServletServerHttpResponse)",
            "public org.springframework.http.server.ServletServerHttpAsyncRequestControl(org.springframework.http.server.ServletServerHttpRequest, org.springframework.http.server.ServletServerHttpResponse)"
        ],
        [
            "boolean",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.isStarted()",
            "public boolean isStarted()"
        ],
        [
            "boolean",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.isCompleted()",
            "public boolean isCompleted()"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.start(long)",
            "public void start(long)"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.complete()",
            "public void complete()"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.onComplete(javax.servlet.AsyncEvent)",
            "public void onComplete(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.onStartAsync(javax.servlet.AsyncEvent)",
            "public void onStartAsync(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.onError(javax.servlet.AsyncEvent)",
            "public void onError(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.ServletServerHttpAsyncRequestControl.onTimeout(javax.servlet.AsyncEvent)",
            "public void onTimeout(javax.servlet.AsyncEvent) throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultPathContainer$DefaultSeparator.value()",
            "public java.lang.String value()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.DefaultPathContainer$DefaultSeparator.encodedSequence()",
            "public java.lang.String encodedSequence()"
        ],
        [
            "org.springframework.http.server.reactive.HttpHeadResponseDecorator",
            "org.springframework.http.server.reactive.HttpHeadResponseDecorator(org.springframework.http.server.reactive.ServerHttpResponse)",
            "public org.springframework.http.server.reactive.HttpHeadResponseDecorator(org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.HttpHeadResponseDecorator.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public final reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.HttpHeadResponseDecorator.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public final reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$1.onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, org.reactivestreams.Subscription)",
            "public <T> void onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, org.reactivestreams.Subscription)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$1.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)",
            "public org.springframework.http.server.reactive.ServletHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.setBufferSize(int)",
            "public void setBufferSize(int)"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.getBufferSize()",
            "public int getBufferSize()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.getServletPath()",
            "public java.lang.String getServletPath()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.setDataBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)",
            "public void setDataBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.getDataBufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory getDataBufferFactory()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.init(javax.servlet.ServletConfig)",
            "public void init(javax.servlet.ServletConfig)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)",
            "public void service(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.getServletInfo()",
            "public java.lang.String getServletInfo()"
        ],
        [
            "javax.servlet.ServletConfig",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.getServletConfig()",
            "public javax.servlet.ServletConfig getServletConfig()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter.destroy()",
            "public void destroy()"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$3.onWritePossible(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onWritePossible(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$3.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HttpHandlerAsyncListener",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HttpHandlerAsyncListener(javax.servlet.AsyncListener, javax.servlet.AsyncListener, java.lang.Runnable, java.util.concurrent.atomic.AtomicBoolean, java.lang.String)",
            "public org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HttpHandlerAsyncListener(javax.servlet.AsyncListener, javax.servlet.AsyncListener, java.lang.Runnable, java.util.concurrent.atomic.AtomicBoolean, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HttpHandlerAsyncListener.onTimeout(javax.servlet.AsyncEvent)",
            "public void onTimeout(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HttpHandlerAsyncListener.onError(javax.servlet.AsyncEvent)",
            "public void onError(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HttpHandlerAsyncListener.onComplete(javax.servlet.AsyncEvent)",
            "public void onComplete(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HttpHandlerAsyncListener.onStartAsync(javax.servlet.AsyncEvent)",
            "public void onStartAsync(javax.servlet.AsyncEvent)"
        ],
        [
            "org.springframework.http.server.reactive.ServletServerHttpResponse",
            "org.springframework.http.server.reactive.ServletServerHttpResponse(javax.servlet.http.HttpServletResponse, javax.servlet.AsyncContext, org.springframework.core.io.buffer.DataBufferFactory, int, org.springframework.http.server.reactive.ServletServerHttpRequest)",
            "public org.springframework.http.server.reactive.ServletServerHttpResponse(javax.servlet.http.HttpServletResponse, javax.servlet.AsyncContext, org.springframework.core.io.buffer.DataBufferFactory, int, org.springframework.http.server.reactive.ServletServerHttpRequest) throws java.io.IOException"
        ],
        [
            "org.springframework.http.server.reactive.ServletServerHttpResponse",
            "org.springframework.http.server.reactive.ServletServerHttpResponse(org.springframework.http.HttpHeaders, javax.servlet.http.HttpServletResponse, javax.servlet.AsyncContext, org.springframework.core.io.buffer.DataBufferFactory, int, org.springframework.http.server.reactive.ServletServerHttpRequest)",
            "public org.springframework.http.server.reactive.ServletServerHttpResponse(org.springframework.http.HttpHeaders, javax.servlet.http.HttpServletResponse, javax.servlet.AsyncContext, org.springframework.core.io.buffer.DataBufferFactory, int, org.springframework.http.server.reactive.ServletServerHttpRequest) throws java.io.IOException"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.ServletServerHttpResponse.getNativeResponse()",
            "public <T> T getNativeResponse()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.server.reactive.ServletServerHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.server.reactive.ServletServerHttpResponse.getRawStatusCode()",
            "public java.lang.Integer getRawStatusCode()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerServerHttpResponse",
            "org.springframework.http.server.reactive.AbstractListenerServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.server.reactive.AbstractListenerServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerServerHttpResponse",
            "org.springframework.http.server.reactive.AbstractListenerServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory, org.springframework.http.HttpHeaders)",
            "public org.springframework.http.server.reactive.AbstractListenerServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory, org.springframework.http.HttpHeaders)"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$1.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$1.size()",
            "public int size()"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderNames.iterator()",
            "public java.util.Iterator<java.lang.String> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderNames.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$EntryIterator.next()",
            "public java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$2.onNext(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, T)",
            "public <T> void onNext(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, T)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$2.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderNamesIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.String next()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderNamesIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse)",
            "public org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyFlushProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.ReactorServerHttpResponse$ChannelOperationsIdHelper.touch(org.springframework.core.io.buffer.DataBuffer, reactor.netty.http.server.HttpServerResponse)",
            "public static boolean touch(org.springframework.core.io.buffer.DataBuffer, reactor.netty.http.server.HttpServerResponse)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State[]",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.values()",
            "public static org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State[] values()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.valueOf(java.lang.String)",
            "public static org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State valueOf(java.lang.String)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, org.reactivestreams.Subscription)",
            "public <T> void onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, org.reactivestreams.Subscription)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onNext(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, T)",
            "public <T> void onNext(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, T)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onError(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, java.lang.Throwable)",
            "public <T> void onError(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, java.lang.Throwable)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onWritePossible(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onWritePossible(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractServerHttpResponse$State[]",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse$State.values()",
            "public static org.springframework.http.server.reactive.AbstractServerHttpResponse$State[] values()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractServerHttpResponse$State",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse$State.valueOf(java.lang.String)",
            "public static org.springframework.http.server.reactive.AbstractServerHttpResponse$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyFlushProcessor",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyFlushProcessor(org.springframework.http.server.reactive.ServletServerHttpResponse)",
            "public org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyFlushProcessor(org.springframework.http.server.reactive.ServletServerHttpResponse)"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse.getNativeResponse()",
            "public <T> T getNativeResponse()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse.getRawStatusCode()",
            "public java.lang.Integer getRawStatusCode()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse.writeWith(java.nio.file.Path, long, long)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(java.nio.file.Path, long, long)"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$1.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$1.size()",
            "public int size()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State[]",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.values()",
            "public static org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State[] values()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.valueOf(java.lang.String)",
            "public static org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State valueOf(java.lang.String)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Subscription)",
            "public <T> void onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Subscription)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)",
            "public <T> void onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.onError(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, java.lang.Throwable)",
            "public <T> void onError(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, java.lang.Throwable)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.writeComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void writeComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State.onFlushPossible(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onFlushPossible(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse, org.xnio.channels.StreamSinkChannel)",
            "public org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse, org.xnio.channels.StreamSinkChannel)"
        ],
        [
            "org.springframework.http.server.reactive.ServletServerHttpRequest",
            "org.springframework.http.server.reactive.ServletServerHttpRequest(javax.servlet.http.HttpServletRequest, javax.servlet.AsyncContext, java.lang.String, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public org.springframework.http.server.reactive.ServletServerHttpRequest(javax.servlet.http.HttpServletRequest, javax.servlet.AsyncContext, java.lang.String, org.springframework.core.io.buffer.DataBufferFactory, int) throws java.io.IOException, java.net.URISyntaxException"
        ],
        [
            "org.springframework.http.server.reactive.ServletServerHttpRequest",
            "org.springframework.http.server.reactive.ServletServerHttpRequest(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, javax.servlet.http.HttpServletRequest, javax.servlet.AsyncContext, java.lang.String, org.springframework.core.io.buffer.DataBufferFactory, int)",
            "public org.springframework.http.server.reactive.ServletServerHttpRequest(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, javax.servlet.http.HttpServletRequest, javax.servlet.AsyncContext, java.lang.String, org.springframework.core.io.buffer.DataBufferFactory, int) throws java.io.IOException, java.net.URISyntaxException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ServletServerHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.ServletServerHttpRequest.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.ServletServerHttpRequest.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.server.reactive.ServletServerHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.ServletServerHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyWriteListener.onWritePossible()",
            "public void onWritePossible()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyWriteListener.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderNames.iterator()",
            "public java.util.Iterator<java.lang.String> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderNames.size()",
            "public int size()"
        ],
        [
            "org.springframework.http.server.reactive.UndertowServerHttpRequest",
            "org.springframework.http.server.reactive.UndertowServerHttpRequest(io.undertow.server.HttpServerExchange, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.server.reactive.UndertowServerHttpRequest(io.undertow.server.HttpServerExchange, org.springframework.core.io.buffer.DataBufferFactory) throws java.net.URISyntaxException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.UndertowServerHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.UndertowServerHttpRequest.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.UndertowServerHttpRequest.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.server.reactive.UndertowServerHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.UndertowServerHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderNamesIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.String next()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderNamesIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onSubscribe(org.reactivestreams.Subscription)",
            "public final void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onNext(T)",
            "public final void onNext(T)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onError(java.lang.Throwable)",
            "public final void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.onComplete()",
            "public final void onComplete()"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.request(long)",
            "public void request(long)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.cancel()",
            "public void cancel()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteBarrier.subscribe(org.reactivestreams.Subscriber<? super T>)",
            "public void subscribe(org.reactivestreams.Subscriber<? super T>)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor()",
            "public org.springframework.http.server.reactive.AbstractListenerWriteProcessor()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor(java.lang.String)",
            "public org.springframework.http.server.reactive.AbstractListenerWriteProcessor(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.getLogPrefix()",
            "public java.lang.String getLogPrefix()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onSubscribe(org.reactivestreams.Subscription)",
            "public final void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onNext(T)",
            "public final void onNext(T)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onError(java.lang.Throwable)",
            "public final void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onComplete()",
            "public final void onComplete()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onWritePossible()",
            "public final void onWritePossible()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.cancel()",
            "public void cancel()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor.subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>)",
            "public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$3.writeComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void writeComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$3.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractServerHttpResponse",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.server.reactive.AbstractServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractServerHttpResponse",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory, org.springframework.http.HttpHeaders)",
            "public org.springframework.http.server.reactive.AbstractServerHttpResponse(org.springframework.core.io.buffer.DataBufferFactory, org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.bufferFactory()",
            "public final org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.setStatusCode(org.springframework.http.HttpStatus)",
            "public boolean setStatusCode(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.setRawStatusCode(java.lang.Integer)",
            "public boolean setRawStatusCode(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.getRawStatusCode()",
            "public java.lang.Integer getRawStatusCode()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.setStatusCodeValue(java.lang.Integer)",
            "public void setStatusCodeValue(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.getStatusCodeValue()",
            "public java.lang.Integer getStatusCodeValue()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.addCookie(org.springframework.http.ResponseCookie)",
            "public void addCookie(org.springframework.http.ResponseCookie)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)",
            "public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.isCommitted()",
            "public boolean isCommitted()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public final reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public final reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.AbstractServerHttpResponse.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$1.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$1.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator.next()",
            "public java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "org.springframework.http.server.reactive.WriteResultPublisher",
            "org.springframework.http.server.reactive.WriteResultPublisher(java.lang.String, java.lang.Runnable)",
            "public org.springframework.http.server.reactive.WriteResultPublisher(java.lang.String, java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.WriteResultPublisher.subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>)",
            "public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.WriteResultPublisher.publishComplete()",
            "public void publishComplete()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.WriteResultPublisher.publishError(java.lang.Throwable)",
            "public void publishError(java.lang.Throwable)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public org.springframework.http.server.reactive.ServerHttpRequestDecorator(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getDelegate()",
            "public org.springframework.http.server.reactive.ServerHttpRequest getDelegate()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getId()",
            "public java.lang.String getId()"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getPath()",
            "public org.springframework.http.server.RequestPath getPath()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getQueryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> getQueryParams()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "org.springframework.http.server.reactive.SslInfo",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getSslInfo()",
            "public org.springframework.http.server.reactive.SslInfo getSslInfo()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.getNativeRequest(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public static <T> T getNativeRequest(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ServerHttpRequestDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.server.reactive.WriteResultPublisher$State[]",
            "org.springframework.http.server.reactive.WriteResultPublisher$State.values()",
            "public static org.springframework.http.server.reactive.WriteResultPublisher$State[] values()"
        ],
        [
            "org.springframework.http.server.reactive.WriteResultPublisher$State",
            "org.springframework.http.server.reactive.WriteResultPublisher$State.valueOf(java.lang.String)",
            "public static org.springframework.http.server.reactive.WriteResultPublisher$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.http.server.reactive.WriteResultPublisher$WriteResultSubscription",
            "org.springframework.http.server.reactive.WriteResultPublisher$WriteResultSubscription(org.springframework.http.server.reactive.WriteResultPublisher)",
            "public org.springframework.http.server.reactive.WriteResultPublisher$WriteResultSubscription(org.springframework.http.server.reactive.WriteResultPublisher)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.WriteResultPublisher$WriteResultSubscription.request(long)",
            "public final void request(long)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.WriteResultPublisher$WriteResultSubscription.cancel()",
            "public final void cancel()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor()",
            "public org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor(java.lang.String)",
            "public org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.getLogPrefix()",
            "public java.lang.String getLogPrefix()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.onSubscribe(org.reactivestreams.Subscription)",
            "public final void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.onNext(org.reactivestreams.Publisher<? extends T>)",
            "public final void onNext(org.reactivestreams.Publisher<? extends T>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.onError(java.lang.Throwable)",
            "public final void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.onComplete()",
            "public final void onComplete()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>)",
            "public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher(org.springframework.http.server.reactive.ServletServerHttpRequest, javax.servlet.ServletInputStream)",
            "public org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher(org.springframework.http.server.reactive.ServletServerHttpRequest, javax.servlet.ServletInputStream)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher.registerReadListener()",
            "public void registerReadListener() throws java.io.IOException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.util.List<java.lang.String> getValue()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry.setValue(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> setValue(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry.setValue(java.lang.Object)",
            "public java.lang.Object setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.util.List<java.lang.String> getValue()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderEntry.setValue(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> setValue(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderEntry.setValue(java.lang.Object)",
            "public java.lang.Object setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderEntry.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)",
            "public org.springframework.http.server.reactive.UndertowHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.setDataBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)",
            "public void setDataBufferFactory(org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.getDataBufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory getDataBufferFactory()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.handleRequest(io.undertow.server.HttpServerExchange)",
            "public void handleRequest(io.undertow.server.HttpServerExchange)"
        ],
        [
            "org.springframework.http.server.reactive.JettyHttpHandlerAdapter",
            "org.springframework.http.server.reactive.JettyHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)",
            "public org.springframework.http.server.reactive.JettyHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator.next()",
            "public java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<?>)",
            "public org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<?>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.onSubscribe(org.reactivestreams.Subscription)",
            "public void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.onNext(java.lang.Void)",
            "public void onNext(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.onComplete()",
            "public void onComplete()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$WriteResultSubscriber.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.ServerHttpResponse.setRawStatusCode(java.lang.Integer)",
            "public default boolean setRawStatusCode(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.server.reactive.ServerHttpResponse.getRawStatusCode()",
            "public default java.lang.Integer getRawStatusCode()"
        ],
        [
            "org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher",
            "org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher(org.springframework.http.server.reactive.UndertowServerHttpRequest, io.undertow.server.HttpServerExchange, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher(org.springframework.http.server.reactive.UndertowServerHttpRequest, io.undertow.server.HttpServerExchange, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ReactorServerHttpRequest$ChannelOperationsIdHelper.getId(reactor.netty.http.server.HttpServerRequest)",
            "public static java.lang.String getId(reactor.netty.http.server.HttpServerRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder(org.springframework.http.server.reactive.ServerHttpRequest)",
            "public org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder(org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.method(org.springframework.http.HttpMethod)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder method(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.uri(java.net.URI)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder uri(java.net.URI)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.path(java.lang.String)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder path(java.lang.String)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.contextPath(java.lang.String)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder contextPath(java.lang.String)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.header(java.lang.String, java.lang.String...)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder header(java.lang.String, java.lang.String...)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder headers(java.util.function.Consumer<org.springframework.http.HttpHeaders>)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.sslInfo(org.springframework.http.server.reactive.SslInfo)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder sslInfo(org.springframework.http.server.reactive.SslInfo)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest$Builder",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.remoteAddress(java.net.InetSocketAddress)",
            "public org.springframework.http.server.reactive.ServerHttpRequest$Builder remoteAddress(java.net.InetSocketAddress)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpRequest",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder.build()",
            "public org.springframework.http.server.reactive.ServerHttpRequest build()"
        ],
        [
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber(org.springframework.http.server.reactive.UndertowHttpHandlerAdapter, io.undertow.server.HttpServerExchange, org.springframework.http.server.reactive.UndertowServerHttpRequest)",
            "public org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber(org.springframework.http.server.reactive.UndertowHttpHandlerAdapter, io.undertow.server.HttpServerExchange, org.springframework.http.server.reactive.UndertowServerHttpRequest)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber.onSubscribe(org.reactivestreams.Subscription)",
            "public void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber.onNext(java.lang.Void)",
            "public void onNext(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber.onComplete()",
            "public void onComplete()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHttpHandlerAdapter$HandlerResultSubscriber.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry.getValue()",
            "public java.util.List<java.lang.String> getValue()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry.setValue(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> setValue(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry.setValue(java.lang.Object)",
            "public java.lang.Object setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "org.springframework.http.server.reactive.ChannelSendOperator",
            "org.springframework.http.server.reactive.ChannelSendOperator(org.reactivestreams.Publisher<? extends T>, java.util.function.Function<org.reactivestreams.Publisher<T>, org.reactivestreams.Publisher<java.lang.Void>>)",
            "public org.springframework.http.server.reactive.ChannelSendOperator(org.reactivestreams.Publisher<? extends T>, java.util.function.Function<org.reactivestreams.Publisher<T>, org.reactivestreams.Publisher<java.lang.Void>>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.ChannelSendOperator.scanUnsafe(reactor.core.Scannable$Attr)",
            "public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator.subscribe(reactor.core.CoreSubscriber<? super java.lang.Void>)",
            "public void subscribe(reactor.core.CoreSubscriber<? super java.lang.Void>)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderNamesIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.String next()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderNamesIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$4.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$5.onNext(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, T)",
            "public <T> void onNext(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, T)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$5.onError(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, java.lang.Throwable)",
            "public <T> void onError(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>, java.lang.Throwable)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State$5.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.ContextPathCompositeHandler",
            "org.springframework.http.server.reactive.ContextPathCompositeHandler(java.util.Map<java.lang.String, ? extends org.springframework.http.server.reactive.HttpHandler>)",
            "public org.springframework.http.server.reactive.ContextPathCompositeHandler(java.util.Map<java.lang.String, ? extends org.springframework.http.server.reactive.HttpHandler>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.ContextPathCompositeHandler.handle(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)",
            "public reactor.core.publisher.Mono<java.lang.Void> handle(org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$1.onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Subscription)",
            "public <T> void onSubscribe(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Subscription)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$1.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$EntryIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$EntryIterator.next()",
            "public java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>> next()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$EntryIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$2.onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)",
            "public <T> void onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$2.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderNamesIterator.hasNext()",
            "public boolean hasNext()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.String next()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderNamesIterator.remove()",
            "public void remove()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$HeaderNamesIterator.next()",
            "public java.lang.Object next()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onStartAsync(javax.servlet.AsyncEvent)",
            "public void onStartAsync(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onTimeout(javax.servlet.AsyncEvent)",
            "public void onTimeout(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onError(javax.servlet.AsyncEvent)",
            "public void onError(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.handleError(java.lang.Throwable)",
            "public void handleError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseAsyncListener.onComplete(javax.servlet.AsyncEvent)",
            "public void onComplete(javax.servlet.AsyncEvent)"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderNames.iterator()",
            "public java.util.Iterator<java.lang.String> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.JettyHeadersAdapter$HeaderNames.size()",
            "public int size()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.String getKey()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderEntry.getValue()",
            "public java.util.List<java.lang.String> getValue()"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderEntry.setValue(java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> setValue(java.util.List<java.lang.String>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderEntry.setValue(java.lang.Object)",
            "public java.lang.Object setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderEntry.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter$HeaderEntry.getKey()",
            "public java.lang.Object getKey()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher$RequestBodyPublisherReadListener.onDataAvailable()",
            "public void onDataAvailable() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher$RequestBodyPublisherReadListener.onAllDataRead()",
            "public void onAllDataRead() throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestBodyPublisher$RequestBodyPublisherReadListener.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest(java.net.URI, java.lang.String, java.lang.String, org.springframework.http.server.reactive.SslInfo, java.net.InetSocketAddress, org.springframework.http.HttpHeaders, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, org.springframework.http.server.reactive.ServerHttpRequest)",
            "public org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest(java.net.URI, java.lang.String, java.lang.String, org.springframework.http.server.reactive.SslInfo, java.net.InetSocketAddress, org.springframework.http.HttpHeaders, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, org.springframework.http.server.reactive.ServerHttpRequest)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.DefaultServerHttpRequestBuilder$MutatedServerHttpRequest.getId()",
            "public java.lang.String getId()"
        ],
        [
            "org.springframework.http.server.reactive.ChannelSendOperator$State[]",
            "org.springframework.http.server.reactive.ChannelSendOperator$State.values()",
            "public static org.springframework.http.server.reactive.ChannelSendOperator$State[] values()"
        ],
        [
            "org.springframework.http.server.reactive.ChannelSendOperator$State",
            "org.springframework.http.server.reactive.ChannelSendOperator$State.valueOf(java.lang.String)",
            "public static org.springframework.http.server.reactive.ChannelSendOperator$State valueOf(java.lang.String)"
        ],
        [
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier(reactor.core.CoreSubscriber<? super java.lang.Void>, org.springframework.http.server.reactive.ChannelSendOperator<T>.WriteBarrier)",
            "public org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier(reactor.core.CoreSubscriber<? super java.lang.Void>, org.springframework.http.server.reactive.ChannelSendOperator<T>.WriteBarrier)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.connect()",
            "public void connect()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onSubscribe(org.reactivestreams.Subscription)",
            "public void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onNext(java.lang.Void)",
            "public void onNext(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onComplete()",
            "public void onComplete()"
        ],
        [
            "reactor.util.context.Context",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.currentContext()",
            "public reactor.util.context.Context currentContext()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.request(long)",
            "public void request(long)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.cancel()",
            "public void cancel()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ChannelSendOperator$WriteCompletionBarrier.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "default",
            "org.springframework.http.server.reactive.ServerHttpRequest.java.net.InetSocketAddress getLocalAddress()",
            "public default java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "default",
            "org.springframework.http.server.reactive.ServerHttpRequest.java.net.InetSocketAddress getRemoteAddress()",
            "public default java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "default",
            "org.springframework.http.server.reactive.ServerHttpRequest.org.springframework.http.server.reactive.SslInfo getSslInfo()",
            "public default org.springframework.http.server.reactive.SslInfo getSslInfo()"
        ],
        [
            "default",
            "org.springframework.http.server.reactive.ServerHttpRequest.org.springframework.http.server.reactive.ServerHttpRequest$Builder mutate()",
            "public default org.springframework.http.server.reactive.ServerHttpRequest$Builder mutate()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher()",
            "public org.springframework.http.server.reactive.AbstractListenerReadPublisher()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher(java.lang.String)",
            "public org.springframework.http.server.reactive.AbstractListenerReadPublisher(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher.getLogPrefix()",
            "public java.lang.String getLogPrefix()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher.subscribe(org.reactivestreams.Subscriber<? super T>)",
            "public void subscribe(org.reactivestreams.Subscriber<? super T>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable()",
            "public final void onDataAvailable()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher.onAllDataRead()",
            "public void onAllDataRead()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher.onError(java.lang.Throwable)",
            "public final void onError(java.lang.Throwable)"
        ],
        [
            "org.springframework.http.server.reactive.ReactorHttpHandlerAdapter",
            "org.springframework.http.server.reactive.ReactorHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)",
            "public org.springframework.http.server.reactive.ReactorHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.ReactorHttpHandlerAdapter.apply(reactor.netty.http.server.HttpServerRequest, reactor.netty.http.server.HttpServerResponse)",
            "public reactor.core.publisher.Mono<java.lang.Void> apply(reactor.netty.http.server.HttpServerRequest, reactor.netty.http.server.HttpServerResponse)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.ReactorHttpHandlerAdapter.apply(java.lang.Object, java.lang.Object)",
            "public java.lang.Object apply(java.lang.Object, java.lang.Object)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$5.onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)",
            "public <T> void onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$5.onError(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, java.lang.Throwable)",
            "public <T> void onError(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, java.lang.Throwable)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$5.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.TomcatHttpHandlerAdapter",
            "org.springframework.http.server.reactive.TomcatHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)",
            "public org.springframework.http.server.reactive.TomcatHttpHandlerAdapter(org.springframework.http.server.reactive.HttpHandler)"
        ],
        [
            "org.springframework.http.server.reactive.ReactorServerHttpRequest",
            "org.springframework.http.server.reactive.ReactorServerHttpRequest(reactor.netty.http.server.HttpServerRequest, org.springframework.core.io.buffer.NettyDataBufferFactory)",
            "public org.springframework.http.server.reactive.ReactorServerHttpRequest(reactor.netty.http.server.HttpServerRequest, org.springframework.core.io.buffer.NettyDataBufferFactory) throws java.net.URISyntaxException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ReactorServerHttpRequest.getMethodValue()",
            "public java.lang.String getMethodValue()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.ReactorServerHttpRequest.getLocalAddress()",
            "public java.net.InetSocketAddress getLocalAddress()"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.server.reactive.ReactorServerHttpRequest.getRemoteAddress()",
            "public java.net.InetSocketAddress getRemoteAddress()"
        ],
        [
            "reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>",
            "org.springframework.http.server.reactive.ReactorServerHttpRequest.getBody()",
            "public reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody()"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.ReactorServerHttpRequest.getNativeRequest()",
            "public <T> T getNativeRequest()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.DefaultSslInfo.getSessionId()",
            "public java.lang.String getSessionId()"
        ],
        [
            "java.security.cert.X509Certificate[]",
            "org.springframework.http.server.reactive.DefaultSslInfo.getPeerCertificates()",
            "public java.security.cert.X509Certificate[] getPeerCertificates()"
        ],
        [
            "java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$1.iterator()",
            "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.UndertowHeadersAdapter$1.size()",
            "public int size()"
        ],
        [
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber(javax.servlet.AsyncContext, java.util.concurrent.atomic.AtomicBoolean, java.lang.String)",
            "public org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber(javax.servlet.AsyncContext, java.util.concurrent.atomic.AtomicBoolean, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber.onSubscribe(org.reactivestreams.Subscription)",
            "public void onSubscribe(org.reactivestreams.Subscription)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber.onNext(java.lang.Void)",
            "public void onNext(java.lang.Void)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber.onError(java.lang.Throwable)",
            "public void onError(java.lang.Throwable)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber.onComplete()",
            "public void onComplete()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber.run()",
            "public void run()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletHttpHandlerAdapter$HandlerResultSubscriber.onNext(java.lang.Object)",
            "public void onNext(java.lang.Object)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator(org.springframework.http.server.reactive.ServerHttpResponse)",
            "public org.springframework.http.server.reactive.ServerHttpResponseDecorator(org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "org.springframework.http.server.reactive.ServerHttpResponse",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.getDelegate()",
            "public org.springframework.http.server.reactive.ServerHttpResponse getDelegate()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.setStatusCode(org.springframework.http.HttpStatus)",
            "public boolean setStatusCode(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.setRawStatusCode(java.lang.Integer)",
            "public boolean setRawStatusCode(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.getRawStatusCode()",
            "public java.lang.Integer getRawStatusCode()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie>",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.ResponseCookie> getCookies()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.addCookie(org.springframework.http.ResponseCookie)",
            "public void addCookie(org.springframework.http.ResponseCookie)"
        ],
        [
            "org.springframework.core.io.buffer.DataBufferFactory",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.bufferFactory()",
            "public org.springframework.core.io.buffer.DataBufferFactory bufferFactory()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)",
            "public void beforeCommit(java.util.function.Supplier<? extends reactor.core.publisher.Mono<java.lang.Void>>)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.isCommitted()",
            "public boolean isCommitted()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWith(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>)"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.setComplete()",
            "public reactor.core.publisher.Mono<java.lang.Void> setComplete()"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.getNativeResponse(org.springframework.http.server.reactive.ServerHttpResponse)",
            "public static <T> T getNativeResponse(org.springframework.http.server.reactive.ServerHttpResponse)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.ServerHttpResponseDecorator.toString()",
            "public java.lang.String toString()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.TomcatHeadersAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$TransferBodyListener",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$TransferBodyListener(java.nio.channels.FileChannel, long, long, reactor.core.publisher.MonoSink<java.lang.Void>)",
            "public org.springframework.http.server.reactive.UndertowServerHttpResponse$TransferBodyListener(java.nio.channels.FileChannel, long, long, reactor.core.publisher.MonoSink<java.lang.Void>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$TransferBodyListener.transfer(org.xnio.channels.StreamSinkChannel)",
            "public void transfer(org.xnio.channels.StreamSinkChannel)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.UndertowServerHttpResponse$TransferBodyListener.closeSource()",
            "public void closeSource()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher$State[]",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.values()",
            "public static org.springframework.http.server.reactive.AbstractListenerReadPublisher$State[] values()"
        ],
        [
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher$State",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.valueOf(java.lang.String)",
            "public static org.springframework.http.server.reactive.AbstractListenerReadPublisher$State valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestAsyncListener.onStartAsync(javax.servlet.AsyncEvent)",
            "public void onStartAsync(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestAsyncListener.onTimeout(javax.servlet.AsyncEvent)",
            "public void onTimeout(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestAsyncListener.onError(javax.servlet.AsyncEvent)",
            "public void onError(javax.servlet.AsyncEvent)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.ServletServerHttpRequest$RequestAsyncListener.onComplete(javax.servlet.AsyncEvent)",
            "public void onComplete(javax.servlet.AsyncEvent)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.toString()",
            "public java.lang.String toString()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.server.reactive.JettyHeadersAdapter.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractServerHttpRequest",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest(java.net.URI, java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.http.server.reactive.AbstractServerHttpRequest(java.net.URI, java.lang.String, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.http.server.reactive.AbstractServerHttpRequest",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest(java.net.URI, java.lang.String, org.springframework.http.HttpHeaders)",
            "public org.springframework.http.server.reactive.AbstractServerHttpRequest(java.net.URI, java.lang.String, org.springframework.http.HttpHeaders)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest.getId()",
            "public java.lang.String getId()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest.getURI()",
            "public java.net.URI getURI()"
        ],
        [
            "org.springframework.http.server.RequestPath",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest.getPath()",
            "public org.springframework.http.server.RequestPath getPath()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest.getQueryParams()",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> getQueryParams()"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie>",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest.getCookies()",
            "public org.springframework.util.MultiValueMap<java.lang.String, org.springframework.http.HttpCookie> getCookies()"
        ],
        [
            "org.springframework.http.server.reactive.SslInfo",
            "org.springframework.http.server.reactive.AbstractServerHttpRequest.getSslInfo()",
            "public org.springframework.http.server.reactive.SslInfo getSslInfo()"
        ],
        [
            "java.util.Iterator<java.lang.String>",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderNames.iterator()",
            "public java.util.Iterator<java.lang.String> iterator()"
        ],
        [
            "int",
            "org.springframework.http.server.reactive.NettyHeadersAdapter$HeaderNames.size()",
            "public int size()"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher$ReadSubscription.request(long)",
            "public final void request(long)"
        ],
        [
            "void",
            "org.springframework.http.server.reactive.AbstractListenerReadPublisher$ReadSubscription.cancel()",
            "public final void cancel()"
        ],
        [
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor",
            "org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor(org.springframework.http.server.reactive.ServletServerHttpResponse)",
            "public org.springframework.http.server.reactive.ServletServerHttpResponse$ResponseBodyProcessor(org.springframework.http.server.reactive.ServletServerHttpResponse)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$4.onFlushPossible(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onFlushPossible(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$4.onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)",
            "public <T> void onNext(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>, org.reactivestreams.Publisher<? extends T>)"
        ],
        [
            "<T> void",
            "org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor$State$4.onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)",
            "public <T> void onComplete(org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>)"
        ],
        [
            "org.springframework.http.server.reactive.ReactorServerHttpResponse",
            "org.springframework.http.server.reactive.ReactorServerHttpResponse(reactor.netty.http.server.HttpServerResponse, org.springframework.core.io.buffer.DataBufferFactory)",
            "public org.springframework.http.server.reactive.ReactorServerHttpResponse(reactor.netty.http.server.HttpServerResponse, org.springframework.core.io.buffer.DataBufferFactory)"
        ],
        [
            "<T> T",
            "org.springframework.http.server.reactive.ReactorServerHttpResponse.getNativeResponse()",
            "public <T> T getNativeResponse()"
        ],
        [
            "org.springframework.http.HttpStatus",
            "org.springframework.http.server.reactive.ReactorServerHttpResponse.getStatusCode()",
            "public org.springframework.http.HttpStatus getStatusCode()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.http.server.reactive.ReactorServerHttpResponse.getRawStatusCode()",
            "public java.lang.Integer getRawStatusCode()"
        ],
        [
            "reactor.core.publisher.Mono<java.lang.Void>",
            "org.springframework.http.server.reactive.ReactorServerHttpResponse.writeWith(java.nio.file.Path, long, long)",
            "public reactor.core.publisher.Mono<java.lang.Void> writeWith(java.nio.file.Path, long, long)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.HttpHeaders()",
            "public org.springframework.http.HttpHeaders()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.HttpHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public org.springframework.http.HttpHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getOrEmpty(java.lang.Object)",
            "public java.util.List<java.lang.String> getOrEmpty(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccept(java.util.List<org.springframework.http.MediaType>)",
            "public void setAccept(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.HttpHeaders.getAccept()",
            "public java.util.List<org.springframework.http.MediaType> getAccept()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAcceptLanguage(java.util.List<java.util.Locale$LanguageRange>)",
            "public void setAcceptLanguage(java.util.List<java.util.Locale$LanguageRange>)"
        ],
        [
            "java.util.List<java.util.Locale$LanguageRange>",
            "org.springframework.http.HttpHeaders.getAcceptLanguage()",
            "public java.util.List<java.util.Locale$LanguageRange> getAcceptLanguage()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAcceptLanguageAsLocales(java.util.List<java.util.Locale>)",
            "public void setAcceptLanguageAsLocales(java.util.List<java.util.Locale>)"
        ],
        [
            "java.util.List<java.util.Locale>",
            "org.springframework.http.HttpHeaders.getAcceptLanguageAsLocales()",
            "public java.util.List<java.util.Locale> getAcceptLanguageAsLocales()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAcceptPatch(java.util.List<org.springframework.http.MediaType>)",
            "public void setAcceptPatch(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.HttpHeaders.getAcceptPatch()",
            "public java.util.List<org.springframework.http.MediaType> getAcceptPatch()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlAllowCredentials(boolean)",
            "public void setAccessControlAllowCredentials(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.HttpHeaders.getAccessControlAllowCredentials()",
            "public boolean getAccessControlAllowCredentials()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlAllowHeaders(java.util.List<java.lang.String>)",
            "public void setAccessControlAllowHeaders(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getAccessControlAllowHeaders()",
            "public java.util.List<java.lang.String> getAccessControlAllowHeaders()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlAllowMethods(java.util.List<org.springframework.http.HttpMethod>)",
            "public void setAccessControlAllowMethods(java.util.List<org.springframework.http.HttpMethod>)"
        ],
        [
            "java.util.List<org.springframework.http.HttpMethod>",
            "org.springframework.http.HttpHeaders.getAccessControlAllowMethods()",
            "public java.util.List<org.springframework.http.HttpMethod> getAccessControlAllowMethods()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlAllowOrigin(java.lang.String)",
            "public void setAccessControlAllowOrigin(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.getAccessControlAllowOrigin()",
            "public java.lang.String getAccessControlAllowOrigin()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlExposeHeaders(java.util.List<java.lang.String>)",
            "public void setAccessControlExposeHeaders(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getAccessControlExposeHeaders()",
            "public java.util.List<java.lang.String> getAccessControlExposeHeaders()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlMaxAge(java.time.Duration)",
            "public void setAccessControlMaxAge(java.time.Duration)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlMaxAge(long)",
            "public void setAccessControlMaxAge(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getAccessControlMaxAge()",
            "public long getAccessControlMaxAge()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlRequestHeaders(java.util.List<java.lang.String>)",
            "public void setAccessControlRequestHeaders(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getAccessControlRequestHeaders()",
            "public java.util.List<java.lang.String> getAccessControlRequestHeaders()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAccessControlRequestMethod(org.springframework.http.HttpMethod)",
            "public void setAccessControlRequestMethod(org.springframework.http.HttpMethod)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.HttpHeaders.getAccessControlRequestMethod()",
            "public org.springframework.http.HttpMethod getAccessControlRequestMethod()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAcceptCharset(java.util.List<java.nio.charset.Charset>)",
            "public void setAcceptCharset(java.util.List<java.nio.charset.Charset>)"
        ],
        [
            "java.util.List<java.nio.charset.Charset>",
            "org.springframework.http.HttpHeaders.getAcceptCharset()",
            "public java.util.List<java.nio.charset.Charset> getAcceptCharset()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAllow(java.util.Set<org.springframework.http.HttpMethod>)",
            "public void setAllow(java.util.Set<org.springframework.http.HttpMethod>)"
        ],
        [
            "java.util.Set<org.springframework.http.HttpMethod>",
            "org.springframework.http.HttpHeaders.getAllow()",
            "public java.util.Set<org.springframework.http.HttpMethod> getAllow()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setBasicAuth(java.lang.String, java.lang.String)",
            "public void setBasicAuth(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setBasicAuth(java.lang.String, java.lang.String, java.nio.charset.Charset)",
            "public void setBasicAuth(java.lang.String, java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setBasicAuth(java.lang.String)",
            "public void setBasicAuth(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setBearerAuth(java.lang.String)",
            "public void setBearerAuth(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setCacheControl(org.springframework.http.CacheControl)",
            "public void setCacheControl(org.springframework.http.CacheControl)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setCacheControl(java.lang.String)",
            "public void setCacheControl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.getCacheControl()",
            "public java.lang.String getCacheControl()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setConnection(java.lang.String)",
            "public void setConnection(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setConnection(java.util.List<java.lang.String>)",
            "public void setConnection(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getConnection()",
            "public java.util.List<java.lang.String> getConnection()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setContentDispositionFormData(java.lang.String, java.lang.String)",
            "public void setContentDispositionFormData(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setContentDisposition(org.springframework.http.ContentDisposition)",
            "public void setContentDisposition(org.springframework.http.ContentDisposition)"
        ],
        [
            "org.springframework.http.ContentDisposition",
            "org.springframework.http.HttpHeaders.getContentDisposition()",
            "public org.springframework.http.ContentDisposition getContentDisposition()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setContentLanguage(java.util.Locale)",
            "public void setContentLanguage(java.util.Locale)"
        ],
        [
            "java.util.Locale",
            "org.springframework.http.HttpHeaders.getContentLanguage()",
            "public java.util.Locale getContentLanguage()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setContentLength(long)",
            "public void setContentLength(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getContentLength()",
            "public long getContentLength()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setContentType(org.springframework.http.MediaType)",
            "public void setContentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.HttpHeaders.getContentType()",
            "public org.springframework.http.MediaType getContentType()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setDate(java.time.ZonedDateTime)",
            "public void setDate(java.time.ZonedDateTime)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setDate(java.time.Instant)",
            "public void setDate(java.time.Instant)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setDate(long)",
            "public void setDate(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getDate()",
            "public long getDate()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setETag(java.lang.String)",
            "public void setETag(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.getETag()",
            "public java.lang.String getETag()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setExpires(java.time.ZonedDateTime)",
            "public void setExpires(java.time.ZonedDateTime)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setExpires(java.time.Instant)",
            "public void setExpires(java.time.Instant)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setExpires(long)",
            "public void setExpires(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getExpires()",
            "public long getExpires()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setHost(java.net.InetSocketAddress)",
            "public void setHost(java.net.InetSocketAddress)"
        ],
        [
            "java.net.InetSocketAddress",
            "org.springframework.http.HttpHeaders.getHost()",
            "public java.net.InetSocketAddress getHost()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfMatch(java.lang.String)",
            "public void setIfMatch(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfMatch(java.util.List<java.lang.String>)",
            "public void setIfMatch(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getIfMatch()",
            "public java.util.List<java.lang.String> getIfMatch()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfModifiedSince(java.time.ZonedDateTime)",
            "public void setIfModifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfModifiedSince(java.time.Instant)",
            "public void setIfModifiedSince(java.time.Instant)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfModifiedSince(long)",
            "public void setIfModifiedSince(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getIfModifiedSince()",
            "public long getIfModifiedSince()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfNoneMatch(java.lang.String)",
            "public void setIfNoneMatch(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfNoneMatch(java.util.List<java.lang.String>)",
            "public void setIfNoneMatch(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getIfNoneMatch()",
            "public java.util.List<java.lang.String> getIfNoneMatch()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfUnmodifiedSince(java.time.ZonedDateTime)",
            "public void setIfUnmodifiedSince(java.time.ZonedDateTime)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfUnmodifiedSince(java.time.Instant)",
            "public void setIfUnmodifiedSince(java.time.Instant)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setIfUnmodifiedSince(long)",
            "public void setIfUnmodifiedSince(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getIfUnmodifiedSince()",
            "public long getIfUnmodifiedSince()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setLastModified(java.time.ZonedDateTime)",
            "public void setLastModified(java.time.ZonedDateTime)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setLastModified(java.time.Instant)",
            "public void setLastModified(java.time.Instant)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setLastModified(long)",
            "public void setLastModified(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getLastModified()",
            "public long getLastModified()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setLocation(java.net.URI)",
            "public void setLocation(java.net.URI)"
        ],
        [
            "java.net.URI",
            "org.springframework.http.HttpHeaders.getLocation()",
            "public java.net.URI getLocation()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setOrigin(java.lang.String)",
            "public void setOrigin(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.getOrigin()",
            "public java.lang.String getOrigin()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setPragma(java.lang.String)",
            "public void setPragma(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.getPragma()",
            "public java.lang.String getPragma()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setRange(java.util.List<org.springframework.http.HttpRange>)",
            "public void setRange(java.util.List<org.springframework.http.HttpRange>)"
        ],
        [
            "java.util.List<org.springframework.http.HttpRange>",
            "org.springframework.http.HttpHeaders.getRange()",
            "public java.util.List<org.springframework.http.HttpRange> getRange()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setUpgrade(java.lang.String)",
            "public void setUpgrade(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.getUpgrade()",
            "public java.lang.String getUpgrade()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setVary(java.util.List<java.lang.String>)",
            "public void setVary(java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getVary()",
            "public java.util.List<java.lang.String> getVary()"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setZonedDateTime(java.lang.String, java.time.ZonedDateTime)",
            "public void setZonedDateTime(java.lang.String, java.time.ZonedDateTime)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setInstant(java.lang.String, java.time.Instant)",
            "public void setInstant(java.lang.String, java.time.Instant)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setDate(java.lang.String, long)",
            "public void setDate(java.lang.String, long)"
        ],
        [
            "long",
            "org.springframework.http.HttpHeaders.getFirstDate(java.lang.String)",
            "public long getFirstDate(java.lang.String)"
        ],
        [
            "java.time.ZonedDateTime",
            "org.springframework.http.HttpHeaders.getFirstZonedDateTime(java.lang.String)",
            "public java.time.ZonedDateTime getFirstZonedDateTime(java.lang.String)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.getValuesAsList(java.lang.String)",
            "public java.util.List<java.lang.String> getValuesAsList(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.clearContentHeaders()",
            "public void clearContentHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.getFirst(java.lang.String)",
            "public java.lang.String getFirst(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.add(java.lang.String, java.lang.String)",
            "public void add(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.addAll(java.lang.String, java.util.List<? extends java.lang.String>)",
            "public void addAll(java.lang.String, java.util.List<? extends java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.set(java.lang.String, java.lang.String)",
            "public void set(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.setAll(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setAll(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.springframework.http.HttpHeaders.toSingleValueMap()",
            "public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap()"
        ],
        [
            "int",
            "org.springframework.http.HttpHeaders.size()",
            "public int size()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpHeaders.isEmpty()",
            "public boolean isEmpty()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpHeaders.containsKey(java.lang.Object)",
            "public boolean containsKey(java.lang.Object)"
        ],
        [
            "boolean",
            "org.springframework.http.HttpHeaders.containsValue(java.lang.Object)",
            "public boolean containsValue(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.get(java.lang.Object)",
            "public java.util.List<java.lang.String> get(java.lang.Object)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.put(java.lang.String, java.util.List<java.lang.String>)",
            "public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>)"
        ],
        [
            "java.util.List<java.lang.String>",
            "org.springframework.http.HttpHeaders.remove(java.lang.Object)",
            "public java.util.List<java.lang.String> remove(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)",
            "public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.clear()",
            "public void clear()"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.http.HttpHeaders.keySet()",
            "public java.util.Set<java.lang.String> keySet()"
        ],
        [
            "java.util.Collection<java.util.List<java.lang.String>>",
            "org.springframework.http.HttpHeaders.values()",
            "public java.util.Collection<java.util.List<java.lang.String>> values()"
        ],
        [
            "java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>>",
            "org.springframework.http.HttpHeaders.entrySet()",
            "public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpHeaders.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.HttpHeaders.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.HttpHeaders.readOnlyHttpHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public static org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.HttpHeaders.readOnlyHttpHeaders(org.springframework.http.HttpHeaders)",
            "public static org.springframework.http.HttpHeaders readOnlyHttpHeaders(org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.HttpHeaders.writableHttpHeaders(org.springframework.http.HttpHeaders)",
            "public static org.springframework.http.HttpHeaders writableHttpHeaders(org.springframework.http.HttpHeaders)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.formatHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)",
            "public static java.lang.String formatHeaders(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpHeaders.encodeBasicAuth(java.lang.String, java.lang.String, java.nio.charset.Charset)",
            "public static java.lang.String encodeBasicAuth(java.lang.String, java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.set(java.lang.Object, java.lang.Object)",
            "public void set(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.addAll(java.lang.Object, java.util.List)",
            "public void addAll(java.lang.Object, java.util.List)"
        ],
        [
            "void",
            "org.springframework.http.HttpHeaders.add(java.lang.Object, java.lang.Object)",
            "public void add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.HttpHeaders.getFirst(java.lang.Object)",
            "public java.lang.Object getFirst(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.HttpHeaders.remove(java.lang.Object)",
            "public java.lang.Object remove(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.HttpHeaders.put(java.lang.Object, java.lang.Object)",
            "public java.lang.Object put(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.HttpHeaders.get(java.lang.Object)",
            "public java.lang.Object get(java.lang.Object)"
        ],
        [
            "org.springframework.http.InvalidMediaTypeException",
            "org.springframework.http.InvalidMediaTypeException(java.lang.String, java.lang.String)",
            "public org.springframework.http.InvalidMediaTypeException(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.InvalidMediaTypeException.getMediaType()",
            "public java.lang.String getMediaType()"
        ],
        [
            "org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter",
            "org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter()",
            "public org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter",
            "org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)",
            "public org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "void",
            "org.springframework.http.converter.smile.MappingJackson2SmileHttpMessageConverter.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter",
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter()",
            "public org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter()"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.setSupportDtd(boolean)",
            "public void setSupportDtd(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.isSupportDtd()",
            "public boolean isSupportDtd()"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.setProcessExternalEntities(boolean)",
            "public void setProcessExternalEntities(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.isProcessExternalEntities()",
            "public boolean isProcessExternalEntities()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter$CountingOutputStream.write(int)",
            "public void write(int) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter$CountingOutputStream.write(byte[])",
            "public void write(byte[]) throws java.io.IOException"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter$CountingOutputStream.write(byte[], int, int)",
            "public void write(byte[], int, int) throws java.io.IOException"
        ],
        [
            "org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter",
            "org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter()",
            "public org.springframework.http.converter.xml.AbstractJaxb2HttpMessageConverter()"
        ],
        [
            "T",
            "org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter.readInternal(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage)",
            "public final T readInternal(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter",
            "org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter()",
            "public org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter",
            "org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)",
            "public org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "org.springframework.http.converter.xml.SourceHttpMessageConverter",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter()",
            "public org.springframework.http.converter.xml.SourceHttpMessageConverter()"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter.setSupportDtd(boolean)",
            "public void setSupportDtd(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter.isSupportDtd()",
            "public boolean isSupportDtd()"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter.setProcessExternalEntities(boolean)",
            "public void setProcessExternalEntities(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter.isProcessExternalEntities()",
            "public boolean isProcessExternalEntities()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.SourceHttpMessageConverter.supports(java.lang.Class<?>)",
            "public boolean supports(java.lang.Class<?>)"
        ],
        [
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter()",
            "public org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "T",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)",
            "public T read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.write(T, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public void write(T, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.write(java.lang.Object, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public void write(java.lang.Object, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.read(java.lang.reflect.Type, java.lang.Class, org.springframework.http.HttpInputMessage)",
            "public java.lang.Object read(java.lang.reflect.Type, java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter",
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter()",
            "public org.springframework.http.converter.xml.MarshallingHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter",
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter(org.springframework.oxm.Marshaller)",
            "public org.springframework.http.converter.xml.MarshallingHttpMessageConverter(org.springframework.oxm.Marshaller)"
        ],
        [
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter",
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter(org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller)",
            "public org.springframework.http.converter.xml.MarshallingHttpMessageConverter(org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller)"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter.setMarshaller(org.springframework.oxm.Marshaller)",
            "public void setMarshaller(org.springframework.oxm.Marshaller)"
        ],
        [
            "void",
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter.setUnmarshaller(org.springframework.oxm.Unmarshaller)",
            "public void setUnmarshaller(org.springframework.oxm.Unmarshaller)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.xml.MarshallingHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.AbstractGenericHttpMessageConverter.canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.AbstractGenericHttpMessageConverter.canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(T, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public final void write(T, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "org.springframework.http.converter.StringHttpMessageConverter",
            "org.springframework.http.converter.StringHttpMessageConverter()",
            "public org.springframework.http.converter.StringHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.StringHttpMessageConverter",
            "org.springframework.http.converter.StringHttpMessageConverter(java.nio.charset.Charset)",
            "public org.springframework.http.converter.StringHttpMessageConverter(java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.springframework.http.converter.StringHttpMessageConverter.setWriteAcceptCharset(boolean)",
            "public void setWriteAcceptCharset(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.StringHttpMessageConverter.supports(java.lang.Class<?>)",
            "public boolean supports(java.lang.Class<?>)"
        ],
        [
            "org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage",
            "org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage(java.io.OutputStream, java.nio.charset.Charset)",
            "public org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage(java.io.OutputStream, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.http.converter.FormHttpMessageConverter$MultipartHttpOutputMessage.getBody()",
            "public java.io.OutputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.converter.ResourceRegionHttpMessageConverter",
            "org.springframework.http.converter.ResourceRegionHttpMessageConverter()",
            "public org.springframework.http.converter.ResourceRegionHttpMessageConverter()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.ResourceRegionHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.ResourceRegionHttpMessageConverter.canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.ResourceRegionHttpMessageConverter.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)",
            "public java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "boolean",
            "org.springframework.http.converter.ResourceRegionHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.ResourceRegionHttpMessageConverter.canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.http.converter.AbstractHttpMessageConverter$1.getBody()",
            "public java.io.OutputStream getBody()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.converter.AbstractHttpMessageConverter$1.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter",
            "org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter()",
            "public org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter()"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.converter.HttpMessageConverter.getSupportedMediaTypes(java.lang.Class<?>)",
            "public default java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.converter.FormHttpMessageConverter$MimeDelegate.encode(java.lang.String, java.lang.String)",
            "public static java.lang.String encode(java.lang.String, java.lang.String)"
        ],
        [
            "org.springframework.http.converter.FormHttpMessageConverter",
            "org.springframework.http.converter.FormHttpMessageConverter()",
            "public org.springframework.http.converter.FormHttpMessageConverter()"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)",
            "public void setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.addSupportedMediaTypes(org.springframework.http.MediaType...)",
            "public void addSupportedMediaTypes(org.springframework.http.MediaType...)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.converter.FormHttpMessageConverter.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.setPartConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)",
            "public void setPartConverters(java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>)"
        ],
        [
            "java.util.List<org.springframework.http.converter.HttpMessageConverter<?>>",
            "org.springframework.http.converter.FormHttpMessageConverter.getPartConverters()",
            "public java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> getPartConverters()"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.addPartConverter(org.springframework.http.converter.HttpMessageConverter<?>)",
            "public void addPartConverter(org.springframework.http.converter.HttpMessageConverter<?>)"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.setCharset(java.nio.charset.Charset)",
            "public void setCharset(java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.setMultipartCharset(java.nio.charset.Charset)",
            "public void setMultipartCharset(java.nio.charset.Charset)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.FormHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.FormHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>",
            "org.springframework.http.converter.FormHttpMessageConverter.read(java.lang.Class<? extends org.springframework.util.MultiValueMap<java.lang.String, ?>>, org.springframework.http.HttpInputMessage)",
            "public org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> read(java.lang.Class<? extends org.springframework.util.MultiValueMap<java.lang.String, ?>>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.write(org.springframework.util.MultiValueMap<java.lang.String, ?>, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public void write(org.springframework.util.MultiValueMap<java.lang.String, ?>, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "void",
            "org.springframework.http.converter.FormHttpMessageConverter.write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public void write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.FormHttpMessageConverter.read(java.lang.Class, org.springframework.http.HttpInputMessage)",
            "public java.lang.Object read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "org.springframework.http.converter.BufferedImageHttpMessageConverter",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter()",
            "public org.springframework.http.converter.BufferedImageHttpMessageConverter()"
        ],
        [
            "void",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.setDefaultContentType(org.springframework.http.MediaType)",
            "public void setDefaultContentType(org.springframework.http.MediaType)"
        ],
        [
            "org.springframework.http.MediaType",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.getDefaultContentType()",
            "public org.springframework.http.MediaType getDefaultContentType()"
        ],
        [
            "void",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.setCacheDir(java.io.File)",
            "public void setCacheDir(java.io.File)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "java.awt.image.BufferedImage",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.read(java.lang.Class<? extends java.awt.image.BufferedImage>, org.springframework.http.HttpInputMessage)",
            "public java.awt.image.BufferedImage read(java.lang.Class<? extends java.awt.image.BufferedImage>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "void",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.write(java.awt.image.BufferedImage, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public void write(java.awt.image.BufferedImage, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "void",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public void write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.BufferedImageHttpMessageConverter.read(java.lang.Class, org.springframework.http.HttpInputMessage)",
            "public java.lang.Object read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "java.lang.String",
            "org.springframework.http.converter.ResourceHttpMessageConverter$1.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "long",
            "org.springframework.http.converter.ResourceHttpMessageConverter$1.contentLength()",
            "public long contentLength() throws java.io.IOException"
        ],
        [
            "org.springframework.http.converter.ObjectToStringHttpMessageConverter",
            "org.springframework.http.converter.ObjectToStringHttpMessageConverter(org.springframework.core.convert.ConversionService)",
            "public org.springframework.http.converter.ObjectToStringHttpMessageConverter(org.springframework.core.convert.ConversionService)"
        ],
        [
            "org.springframework.http.converter.ObjectToStringHttpMessageConverter",
            "org.springframework.http.converter.ObjectToStringHttpMessageConverter(org.springframework.core.convert.ConversionService, java.nio.charset.Charset)",
            "public org.springframework.http.converter.ObjectToStringHttpMessageConverter(org.springframework.core.convert.ConversionService, java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.springframework.http.converter.ObjectToStringHttpMessageConverter.setWriteAcceptCharset(boolean)",
            "public void setWriteAcceptCharset(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.ObjectToStringHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.ObjectToStringHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "java.io.OutputStream",
            "org.springframework.http.converter.AbstractGenericHttpMessageConverter$1.getBody()",
            "public java.io.OutputStream getBody()"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.converter.AbstractGenericHttpMessageConverter$1.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.converter.ResourceHttpMessageConverter$2.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "org.springframework.http.converter.ResourceHttpMessageConverter",
            "org.springframework.http.converter.ResourceHttpMessageConverter()",
            "public org.springframework.http.converter.ResourceHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.ResourceHttpMessageConverter",
            "org.springframework.http.converter.ResourceHttpMessageConverter(boolean)",
            "public org.springframework.http.converter.ResourceHttpMessageConverter(boolean)"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$CborFactoryInitializer.create()",
            "public com.fasterxml.jackson.core.JsonFactory create()"
        ],
        [
            "org.springframework.http.converter.json.AbstractJsonHttpMessageConverter",
            "org.springframework.http.converter.json.AbstractJsonHttpMessageConverter()",
            "public org.springframework.http.converter.json.AbstractJsonHttpMessageConverter()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.AbstractJsonHttpMessageConverter.setJsonPrefix(java.lang.String)",
            "public void setJsonPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.AbstractJsonHttpMessageConverter.setPrefixJson(boolean)",
            "public void setPrefixJson(boolean)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.json.AbstractJsonHttpMessageConverter.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)",
            "public final java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "com.google.gson.JsonElement",
            "org.springframework.http.converter.json.GsonBuilderUtils$Base64TypeAdapter.serialize(byte[], java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
            "public com.google.gson.JsonElement serialize(byte[], java.lang.reflect.Type, com.google.gson.JsonSerializationContext)"
        ],
        [
            "byte[]",
            "org.springframework.http.converter.json.GsonBuilderUtils$Base64TypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
            "public byte[] deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)"
        ],
        [
            "com.google.gson.JsonElement",
            "org.springframework.http.converter.json.GsonBuilderUtils$Base64TypeAdapter.serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)",
            "public com.google.gson.JsonElement serialize(java.lang.Object, java.lang.reflect.Type, com.google.gson.JsonSerializationContext)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.json.GsonBuilderUtils$Base64TypeAdapter.deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)",
            "public java.lang.Object deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext) throws com.google.gson.JsonParseException"
        ],
        [
            "org.springframework.http.converter.json.MappingJacksonValue",
            "org.springframework.http.converter.json.MappingJacksonValue(java.lang.Object)",
            "public org.springframework.http.converter.json.MappingJacksonValue(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.MappingJacksonValue.setValue(java.lang.Object)",
            "public void setValue(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.json.MappingJacksonValue.getValue()",
            "public java.lang.Object getValue()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.MappingJacksonValue.setSerializationView(java.lang.Class<?>)",
            "public void setSerializationView(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.http.converter.json.MappingJacksonValue.getSerializationView()",
            "public java.lang.Class<?> getSerializationView()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.MappingJacksonValue.setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)",
            "public void setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)"
        ],
        [
            "com.fasterxml.jackson.databind.ser.FilterProvider",
            "org.springframework.http.converter.json.MappingJacksonValue.getFilters()",
            "public com.fasterxml.jackson.databind.ser.FilterProvider getFilters()"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean()",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setCreateXmlMapper(boolean)",
            "public void setCreateXmlMapper(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setFactory(com.fasterxml.jackson.core.JsonFactory)",
            "public void setFactory(com.fasterxml.jackson.core.JsonFactory)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setDateFormat(java.text.DateFormat)",
            "public void setDateFormat(java.text.DateFormat)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setSimpleDateFormat(java.lang.String)",
            "public void setSimpleDateFormat(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setLocale(java.util.Locale)",
            "public void setLocale(java.util.Locale)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setTimeZone(java.util.TimeZone)",
            "public void setTimeZone(java.util.TimeZone)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
            "public void setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
            "public void setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setDefaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>)",
            "public void setDefaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)",
            "public void setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)",
            "public void setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setMixIns(java.util.Map<java.lang.Class<?>, java.lang.Class<?>>)",
            "public void setMixIns(java.util.Map<java.lang.Class<?>, java.lang.Class<?>>)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setSerializers(com.fasterxml.jackson.databind.JsonSerializer<?>...)",
            "public void setSerializers(com.fasterxml.jackson.databind.JsonSerializer<?>...)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setSerializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonSerializer<?>>)",
            "public void setSerializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonSerializer<?>>)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setDeserializers(com.fasterxml.jackson.databind.JsonDeserializer<?>...)",
            "public void setDeserializers(com.fasterxml.jackson.databind.JsonDeserializer<?>...)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setDeserializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonDeserializer<?>>)",
            "public void setDeserializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonDeserializer<?>>)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setAutoDetectFields(boolean)",
            "public void setAutoDetectFields(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setAutoDetectGettersSetters(boolean)",
            "public void setAutoDetectGettersSetters(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setDefaultViewInclusion(boolean)",
            "public void setDefaultViewInclusion(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setFailOnUnknownProperties(boolean)",
            "public void setFailOnUnknownProperties(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setFailOnEmptyBeans(boolean)",
            "public void setFailOnEmptyBeans(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setIndentOutput(boolean)",
            "public void setIndentOutput(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setDefaultUseWrapper(boolean)",
            "public void setDefaultUseWrapper(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setFeaturesToEnable(java.lang.Object...)",
            "public void setFeaturesToEnable(java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setFeaturesToDisable(java.lang.Object...)",
            "public void setFeaturesToDisable(java.lang.Object...)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setModules(java.util.List<com.fasterxml.jackson.databind.Module>)",
            "public void setModules(java.util.List<com.fasterxml.jackson.databind.Module>)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setModulesToInstall(java.lang.Class<? extends com.fasterxml.jackson.databind.Module>...)",
            "public final void setModulesToInstall(java.lang.Class<? extends com.fasterxml.jackson.databind.Module>...)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setFindModulesViaServiceLoader(boolean)",
            "public void setFindModulesViaServiceLoader(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
            "public void setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "com.fasterxml.jackson.databind.ObjectMapper",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.getObject()",
            "public com.fasterxml.jackson.databind.ObjectMapper getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.http.converter.json.MappingJacksonInputMessage",
            "org.springframework.http.converter.json.MappingJacksonInputMessage(java.io.InputStream, org.springframework.http.HttpHeaders)",
            "public org.springframework.http.converter.json.MappingJacksonInputMessage(java.io.InputStream, org.springframework.http.HttpHeaders)"
        ],
        [
            "org.springframework.http.converter.json.MappingJacksonInputMessage",
            "org.springframework.http.converter.json.MappingJacksonInputMessage(java.io.InputStream, org.springframework.http.HttpHeaders, java.lang.Class<?>)",
            "public org.springframework.http.converter.json.MappingJacksonInputMessage(java.io.InputStream, org.springframework.http.HttpHeaders, java.lang.Class<?>)"
        ],
        [
            "java.io.InputStream",
            "org.springframework.http.converter.json.MappingJacksonInputMessage.getBody()",
            "public java.io.InputStream getBody() throws java.io.IOException"
        ],
        [
            "org.springframework.http.HttpHeaders",
            "org.springframework.http.converter.json.MappingJacksonInputMessage.getHeaders()",
            "public org.springframework.http.HttpHeaders getHeaders()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.MappingJacksonInputMessage.setDeserializationView(java.lang.Class<?>)",
            "public void setDeserializationView(java.lang.Class<?>)"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.http.converter.json.MappingJacksonInputMessage.getDeserializationView()",
            "public java.lang.Class<?> getDeserializationView()"
        ],
        [
            "com.fasterxml.jackson.core.JsonFactory",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$SmileFactoryInitializer.create()",
            "public com.fasterxml.jackson.core.JsonFactory create()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "com.fasterxml.jackson.databind.ObjectMapper",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getObjectMapper()",
            "public com.fasterxml.jackson.databind.ObjectMapper getObjectMapper()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.registerObjectMappersForType(java.lang.Class<?>, java.util.function.Consumer<java.util.Map<org.springframework.http.MediaType, com.fasterxml.jackson.databind.ObjectMapper>>)",
            "public void registerObjectMappersForType(java.lang.Class<?>, java.util.function.Consumer<java.util.Map<org.springframework.http.MediaType, com.fasterxml.jackson.databind.ObjectMapper>>)"
        ],
        [
            "java.util.Map<org.springframework.http.MediaType, com.fasterxml.jackson.databind.ObjectMapper>",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getObjectMappersForType(java.lang.Class<?>)",
            "public java.util.Map<org.springframework.http.MediaType, com.fasterxml.jackson.databind.ObjectMapper> getObjectMappersForType(java.lang.Class<?>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getSupportedMediaTypes(java.lang.Class<?>)",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.setPrettyPrint(boolean)",
            "public void setPrettyPrint(boolean)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)",
            "public java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "org.springframework.http.converter.json.GsonHttpMessageConverter",
            "org.springframework.http.converter.json.GsonHttpMessageConverter()",
            "public org.springframework.http.converter.json.GsonHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.json.GsonHttpMessageConverter",
            "org.springframework.http.converter.json.GsonHttpMessageConverter(com.google.gson.Gson)",
            "public org.springframework.http.converter.json.GsonHttpMessageConverter(com.google.gson.Gson)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.GsonHttpMessageConverter.setGson(com.google.gson.Gson)",
            "public void setGson(com.google.gson.Gson)"
        ],
        [
            "com.google.gson.Gson",
            "org.springframework.http.converter.json.GsonHttpMessageConverter.getGson()",
            "public com.google.gson.Gson getGson()"
        ],
        [
            "com.fasterxml.jackson.databind.ObjectMapper",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$XmlObjectMapperInitializer.create(com.fasterxml.jackson.core.JsonFactory)",
            "public com.fasterxml.jackson.databind.ObjectMapper create(com.fasterxml.jackson.core.JsonFactory)"
        ],
        [
            "com.fasterxml.jackson.databind.ObjectMapper",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder$XmlObjectMapperInitializer.create(boolean, com.fasterxml.jackson.core.JsonFactory)",
            "public com.fasterxml.jackson.databind.ObjectMapper create(boolean, com.fasterxml.jackson.core.JsonFactory)"
        ],
        [
            "org.springframework.http.converter.json.GsonBuilderUtils",
            "org.springframework.http.converter.json.GsonBuilderUtils()",
            "public org.springframework.http.converter.json.GsonBuilderUtils()"
        ],
        [
            "com.google.gson.GsonBuilder",
            "org.springframework.http.converter.json.GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays()",
            "public static com.google.gson.GsonBuilder gsonBuilderWithBase64EncodedByteArrays()"
        ],
        [
            "org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter",
            "org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter()",
            "public org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter",
            "org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter(kotlinx.serialization.json.Json)",
            "public org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter(kotlinx.serialization.json.Json)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter.canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter.canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.json.KotlinSerializationJsonHttpMessageConverter.read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage)",
            "public final java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "org.springframework.http.converter.json.JsonbHttpMessageConverter",
            "org.springframework.http.converter.json.JsonbHttpMessageConverter()",
            "public org.springframework.http.converter.json.JsonbHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.json.JsonbHttpMessageConverter",
            "org.springframework.http.converter.json.JsonbHttpMessageConverter(javax.json.bind.JsonbConfig)",
            "public org.springframework.http.converter.json.JsonbHttpMessageConverter(javax.json.bind.JsonbConfig)"
        ],
        [
            "org.springframework.http.converter.json.JsonbHttpMessageConverter",
            "org.springframework.http.converter.json.JsonbHttpMessageConverter(javax.json.bind.Jsonb)",
            "public org.springframework.http.converter.json.JsonbHttpMessageConverter(javax.json.bind.Jsonb)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.JsonbHttpMessageConverter.setJsonb(javax.json.bind.Jsonb)",
            "public void setJsonb(javax.json.bind.Jsonb)"
        ],
        [
            "javax.json.bind.Jsonb",
            "org.springframework.http.converter.json.JsonbHttpMessageConverter.getJsonb()",
            "public javax.json.bind.Jsonb getJsonb()"
        ],
        [
            "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter",
            "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter()",
            "public org.springframework.http.converter.json.MappingJackson2HttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter",
            "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)",
            "public org.springframework.http.converter.json.MappingJackson2HttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.setJsonPrefix(java.lang.String)",
            "public void setJsonPrefix(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.setPrefixJson(boolean)",
            "public void setPrefixJson(boolean)"
        ],
        [
            "org.springframework.http.converter.json.GsonFactoryBean",
            "org.springframework.http.converter.json.GsonFactoryBean()",
            "public org.springframework.http.converter.json.GsonFactoryBean()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.GsonFactoryBean.setBase64EncodeByteArrays(boolean)",
            "public void setBase64EncodeByteArrays(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.GsonFactoryBean.setSerializeNulls(boolean)",
            "public void setSerializeNulls(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.GsonFactoryBean.setPrettyPrinting(boolean)",
            "public void setPrettyPrinting(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.GsonFactoryBean.setDisableHtmlEscaping(boolean)",
            "public void setDisableHtmlEscaping(boolean)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.GsonFactoryBean.setDateFormatPattern(java.lang.String)",
            "public void setDateFormatPattern(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.http.converter.json.GsonFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "com.google.gson.Gson",
            "org.springframework.http.converter.json.GsonFactoryBean.getObject()",
            "public com.google.gson.Gson getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.http.converter.json.GsonFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.json.GsonFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.json.GsonFactoryBean.getObject()",
            "public java.lang.Object getObject() throws java.lang.Exception"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder()",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder()"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.createXmlMapper(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder createXmlMapper(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.factory(com.fasterxml.jackson.core.JsonFactory)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder factory(com.fasterxml.jackson.core.JsonFactory)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.dateFormat(java.text.DateFormat)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder dateFormat(java.text.DateFormat)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.simpleDateFormat(java.lang.String)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder simpleDateFormat(java.lang.String)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.locale(java.util.Locale)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder locale(java.util.Locale)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.locale(java.lang.String)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder locale(java.lang.String)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.timeZone(java.util.TimeZone)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder timeZone(java.util.TimeZone)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.timeZone(java.lang.String)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder timeZone(java.lang.String)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.annotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder annotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.annotationIntrospector(java.util.function.Function<com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder annotationIntrospector(java.util.function.Function<com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.propertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder propertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.defaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder defaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.serializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder serializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Include)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.serializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Value)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder serializationInclusion(com.fasterxml.jackson.annotation.JsonInclude$Value)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.filters(com.fasterxml.jackson.databind.ser.FilterProvider)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder filters(com.fasterxml.jackson.databind.ser.FilterProvider)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.mixIn(java.lang.Class<?>, java.lang.Class<?>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder mixIn(java.lang.Class<?>, java.lang.Class<?>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.mixIns(java.util.Map<java.lang.Class<?>, java.lang.Class<?>>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder mixIns(java.util.Map<java.lang.Class<?>, java.lang.Class<?>>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.serializers(com.fasterxml.jackson.databind.JsonSerializer<?>...)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder serializers(com.fasterxml.jackson.databind.JsonSerializer<?>...)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.serializerByType(java.lang.Class<?>, com.fasterxml.jackson.databind.JsonSerializer<?>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder serializerByType(java.lang.Class<?>, com.fasterxml.jackson.databind.JsonSerializer<?>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.serializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonSerializer<?>>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder serializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonSerializer<?>>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.deserializers(com.fasterxml.jackson.databind.JsonDeserializer<?>...)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder deserializers(com.fasterxml.jackson.databind.JsonDeserializer<?>...)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.deserializerByType(java.lang.Class<?>, com.fasterxml.jackson.databind.JsonDeserializer<?>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder deserializerByType(java.lang.Class<?>, com.fasterxml.jackson.databind.JsonDeserializer<?>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.deserializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonDeserializer<?>>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder deserializersByType(java.util.Map<java.lang.Class<?>, com.fasterxml.jackson.databind.JsonDeserializer<?>>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.autoDetectFields(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder autoDetectFields(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.autoDetectGettersSetters(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder autoDetectGettersSetters(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.defaultViewInclusion(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder defaultViewInclusion(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.failOnUnknownProperties(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder failOnUnknownProperties(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.failOnEmptyBeans(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder failOnEmptyBeans(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.indentOutput(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder indentOutput(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.defaultUseWrapper(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder defaultUseWrapper(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.visibility(com.fasterxml.jackson.annotation.PropertyAccessor, com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder visibility(com.fasterxml.jackson.annotation.PropertyAccessor, com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.featuresToEnable(java.lang.Object...)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder featuresToEnable(java.lang.Object...)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.featuresToDisable(java.lang.Object...)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder featuresToDisable(java.lang.Object...)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.modules(com.fasterxml.jackson.databind.Module...)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder modules(com.fasterxml.jackson.databind.Module...)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.modules(java.util.List<com.fasterxml.jackson.databind.Module>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder modules(java.util.List<com.fasterxml.jackson.databind.Module>)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.modulesToInstall(com.fasterxml.jackson.databind.Module...)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder modulesToInstall(com.fasterxml.jackson.databind.Module...)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.modulesToInstall(java.lang.Class<? extends com.fasterxml.jackson.databind.Module>...)",
            "public final org.springframework.http.converter.json.Jackson2ObjectMapperBuilder modulesToInstall(java.lang.Class<? extends com.fasterxml.jackson.databind.Module>...)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.findModulesViaServiceLoader(boolean)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder findModulesViaServiceLoader(boolean)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.moduleClassLoader(java.lang.ClassLoader)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder moduleClassLoader(java.lang.ClassLoader)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.handlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder handlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.applicationContext(org.springframework.context.ApplicationContext)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder applicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.postConfigurer(java.util.function.Consumer<com.fasterxml.jackson.databind.ObjectMapper>)",
            "public org.springframework.http.converter.json.Jackson2ObjectMapperBuilder postConfigurer(java.util.function.Consumer<com.fasterxml.jackson.databind.ObjectMapper>)"
        ],
        [
            "<T extends com.fasterxml.jackson.databind.ObjectMapper> T",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.build()",
            "public <T extends com.fasterxml.jackson.databind.ObjectMapper> T build()"
        ],
        [
            "void",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.configure(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void configure(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.json()",
            "public static org.springframework.http.converter.json.Jackson2ObjectMapperBuilder json()"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.xml()",
            "public static org.springframework.http.converter.json.Jackson2ObjectMapperBuilder xml()"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.smile()",
            "public static org.springframework.http.converter.json.Jackson2ObjectMapperBuilder smile()"
        ],
        [
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder",
            "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.cbor()",
            "public static org.springframework.http.converter.json.Jackson2ObjectMapperBuilder cbor()"
        ],
        [
            "org.springframework.http.converter.json.SpringHandlerInstantiator",
            "org.springframework.http.converter.json.SpringHandlerInstantiator(org.springframework.beans.factory.config.AutowireCapableBeanFactory)",
            "public org.springframework.http.converter.json.SpringHandlerInstantiator(org.springframework.beans.factory.config.AutowireCapableBeanFactory)"
        ],
        [
            "com.fasterxml.jackson.databind.JsonDeserializer<?>",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.deserializerInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.JsonDeserializer<?> deserializerInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.KeyDeserializer",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.keyDeserializerInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.KeyDeserializer keyDeserializerInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.JsonSerializer<?>",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.serializerInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.JsonSerializer<?> serializerInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?>",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.typeResolverBuilderInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> typeResolverBuilderInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.jsontype.TypeIdResolver",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.typeIdResolverInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.jsontype.TypeIdResolver typeIdResolverInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.deser.ValueInstantiator",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.valueInstantiatorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiatorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.annotation.ObjectIdGenerator<?>",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.objectIdGeneratorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.annotation.ObjectIdGenerator<?> objectIdGeneratorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.annotation.ObjectIdResolver",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.resolverIdGeneratorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.annotation.ObjectIdResolver resolverIdGeneratorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.PropertyNamingStrategy",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.namingStrategyInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.PropertyNamingStrategy namingStrategyInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.util.Converter<?, ?>",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.converterInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.util.Converter<?, ?> converterInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class<?>)"
        ],
        [
            "com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter",
            "org.springframework.http.converter.json.SpringHandlerInstantiator.virtualPropertyWriterInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, java.lang.Class<?>)",
            "public com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter virtualPropertyWriterInstance(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, java.lang.Class<?>)"
        ],
        [
            "org.springframework.http.converter.feed.AtomFeedHttpMessageConverter",
            "org.springframework.http.converter.feed.AtomFeedHttpMessageConverter()",
            "public org.springframework.http.converter.feed.AtomFeedHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.feed.RssChannelHttpMessageConverter",
            "org.springframework.http.converter.feed.RssChannelHttpMessageConverter()",
            "public org.springframework.http.converter.feed.RssChannelHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter",
            "org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter()",
            "public org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter",
            "org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)",
            "public org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "void",
            "org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "org.springframework.http.converter.HttpMessageNotWritableException",
            "org.springframework.http.converter.HttpMessageNotWritableException(java.lang.String)",
            "public org.springframework.http.converter.HttpMessageNotWritableException(java.lang.String)"
        ],
        [
            "org.springframework.http.converter.HttpMessageNotWritableException",
            "org.springframework.http.converter.HttpMessageNotWritableException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.http.converter.HttpMessageNotWritableException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.http.converter.HttpMessageNotReadableException",
            "org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String)",
            "public org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String)"
        ],
        [
            "org.springframework.http.converter.HttpMessageNotReadableException",
            "org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.http.converter.HttpMessageNotReadableException",
            "org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String, org.springframework.http.HttpInputMessage)",
            "public org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String, org.springframework.http.HttpInputMessage)"
        ],
        [
            "org.springframework.http.converter.HttpMessageNotReadableException",
            "org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String, java.lang.Throwable, org.springframework.http.HttpInputMessage)",
            "public org.springframework.http.converter.HttpMessageNotReadableException(java.lang.String, java.lang.Throwable, org.springframework.http.HttpInputMessage)"
        ],
        [
            "org.springframework.http.HttpInputMessage",
            "org.springframework.http.converter.HttpMessageNotReadableException.getHttpInputMessage()",
            "public org.springframework.http.HttpInputMessage getHttpInputMessage()"
        ],
        [
            "org.springframework.http.converter.HttpMessageConversionException",
            "org.springframework.http.converter.HttpMessageConversionException(java.lang.String)",
            "public org.springframework.http.converter.HttpMessageConversionException(java.lang.String)"
        ],
        [
            "org.springframework.http.converter.HttpMessageConversionException",
            "org.springframework.http.converter.HttpMessageConversionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.http.converter.HttpMessageConversionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.http.converter.ByteArrayHttpMessageConverter",
            "org.springframework.http.converter.ByteArrayHttpMessageConverter()",
            "public org.springframework.http.converter.ByteArrayHttpMessageConverter()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.ByteArrayHttpMessageConverter.supports(java.lang.Class<?>)",
            "public boolean supports(java.lang.Class<?>)"
        ],
        [
            "byte[]",
            "org.springframework.http.converter.ByteArrayHttpMessageConverter.readInternal(java.lang.Class<? extends byte[]>, org.springframework.http.HttpInputMessage)",
            "public byte[] readInternal(java.lang.Class<? extends byte[]>, org.springframework.http.HttpInputMessage) throws java.io.IOException"
        ],
        [
            "java.lang.Object",
            "org.springframework.http.converter.ByteArrayHttpMessageConverter.readInternal(java.lang.Class, org.springframework.http.HttpInputMessage)",
            "public java.lang.Object readInternal(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter()",
            "public org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter(org.springframework.http.converter.protobuf.ExtensionRegistryInitializer)",
            "public org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter(org.springframework.http.converter.protobuf.ExtensionRegistryInitializer)"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter(com.google.protobuf.ExtensionRegistry)",
            "public org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter(com.google.protobuf.ExtensionRegistry)"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaUtilSupport",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaUtilSupport(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)",
            "public org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaUtilSupport(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)"
        ],
        [
            "org.springframework.http.MediaType[]",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaUtilSupport.supportedMediaTypes()",
            "public org.springframework.http.MediaType[] supportedMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaUtilSupport.supportsWriteOnly(org.springframework.http.MediaType)",
            "public boolean supportsWriteOnly(org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaUtilSupport.merge(java.io.InputStream, java.nio.charset.Charset, org.springframework.http.MediaType, com.google.protobuf.ExtensionRegistry, com.google.protobuf.Message$Builder)",
            "public void merge(java.io.InputStream, java.nio.charset.Charset, org.springframework.http.MediaType, com.google.protobuf.ExtensionRegistry, com.google.protobuf.Message$Builder) throws java.io.IOException, org.springframework.http.converter.HttpMessageConversionException"
        ],
        [
            "void",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaUtilSupport.print(com.google.protobuf.Message, java.io.OutputStream, org.springframework.http.MediaType, java.nio.charset.Charset)",
            "public void print(com.google.protobuf.Message, java.io.OutputStream, org.springframework.http.MediaType, java.nio.charset.Charset) throws java.io.IOException, org.springframework.http.converter.HttpMessageConversionException"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaFormatSupport",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaFormatSupport()",
            "public org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaFormatSupport()"
        ],
        [
            "org.springframework.http.MediaType[]",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaFormatSupport.supportedMediaTypes()",
            "public org.springframework.http.MediaType[] supportedMediaTypes()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaFormatSupport.supportsWriteOnly(org.springframework.http.MediaType)",
            "public boolean supportsWriteOnly(org.springframework.http.MediaType)"
        ],
        [
            "void",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaFormatSupport.merge(java.io.InputStream, java.nio.charset.Charset, org.springframework.http.MediaType, com.google.protobuf.ExtensionRegistry, com.google.protobuf.Message$Builder)",
            "public void merge(java.io.InputStream, java.nio.charset.Charset, org.springframework.http.MediaType, com.google.protobuf.ExtensionRegistry, com.google.protobuf.Message$Builder) throws java.io.IOException, org.springframework.http.converter.HttpMessageConversionException"
        ],
        [
            "void",
            "org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter$ProtobufJavaFormatSupport.print(com.google.protobuf.Message, java.io.OutputStream, org.springframework.http.MediaType, java.nio.charset.Charset)",
            "public void print(com.google.protobuf.Message, java.io.OutputStream, org.springframework.http.MediaType, java.nio.charset.Charset) throws java.io.IOException, org.springframework.http.converter.HttpMessageConversionException"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter",
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter()",
            "public org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter()"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter",
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)",
            "public org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer)"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter",
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer, com.google.protobuf.ExtensionRegistry)",
            "public org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer, com.google.protobuf.ExtensionRegistry)"
        ],
        [
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter",
            "org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer, org.springframework.http.converter.protobuf.ExtensionRegistryInitializer)",
            "public org.springframework.http.converter.protobuf.ProtobufJsonFormatHttpMessageConverter(com.google.protobuf.util.JsonFormat$Parser, com.google.protobuf.util.JsonFormat$Printer, org.springframework.http.converter.protobuf.ExtensionRegistryInitializer)"
        ],
        [
            "void",
            "org.springframework.http.converter.AbstractHttpMessageConverter.setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)",
            "public void setSupportedMediaTypes(java.util.List<org.springframework.http.MediaType>)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.converter.AbstractHttpMessageConverter.getSupportedMediaTypes()",
            "public java.util.List<org.springframework.http.MediaType> getSupportedMediaTypes()"
        ],
        [
            "void",
            "org.springframework.http.converter.AbstractHttpMessageConverter.setDefaultCharset(java.nio.charset.Charset)",
            "public void setDefaultCharset(java.nio.charset.Charset)"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.http.converter.AbstractHttpMessageConverter.getDefaultCharset()",
            "public java.nio.charset.Charset getDefaultCharset()"
        ],
        [
            "boolean",
            "org.springframework.http.converter.AbstractHttpMessageConverter.canRead(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "boolean",
            "org.springframework.http.converter.AbstractHttpMessageConverter.canWrite(java.lang.Class<?>, org.springframework.http.MediaType)",
            "public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType)"
        ],
        [
            "T",
            "org.springframework.http.converter.AbstractHttpMessageConverter.read(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage)",
            "public final T read(java.lang.Class<? extends T>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException"
        ],
        [
            "void",
            "org.springframework.http.converter.AbstractHttpMessageConverter.write(T, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage)",
            "public final void write(T, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException"
        ],
        [
            "default",
            "org.springframework.http.HttpRequest.org.springframework.http.HttpMethod getMethod()",
            "public default org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "org.springframework.http.HttpRange$ByteRange",
            "org.springframework.http.HttpRange$ByteRange(long, java.lang.Long)",
            "public org.springframework.http.HttpRange$ByteRange(long, java.lang.Long)"
        ],
        [
            "long",
            "org.springframework.http.HttpRange$ByteRange.getRangeStart(long)",
            "public long getRangeStart(long)"
        ],
        [
            "long",
            "org.springframework.http.HttpRange$ByteRange.getRangeEnd(long)",
            "public long getRangeEnd(long)"
        ],
        [
            "boolean",
            "org.springframework.http.HttpRange$ByteRange.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.HttpRange$ByteRange.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpRange$ByteRange.toString()",
            "public java.lang.String toString()"
        ],
        [
            "boolean",
            "org.springframework.http.ContentDisposition.isAttachment()",
            "public boolean isAttachment()"
        ],
        [
            "boolean",
            "org.springframework.http.ContentDisposition.isFormData()",
            "public boolean isFormData()"
        ],
        [
            "boolean",
            "org.springframework.http.ContentDisposition.isInline()",
            "public boolean isInline()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ContentDisposition.getType()",
            "public java.lang.String getType()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ContentDisposition.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ContentDisposition.getFilename()",
            "public java.lang.String getFilename()"
        ],
        [
            "java.nio.charset.Charset",
            "org.springframework.http.ContentDisposition.getCharset()",
            "public java.nio.charset.Charset getCharset()"
        ],
        [
            "java.lang.Long",
            "org.springframework.http.ContentDisposition.getSize()",
            "public java.lang.Long getSize()"
        ],
        [
            "java.time.ZonedDateTime",
            "org.springframework.http.ContentDisposition.getCreationDate()",
            "public java.time.ZonedDateTime getCreationDate()"
        ],
        [
            "java.time.ZonedDateTime",
            "org.springframework.http.ContentDisposition.getModificationDate()",
            "public java.time.ZonedDateTime getModificationDate()"
        ],
        [
            "java.time.ZonedDateTime",
            "org.springframework.http.ContentDisposition.getReadDate()",
            "public java.time.ZonedDateTime getReadDate()"
        ],
        [
            "boolean",
            "org.springframework.http.ContentDisposition.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.ContentDisposition.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.ContentDisposition.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition.attachment()",
            "public static org.springframework.http.ContentDisposition$Builder attachment()"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition.formData()",
            "public static org.springframework.http.ContentDisposition$Builder formData()"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition.inline()",
            "public static org.springframework.http.ContentDisposition$Builder inline()"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition.builder(java.lang.String)",
            "public static org.springframework.http.ContentDisposition$Builder builder(java.lang.String)"
        ],
        [
            "org.springframework.http.ContentDisposition",
            "org.springframework.http.ContentDisposition.empty()",
            "public static org.springframework.http.ContentDisposition empty()"
        ],
        [
            "org.springframework.http.ContentDisposition",
            "org.springframework.http.ContentDisposition.parse(java.lang.String)",
            "public static org.springframework.http.ContentDisposition parse(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpCookie",
            "org.springframework.http.HttpCookie(java.lang.String, java.lang.String)",
            "public org.springframework.http.HttpCookie(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpCookie.getName()",
            "public java.lang.String getName()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpCookie.getValue()",
            "public java.lang.String getValue()"
        ],
        [
            "int",
            "org.springframework.http.HttpCookie.hashCode()",
            "public int hashCode()"
        ],
        [
            "boolean",
            "org.springframework.http.HttpCookie.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.http.HttpCookie.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.HttpLogging",
            "org.springframework.http.HttpLogging()",
            "public org.springframework.http.HttpLogging()"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.http.HttpLogging.forLogName(java.lang.Class<?>)",
            "public static org.apache.commons.logging.Log forLogName(java.lang.Class<?>)"
        ],
        [
            "org.apache.commons.logging.Log",
            "org.springframework.http.HttpLogging.forLog(org.apache.commons.logging.Log)",
            "public static org.apache.commons.logging.Log forLog(org.apache.commons.logging.Log)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie$1.maxAge(java.time.Duration)",
            "public org.springframework.http.ResponseCookie$ResponseCookieBuilder maxAge(java.time.Duration)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie$1.maxAge(long)",
            "public org.springframework.http.ResponseCookie$ResponseCookieBuilder maxAge(long)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie$1.domain(java.lang.String)",
            "public org.springframework.http.ResponseCookie$ResponseCookieBuilder domain(java.lang.String)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie$1.path(java.lang.String)",
            "public org.springframework.http.ResponseCookie$ResponseCookieBuilder path(java.lang.String)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie$1.secure(boolean)",
            "public org.springframework.http.ResponseCookie$ResponseCookieBuilder secure(boolean)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie$1.httpOnly(boolean)",
            "public org.springframework.http.ResponseCookie$ResponseCookieBuilder httpOnly(boolean)"
        ],
        [
            "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
            "org.springframework.http.ResponseCookie$1.sameSite(java.lang.String)",
            "public org.springframework.http.ResponseCookie$ResponseCookieBuilder sameSite(java.lang.String)"
        ],
        [
            "org.springframework.http.ResponseCookie",
            "org.springframework.http.ResponseCookie$1.build()",
            "public org.springframework.http.ResponseCookie build()"
        ],
        [
            "java.util.Optional<org.springframework.http.MediaType>",
            "org.springframework.http.MediaTypeFactory.getMediaType(org.springframework.core.io.Resource)",
            "public static java.util.Optional<org.springframework.http.MediaType> getMediaType(org.springframework.core.io.Resource)"
        ],
        [
            "java.util.Optional<org.springframework.http.MediaType>",
            "org.springframework.http.MediaTypeFactory.getMediaType(java.lang.String)",
            "public static java.util.Optional<org.springframework.http.MediaType> getMediaType(java.lang.String)"
        ],
        [
            "java.util.List<org.springframework.http.MediaType>",
            "org.springframework.http.MediaTypeFactory.getMediaTypes(java.lang.String)",
            "public static java.util.List<org.springframework.http.MediaType> getMediaTypes(java.lang.String)"
        ],
        [
            "org.springframework.http.HttpStatus$Series[]",
            "org.springframework.http.HttpStatus$Series.values()",
            "public static org.springframework.http.HttpStatus$Series[] values()"
        ],
        [
            "org.springframework.http.HttpStatus$Series",
            "org.springframework.http.HttpStatus$Series.valueOf(java.lang.String)",
            "public static org.springframework.http.HttpStatus$Series valueOf(java.lang.String)"
        ],
        [
            "int",
            "org.springframework.http.HttpStatus$Series.value()",
            "public int value()"
        ],
        [
            "org.springframework.http.HttpStatus$Series",
            "org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus)",
            "public static org.springframework.http.HttpStatus$Series valueOf(org.springframework.http.HttpStatus)"
        ],
        [
            "org.springframework.http.HttpStatus$Series",
            "org.springframework.http.HttpStatus$Series.valueOf(int)",
            "public static org.springframework.http.HttpStatus$Series valueOf(int)"
        ],
        [
            "org.springframework.http.HttpStatus$Series",
            "org.springframework.http.HttpStatus$Series.resolve(int)",
            "public static org.springframework.http.HttpStatus$Series resolve(int)"
        ],
        [
            "org.springframework.http.ContentDisposition$BuilderImpl",
            "org.springframework.http.ContentDisposition$BuilderImpl(java.lang.String)",
            "public org.springframework.http.ContentDisposition$BuilderImpl(java.lang.String)"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition$BuilderImpl.name(java.lang.String)",
            "public org.springframework.http.ContentDisposition$Builder name(java.lang.String)"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition$BuilderImpl.filename(java.lang.String)",
            "public org.springframework.http.ContentDisposition$Builder filename(java.lang.String)"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition$BuilderImpl.filename(java.lang.String, java.nio.charset.Charset)",
            "public org.springframework.http.ContentDisposition$Builder filename(java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition$BuilderImpl.size(java.lang.Long)",
            "public org.springframework.http.ContentDisposition$Builder size(java.lang.Long)"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition$BuilderImpl.creationDate(java.time.ZonedDateTime)",
            "public org.springframework.http.ContentDisposition$Builder creationDate(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition$BuilderImpl.modificationDate(java.time.ZonedDateTime)",
            "public org.springframework.http.ContentDisposition$Builder modificationDate(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.http.ContentDisposition$Builder",
            "org.springframework.http.ContentDisposition$BuilderImpl.readDate(java.time.ZonedDateTime)",
            "public org.springframework.http.ContentDisposition$Builder readDate(java.time.ZonedDateTime)"
        ],
        [
            "org.springframework.http.ContentDisposition",
            "org.springframework.http.ContentDisposition$BuilderImpl.build()",
            "public org.springframework.http.ContentDisposition build()"
        ],
        [
            "org.springframework.http.RequestEntity",
            "org.springframework.http.RequestEntity(org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.http.RequestEntity(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity",
            "org.springframework.http.RequestEntity(T, org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.http.RequestEntity(T, org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity",
            "org.springframework.http.RequestEntity(T, org.springframework.http.HttpMethod, java.net.URI, java.lang.reflect.Type)",
            "public org.springframework.http.RequestEntity(T, org.springframework.http.HttpMethod, java.net.URI, java.lang.reflect.Type)"
        ],
        [
            "org.springframework.http.RequestEntity",
            "org.springframework.http.RequestEntity(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.http.RequestEntity(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity",
            "org.springframework.http.RequestEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpMethod, java.net.URI)",
            "public org.springframework.http.RequestEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity",
            "org.springframework.http.RequestEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpMethod, java.net.URI, java.lang.reflect.Type)",
            "public org.springframework.http.RequestEntity(T, org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, org.springframework.http.HttpMethod, java.net.URI, java.lang.reflect.Type)"
        ],
        [
            "org.springframework.http.HttpMethod",
            "org.springframework.http.RequestEntity.getMethod()",
            "public org.springframework.http.HttpMethod getMethod()"
        ],
        [
            "java.net.URI",
            "org.springframework.http.RequestEntity.getUrl()",
            "public java.net.URI getUrl()"
        ],
        [
            "java.lang.reflect.Type",
            "org.springframework.http.RequestEntity.getType()",
            "public java.lang.reflect.Type getType()"
        ],
        [
            "boolean",
            "org.springframework.http.RequestEntity.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.http.RequestEntity.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.http.RequestEntity.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.method(org.springframework.http.HttpMethod, java.net.URI)",
            "public static org.springframework.http.RequestEntity$BodyBuilder method(org.springframework.http.HttpMethod, java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.method(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$BodyBuilder method(org.springframework.http.HttpMethod, java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.method(org.springframework.http.HttpMethod, java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public static org.springframework.http.RequestEntity$BodyBuilder method(org.springframework.http.HttpMethod, java.lang.String, java.util.Map<java.lang.String, ?>)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.get(java.net.URI)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> get(java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.get(java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> get(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.head(java.net.URI)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> head(java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.head(java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> head(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.post(java.net.URI)",
            "public static org.springframework.http.RequestEntity$BodyBuilder post(java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.post(java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$BodyBuilder post(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.put(java.net.URI)",
            "public static org.springframework.http.RequestEntity$BodyBuilder put(java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.put(java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$BodyBuilder put(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.patch(java.net.URI)",
            "public static org.springframework.http.RequestEntity$BodyBuilder patch(java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$BodyBuilder",
            "org.springframework.http.RequestEntity.patch(java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$BodyBuilder patch(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.delete(java.net.URI)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> delete(java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.delete(java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> delete(java.lang.String, java.lang.Object...)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.options(java.net.URI)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> options(java.net.URI)"
        ],
        [
            "org.springframework.http.RequestEntity$HeadersBuilder<?>",
            "org.springframework.http.RequestEntity.options(java.lang.String, java.lang.Object...)",
            "public static org.springframework.http.RequestEntity$HeadersBuilder<?> options(java.lang.String, java.lang.Object...)"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.getForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object...)",
            "public static final <T> T getForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.getForObject(org.springframework.web.client.RestOperations, java.lang.String, java.util.Map<java.lang.String, ? extends java.lang.Object>)",
            "public static final <T> T getForObject(org.springframework.web.client.RestOperations, java.lang.String, java.util.Map<java.lang.String, ? extends java.lang.Object>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.getForObject(org.springframework.web.client.RestOperations, java.net.URI)",
            "public static final <T> T getForObject(org.springframework.web.client.RestOperations, java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.getForEntity(org.springframework.web.client.RestOperations, java.net.URI)",
            "public static final <T> org.springframework.http.ResponseEntity<T> getForEntity(org.springframework.web.client.RestOperations, java.net.URI) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.getForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object...)",
            "public static final <T> org.springframework.http.ResponseEntity<T> getForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.getForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.util.Map<java.lang.String, ?>)",
            "public static final <T> org.springframework.http.ResponseEntity<T> getForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.patchForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object...)",
            "public static final <T> T patchForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestOperationsExtensionsKt.patchForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object[], int, java.lang.Object)",
            "public static java.lang.Object patchForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object[], int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.patchForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>)",
            "public static final <T> T patchForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestOperationsExtensionsKt.patchForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map, int, java.lang.Object)",
            "public static java.lang.Object patchForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.patchForObject(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object)",
            "public static final <T> T patchForObject(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestOperationsExtensionsKt.patchForObject$default(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object, int, java.lang.Object)",
            "public static java.lang.Object patchForObject$default(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object...)",
            "public static final <T> T postForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object[], int, java.lang.Object)",
            "public static java.lang.Object postForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object[], int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>)",
            "public static final <T> T postForObject(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map, int, java.lang.Object)",
            "public static java.lang.Object postForObject$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> T",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForObject(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object)",
            "public static final <T> T postForObject(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "java.lang.Object",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForObject$default(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object, int, java.lang.Object)",
            "public static java.lang.Object postForObject$default(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object...)",
            "public static final <T> org.springframework.http.ResponseEntity<T> postForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForEntity$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object[], int, java.lang.Object)",
            "public static org.springframework.http.ResponseEntity postForEntity$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.lang.Object[], int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>)",
            "public static final <T> org.springframework.http.ResponseEntity<T> postForEntity(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForEntity$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map, int, java.lang.Object)",
            "public static org.springframework.http.ResponseEntity postForEntity$default(org.springframework.web.client.RestOperations, java.lang.String, java.lang.Object, java.util.Map, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForEntity(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object)",
            "public static final <T> org.springframework.http.ResponseEntity<T> postForEntity(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.web.client.RestOperationsExtensionsKt.postForEntity$default(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object, int, java.lang.Object)",
            "public static org.springframework.http.ResponseEntity postForEntity$default(org.springframework.web.client.RestOperations, java.net.URI, java.lang.Object, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.exchange(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Object...)",
            "public static final <T> org.springframework.http.ResponseEntity<T> exchange(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.lang.Object...) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.web.client.RestOperationsExtensionsKt.exchange$default(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.lang.Object[], int, java.lang.Object)",
            "public static org.springframework.http.ResponseEntity exchange$default(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.lang.Object[], int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.exchange(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.util.Map<java.lang.String, ?>)",
            "public static final <T> org.springframework.http.ResponseEntity<T> exchange(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>, java.util.Map<java.lang.String, ?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.web.client.RestOperationsExtensionsKt.exchange$default(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.util.Map, int, java.lang.Object)",
            "public static org.springframework.http.ResponseEntity exchange$default(org.springframework.web.client.RestOperations, java.lang.String, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, java.util.Map, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.exchange(org.springframework.web.client.RestOperations, java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>)",
            "public static final <T> org.springframework.http.ResponseEntity<T> exchange(org.springframework.web.client.RestOperations, java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity<?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.http.ResponseEntity",
            "org.springframework.web.client.RestOperationsExtensionsKt.exchange$default(org.springframework.web.client.RestOperations, java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, int, java.lang.Object)",
            "public static org.springframework.http.ResponseEntity exchange$default(org.springframework.web.client.RestOperations, java.net.URI, org.springframework.http.HttpMethod, org.springframework.http.HttpEntity, int, java.lang.Object) throws org.springframework.web.client.RestClientException"
        ],
        [
            "<T> org.springframework.http.ResponseEntity<T>",
            "org.springframework.web.client.RestOperationsExtensionsKt.exchange(org.springframework.web.client.RestOperations, org.springframework.http.RequestEntity<?>)",
            "public static final <T> org.springframework.http.ResponseEntity<T> exchange(org.springframework.web.client.RestOperations, org.springframework.http.RequestEntity<?>) throws org.springframework.web.client.RestClientException"
        ],
        [
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$3",
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$3()",
            "public org.springframework.web.client.RestOperationsExtensionsKt$exchange$3()"
        ],
        [
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$2",
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$2()",
            "public org.springframework.web.client.RestOperationsExtensionsKt$exchange$2()"
        ],
        [
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$4",
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$4()",
            "public org.springframework.web.client.RestOperationsExtensionsKt$exchange$4()"
        ],
        [
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$1",
            "org.springframework.web.client.RestOperationsExtensionsKt$exchange$1()",
            "public org.springframework.web.client.RestOperationsExtensionsKt$exchange$1()"
        ]
    ]
}