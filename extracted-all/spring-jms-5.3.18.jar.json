{
    "spring-jms-5.3.18.jar": [
        [
            "org.springframework.jms.core.JmsMessagingTemplate",
            "org.springframework.jms.core.JmsMessagingTemplate()",
            "public org.springframework.jms.core.JmsMessagingTemplate()"
        ],
        [
            "org.springframework.jms.core.JmsMessagingTemplate",
            "org.springframework.jms.core.JmsMessagingTemplate(javax.jms.ConnectionFactory)",
            "public org.springframework.jms.core.JmsMessagingTemplate(javax.jms.ConnectionFactory)"
        ],
        [
            "org.springframework.jms.core.JmsMessagingTemplate",
            "org.springframework.jms.core.JmsMessagingTemplate(org.springframework.jms.core.JmsTemplate)",
            "public org.springframework.jms.core.JmsMessagingTemplate(org.springframework.jms.core.JmsTemplate)"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.setConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.ConnectionFactory",
            "org.springframework.jms.core.JmsMessagingTemplate.getConnectionFactory()",
            "public javax.jms.ConnectionFactory getConnectionFactory()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.setJmsTemplate(org.springframework.jms.core.JmsTemplate)",
            "public void setJmsTemplate(org.springframework.jms.core.JmsTemplate)"
        ],
        [
            "org.springframework.jms.core.JmsTemplate",
            "org.springframework.jms.core.JmsMessagingTemplate.getJmsTemplate()",
            "public org.springframework.jms.core.JmsTemplate getJmsTemplate()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.setJmsMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setJmsMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "org.springframework.jms.support.converter.MessageConverter",
            "org.springframework.jms.core.JmsMessagingTemplate.getJmsMessageConverter()",
            "public org.springframework.jms.support.converter.MessageConverter getJmsMessageConverter()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.setDefaultDestinationName(java.lang.String)",
            "public void setDefaultDestinationName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.core.JmsMessagingTemplate.getDefaultDestinationName()",
            "public java.lang.String getDefaultDestinationName()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.send(org.springframework.messaging.Message<?>)",
            "public void send(org.springframework.messaging.Message<?>)"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.convertAndSend(java.lang.Object)",
            "public void convertAndSend(java.lang.Object) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.convertAndSend(java.lang.Object, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSend(java.lang.Object, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.send(java.lang.String, org.springframework.messaging.Message<?>)",
            "public void send(java.lang.String, org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.convertAndSend(java.lang.String, java.lang.Object)",
            "public void convertAndSend(java.lang.String, java.lang.Object) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.convertAndSend(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>)",
            "public void convertAndSend(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.convertAndSend(java.lang.String, java.lang.Object, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSend(java.lang.String, java.lang.Object, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsMessagingTemplate.convertAndSend(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor)",
            "public void convertAndSend(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.jms.core.JmsMessagingTemplate.receive()",
            "public org.springframework.messaging.Message<?> receive()"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.receiveAndConvert(java.lang.Class<T>)",
            "public <T> T receiveAndConvert(java.lang.Class<T>)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.jms.core.JmsMessagingTemplate.receive(java.lang.String)",
            "public org.springframework.messaging.Message<?> receive(java.lang.String) throws org.springframework.messaging.MessagingException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.receiveAndConvert(java.lang.String, java.lang.Class<T>)",
            "public <T> T receiveAndConvert(java.lang.String, java.lang.Class<T>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.jms.core.JmsMessagingTemplate.sendAndReceive(org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.Message<?> sendAndReceive(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.messaging.Message<?>",
            "org.springframework.jms.core.JmsMessagingTemplate.sendAndReceive(java.lang.String, org.springframework.messaging.Message<?>)",
            "public org.springframework.messaging.Message<?> sendAndReceive(java.lang.String, org.springframework.messaging.Message<?>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.convertSendAndReceive(java.lang.Object, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(java.lang.Object, java.lang.Class<T>)"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>) throws org.springframework.messaging.MessagingException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.convertSendAndReceive(java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor) throws org.springframework.messaging.MessagingException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsMessagingTemplate.convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)",
            "public <T> T convertSendAndReceive(java.lang.String, java.lang.Object, java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class<T>, org.springframework.messaging.core.MessagePostProcessor)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.core.JmsTemplate$JmsTemplateResourceFactory.getConnection(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.core.JmsTemplate$JmsTemplateResourceFactory.getSession(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Session getSession(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.core.JmsTemplate$JmsTemplateResourceFactory.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.core.JmsTemplate$JmsTemplateResourceFactory.createSession(javax.jms.Connection)",
            "public javax.jms.Session createSession(javax.jms.Connection) throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.core.JmsTemplate$JmsTemplateResourceFactory.isSynchedLocalTransactionAllowed()",
            "public boolean isSynchedLocalTransactionAllowed()"
        ],
        [
            "org.springframework.jms.core.support.JmsGatewaySupport",
            "org.springframework.jms.core.support.JmsGatewaySupport()",
            "public org.springframework.jms.core.support.JmsGatewaySupport()"
        ],
        [
            "void",
            "org.springframework.jms.core.support.JmsGatewaySupport.setConnectionFactory(javax.jms.ConnectionFactory)",
            "public final void setConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.ConnectionFactory",
            "org.springframework.jms.core.support.JmsGatewaySupport.getConnectionFactory()",
            "public final javax.jms.ConnectionFactory getConnectionFactory()"
        ],
        [
            "void",
            "org.springframework.jms.core.support.JmsGatewaySupport.setJmsTemplate(org.springframework.jms.core.JmsTemplate)",
            "public final void setJmsTemplate(org.springframework.jms.core.JmsTemplate)"
        ],
        [
            "org.springframework.jms.core.JmsTemplate",
            "org.springframework.jms.core.support.JmsGatewaySupport.getJmsTemplate()",
            "public final org.springframework.jms.core.JmsTemplate getJmsTemplate()"
        ],
        [
            "void",
            "org.springframework.jms.core.support.JmsGatewaySupport.afterPropertiesSet()",
            "public final void afterPropertiesSet() throws java.lang.IllegalArgumentException, org.springframework.beans.factory.BeanInitializationException"
        ],
        [
            "org.springframework.jms.core.JmsMessagingTemplate$MessagingMessageCreator",
            "org.springframework.jms.core.JmsMessagingTemplate$MessagingMessageCreator(org.springframework.messaging.Message<?>, org.springframework.jms.support.converter.MessageConverter)",
            "public org.springframework.jms.core.JmsMessagingTemplate$MessagingMessageCreator(org.springframework.messaging.Message<?>, org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsMessagingTemplate$MessagingMessageCreator.createMessage(javax.jms.Session)",
            "public javax.jms.Message createMessage(javax.jms.Session) throws javax.jms.JMSException"
        ],
        [
            "org.springframework.jms.core.JmsTemplate",
            "org.springframework.jms.core.JmsTemplate()",
            "public org.springframework.jms.core.JmsTemplate()"
        ],
        [
            "org.springframework.jms.core.JmsTemplate",
            "org.springframework.jms.core.JmsTemplate(javax.jms.ConnectionFactory)",
            "public org.springframework.jms.core.JmsTemplate(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setDefaultDestination(javax.jms.Destination)",
            "public void setDefaultDestination(javax.jms.Destination)"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.core.JmsTemplate.getDefaultDestination()",
            "public javax.jms.Destination getDefaultDestination()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setDefaultDestinationName(java.lang.String)",
            "public void setDefaultDestinationName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.core.JmsTemplate.getDefaultDestinationName()",
            "public java.lang.String getDefaultDestinationName()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "org.springframework.jms.support.converter.MessageConverter",
            "org.springframework.jms.core.JmsTemplate.getMessageConverter()",
            "public org.springframework.jms.support.converter.MessageConverter getMessageConverter()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setMessageIdEnabled(boolean)",
            "public void setMessageIdEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.core.JmsTemplate.isMessageIdEnabled()",
            "public boolean isMessageIdEnabled()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setMessageTimestampEnabled(boolean)",
            "public void setMessageTimestampEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.core.JmsTemplate.isMessageTimestampEnabled()",
            "public boolean isMessageTimestampEnabled()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setPubSubNoLocal(boolean)",
            "public void setPubSubNoLocal(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.core.JmsTemplate.isPubSubNoLocal()",
            "public boolean isPubSubNoLocal()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setReceiveTimeout(long)",
            "public void setReceiveTimeout(long)"
        ],
        [
            "long",
            "org.springframework.jms.core.JmsTemplate.getReceiveTimeout()",
            "public long getReceiveTimeout()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setDeliveryDelay(long)",
            "public void setDeliveryDelay(long)"
        ],
        [
            "long",
            "org.springframework.jms.core.JmsTemplate.getDeliveryDelay()",
            "public long getDeliveryDelay()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setExplicitQosEnabled(boolean)",
            "public void setExplicitQosEnabled(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.core.JmsTemplate.isExplicitQosEnabled()",
            "public boolean isExplicitQosEnabled()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setQosSettings(org.springframework.jms.support.QosSettings)",
            "public void setQosSettings(org.springframework.jms.support.QosSettings)"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setDeliveryPersistent(boolean)",
            "public void setDeliveryPersistent(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setDeliveryMode(int)",
            "public void setDeliveryMode(int)"
        ],
        [
            "int",
            "org.springframework.jms.core.JmsTemplate.getDeliveryMode()",
            "public int getDeliveryMode()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setPriority(int)",
            "public void setPriority(int)"
        ],
        [
            "int",
            "org.springframework.jms.core.JmsTemplate.getPriority()",
            "public int getPriority()"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.setTimeToLive(long)",
            "public void setTimeToLive(long)"
        ],
        [
            "long",
            "org.springframework.jms.core.JmsTemplate.getTimeToLive()",
            "public long getTimeToLive()"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.execute(org.springframework.jms.core.SessionCallback<T>)",
            "public <T> T execute(org.springframework.jms.core.SessionCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.execute(org.springframework.jms.core.SessionCallback<T>, boolean)",
            "public <T> T execute(org.springframework.jms.core.SessionCallback<T>, boolean) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.execute(org.springframework.jms.core.ProducerCallback<T>)",
            "public <T> T execute(org.springframework.jms.core.ProducerCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.execute(javax.jms.Destination, org.springframework.jms.core.ProducerCallback<T>)",
            "public <T> T execute(javax.jms.Destination, org.springframework.jms.core.ProducerCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.execute(java.lang.String, org.springframework.jms.core.ProducerCallback<T>)",
            "public <T> T execute(java.lang.String, org.springframework.jms.core.ProducerCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.send(org.springframework.jms.core.MessageCreator)",
            "public void send(org.springframework.jms.core.MessageCreator) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.send(javax.jms.Destination, org.springframework.jms.core.MessageCreator)",
            "public void send(javax.jms.Destination, org.springframework.jms.core.MessageCreator) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.send(java.lang.String, org.springframework.jms.core.MessageCreator)",
            "public void send(java.lang.String, org.springframework.jms.core.MessageCreator) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.convertAndSend(java.lang.Object)",
            "public void convertAndSend(java.lang.Object) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.convertAndSend(javax.jms.Destination, java.lang.Object)",
            "public void convertAndSend(javax.jms.Destination, java.lang.Object) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.convertAndSend(java.lang.String, java.lang.Object)",
            "public void convertAndSend(java.lang.String, java.lang.Object) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.convertAndSend(java.lang.Object, org.springframework.jms.core.MessagePostProcessor)",
            "public void convertAndSend(java.lang.Object, org.springframework.jms.core.MessagePostProcessor) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.convertAndSend(javax.jms.Destination, java.lang.Object, org.springframework.jms.core.MessagePostProcessor)",
            "public void convertAndSend(javax.jms.Destination, java.lang.Object, org.springframework.jms.core.MessagePostProcessor) throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.core.JmsTemplate.convertAndSend(java.lang.String, java.lang.Object, org.springframework.jms.core.MessagePostProcessor)",
            "public void convertAndSend(java.lang.String, java.lang.Object, org.springframework.jms.core.MessagePostProcessor) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.receive()",
            "public javax.jms.Message receive() throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.receive(javax.jms.Destination)",
            "public javax.jms.Message receive(javax.jms.Destination) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.receive(java.lang.String)",
            "public javax.jms.Message receive(java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.receiveSelected(java.lang.String)",
            "public javax.jms.Message receiveSelected(java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.receiveSelected(javax.jms.Destination, java.lang.String)",
            "public javax.jms.Message receiveSelected(javax.jms.Destination, java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.receiveSelected(java.lang.String, java.lang.String)",
            "public javax.jms.Message receiveSelected(java.lang.String, java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.core.JmsTemplate.receiveAndConvert()",
            "public java.lang.Object receiveAndConvert() throws org.springframework.jms.JmsException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.core.JmsTemplate.receiveAndConvert(javax.jms.Destination)",
            "public java.lang.Object receiveAndConvert(javax.jms.Destination) throws org.springframework.jms.JmsException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.core.JmsTemplate.receiveAndConvert(java.lang.String)",
            "public java.lang.Object receiveAndConvert(java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(java.lang.String)",
            "public java.lang.Object receiveSelectedAndConvert(java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(javax.jms.Destination, java.lang.String)",
            "public java.lang.Object receiveSelectedAndConvert(javax.jms.Destination, java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.core.JmsTemplate.receiveSelectedAndConvert(java.lang.String, java.lang.String)",
            "public java.lang.Object receiveSelectedAndConvert(java.lang.String, java.lang.String) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.sendAndReceive(org.springframework.jms.core.MessageCreator)",
            "public javax.jms.Message sendAndReceive(org.springframework.jms.core.MessageCreator) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.sendAndReceive(javax.jms.Destination, org.springframework.jms.core.MessageCreator)",
            "public javax.jms.Message sendAndReceive(javax.jms.Destination, org.springframework.jms.core.MessageCreator) throws org.springframework.jms.JmsException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.core.JmsTemplate.sendAndReceive(java.lang.String, org.springframework.jms.core.MessageCreator)",
            "public javax.jms.Message sendAndReceive(java.lang.String, org.springframework.jms.core.MessageCreator) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.browse(org.springframework.jms.core.BrowserCallback<T>)",
            "public <T> T browse(org.springframework.jms.core.BrowserCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.browse(javax.jms.Queue, org.springframework.jms.core.BrowserCallback<T>)",
            "public <T> T browse(javax.jms.Queue, org.springframework.jms.core.BrowserCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.browse(java.lang.String, org.springframework.jms.core.BrowserCallback<T>)",
            "public <T> T browse(java.lang.String, org.springframework.jms.core.BrowserCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.browseSelected(java.lang.String, org.springframework.jms.core.BrowserCallback<T>)",
            "public <T> T browseSelected(java.lang.String, org.springframework.jms.core.BrowserCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.browseSelected(javax.jms.Queue, java.lang.String, org.springframework.jms.core.BrowserCallback<T>)",
            "public <T> T browseSelected(javax.jms.Queue, java.lang.String, org.springframework.jms.core.BrowserCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "<T> T",
            "org.springframework.jms.core.JmsTemplate.browseSelected(java.lang.String, java.lang.String, org.springframework.jms.core.BrowserCallback<T>)",
            "public <T> T browseSelected(java.lang.String, java.lang.String, org.springframework.jms.core.BrowserCallback<T>) throws org.springframework.jms.JmsException"
        ],
        [
            "org.springframework.jms.MessageNotWriteableException",
            "org.springframework.jms.MessageNotWriteableException(javax.jms.MessageNotWriteableException)",
            "public org.springframework.jms.MessageNotWriteableException(javax.jms.MessageNotWriteableException)"
        ],
        [
            "org.springframework.jms.InvalidDestinationException",
            "org.springframework.jms.InvalidDestinationException(javax.jms.InvalidDestinationException)",
            "public org.springframework.jms.InvalidDestinationException(javax.jms.InvalidDestinationException)"
        ],
        [
            "org.springframework.jms.ResourceAllocationException",
            "org.springframework.jms.ResourceAllocationException(javax.jms.ResourceAllocationException)",
            "public org.springframework.jms.ResourceAllocationException(javax.jms.ResourceAllocationException)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer$MessageListenerContainerResourceFactory.getConnection(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer$MessageListenerContainerResourceFactory.getSession(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Session getSession(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer$MessageListenerContainerResourceFactory.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer$MessageListenerContainerResourceFactory.createSession(javax.jms.Connection)",
            "public javax.jms.Session createSession(javax.jms.Connection) throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer$MessageListenerContainerResourceFactory.isSynchedLocalTransactionAllowed()",
            "public boolean isSynchedLocalTransactionAllowed()"
        ],
        [
            "org.springframework.jms.listener.LocallyExposedJmsResourceHolder",
            "org.springframework.jms.listener.LocallyExposedJmsResourceHolder(javax.jms.Session)",
            "public org.springframework.jms.listener.LocallyExposedJmsResourceHolder(javax.jms.Session)"
        ],
        [
            "org.springframework.jms.listener.DefaultMessageListenerContainer",
            "org.springframework.jms.listener.DefaultMessageListenerContainer()",
            "public org.springframework.jms.listener.DefaultMessageListenerContainer()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setTaskExecutor(java.util.concurrent.Executor)",
            "public void setTaskExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setBackOff(org.springframework.util.backoff.BackOff)",
            "public void setBackOff(org.springframework.util.backoff.BackOff)"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setRecoveryInterval(long)",
            "public void setRecoveryInterval(long)"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setCacheLevelName(java.lang.String)",
            "public void setCacheLevelName(java.lang.String) throws java.lang.IllegalArgumentException"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setCacheLevel(int)",
            "public void setCacheLevel(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getCacheLevel()",
            "public int getCacheLevel()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setConcurrency(java.lang.String)",
            "public void setConcurrency(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setConcurrentConsumers(int)",
            "public void setConcurrentConsumers(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getConcurrentConsumers()",
            "public final int getConcurrentConsumers()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setMaxConcurrentConsumers(int)",
            "public void setMaxConcurrentConsumers(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getMaxConcurrentConsumers()",
            "public final int getMaxConcurrentConsumers()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setMaxMessagesPerTask(int)",
            "public void setMaxMessagesPerTask(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getMaxMessagesPerTask()",
            "public final int getMaxMessagesPerTask()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setIdleConsumerLimit(int)",
            "public void setIdleConsumerLimit(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getIdleConsumerLimit()",
            "public final int getIdleConsumerLimit()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setIdleTaskExecutionLimit(int)",
            "public void setIdleTaskExecutionLimit(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getIdleTaskExecutionLimit()",
            "public final int getIdleTaskExecutionLimit()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.setIdleReceivesPerTaskLimit(int)",
            "public void setIdleReceivesPerTaskLimit(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getIdleReceivesPerTaskLimit()",
            "public int getIdleReceivesPerTaskLimit()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.initialize()",
            "public void initialize()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.start()",
            "public void start() throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.stop(java.lang.Runnable)",
            "public void stop(java.lang.Runnable) throws org.springframework.jms.JmsException"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getScheduledConsumerCount()",
            "public final int getScheduledConsumerCount()"
        ],
        [
            "int",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.getActiveConsumerCount()",
            "public final int getActiveConsumerCount()"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.isRegisteredWithDestination()",
            "public boolean isRegisteredWithDestination()"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.DefaultMessageListenerContainer.isRecovering()",
            "public final boolean isRecovering()"
        ],
        [
            "org.springframework.jms.listener.AbstractMessageListenerContainer",
            "org.springframework.jms.listener.AbstractMessageListenerContainer()",
            "public org.springframework.jms.listener.AbstractMessageListenerContainer()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setDestination(javax.jms.Destination)",
            "public void setDestination(javax.jms.Destination)"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getDestination()",
            "public javax.jms.Destination getDestination()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setDestinationName(java.lang.String)",
            "public void setDestinationName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getDestinationName()",
            "public java.lang.String getDestinationName()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setMessageSelector(java.lang.String)",
            "public void setMessageSelector(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getMessageSelector()",
            "public java.lang.String getMessageSelector()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setMessageListener(java.lang.Object)",
            "public void setMessageListener(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getMessageListener()",
            "public java.lang.Object getMessageListener()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setSubscriptionDurable(boolean)",
            "public void setSubscriptionDurable(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.isSubscriptionDurable()",
            "public boolean isSubscriptionDurable()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setSubscriptionShared(boolean)",
            "public void setSubscriptionShared(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.isSubscriptionShared()",
            "public boolean isSubscriptionShared()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setSubscriptionName(java.lang.String)",
            "public void setSubscriptionName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getSubscriptionName()",
            "public java.lang.String getSubscriptionName()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setDurableSubscriptionName(java.lang.String)",
            "public void setDurableSubscriptionName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getDurableSubscriptionName()",
            "public java.lang.String getDurableSubscriptionName()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setPubSubNoLocal(boolean)",
            "public void setPubSubNoLocal(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.isPubSubNoLocal()",
            "public boolean isPubSubNoLocal()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setReplyPubSubDomain(boolean)",
            "public void setReplyPubSubDomain(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.isReplyPubSubDomain()",
            "public boolean isReplyPubSubDomain()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setReplyQosSettings(org.springframework.jms.support.QosSettings)",
            "public void setReplyQosSettings(org.springframework.jms.support.QosSettings)"
        ],
        [
            "org.springframework.jms.support.QosSettings",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getReplyQosSettings()",
            "public org.springframework.jms.support.QosSettings getReplyQosSettings()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "org.springframework.jms.support.converter.MessageConverter",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getMessageConverter()",
            "public org.springframework.jms.support.converter.MessageConverter getMessageConverter()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setExceptionListener(javax.jms.ExceptionListener)",
            "public void setExceptionListener(javax.jms.ExceptionListener)"
        ],
        [
            "javax.jms.ExceptionListener",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getExceptionListener()",
            "public javax.jms.ExceptionListener getExceptionListener()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setErrorHandler(org.springframework.util.ErrorHandler)",
            "public void setErrorHandler(org.springframework.util.ErrorHandler)"
        ],
        [
            "org.springframework.util.ErrorHandler",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.getErrorHandler()",
            "public org.springframework.util.ErrorHandler getErrorHandler()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setExposeListenerSession(boolean)",
            "public void setExposeListenerSession(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.isExposeListenerSession()",
            "public boolean isExposeListenerSession()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setAcceptMessagesWhileStopping(boolean)",
            "public void setAcceptMessagesWhileStopping(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.isAcceptMessagesWhileStopping()",
            "public boolean isAcceptMessagesWhileStopping()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractMessageListenerContainer.setupMessageListener(java.lang.Object)",
            "public void setupMessageListener(java.lang.Object)"
        ],
        [
            "org.springframework.jms.listener.SimpleMessageListenerContainer",
            "org.springframework.jms.listener.SimpleMessageListenerContainer()",
            "public org.springframework.jms.listener.SimpleMessageListenerContainer()"
        ],
        [
            "void",
            "org.springframework.jms.listener.SimpleMessageListenerContainer.setConnectLazily(boolean)",
            "public void setConnectLazily(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.listener.SimpleMessageListenerContainer.setRecoverOnException(boolean)",
            "public void setRecoverOnException(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.listener.SimpleMessageListenerContainer.setConcurrency(java.lang.String)",
            "public void setConcurrency(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.SimpleMessageListenerContainer.setConcurrentConsumers(int)",
            "public void setConcurrentConsumers(int)"
        ],
        [
            "void",
            "org.springframework.jms.listener.SimpleMessageListenerContainer.setTaskExecutor(java.util.concurrent.Executor)",
            "public void setTaskExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.jms.listener.SimpleMessageListenerContainer.onException(javax.jms.JMSException)",
            "public void onException(javax.jms.JMSException)"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run()",
            "public void run()"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.isLongLived()",
            "public boolean isLongLived()"
        ],
        [
            "void",
            "org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.setIdle(boolean)",
            "public void setIdle(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.isIdle()",
            "public boolean isIdle()"
        ],
        [
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager()",
            "public org.springframework.jms.listener.endpoint.JmsMessageEndpointManager()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.setMessageListener(javax.jms.MessageListener)",
            "public void setMessageListener(javax.jms.MessageListener)"
        ],
        [
            "javax.jms.MessageListener",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.getMessageListener()",
            "public javax.jms.MessageListener getMessageListener()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.setTransactionManager(java.lang.Object)",
            "public void setTransactionManager(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.setActivationSpecFactory(org.springframework.jms.listener.endpoint.JmsActivationSpecFactory)",
            "public void setActivationSpecFactory(org.springframework.jms.listener.endpoint.JmsActivationSpecFactory)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.setActivationSpecConfig(org.springframework.jms.listener.endpoint.JmsActivationSpecConfig)",
            "public void setActivationSpecConfig(org.springframework.jms.listener.endpoint.JmsActivationSpecConfig)"
        ],
        [
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.getActivationSpecConfig()",
            "public org.springframework.jms.listener.endpoint.JmsActivationSpecConfig getActivationSpecConfig()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.afterPropertiesSet()",
            "public void afterPropertiesSet() throws javax.resource.ResourceException"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.setupMessageListener(java.lang.Object)",
            "public void setupMessageListener(java.lang.Object)"
        ],
        [
            "org.springframework.jms.support.converter.MessageConverter",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.getMessageConverter()",
            "public org.springframework.jms.support.converter.MessageConverter getMessageConverter()"
        ],
        [
            "org.springframework.jms.support.destination.DestinationResolver",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.getDestinationResolver()",
            "public org.springframework.jms.support.destination.DestinationResolver getDestinationResolver()"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.isPubSubDomain()",
            "public boolean isPubSubDomain()"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.isReplyPubSubDomain()",
            "public boolean isReplyPubSubDomain()"
        ],
        [
            "org.springframework.jms.support.QosSettings",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager.getReplyQosSettings()",
            "public org.springframework.jms.support.QosSettings getReplyQosSettings()"
        ],
        [
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory$JmsResourceException",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory$JmsResourceException(javax.resource.ResourceException)",
            "public org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory$JmsResourceException(javax.resource.ResourceException)"
        ],
        [
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory()",
            "public org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory.setMessageListener(javax.jms.MessageListener)",
            "public void setMessageListener(javax.jms.MessageListener)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointFactory$JmsMessageEndpoint.onMessage(javax.jms.Message)",
            "public void onMessage(javax.jms.Message)"
        ],
        [
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig()",
            "public org.springframework.jms.listener.endpoint.JmsActivationSpecConfig()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setDestinationName(java.lang.String)",
            "public void setDestinationName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getDestinationName()",
            "public java.lang.String getDestinationName()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setPubSubDomain(boolean)",
            "public void setPubSubDomain(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.isPubSubDomain()",
            "public boolean isPubSubDomain()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setReplyPubSubDomain(boolean)",
            "public void setReplyPubSubDomain(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.isReplyPubSubDomain()",
            "public boolean isReplyPubSubDomain()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setReplyQosSettings(org.springframework.jms.support.QosSettings)",
            "public void setReplyQosSettings(org.springframework.jms.support.QosSettings)"
        ],
        [
            "org.springframework.jms.support.QosSettings",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getReplyQosSettings()",
            "public org.springframework.jms.support.QosSettings getReplyQosSettings()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setSubscriptionDurable(boolean)",
            "public void setSubscriptionDurable(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.isSubscriptionDurable()",
            "public boolean isSubscriptionDurable()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setSubscriptionShared(boolean)",
            "public void setSubscriptionShared(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.isSubscriptionShared()",
            "public boolean isSubscriptionShared()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setSubscriptionName(java.lang.String)",
            "public void setSubscriptionName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getSubscriptionName()",
            "public java.lang.String getSubscriptionName()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setDurableSubscriptionName(java.lang.String)",
            "public void setDurableSubscriptionName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getDurableSubscriptionName()",
            "public java.lang.String getDurableSubscriptionName()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setClientId(java.lang.String)",
            "public void setClientId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getClientId()",
            "public java.lang.String getClientId()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setMessageSelector(java.lang.String)",
            "public void setMessageSelector(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getMessageSelector()",
            "public java.lang.String getMessageSelector()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setAcknowledgeModeName(java.lang.String)",
            "public void setAcknowledgeModeName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setAcknowledgeMode(int)",
            "public void setAcknowledgeMode(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getAcknowledgeMode()",
            "public int getAcknowledgeMode()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setConcurrency(java.lang.String)",
            "public void setConcurrency(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setMaxConcurrency(int)",
            "public void setMaxConcurrency(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getMaxConcurrency()",
            "public int getMaxConcurrency()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setPrefetchSize(int)",
            "public void setPrefetchSize(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getPrefetchSize()",
            "public int getPrefetchSize()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.setMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "org.springframework.jms.support.converter.MessageConverter",
            "org.springframework.jms.listener.endpoint.JmsActivationSpecConfig.getMessageConverter()",
            "public org.springframework.jms.support.converter.MessageConverter getMessageConverter()"
        ],
        [
            "org.springframework.jms.listener.endpoint.DefaultJmsActivationSpecFactory",
            "org.springframework.jms.listener.endpoint.DefaultJmsActivationSpecFactory()",
            "public org.springframework.jms.listener.endpoint.DefaultJmsActivationSpecFactory()"
        ],
        [
            "org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory",
            "org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory()",
            "public org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory()"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory.setActivationSpecClass(java.lang.Class<?>)",
            "public void setActivationSpecClass(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory.setDefaultProperties(java.util.Map<java.lang.String, java.lang.String>)",
            "public void setDefaultProperties(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory.setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "org.springframework.jms.support.destination.DestinationResolver",
            "org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory.getDestinationResolver()",
            "public org.springframework.jms.support.destination.DestinationResolver getDestinationResolver()"
        ],
        [
            "javax.resource.spi.ActivationSpec",
            "org.springframework.jms.listener.endpoint.StandardJmsActivationSpecFactory.createActivationSpec(javax.resource.spi.ResourceAdapter, org.springframework.jms.listener.endpoint.JmsActivationSpecConfig)",
            "public javax.resource.spi.ActivationSpec createActivationSpec(javax.resource.spi.ResourceAdapter, org.springframework.jms.listener.endpoint.JmsActivationSpecConfig)"
        ],
        [
            "org.springframework.jms.listener.AbstractJmsListeningContainer",
            "org.springframework.jms.listener.AbstractJmsListeningContainer()",
            "public org.springframework.jms.listener.AbstractJmsListeningContainer()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.setClientId(java.lang.String)",
            "public void setClientId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.getClientId()",
            "public java.lang.String getClientId()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.setAutoStartup(boolean)",
            "public void setAutoStartup(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.isAutoStartup()",
            "public boolean isAutoStartup()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.setPhase(int)",
            "public void setPhase(int)"
        ],
        [
            "int",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.getPhase()",
            "public int getPhase()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.setBeanName(java.lang.String)",
            "public void setBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.initialize()",
            "public void initialize() throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown()",
            "public void shutdown() throws org.springframework.jms.JmsException"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.isActive()",
            "public final boolean isActive()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.start()",
            "public void start() throws org.springframework.jms.JmsException"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.stop()",
            "public void stop() throws org.springframework.jms.JmsException"
        ],
        [
            "boolean",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.isRunning()",
            "public final boolean isRunning()"
        ],
        [
            "int",
            "org.springframework.jms.listener.AbstractJmsListeningContainer.getPausedTaskCount()",
            "public int getPausedTaskCount()"
        ],
        [
            "org.springframework.jms.listener.adapter.ListenerExecutionFailedException",
            "org.springframework.jms.listener.adapter.ListenerExecutionFailedException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jms.listener.adapter.ListenerExecutionFailedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jms.listener.adapter.JmsResponse$DestinationNameHolder",
            "org.springframework.jms.listener.adapter.JmsResponse$DestinationNameHolder(java.lang.String, boolean)",
            "public org.springframework.jms.listener.adapter.JmsResponse$DestinationNameHolder(java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.adapter.JmsResponse$DestinationNameHolder.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter",
            "org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter()",
            "public org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter()"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.setHandlerMethod(org.springframework.messaging.handler.invocation.InvocableHandlerMethod)",
            "public void setHandlerMethod(org.springframework.messaging.handler.invocation.InvocableHandlerMethod)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter.onMessage(javax.jms.Message, javax.jms.Session)",
            "public void onMessage(javax.jms.Message, javax.jms.Session) throws javax.jms.JMSException"
        ],
        [
            "org.springframework.jms.listener.adapter.ReplyFailureException",
            "org.springframework.jms.listener.adapter.ReplyFailureException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jms.listener.adapter.ReplyFailureException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jms.listener.adapter.MessageListenerAdapter",
            "org.springframework.jms.listener.adapter.MessageListenerAdapter()",
            "public org.springframework.jms.listener.adapter.MessageListenerAdapter()"
        ],
        [
            "org.springframework.jms.listener.adapter.MessageListenerAdapter",
            "org.springframework.jms.listener.adapter.MessageListenerAdapter(java.lang.Object)",
            "public org.springframework.jms.listener.adapter.MessageListenerAdapter(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.MessageListenerAdapter.setDelegate(java.lang.Object)",
            "public void setDelegate(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.MessageListenerAdapter.setDefaultListenerMethod(java.lang.String)",
            "public void setDefaultListenerMethod(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.MessageListenerAdapter.onMessage(javax.jms.Message, javax.jms.Session)",
            "public void onMessage(javax.jms.Message, javax.jms.Session) throws javax.jms.JMSException"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.adapter.MessageListenerAdapter.getSubscriptionName()",
            "public java.lang.String getSubscriptionName()"
        ],
        [
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$DestinationNameHolder",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$DestinationNameHolder(java.lang.String, boolean)",
            "public org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$DestinationNameHolder(java.lang.String, boolean)"
        ],
        [
            "T",
            "org.springframework.jms.listener.adapter.JmsResponse.getResponse()",
            "public T getResponse()"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.listener.adapter.JmsResponse.resolveDestination(org.springframework.jms.support.destination.DestinationResolver, javax.jms.Session)",
            "public javax.jms.Destination resolveDestination(org.springframework.jms.support.destination.DestinationResolver, javax.jms.Session) throws javax.jms.JMSException"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.listener.adapter.JmsResponse.toString()",
            "public java.lang.String toString()"
        ],
        [
            "<T> org.springframework.jms.listener.adapter.JmsResponse<T>",
            "org.springframework.jms.listener.adapter.JmsResponse.forQueue(T, java.lang.String)",
            "public static <T> org.springframework.jms.listener.adapter.JmsResponse<T> forQueue(T, java.lang.String)"
        ],
        [
            "<T> org.springframework.jms.listener.adapter.JmsResponse<T>",
            "org.springframework.jms.listener.adapter.JmsResponse.forTopic(T, java.lang.String)",
            "public static <T> org.springframework.jms.listener.adapter.JmsResponse<T> forTopic(T, java.lang.String)"
        ],
        [
            "<T> org.springframework.jms.listener.adapter.JmsResponse<T>",
            "org.springframework.jms.listener.adapter.JmsResponse.forDestination(T, javax.jms.Destination)",
            "public static <T> org.springframework.jms.listener.adapter.JmsResponse<T> forDestination(T, javax.jms.Destination)"
        ],
        [
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener()",
            "public org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener()"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.setDefaultResponseDestination(javax.jms.Destination)",
            "public void setDefaultResponseDestination(javax.jms.Destination)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.setDefaultResponseQueueName(java.lang.String)",
            "public void setDefaultResponseQueueName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.setDefaultResponseTopicName(java.lang.String)",
            "public void setDefaultResponseTopicName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.setMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.setHeaderMapper(org.springframework.jms.support.JmsHeaderMapper)",
            "public void setHeaderMapper(org.springframework.jms.support.JmsHeaderMapper)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.setResponseQosSettings(org.springframework.jms.support.QosSettings)",
            "public void setResponseQosSettings(org.springframework.jms.support.QosSettings)"
        ],
        [
            "void",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener.onMessage(javax.jms.Message)",
            "public void onMessage(javax.jms.Message)"
        ],
        [
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter$LazyResolutionMessage",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter$LazyResolutionMessage(org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter, javax.jms.Message)",
            "public org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter$LazyResolutionMessage(org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter, javax.jms.Message)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter$LazyResolutionMessage.getPayload()",
            "public java.lang.Object getPayload()"
        ],
        [
            "org.springframework.messaging.MessageHeaders",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter$LazyResolutionMessage.getHeaders()",
            "public org.springframework.messaging.MessageHeaders getHeaders()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.listener.adapter.AbstractAdaptableMessageListener$MessagingMessageConverterAdapter.fromMessage(javax.jms.Message)",
            "public java.lang.Object fromMessage(javax.jms.Message) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer()",
            "public org.springframework.jms.listener.AbstractPollingMessageListenerContainer()"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer.setSessionTransacted(boolean)",
            "public void setSessionTransacted(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer.setTransactionManager(org.springframework.transaction.PlatformTransactionManager)",
            "public void setTransactionManager(org.springframework.transaction.PlatformTransactionManager)"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer.setTransactionName(java.lang.String)",
            "public void setTransactionName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer.setTransactionTimeout(int)",
            "public void setTransactionTimeout(int)"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer.setReceiveTimeout(long)",
            "public void setReceiveTimeout(long)"
        ],
        [
            "void",
            "org.springframework.jms.listener.AbstractPollingMessageListenerContainer.initialize()",
            "public void initialize()"
        ],
        [
            "org.springframework.jms.config.JmsListenerEndpointRegistry",
            "org.springframework.jms.config.JmsListenerEndpointRegistry()",
            "public org.springframework.jms.config.JmsListenerEndpointRegistry()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.setApplicationContext(org.springframework.context.ApplicationContext)",
            "public void setApplicationContext(org.springframework.context.ApplicationContext)"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)",
            "public void onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)"
        ],
        [
            "org.springframework.jms.listener.MessageListenerContainer",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.getListenerContainer(java.lang.String)",
            "public org.springframework.jms.listener.MessageListenerContainer getListenerContainer(java.lang.String)"
        ],
        [
            "java.util.Set<java.lang.String>",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.getListenerContainerIds()",
            "public java.util.Set<java.lang.String> getListenerContainerIds()"
        ],
        [
            "java.util.Collection<org.springframework.jms.listener.MessageListenerContainer>",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.getListenerContainers()",
            "public java.util.Collection<org.springframework.jms.listener.MessageListenerContainer> getListenerContainers()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.registerListenerContainer(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>, boolean)",
            "public void registerListenerContainer(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>, boolean)"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.registerListenerContainer(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>)",
            "public void registerListenerContainer(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>)"
        ],
        [
            "int",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.getPhase()",
            "public int getPhase()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.start()",
            "public void start()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.stop()",
            "public void stop()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.stop(java.lang.Runnable)",
            "public void stop(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.isRunning()",
            "public boolean isRunning()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry.onApplicationEvent(org.springframework.context.ApplicationEvent)",
            "public void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ],
        [
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory()",
            "public org.springframework.jms.config.DefaultJcaListenerContainerFactory()"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory.setResourceAdapter(javax.resource.spi.ResourceAdapter)",
            "public void setResourceAdapter(javax.resource.spi.ResourceAdapter)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory.setActivationSpecFactory(org.springframework.jms.listener.endpoint.JmsActivationSpecFactory)",
            "public void setActivationSpecFactory(org.springframework.jms.listener.endpoint.JmsActivationSpecFactory)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory.setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory.setTransactionManager(java.lang.Object)",
            "public void setTransactionManager(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory.setPhase(int)",
            "public void setPhase(int)"
        ],
        [
            "org.springframework.jms.listener.endpoint.JmsMessageEndpointManager",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory.createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)",
            "public org.springframework.jms.listener.endpoint.JmsMessageEndpointManager createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)"
        ],
        [
            "org.springframework.jms.listener.MessageListenerContainer",
            "org.springframework.jms.config.DefaultJcaListenerContainerFactory.createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)",
            "public org.springframework.jms.listener.MessageListenerContainer createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)"
        ],
        [
            "org.springframework.jms.config.JmsListenerEndpointRegistrar",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar()",
            "public org.springframework.jms.config.JmsListenerEndpointRegistrar()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.setEndpointRegistry(org.springframework.jms.config.JmsListenerEndpointRegistry)",
            "public void setEndpointRegistry(org.springframework.jms.config.JmsListenerEndpointRegistry)"
        ],
        [
            "org.springframework.jms.config.JmsListenerEndpointRegistry",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.getEndpointRegistry()",
            "public org.springframework.jms.config.JmsListenerEndpointRegistry getEndpointRegistry()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)",
            "public void setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)"
        ],
        [
            "org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.getMessageHandlerMethodFactory()",
            "public org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory getMessageHandlerMethodFactory()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.setContainerFactory(org.springframework.jms.config.JmsListenerContainerFactory<?>)",
            "public void setContainerFactory(org.springframework.jms.config.JmsListenerContainerFactory<?>)"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.setContainerFactoryBeanName(java.lang.String)",
            "public void setContainerFactoryBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.registerEndpoint(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>)",
            "public void registerEndpoint(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>)"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar.registerEndpoint(org.springframework.jms.config.JmsListenerEndpoint)",
            "public void registerEndpoint(org.springframework.jms.config.JmsListenerEndpoint)"
        ],
        [
            "org.springframework.jms.config.SimpleJmsListenerContainerFactory",
            "org.springframework.jms.config.SimpleJmsListenerContainerFactory()",
            "public org.springframework.jms.config.SimpleJmsListenerContainerFactory()"
        ],
        [
            "org.springframework.jms.config.JmsListenerEndpointRegistrar$JmsListenerEndpointDescriptor",
            "org.springframework.jms.config.JmsListenerEndpointRegistrar$JmsListenerEndpointDescriptor(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>)",
            "public org.springframework.jms.config.JmsListenerEndpointRegistrar$JmsListenerEndpointDescriptor(org.springframework.jms.config.JmsListenerEndpoint, org.springframework.jms.config.JmsListenerContainerFactory<?>)"
        ],
        [
            "org.springframework.jms.config.AbstractJmsListenerEndpoint",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint()",
            "public org.springframework.jms.config.AbstractJmsListenerEndpoint()"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.setId(java.lang.String)",
            "public void setId(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.getId()",
            "public java.lang.String getId()"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.setDestination(java.lang.String)",
            "public void setDestination(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.getDestination()",
            "public java.lang.String getDestination()"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.setSubscription(java.lang.String)",
            "public void setSubscription(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.getSubscription()",
            "public java.lang.String getSubscription()"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.setSelector(java.lang.String)",
            "public void setSelector(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.getSelector()",
            "public java.lang.String getSelector()"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.setConcurrency(java.lang.String)",
            "public void setConcurrency(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.getConcurrency()",
            "public java.lang.String getConcurrency()"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.setupListenerContainer(org.springframework.jms.listener.MessageListenerContainer)",
            "public void setupListenerContainer(org.springframework.jms.listener.MessageListenerContainer)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jms.config.MethodJmsListenerEndpoint",
            "org.springframework.jms.config.MethodJmsListenerEndpoint()",
            "public org.springframework.jms.config.MethodJmsListenerEndpoint()"
        ],
        [
            "void",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.setBean(java.lang.Object)",
            "public void setBean(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.getBean()",
            "public java.lang.Object getBean()"
        ],
        [
            "void",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.setMethod(java.lang.reflect.Method)",
            "public void setMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.getMethod()",
            "public java.lang.reflect.Method getMethod()"
        ],
        [
            "void",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.setMostSpecificMethod(java.lang.reflect.Method)",
            "public void setMostSpecificMethod(java.lang.reflect.Method)"
        ],
        [
            "java.lang.reflect.Method",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.getMostSpecificMethod()",
            "public java.lang.reflect.Method getMostSpecificMethod()"
        ],
        [
            "void",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)",
            "public void setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)"
        ],
        [
            "void",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.setEmbeddedValueResolver(org.springframework.util.StringValueResolver)",
            "public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)"
        ],
        [
            "void",
            "org.springframework.jms.config.MethodJmsListenerEndpoint.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "org.springframework.jms.config.JmsNamespaceHandler",
            "org.springframework.jms.config.JmsNamespaceHandler()",
            "public org.springframework.jms.config.JmsNamespaceHandler()"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsNamespaceHandler.init()",
            "public void init()"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.jms.config.AnnotationDrivenJmsBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerEndpoint$JcaEndpointConfigurer.configureEndpoint(java.lang.Object)",
            "public void configureEndpoint(java.lang.Object)"
        ],
        [
            "org.springframework.beans.factory.config.BeanDefinition",
            "org.springframework.jms.config.AbstractListenerContainerParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
            "public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)"
        ],
        [
            "org.springframework.jms.config.JmsListenerEndpointRegistry$AggregatingCallback",
            "org.springframework.jms.config.JmsListenerEndpointRegistry$AggregatingCallback(int, java.lang.Runnable)",
            "public org.springframework.jms.config.JmsListenerEndpointRegistry$AggregatingCallback(int, java.lang.Runnable)"
        ],
        [
            "void",
            "org.springframework.jms.config.JmsListenerEndpointRegistry$AggregatingCallback.run()",
            "public void run()"
        ],
        [
            "org.springframework.jms.config.SimpleJmsListenerEndpoint",
            "org.springframework.jms.config.SimpleJmsListenerEndpoint()",
            "public org.springframework.jms.config.SimpleJmsListenerEndpoint()"
        ],
        [
            "void",
            "org.springframework.jms.config.SimpleJmsListenerEndpoint.setMessageListener(javax.jms.MessageListener)",
            "public void setMessageListener(javax.jms.MessageListener)"
        ],
        [
            "javax.jms.MessageListener",
            "org.springframework.jms.config.SimpleJmsListenerEndpoint.getMessageListener()",
            "public javax.jms.MessageListener getMessageListener()"
        ],
        [
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory()",
            "public org.springframework.jms.config.DefaultJmsListenerContainerFactory()"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setTaskExecutor(java.util.concurrent.Executor)",
            "public void setTaskExecutor(java.util.concurrent.Executor)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setTransactionManager(org.springframework.transaction.PlatformTransactionManager)",
            "public void setTransactionManager(org.springframework.transaction.PlatformTransactionManager)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setCacheLevel(java.lang.Integer)",
            "public void setCacheLevel(java.lang.Integer)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setCacheLevelName(java.lang.String)",
            "public void setCacheLevelName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setConcurrency(java.lang.String)",
            "public void setConcurrency(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setMaxMessagesPerTask(java.lang.Integer)",
            "public void setMaxMessagesPerTask(java.lang.Integer)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setReceiveTimeout(java.lang.Long)",
            "public void setReceiveTimeout(java.lang.Long)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setRecoveryInterval(java.lang.Long)",
            "public void setRecoveryInterval(java.lang.Long)"
        ],
        [
            "void",
            "org.springframework.jms.config.DefaultJmsListenerContainerFactory.setBackOff(org.springframework.util.backoff.BackOff)",
            "public void setBackOff(org.springframework.util.backoff.BackOff)"
        ],
        [
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory()",
            "public org.springframework.jms.config.AbstractJmsListenerContainerFactory()"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setExceptionListener(javax.jms.ExceptionListener)",
            "public void setExceptionListener(javax.jms.ExceptionListener)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setErrorHandler(org.springframework.util.ErrorHandler)",
            "public void setErrorHandler(org.springframework.util.ErrorHandler)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setSessionTransacted(java.lang.Boolean)",
            "public void setSessionTransacted(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setSessionAcknowledgeMode(java.lang.Integer)",
            "public void setSessionAcknowledgeMode(java.lang.Integer)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setPubSubDomain(java.lang.Boolean)",
            "public void setPubSubDomain(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setReplyPubSubDomain(java.lang.Boolean)",
            "public void setReplyPubSubDomain(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setReplyQosSettings(org.springframework.jms.support.QosSettings)",
            "public void setReplyQosSettings(org.springframework.jms.support.QosSettings)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setSubscriptionDurable(java.lang.Boolean)",
            "public void setSubscriptionDurable(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setSubscriptionShared(java.lang.Boolean)",
            "public void setSubscriptionShared(java.lang.Boolean)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setClientId(java.lang.String)",
            "public void setClientId(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setPhase(int)",
            "public void setPhase(int)"
        ],
        [
            "void",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.setAutoStartup(boolean)",
            "public void setAutoStartup(boolean)"
        ],
        [
            "C",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)",
            "public C createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)"
        ],
        [
            "org.springframework.jms.listener.MessageListenerContainer",
            "org.springframework.jms.config.AbstractJmsListenerContainerFactory.createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)",
            "public org.springframework.jms.listener.MessageListenerContainer createListenerContainer(org.springframework.jms.config.JmsListenerEndpoint)"
        ],
        [
            "org.springframework.jms.config.JmsListenerConfigUtils",
            "org.springframework.jms.config.JmsListenerConfigUtils()",
            "public org.springframework.jms.config.JmsListenerConfigUtils()"
        ],
        [
            "org.springframework.jms.UncategorizedJmsException",
            "org.springframework.jms.UncategorizedJmsException(java.lang.String)",
            "public org.springframework.jms.UncategorizedJmsException(java.lang.String)"
        ],
        [
            "org.springframework.jms.UncategorizedJmsException",
            "org.springframework.jms.UncategorizedJmsException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jms.UncategorizedJmsException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jms.UncategorizedJmsException",
            "org.springframework.jms.UncategorizedJmsException(java.lang.Throwable)",
            "public org.springframework.jms.UncategorizedJmsException(java.lang.Throwable)"
        ],
        [
            "org.springframework.jms.InvalidClientIDException",
            "org.springframework.jms.InvalidClientIDException(javax.jms.InvalidClientIDException)",
            "public org.springframework.jms.InvalidClientIDException(javax.jms.InvalidClientIDException)"
        ],
        [
            "org.springframework.jms.support.converter.MarshallingMessageConverter",
            "org.springframework.jms.support.converter.MarshallingMessageConverter()",
            "public org.springframework.jms.support.converter.MarshallingMessageConverter()"
        ],
        [
            "org.springframework.jms.support.converter.MarshallingMessageConverter",
            "org.springframework.jms.support.converter.MarshallingMessageConverter(org.springframework.oxm.Marshaller)",
            "public org.springframework.jms.support.converter.MarshallingMessageConverter(org.springframework.oxm.Marshaller)"
        ],
        [
            "org.springframework.jms.support.converter.MarshallingMessageConverter",
            "org.springframework.jms.support.converter.MarshallingMessageConverter(org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller)",
            "public org.springframework.jms.support.converter.MarshallingMessageConverter(org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MarshallingMessageConverter.setMarshaller(org.springframework.oxm.Marshaller)",
            "public void setMarshaller(org.springframework.oxm.Marshaller)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MarshallingMessageConverter.setUnmarshaller(org.springframework.oxm.Unmarshaller)",
            "public void setUnmarshaller(org.springframework.oxm.Unmarshaller)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MarshallingMessageConverter.setTargetType(org.springframework.jms.support.converter.MessageType)",
            "public void setTargetType(org.springframework.jms.support.converter.MessageType)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MarshallingMessageConverter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.support.converter.MarshallingMessageConverter.toMessage(java.lang.Object, javax.jms.Session)",
            "public javax.jms.Message toMessage(java.lang.Object, javax.jms.Session) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.support.converter.MarshallingMessageConverter.fromMessage(javax.jms.Message)",
            "public java.lang.Object fromMessage(javax.jms.Message) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "org.springframework.jms.support.converter.MessagingMessageConverter",
            "org.springframework.jms.support.converter.MessagingMessageConverter()",
            "public org.springframework.jms.support.converter.MessagingMessageConverter()"
        ],
        [
            "org.springframework.jms.support.converter.MessagingMessageConverter",
            "org.springframework.jms.support.converter.MessagingMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public org.springframework.jms.support.converter.MessagingMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "org.springframework.jms.support.converter.MessagingMessageConverter",
            "org.springframework.jms.support.converter.MessagingMessageConverter(org.springframework.jms.support.converter.MessageConverter, org.springframework.jms.support.JmsHeaderMapper)",
            "public org.springframework.jms.support.converter.MessagingMessageConverter(org.springframework.jms.support.converter.MessageConverter, org.springframework.jms.support.JmsHeaderMapper)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MessagingMessageConverter.setPayloadConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setPayloadConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MessagingMessageConverter.setHeaderMapper(org.springframework.jms.support.JmsHeaderMapper)",
            "public void setHeaderMapper(org.springframework.jms.support.JmsHeaderMapper)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MessagingMessageConverter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.support.converter.MessagingMessageConverter.toMessage(java.lang.Object, javax.jms.Session)",
            "public javax.jms.Message toMessage(java.lang.Object, javax.jms.Session) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.support.converter.MessagingMessageConverter.fromMessage(javax.jms.Message)",
            "public java.lang.Object fromMessage(javax.jms.Message) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "org.springframework.jms.support.converter.SimpleMessageConverter",
            "org.springframework.jms.support.converter.SimpleMessageConverter()",
            "public org.springframework.jms.support.converter.SimpleMessageConverter()"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.support.converter.SimpleMessageConverter.toMessage(java.lang.Object, javax.jms.Session)",
            "public javax.jms.Message toMessage(java.lang.Object, javax.jms.Session) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.support.converter.SimpleMessageConverter.fromMessage(javax.jms.Message)",
            "public java.lang.Object fromMessage(javax.jms.Message) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter()",
            "public org.springframework.jms.support.converter.MappingJackson2MessageConverter()"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
            "public void setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTargetType(org.springframework.jms.support.converter.MessageType)",
            "public void setTargetType(org.springframework.jms.support.converter.MessageType)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.setEncoding(java.lang.String)",
            "public void setEncoding(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.setEncodingPropertyName(java.lang.String)",
            "public void setEncodingPropertyName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTypeIdPropertyName(java.lang.String)",
            "public void setTypeIdPropertyName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.setTypeIdMappings(java.util.Map<java.lang.String, java.lang.Class<?>>)",
            "public void setTypeIdMappings(java.util.Map<java.lang.String, java.lang.Class<?>>)"
        ],
        [
            "void",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(java.lang.Object, javax.jms.Session)",
            "public javax.jms.Message toMessage(java.lang.Object, javax.jms.Session) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(java.lang.Object, javax.jms.Session, java.lang.Object)",
            "public javax.jms.Message toMessage(java.lang.Object, javax.jms.Session, java.lang.Object) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.toMessage(java.lang.Object, javax.jms.Session, java.lang.Class<?>)",
            "public javax.jms.Message toMessage(java.lang.Object, javax.jms.Session, java.lang.Class<?>) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.support.converter.MappingJackson2MessageConverter.fromMessage(javax.jms.Message)",
            "public java.lang.Object fromMessage(javax.jms.Message) throws javax.jms.JMSException, org.springframework.jms.support.converter.MessageConversionException"
        ],
        [
            "org.springframework.jms.support.converter.MessageConversionException",
            "org.springframework.jms.support.converter.MessageConversionException(java.lang.String)",
            "public org.springframework.jms.support.converter.MessageConversionException(java.lang.String)"
        ],
        [
            "org.springframework.jms.support.converter.MessageConversionException",
            "org.springframework.jms.support.converter.MessageConversionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jms.support.converter.MessageConversionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jms.support.converter.MessageType[]",
            "org.springframework.jms.support.converter.MessageType.values()",
            "public static org.springframework.jms.support.converter.MessageType[] values()"
        ],
        [
            "org.springframework.jms.support.converter.MessageType",
            "org.springframework.jms.support.converter.MessageType.valueOf(java.lang.String)",
            "public static org.springframework.jms.support.converter.MessageType valueOf(java.lang.String)"
        ],
        [
            "org.springframework.jms.support.JmsUtils",
            "org.springframework.jms.support.JmsUtils()",
            "public org.springframework.jms.support.JmsUtils()"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.closeConnection(javax.jms.Connection)",
            "public static void closeConnection(javax.jms.Connection)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.closeConnection(javax.jms.Connection, boolean)",
            "public static void closeConnection(javax.jms.Connection, boolean)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.closeSession(javax.jms.Session)",
            "public static void closeSession(javax.jms.Session)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.closeMessageProducer(javax.jms.MessageProducer)",
            "public static void closeMessageProducer(javax.jms.MessageProducer)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.closeMessageConsumer(javax.jms.MessageConsumer)",
            "public static void closeMessageConsumer(javax.jms.MessageConsumer)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.closeQueueBrowser(javax.jms.QueueBrowser)",
            "public static void closeQueueBrowser(javax.jms.QueueBrowser)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.closeQueueRequestor(javax.jms.QueueRequestor)",
            "public static void closeQueueRequestor(javax.jms.QueueRequestor)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.commitIfNecessary(javax.jms.Session)",
            "public static void commitIfNecessary(javax.jms.Session) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsUtils.rollbackIfNecessary(javax.jms.Session)",
            "public static void rollbackIfNecessary(javax.jms.Session) throws javax.jms.JMSException"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.support.JmsUtils.buildExceptionMessage(javax.jms.JMSException)",
            "public static java.lang.String buildExceptionMessage(javax.jms.JMSException)"
        ],
        [
            "org.springframework.jms.JmsException",
            "org.springframework.jms.support.JmsUtils.convertJmsAccessException(javax.jms.JMSException)",
            "public static org.springframework.jms.JmsException convertJmsAccessException(javax.jms.JMSException)"
        ],
        [
            "org.springframework.jms.support.SimpleJmsHeaderMapper",
            "org.springframework.jms.support.SimpleJmsHeaderMapper()",
            "public org.springframework.jms.support.SimpleJmsHeaderMapper()"
        ],
        [
            "void",
            "org.springframework.jms.support.SimpleJmsHeaderMapper.fromHeaders(org.springframework.messaging.MessageHeaders, javax.jms.Message)",
            "public void fromHeaders(org.springframework.messaging.MessageHeaders, javax.jms.Message)"
        ],
        [
            "org.springframework.messaging.MessageHeaders",
            "org.springframework.jms.support.SimpleJmsHeaderMapper.toHeaders(javax.jms.Message)",
            "public org.springframework.messaging.MessageHeaders toHeaders(javax.jms.Message)"
        ],
        [
            "org.springframework.messaging.MessageHeaders",
            "org.springframework.jms.support.SimpleJmsHeaderMapper.toHeaders(java.lang.Object)",
            "public org.springframework.messaging.MessageHeaders toHeaders(java.lang.Object)"
        ],
        [
            "void",
            "org.springframework.jms.support.SimpleJmsHeaderMapper.fromHeaders(org.springframework.messaging.MessageHeaders, java.lang.Object)",
            "public void fromHeaders(org.springframework.messaging.MessageHeaders, java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getCorrelationId()",
            "public java.lang.String getCorrelationId()"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getDestination()",
            "public javax.jms.Destination getDestination()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getDeliveryMode()",
            "public java.lang.Integer getDeliveryMode()"
        ],
        [
            "java.lang.Long",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getExpiration()",
            "public java.lang.Long getExpiration()"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getMessageId()",
            "public java.lang.String getMessageId()"
        ],
        [
            "java.lang.Integer",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getPriority()",
            "public java.lang.Integer getPriority()"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getReplyTo()",
            "public javax.jms.Destination getReplyTo()"
        ],
        [
            "java.lang.Boolean",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getRedelivered()",
            "public java.lang.Boolean getRedelivered()"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getType()",
            "public java.lang.String getType()"
        ],
        [
            "java.lang.Long",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.getTimestamp()",
            "public java.lang.Long getTimestamp()"
        ],
        [
            "org.springframework.jms.support.JmsMessageHeaderAccessor",
            "org.springframework.jms.support.JmsMessageHeaderAccessor.wrap(org.springframework.messaging.Message<?>)",
            "public static org.springframework.jms.support.JmsMessageHeaderAccessor wrap(org.springframework.messaging.Message<?>)"
        ],
        [
            "org.springframework.jms.support.QosSettings",
            "org.springframework.jms.support.QosSettings()",
            "public org.springframework.jms.support.QosSettings()"
        ],
        [
            "org.springframework.jms.support.QosSettings",
            "org.springframework.jms.support.QosSettings(int, int, long)",
            "public org.springframework.jms.support.QosSettings(int, int, long)"
        ],
        [
            "void",
            "org.springframework.jms.support.QosSettings.setDeliveryMode(int)",
            "public void setDeliveryMode(int)"
        ],
        [
            "int",
            "org.springframework.jms.support.QosSettings.getDeliveryMode()",
            "public int getDeliveryMode()"
        ],
        [
            "void",
            "org.springframework.jms.support.QosSettings.setPriority(int)",
            "public void setPriority(int)"
        ],
        [
            "int",
            "org.springframework.jms.support.QosSettings.getPriority()",
            "public int getPriority()"
        ],
        [
            "void",
            "org.springframework.jms.support.QosSettings.setTimeToLive(long)",
            "public void setTimeToLive(long)"
        ],
        [
            "long",
            "org.springframework.jms.support.QosSettings.getTimeToLive()",
            "public long getTimeToLive()"
        ],
        [
            "boolean",
            "org.springframework.jms.support.QosSettings.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.jms.support.QosSettings.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.support.QosSettings.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jms.support.destination.DynamicDestinationResolver",
            "org.springframework.jms.support.destination.DynamicDestinationResolver()",
            "public org.springframework.jms.support.destination.DynamicDestinationResolver()"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.support.destination.DynamicDestinationResolver.resolveDestinationName(javax.jms.Session, java.lang.String, boolean)",
            "public javax.jms.Destination resolveDestinationName(javax.jms.Session, java.lang.String, boolean) throws javax.jms.JMSException"
        ],
        [
            "org.springframework.jms.support.destination.JmsDestinationAccessor",
            "org.springframework.jms.support.destination.JmsDestinationAccessor()",
            "public org.springframework.jms.support.destination.JmsDestinationAccessor()"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.JmsDestinationAccessor.setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "org.springframework.jms.support.destination.DestinationResolver",
            "org.springframework.jms.support.destination.JmsDestinationAccessor.getDestinationResolver()",
            "public org.springframework.jms.support.destination.DestinationResolver getDestinationResolver()"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.JmsDestinationAccessor.setPubSubDomain(boolean)",
            "public void setPubSubDomain(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.support.destination.JmsDestinationAccessor.isPubSubDomain()",
            "public boolean isPubSubDomain()"
        ],
        [
            "org.springframework.jms.support.destination.JndiDestinationResolver",
            "org.springframework.jms.support.destination.JndiDestinationResolver()",
            "public org.springframework.jms.support.destination.JndiDestinationResolver()"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.JndiDestinationResolver.setCache(boolean)",
            "public void setCache(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.JndiDestinationResolver.setFallbackToDynamicDestination(boolean)",
            "public void setFallbackToDynamicDestination(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.JndiDestinationResolver.setDynamicDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDynamicDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.support.destination.JndiDestinationResolver.resolveDestinationName(javax.jms.Session, java.lang.String, boolean)",
            "public javax.jms.Destination resolveDestinationName(javax.jms.Session, java.lang.String, boolean) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.JndiDestinationResolver.removeFromCache(java.lang.String)",
            "public void removeFromCache(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.JndiDestinationResolver.clearCache()",
            "public void clearCache()"
        ],
        [
            "org.springframework.jms.support.destination.BeanFactoryDestinationResolver",
            "org.springframework.jms.support.destination.BeanFactoryDestinationResolver()",
            "public org.springframework.jms.support.destination.BeanFactoryDestinationResolver()"
        ],
        [
            "org.springframework.jms.support.destination.BeanFactoryDestinationResolver",
            "org.springframework.jms.support.destination.BeanFactoryDestinationResolver(org.springframework.beans.factory.BeanFactory)",
            "public org.springframework.jms.support.destination.BeanFactoryDestinationResolver(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.jms.support.destination.BeanFactoryDestinationResolver.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.support.destination.BeanFactoryDestinationResolver.resolveDestinationName(javax.jms.Session, java.lang.String, boolean)",
            "public javax.jms.Destination resolveDestinationName(javax.jms.Session, java.lang.String, boolean) throws javax.jms.JMSException"
        ],
        [
            "org.springframework.jms.support.destination.DestinationResolutionException",
            "org.springframework.jms.support.destination.DestinationResolutionException(java.lang.String)",
            "public org.springframework.jms.support.destination.DestinationResolutionException(java.lang.String)"
        ],
        [
            "org.springframework.jms.support.destination.DestinationResolutionException",
            "org.springframework.jms.support.destination.DestinationResolutionException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jms.support.destination.DestinationResolutionException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jms.support.JmsAccessor",
            "org.springframework.jms.support.JmsAccessor()",
            "public org.springframework.jms.support.JmsAccessor()"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsAccessor.setConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.ConnectionFactory",
            "org.springframework.jms.support.JmsAccessor.getConnectionFactory()",
            "public javax.jms.ConnectionFactory getConnectionFactory()"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsAccessor.setSessionTransacted(boolean)",
            "public void setSessionTransacted(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.support.JmsAccessor.isSessionTransacted()",
            "public boolean isSessionTransacted()"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsAccessor.setSessionAcknowledgeModeName(java.lang.String)",
            "public void setSessionAcknowledgeModeName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsAccessor.setSessionAcknowledgeMode(int)",
            "public void setSessionAcknowledgeMode(int)"
        ],
        [
            "int",
            "org.springframework.jms.support.JmsAccessor.getSessionAcknowledgeMode()",
            "public int getSessionAcknowledgeMode()"
        ],
        [
            "void",
            "org.springframework.jms.support.JmsAccessor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "org.springframework.jms.MessageEOFException",
            "org.springframework.jms.MessageEOFException(javax.jms.MessageEOFException)",
            "public org.springframework.jms.MessageEOFException(javax.jms.MessageEOFException)"
        ],
        [
            "org.springframework.jms.annotation.JmsBootstrapConfiguration",
            "org.springframework.jms.annotation.JmsBootstrapConfiguration()",
            "public org.springframework.jms.annotation.JmsBootstrapConfiguration()"
        ],
        [
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor",
            "org.springframework.jms.annotation.JmsBootstrapConfiguration.jmsListenerAnnotationProcessor()",
            "public org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor jmsListenerAnnotationProcessor()"
        ],
        [
            "org.springframework.jms.config.JmsListenerEndpointRegistry",
            "org.springframework.jms.annotation.JmsBootstrapConfiguration.defaultJmsListenerEndpointRegistry()",
            "public org.springframework.jms.config.JmsListenerEndpointRegistry defaultJmsListenerEndpointRegistry()"
        ],
        [
            "void",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor$MessageHandlerMethodFactoryAdapter.setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)",
            "public void setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)"
        ],
        [
            "org.springframework.messaging.handler.invocation.InvocableHandlerMethod",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor$MessageHandlerMethodFactoryAdapter.createInvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)",
            "public org.springframework.messaging.handler.invocation.InvocableHandlerMethod createInvocableHandlerMethod(java.lang.Object, java.lang.reflect.Method)"
        ],
        [
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor()",
            "public org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor()"
        ],
        [
            "int",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.getOrder()",
            "public int getOrder()"
        ],
        [
            "void",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.setContainerFactoryBeanName(java.lang.String)",
            "public void setContainerFactoryBeanName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.setEndpointRegistry(org.springframework.jms.config.JmsListenerEndpointRegistry)",
            "public void setEndpointRegistry(org.springframework.jms.config.JmsListenerEndpointRegistry)"
        ],
        [
            "void",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)",
            "public void setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory)"
        ],
        [
            "void",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.setBeanFactory(org.springframework.beans.factory.BeanFactory)",
            "public void setBeanFactory(org.springframework.beans.factory.BeanFactory)"
        ],
        [
            "void",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.afterSingletonsInstantiated()",
            "public void afterSingletonsInstantiated()"
        ],
        [
            "void",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)",
            "public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class<?>, java.lang.String)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.postProcessBeforeInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor.postProcessAfterInitialization(java.lang.Object, java.lang.String)",
            "public java.lang.Object postProcessAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException"
        ],
        [
            "org.springframework.jms.TransactionInProgressException",
            "org.springframework.jms.TransactionInProgressException(javax.jms.TransactionInProgressException)",
            "public org.springframework.jms.TransactionInProgressException(javax.jms.TransactionInProgressException)"
        ],
        [
            "org.springframework.jms.IllegalStateException",
            "org.springframework.jms.IllegalStateException(javax.jms.IllegalStateException)",
            "public org.springframework.jms.IllegalStateException(javax.jms.IllegalStateException)"
        ],
        [
            "org.springframework.jms.JmsSecurityException",
            "org.springframework.jms.JmsSecurityException(javax.jms.JMSSecurityException)",
            "public org.springframework.jms.JmsSecurityException(javax.jms.JMSSecurityException)"
        ],
        [
            "org.springframework.jms.JmsException",
            "org.springframework.jms.JmsException(java.lang.String)",
            "public org.springframework.jms.JmsException(java.lang.String)"
        ],
        [
            "org.springframework.jms.JmsException",
            "org.springframework.jms.JmsException(java.lang.String, java.lang.Throwable)",
            "public org.springframework.jms.JmsException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.springframework.jms.JmsException",
            "org.springframework.jms.JmsException(java.lang.Throwable)",
            "public org.springframework.jms.JmsException(java.lang.Throwable)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.JmsException.getErrorCode()",
            "public java.lang.String getErrorCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.JmsException.getMessage()",
            "public java.lang.String getMessage()"
        ],
        [
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter$JmsUserCredentials",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter$JmsUserCredentials(java.lang.String, java.lang.String)",
            "public org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter$JmsUserCredentials(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter$JmsUserCredentials.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey",
            "org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey(javax.jms.Destination)",
            "public org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey(javax.jms.Destination)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey.compareTo(org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey)",
            "public int compareTo(org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey)"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachingConnectionFactory$DestinationCacheKey.compareTo(java.lang.Object)",
            "public int compareTo(java.lang.Object)"
        ],
        [
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter()",
            "public org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter()"
        ],
        [
            "void",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.setTargetConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setTargetConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.setUsername(java.lang.String)",
            "public void setUsername(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.setPassword(java.lang.String)",
            "public void setPassword(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.setCredentialsForCurrentThread(java.lang.String, java.lang.String)",
            "public void setCredentialsForCurrentThread(java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.removeCredentialsFromCurrentThread()",
            "public void removeCredentialsFromCurrentThread()"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createConnection()",
            "public final javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createConnection(java.lang.String, java.lang.String)",
            "public javax.jms.Connection createConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createQueueConnection()",
            "public final javax.jms.QueueConnection createQueueConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createQueueConnection(java.lang.String, java.lang.String)",
            "public javax.jms.QueueConnection createQueueConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createTopicConnection()",
            "public final javax.jms.TopicConnection createTopicConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createTopicConnection(java.lang.String, java.lang.String)",
            "public javax.jms.TopicConnection createTopicConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createContext()",
            "public javax.jms.JMSContext createContext()"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createContext(java.lang.String, java.lang.String)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createContext(java.lang.String, java.lang.String, int)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String, int)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createContext(int)",
            "public javax.jms.JMSContext createContext(int)"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils$3.getSession(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Session getSession(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.ConnectionFactoryUtils$3.getConnection(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.ConnectionFactoryUtils$3.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils$3.createSession(javax.jms.Connection)",
            "public javax.jms.Session createSession(javax.jms.Connection) throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.ConnectionFactoryUtils$3.isSynchedLocalTransactionAllowed()",
            "public boolean isSynchedLocalTransactionAllowed()"
        ],
        [
            "org.springframework.jms.connection.ChainedExceptionListener",
            "org.springframework.jms.connection.ChainedExceptionListener()",
            "public org.springframework.jms.connection.ChainedExceptionListener()"
        ],
        [
            "void",
            "org.springframework.jms.connection.ChainedExceptionListener.addDelegate(javax.jms.ExceptionListener)",
            "public final void addDelegate(javax.jms.ExceptionListener)"
        ],
        [
            "javax.jms.ExceptionListener[]",
            "org.springframework.jms.connection.ChainedExceptionListener.getDelegates()",
            "public final javax.jms.ExceptionListener[] getDelegates()"
        ],
        [
            "void",
            "org.springframework.jms.connection.ChainedExceptionListener.onException(javax.jms.JMSException)",
            "public void onException(javax.jms.JMSException)"
        ],
        [
            "org.springframework.jms.connection.CachedMessageProducer",
            "org.springframework.jms.connection.CachedMessageProducer(javax.jms.MessageProducer)",
            "public org.springframework.jms.connection.CachedMessageProducer(javax.jms.MessageProducer) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.setDisableMessageID(boolean)",
            "public void setDisableMessageID(boolean) throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.CachedMessageProducer.getDisableMessageID()",
            "public boolean getDisableMessageID() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.setDisableMessageTimestamp(boolean)",
            "public void setDisableMessageTimestamp(boolean) throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.CachedMessageProducer.getDisableMessageTimestamp()",
            "public boolean getDisableMessageTimestamp() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.setDeliveryDelay(long)",
            "public void setDeliveryDelay(long) throws javax.jms.JMSException"
        ],
        [
            "long",
            "org.springframework.jms.connection.CachedMessageProducer.getDeliveryDelay()",
            "public long getDeliveryDelay() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.setDeliveryMode(int)",
            "public void setDeliveryMode(int)"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachedMessageProducer.getDeliveryMode()",
            "public int getDeliveryMode()"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.setPriority(int)",
            "public void setPriority(int)"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachedMessageProducer.getPriority()",
            "public int getPriority()"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.setTimeToLive(long)",
            "public void setTimeToLive(long)"
        ],
        [
            "long",
            "org.springframework.jms.connection.CachedMessageProducer.getTimeToLive()",
            "public long getTimeToLive()"
        ],
        [
            "javax.jms.Destination",
            "org.springframework.jms.connection.CachedMessageProducer.getDestination()",
            "public javax.jms.Destination getDestination() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Queue",
            "org.springframework.jms.connection.CachedMessageProducer.getQueue()",
            "public javax.jms.Queue getQueue() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Topic",
            "org.springframework.jms.connection.CachedMessageProducer.getTopic()",
            "public javax.jms.Topic getTopic() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Message)",
            "public void send(javax.jms.Message) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Message, int, int, long)",
            "public void send(javax.jms.Message, int, int, long) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Destination, javax.jms.Message)",
            "public void send(javax.jms.Destination, javax.jms.Message) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Destination, javax.jms.Message, int, int, long)",
            "public void send(javax.jms.Destination, javax.jms.Message, int, int, long) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Message, javax.jms.CompletionListener)",
            "public void send(javax.jms.Message, javax.jms.CompletionListener) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Message, int, int, long, javax.jms.CompletionListener)",
            "public void send(javax.jms.Message, int, int, long, javax.jms.CompletionListener) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Destination, javax.jms.Message, javax.jms.CompletionListener)",
            "public void send(javax.jms.Destination, javax.jms.Message, javax.jms.CompletionListener) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Destination, javax.jms.Message, int, int, long, javax.jms.CompletionListener)",
            "public void send(javax.jms.Destination, javax.jms.Message, int, int, long, javax.jms.CompletionListener) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Queue, javax.jms.Message)",
            "public void send(javax.jms.Queue, javax.jms.Message) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.send(javax.jms.Queue, javax.jms.Message, int, int, long)",
            "public void send(javax.jms.Queue, javax.jms.Message, int, int, long) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.publish(javax.jms.Message)",
            "public void publish(javax.jms.Message) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.publish(javax.jms.Message, int, int, long)",
            "public void publish(javax.jms.Message, int, int, long) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.publish(javax.jms.Topic, javax.jms.Message)",
            "public void publish(javax.jms.Topic, javax.jms.Message) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.publish(javax.jms.Topic, javax.jms.Message, int, int, long)",
            "public void publish(javax.jms.Topic, javax.jms.Message, int, int, long) throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageProducer.close()",
            "public void close() throws javax.jms.JMSException"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.connection.CachedMessageProducer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jms.connection.CachingConnectionFactory$ConsumerCacheKey",
            "org.springframework.jms.connection.CachingConnectionFactory$ConsumerCacheKey(javax.jms.Destination, java.lang.String, java.lang.Boolean, java.lang.String, boolean)",
            "public org.springframework.jms.connection.CachingConnectionFactory$ConsumerCacheKey(javax.jms.Destination, java.lang.String, java.lang.Boolean, java.lang.String, boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.CachingConnectionFactory$ConsumerCacheKey.equals(java.lang.Object)",
            "public boolean equals(java.lang.Object)"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachingConnectionFactory$ConsumerCacheKey.hashCode()",
            "public int hashCode()"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.connection.CachingConnectionFactory$ConsumerCacheKey.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareConnectionInvocationHandler",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareConnectionInvocationHandler(org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy, javax.jms.Connection)",
            "public org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareConnectionInvocationHandler(org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy, javax.jms.Connection)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$TransactionAwareConnectionInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder",
            "org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder(org.springframework.jms.connection.JmsTransactionManager, javax.jms.ConnectionFactory)",
            "public org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder(org.springframework.jms.connection.JmsTransactionManager, javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder.getConnection()",
            "public javax.jms.Connection getConnection()"
        ],
        [
            "<C extends javax.jms.Connection> C",
            "org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder.getConnection(java.lang.Class<C>)",
            "public <C extends javax.jms.Connection> C getConnection(java.lang.Class<C>)"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder.getSession()",
            "public javax.jms.Session getSession()"
        ],
        [
            "<S extends javax.jms.Session> S",
            "org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder.getSession(java.lang.Class<S>)",
            "public <S extends javax.jms.Session> S getSession(java.lang.Class<S>)"
        ],
        [
            "<S extends javax.jms.Session> S",
            "org.springframework.jms.connection.JmsTransactionManager$LazyJmsResourceHolder.getSession(java.lang.Class<S>, javax.jms.Connection)",
            "public <S extends javax.jms.Session> S getSession(java.lang.Class<S>, javax.jms.Connection)"
        ],
        [
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy()",
            "public org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy()"
        ],
        [
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy(javax.jms.ConnectionFactory)",
            "public org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.setTargetConnectionFactory(javax.jms.ConnectionFactory)",
            "public final void setTargetConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.setSynchedLocalTransactionAllowed(boolean)",
            "public void setSynchedLocalTransactionAllowed(boolean)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createConnection(java.lang.String, java.lang.String)",
            "public javax.jms.Connection createConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createQueueConnection()",
            "public javax.jms.QueueConnection createQueueConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createQueueConnection(java.lang.String, java.lang.String)",
            "public javax.jms.QueueConnection createQueueConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createTopicConnection()",
            "public javax.jms.TopicConnection createTopicConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createTopicConnection(java.lang.String, java.lang.String)",
            "public javax.jms.TopicConnection createTopicConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createContext()",
            "public javax.jms.JMSContext createContext()"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createContext(java.lang.String, java.lang.String)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createContext(java.lang.String, java.lang.String, int)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String, int)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy.createContext(int)",
            "public javax.jms.JMSContext createContext(int)"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsTransactionManager$JmsTransactionObject.setResourceHolder(org.springframework.jms.connection.JmsResourceHolder)",
            "public void setResourceHolder(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "org.springframework.jms.connection.JmsResourceHolder",
            "org.springframework.jms.connection.JmsTransactionManager$JmsTransactionObject.getResourceHolder()",
            "public org.springframework.jms.connection.JmsResourceHolder getResourceHolder()"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.JmsTransactionManager$JmsTransactionObject.hasResourceHolder()",
            "public boolean hasResourceHolder()"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.JmsTransactionManager$JmsTransactionObject.isRollbackOnly()",
            "public boolean isRollbackOnly()"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsTransactionManager$JmsTransactionObject.flush()",
            "public void flush()"
        ],
        [
            "org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler",
            "org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler(javax.jms.Session, java.util.Deque<javax.jms.Session>)",
            "public org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler(javax.jms.Session, java.util.Deque<javax.jms.Session>)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.connection.CachingConnectionFactory$CachedSessionInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jms.connection.CachedMessageConsumer",
            "org.springframework.jms.connection.CachedMessageConsumer(javax.jms.MessageConsumer)",
            "public org.springframework.jms.connection.CachedMessageConsumer(javax.jms.MessageConsumer)"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.connection.CachedMessageConsumer.getMessageSelector()",
            "public java.lang.String getMessageSelector() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Queue",
            "org.springframework.jms.connection.CachedMessageConsumer.getQueue()",
            "public javax.jms.Queue getQueue() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Topic",
            "org.springframework.jms.connection.CachedMessageConsumer.getTopic()",
            "public javax.jms.Topic getTopic() throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.CachedMessageConsumer.getNoLocal()",
            "public boolean getNoLocal() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.MessageListener",
            "org.springframework.jms.connection.CachedMessageConsumer.getMessageListener()",
            "public javax.jms.MessageListener getMessageListener() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageConsumer.setMessageListener(javax.jms.MessageListener)",
            "public void setMessageListener(javax.jms.MessageListener) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.connection.CachedMessageConsumer.receive()",
            "public javax.jms.Message receive() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.connection.CachedMessageConsumer.receive(long)",
            "public javax.jms.Message receive(long) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Message",
            "org.springframework.jms.connection.CachedMessageConsumer.receiveNoWait()",
            "public javax.jms.Message receiveNoWait() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachedMessageConsumer.close()",
            "public void close() throws javax.jms.JMSException"
        ],
        [
            "java.lang.String",
            "org.springframework.jms.connection.CachedMessageConsumer.toString()",
            "public java.lang.String toString()"
        ],
        [
            "org.springframework.jms.connection.JmsTransactionManager",
            "org.springframework.jms.connection.JmsTransactionManager()",
            "public org.springframework.jms.connection.JmsTransactionManager()"
        ],
        [
            "org.springframework.jms.connection.JmsTransactionManager",
            "org.springframework.jms.connection.JmsTransactionManager(javax.jms.ConnectionFactory)",
            "public org.springframework.jms.connection.JmsTransactionManager(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsTransactionManager.setConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.ConnectionFactory",
            "org.springframework.jms.connection.JmsTransactionManager.getConnectionFactory()",
            "public javax.jms.ConnectionFactory getConnectionFactory()"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsTransactionManager.setLazyResourceRetrieval(boolean)",
            "public void setLazyResourceRetrieval(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsTransactionManager.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.connection.JmsTransactionManager.getResourceFactory()",
            "public java.lang.Object getResourceFactory()"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils$2.getSession(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Session getSession(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.ConnectionFactoryUtils$2.getConnection(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.ConnectionFactoryUtils$2.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils$2.createSession(javax.jms.Connection)",
            "public javax.jms.Session createSession(javax.jms.Connection) throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.ConnectionFactoryUtils$2.isSynchedLocalTransactionAllowed()",
            "public boolean isSynchedLocalTransactionAllowed()"
        ],
        [
            "org.springframework.jms.connection.DelegatingConnectionFactory",
            "org.springframework.jms.connection.DelegatingConnectionFactory()",
            "public org.springframework.jms.connection.DelegatingConnectionFactory()"
        ],
        [
            "void",
            "org.springframework.jms.connection.DelegatingConnectionFactory.setTargetConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setTargetConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.ConnectionFactory",
            "org.springframework.jms.connection.DelegatingConnectionFactory.getTargetConnectionFactory()",
            "public javax.jms.ConnectionFactory getTargetConnectionFactory()"
        ],
        [
            "void",
            "org.springframework.jms.connection.DelegatingConnectionFactory.setShouldStopConnections(boolean)",
            "public void setShouldStopConnections(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.connection.DelegatingConnectionFactory.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createConnection(java.lang.String, java.lang.String)",
            "public javax.jms.Connection createConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createQueueConnection()",
            "public javax.jms.QueueConnection createQueueConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createQueueConnection(java.lang.String, java.lang.String)",
            "public javax.jms.QueueConnection createQueueConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createTopicConnection()",
            "public javax.jms.TopicConnection createTopicConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createTopicConnection(java.lang.String, java.lang.String)",
            "public javax.jms.TopicConnection createTopicConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createContext()",
            "public javax.jms.JMSContext createContext()"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createContext(java.lang.String, java.lang.String)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createContext(java.lang.String, java.lang.String, int)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String, int)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.DelegatingConnectionFactory.createContext(int)",
            "public javax.jms.JMSContext createContext(int)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.DelegatingConnectionFactory.shouldStop(javax.jms.Connection)",
            "public boolean shouldStop(javax.jms.Connection)"
        ],
        [
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$CloseSuppressingSessionInvocationHandler",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$CloseSuppressingSessionInvocationHandler(javax.jms.Session)",
            "public org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$CloseSuppressingSessionInvocationHandler(javax.jms.Session)"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy$CloseSuppressingSessionInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jms.connection.CachingConnectionFactory",
            "org.springframework.jms.connection.CachingConnectionFactory()",
            "public org.springframework.jms.connection.CachingConnectionFactory()"
        ],
        [
            "org.springframework.jms.connection.CachingConnectionFactory",
            "org.springframework.jms.connection.CachingConnectionFactory(javax.jms.ConnectionFactory)",
            "public org.springframework.jms.connection.CachingConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachingConnectionFactory.setSessionCacheSize(int)",
            "public void setSessionCacheSize(int)"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachingConnectionFactory.getSessionCacheSize()",
            "public int getSessionCacheSize()"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachingConnectionFactory.setCacheProducers(boolean)",
            "public void setCacheProducers(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.CachingConnectionFactory.isCacheProducers()",
            "public boolean isCacheProducers()"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachingConnectionFactory.setCacheConsumers(boolean)",
            "public void setCacheConsumers(boolean)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.CachingConnectionFactory.isCacheConsumers()",
            "public boolean isCacheConsumers()"
        ],
        [
            "int",
            "org.springframework.jms.connection.CachingConnectionFactory.getCachedSessionCount()",
            "public int getCachedSessionCount()"
        ],
        [
            "void",
            "org.springframework.jms.connection.CachingConnectionFactory.resetConnection()",
            "public void resetConnection()"
        ],
        [
            "org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization",
            "org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization(org.springframework.jms.connection.JmsResourceHolder, java.lang.Object, boolean)",
            "public org.springframework.jms.connection.ConnectionFactoryUtils$JmsResourceSynchronization(org.springframework.jms.connection.JmsResourceHolder, java.lang.Object, boolean)"
        ],
        [
            "org.springframework.jms.connection.JmsResourceHolder",
            "org.springframework.jms.connection.JmsResourceHolder()",
            "public org.springframework.jms.connection.JmsResourceHolder()"
        ],
        [
            "org.springframework.jms.connection.JmsResourceHolder",
            "org.springframework.jms.connection.JmsResourceHolder(javax.jms.ConnectionFactory)",
            "public org.springframework.jms.connection.JmsResourceHolder(javax.jms.ConnectionFactory)"
        ],
        [
            "org.springframework.jms.connection.JmsResourceHolder",
            "org.springframework.jms.connection.JmsResourceHolder(javax.jms.Session)",
            "public org.springframework.jms.connection.JmsResourceHolder(javax.jms.Session)"
        ],
        [
            "org.springframework.jms.connection.JmsResourceHolder",
            "org.springframework.jms.connection.JmsResourceHolder(javax.jms.Connection, javax.jms.Session)",
            "public org.springframework.jms.connection.JmsResourceHolder(javax.jms.Connection, javax.jms.Session)"
        ],
        [
            "org.springframework.jms.connection.JmsResourceHolder",
            "org.springframework.jms.connection.JmsResourceHolder(javax.jms.ConnectionFactory, javax.jms.Connection, javax.jms.Session)",
            "public org.springframework.jms.connection.JmsResourceHolder(javax.jms.ConnectionFactory, javax.jms.Connection, javax.jms.Session)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.JmsResourceHolder.isFrozen()",
            "public final boolean isFrozen()"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsResourceHolder.addConnection(javax.jms.Connection)",
            "public final void addConnection(javax.jms.Connection)"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsResourceHolder.addSession(javax.jms.Session)",
            "public final void addSession(javax.jms.Session)"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsResourceHolder.addSession(javax.jms.Session, javax.jms.Connection)",
            "public final void addSession(javax.jms.Session, javax.jms.Connection)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.JmsResourceHolder.containsSession(javax.jms.Session)",
            "public boolean containsSession(javax.jms.Session)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.JmsResourceHolder.getConnection()",
            "public javax.jms.Connection getConnection()"
        ],
        [
            "<C extends javax.jms.Connection> C",
            "org.springframework.jms.connection.JmsResourceHolder.getConnection(java.lang.Class<C>)",
            "public <C extends javax.jms.Connection> C getConnection(java.lang.Class<C>)"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.JmsResourceHolder.getSession()",
            "public javax.jms.Session getSession()"
        ],
        [
            "<S extends javax.jms.Session> S",
            "org.springframework.jms.connection.JmsResourceHolder.getSession(java.lang.Class<S>)",
            "public <S extends javax.jms.Session> S getSession(java.lang.Class<S>)"
        ],
        [
            "<S extends javax.jms.Session> S",
            "org.springframework.jms.connection.JmsResourceHolder.getSession(java.lang.Class<S>, javax.jms.Connection)",
            "public <S extends javax.jms.Session> S getSession(java.lang.Class<S>, javax.jms.Connection)"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsResourceHolder.commitAll()",
            "public void commitAll() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.JmsResourceHolder.closeAll()",
            "public void closeAll()"
        ],
        [
            "org.springframework.jms.connection.SingleConnectionFactory",
            "org.springframework.jms.connection.SingleConnectionFactory()",
            "public org.springframework.jms.connection.SingleConnectionFactory()"
        ],
        [
            "org.springframework.jms.connection.SingleConnectionFactory",
            "org.springframework.jms.connection.SingleConnectionFactory(javax.jms.Connection)",
            "public org.springframework.jms.connection.SingleConnectionFactory(javax.jms.Connection)"
        ],
        [
            "org.springframework.jms.connection.SingleConnectionFactory",
            "org.springframework.jms.connection.SingleConnectionFactory(javax.jms.ConnectionFactory)",
            "public org.springframework.jms.connection.SingleConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.setTargetConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setTargetConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.ConnectionFactory",
            "org.springframework.jms.connection.SingleConnectionFactory.getTargetConnectionFactory()",
            "public javax.jms.ConnectionFactory getTargetConnectionFactory()"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.setClientId(java.lang.String)",
            "public void setClientId(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.setExceptionListener(javax.jms.ExceptionListener)",
            "public void setExceptionListener(javax.jms.ExceptionListener)"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.setReconnectOnException(boolean)",
            "public void setReconnectOnException(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.SingleConnectionFactory.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.SingleConnectionFactory.createConnection(java.lang.String, java.lang.String)",
            "public javax.jms.Connection createConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.SingleConnectionFactory.createQueueConnection()",
            "public javax.jms.QueueConnection createQueueConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueConnection",
            "org.springframework.jms.connection.SingleConnectionFactory.createQueueConnection(java.lang.String, java.lang.String)",
            "public javax.jms.QueueConnection createQueueConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.SingleConnectionFactory.createTopicConnection()",
            "public javax.jms.TopicConnection createTopicConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicConnection",
            "org.springframework.jms.connection.SingleConnectionFactory.createTopicConnection(java.lang.String, java.lang.String)",
            "public javax.jms.TopicConnection createTopicConnection(java.lang.String, java.lang.String) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.SingleConnectionFactory.createContext()",
            "public javax.jms.JMSContext createContext()"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.SingleConnectionFactory.createContext(java.lang.String, java.lang.String)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.SingleConnectionFactory.createContext(java.lang.String, java.lang.String, int)",
            "public javax.jms.JMSContext createContext(java.lang.String, java.lang.String, int)"
        ],
        [
            "javax.jms.JMSContext",
            "org.springframework.jms.connection.SingleConnectionFactory.createContext(int)",
            "public javax.jms.JMSContext createContext(int)"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.initConnection()",
            "public void initConnection() throws javax.jms.JMSException"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.onException(javax.jms.JMSException)",
            "public void onException(javax.jms.JMSException)"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.destroy()",
            "public void destroy()"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory.resetConnection()",
            "public void resetConnection()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])",
            "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jms.connection.SynchedLocalTransactionFailedException",
            "org.springframework.jms.connection.SynchedLocalTransactionFailedException(java.lang.String, javax.jms.JMSException)",
            "public org.springframework.jms.connection.SynchedLocalTransactionFailedException(java.lang.String, javax.jms.JMSException)"
        ],
        [
            "void",
            "org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(javax.jms.JMSException)",
            "public void onException(javax.jms.JMSException)"
        ],
        [
            "org.springframework.jms.connection.ConnectionFactoryUtils",
            "org.springframework.jms.connection.ConnectionFactoryUtils()",
            "public org.springframework.jms.connection.ConnectionFactoryUtils()"
        ],
        [
            "void",
            "org.springframework.jms.connection.ConnectionFactoryUtils.releaseConnection(javax.jms.Connection, javax.jms.ConnectionFactory, boolean)",
            "public static void releaseConnection(javax.jms.Connection, javax.jms.ConnectionFactory, boolean)"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils.getTargetSession(javax.jms.Session)",
            "public static javax.jms.Session getTargetSession(javax.jms.Session)"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.ConnectionFactoryUtils.isSessionTransactional(javax.jms.Session, javax.jms.ConnectionFactory)",
            "public static boolean isSessionTransactional(javax.jms.Session, javax.jms.ConnectionFactory)"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils.getTransactionalSession(javax.jms.ConnectionFactory, javax.jms.Connection, boolean)",
            "public static javax.jms.Session getTransactionalSession(javax.jms.ConnectionFactory, javax.jms.Connection, boolean) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.QueueSession",
            "org.springframework.jms.connection.ConnectionFactoryUtils.getTransactionalQueueSession(javax.jms.QueueConnectionFactory, javax.jms.QueueConnection, boolean)",
            "public static javax.jms.QueueSession getTransactionalQueueSession(javax.jms.QueueConnectionFactory, javax.jms.QueueConnection, boolean) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.TopicSession",
            "org.springframework.jms.connection.ConnectionFactoryUtils.getTransactionalTopicSession(javax.jms.TopicConnectionFactory, javax.jms.TopicConnection, boolean)",
            "public static javax.jms.TopicSession getTransactionalTopicSession(javax.jms.TopicConnectionFactory, javax.jms.TopicConnection, boolean) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils.doGetTransactionalSession(javax.jms.ConnectionFactory, org.springframework.jms.connection.ConnectionFactoryUtils$ResourceFactory)",
            "public static javax.jms.Session doGetTransactionalSession(javax.jms.ConnectionFactory, org.springframework.jms.connection.ConnectionFactoryUtils$ResourceFactory) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils.doGetTransactionalSession(javax.jms.ConnectionFactory, org.springframework.jms.connection.ConnectionFactoryUtils$ResourceFactory, boolean)",
            "public static javax.jms.Session doGetTransactionalSession(javax.jms.ConnectionFactory, org.springframework.jms.connection.ConnectionFactoryUtils$ResourceFactory, boolean) throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils$1.getSession(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Session getSession(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.ConnectionFactoryUtils$1.getConnection(org.springframework.jms.connection.JmsResourceHolder)",
            "public javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)"
        ],
        [
            "javax.jms.Connection",
            "org.springframework.jms.connection.ConnectionFactoryUtils$1.createConnection()",
            "public javax.jms.Connection createConnection() throws javax.jms.JMSException"
        ],
        [
            "javax.jms.Session",
            "org.springframework.jms.connection.ConnectionFactoryUtils$1.createSession(javax.jms.Connection)",
            "public javax.jms.Session createSession(javax.jms.Connection) throws javax.jms.JMSException"
        ],
        [
            "boolean",
            "org.springframework.jms.connection.ConnectionFactoryUtils$1.isSynchedLocalTransactionAllowed()",
            "public boolean isSynchedLocalTransactionAllowed()"
        ],
        [
            "org.springframework.jms.InvalidSelectorException",
            "org.springframework.jms.InvalidSelectorException(javax.jms.InvalidSelectorException)",
            "public org.springframework.jms.InvalidSelectorException(javax.jms.InvalidSelectorException)"
        ],
        [
            "org.springframework.jms.MessageNotReadableException",
            "org.springframework.jms.MessageNotReadableException(javax.jms.MessageNotReadableException)",
            "public org.springframework.jms.MessageNotReadableException(javax.jms.MessageNotReadableException)"
        ],
        [
            "org.springframework.jms.TransactionRolledBackException",
            "org.springframework.jms.TransactionRolledBackException(javax.jms.TransactionRolledBackException)",
            "public org.springframework.jms.TransactionRolledBackException(javax.jms.TransactionRolledBackException)"
        ],
        [
            "org.springframework.jms.MessageFormatException",
            "org.springframework.jms.MessageFormatException(javax.jms.MessageFormatException)",
            "public org.springframework.jms.MessageFormatException(javax.jms.MessageFormatException)"
        ],
        [
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean",
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean()",
            "public org.springframework.jms.remoting.JmsInvokerProxyFactoryBean()"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean.setServiceInterface(java.lang.Class<?>)",
            "public void setServiceInterface(java.lang.Class<?>)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean.setBeanClassLoader(java.lang.ClassLoader)",
            "public void setBeanClassLoader(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean.getObject()",
            "public java.lang.Object getObject()"
        ],
        [
            "java.lang.Class<?>",
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean.getObjectType()",
            "public java.lang.Class<?> getObjectType()"
        ],
        [
            "boolean",
            "org.springframework.jms.remoting.JmsInvokerProxyFactoryBean.isSingleton()",
            "public boolean isSingleton()"
        ],
        [
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor()",
            "public org.springframework.jms.remoting.JmsInvokerClientInterceptor()"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.setConnectionFactory(javax.jms.ConnectionFactory)",
            "public void setConnectionFactory(javax.jms.ConnectionFactory)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.setQueue(javax.jms.Queue)",
            "public void setQueue(javax.jms.Queue)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.setQueueName(java.lang.String)",
            "public void setQueueName(java.lang.String)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)",
            "public void setDestinationResolver(org.springframework.jms.support.destination.DestinationResolver)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)",
            "public void setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.setMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.setReceiveTimeout(long)",
            "public void setReceiveTimeout(long)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "java.lang.Object",
            "org.springframework.jms.remoting.JmsInvokerClientInterceptor.invoke(org.aopalliance.intercept.MethodInvocation)",
            "public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable"
        ],
        [
            "org.springframework.jms.remoting.JmsInvokerServiceExporter",
            "org.springframework.jms.remoting.JmsInvokerServiceExporter()",
            "public org.springframework.jms.remoting.JmsInvokerServiceExporter()"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerServiceExporter.setMessageConverter(org.springframework.jms.support.converter.MessageConverter)",
            "public void setMessageConverter(org.springframework.jms.support.converter.MessageConverter)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerServiceExporter.setIgnoreInvalidRequests(boolean)",
            "public void setIgnoreInvalidRequests(boolean)"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerServiceExporter.afterPropertiesSet()",
            "public void afterPropertiesSet()"
        ],
        [
            "void",
            "org.springframework.jms.remoting.JmsInvokerServiceExporter.onMessage(javax.jms.Message, javax.jms.Session)",
            "public void onMessage(javax.jms.Message, javax.jms.Session) throws javax.jms.JMSException"
        ]
    ]
}