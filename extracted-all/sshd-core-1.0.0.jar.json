{"sshd-core-1.0.0.jar": [["synchronized", "org.apache.sshd.agent.common.AbstractAgentClient.void messageReceived(org.apache.sshd.common.util.buffer.Buffer)", "public synchronized void messageReceived(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.agent.common.AbstractAgentProxy.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["void", "org.apache.sshd.agent.common.AbstractAgentProxy.setExecutorService(java.util.concurrent.ExecutorService)", "public void setExecutorService(java.util.concurrent.ExecutorService)"], ["boolean", "org.apache.sshd.agent.common.AbstractAgentProxy.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["void", "org.apache.sshd.agent.common.AbstractAgentProxy.setShutdownOnExit(boolean)", "public void setShutdownOnExit(boolean)"], ["java.util.List<org.apache.sshd.common.util.Pair<java.security.PublicKey, java.lang.String>>", "org.apache.sshd.agent.common.AbstractAgentProxy.getIdentities()", "public java.util.List<org.apache.sshd.common.util.Pair<java.security.PublicKey, java.lang.String>> getIdentities() throws java.io.IOException"], ["byte[]", "org.apache.sshd.agent.common.AbstractAgentProxy.sign(java.security.PublicKey, byte[])", "public byte[] sign(java.security.PublicKey, byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.agent.common.AbstractAgentProxy.addIdentity(java.security.KeyPair, java.lang.String)", "public void addIdentity(java.security.KeyPair, java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.agent.common.AbstractAgentProxy.removeIdentity(java.security.PublicKey)", "public void removeIdentity(java.security.PublicKey) throws java.io.IOException"], ["void", "org.apache.sshd.agent.common.AbstractAgentProxy.removeAllIdentities()", "public void removeAllIdentities() throws java.io.IOException"], ["void", "org.apache.sshd.agent.common.AbstractAgentProxy.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.agent.common.AgentDelegate", "org.apache.sshd.agent.common.AgentDelegate(org.apache.sshd.agent.SshAgent)", "public org.apache.sshd.agent.common.AgentDelegate(org.apache.sshd.agent.SshAgent)"], ["boolean", "org.apache.sshd.agent.common.AgentDelegate.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.agent.common.AgentDelegate.close()", "public void close() throws java.io.IOException"], ["java.util.List<org.apache.sshd.common.util.Pair<java.security.PublicKey, java.lang.String>>", "org.apache.sshd.agent.common.AgentDelegate.getIdentities()", "public java.util.List<org.apache.sshd.common.util.Pair<java.security.PublicKey, java.lang.String>> getIdentities() throws java.io.IOException"], ["byte[]", "org.apache.sshd.agent.common.AgentDelegate.sign(java.security.PublicKey, byte[])", "public byte[] sign(java.security.PublicKey, byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.agent.common.AgentDelegate.addIdentity(java.security.KeyPair, java.lang.String)", "public void addIdentity(java.security.KeyPair, java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.agent.common.AgentDelegate.removeIdentity(java.security.PublicKey)", "public void removeIdentity(java.security.PublicKey) throws java.io.IOException"], ["void", "org.apache.sshd.agent.common.AgentDelegate.removeAllIdentities()", "public void removeAllIdentities() throws java.io.IOException"], ["org.apache.sshd.agent.common.AgentForwardSupport", "org.apache.sshd.agent.common.AgentForwardSupport(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.agent.common.AgentForwardSupport(org.apache.sshd.common.session.ConnectionService)"], ["java.lang.String", "org.apache.sshd.agent.common.AgentForwardSupport.initialize()", "public java.lang.String initialize() throws java.io.IOException"], ["synchronized", "org.apache.sshd.agent.common.AgentForwardSupport.void close()", "public synchronized void close() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.agent.common.AgentForwardSupport.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.sshd.agent.local.AgentForwardedChannel$1.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.agent.local.AgentForwardedChannel$1.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.agent.local.AgentForwardedChannel", "org.apache.sshd.agent.local.AgentForwardedChannel()", "public org.apache.sshd.agent.local.AgentForwardedChannel()"], ["org.apache.sshd.agent.SshAgent", "org.apache.sshd.agent.local.AgentForwardedChannel.getAgent()", "public org.apache.sshd.agent.SshAgent getAgent()"], ["org.apache.sshd.agent.local.AgentImpl", "org.apache.sshd.agent.local.AgentImpl()", "public org.apache.sshd.agent.local.AgentImpl()"], ["boolean", "org.apache.sshd.agent.local.AgentImpl.isOpen()", "public boolean isOpen()"], ["java.util.List<org.apache.sshd.common.util.Pair<java.security.PublicKey, java.lang.String>>", "org.apache.sshd.agent.local.AgentImpl.getIdentities()", "public java.util.List<org.apache.sshd.common.util.Pair<java.security.PublicKey, java.lang.String>> getIdentities() throws java.io.IOException"], ["byte[]", "org.apache.sshd.agent.local.AgentImpl.sign(java.security.PublicKey, byte[])", "public byte[] sign(java.security.PublicKey, byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.agent.local.AgentImpl.addIdentity(java.security.KeyPair, java.lang.String)", "public void addIdentity(java.security.KeyPair, java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.agent.local.AgentImpl.removeIdentity(java.security.PublicKey)", "public void removeIdentity(java.security.PublicKey) throws java.io.IOException"], ["void", "org.apache.sshd.agent.local.AgentImpl.removeAllIdentities()", "public void removeAllIdentities() throws java.io.IOException"], ["void", "org.apache.sshd.agent.local.AgentImpl.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.agent.local.AgentServerProxy", "org.apache.sshd.agent.local.AgentServerProxy(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.agent.local.AgentServerProxy(org.apache.sshd.common.session.ConnectionService) throws java.io.IOException"], ["org.apache.sshd.agent.SshAgent", "org.apache.sshd.agent.local.AgentServerProxy.createClient()", "public org.apache.sshd.agent.SshAgent createClient() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.agent.local.AgentServerProxy.getId()", "public java.lang.String getId()"], ["boolean", "org.apache.sshd.agent.local.AgentServerProxy.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.agent.local.AgentServerProxy.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.agent.local.ChannelAgentForwarding$1.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.agent.local.ChannelAgentForwarding$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient", "org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient(org.apache.sshd.agent.local.ChannelAgentForwarding)", "public org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient(org.apache.sshd.agent.local.ChannelAgentForwarding)"], ["org.apache.sshd.agent.local.ChannelAgentForwarding", "org.apache.sshd.agent.local.ChannelAgentForwarding()", "public org.apache.sshd.agent.local.ChannelAgentForwarding()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.agent.local.ChannelAgentForwarding.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["void", "org.apache.sshd.agent.local.ChannelAgentForwarding.handleEof()", "public void handleEof() throws java.io.IOException"], ["org.apache.sshd.agent.local.ChannelAgentForwardingFactory", "org.apache.sshd.agent.local.ChannelAgentForwardingFactory()", "public org.apache.sshd.agent.local.ChannelAgentForwardingFactory()"], ["java.lang.String", "org.apache.sshd.agent.local.ChannelAgentForwardingFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.channel.Channel", "org.apache.sshd.agent.local.ChannelAgentForwardingFactory.create()", "public org.apache.sshd.common.channel.Channel create()"], ["java.lang.Object", "org.apache.sshd.agent.local.ChannelAgentForwardingFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.agent.local.LocalAgentFactory", "org.apache.sshd.agent.local.LocalAgentFactory()", "public org.apache.sshd.agent.local.LocalAgentFactory()"], ["org.apache.sshd.agent.local.LocalAgentFactory", "org.apache.sshd.agent.local.LocalAgentFactory(org.apache.sshd.agent.SshAgent)", "public org.apache.sshd.agent.local.LocalAgentFactory(org.apache.sshd.agent.SshAgent)"], ["org.apache.sshd.agent.SshAgent", "org.apache.sshd.agent.local.LocalAgentFactory.getAgent()", "public org.apache.sshd.agent.SshAgent getAgent()"], ["org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>", "org.apache.sshd.agent.local.LocalAgentFactory.getChannelForwardingFactory()", "public org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel> getChannelForwardingFactory()"], ["org.apache.sshd.agent.SshAgent", "org.apache.sshd.agent.local.LocalAgentFactory.createClient(org.apache.sshd.common.FactoryManager)", "public org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager) throws java.io.IOException"], ["org.apache.sshd.agent.SshAgentServer", "org.apache.sshd.agent.local.LocalAgentFactory.createServer(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.agent.local.ProxyAgentFactory$1.getId()", "public java.lang.String getId()"], ["boolean", "org.apache.sshd.agent.local.ProxyAgentFactory$1.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.agent.local.ProxyAgentFactory$1.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.agent.local.ProxyAgentFactory", "org.apache.sshd.agent.local.ProxyAgentFactory()", "public org.apache.sshd.agent.local.ProxyAgentFactory()"], ["org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>", "org.apache.sshd.agent.local.ProxyAgentFactory.getChannelForwardingFactory()", "public org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel> getChannelForwardingFactory()"], ["org.apache.sshd.agent.SshAgent", "org.apache.sshd.agent.local.ProxyAgentFactory.createClient(org.apache.sshd.common.FactoryManager)", "public org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager) throws java.io.IOException"], ["org.apache.sshd.agent.SshAgentServer", "org.apache.sshd.agent.local.ProxyAgentFactory.createServer(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService) throws java.io.IOException"], ["org.apache.sshd.agent.unix.AgentClient", "org.apache.sshd.agent.unix.AgentClient(java.lang.String)", "public org.apache.sshd.agent.unix.AgentClient(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.agent.unix.AgentClient", "org.apache.sshd.agent.unix.AgentClient(java.lang.String, java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.agent.unix.AgentClient(java.lang.String, java.util.concurrent.ExecutorService, boolean) throws java.io.IOException"], ["boolean", "org.apache.sshd.agent.unix.AgentClient.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.agent.unix.AgentClient.run()", "public void run()"], ["void", "org.apache.sshd.agent.unix.AgentClient.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.agent.unix.AgentForwardedChannel", "org.apache.sshd.agent.unix.AgentForwardedChannel(long)", "public org.apache.sshd.agent.unix.AgentForwardedChannel(long)"], ["void", "org.apache.sshd.agent.unix.AgentForwardedChannel.run()", "public void run()"], ["void", "org.apache.sshd.agent.unix.AgentServer$1.run()", "public void run()"], ["org.apache.sshd.agent.unix.AgentServer$SshAgentSession", "org.apache.sshd.agent.unix.AgentServer$SshAgentSession(long, org.apache.sshd.agent.SshAgent)", "public org.apache.sshd.agent.unix.AgentServer$SshAgentSession(long, org.apache.sshd.agent.SshAgent)"], ["void", "org.apache.sshd.agent.unix.AgentServer$SshAgentSession.run()", "public void run()"], ["org.apache.sshd.agent.unix.AgentServer", "org.apache.sshd.agent.unix.AgentServer()", "public org.apache.sshd.agent.unix.AgentServer()"], ["org.apache.sshd.agent.unix.AgentServer", "org.apache.sshd.agent.unix.AgentServer(java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.agent.unix.AgentServer(java.util.concurrent.ExecutorService, boolean)"], ["org.apache.sshd.agent.unix.AgentServer", "org.apache.sshd.agent.unix.AgentServer(org.apache.sshd.agent.SshAgent, java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.agent.unix.AgentServer(org.apache.sshd.agent.SshAgent, java.util.concurrent.ExecutorService, boolean)"], ["org.apache.sshd.agent.SshAgent", "org.apache.sshd.agent.unix.AgentServer.getAgent()", "public org.apache.sshd.agent.SshAgent getAgent()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.agent.unix.AgentServer.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["boolean", "org.apache.sshd.agent.unix.AgentServer.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["java.lang.String", "org.apache.sshd.agent.unix.AgentServer.start()", "public java.lang.String start() throws java.lang.Exception"], ["void", "org.apache.sshd.agent.unix.AgentServer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.agent.unix.AgentServerProxy$1.run()", "public void run()"], ["org.apache.sshd.agent.unix.AgentServerProxy", "org.apache.sshd.agent.unix.AgentServerProxy(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.agent.unix.AgentServerProxy(org.apache.sshd.common.session.ConnectionService) throws java.io.IOException"], ["org.apache.sshd.agent.unix.AgentServerProxy", "org.apache.sshd.agent.unix.AgentServerProxy(org.apache.sshd.common.session.ConnectionService, java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.agent.unix.AgentServerProxy(org.apache.sshd.common.session.ConnectionService, java.util.concurrent.ExecutorService, boolean) throws java.io.IOException"], ["boolean", "org.apache.sshd.agent.unix.AgentServerProxy.isOpen()", "public boolean isOpen()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.agent.unix.AgentServerProxy.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["boolean", "org.apache.sshd.agent.unix.AgentServerProxy.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["java.lang.String", "org.apache.sshd.agent.unix.AgentServerProxy.getId()", "public java.lang.String getId()"], ["synchronized", "org.apache.sshd.agent.unix.AgentServerProxy.void close()", "public synchronized void close() throws java.io.IOException"], ["void", "org.apache.sshd.agent.unix.ChannelAgentForwarding$1.run()", "public void run()"], ["void", "org.apache.sshd.agent.unix.ChannelAgentForwarding$2.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.agent.unix.ChannelAgentForwarding$2.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.agent.unix.ChannelAgentForwarding", "org.apache.sshd.agent.unix.ChannelAgentForwarding()", "public org.apache.sshd.agent.unix.ChannelAgentForwarding()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.agent.unix.ChannelAgentForwarding.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["void", "org.apache.sshd.agent.unix.ChannelAgentForwarding.handleEof()", "public void handleEof() throws java.io.IOException"], ["org.apache.sshd.agent.unix.ChannelAgentForwardingFactory", "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory()", "public org.apache.sshd.agent.unix.ChannelAgentForwardingFactory()"], ["java.lang.String", "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory.getName()", "public java.lang.String getName()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["boolean", "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["org.apache.sshd.common.channel.Channel", "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory.create()", "public org.apache.sshd.common.channel.Channel create()"], ["java.lang.Object", "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory.create()", "public java.lang.Object create()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.agent.unix.UnixAgentFactory$1.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["boolean", "org.apache.sshd.agent.unix.UnixAgentFactory$1.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["org.apache.sshd.agent.unix.UnixAgentFactory", "org.apache.sshd.agent.unix.UnixAgentFactory()", "public org.apache.sshd.agent.unix.UnixAgentFactory()"], ["org.apache.sshd.agent.unix.UnixAgentFactory", "org.apache.sshd.agent.unix.UnixAgentFactory(java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.agent.unix.UnixAgentFactory(java.util.concurrent.ExecutorService, boolean)"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.agent.unix.UnixAgentFactory.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["void", "org.apache.sshd.agent.unix.UnixAgentFactory.setExecutorService(java.util.concurrent.ExecutorService)", "public void setExecutorService(java.util.concurrent.ExecutorService)"], ["boolean", "org.apache.sshd.agent.unix.UnixAgentFactory.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["void", "org.apache.sshd.agent.unix.UnixAgentFactory.setShutdownOnExit(boolean)", "public void setShutdownOnExit(boolean)"], ["org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>", "org.apache.sshd.agent.unix.UnixAgentFactory.getChannelForwardingFactory()", "public org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel> getChannelForwardingFactory()"], ["org.apache.sshd.agent.SshAgent", "org.apache.sshd.agent.unix.UnixAgentFactory.createClient(org.apache.sshd.common.FactoryManager)", "public org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager) throws java.io.IOException"], ["org.apache.sshd.agent.SshAgentServer", "org.apache.sshd.agent.unix.UnixAgentFactory.createServer(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService) throws java.io.IOException"], ["org.apache.sshd.client.auth.UserAuthKeyboardInteractive", "org.apache.sshd.client.auth.UserAuthKeyboardInteractive()", "public org.apache.sshd.client.auth.UserAuthKeyboardInteractive()"], ["void", "org.apache.sshd.client.auth.UserAuthKeyboardInteractive.init(org.apache.sshd.client.session.ClientSession, java.lang.String, java.util.Collection<?>)", "public void init(org.apache.sshd.client.session.ClientSession, java.lang.String, java.util.Collection<?>) throws java.lang.Exception"], ["boolean", "org.apache.sshd.client.auth.UserAuthKeyboardInteractive.process(org.apache.sshd.common.util.buffer.Buffer)", "public boolean process(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["void", "org.apache.sshd.client.auth.UserAuthKeyboardInteractive.destroy()", "public void destroy()"], ["org.apache.sshd.client.auth.UserAuthKeyboardInteractiveFactory", "org.apache.sshd.client.auth.UserAuthKeyboardInteractiveFactory()", "public org.apache.sshd.client.auth.UserAuthKeyboardInteractiveFactory()"], ["java.lang.String", "org.apache.sshd.client.auth.UserAuthKeyboardInteractiveFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.client.auth.UserAuth", "org.apache.sshd.client.auth.UserAuthKeyboardInteractiveFactory.create()", "public org.apache.sshd.client.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.client.auth.UserAuthKeyboardInteractiveFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.client.auth.UserAuthPassword", "org.apache.sshd.client.auth.UserAuthPassword()", "public org.apache.sshd.client.auth.UserAuthPassword()"], ["void", "org.apache.sshd.client.auth.UserAuthPassword.init(org.apache.sshd.client.session.ClientSession, java.lang.String, java.util.Collection<?>)", "public void init(org.apache.sshd.client.session.ClientSession, java.lang.String, java.util.Collection<?>) throws java.lang.Exception"], ["boolean", "org.apache.sshd.client.auth.UserAuthPassword.process(org.apache.sshd.common.util.buffer.Buffer)", "public boolean process(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["void", "org.apache.sshd.client.auth.UserAuthPassword.destroy()", "public void destroy()"], ["org.apache.sshd.client.auth.UserAuthPasswordFactory", "org.apache.sshd.client.auth.UserAuthPasswordFactory()", "public org.apache.sshd.client.auth.UserAuthPasswordFactory()"], ["java.lang.String", "org.apache.sshd.client.auth.UserAuthPasswordFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.client.auth.UserAuth", "org.apache.sshd.client.auth.UserAuthPasswordFactory.create()", "public org.apache.sshd.client.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.client.auth.UserAuthPasswordFactory.create()", "public java.lang.Object create()"], ["java.security.PublicKey", "org.apache.sshd.client.auth.UserAuthPublicKey$KeyAgentIdentity.getPublicKey()", "public java.security.PublicKey getPublicKey()"], ["byte[]", "org.apache.sshd.client.auth.UserAuthPublicKey$KeyAgentIdentity.sign(byte[])", "public byte[] sign(byte[]) throws java.lang.Exception"], ["java.security.PublicKey", "org.apache.sshd.client.auth.UserAuthPublicKey$KeyPairIdentity.getPublicKey()", "public java.security.PublicKey getPublicKey()"], ["byte[]", "org.apache.sshd.client.auth.UserAuthPublicKey$KeyPairIdentity.sign(byte[])", "public byte[] sign(byte[]) throws java.lang.Exception"], ["org.apache.sshd.client.auth.UserAuthPublicKey", "org.apache.sshd.client.auth.UserAuthPublicKey()", "public org.apache.sshd.client.auth.UserAuthPublicKey()"], ["void", "org.apache.sshd.client.auth.UserAuthPublicKey.init(org.apache.sshd.client.session.ClientSession, java.lang.String, java.util.Collection<?>)", "public void init(org.apache.sshd.client.session.ClientSession, java.lang.String, java.util.Collection<?>) throws java.lang.Exception"], ["boolean", "org.apache.sshd.client.auth.UserAuthPublicKey.process(org.apache.sshd.common.util.buffer.Buffer)", "public boolean process(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["void", "org.apache.sshd.client.auth.UserAuthPublicKey.destroy()", "public void destroy()"], ["org.apache.sshd.client.auth.UserAuthPublicKeyFactory", "org.apache.sshd.client.auth.UserAuthPublicKeyFactory()", "public org.apache.sshd.client.auth.UserAuthPublicKeyFactory()"], ["java.lang.String", "org.apache.sshd.client.auth.UserAuthPublicKeyFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.client.auth.UserAuth", "org.apache.sshd.client.auth.UserAuthPublicKeyFactory.create()", "public org.apache.sshd.client.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.client.auth.UserAuthPublicKeyFactory.create()", "public java.lang.Object create()"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel$1.run()", "public void run()"], ["org.apache.sshd.client.channel.AbstractClientChannel$ExitSignalChannelRequestHandler", "org.apache.sshd.client.channel.AbstractClientChannel$ExitSignalChannelRequestHandler(org.apache.sshd.client.channel.AbstractClientChannel)", "public org.apache.sshd.client.channel.AbstractClientChannel$ExitSignalChannelRequestHandler(org.apache.sshd.client.channel.AbstractClientChannel)"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.client.channel.AbstractClientChannel$ExitSignalChannelRequestHandler.process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.client.channel.AbstractClientChannel$ExitSignalChannelRequestHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.client.channel.AbstractClientChannel$ExitStatusChannelRequestHandler", "org.apache.sshd.client.channel.AbstractClientChannel$ExitStatusChannelRequestHandler(org.apache.sshd.client.channel.AbstractClientChannel)", "public org.apache.sshd.client.channel.AbstractClientChannel$ExitStatusChannelRequestHandler(org.apache.sshd.client.channel.AbstractClientChannel)"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.client.channel.AbstractClientChannel$ExitStatusChannelRequestHandler.process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.client.channel.AbstractClientChannel$ExitStatusChannelRequestHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.client.channel.ClientChannel$Streaming", "org.apache.sshd.client.channel.AbstractClientChannel.getStreaming()", "public org.apache.sshd.client.channel.ClientChannel$Streaming getStreaming()"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel.setStreaming(org.apache.sshd.client.channel.ClientChannel$Streaming)", "public void setStreaming(org.apache.sshd.client.channel.ClientChannel$Streaming)"], ["org.apache.sshd.common.io.IoOutputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getAsyncIn()", "public org.apache.sshd.common.io.IoOutputStream getAsyncIn()"], ["org.apache.sshd.common.io.IoInputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getAsyncOut()", "public org.apache.sshd.common.io.IoInputStream getAsyncOut()"], ["org.apache.sshd.common.io.IoInputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getAsyncErr()", "public org.apache.sshd.common.io.IoInputStream getAsyncErr()"], ["java.io.OutputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getInvertedIn()", "public java.io.OutputStream getInvertedIn()"], ["java.io.InputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getIn()", "public java.io.InputStream getIn()"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel.setIn(java.io.InputStream)", "public void setIn(java.io.InputStream)"], ["java.io.InputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getInvertedOut()", "public java.io.InputStream getInvertedOut()"], ["java.io.OutputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getOut()", "public java.io.OutputStream getOut()"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel.setOut(java.io.OutputStream)", "public void setOut(java.io.OutputStream)"], ["java.io.InputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getInvertedErr()", "public java.io.InputStream getInvertedErr()"], ["java.io.OutputStream", "org.apache.sshd.client.channel.AbstractClientChannel.getErr()", "public java.io.OutputStream getErr()"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel.setErr(java.io.OutputStream)", "public void setErr(java.io.OutputStream)"], ["int", "org.apache.sshd.client.channel.AbstractClientChannel.waitFor(int, long)", "public int waitFor(int, long)"], ["synchronized", "org.apache.sshd.client.channel.AbstractClientChannel.org.apache.sshd.client.future.OpenFuture open()", "public synchronized org.apache.sshd.client.future.OpenFuture open() throws java.io.IOException"], ["org.apache.sshd.client.future.OpenFuture", "org.apache.sshd.client.channel.AbstractClientChannel.open(int, int, int, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.client.future.OpenFuture open(int, int, int, org.apache.sshd.common.util.buffer.Buffer)"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel.handleOpenSuccess(int, int, int, org.apache.sshd.common.util.buffer.Buffer)", "public void handleOpenSuccess(int, int, int, org.apache.sshd.common.util.buffer.Buffer)"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel.handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)", "public void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)"], ["void", "org.apache.sshd.client.channel.AbstractClientChannel.handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)", "public void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["java.lang.Integer", "org.apache.sshd.client.channel.AbstractClientChannel.getExitStatus()", "public java.lang.Integer getExitStatus()"], ["org.apache.sshd.client.channel.ChannelDirectTcpip", "org.apache.sshd.client.channel.ChannelDirectTcpip(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress)", "public org.apache.sshd.client.channel.ChannelDirectTcpip(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress)"], ["org.apache.sshd.client.future.OpenFuture", "org.apache.sshd.client.channel.ChannelDirectTcpip.open()", "public org.apache.sshd.client.future.OpenFuture open() throws java.io.IOException"], ["org.apache.sshd.client.channel.ChannelExec", "org.apache.sshd.client.channel.ChannelExec(java.lang.String)", "public org.apache.sshd.client.channel.ChannelExec(java.lang.String)"], ["void", "org.apache.sshd.client.channel.ChannelSession$2.run()", "public void run()"], ["org.apache.sshd.client.channel.ChannelSession", "org.apache.sshd.client.channel.ChannelSession()", "public org.apache.sshd.client.channel.ChannelSession()"], ["org.apache.sshd.client.channel.ChannelShell", "org.apache.sshd.client.channel.ChannelShell()", "public org.apache.sshd.client.channel.ChannelShell()"], ["void", "org.apache.sshd.client.channel.ChannelSubsystem$1.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.client.channel.ChannelSubsystem$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.client.channel.ChannelSubsystem", "org.apache.sshd.client.channel.ChannelSubsystem(java.lang.String)", "public org.apache.sshd.client.channel.ChannelSubsystem(java.lang.String)"], ["java.lang.String", "org.apache.sshd.client.channel.ChannelSubsystem.getSubsystem()", "public final java.lang.String getSubsystem()"], ["void", "org.apache.sshd.client.channel.ChannelSubsystem.onClose(java.lang.Runnable)", "public void onClose(java.lang.Runnable)"], ["org.apache.sshd.client.channel.ClientChannel$Streaming[]", "org.apache.sshd.client.channel.ClientChannel$Streaming.values()", "public static org.apache.sshd.client.channel.ClientChannel$Streaming[] values()"], ["org.apache.sshd.client.channel.ClientChannel$Streaming", "org.apache.sshd.client.channel.ClientChannel$Streaming.valueOf(java.lang.String)", "public static org.apache.sshd.client.channel.ClientChannel$Streaming valueOf(java.lang.String)"], ["org.apache.sshd.client.channel.PtyCapableChannelSession", "org.apache.sshd.client.channel.PtyCapableChannelSession(boolean)", "public org.apache.sshd.client.channel.PtyCapableChannelSession(boolean)"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setupSensibleDefaultPty()", "public void setupSensibleDefaultPty()"], ["boolean", "org.apache.sshd.client.channel.PtyCapableChannelSession.isAgentForwarding()", "public boolean isAgentForwarding()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setAgentForwarding(boolean)", "public void setAgentForwarding(boolean)"], ["boolean", "org.apache.sshd.client.channel.PtyCapableChannelSession.isUsePty()", "public boolean isUsePty()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setUsePty(boolean)", "public void setUsePty(boolean)"], ["java.lang.String", "org.apache.sshd.client.channel.PtyCapableChannelSession.getPtyType()", "public java.lang.String getPtyType()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setPtyType(java.lang.String)", "public void setPtyType(java.lang.String)"], ["int", "org.apache.sshd.client.channel.PtyCapableChannelSession.getPtyColumns()", "public int getPtyColumns()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setPtyColumns(int)", "public void setPtyColumns(int)"], ["int", "org.apache.sshd.client.channel.PtyCapableChannelSession.getPtyLines()", "public int getPtyLines()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setPtyLines(int)", "public void setPtyLines(int)"], ["int", "org.apache.sshd.client.channel.PtyCapableChannelSession.getPtyWidth()", "public int getPtyWidth()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setPtyWidth(int)", "public void setPtyWidth(int)"], ["int", "org.apache.sshd.client.channel.PtyCapableChannelSession.getPtyHeight()", "public int getPtyHeight()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setPtyHeight(int)", "public void setPtyHeight(int)"], ["java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer>", "org.apache.sshd.client.channel.PtyCapableChannelSession.getPtyModes()", "public java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer> getPtyModes()"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setPtyModes(java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer>)", "public void setPtyModes(java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer>)"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.setEnv(java.lang.String, java.lang.String)", "public void setEnv(java.lang.String, java.lang.String)"], ["void", "org.apache.sshd.client.channel.PtyCapableChannelSession.sendWindowChange(int, int, int, int)", "public void sendWindowChange(int, int, int, int) throws java.io.IOException"], ["org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>", "org.apache.sshd.client.ClientBuilder$1.transform(org.apache.sshd.common.kex.DHFactory)", "public org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange> transform(org.apache.sshd.common.kex.DHFactory)"], ["java.lang.Object", "org.apache.sshd.client.ClientBuilder$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.apache.sshd.client.ClientBuilder", "org.apache.sshd.client.ClientBuilder()", "public org.apache.sshd.client.ClientBuilder()"], ["org.apache.sshd.client.ClientBuilder", "org.apache.sshd.client.ClientBuilder.serverKeyVerifier(org.apache.sshd.client.ServerKeyVerifier)", "public org.apache.sshd.client.ClientBuilder serverKeyVerifier(org.apache.sshd.client.ServerKeyVerifier)"], ["org.apache.sshd.client.SshClient", "org.apache.sshd.client.ClientBuilder.build(boolean)", "public org.apache.sshd.client.SshClient build(boolean)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>", "org.apache.sshd.client.ClientBuilder.setUpDefaultKeyExchanges(boolean)", "public static java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>> setUpDefaultKeyExchanges(boolean)"], ["org.apache.sshd.client.ClientBuilder", "org.apache.sshd.client.ClientBuilder.builder()", "public static org.apache.sshd.client.ClientBuilder builder()"], ["org.apache.sshd.common.AbstractFactoryManager", "org.apache.sshd.client.ClientBuilder.build(boolean)", "public org.apache.sshd.common.AbstractFactoryManager build(boolean)"], ["java.lang.String", "org.apache.sshd.client.config.keys.ClientIdentity$1.transform(java.lang.String)", "public java.lang.String transform(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.client.config.keys.ClientIdentity$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["java.lang.String", "org.apache.sshd.client.config.keys.ClientIdentity.getIdentityType(java.lang.String)", "public static java.lang.String getIdentityType(java.lang.String)"], ["java.lang.String", "org.apache.sshd.client.config.keys.ClientIdentity.getIdentityFileName(org.apache.sshd.common.NamedResource)", "public static java.lang.String getIdentityFileName(org.apache.sshd.common.NamedResource)"], ["java.lang.String", "org.apache.sshd.client.config.keys.ClientIdentity.getIdentityFileName(java.lang.String)", "public static java.lang.String getIdentityFileName(java.lang.String)"], ["<C extends org.apache.sshd.client.SshClient> C", "org.apache.sshd.client.config.keys.ClientIdentity.setKeyPairProvider(C, boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...)", "public static <C extends org.apache.sshd.client.SshClient> C setKeyPairProvider(C, boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["<C extends org.apache.sshd.client.SshClient> C", "org.apache.sshd.client.config.keys.ClientIdentity.setKeyPairProvider(C, java.nio.file.Path, boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...)", "public static <C extends org.apache.sshd.client.SshClient> C setKeyPairProvider(C, java.nio.file.Path, boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["org.apache.sshd.common.keyprovider.KeyPairProvider", "org.apache.sshd.client.config.keys.ClientIdentity.loadDefaultKeyPairProvider(boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...)", "public static org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["org.apache.sshd.common.keyprovider.KeyPairProvider", "org.apache.sshd.client.config.keys.ClientIdentity.loadDefaultKeyPairProvider(java.nio.file.Path, boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...)", "public static org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(java.nio.file.Path, boolean, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.util.Map<java.lang.String, java.security.KeyPair>", "org.apache.sshd.client.config.keys.ClientIdentity.loadDefaultIdentities(boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...)", "public static java.util.Map<java.lang.String, java.security.KeyPair> loadDefaultIdentities(boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.util.Map<java.lang.String, java.security.KeyPair>", "org.apache.sshd.client.config.keys.ClientIdentity.loadDefaultIdentities(java.nio.file.Path, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...)", "public static java.util.Map<java.lang.String, java.security.KeyPair> loadDefaultIdentities(java.nio.file.Path, boolean, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.nio.file.Path", "org.apache.sshd.client.config.keys.ClientIdentity.getDefaultUserIdentitiesFolder()", "public static java.nio.file.Path getDefaultUserIdentitiesFolder() throws java.io.IOException"], ["java.util.Map<java.lang.String, java.security.KeyPair>", "org.apache.sshd.client.config.keys.ClientIdentity.loadIdentities(java.nio.file.Path, boolean, java.util.Collection<java.lang.String>, org.apache.sshd.common.util.Transformer<java.lang.String, java.lang.String>, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...)", "public static java.util.Map<java.lang.String, java.security.KeyPair> loadIdentities(java.nio.file.Path, boolean, java.util.Collection<java.lang.String>, org.apache.sshd.common.util.Transformer<java.lang.String, java.lang.String>, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.util.Map<java.lang.String, java.nio.file.Path>", "org.apache.sshd.client.config.keys.ClientIdentity.scanIdentitiesFolder(java.nio.file.Path, boolean, java.util.Collection<java.lang.String>, org.apache.sshd.common.util.Transformer<java.lang.String, java.lang.String>, java.nio.file.LinkOption...)", "public static java.util.Map<java.lang.String, java.nio.file.Path> scanIdentitiesFolder(java.nio.file.Path, boolean, java.util.Collection<java.lang.String>, org.apache.sshd.common.util.Transformer<java.lang.String, java.lang.String>, java.nio.file.LinkOption...) throws java.io.IOException"], ["org.apache.sshd.client.future.DefaultAuthFuture", "org.apache.sshd.client.future.DefaultAuthFuture(java.lang.Object)", "public org.apache.sshd.client.future.DefaultAuthFuture(java.lang.Object)"], ["void", "org.apache.sshd.client.future.DefaultAuthFuture.verify()", "public void verify() throws java.io.IOException"], ["void", "org.apache.sshd.client.future.DefaultAuthFuture.verify(long, java.util.concurrent.TimeUnit)", "public void verify(long, java.util.concurrent.TimeUnit) throws java.io.IOException"], ["void", "org.apache.sshd.client.future.DefaultAuthFuture.verify(long)", "public void verify(long) throws java.io.IOException"], ["java.lang.Throwable", "org.apache.sshd.client.future.DefaultAuthFuture.getException()", "public java.lang.Throwable getException()"], ["boolean", "org.apache.sshd.client.future.DefaultAuthFuture.isSuccess()", "public boolean isSuccess()"], ["boolean", "org.apache.sshd.client.future.DefaultAuthFuture.isFailure()", "public boolean isFailure()"], ["void", "org.apache.sshd.client.future.DefaultAuthFuture.setAuthed(boolean)", "public void setAuthed(boolean)"], ["void", "org.apache.sshd.client.future.DefaultAuthFuture.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["org.apache.sshd.client.future.DefaultConnectFuture", "org.apache.sshd.client.future.DefaultConnectFuture(java.lang.Object)", "public org.apache.sshd.client.future.DefaultConnectFuture(java.lang.Object)"], ["org.apache.sshd.client.future.ConnectFuture", "org.apache.sshd.client.future.DefaultConnectFuture.verify(long, java.util.concurrent.TimeUnit)", "public org.apache.sshd.client.future.ConnectFuture verify(long, java.util.concurrent.TimeUnit) throws java.io.IOException"], ["org.apache.sshd.client.future.ConnectFuture", "org.apache.sshd.client.future.DefaultConnectFuture.verify(long)", "public org.apache.sshd.client.future.ConnectFuture verify(long) throws java.io.IOException"], ["org.apache.sshd.client.session.ClientSession", "org.apache.sshd.client.future.DefaultConnectFuture.getSession()", "public org.apache.sshd.client.session.ClientSession getSession()"], ["java.lang.Throwable", "org.apache.sshd.client.future.DefaultConnectFuture.getException()", "public java.lang.Throwable getException()"], ["boolean", "org.apache.sshd.client.future.DefaultConnectFuture.isConnected()", "public boolean isConnected()"], ["void", "org.apache.sshd.client.future.DefaultConnectFuture.setSession(org.apache.sshd.client.session.ClientSession)", "public void setSession(org.apache.sshd.client.session.ClientSession)"], ["void", "org.apache.sshd.client.future.DefaultConnectFuture.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["org.apache.sshd.client.future.DefaultOpenFuture", "org.apache.sshd.client.future.DefaultOpenFuture(java.lang.Object)", "public org.apache.sshd.client.future.DefaultOpenFuture(java.lang.Object)"], ["void", "org.apache.sshd.client.future.DefaultOpenFuture.verify()", "public void verify() throws java.io.IOException"], ["void", "org.apache.sshd.client.future.DefaultOpenFuture.verify(long, java.util.concurrent.TimeUnit)", "public void verify(long, java.util.concurrent.TimeUnit) throws java.io.IOException"], ["void", "org.apache.sshd.client.future.DefaultOpenFuture.verify(long)", "public void verify(long) throws java.io.IOException"], ["java.lang.Throwable", "org.apache.sshd.client.future.DefaultOpenFuture.getException()", "public java.lang.Throwable getException()"], ["boolean", "org.apache.sshd.client.future.DefaultOpenFuture.isOpened()", "public boolean isOpened()"], ["void", "org.apache.sshd.client.future.DefaultOpenFuture.setOpened()", "public void setOpened()"], ["void", "org.apache.sshd.client.future.DefaultOpenFuture.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["void", "org.apache.sshd.client.kex.AbstractDHClientKeyExchange.init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[])", "public void init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[]) throws java.lang.Exception"], ["java.security.PublicKey", "org.apache.sshd.client.kex.AbstractDHClientKeyExchange.getServerKey()", "public java.security.PublicKey getServerKey()"], ["java.lang.String", "org.apache.sshd.client.kex.DHGClient$1.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.kex.KeyExchange", "org.apache.sshd.client.kex.DHGClient$1.create()", "public org.apache.sshd.common.kex.KeyExchange create()"], ["java.lang.String", "org.apache.sshd.client.kex.DHGClient$1.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.sshd.client.kex.DHGClient$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.kex.KeyExchangeFactory", "org.apache.sshd.client.kex.DHGClient.newFactory(org.apache.sshd.common.kex.DHFactory)", "public static final org.apache.sshd.common.kex.KeyExchangeFactory newFactory(org.apache.sshd.common.kex.DHFactory)"], ["void", "org.apache.sshd.client.kex.DHGClient.init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[])", "public void init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[]) throws java.lang.Exception"], ["boolean", "org.apache.sshd.client.kex.DHGClient.next(org.apache.sshd.common.util.buffer.Buffer)", "public boolean next(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.kex.DHGEXClient$1.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.kex.KeyExchange", "org.apache.sshd.client.kex.DHGEXClient$1.create()", "public org.apache.sshd.common.kex.KeyExchange create()"], ["java.lang.String", "org.apache.sshd.client.kex.DHGEXClient$1.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.sshd.client.kex.DHGEXClient$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.kex.KeyExchangeFactory", "org.apache.sshd.client.kex.DHGEXClient.newFactory(org.apache.sshd.common.kex.DHFactory)", "public static org.apache.sshd.common.kex.KeyExchangeFactory newFactory(org.apache.sshd.common.kex.DHFactory)"], ["void", "org.apache.sshd.client.kex.DHGEXClient.init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[])", "public void init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[]) throws java.lang.Exception"], ["boolean", "org.apache.sshd.client.kex.DHGEXClient.next(org.apache.sshd.common.util.buffer.Buffer)", "public boolean next(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier", "org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier()", "public org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier()"], ["boolean", "org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier.verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)", "public boolean verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)"], ["org.apache.sshd.client.keyverifier.RequiredServerKeyVerifier", "org.apache.sshd.client.keyverifier.RequiredServerKeyVerifier(java.security.PublicKey)", "public org.apache.sshd.client.keyverifier.RequiredServerKeyVerifier(java.security.PublicKey)"], ["java.security.PublicKey", "org.apache.sshd.client.keyverifier.RequiredServerKeyVerifier.getRequiredKey()", "public final java.security.PublicKey getRequiredKey()"], ["boolean", "org.apache.sshd.client.keyverifier.RequiredServerKeyVerifier.verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)", "public boolean verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)"], ["boolean", "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier.isAccepted()", "public final boolean isAccepted()"], ["boolean", "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier.verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)", "public final boolean verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)"], ["void", "org.apache.sshd.client.scp.AbstractScpClient$1.execute(org.apache.sshd.common.scp.ScpHelper, java.util.Collection<java.lang.String>, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void execute(org.apache.sshd.common.scp.ScpHelper, java.util.Collection<java.lang.String>, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient$2.execute(org.apache.sshd.common.scp.ScpHelper, java.util.Collection<java.nio.file.Path>, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void execute(org.apache.sshd.common.scp.ScpHelper, java.util.Collection<java.nio.file.Path>, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.download(java.lang.String, java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...)", "public void download(java.lang.String, java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.download(java.lang.String[], java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...)", "public void download(java.lang.String[], java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.download(java.lang.String[], java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void download(java.lang.String[], java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.download(java.lang.String[], java.nio.file.Path, org.apache.sshd.client.scp.ScpClient$Option...)", "public void download(java.lang.String[], java.nio.file.Path, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.download(java.lang.String[], java.nio.file.Path, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void download(java.lang.String[], java.nio.file.Path, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.download(java.lang.String, java.nio.file.Path, org.apache.sshd.client.scp.ScpClient$Option...)", "public void download(java.lang.String, java.nio.file.Path, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.download(java.lang.String, java.nio.file.Path, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void download(java.lang.String, java.nio.file.Path, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["byte[]", "org.apache.sshd.client.scp.AbstractScpClient.downloadBytes(java.lang.String)", "public byte[] downloadBytes(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.lang.String, java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...)", "public void upload(java.lang.String, java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void upload(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.lang.String[], java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...)", "public void upload(java.lang.String[], java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.nio.file.Path, java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...)", "public void upload(java.nio.file.Path, java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.nio.file.Path, java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void upload(java.nio.file.Path, java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.nio.file.Path[], java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...)", "public void upload(java.nio.file.Path[], java.lang.String, org.apache.sshd.client.scp.ScpClient$Option...) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(byte[], java.lang.String, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp)", "public void upload(byte[], java.lang.String, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(byte[], int, int, java.lang.String, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp)", "public void upload(byte[], int, int, java.lang.String, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.lang.String[], java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void upload(java.lang.String[], java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.AbstractScpClient.upload(java.nio.file.Path[], java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void upload(java.nio.file.Path[], java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.scp.AbstractScpClient.createSendCommand(java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public static java.lang.String createSendCommand(java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)"], ["java.lang.String", "org.apache.sshd.client.scp.AbstractScpClient.createReceiveCommand(java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public static java.lang.String createReceiveCommand(java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)"], ["org.apache.sshd.client.scp.DefaultScpClient$StreamResolver", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver(java.lang.String, java.nio.file.Path, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp, long, java.io.InputStream, java.lang.String)", "public org.apache.sshd.client.scp.DefaultScpClient$StreamResolver(java.lang.String, java.nio.file.Path, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp, long, java.io.InputStream, java.lang.String)"], ["java.lang.String", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver.getFileName()", "public java.lang.String getFileName() throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver.getEventListenerFilePath()", "public java.nio.file.Path getEventListenerFilePath()"], ["java.util.Collection<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver.getPermissions()", "public java.util.Collection<java.nio.file.attribute.PosixFilePermission> getPermissions() throws java.io.IOException"], ["org.apache.sshd.common.scp.ScpTimestamp", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver.getTimestamp()", "public org.apache.sshd.common.scp.ScpTimestamp getTimestamp() throws java.io.IOException"], ["long", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver.getSize()", "public long getSize() throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver.resolveSourceStream()", "public java.io.InputStream resolveSourceStream() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.scp.DefaultScpClient$StreamResolver.toString()", "public java.lang.String toString()"], ["org.apache.sshd.client.scp.DefaultScpClient", "org.apache.sshd.client.scp.DefaultScpClient(org.apache.sshd.client.session.ClientSession)", "public org.apache.sshd.client.scp.DefaultScpClient(org.apache.sshd.client.session.ClientSession)"], ["org.apache.sshd.client.scp.DefaultScpClient", "org.apache.sshd.client.scp.DefaultScpClient(org.apache.sshd.client.session.ClientSession, org.apache.sshd.common.scp.ScpTransferEventListener)", "public org.apache.sshd.client.scp.DefaultScpClient(org.apache.sshd.client.session.ClientSession, org.apache.sshd.common.scp.ScpTransferEventListener)"], ["void", "org.apache.sshd.client.scp.DefaultScpClient.download(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>)", "public void download(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.scp.ScpClient$Option>) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.DefaultScpClient.download(java.lang.String, java.io.OutputStream)", "public void download(java.lang.String, java.io.OutputStream) throws java.io.IOException"], ["void", "org.apache.sshd.client.scp.DefaultScpClient.upload(java.io.InputStream, java.lang.String, long, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp)", "public void upload(java.io.InputStream, java.lang.String, long, java.util.Collection<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp) throws java.io.IOException"], ["org.apache.sshd.client.scp.ScpClient$Option[]", "org.apache.sshd.client.scp.ScpClient$Option.values()", "public static org.apache.sshd.client.scp.ScpClient$Option[] values()"], ["org.apache.sshd.client.scp.ScpClient$Option", "org.apache.sshd.client.scp.ScpClient$Option.valueOf(java.lang.String)", "public static org.apache.sshd.client.scp.ScpClient$Option valueOf(java.lang.String)"], ["void", "org.apache.sshd.client.session.ClientConnectionService$1.run()", "public void run()"], ["org.apache.sshd.client.session.ClientConnectionService", "org.apache.sshd.client.session.ClientConnectionService(org.apache.sshd.common.session.Session)", "public org.apache.sshd.client.session.ClientConnectionService(org.apache.sshd.common.session.Session) throws org.apache.sshd.common.SshException"], ["void", "org.apache.sshd.client.session.ClientConnectionService.start()", "public void start()"], ["java.lang.String", "org.apache.sshd.client.session.ClientConnectionService.initAgentForward()", "public java.lang.String initAgentForward() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.session.ClientConnectionService.createX11Display(boolean, java.lang.String, java.lang.String, int)", "public java.lang.String createX11Display(boolean, java.lang.String, java.lang.String, int) throws java.io.IOException"], ["org.apache.sshd.client.session.ClientConnectionServiceFactory", "org.apache.sshd.client.session.ClientConnectionServiceFactory()", "public org.apache.sshd.client.session.ClientConnectionServiceFactory()"], ["java.lang.String", "org.apache.sshd.client.session.ClientConnectionServiceFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.Service", "org.apache.sshd.client.session.ClientConnectionServiceFactory.create(org.apache.sshd.common.session.Session)", "public org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session) throws java.io.IOException"], ["int", "org.apache.sshd.client.session.ClientSessionImpl$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.sshd.client.session.ClientSessionImpl$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.sshd.client.session.ClientSessionImpl", "org.apache.sshd.client.session.ClientSessionImpl(org.apache.sshd.client.ClientFactoryManager, org.apache.sshd.common.io.IoSession)", "public org.apache.sshd.client.session.ClientSessionImpl(org.apache.sshd.client.ClientFactoryManager, org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["org.apache.sshd.client.ClientFactoryManager", "org.apache.sshd.client.session.ClientSessionImpl.getFactoryManager()", "public org.apache.sshd.client.ClientFactoryManager getFactoryManager()"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.addPasswordIdentity(java.lang.String)", "public void addPasswordIdentity(java.lang.String)"], ["java.lang.String", "org.apache.sshd.client.session.ClientSessionImpl.removePasswordIdentity(java.lang.String)", "public java.lang.String removePasswordIdentity(java.lang.String)"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.addPublicKeyIdentity(java.security.KeyPair)", "public void addPublicKeyIdentity(java.security.KeyPair)"], ["java.security.KeyPair", "org.apache.sshd.client.session.ClientSessionImpl.removePublicKeyIdentity(java.security.KeyPair)", "public java.security.KeyPair removePublicKeyIdentity(java.security.KeyPair)"], ["org.apache.sshd.client.auth.UserInteraction", "org.apache.sshd.client.session.ClientSessionImpl.getUserInteraction()", "public org.apache.sshd.client.auth.UserInteraction getUserInteraction()"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.setUserInteraction(org.apache.sshd.client.auth.UserInteraction)", "public void setUserInteraction(org.apache.sshd.client.auth.UserInteraction)"], ["org.apache.sshd.client.future.AuthFuture", "org.apache.sshd.client.session.ClientSessionImpl.auth()", "public org.apache.sshd.client.future.AuthFuture auth() throws java.io.IOException"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.switchToNextService()", "public void switchToNextService() throws java.io.IOException"], ["org.apache.sshd.common.future.SshFuture", "org.apache.sshd.client.session.ClientSessionImpl.switchToNoneCipher()", "public org.apache.sshd.common.future.SshFuture switchToNoneCipher() throws java.io.IOException"], ["org.apache.sshd.client.channel.ClientChannel", "org.apache.sshd.client.session.ClientSessionImpl.createChannel(java.lang.String)", "public org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.channel.ClientChannel", "org.apache.sshd.client.session.ClientSessionImpl.createChannel(java.lang.String, java.lang.String)", "public org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String, java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.channel.ChannelShell", "org.apache.sshd.client.session.ClientSessionImpl.createShellChannel()", "public org.apache.sshd.client.channel.ChannelShell createShellChannel() throws java.io.IOException"], ["org.apache.sshd.client.channel.ChannelExec", "org.apache.sshd.client.session.ClientSessionImpl.createExecChannel(java.lang.String)", "public org.apache.sshd.client.channel.ChannelExec createExecChannel(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.channel.ChannelSubsystem", "org.apache.sshd.client.session.ClientSessionImpl.createSubsystemChannel(java.lang.String)", "public org.apache.sshd.client.channel.ChannelSubsystem createSubsystemChannel(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.channel.ChannelDirectTcpip", "org.apache.sshd.client.session.ClientSessionImpl.createDirectTcpipChannel(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress)", "public org.apache.sshd.client.channel.ChannelDirectTcpip createDirectTcpipChannel(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["org.apache.sshd.common.scp.ScpTransferEventListener", "org.apache.sshd.client.session.ClientSessionImpl.getScpTransferEventListener()", "public org.apache.sshd.common.scp.ScpTransferEventListener getScpTransferEventListener()"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.setScpTransferEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)", "public void setScpTransferEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)"], ["org.apache.sshd.client.scp.ScpClient", "org.apache.sshd.client.session.ClientSessionImpl.createScpClient()", "public org.apache.sshd.client.scp.ScpClient createScpClient()"], ["org.apache.sshd.client.scp.ScpClient", "org.apache.sshd.client.session.ClientSessionImpl.createScpClient(org.apache.sshd.common.scp.ScpTransferEventListener)", "public org.apache.sshd.client.scp.ScpClient createScpClient(org.apache.sshd.common.scp.ScpTransferEventListener)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.session.ClientSessionImpl.createSftpClient()", "public org.apache.sshd.client.subsystem.sftp.SftpClient createSftpClient() throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.session.ClientSessionImpl.createSftpClient(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)", "public org.apache.sshd.client.subsystem.sftp.SftpClient createSftpClient(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector) throws java.io.IOException"], ["java.nio.file.FileSystem", "org.apache.sshd.client.session.ClientSessionImpl.createSftpFileSystem()", "public java.nio.file.FileSystem createSftpFileSystem() throws java.io.IOException"], ["java.nio.file.FileSystem", "org.apache.sshd.client.session.ClientSessionImpl.createSftpFileSystem(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)", "public java.nio.file.FileSystem createSftpFileSystem(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector) throws java.io.IOException"], ["java.nio.file.FileSystem", "org.apache.sshd.client.session.ClientSessionImpl.createSftpFileSystem(int, int)", "public java.nio.file.FileSystem createSftpFileSystem(int, int) throws java.io.IOException"], ["java.nio.file.FileSystem", "org.apache.sshd.client.session.ClientSessionImpl.createSftpFileSystem(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector, int, int)", "public java.nio.file.FileSystem createSftpFileSystem(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector, int, int) throws java.io.IOException"], ["org.apache.sshd.common.SshdSocketAddress", "org.apache.sshd.client.session.ClientSessionImpl.startLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress)", "public org.apache.sshd.common.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.stopLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public void stopLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["org.apache.sshd.common.SshdSocketAddress", "org.apache.sshd.client.session.ClientSessionImpl.startRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress)", "public org.apache.sshd.common.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.stopRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public void stopRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["org.apache.sshd.common.SshdSocketAddress", "org.apache.sshd.client.session.ClientSessionImpl.startDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public org.apache.sshd.common.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.stopDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public void stopDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["int", "org.apache.sshd.client.session.ClientSessionImpl.waitFor(int, long)", "public int waitFor(int, long)"], ["void", "org.apache.sshd.client.session.ClientSessionImpl.startService(java.lang.String)", "public void startService(java.lang.String) throws java.lang.Exception"], ["java.util.Map<java.lang.Object, java.lang.Object>", "org.apache.sshd.client.session.ClientSessionImpl.getMetadataMap()", "public java.util.Map<java.lang.Object, java.lang.Object> getMetadataMap()"], ["org.apache.sshd.common.FactoryManager", "org.apache.sshd.client.session.ClientSessionImpl.getFactoryManager()", "public org.apache.sshd.common.FactoryManager getFactoryManager()"], ["org.apache.sshd.client.session.ClientUserAuthService", "org.apache.sshd.client.session.ClientUserAuthService(org.apache.sshd.common.session.Session)", "public org.apache.sshd.client.session.ClientUserAuthService(org.apache.sshd.common.session.Session)"], ["org.apache.sshd.client.session.ClientSessionImpl", "org.apache.sshd.client.session.ClientUserAuthService.getSession()", "public org.apache.sshd.client.session.ClientSessionImpl getSession()"], ["void", "org.apache.sshd.client.session.ClientUserAuthService.start()", "public void start()"], ["org.apache.sshd.client.future.AuthFuture", "org.apache.sshd.client.session.ClientUserAuthService.auth(java.util.List<java.lang.Object>, java.lang.String)", "public org.apache.sshd.client.future.AuthFuture auth(java.util.List<java.lang.Object>, java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.session.ClientUserAuthService.process(int, org.apache.sshd.common.util.buffer.Buffer)", "public void process(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.session.Session", "org.apache.sshd.client.session.ClientUserAuthService.getSession()", "public org.apache.sshd.common.session.Session getSession()"], ["org.apache.sshd.client.session.ClientUserAuthServiceFactory", "org.apache.sshd.client.session.ClientUserAuthServiceFactory()", "public org.apache.sshd.client.session.ClientUserAuthServiceFactory()"], ["java.lang.String", "org.apache.sshd.client.session.ClientUserAuthServiceFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.Service", "org.apache.sshd.client.session.ClientUserAuthServiceFactory.create(org.apache.sshd.common.session.Session)", "public org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session) throws java.io.IOException"], ["org.apache.sshd.client.SessionFactory", "org.apache.sshd.client.SessionFactory()", "public org.apache.sshd.client.SessionFactory()"], ["void", "org.apache.sshd.client.SessionFactory.setClient(org.apache.sshd.client.ClientFactoryManager)", "public void setClient(org.apache.sshd.client.ClientFactoryManager)"], ["org.apache.sshd.client.SshClient", "org.apache.sshd.client.SshClient$1.create()", "public org.apache.sshd.client.SshClient create()"], ["java.lang.Object", "org.apache.sshd.client.SshClient$1.create()", "public java.lang.Object create()"], ["void", "org.apache.sshd.client.SshClient$2.run()", "public void run()"], ["void", "org.apache.sshd.client.SshClient$3.run()", "public void run()"], ["void", "org.apache.sshd.client.SshClient$4.operationComplete(org.apache.sshd.common.io.IoConnectFuture)", "public void operationComplete(org.apache.sshd.common.io.IoConnectFuture)"], ["void", "org.apache.sshd.client.SshClient$4.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["java.lang.String", "org.apache.sshd.client.SshClient$5.getPassword(java.lang.String)", "public java.lang.String getPassword(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.SshClient$6.welcome(java.lang.String)", "public void welcome(java.lang.String)"], ["java.lang.String[]", "org.apache.sshd.client.SshClient$6.interactive(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean[])", "public java.lang.String[] interactive(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean[])"], ["java.lang.String", "org.apache.sshd.client.SshClient$7.format(java.util.logging.LogRecord)", "public java.lang.String format(java.util.logging.LogRecord)"], ["org.apache.sshd.client.SshClient", "org.apache.sshd.client.SshClient()", "public org.apache.sshd.client.SshClient()"], ["org.apache.sshd.client.SessionFactory", "org.apache.sshd.client.SshClient.getSessionFactory()", "public org.apache.sshd.client.SessionFactory getSessionFactory()"], ["void", "org.apache.sshd.client.SshClient.setSessionFactory(org.apache.sshd.client.SessionFactory)", "public void setSessionFactory(org.apache.sshd.client.SessionFactory)"], ["org.apache.sshd.client.ServerKeyVerifier", "org.apache.sshd.client.SshClient.getServerKeyVerifier()", "public org.apache.sshd.client.ServerKeyVerifier getServerKeyVerifier()"], ["void", "org.apache.sshd.client.SshClient.setServerKeyVerifier(org.apache.sshd.client.ServerKeyVerifier)", "public void setServerKeyVerifier(org.apache.sshd.client.ServerKeyVerifier)"], ["org.apache.sshd.client.auth.UserInteraction", "org.apache.sshd.client.SshClient.getUserInteraction()", "public org.apache.sshd.client.auth.UserInteraction getUserInteraction()"], ["void", "org.apache.sshd.client.SshClient.setUserInteraction(org.apache.sshd.client.auth.UserInteraction)", "public void setUserInteraction(org.apache.sshd.client.auth.UserInteraction)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.client.auth.UserAuth>>", "org.apache.sshd.client.SshClient.getUserAuthFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.client.auth.UserAuth>> getUserAuthFactories()"], ["void", "org.apache.sshd.client.SshClient.setUserAuthFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.client.auth.UserAuth>>)", "public void setUserAuthFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.client.auth.UserAuth>>)"], ["void", "org.apache.sshd.client.SshClient.start()", "public void start()"], ["void", "org.apache.sshd.client.SshClient.stop()", "public void stop()"], ["void", "org.apache.sshd.client.SshClient.open()", "public void open() throws java.io.IOException"], ["org.apache.sshd.client.future.ConnectFuture", "org.apache.sshd.client.SshClient.connect(java.lang.String, java.lang.String, int)", "public org.apache.sshd.client.future.ConnectFuture connect(java.lang.String, java.lang.String, int) throws java.io.IOException"], ["org.apache.sshd.client.future.ConnectFuture", "org.apache.sshd.client.SshClient.connect(java.lang.String, java.net.SocketAddress)", "public org.apache.sshd.client.future.ConnectFuture connect(java.lang.String, java.net.SocketAddress)"], ["java.lang.String", "org.apache.sshd.client.SshClient.toString()", "public java.lang.String toString()"], ["org.apache.sshd.client.SshClient", "org.apache.sshd.client.SshClient.setUpDefaultClient()", "public static org.apache.sshd.client.SshClient setUpDefaultClient()"], ["org.apache.sshd.client.session.ClientSession", "org.apache.sshd.client.SshClient.setupClientSession(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream, java.lang.String...)", "public static org.apache.sshd.client.session.ClientSession setupClientSession(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream, java.lang.String...) throws java.lang.Exception"], ["void", "org.apache.sshd.client.SshClient.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["org.apache.sshd.client.SshKeyScan", "org.apache.sshd.client.SshKeyScan()", "public org.apache.sshd.client.SshKeyScan()"], ["int", "org.apache.sshd.client.SshKeyScan.getPort()", "public int getPort()"], ["void", "org.apache.sshd.client.SshKeyScan.setPort(int)", "public void setPort(int)"], ["java.io.InputStream", "org.apache.sshd.client.SshKeyScan.getInputStream()", "public java.io.InputStream getInputStream()"], ["void", "org.apache.sshd.client.SshKeyScan.setInputStream(java.io.InputStream)", "public void setInputStream(java.io.InputStream)"], ["java.util.List<java.lang.String>", "org.apache.sshd.client.SshKeyScan.getKeyTypes()", "public java.util.List<java.lang.String> getKeyTypes()"], ["void", "org.apache.sshd.client.SshKeyScan.setKeyTypes(java.util.List<java.lang.String>)", "public void setKeyTypes(java.util.List<java.lang.String>)"], ["long", "org.apache.sshd.client.SshKeyScan.getTimeout()", "public long getTimeout()"], ["void", "org.apache.sshd.client.SshKeyScan.setTimeout(long)", "public void setTimeout(long)"], ["java.util.logging.Level", "org.apache.sshd.client.SshKeyScan.getLogLevel()", "public java.util.logging.Level getLogLevel()"], ["void", "org.apache.sshd.client.SshKeyScan.setLogLevel(java.util.logging.Level)", "public void setLogLevel(java.util.logging.Level)"], ["void", "org.apache.sshd.client.SshKeyScan.log(java.util.logging.Level, java.lang.Object, java.lang.Throwable)", "public void log(java.util.logging.Level, java.lang.Object, java.lang.Throwable)"], ["boolean", "org.apache.sshd.client.SshKeyScan.isEnabled(java.util.logging.Level)", "public boolean isEnabled(java.util.logging.Level)"], ["java.lang.Void", "org.apache.sshd.client.SshKeyScan.call()", "public java.lang.Void call() throws java.lang.Exception"], ["void", "org.apache.sshd.client.SshKeyScan.sessionCreated(org.apache.sshd.common.session.Session)", "public void sessionCreated(org.apache.sshd.common.session.Session)"], ["void", "org.apache.sshd.client.SshKeyScan.sessionEvent(org.apache.sshd.common.session.Session, org.apache.sshd.common.session.SessionListener$Event)", "public void sessionEvent(org.apache.sshd.common.session.Session, org.apache.sshd.common.session.SessionListener$Event)"], ["void", "org.apache.sshd.client.SshKeyScan.sessionClosed(org.apache.sshd.common.session.Session)", "public void sessionClosed(org.apache.sshd.common.session.Session)"], ["boolean", "org.apache.sshd.client.SshKeyScan.verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)", "public boolean verifyServerKey(org.apache.sshd.client.session.ClientSession, java.net.SocketAddress, java.security.PublicKey)"], ["boolean", "org.apache.sshd.client.SshKeyScan.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.client.SshKeyScan.close()", "public void close() throws java.io.IOException"], ["java.util.List<java.lang.String>", "org.apache.sshd.client.SshKeyScan.parseCommandLineArguments(org.apache.sshd.client.SshKeyScan, java.lang.String...)", "public static java.util.List<java.lang.String> parseCommandLineArguments(org.apache.sshd.client.SshKeyScan, java.lang.String...) throws java.io.IOException"], ["<S extends org.apache.sshd.client.SshKeyScan> S", "org.apache.sshd.client.SshKeyScan.setInputStream(S, java.util.Collection<java.lang.String>)", "public static <S extends org.apache.sshd.client.SshKeyScan> S setInputStream(S, java.util.Collection<java.lang.String>) throws java.io.IOException"], ["<S extends org.apache.sshd.client.SshKeyScan> S", "org.apache.sshd.client.SshKeyScan.initializeScanner(S, java.util.Collection<java.lang.String>)", "public static <S extends org.apache.sshd.client.SshKeyScan> S initializeScanner(S, java.util.Collection<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.sshd.client.SshKeyScan.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["java.lang.Object", "org.apache.sshd.client.SshKeyScan.call()", "public java.lang.Object call() throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.getName()", "public java.lang.String getName()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.open(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle open(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.open(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle open(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.rename(java.lang.String, java.lang.String)", "public void rename(java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.rename(java.lang.String, java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode...)", "public void rename(java.lang.String, java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode...) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(java.lang.String)", "public java.io.InputStream read(java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(java.lang.String, int)", "public java.io.InputStream read(java.lang.String, int) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...)", "public java.io.InputStream read(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(java.lang.String, int, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...)", "public java.io.InputStream read(java.lang.String, int, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.InputStream read(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[])", "public int read(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[]) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(java.lang.String)", "public java.io.OutputStream write(java.lang.String) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(java.lang.String, int)", "public java.io.OutputStream write(java.lang.String, int) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...)", "public java.io.OutputStream write(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.OutputStream write(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(java.lang.String, int, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...)", "public java.io.OutputStream write(java.lang.String, int, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[])", "public void write(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.symLink(java.lang.String, java.lang.String)", "public void symLink(java.lang.String, java.lang.String) throws java.io.IOException"], ["<E extends org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension> E", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.getExtension(java.lang.Class<? extends E>)", "public <E extends org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension> E getExtension(java.lang.Class<? extends E>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.getExtension(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension getExtension(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.open(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle open(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.close(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public void close(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.remove(java.lang.String)", "public void remove(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.rename(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode>)", "public void rename(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode>) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int)", "public int read(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int)", "public void write(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.mkdir(java.lang.String)", "public void mkdir(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.rmdir(java.lang.String)", "public void rmdir(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.openDir(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle openDir(java.lang.String) throws java.io.IOException"], ["java.util.List<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.readDir(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public java.util.List<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry> readDir(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.canonicalPath(java.lang.String)", "public java.lang.String canonicalPath(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.stat(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes stat(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.lstat(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes lstat(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.stat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes stat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.setStat(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)", "public void setStat(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.setStat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)", "public void setStat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.readLink(java.lang.String)", "public java.lang.String readLink(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.link(java.lang.String, java.lang.String, boolean)", "public void link(java.lang.String, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.lock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, int)", "public void lock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.unlock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long)", "public void unlock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long) throws java.io.IOException"], ["java.lang.Iterable<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.readDir(java.lang.String)", "public java.lang.Iterable<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry> readDir(java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.read(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.InputStream read(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.AbstractSftpClient.write(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.OutputStream write(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.DefaultCloseableHandle", "org.apache.sshd.client.subsystem.sftp.DefaultCloseableHandle(org.apache.sshd.client.subsystem.sftp.SftpClient, byte[])", "public org.apache.sshd.client.subsystem.sftp.DefaultCloseableHandle(org.apache.sshd.client.subsystem.sftp.SftpClient, byte[])"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.DefaultCloseableHandle.getSftpClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getSftpClient()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.DefaultCloseableHandle.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.client.subsystem.sftp.DefaultCloseableHandle.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient$1.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient$1.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient$2.run()", "public void run()"], ["org.apache.sshd.client.subsystem.sftp.DefaultSftpClient", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient(org.apache.sshd.client.session.ClientSession)", "public org.apache.sshd.client.subsystem.sftp.DefaultSftpClient(org.apache.sshd.client.session.ClientSession) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.getVersion()", "public int getVersion()"], ["org.apache.sshd.client.session.ClientSession", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.getClientSession()", "public org.apache.sshd.client.session.ClientSession getClientSession()"], ["java.util.Map<java.lang.String, byte[]>", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.getServerExtensions()", "public java.util.Map<java.lang.String, byte[]> getServerExtensions()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.isClosing()", "public boolean isClosing()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.send(int, org.apache.sshd.common.util.buffer.Buffer)", "public int send(int, org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.receive(int)", "public org.apache.sshd.common.util.buffer.Buffer receive(int) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.DefaultSftpClient.negotiateVersion(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)", "public int negotiateVersion(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.CopyFileExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$1.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.CopyFileExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$1.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatPathExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$10.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatPathExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$10.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.CopyDataExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$2.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.CopyDataExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$2.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.MD5FileExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$3.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.MD5FileExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$3.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.MD5HandleExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$4.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.MD5HandleExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$4.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.CheckFileNameExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$5.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.CheckFileNameExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$5.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.CheckFileHandleExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$6.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.CheckFileHandleExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$6.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SpaceAvailableExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$7.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.SpaceAvailableExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$7.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHFsyncExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$8.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHFsyncExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$8.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatHandleExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$9.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatHandleExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>, java.util.Map<java.lang.String, ?>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions$9.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map, java.util.Map)"], ["org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions[]", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.values()", "public static org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions[] values()"], ["org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.valueOf(java.lang.String)", "public static org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.getName()", "public final java.lang.String getName()"], ["java.lang.Class<? extends org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension>", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.getType()", "public final java.lang.Class<? extends org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension> getType()"], ["org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient)", "public org.apache.sshd.client.subsystem.sftp.extensions.SftpClientExtension create(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient)"], ["org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.fromName(java.lang.String)", "public static org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions fromName(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.fromInstance(java.lang.Object)", "public static org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions fromInstance(java.lang.Object)"], ["org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions", "org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions.fromType(java.lang.Class<?>)", "public static org.apache.sshd.client.subsystem.sftp.extensions.BuiltinSftpClientExtensions fromType(java.lang.Class<?>)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.extensions.impl.AbstractSftpClientExtension.getName()", "public final java.lang.String getName()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.extensions.impl.AbstractSftpClientExtension.getClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getClient()"], ["int", "org.apache.sshd.client.subsystem.sftp.extensions.impl.AbstractSftpClientExtension.send(int, org.apache.sshd.common.util.buffer.Buffer)", "public int send(int, org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.client.subsystem.sftp.extensions.impl.AbstractSftpClientExtension.receive(int)", "public org.apache.sshd.common.util.buffer.Buffer receive(int) throws java.io.IOException"], ["boolean", "org.apache.sshd.client.subsystem.sftp.extensions.impl.AbstractSftpClientExtension.isSupported()", "public final boolean isSupported()"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.client.subsystem.sftp.extensions.impl.AbstractSftpClientExtension.putTarget(org.apache.sshd.common.util.buffer.Buffer, java.lang.Object)", "public org.apache.sshd.common.util.buffer.Buffer putTarget(org.apache.sshd.common.util.buffer.Buffer, java.lang.Object)"], ["org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileHandleExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileHandleExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileHandleExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.util.Pair<java.lang.String, java.util.Collection<byte[]>>", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileHandleExtensionImpl.checkFileHandle(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, java.util.Collection<java.lang.String>, long, long, int)", "public org.apache.sshd.common.util.Pair<java.lang.String, java.util.Collection<byte[]>> checkFileHandle(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, java.util.Collection<java.lang.String>, long, long, int) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileNameExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileNameExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileNameExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.util.Pair<java.lang.String, java.util.Collection<byte[]>>", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CheckFileNameExtensionImpl.checkFileName(java.lang.String, java.util.Collection<java.lang.String>, long, long, int)", "public org.apache.sshd.common.util.Pair<java.lang.String, java.util.Collection<byte[]>> checkFileName(java.lang.String, java.util.Collection<java.lang.String>, long, long, int) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyDataExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyDataExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyDataExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)"], ["void", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyDataExtensionImpl.copyData(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long)", "public void copyData(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyFileExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyFileExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyFileExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)"], ["void", "org.apache.sshd.client.subsystem.sftp.extensions.impl.CopyFileExtensionImpl.copyFile(java.lang.String, java.lang.String, boolean)", "public void copyFile(java.lang.String, java.lang.String, boolean) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5FileExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5FileExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5FileExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)"], ["byte[]", "org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5FileExtensionImpl.getHash(java.lang.String, long, long, byte[])", "public byte[] getHash(java.lang.String, long, long, byte[]) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5HandleExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5HandleExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5HandleExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)"], ["byte[]", "org.apache.sshd.client.subsystem.sftp.extensions.impl.MD5HandleExtensionImpl.getHash(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, byte[])", "public byte[] getHash(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, byte[]) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.impl.SpaceAvailableExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.impl.SpaceAvailableExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.extensions.impl.SpaceAvailableExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo", "org.apache.sshd.client.subsystem.sftp.extensions.impl.SpaceAvailableExtensionImpl.available(java.lang.String)", "public org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo available(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHFsyncExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHFsyncExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHFsyncExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>)"], ["void", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHFsyncExtensionImpl.fsync(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public void fsync(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatHandleExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatHandleExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatHandleExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatHandleExtensionImpl.stat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo stat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatPathExtensionImpl", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatPathExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatPathExtensionImpl(org.apache.sshd.client.subsystem.sftp.SftpClient, org.apache.sshd.client.subsystem.sftp.RawSftpClient, java.util.Map<java.lang.String, byte[]>)"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.impl.OpenSSHStatPathExtensionImpl.stat(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo stat(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo()", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo()"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo(org.apache.sshd.common.util.buffer.Buffer)"], ["int", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.hashCode()", "public int hashCode()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.clone()", "public org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo clone()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.toString()", "public java.lang.String toString()"], ["void", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.encode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo)", "public static void encode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo)"], ["org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.decode(org.apache.sshd.common.util.buffer.Buffer)", "public static org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo decode(org.apache.sshd.common.util.buffer.Buffer)"], ["void", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.decode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo)", "public static void decode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo)"], ["java.lang.Object", "org.apache.sshd.client.subsystem.sftp.extensions.openssh.OpenSSHStatExtensionInfo.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attribute[]", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attribute.values()", "public static org.apache.sshd.client.subsystem.sftp.SftpClient$Attribute[] values()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attribute", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attribute.valueOf(java.lang.String)", "public static org.apache.sshd.client.subsystem.sftp.SftpClient$Attribute valueOf(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes()", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.toString()", "public java.lang.String toString()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.size(long)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes size(long)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.owner(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes owner(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.group(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes group(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.owner(int, int)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes owner(int, int)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.perms(int)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes perms(int)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.atime(int)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes atime(int)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.ctime(int)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes ctime(int)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.mtime(int)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes mtime(int)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.time(int, int)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes time(int, int)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.accessTime(java.nio.file.attribute.FileTime)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes accessTime(java.nio.file.attribute.FileTime)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.createTime(java.nio.file.attribute.FileTime)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes createTime(java.nio.file.attribute.FileTime)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.modifyTime(java.nio.file.attribute.FileTime)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes modifyTime(java.nio.file.attribute.FileTime)"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.isRegularFile()", "public boolean isRegularFile()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.isDirectory()", "public boolean isDirectory()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.isSymbolicLink()", "public boolean isSymbolicLink()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes.isOther()", "public boolean isOther()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode[]", "org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode.values()", "public static org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode[] values()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode", "org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode.valueOf(java.lang.String)", "public static org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode valueOf(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry", "org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry(java.lang.String, java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry(java.lang.String, java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Handle", "org.apache.sshd.client.subsystem.sftp.SftpClient$Handle(byte[])", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Handle(byte[])"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpClient$Handle.length()", "public int length()"], ["byte[]", "org.apache.sshd.client.subsystem.sftp.SftpClient$Handle.getIdentifier()", "public byte[] getIdentifier()"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpClient$Handle.hashCode()", "public int hashCode()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpClient$Handle.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpClient$Handle.toString()", "public java.lang.String toString()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode[]", "org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode.values()", "public static org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode[] values()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode", "org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode.valueOf(java.lang.String)", "public static org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$CdCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$CdCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$ExitCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$ExitCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$HelpCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$HelpCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$InfoCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$InfoCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$LsCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$LsCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$MkdirCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$MkdirCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$PwdCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$PwdCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$RenameCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$RenameCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$RmCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$RmCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$RmdirCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$RmdirCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$StatVfsCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$StatVfsCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand$VersionCommandExecutor.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand$VersionCommandExecutor.executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public boolean executeCommand(java.lang.String, java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["org.apache.sshd.client.subsystem.sftp.SftpCommand", "org.apache.sshd.client.subsystem.sftp.SftpCommand(org.apache.sshd.client.subsystem.sftp.SftpClient)", "public org.apache.sshd.client.subsystem.sftp.SftpCommand(org.apache.sshd.client.subsystem.sftp.SftpClient)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.SftpCommand.getClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getClient()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpCommand.doInteractive(java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream)", "public void doInteractive(java.io.BufferedReader, java.io.PrintStream, java.io.PrintStream) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpCommand.getCurrentRemoteDirectory()", "public java.lang.String getCurrentRemoteDirectory()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpCommand.setCurrentRemoteDirectory(java.lang.String)", "public void setCurrentRemoteDirectory(java.lang.String)"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpCommand.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpCommand.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpCommand.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["org.apache.sshd.client.subsystem.sftp.SftpDirectoryStream", "org.apache.sshd.client.subsystem.sftp.SftpDirectoryStream(org.apache.sshd.client.subsystem.sftp.SftpPath)", "public org.apache.sshd.client.subsystem.sftp.SftpDirectoryStream(org.apache.sshd.client.subsystem.sftp.SftpPath) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.SftpDirectoryStream.getClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getClient()"], ["java.util.Iterator<java.nio.file.Path>", "org.apache.sshd.client.subsystem.sftp.SftpDirectoryStream.iterator()", "public java.util.Iterator<java.nio.file.Path> iterator()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpDirectoryStream.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator(org.apache.sshd.client.subsystem.sftp.SftpClient, java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator(org.apache.sshd.client.subsystem.sftp.SftpClient, java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.getClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getClient()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.getPath()", "public final java.lang.String getPath()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.hasNext()", "public boolean hasNext()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.next()", "public org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry next()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator.next()", "public java.lang.Object next()"], ["org.apache.sshd.client.subsystem.sftp.SftpException", "org.apache.sshd.client.subsystem.sftp.SftpException(int, java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpException(int, java.lang.String)"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpException.getStatus()", "public int getStatus()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpException.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel$1.isValid()", "public boolean isValid()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel$1.release()", "public void release() throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpFileChannel", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel(org.apache.sshd.client.subsystem.sftp.SftpPath, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public org.apache.sshd.client.subsystem.sftp.SftpFileChannel(org.apache.sshd.client.subsystem.sftp.SftpPath, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.read(java.nio.ByteBuffer)", "public int read(java.nio.ByteBuffer) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.read(java.nio.ByteBuffer, long)", "public int read(java.nio.ByteBuffer, long) throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.read(java.nio.ByteBuffer[], int, int)", "public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.write(java.nio.ByteBuffer)", "public int write(java.nio.ByteBuffer) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.write(java.nio.ByteBuffer, long)", "public int write(java.nio.ByteBuffer, long) throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.write(java.nio.ByteBuffer[], int, int)", "public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.position()", "public long position() throws java.io.IOException"], ["java.nio.channels.FileChannel", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.position(long)", "public java.nio.channels.FileChannel position(long) throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.size()", "public long size() throws java.io.IOException"], ["java.nio.channels.FileChannel", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.truncate(long)", "public java.nio.channels.FileChannel truncate(long) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.force(boolean)", "public void force(boolean) throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.transferTo(long, long, java.nio.channels.WritableByteChannel)", "public long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.transferFrom(java.nio.channels.ReadableByteChannel, long, long)", "public long transferFrom(java.nio.channels.ReadableByteChannel, long, long) throws java.io.IOException"], ["java.nio.MappedByteBuffer", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.map(java.nio.channels.FileChannel$MapMode, long, long)", "public java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode, long, long) throws java.io.IOException"], ["java.nio.channels.FileLock", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.lock(long, long, boolean)", "public java.nio.channels.FileLock lock(long, long, boolean) throws java.io.IOException"], ["java.nio.channels.FileLock", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.tryLock(long, long, boolean)", "public java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.toString()", "public java.lang.String toString()"], ["java.nio.channels.SeekableByteChannel", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.truncate(long)", "public java.nio.channels.SeekableByteChannel truncate(long) throws java.io.IOException"], ["java.nio.channels.SeekableByteChannel", "org.apache.sshd.client.subsystem.sftp.SftpFileChannel.position(long)", "public java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpFileStore", "org.apache.sshd.client.subsystem.sftp.SftpFileStore(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpFileSystem)", "public org.apache.sshd.client.subsystem.sftp.SftpFileStore(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpFileSystem)"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.getFileSystem()", "public final org.apache.sshd.client.subsystem.sftp.SftpFileSystem getFileSystem()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.name()", "public java.lang.String name()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.type()", "public java.lang.String type()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.isReadOnly()", "public boolean isReadOnly()"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.getTotalSpace()", "public long getTotalSpace() throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.getUsableSpace()", "public long getUsableSpace() throws java.io.IOException"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.getUnallocatedSpace()", "public long getUnallocatedSpace() throws java.io.IOException"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)", "public boolean supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.supportsFileAttributeView(java.lang.String)", "public boolean supportsFileAttributeView(java.lang.String)"], ["<V extends java.nio.file.attribute.FileStoreAttributeView> V", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.getFileStoreAttributeView(java.lang.Class<V>)", "public <V extends java.nio.file.attribute.FileStoreAttributeView> V getFileStoreAttributeView(java.lang.Class<V>)"], ["java.lang.Object", "org.apache.sshd.client.subsystem.sftp.SftpFileStore.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultGroupPrincipal", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultGroupPrincipal(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultGroupPrincipal(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipal", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipal(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipal(java.lang.String)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipal.getName()", "public final java.lang.String getName()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipal.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipal.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipal.toString()", "public java.lang.String toString()"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipalLookupService", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipalLookupService()", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipalLookupService()"], ["java.nio.file.attribute.UserPrincipal", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipalLookupService.lookupPrincipalByName(java.lang.String)", "public java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String) throws java.io.IOException"], ["java.nio.file.attribute.GroupPrincipal", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$DefaultUserPrincipalLookupService.lookupPrincipalByGroupName(java.lang.String)", "public java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.getVersion()", "public int getVersion()"], ["org.apache.sshd.client.session.ClientSession", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.getClientSession()", "public org.apache.sshd.client.session.ClientSession getClientSession()"], ["java.util.Map<java.lang.String, byte[]>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.getServerExtensions()", "public java.util.Map<java.lang.String, byte[]> getServerExtensions()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.isClosing()", "public boolean isClosing()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.increment()", "public void increment()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.open(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle open(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.close(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public void close(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.remove(java.lang.String)", "public void remove(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.rename(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode>)", "public void rename(java.lang.String, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$CopyMode>) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.read(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int)", "public int read(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.write(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int)", "public void write(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.mkdir(java.lang.String)", "public void mkdir(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.rmdir(java.lang.String)", "public void rmdir(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.openDir(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$CloseableHandle openDir(java.lang.String) throws java.io.IOException"], ["java.util.List<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.readDir(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public java.util.List<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry> readDir(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.canonicalPath(java.lang.String)", "public java.lang.String canonicalPath(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.stat(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes stat(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.lstat(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes lstat(java.lang.String) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.stat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle)", "public org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes stat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.setStat(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)", "public void setStat(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.setStat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)", "public void setStat(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.readLink(java.lang.String)", "public java.lang.String readLink(java.lang.String) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.symLink(java.lang.String, java.lang.String)", "public void symLink(java.lang.String, java.lang.String) throws java.io.IOException"], ["java.lang.Iterable<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.readDir(java.lang.String)", "public java.lang.Iterable<org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry> readDir(java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.read(java.lang.String)", "public java.io.InputStream read(java.lang.String) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.read(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...)", "public java.io.InputStream read(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.read(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.InputStream read(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.read(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.InputStream read(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.write(java.lang.String)", "public java.io.OutputStream write(java.lang.String) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.write(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...)", "public java.io.OutputStream write(java.lang.String, org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode...) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.write(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.OutputStream write(java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.write(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public java.io.OutputStream write(java.lang.String, int, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.link(java.lang.String, java.lang.String, boolean)", "public void link(java.lang.String, java.lang.String, boolean) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.lock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, int)", "public void lock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.unlock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long)", "public void unlock(org.apache.sshd.client.subsystem.sftp.SftpClient$Handle, long, long) throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.send(int, org.apache.sshd.common.util.buffer.Buffer)", "public int send(int, org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem$Wrapper.receive(int)", "public org.apache.sshd.common.util.buffer.Buffer receive(int) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem(org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider, java.lang.String, org.apache.sshd.client.session.ClientSession, org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem(org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider, java.lang.String, org.apache.sshd.client.session.ClientSession, org.apache.sshd.client.subsystem.sftp.SftpVersionSelector) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpVersionSelector", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getSftpVersionSelector()", "public final org.apache.sshd.client.subsystem.sftp.SftpVersionSelector getSftpVersionSelector()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getId()", "public final java.lang.String getId()"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.provider()", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider provider()"], ["java.util.List<java.nio.file.FileStore>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getFileStores()", "public java.util.List<java.nio.file.FileStore> getFileStores()"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getReadBufferSize()", "public int getReadBufferSize()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.setReadBufferSize(int)", "public void setReadBufferSize(int)"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getWriteBufferSize()", "public int getWriteBufferSize()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.setWriteBufferSize(int)", "public void setWriteBufferSize(int)"], ["org.apache.sshd.client.session.ClientSession", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getSession()", "public org.apache.sshd.client.session.ClientSession getSession()"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getClient()", "public org.apache.sshd.client.subsystem.sftp.SftpClient getClient() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.isOpen()", "public boolean isOpen()"], ["java.util.Set<java.lang.String>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.supportedFileAttributeViews()", "public java.util.Set<java.lang.String> supportedFileAttributeViews()"], ["java.nio.file.attribute.UserPrincipalLookupService", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getUserPrincipalLookupService()", "public java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()"], ["org.apache.sshd.client.subsystem.sftp.SftpPath", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getDefaultDir()", "public org.apache.sshd.client.subsystem.sftp.SftpPath getDefaultDir()"], ["java.lang.Iterable", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getFileStores()", "public java.lang.Iterable getFileStores()"], ["java.nio.file.spi.FileSystemProvider", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.provider()", "public java.nio.file.spi.FileSystemProvider provider()"], ["java.nio.file.Path", "org.apache.sshd.client.subsystem.sftp.SftpFileSystem.getDefaultDir()", "public java.nio.file.Path getDefaultDir()"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider()", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider()"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider(org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider(org.apache.sshd.client.SshClient)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider(org.apache.sshd.client.SshClient)"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider(org.apache.sshd.client.SshClient, org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider(org.apache.sshd.client.SshClient, org.apache.sshd.client.subsystem.sftp.SftpVersionSelector)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getScheme()", "public java.lang.String getScheme()"], ["org.apache.sshd.client.subsystem.sftp.SftpVersionSelector", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getSftpVersionSelector()", "public final org.apache.sshd.client.subsystem.sftp.SftpVersionSelector getSftpVersionSelector()"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.newFileSystem(java.net.URI, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem newFileSystem(java.net.URI, java.util.Map<java.lang.String, ?>) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.newFileSystem(org.apache.sshd.client.session.ClientSession)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem newFileSystem(org.apache.sshd.client.session.ClientSession) throws java.io.IOException"], ["java.nio.file.FileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getFileSystem(java.net.URI)", "public java.nio.file.FileSystem getFileSystem(java.net.URI)"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.removeFileSystem(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem removeFileSystem(java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getFileSystem(java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpFileSystem getFileSystem(java.lang.String)"], ["java.nio.file.Path", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getPath(java.net.URI)", "public java.nio.file.Path getPath(java.net.URI)"], ["java.nio.channels.SeekableByteChannel", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...)", "public java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["java.nio.channels.FileChannel", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.newFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...)", "public java.nio.channels.FileChannel newFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["java.nio.file.DirectoryStream<java.nio.file.Path>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>)", "public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...)", "public void createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.delete(java.nio.file.Path)", "public void delete(java.nio.file.Path) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)", "public void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)", "public void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) throws java.io.IOException"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.isSameFile(java.nio.file.Path, java.nio.file.Path)", "public boolean isSameFile(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.isHidden(java.nio.file.Path)", "public boolean isHidden(java.nio.file.Path) throws java.io.IOException"], ["java.nio.file.FileStore", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getFileStore(java.nio.file.Path)", "public java.nio.file.FileStore getFileStore(java.nio.file.Path) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...)", "public void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.readSymbolicLink(java.nio.file.Path)", "public java.nio.file.Path readSymbolicLink(java.nio.file.Path) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.checkAccess(java.nio.file.Path, java.nio.file.AccessMode...)", "public void checkAccess(java.nio.file.Path, java.nio.file.AccessMode...) throws java.io.IOException"], ["<V extends java.nio.file.attribute.FileAttributeView> V", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getFileAttributeView(java.nio.file.Path, java.lang.Class<V>, java.nio.file.LinkOption...)", "public <V extends java.nio.file.attribute.FileAttributeView> V getFileAttributeView(java.nio.file.Path, java.lang.Class<V>, java.nio.file.LinkOption...)"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.isSupportedFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)", "public boolean isSupportedFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)"], ["<A extends java.nio.file.attribute.BasicFileAttributes> A", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.readAttributes(java.nio.file.Path, java.lang.Class<A>, java.nio.file.LinkOption...)", "public <A extends java.nio.file.attribute.BasicFileAttributes> A readAttributes(java.nio.file.Path, java.lang.Class<A>, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...)", "public java.util.Map<java.lang.String, java.lang.Object> readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption...)", "public void setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getRWXPermissions(int)", "public static java.lang.String getRWXPermissions(int)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getOctalPermissions(int)", "public static java.lang.String getOctalPermissions(int)"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.permissionsToAttributes(int)", "public static java.util.Set<java.nio.file.attribute.PosixFilePermission> permissionsToAttributes(int)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getOctalPermissions(java.util.Collection<java.nio.file.attribute.PosixFilePermission>)", "public static java.lang.String getOctalPermissions(java.util.Collection<java.nio.file.attribute.PosixFilePermission>)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getFileSystemIdentifier(java.net.URI)", "public static java.lang.String getFileSystemIdentifier(java.net.URI)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getFileSystemIdentifier(org.apache.sshd.client.session.ClientSession)", "public static java.lang.String getFileSystemIdentifier(org.apache.sshd.client.session.ClientSession)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.getFileSystemIdentifier(java.lang.String, int, java.lang.String)", "public static java.lang.String getFileSystemIdentifier(java.lang.String, int, java.lang.String)"], ["java.net.URI", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.createFileSystemURI(java.lang.String, int, java.lang.String, java.lang.String)", "public static java.net.URI createFileSystemURI(java.lang.String, int, java.lang.String, java.lang.String)"], ["java.nio.file.FileSystem", "org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider.newFileSystem(java.net.URI, java.util.Map)", "public java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel", "org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel(org.apache.sshd.client.subsystem.sftp.SftpClient, int, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel(org.apache.sshd.client.subsystem.sftp.SftpClient, int, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel.getClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getClient()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel.getPath()", "public final java.lang.String getPath()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel.isOpen()", "public boolean isOpen()"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpInputStreamWithChannel.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpIterableDirEntry", "org.apache.sshd.client.subsystem.sftp.SftpIterableDirEntry(org.apache.sshd.client.subsystem.sftp.SftpClient, java.lang.String)", "public org.apache.sshd.client.subsystem.sftp.SftpIterableDirEntry(org.apache.sshd.client.subsystem.sftp.SftpClient, java.lang.String)"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.SftpIterableDirEntry.getClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getClient()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpIterableDirEntry.getPath()", "public final java.lang.String getPath()"], ["org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator", "org.apache.sshd.client.subsystem.sftp.SftpIterableDirEntry.iterator()", "public org.apache.sshd.client.subsystem.sftp.SftpDirEntryIterator iterator()"], ["java.util.Iterator", "org.apache.sshd.client.subsystem.sftp.SftpIterableDirEntry.iterator()", "public java.util.Iterator iterator()"], ["org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel(org.apache.sshd.client.subsystem.sftp.SftpClient, int, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>)", "public org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel(org.apache.sshd.client.subsystem.sftp.SftpClient, int, java.lang.String, java.util.Collection<org.apache.sshd.client.subsystem.sftp.SftpClient$OpenMode>) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpClient", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel.getClient()", "public final org.apache.sshd.client.subsystem.sftp.SftpClient getClient()"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel.getPath()", "public final java.lang.String getPath()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpOutputStreamWithChannel.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpPath", "org.apache.sshd.client.subsystem.sftp.SftpPath(org.apache.sshd.client.subsystem.sftp.SftpFileSystem, java.lang.String, org.apache.sshd.common.file.util.ImmutableList<java.lang.String>)", "public org.apache.sshd.client.subsystem.sftp.SftpPath(org.apache.sshd.client.subsystem.sftp.SftpFileSystem, java.lang.String, org.apache.sshd.common.file.util.ImmutableList<java.lang.String>)"], ["org.apache.sshd.client.subsystem.sftp.SftpPath", "org.apache.sshd.client.subsystem.sftp.SftpPath.toRealPath(java.nio.file.LinkOption...)", "public org.apache.sshd.client.subsystem.sftp.SftpPath toRealPath(java.nio.file.LinkOption...) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.client.subsystem.sftp.SftpPath.toRealPath(java.nio.file.LinkOption[])", "public java.nio.file.Path toRealPath(java.nio.file.LinkOption[]) throws java.io.IOException"], ["org.apache.sshd.client.subsystem.sftp.SftpPathIterator", "org.apache.sshd.client.subsystem.sftp.SftpPathIterator(org.apache.sshd.client.subsystem.sftp.SftpPath, java.lang.Iterable<? extends org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>)", "public org.apache.sshd.client.subsystem.sftp.SftpPathIterator(org.apache.sshd.client.subsystem.sftp.SftpPath, java.lang.Iterable<? extends org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>)"], ["org.apache.sshd.client.subsystem.sftp.SftpPathIterator", "org.apache.sshd.client.subsystem.sftp.SftpPathIterator(org.apache.sshd.client.subsystem.sftp.SftpPath, java.util.Iterator<? extends org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>)", "public org.apache.sshd.client.subsystem.sftp.SftpPathIterator(org.apache.sshd.client.subsystem.sftp.SftpPath, java.util.Iterator<? extends org.apache.sshd.client.subsystem.sftp.SftpClient$DirEntry>)"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpPathIterator.hasNext()", "public boolean hasNext()"], ["java.nio.file.Path", "org.apache.sshd.client.subsystem.sftp.SftpPathIterator.next()", "public java.nio.file.Path next()"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpPathIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.sshd.client.subsystem.sftp.SftpPathIterator.next()", "public java.lang.Object next()"], ["org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes(java.nio.file.Path, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)", "public org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes(java.nio.file.Path, org.apache.sshd.client.subsystem.sftp.SftpClient$Attributes)"], ["java.nio.file.Path", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.getPath()", "public final java.nio.file.Path getPath()"], ["java.nio.file.attribute.UserPrincipal", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.owner()", "public java.nio.file.attribute.UserPrincipal owner()"], ["java.nio.file.attribute.GroupPrincipal", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.group()", "public java.nio.file.attribute.GroupPrincipal group()"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.permissions()", "public java.util.Set<java.nio.file.attribute.PosixFilePermission> permissions()"], ["java.nio.file.attribute.FileTime", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.lastModifiedTime()", "public java.nio.file.attribute.FileTime lastModifiedTime()"], ["java.nio.file.attribute.FileTime", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.lastAccessTime()", "public java.nio.file.attribute.FileTime lastAccessTime()"], ["java.nio.file.attribute.FileTime", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.creationTime()", "public java.nio.file.attribute.FileTime creationTime()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.isRegularFile()", "public boolean isRegularFile()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.isDirectory()", "public boolean isDirectory()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.isSymbolicLink()", "public boolean isSymbolicLink()"], ["boolean", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.isOther()", "public boolean isOther()"], ["long", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.size()", "public long size()"], ["java.lang.Object", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributes.fileKey()", "public java.lang.Object fileKey()"], ["org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView(org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider, java.nio.file.Path, java.nio.file.LinkOption...)", "public org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView(org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider, java.nio.file.Path, java.nio.file.LinkOption...)"], ["java.lang.String", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.name()", "public java.lang.String name()"], ["org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.provider()", "public final org.apache.sshd.client.subsystem.sftp.SftpFileSystemProvider provider()"], ["java.nio.file.Path", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.getPath()", "public final java.nio.file.Path getPath()"], ["java.nio.file.attribute.PosixFileAttributes", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.readAttributes()", "public java.nio.file.attribute.PosixFileAttributes readAttributes() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime)", "public void setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.setPermissions(java.util.Set<java.nio.file.attribute.PosixFilePermission>)", "public void setPermissions(java.util.Set<java.nio.file.attribute.PosixFilePermission>) throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.setGroup(java.nio.file.attribute.GroupPrincipal)", "public void setGroup(java.nio.file.attribute.GroupPrincipal) throws java.io.IOException"], ["java.nio.file.attribute.UserPrincipal", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.getOwner()", "public java.nio.file.attribute.UserPrincipal getOwner() throws java.io.IOException"], ["void", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.setOwner(java.nio.file.attribute.UserPrincipal)", "public void setOwner(java.nio.file.attribute.UserPrincipal) throws java.io.IOException"], ["java.nio.file.attribute.BasicFileAttributes", "org.apache.sshd.client.subsystem.sftp.SftpPosixFileAttributeView.readAttributes()", "public java.nio.file.attribute.BasicFileAttributes readAttributes() throws java.io.IOException"], ["int", "org.apache.sshd.client.subsystem.sftp.SftpVersionSelector$1.selectVersion(int, java.util.List<java.lang.Integer>)", "public int selectVersion(int, java.util.List<java.lang.Integer>)"], ["org.apache.sshd.common.io.IoServiceFactory", "org.apache.sshd.common.AbstractFactoryManager.getIoServiceFactory()", "public org.apache.sshd.common.io.IoServiceFactory getIoServiceFactory()"], ["org.apache.sshd.common.io.IoServiceFactoryFactory", "org.apache.sshd.common.AbstractFactoryManager.getIoServiceFactoryFactory()", "public org.apache.sshd.common.io.IoServiceFactoryFactory getIoServiceFactoryFactory()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setIoServiceFactoryFactory(org.apache.sshd.common.io.IoServiceFactoryFactory)", "public void setIoServiceFactoryFactory(org.apache.sshd.common.io.IoServiceFactoryFactory)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>", "org.apache.sshd.common.AbstractFactoryManager.getKeyExchangeFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>> getKeyExchangeFactories()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setKeyExchangeFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>)", "public void setKeyExchangeFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>>", "org.apache.sshd.common.AbstractFactoryManager.getCipherFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>> getCipherFactories()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setCipherFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>>)", "public void setCipherFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>>)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>>", "org.apache.sshd.common.AbstractFactoryManager.getCompressionFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>> getCompressionFactories()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setCompressionFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>>)", "public void setCompressionFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>>)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>>", "org.apache.sshd.common.AbstractFactoryManager.getMacFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>> getMacFactories()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setMacFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>>)", "public void setMacFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>>)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>>", "org.apache.sshd.common.AbstractFactoryManager.getSignatureFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>> getSignatureFactories()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setSignatureFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>>)", "public void setSignatureFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>>)"], ["org.apache.sshd.common.Factory<org.apache.sshd.common.random.Random>", "org.apache.sshd.common.AbstractFactoryManager.getRandomFactory()", "public org.apache.sshd.common.Factory<org.apache.sshd.common.random.Random> getRandomFactory()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setRandomFactory(org.apache.sshd.common.Factory<org.apache.sshd.common.random.Random>)", "public void setRandomFactory(org.apache.sshd.common.Factory<org.apache.sshd.common.random.Random>)"], ["org.apache.sshd.common.keyprovider.KeyPairProvider", "org.apache.sshd.common.AbstractFactoryManager.getKeyPairProvider()", "public org.apache.sshd.common.keyprovider.KeyPairProvider getKeyPairProvider()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setKeyPairProvider(org.apache.sshd.common.keyprovider.KeyPairProvider)", "public void setKeyPairProvider(org.apache.sshd.common.keyprovider.KeyPairProvider)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.apache.sshd.common.AbstractFactoryManager.getProperties()", "public java.util.Map<java.lang.String, java.lang.Object> getProperties()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setProperties(java.util.Map<java.lang.String, java.lang.Object>)", "public void setProperties(java.util.Map<java.lang.String, java.lang.Object>)"], ["java.lang.String", "org.apache.sshd.common.AbstractFactoryManager.getVersion()", "public java.lang.String getVersion()"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>>", "org.apache.sshd.common.AbstractFactoryManager.getChannelFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>> getChannelFactories()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setChannelFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>>)", "public void setChannelFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>>)"], ["int", "org.apache.sshd.common.AbstractFactoryManager.getNioWorkers()", "public int getNioWorkers()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setNioWorkers(int)", "public void setNioWorkers(int)"], ["org.apache.sshd.agent.SshAgentFactory", "org.apache.sshd.common.AbstractFactoryManager.getAgentFactory()", "public org.apache.sshd.agent.SshAgentFactory getAgentFactory()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setAgentFactory(org.apache.sshd.agent.SshAgentFactory)", "public void setAgentFactory(org.apache.sshd.agent.SshAgentFactory)"], ["java.util.concurrent.ScheduledExecutorService", "org.apache.sshd.common.AbstractFactoryManager.getScheduledExecutorService()", "public java.util.concurrent.ScheduledExecutorService getScheduledExecutorService()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)", "public void setScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setScheduledExecutorService(java.util.concurrent.ScheduledExecutorService, boolean)", "public void setScheduledExecutorService(java.util.concurrent.ScheduledExecutorService, boolean)"], ["org.apache.sshd.common.forward.TcpipForwarderFactory", "org.apache.sshd.common.AbstractFactoryManager.getTcpipForwarderFactory()", "public org.apache.sshd.common.forward.TcpipForwarderFactory getTcpipForwarderFactory()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setTcpipForwarderFactory(org.apache.sshd.common.forward.TcpipForwarderFactory)", "public void setTcpipForwarderFactory(org.apache.sshd.common.forward.TcpipForwarderFactory)"], ["org.apache.sshd.server.forward.ForwardingFilter", "org.apache.sshd.common.AbstractFactoryManager.getTcpipForwardingFilter()", "public org.apache.sshd.server.forward.ForwardingFilter getTcpipForwardingFilter()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setTcpipForwardingFilter(org.apache.sshd.server.forward.ForwardingFilter)", "public void setTcpipForwardingFilter(org.apache.sshd.server.forward.ForwardingFilter)"], ["org.apache.sshd.common.file.FileSystemFactory", "org.apache.sshd.common.AbstractFactoryManager.getFileSystemFactory()", "public org.apache.sshd.common.file.FileSystemFactory getFileSystemFactory()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setFileSystemFactory(org.apache.sshd.common.file.FileSystemFactory)", "public void setFileSystemFactory(org.apache.sshd.common.file.FileSystemFactory)"], ["java.util.List<org.apache.sshd.common.ServiceFactory>", "org.apache.sshd.common.AbstractFactoryManager.getServiceFactories()", "public java.util.List<org.apache.sshd.common.ServiceFactory> getServiceFactories()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setServiceFactories(java.util.List<org.apache.sshd.common.ServiceFactory>)", "public void setServiceFactories(java.util.List<org.apache.sshd.common.ServiceFactory>)"], ["java.util.List<org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.session.ConnectionService>>", "org.apache.sshd.common.AbstractFactoryManager.getGlobalRequestHandlers()", "public java.util.List<org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.session.ConnectionService>> getGlobalRequestHandlers()"], ["void", "org.apache.sshd.common.AbstractFactoryManager.setGlobalRequestHandlers(java.util.List<org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.session.ConnectionService>>)", "public void setGlobalRequestHandlers(java.util.List<org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.session.ConnectionService>>)"], ["org.apache.sshd.common.BaseBuilder", "org.apache.sshd.common.BaseBuilder()", "public org.apache.sshd.common.BaseBuilder()"], ["S", "org.apache.sshd.common.BaseBuilder.keyExchangeFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>)", "public S keyExchangeFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>)"], ["S", "org.apache.sshd.common.BaseBuilder.signatureFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>>)", "public S signatureFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>>)"], ["S", "org.apache.sshd.common.BaseBuilder.randomFactory(org.apache.sshd.common.Factory<org.apache.sshd.common.random.Random>)", "public S randomFactory(org.apache.sshd.common.Factory<org.apache.sshd.common.random.Random>)"], ["S", "org.apache.sshd.common.BaseBuilder.cipherFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>>)", "public S cipherFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>>)"], ["S", "org.apache.sshd.common.BaseBuilder.compressionFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>>)", "public S compressionFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>>)"], ["S", "org.apache.sshd.common.BaseBuilder.macFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>>)", "public S macFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>>)"], ["S", "org.apache.sshd.common.BaseBuilder.channelFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>>)", "public S channelFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>>)"], ["S", "org.apache.sshd.common.BaseBuilder.fileSystemFactory(org.apache.sshd.common.file.FileSystemFactory)", "public S fileSystemFactory(org.apache.sshd.common.file.FileSystemFactory)"], ["S", "org.apache.sshd.common.BaseBuilder.forwardingFilter(org.apache.sshd.server.forward.ForwardingFilter)", "public S forwardingFilter(org.apache.sshd.server.forward.ForwardingFilter)"], ["S", "org.apache.sshd.common.BaseBuilder.tcpipForwarderFactory(org.apache.sshd.common.forward.TcpipForwarderFactory)", "public S tcpipForwarderFactory(org.apache.sshd.common.forward.TcpipForwarderFactory)"], ["S", "org.apache.sshd.common.BaseBuilder.globalRequestHandlers(java.util.List<org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.session.ConnectionService>>)", "public S globalRequestHandlers(java.util.List<org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.session.ConnectionService>>)"], ["S", "org.apache.sshd.common.BaseBuilder.factory(org.apache.sshd.common.Factory<T>)", "public S factory(org.apache.sshd.common.Factory<T>)"], ["T", "org.apache.sshd.common.BaseBuilder.build(boolean)", "public T build(boolean)"], ["T", "org.apache.sshd.common.BaseBuilder.build()", "public T build()"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>>", "org.apache.sshd.common.BaseBuilder.setUpDefaultCiphers(boolean)", "public static java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>> setUpDefaultCiphers(boolean)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>>", "org.apache.sshd.common.BaseBuilder.setUpDefaultMacs(boolean)", "public static java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.mac.Mac>> setUpDefaultMacs(boolean)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>>", "org.apache.sshd.common.BaseBuilder.setUpDefaultSignatures(boolean)", "public static java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.signature.Signature>> setUpDefaultSignatures(boolean)"], ["java.lang.Object", "org.apache.sshd.common.BaseBuilder.build()", "public java.lang.Object build()"], ["<T, E extends org.apache.sshd.common.BuiltinFactory<T>> java.util.List<org.apache.sshd.common.NamedFactory<T>>", "org.apache.sshd.common.BuiltinFactory$Utils.setUpFactories(boolean, java.util.Collection<? extends E>)", "public static <T, E extends org.apache.sshd.common.BuiltinFactory<T>> java.util.List<org.apache.sshd.common.NamedFactory<T>> setUpFactories(boolean, java.util.Collection<? extends E>)"], ["void", "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable$1.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable", "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable(org.apache.sshd.common.channel.AbstractChannel)", "public org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable(org.apache.sshd.common.channel.AbstractChannel)"], ["boolean", "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable.isClosing()", "public boolean isClosing()"], ["void", "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable.setClosing(boolean)", "public void setClosing(boolean)"], ["boolean", "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable.isClosed()", "public boolean isClosed()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["org.apache.sshd.common.channel.AbstractChannel$GracefulState[]", "org.apache.sshd.common.channel.AbstractChannel$GracefulState.values()", "public static org.apache.sshd.common.channel.AbstractChannel$GracefulState[] values()"], ["org.apache.sshd.common.channel.AbstractChannel$GracefulState", "org.apache.sshd.common.channel.AbstractChannel$GracefulState.valueOf(java.lang.String)", "public static org.apache.sshd.common.channel.AbstractChannel$GracefulState valueOf(java.lang.String)"], ["void", "org.apache.sshd.common.channel.AbstractChannel.addRequestHandler(org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.channel.Channel>)", "public void addRequestHandler(org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.channel.Channel>)"], ["int", "org.apache.sshd.common.channel.AbstractChannel.getId()", "public int getId()"], ["int", "org.apache.sshd.common.channel.AbstractChannel.getRecipient()", "public int getRecipient()"], ["org.apache.sshd.common.channel.Window", "org.apache.sshd.common.channel.AbstractChannel.getLocalWindow()", "public org.apache.sshd.common.channel.Window getLocalWindow()"], ["org.apache.sshd.common.channel.Window", "org.apache.sshd.common.channel.AbstractChannel.getRemoteWindow()", "public org.apache.sshd.common.channel.Window getRemoteWindow()"], ["org.apache.sshd.common.session.Session", "org.apache.sshd.common.channel.AbstractChannel.getSession()", "public org.apache.sshd.common.session.Session getSession()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.common.channel.AbstractChannel.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["void", "org.apache.sshd.common.channel.AbstractChannel.setExecutorService(java.util.concurrent.ExecutorService)", "public void setExecutorService(java.util.concurrent.ExecutorService)"], ["boolean", "org.apache.sshd.common.channel.AbstractChannel.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["void", "org.apache.sshd.common.channel.AbstractChannel.setShutdownOnExit(boolean)", "public void setShutdownOnExit(boolean)"], ["void", "org.apache.sshd.common.channel.AbstractChannel.handleRequest(org.apache.sshd.common.util.buffer.Buffer)", "public void handleRequest(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.AbstractChannel.init(org.apache.sshd.common.session.ConnectionService, org.apache.sshd.common.session.Session, int)", "public void init(org.apache.sshd.common.session.ConnectionService, org.apache.sshd.common.session.Session, int)"], ["void", "org.apache.sshd.common.channel.AbstractChannel.handleClose()", "public void handleClose() throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.AbstractChannel.handleData(org.apache.sshd.common.util.buffer.Buffer)", "public void handleData(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.AbstractChannel.handleExtendedData(org.apache.sshd.common.util.buffer.Buffer)", "public void handleExtendedData(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.channel.AbstractChannel.isEofSignalled()", "public boolean isEofSignalled()"], ["void", "org.apache.sshd.common.channel.AbstractChannel.setEofSignalled(boolean)", "public void setEofSignalled(boolean)"], ["void", "org.apache.sshd.common.channel.AbstractChannel.handleEof()", "public void handleEof() throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.AbstractChannel.handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)", "public void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.AbstractChannel.handleFailure()", "public void handleFailure() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.channel.AbstractChannel.toString()", "public java.lang.String toString()"], ["void", "org.apache.sshd.common.channel.BufferedIoOutputStream$1.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.common.channel.BufferedIoOutputStream$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.channel.BufferedIoOutputStream", "org.apache.sshd.common.channel.BufferedIoOutputStream(org.apache.sshd.common.io.IoOutputStream)", "public org.apache.sshd.common.channel.BufferedIoOutputStream(org.apache.sshd.common.io.IoOutputStream)"], ["org.apache.sshd.common.io.IoWriteFuture", "org.apache.sshd.common.channel.BufferedIoOutputStream.write(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)"], ["java.lang.String", "org.apache.sshd.common.channel.BufferedIoOutputStream.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl", "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl.getBuffer()", "public org.apache.sshd.common.util.buffer.Buffer getBuffer()"], ["void", "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl.verify()", "public void verify() throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl.verify(long, java.util.concurrent.TimeUnit)", "public void verify(long, java.util.concurrent.TimeUnit) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl.verify(long)", "public void verify(long) throws java.io.IOException"], ["int", "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl.getRead()", "public int getRead()"], ["java.lang.Throwable", "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl.getException()", "public java.lang.Throwable getException()"], ["org.apache.sshd.common.channel.ChannelAsyncInputStream", "org.apache.sshd.common.channel.ChannelAsyncInputStream(org.apache.sshd.common.channel.Channel)", "public org.apache.sshd.common.channel.ChannelAsyncInputStream(org.apache.sshd.common.channel.Channel)"], ["void", "org.apache.sshd.common.channel.ChannelAsyncInputStream.write(org.apache.sshd.common.util.Readable)", "public void write(org.apache.sshd.common.util.Readable) throws java.io.IOException"], ["org.apache.sshd.common.io.IoReadFuture", "org.apache.sshd.common.channel.ChannelAsyncInputStream.read(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.io.IoReadFuture read(org.apache.sshd.common.util.buffer.Buffer)"], ["java.lang.String", "org.apache.sshd.common.channel.ChannelAsyncInputStream.toString()", "public java.lang.String toString()"], ["void", "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.channel.ChannelAsyncOutputStream", "org.apache.sshd.common.channel.ChannelAsyncOutputStream(org.apache.sshd.common.channel.Channel, byte)", "public org.apache.sshd.common.channel.ChannelAsyncOutputStream(org.apache.sshd.common.channel.Channel, byte)"], ["void", "org.apache.sshd.common.channel.ChannelAsyncOutputStream.onWindowExpanded()", "public void onWindowExpanded() throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.channel.ChannelAsyncOutputStream.org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)", "public synchronized org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)"], ["java.lang.String", "org.apache.sshd.common.channel.ChannelAsyncOutputStream.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.channel.ChannelOutputStream", "org.apache.sshd.common.channel.ChannelOutputStream(org.apache.sshd.common.channel.AbstractChannel, org.apache.sshd.common.channel.Window, org.slf4j.Logger, byte)", "public org.apache.sshd.common.channel.ChannelOutputStream(org.apache.sshd.common.channel.AbstractChannel, org.apache.sshd.common.channel.Window, org.slf4j.Logger, byte)"], ["void", "org.apache.sshd.common.channel.ChannelOutputStream.setNoDelay(boolean)", "public void setNoDelay(boolean)"], ["boolean", "org.apache.sshd.common.channel.ChannelOutputStream.isNoDelay()", "public boolean isNoDelay()"], ["boolean", "org.apache.sshd.common.channel.ChannelOutputStream.isOpen()", "public boolean isOpen()"], ["synchronized", "org.apache.sshd.common.channel.ChannelOutputStream.void write(int)", "public synchronized void write(int) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.channel.ChannelOutputStream.void write(byte[], int, int)", "public synchronized void write(byte[], int, int) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.channel.ChannelOutputStream.void flush()", "public synchronized void flush() throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.channel.ChannelOutputStream.void close()", "public synchronized void close() throws java.io.IOException"], ["org.apache.sshd.common.channel.ChannelPipedInputStream", "org.apache.sshd.common.channel.ChannelPipedInputStream(org.apache.sshd.common.channel.Window)", "public org.apache.sshd.common.channel.ChannelPipedInputStream(org.apache.sshd.common.channel.Window)"], ["void", "org.apache.sshd.common.channel.ChannelPipedInputStream.setTimeout(long)", "public void setTimeout(long)"], ["long", "org.apache.sshd.common.channel.ChannelPipedInputStream.getTimeout()", "public long getTimeout()"], ["int", "org.apache.sshd.common.channel.ChannelPipedInputStream.available()", "public int available() throws java.io.IOException"], ["int", "org.apache.sshd.common.channel.ChannelPipedInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.sshd.common.channel.ChannelPipedInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.ChannelPipedInputStream.eof()", "public void eof()"], ["void", "org.apache.sshd.common.channel.ChannelPipedInputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.ChannelPipedInputStream.receive(byte[], int, int)", "public void receive(byte[], int, int) throws java.io.IOException"], ["org.apache.sshd.common.channel.ChannelPipedOutputStream", "org.apache.sshd.common.channel.ChannelPipedOutputStream(org.apache.sshd.common.channel.ChannelPipedSink)", "public org.apache.sshd.common.channel.ChannelPipedOutputStream(org.apache.sshd.common.channel.ChannelPipedSink)"], ["void", "org.apache.sshd.common.channel.ChannelPipedOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.ChannelPipedOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.channel.ChannelPipedOutputStream.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.common.channel.ChannelPipedOutputStream.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.ChannelPipedOutputStream.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.channel.Channel>", "org.apache.sshd.common.channel.ChannelRequestHandler$1.transform(org.apache.sshd.common.channel.ChannelRequestHandler)", "public org.apache.sshd.common.channel.RequestHandler<org.apache.sshd.common.channel.Channel> transform(org.apache.sshd.common.channel.ChannelRequestHandler)"], ["java.lang.Object", "org.apache.sshd.common.channel.ChannelRequestHandler$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.apache.sshd.common.channel.IoWriteFutureImpl", "org.apache.sshd.common.channel.IoWriteFutureImpl(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.IoWriteFutureImpl(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.common.channel.IoWriteFutureImpl.getBuffer()", "public org.apache.sshd.common.util.buffer.Buffer getBuffer()"], ["org.apache.sshd.common.channel.PtyMode[]", "org.apache.sshd.common.channel.PtyMode.values()", "public static org.apache.sshd.common.channel.PtyMode[] values()"], ["org.apache.sshd.common.channel.PtyMode", "org.apache.sshd.common.channel.PtyMode.valueOf(java.lang.String)", "public static org.apache.sshd.common.channel.PtyMode valueOf(java.lang.String)"], ["int", "org.apache.sshd.common.channel.PtyMode.toInt()", "public int toInt()"], ["org.apache.sshd.common.channel.PtyMode", "org.apache.sshd.common.channel.PtyMode.fromInt(int)", "public static org.apache.sshd.common.channel.PtyMode fromInt(int)"], ["org.apache.sshd.common.channel.RequestHandler$Result[]", "org.apache.sshd.common.channel.RequestHandler$Result.values()", "public static org.apache.sshd.common.channel.RequestHandler$Result[] values()"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.common.channel.RequestHandler$Result.valueOf(java.lang.String)", "public static org.apache.sshd.common.channel.RequestHandler$Result valueOf(java.lang.String)"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.common.channel.RequestHandler$Result.fromName(java.lang.String)", "public static org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)"], ["java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer>", "org.apache.sshd.common.channel.SttySupport.getUnixPtyModes()", "public static java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer> getUnixPtyModes() throws java.io.IOException, java.lang.InterruptedException"], ["java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer>", "org.apache.sshd.common.channel.SttySupport.parsePtyModes(java.lang.String)", "public static java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer> parsePtyModes(java.lang.String)"], ["int", "org.apache.sshd.common.channel.SttySupport.getTerminalWidth()", "public static int getTerminalWidth()"], ["int", "org.apache.sshd.common.channel.SttySupport.getTerminalHeight()", "public static int getTerminalHeight()"], ["java.lang.String", "org.apache.sshd.common.channel.SttySupport.getTtyProps()", "public static java.lang.String getTtyProps() throws java.io.IOException, java.lang.InterruptedException"], ["java.lang.String", "org.apache.sshd.common.channel.SttySupport.stty(java.lang.String)", "public static java.lang.String stty(java.lang.String) throws java.io.IOException, java.lang.InterruptedException"], ["java.lang.String", "org.apache.sshd.common.channel.SttySupport.exec(java.lang.String)", "public static java.lang.String exec(java.lang.String) throws java.io.IOException, java.lang.InterruptedException"], ["java.lang.String", "org.apache.sshd.common.channel.SttySupport.getSttyCommand()", "public static java.lang.String getSttyCommand()"], ["void", "org.apache.sshd.common.channel.SttySupport.setSttyCommand(java.lang.String)", "public static void setSttyCommand(java.lang.String)"], ["org.apache.sshd.common.channel.Window", "org.apache.sshd.common.channel.Window(org.apache.sshd.common.channel.AbstractChannel, java.lang.Object, boolean, boolean)", "public org.apache.sshd.common.channel.Window(org.apache.sshd.common.channel.AbstractChannel, java.lang.Object, boolean, boolean)"], ["java.util.Map<java.lang.String, ?>", "org.apache.sshd.common.channel.Window.getProperties()", "public java.util.Map<java.lang.String, ?> getProperties()"], ["int", "org.apache.sshd.common.channel.Window.getSize()", "public int getSize()"], ["int", "org.apache.sshd.common.channel.Window.getMaxSize()", "public int getMaxSize()"], ["int", "org.apache.sshd.common.channel.Window.getPacketSize()", "public int getPacketSize()"], ["void", "org.apache.sshd.common.channel.Window.init(org.apache.sshd.common.session.Session)", "public void init(org.apache.sshd.common.session.Session)"], ["void", "org.apache.sshd.common.channel.Window.init(org.apache.sshd.common.FactoryManager)", "public void init(org.apache.sshd.common.FactoryManager)"], ["void", "org.apache.sshd.common.channel.Window.init(java.util.Map<java.lang.String, ?>)", "public void init(java.util.Map<java.lang.String, ?>)"], ["void", "org.apache.sshd.common.channel.Window.init(int, int, java.util.Map<java.lang.String, ?>)", "public void init(int, int, java.util.Map<java.lang.String, ?>)"], ["void", "org.apache.sshd.common.channel.Window.expand(int)", "public void expand(int)"], ["void", "org.apache.sshd.common.channel.Window.consume(int)", "public void consume(int)"], ["void", "org.apache.sshd.common.channel.Window.consumeAndCheck(int)", "public void consumeAndCheck(int) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.Window.check(int)", "public void check(int) throws java.io.IOException"], ["void", "org.apache.sshd.common.channel.Window.waitAndConsume(int)", "public void waitAndConsume(int) throws java.lang.InterruptedException, org.apache.sshd.common.channel.WindowClosedException"], ["int", "org.apache.sshd.common.channel.Window.waitForSpace()", "public int waitForSpace() throws java.lang.InterruptedException, org.apache.sshd.common.channel.WindowClosedException"], ["void", "org.apache.sshd.common.channel.Window.notifyClosed()", "public void notifyClosed()"], ["java.lang.String", "org.apache.sshd.common.channel.Window.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.channel.WindowClosedException", "org.apache.sshd.common.channel.WindowClosedException(java.lang.String)", "public org.apache.sshd.common.channel.WindowClosedException(java.lang.String)"], ["org.apache.sshd.common.cipher.BaseCipher", "org.apache.sshd.common.cipher.BaseCipher(int, int, java.lang.String, java.lang.String)", "public org.apache.sshd.common.cipher.BaseCipher(int, int, java.lang.String, java.lang.String)"], ["int", "org.apache.sshd.common.cipher.BaseCipher.getIVSize()", "public int getIVSize()"], ["int", "org.apache.sshd.common.cipher.BaseCipher.getBlockSize()", "public int getBlockSize()"], ["void", "org.apache.sshd.common.cipher.BaseCipher.init(org.apache.sshd.common.cipher.Cipher$Mode, byte[], byte[])", "public void init(org.apache.sshd.common.cipher.Cipher$Mode, byte[], byte[]) throws java.lang.Exception"], ["void", "org.apache.sshd.common.cipher.BaseCipher.update(byte[])", "public void update(byte[]) throws java.lang.Exception"], ["void", "org.apache.sshd.common.cipher.BaseCipher.update(byte[], int, int)", "public void update(byte[], int, int) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.cipher.BaseCipher.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.cipher.BaseRC4Cipher", "org.apache.sshd.common.cipher.BaseRC4Cipher(int, int)", "public org.apache.sshd.common.cipher.BaseRC4Cipher(int, int)"], ["void", "org.apache.sshd.common.cipher.BaseRC4Cipher.init(org.apache.sshd.common.cipher.Cipher$Mode, byte[], byte[])", "public void init(org.apache.sshd.common.cipher.Cipher$Mode, byte[], byte[]) throws java.lang.Exception"], ["org.apache.sshd.common.cipher.Cipher", "org.apache.sshd.common.cipher.BuiltinCiphers$1.create()", "public org.apache.sshd.common.cipher.Cipher create()"], ["java.lang.Object", "org.apache.sshd.common.cipher.BuiltinCiphers$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.cipher.Cipher", "org.apache.sshd.common.cipher.BuiltinCiphers$2.create()", "public org.apache.sshd.common.cipher.Cipher create()"], ["java.lang.Object", "org.apache.sshd.common.cipher.BuiltinCiphers$2.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.cipher.Cipher", "org.apache.sshd.common.cipher.BuiltinCiphers$3.create()", "public org.apache.sshd.common.cipher.Cipher create()"], ["java.lang.Object", "org.apache.sshd.common.cipher.BuiltinCiphers$3.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.cipher.BuiltinCiphers$Constants", "org.apache.sshd.common.cipher.BuiltinCiphers$Constants()", "public org.apache.sshd.common.cipher.BuiltinCiphers$Constants()"], ["boolean", "org.apache.sshd.common.cipher.BuiltinCiphers$Constants.isNoneCipherIncluded(java.lang.String)", "public static boolean isNoneCipherIncluded(java.lang.String)"], ["org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult", "org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult(java.util.List<org.apache.sshd.common.cipher.CipherFactory>, java.util.List<java.lang.String>)", "public org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult(java.util.List<org.apache.sshd.common.cipher.CipherFactory>, java.util.List<java.lang.String>)"], ["org.apache.sshd.common.cipher.BuiltinCiphers[]", "org.apache.sshd.common.cipher.BuiltinCiphers.values()", "public static org.apache.sshd.common.cipher.BuiltinCiphers[] values()"], ["org.apache.sshd.common.cipher.BuiltinCiphers", "org.apache.sshd.common.cipher.BuiltinCiphers.valueOf(java.lang.String)", "public static org.apache.sshd.common.cipher.BuiltinCiphers valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.cipher.BuiltinCiphers.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.common.cipher.BuiltinCiphers.toString()", "public final java.lang.String toString()"], ["boolean", "org.apache.sshd.common.cipher.BuiltinCiphers.isSupported()", "public boolean isSupported()"], ["int", "org.apache.sshd.common.cipher.BuiltinCiphers.getKeySize()", "public int getKeySize()"], ["int", "org.apache.sshd.common.cipher.BuiltinCiphers.getIVSize()", "public int getIVSize()"], ["int", "org.apache.sshd.common.cipher.BuiltinCiphers.getBlockSize()", "public int getBlockSize()"], ["java.lang.String", "org.apache.sshd.common.cipher.BuiltinCiphers.getAlgorithm()", "public java.lang.String getAlgorithm()"], ["java.lang.String", "org.apache.sshd.common.cipher.BuiltinCiphers.getTransformation()", "public java.lang.String getTransformation()"], ["org.apache.sshd.common.cipher.Cipher", "org.apache.sshd.common.cipher.BuiltinCiphers.create()", "public org.apache.sshd.common.cipher.Cipher create()"], ["void", "org.apache.sshd.common.cipher.BuiltinCiphers.registerExtension(org.apache.sshd.common.cipher.CipherFactory)", "public static void registerExtension(org.apache.sshd.common.cipher.CipherFactory)"], ["java.util.SortedSet<org.apache.sshd.common.cipher.CipherFactory>", "org.apache.sshd.common.cipher.BuiltinCiphers.getRegisteredExtensions()", "public static java.util.SortedSet<org.apache.sshd.common.cipher.CipherFactory> getRegisteredExtensions()"], ["org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>", "org.apache.sshd.common.cipher.BuiltinCiphers.unregisterExtension(java.lang.String)", "public static org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher> unregisterExtension(java.lang.String)"], ["org.apache.sshd.common.cipher.BuiltinCiphers", "org.apache.sshd.common.cipher.BuiltinCiphers.fromString(java.lang.String)", "public static org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)"], ["org.apache.sshd.common.cipher.BuiltinCiphers", "org.apache.sshd.common.cipher.BuiltinCiphers.fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>)", "public static org.apache.sshd.common.cipher.BuiltinCiphers fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.cipher.Cipher>)"], ["org.apache.sshd.common.cipher.BuiltinCiphers", "org.apache.sshd.common.cipher.BuiltinCiphers.fromFactoryName(java.lang.String)", "public static org.apache.sshd.common.cipher.BuiltinCiphers fromFactoryName(java.lang.String)"], ["org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult", "org.apache.sshd.common.cipher.BuiltinCiphers.parseCiphersList(java.lang.String)", "public static org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String)"], ["org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult", "org.apache.sshd.common.cipher.BuiltinCiphers.parseCiphersList(java.lang.String...)", "public static org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String...)"], ["org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult", "org.apache.sshd.common.cipher.BuiltinCiphers.parseCiphersList(java.util.Collection<java.lang.String>)", "public static org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.cipher.CipherFactory", "org.apache.sshd.common.cipher.BuiltinCiphers.resolveFactory(java.lang.String)", "public static org.apache.sshd.common.cipher.CipherFactory resolveFactory(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.cipher.BuiltinCiphers.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.cipher.Cipher$Mode[]", "org.apache.sshd.common.cipher.Cipher$Mode.values()", "public static org.apache.sshd.common.cipher.Cipher$Mode[] values()"], ["org.apache.sshd.common.cipher.Cipher$Mode", "org.apache.sshd.common.cipher.Cipher$Mode.valueOf(java.lang.String)", "public static org.apache.sshd.common.cipher.Cipher$Mode valueOf(java.lang.String)"], ["org.apache.sshd.common.cipher.CipherNone", "org.apache.sshd.common.cipher.CipherNone()", "public org.apache.sshd.common.cipher.CipherNone()"], ["int", "org.apache.sshd.common.cipher.CipherNone.getIVSize()", "public int getIVSize()"], ["int", "org.apache.sshd.common.cipher.CipherNone.getBlockSize()", "public int getBlockSize()"], ["void", "org.apache.sshd.common.cipher.CipherNone.init(org.apache.sshd.common.cipher.Cipher$Mode, byte[], byte[])", "public void init(org.apache.sshd.common.cipher.Cipher$Mode, byte[], byte[]) throws java.lang.Exception"], ["void", "org.apache.sshd.common.cipher.CipherNone.update(byte[])", "public void update(byte[]) throws java.lang.Exception"], ["void", "org.apache.sshd.common.cipher.CipherNone.update(byte[], int, int)", "public void update(byte[], int, int) throws java.lang.Exception"], ["org.apache.sshd.common.digest.Digest", "org.apache.sshd.common.cipher.ECCurves$1.getDigestForParams()", "public org.apache.sshd.common.digest.Digest getDigestForParams()"], ["org.apache.sshd.common.digest.Digest", "org.apache.sshd.common.cipher.ECCurves$2.getDigestForParams()", "public org.apache.sshd.common.digest.Digest getDigestForParams()"], ["org.apache.sshd.common.digest.Digest", "org.apache.sshd.common.cipher.ECCurves$3.getDigestForParams()", "public org.apache.sshd.common.digest.Digest getDigestForParams()"], ["org.apache.sshd.common.cipher.ECCurves$Constants", "org.apache.sshd.common.cipher.ECCurves$Constants()", "public org.apache.sshd.common.cipher.ECCurves$Constants()"], ["org.apache.sshd.common.cipher.ECCurves[]", "org.apache.sshd.common.cipher.ECCurves.values()", "public static org.apache.sshd.common.cipher.ECCurves[] values()"], ["org.apache.sshd.common.cipher.ECCurves", "org.apache.sshd.common.cipher.ECCurves.valueOf(java.lang.String)", "public static org.apache.sshd.common.cipher.ECCurves valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.cipher.ECCurves.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.common.cipher.ECCurves.getKeyType()", "public final java.lang.String getKeyType()"], ["boolean", "org.apache.sshd.common.cipher.ECCurves.isSupported()", "public final boolean isSupported()"], ["java.security.spec.ECParameterSpec", "org.apache.sshd.common.cipher.ECCurves.getParameters()", "public final java.security.spec.ECParameterSpec getParameters()"], ["int", "org.apache.sshd.common.cipher.ECCurves.getKeySize()", "public final int getKeySize()"], ["int", "org.apache.sshd.common.cipher.ECCurves.getNumPointOctets()", "public final int getNumPointOctets()"], ["org.apache.sshd.common.cipher.ECCurves", "org.apache.sshd.common.cipher.ECCurves.fromKeyType(java.lang.String)", "public static org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)"], ["org.apache.sshd.common.cipher.ECCurves", "org.apache.sshd.common.cipher.ECCurves.fromCurveName(java.lang.String)", "public static org.apache.sshd.common.cipher.ECCurves fromCurveName(java.lang.String)"], ["org.apache.sshd.common.cipher.ECCurves", "org.apache.sshd.common.cipher.ECCurves.fromCurveParameters(java.security.spec.ECParameterSpec)", "public static org.apache.sshd.common.cipher.ECCurves fromCurveParameters(java.security.spec.ECParameterSpec)"], ["org.apache.sshd.common.cipher.ECCurves", "org.apache.sshd.common.cipher.ECCurves.fromCurveSize(int)", "public static org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)"], ["int", "org.apache.sshd.common.cipher.ECCurves.getCurveSize(java.security.spec.ECParameterSpec)", "public static int getCurveSize(java.security.spec.ECParameterSpec)"], ["byte[]", "org.apache.sshd.common.cipher.ECCurves.encodeECPoint(java.security.spec.ECPoint, java.security.spec.ECParameterSpec)", "public static byte[] encodeECPoint(java.security.spec.ECPoint, java.security.spec.ECParameterSpec)"], ["byte[]", "org.apache.sshd.common.cipher.ECCurves.encodeECPoint(java.security.spec.ECPoint, java.security.spec.EllipticCurve)", "public static byte[] encodeECPoint(java.security.spec.ECPoint, java.security.spec.EllipticCurve)"], ["org.apache.sshd.common.compression.Compression", "org.apache.sshd.common.compression.BuiltinCompressions$1.create()", "public org.apache.sshd.common.compression.Compression create()"], ["java.lang.Object", "org.apache.sshd.common.compression.BuiltinCompressions$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.compression.Compression", "org.apache.sshd.common.compression.BuiltinCompressions$2.create()", "public org.apache.sshd.common.compression.Compression create()"], ["java.lang.Object", "org.apache.sshd.common.compression.BuiltinCompressions$2.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.compression.Compression", "org.apache.sshd.common.compression.BuiltinCompressions$3.create()", "public org.apache.sshd.common.compression.Compression create()"], ["java.lang.Object", "org.apache.sshd.common.compression.BuiltinCompressions$3.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.compression.BuiltinCompressions$Constants", "org.apache.sshd.common.compression.BuiltinCompressions$Constants()", "public org.apache.sshd.common.compression.BuiltinCompressions$Constants()"], ["org.apache.sshd.common.compression.BuiltinCompressions$ParseResult", "org.apache.sshd.common.compression.BuiltinCompressions$ParseResult(java.util.List<org.apache.sshd.common.compression.CompressionFactory>, java.util.List<java.lang.String>)", "public org.apache.sshd.common.compression.BuiltinCompressions$ParseResult(java.util.List<org.apache.sshd.common.compression.CompressionFactory>, java.util.List<java.lang.String>)"], ["org.apache.sshd.common.compression.BuiltinCompressions[]", "org.apache.sshd.common.compression.BuiltinCompressions.values()", "public static org.apache.sshd.common.compression.BuiltinCompressions[] values()"], ["org.apache.sshd.common.compression.BuiltinCompressions", "org.apache.sshd.common.compression.BuiltinCompressions.valueOf(java.lang.String)", "public static org.apache.sshd.common.compression.BuiltinCompressions valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.compression.BuiltinCompressions.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.common.compression.BuiltinCompressions.toString()", "public final java.lang.String toString()"], ["boolean", "org.apache.sshd.common.compression.BuiltinCompressions.isSupported()", "public final boolean isSupported()"], ["void", "org.apache.sshd.common.compression.BuiltinCompressions.registerExtension(org.apache.sshd.common.compression.CompressionFactory)", "public static void registerExtension(org.apache.sshd.common.compression.CompressionFactory)"], ["java.util.SortedSet<org.apache.sshd.common.compression.CompressionFactory>", "org.apache.sshd.common.compression.BuiltinCompressions.getRegisteredExtensions()", "public static java.util.SortedSet<org.apache.sshd.common.compression.CompressionFactory> getRegisteredExtensions()"], ["org.apache.sshd.common.compression.CompressionFactory", "org.apache.sshd.common.compression.BuiltinCompressions.unregisterExtension(java.lang.String)", "public static org.apache.sshd.common.compression.CompressionFactory unregisterExtension(java.lang.String)"], ["org.apache.sshd.common.compression.BuiltinCompressions", "org.apache.sshd.common.compression.BuiltinCompressions.fromFactoryName(java.lang.String)", "public static org.apache.sshd.common.compression.BuiltinCompressions fromFactoryName(java.lang.String)"], ["org.apache.sshd.common.compression.BuiltinCompressions$ParseResult", "org.apache.sshd.common.compression.BuiltinCompressions.parseCompressionsList(java.lang.String)", "public static org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.lang.String)"], ["org.apache.sshd.common.compression.BuiltinCompressions$ParseResult", "org.apache.sshd.common.compression.BuiltinCompressions.parseCompressionsList(java.lang.String...)", "public static org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.lang.String...)"], ["org.apache.sshd.common.compression.BuiltinCompressions$ParseResult", "org.apache.sshd.common.compression.BuiltinCompressions.parseCompressionsList(java.util.Collection<java.lang.String>)", "public static org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.compression.CompressionFactory", "org.apache.sshd.common.compression.BuiltinCompressions.resolveFactory(java.lang.String)", "public static org.apache.sshd.common.compression.CompressionFactory resolveFactory(java.lang.String)"], ["org.apache.sshd.common.compression.Compression$Type[]", "org.apache.sshd.common.compression.Compression$Type.values()", "public static org.apache.sshd.common.compression.Compression$Type[] values()"], ["org.apache.sshd.common.compression.Compression$Type", "org.apache.sshd.common.compression.Compression$Type.valueOf(java.lang.String)", "public static org.apache.sshd.common.compression.Compression$Type valueOf(java.lang.String)"], ["org.apache.sshd.common.compression.CompressionDelayedZlib", "org.apache.sshd.common.compression.CompressionDelayedZlib()", "public org.apache.sshd.common.compression.CompressionDelayedZlib()"], ["boolean", "org.apache.sshd.common.compression.CompressionDelayedZlib.isDelayed()", "public boolean isDelayed()"], ["org.apache.sshd.common.compression.CompressionZlib", "org.apache.sshd.common.compression.CompressionZlib()", "public org.apache.sshd.common.compression.CompressionZlib()"], ["boolean", "org.apache.sshd.common.compression.CompressionZlib.isDelayed()", "public boolean isDelayed()"], ["void", "org.apache.sshd.common.compression.CompressionZlib.init(org.apache.sshd.common.compression.Compression$Type, int)", "public void init(org.apache.sshd.common.compression.Compression$Type, int)"], ["void", "org.apache.sshd.common.compression.CompressionZlib.compress(org.apache.sshd.common.util.buffer.Buffer)", "public void compress(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.compression.CompressionZlib.uncompress(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.common.util.buffer.Buffer)", "public void uncompress(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["org.apache.sshd.common.config.AllowTcpForwardingValue[]", "org.apache.sshd.common.config.AllowTcpForwardingValue.values()", "public static org.apache.sshd.common.config.AllowTcpForwardingValue[] values()"], ["org.apache.sshd.common.config.AllowTcpForwardingValue", "org.apache.sshd.common.config.AllowTcpForwardingValue.valueOf(java.lang.String)", "public static org.apache.sshd.common.config.AllowTcpForwardingValue valueOf(java.lang.String)"], ["org.apache.sshd.common.config.AllowTcpForwardingValue", "org.apache.sshd.common.config.AllowTcpForwardingValue.fromString(java.lang.String)", "public static org.apache.sshd.common.config.AllowTcpForwardingValue fromString(java.lang.String)"], ["org.apache.sshd.common.config.CompressionConfigValue[]", "org.apache.sshd.common.config.CompressionConfigValue.values()", "public static org.apache.sshd.common.config.CompressionConfigValue[] values()"], ["org.apache.sshd.common.config.CompressionConfigValue", "org.apache.sshd.common.config.CompressionConfigValue.valueOf(java.lang.String)", "public static org.apache.sshd.common.config.CompressionConfigValue valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.config.CompressionConfigValue.getName()", "public final java.lang.String getName()"], ["org.apache.sshd.common.compression.Compression", "org.apache.sshd.common.config.CompressionConfigValue.create()", "public final org.apache.sshd.common.compression.Compression create()"], ["boolean", "org.apache.sshd.common.config.CompressionConfigValue.isSupported()", "public boolean isSupported()"], ["java.lang.String", "org.apache.sshd.common.config.CompressionConfigValue.toString()", "public final java.lang.String toString()"], ["org.apache.sshd.common.config.CompressionConfigValue", "org.apache.sshd.common.config.CompressionConfigValue.fromName(java.lang.String)", "public static org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.config.CompressionConfigValue.create()", "public java.lang.Object create()"], ["java.util.List<F>", "org.apache.sshd.common.config.FactoriesListParseResult.getParsedFactories()", "public final java.util.List<F> getParsedFactories()"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.config.FactoriesListParseResult.getUnsupportedFactories()", "public java.util.List<java.lang.String> getUnsupportedFactories()"], ["java.lang.Class<PUB>", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.getPublicKeyType()", "public final java.lang.Class<PUB> getPublicKeyType()"], ["java.lang.Class<PRV>", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.getPrivateKeyType()", "public final java.lang.Class<PRV> getPrivateKeyType()"], ["java.security.KeyPair", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.cloneKeyPair(java.security.KeyPair)", "public java.security.KeyPair cloneKeyPair(java.security.KeyPair) throws java.security.GeneralSecurityException"], ["java.util.Collection<java.lang.String>", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.getSupportedTypeNames()", "public java.util.Collection<java.lang.String> getSupportedTypeNames()"], ["PUB", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodePublicKey(byte...)", "public PUB decodePublicKey(byte...) throws java.io.IOException, java.security.GeneralSecurityException"], ["PUB", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodePublicKey(byte[], int, int)", "public PUB decodePublicKey(byte[], int, int) throws java.io.IOException, java.security.GeneralSecurityException"], ["PUB", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodePublicKey(java.io.InputStream)", "public PUB decodePublicKey(java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException"], ["PUB", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.generatePublicKey(java.security.spec.KeySpec)", "public PUB generatePublicKey(java.security.spec.KeySpec) throws java.security.GeneralSecurityException"], ["PRV", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.generatePrivateKey(java.security.spec.KeySpec)", "public PRV generatePrivateKey(java.security.spec.KeySpec) throws java.security.GeneralSecurityException"], ["java.security.KeyPair", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.generateKeyPair(int)", "public java.security.KeyPair generateKeyPair(int) throws java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.toString()", "public java.lang.String toString()"], ["int", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.encodeString(java.io.OutputStream, java.lang.String)", "public static int encodeString(java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["int", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.encodeString(java.io.OutputStream, java.lang.String, java.lang.String)", "public static int encodeString(java.io.OutputStream, java.lang.String, java.lang.String) throws java.io.IOException"], ["int", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.encodeString(java.io.OutputStream, java.lang.String, java.nio.charset.Charset)", "public static int encodeString(java.io.OutputStream, java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["int", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.encodeBigInt(java.io.OutputStream, java.math.BigInteger)", "public static int encodeBigInt(java.io.OutputStream, java.math.BigInteger) throws java.io.IOException"], ["int", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.writeRLEBytes(java.io.OutputStream, byte...)", "public static int writeRLEBytes(java.io.OutputStream, byte...) throws java.io.IOException"], ["int", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.writeRLEBytes(java.io.OutputStream, byte[], int, int)", "public static int writeRLEBytes(java.io.OutputStream, byte[], int, int) throws java.io.IOException"], ["byte[]", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.encodeInt(java.io.OutputStream, int)", "public static byte[] encodeInt(java.io.OutputStream, int) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodeString(java.io.InputStream)", "public static java.lang.String decodeString(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodeString(java.io.InputStream, java.lang.String)", "public static java.lang.String decodeString(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodeString(java.io.InputStream, java.nio.charset.Charset)", "public static java.lang.String decodeString(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"], ["java.math.BigInteger", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodeBigInt(java.io.InputStream)", "public static java.math.BigInteger decodeBigInt(java.io.InputStream) throws java.io.IOException"], ["byte[]", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.readRLEBytes(java.io.InputStream)", "public static byte[] readRLEBytes(java.io.InputStream) throws java.io.IOException"], ["int", "org.apache.sshd.common.config.keys.AbstractPublicKeyEntryDecoder.decodeInt(java.io.InputStream)", "public static int decodeInt(java.io.InputStream) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.config.keys.BuiltinIdentities$1.isSupported()", "public boolean isSupported()"], ["org.apache.sshd.common.config.keys.BuiltinIdentities$Constants", "org.apache.sshd.common.config.keys.BuiltinIdentities$Constants()", "public org.apache.sshd.common.config.keys.BuiltinIdentities$Constants()"], ["org.apache.sshd.common.config.keys.BuiltinIdentities[]", "org.apache.sshd.common.config.keys.BuiltinIdentities.values()", "public static org.apache.sshd.common.config.keys.BuiltinIdentities[] values()"], ["org.apache.sshd.common.config.keys.BuiltinIdentities", "org.apache.sshd.common.config.keys.BuiltinIdentities.valueOf(java.lang.String)", "public static org.apache.sshd.common.config.keys.BuiltinIdentities valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.config.keys.BuiltinIdentities.getName()", "public final java.lang.String getName()"], ["boolean", "org.apache.sshd.common.config.keys.BuiltinIdentities.isSupported()", "public boolean isSupported()"], ["java.lang.String", "org.apache.sshd.common.config.keys.BuiltinIdentities.getAlgorithm()", "public java.lang.String getAlgorithm()"], ["java.lang.Class<? extends java.security.PublicKey>", "org.apache.sshd.common.config.keys.BuiltinIdentities.getPublicKeyType()", "public final java.lang.Class<? extends java.security.PublicKey> getPublicKeyType()"], ["java.lang.Class<? extends java.security.PrivateKey>", "org.apache.sshd.common.config.keys.BuiltinIdentities.getPrivateKeyType()", "public final java.lang.Class<? extends java.security.PrivateKey> getPrivateKeyType()"], ["org.apache.sshd.common.config.keys.BuiltinIdentities", "org.apache.sshd.common.config.keys.BuiltinIdentities.fromName(java.lang.String)", "public static org.apache.sshd.common.config.keys.BuiltinIdentities fromName(java.lang.String)"], ["org.apache.sshd.common.config.keys.BuiltinIdentities", "org.apache.sshd.common.config.keys.BuiltinIdentities.fromAlgorithm(java.lang.String)", "public static org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)"], ["org.apache.sshd.common.config.keys.BuiltinIdentities", "org.apache.sshd.common.config.keys.BuiltinIdentities.fromKeyPair(java.security.KeyPair)", "public static org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyPair(java.security.KeyPair)"], ["org.apache.sshd.common.config.keys.BuiltinIdentities", "org.apache.sshd.common.config.keys.BuiltinIdentities.fromKey(java.security.Key)", "public static org.apache.sshd.common.config.keys.BuiltinIdentities fromKey(java.security.Key)"], ["org.apache.sshd.common.config.keys.BuiltinIdentities", "org.apache.sshd.common.config.keys.BuiltinIdentities.fromKeyType(java.lang.Class<?>)", "public static org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class<?>)"], ["org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder()", "public org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder()"], ["java.security.interfaces.DSAPublicKey", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.decodePublicKey(java.lang.String, java.io.InputStream)", "public java.security.interfaces.DSAPublicKey decodePublicKey(java.lang.String, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.encodePublicKey(java.io.OutputStream, java.security.interfaces.DSAPublicKey)", "public java.lang.String encodePublicKey(java.io.OutputStream, java.security.interfaces.DSAPublicKey) throws java.io.IOException"], ["java.security.interfaces.DSAPublicKey", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.clonePublicKey(java.security.interfaces.DSAPublicKey)", "public java.security.interfaces.DSAPublicKey clonePublicKey(java.security.interfaces.DSAPublicKey) throws java.security.GeneralSecurityException"], ["java.security.interfaces.DSAPrivateKey", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.clonePrivateKey(java.security.interfaces.DSAPrivateKey)", "public java.security.interfaces.DSAPrivateKey clonePrivateKey(java.security.interfaces.DSAPrivateKey) throws java.security.GeneralSecurityException"], ["java.security.KeyPairGenerator", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.getKeyPairGenerator()", "public java.security.KeyPairGenerator getKeyPairGenerator() throws java.security.GeneralSecurityException"], ["java.security.KeyFactory", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.getKeyFactoryInstance()", "public java.security.KeyFactory getKeyFactoryInstance() throws java.security.GeneralSecurityException"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.decodePublicKey(java.lang.String, java.io.InputStream)", "public java.security.PublicKey decodePublicKey(java.lang.String, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.encodePublicKey(java.io.OutputStream, java.security.PublicKey)", "public java.lang.String encodePublicKey(java.io.OutputStream, java.security.PublicKey) throws java.io.IOException"], ["java.security.PrivateKey", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.clonePrivateKey(java.security.PrivateKey)", "public java.security.PrivateKey clonePrivateKey(java.security.PrivateKey) throws java.security.GeneralSecurityException"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.DSSPublicKeyEntryDecoder.clonePublicKey(java.security.PublicKey)", "public java.security.PublicKey clonePublicKey(java.security.PublicKey) throws java.security.GeneralSecurityException"], ["java.security.spec.ECPoint", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression$1.octetStringToEcPoint(byte[], int, int)", "public java.security.spec.ECPoint octetStringToEcPoint(byte[], int, int)"], ["java.security.spec.ECPoint", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression$2.octetStringToEcPoint(byte[], int, int)", "public java.security.spec.ECPoint octetStringToEcPoint(byte[], int, int)"], ["java.security.spec.ECPoint", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression$3.octetStringToEcPoint(byte[], int, int)", "public java.security.spec.ECPoint octetStringToEcPoint(byte[], int, int)"], ["void", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression$3.writeECPoint(java.io.OutputStream, java.lang.String, java.security.spec.ECPoint)", "public void writeECPoint(java.io.OutputStream, java.lang.String, java.security.spec.ECPoint) throws java.io.IOException"], ["org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression[]", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression.values()", "public static org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression[] values()"], ["org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression.valueOf(java.lang.String)", "public static org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression valueOf(java.lang.String)"], ["byte", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression.getIndicatorValue()", "public final byte getIndicatorValue()"], ["byte[]", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression.ecPointToOctetString(java.lang.String, java.security.spec.ECPoint)", "public byte[] ecPointToOctetString(java.lang.String, java.security.spec.ECPoint)"], ["void", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression.writeECPoint(java.io.OutputStream, java.lang.String, java.security.spec.ECPoint)", "public void writeECPoint(java.io.OutputStream, java.lang.String, java.security.spec.ECPoint) throws java.io.IOException"], ["org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression.fromIndicatorValue(int)", "public static org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression fromIndicatorValue(int)"], ["java.math.BigInteger", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder$ECPointCompression.octetStringToInteger(byte...)", "public static java.math.BigInteger octetStringToInteger(byte...)"], ["org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder()", "public org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder()"], ["java.security.interfaces.ECPublicKey", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.decodePublicKey(java.lang.String, java.io.InputStream)", "public java.security.interfaces.ECPublicKey decodePublicKey(java.lang.String, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.security.interfaces.ECPublicKey", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.clonePublicKey(java.security.interfaces.ECPublicKey)", "public java.security.interfaces.ECPublicKey clonePublicKey(java.security.interfaces.ECPublicKey) throws java.security.GeneralSecurityException"], ["java.security.interfaces.ECPrivateKey", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.clonePrivateKey(java.security.interfaces.ECPrivateKey)", "public java.security.interfaces.ECPrivateKey clonePrivateKey(java.security.interfaces.ECPrivateKey) throws java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.encodePublicKey(java.io.OutputStream, java.security.interfaces.ECPublicKey)", "public java.lang.String encodePublicKey(java.io.OutputStream, java.security.interfaces.ECPublicKey) throws java.io.IOException"], ["java.security.KeyFactory", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.getKeyFactoryInstance()", "public java.security.KeyFactory getKeyFactoryInstance() throws java.security.GeneralSecurityException"], ["java.security.KeyPair", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.generateKeyPair(int)", "public java.security.KeyPair generateKeyPair(int) throws java.security.GeneralSecurityException"], ["java.security.KeyPairGenerator", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.getKeyPairGenerator()", "public java.security.KeyPairGenerator getKeyPairGenerator() throws java.security.GeneralSecurityException"], ["java.security.spec.ECPoint", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.octetStringToEcPoint(byte...)", "public static java.security.spec.ECPoint octetStringToEcPoint(byte...)"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.decodePublicKey(java.lang.String, java.io.InputStream)", "public java.security.PublicKey decodePublicKey(java.lang.String, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.encodePublicKey(java.io.OutputStream, java.security.PublicKey)", "public java.lang.String encodePublicKey(java.io.OutputStream, java.security.PublicKey) throws java.io.IOException"], ["java.security.PrivateKey", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.clonePrivateKey(java.security.PrivateKey)", "public java.security.PrivateKey clonePrivateKey(java.security.PrivateKey) throws java.security.GeneralSecurityException"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.ECDSAPublicKeyEntryDecoder.clonePublicKey(java.security.PublicKey)", "public java.security.PublicKey clonePublicKey(java.security.PublicKey) throws java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.IdentityUtils.getIdentityFileName(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String getIdentityFileName(java.lang.String, java.lang.String, java.lang.String)"], ["org.apache.sshd.common.keyprovider.KeyPairProvider", "org.apache.sshd.common.config.keys.IdentityUtils.createKeyPairProvider(java.util.Map<java.lang.String, java.security.KeyPair>, boolean)", "public static org.apache.sshd.common.keyprovider.KeyPairProvider createKeyPairProvider(java.util.Map<java.lang.String, java.security.KeyPair>, boolean)"], ["java.util.Map<java.lang.String, java.security.KeyPair>", "org.apache.sshd.common.config.keys.IdentityUtils.loadIdentities(java.util.Map<java.lang.String, ? extends java.nio.file.Path>, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.OpenOption...)", "public static java.util.Map<java.lang.String, java.security.KeyPair> loadIdentities(java.util.Map<java.lang.String, ? extends java.nio.file.Path>, org.apache.sshd.common.config.keys.FilePasswordProvider, java.nio.file.OpenOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.nio.file.attribute.PosixFilePermission", "org.apache.sshd.common.config.keys.KeyUtils.validateStrictKeyFilePermissions(java.nio.file.Path, java.nio.file.LinkOption...)", "public static java.nio.file.attribute.PosixFilePermission validateStrictKeyFilePermissions(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.security.KeyPair", "org.apache.sshd.common.config.keys.KeyUtils.generateKeyPair(java.lang.String, int)", "public static java.security.KeyPair generateKeyPair(java.lang.String, int) throws java.security.GeneralSecurityException"], ["java.security.KeyPair", "org.apache.sshd.common.config.keys.KeyUtils.cloneKeyPair(java.lang.String, java.security.KeyPair)", "public static java.security.KeyPair cloneKeyPair(java.lang.String, java.security.KeyPair) throws java.security.GeneralSecurityException"], ["void", "org.apache.sshd.common.config.keys.KeyUtils.registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?>)", "public static void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?>)"], ["org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?>", "org.apache.sshd.common.config.keys.KeyUtils.getPublicKeyEntryDecoder(java.lang.String)", "public static org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?> getPublicKeyEntryDecoder(java.lang.String)"], ["org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?>", "org.apache.sshd.common.config.keys.KeyUtils.getPublicKeyEntryDecoder(java.security.KeyPair)", "public static org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?> getPublicKeyEntryDecoder(java.security.KeyPair)"], ["org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?>", "org.apache.sshd.common.config.keys.KeyUtils.getPublicKeyEntryDecoder(java.security.Key)", "public static org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?> getPublicKeyEntryDecoder(java.security.Key)"], ["org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?>", "org.apache.sshd.common.config.keys.KeyUtils.getPublicKeyEntryDecoder(java.lang.Class<?>)", "public static org.apache.sshd.common.config.keys.PublicKeyEntryDecoder<?, ?> getPublicKeyEntryDecoder(java.lang.Class<?>)"], ["org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>", "org.apache.sshd.common.config.keys.KeyUtils.getDefaultFingerPrintFactory()", "public static org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest> getDefaultFingerPrintFactory()"], ["void", "org.apache.sshd.common.config.keys.KeyUtils.setDefaultFingerPrintFactory(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>)", "public static void setDefaultFingerPrintFactory(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(java.security.PublicKey)", "public static java.lang.String getFingerPrint(java.security.PublicKey)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(java.lang.String)", "public static java.lang.String getFingerPrint(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(java.lang.String, java.nio.charset.Charset)", "public static java.lang.String getFingerPrint(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.security.PublicKey)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.security.PublicKey)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(org.apache.sshd.common.digest.Digest, java.security.PublicKey)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest, java.security.PublicKey)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String, java.nio.charset.Charset)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String, java.nio.charset.Charset)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getKeyType(java.security.KeyPair)", "public static java.lang.String getKeyType(java.security.KeyPair)"], ["java.lang.String", "org.apache.sshd.common.config.keys.KeyUtils.getKeyType(java.security.Key)", "public static java.lang.String getKeyType(java.security.Key)"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.KeyUtils.findMatchingKey(java.security.PublicKey, java.security.PublicKey...)", "public static java.security.PublicKey findMatchingKey(java.security.PublicKey, java.security.PublicKey...)"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.KeyUtils.findMatchingKey(java.security.PublicKey, java.util.Collection<? extends java.security.PublicKey>)", "public static java.security.PublicKey findMatchingKey(java.security.PublicKey, java.util.Collection<? extends java.security.PublicKey>)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareKeyPairs(java.security.KeyPair, java.security.KeyPair)", "public static boolean compareKeyPairs(java.security.KeyPair, java.security.KeyPair)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareKeys(java.security.PrivateKey, java.security.PrivateKey)", "public static boolean compareKeys(java.security.PrivateKey, java.security.PrivateKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareRSAKeys(java.security.interfaces.RSAPrivateKey, java.security.interfaces.RSAPrivateKey)", "public static boolean compareRSAKeys(java.security.interfaces.RSAPrivateKey, java.security.interfaces.RSAPrivateKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareDSAKeys(java.security.interfaces.DSAPrivateKey, java.security.interfaces.DSAPrivateKey)", "public static boolean compareDSAKeys(java.security.interfaces.DSAPrivateKey, java.security.interfaces.DSAPrivateKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareECKeys(java.security.interfaces.ECPrivateKey, java.security.interfaces.ECPrivateKey)", "public static boolean compareECKeys(java.security.interfaces.ECPrivateKey, java.security.interfaces.ECPrivateKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareKeys(java.security.PublicKey, java.security.PublicKey)", "public static boolean compareKeys(java.security.PublicKey, java.security.PublicKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareRSAKeys(java.security.interfaces.RSAPublicKey, java.security.interfaces.RSAPublicKey)", "public static boolean compareRSAKeys(java.security.interfaces.RSAPublicKey, java.security.interfaces.RSAPublicKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareDSAKeys(java.security.interfaces.DSAPublicKey, java.security.interfaces.DSAPublicKey)", "public static boolean compareDSAKeys(java.security.interfaces.DSAPublicKey, java.security.interfaces.DSAPublicKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareDSAParams(java.security.interfaces.DSAParams, java.security.interfaces.DSAParams)", "public static boolean compareDSAParams(java.security.interfaces.DSAParams, java.security.interfaces.DSAParams)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareECKeys(java.security.interfaces.ECPublicKey, java.security.interfaces.ECPublicKey)", "public static boolean compareECKeys(java.security.interfaces.ECPublicKey, java.security.interfaces.ECPublicKey)"], ["boolean", "org.apache.sshd.common.config.keys.KeyUtils.compareECParams(java.security.spec.ECParameterSpec, java.security.spec.ECParameterSpec)", "public static boolean compareECParams(java.security.spec.ECParameterSpec, java.security.spec.ECParameterSpec)"], ["org.apache.sshd.common.config.keys.PublicKeyEntry", "org.apache.sshd.common.config.keys.PublicKeyEntry()", "public org.apache.sshd.common.config.keys.PublicKeyEntry()"], ["org.apache.sshd.common.config.keys.PublicKeyEntry", "org.apache.sshd.common.config.keys.PublicKeyEntry(java.lang.String, byte...)", "public org.apache.sshd.common.config.keys.PublicKeyEntry(java.lang.String, byte...)"], ["java.lang.String", "org.apache.sshd.common.config.keys.PublicKeyEntry.getKeyType()", "public java.lang.String getKeyType()"], ["void", "org.apache.sshd.common.config.keys.PublicKeyEntry.setKeyType(java.lang.String)", "public void setKeyType(java.lang.String)"], ["byte[]", "org.apache.sshd.common.config.keys.PublicKeyEntry.getKeyData()", "public byte[] getKeyData()"], ["void", "org.apache.sshd.common.config.keys.PublicKeyEntry.setKeyData(byte[])", "public void setKeyData(byte[])"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.PublicKeyEntry.resolvePublicKey()", "public java.security.PublicKey resolvePublicKey() throws java.io.IOException, java.security.GeneralSecurityException"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.PublicKeyEntry.appendPublicKey(java.lang.Appendable)", "public java.security.PublicKey appendPublicKey(java.lang.Appendable) throws java.io.IOException, java.security.GeneralSecurityException"], ["int", "org.apache.sshd.common.config.keys.PublicKeyEntry.hashCode()", "public int hashCode()"], ["boolean", "org.apache.sshd.common.config.keys.PublicKeyEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.sshd.common.config.keys.PublicKeyEntry.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.config.keys.PublicKeyEntry", "org.apache.sshd.common.config.keys.PublicKeyEntry.parsePublicKeyEntry(java.lang.String)", "public static final org.apache.sshd.common.config.keys.PublicKeyEntry parsePublicKeyEntry(java.lang.String) throws java.lang.IllegalArgumentException"], ["<E extends org.apache.sshd.common.config.keys.PublicKeyEntry> E", "org.apache.sshd.common.config.keys.PublicKeyEntry.parsePublicKeyEntry(E, java.lang.String)", "public static final <E extends org.apache.sshd.common.config.keys.PublicKeyEntry> E parsePublicKeyEntry(E, java.lang.String) throws java.lang.IllegalArgumentException"], ["java.lang.String", "org.apache.sshd.common.config.keys.PublicKeyEntry.toString(java.security.PublicKey)", "public static java.lang.String toString(java.security.PublicKey) throws java.lang.IllegalArgumentException"], ["<A extends java.lang.Appendable> A", "org.apache.sshd.common.config.keys.PublicKeyEntry.appendPublicKeyEntry(A, java.security.PublicKey)", "public static <A extends java.lang.Appendable> A appendPublicKeyEntry(A, java.security.PublicKey) throws java.io.IOException"], ["java.io.File", "org.apache.sshd.common.config.keys.PublicKeyEntry.getDefaultKeysFolder()", "public static java.io.File getDefaultKeysFolder()"], ["org.apache.sshd.common.config.keys.RSAPublicKeyDecoder", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder()", "public org.apache.sshd.common.config.keys.RSAPublicKeyDecoder()"], ["java.security.interfaces.RSAPublicKey", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.decodePublicKey(java.lang.String, java.io.InputStream)", "public java.security.interfaces.RSAPublicKey decodePublicKey(java.lang.String, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.encodePublicKey(java.io.OutputStream, java.security.interfaces.RSAPublicKey)", "public java.lang.String encodePublicKey(java.io.OutputStream, java.security.interfaces.RSAPublicKey) throws java.io.IOException"], ["java.security.interfaces.RSAPublicKey", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.clonePublicKey(java.security.interfaces.RSAPublicKey)", "public java.security.interfaces.RSAPublicKey clonePublicKey(java.security.interfaces.RSAPublicKey) throws java.security.GeneralSecurityException"], ["java.security.interfaces.RSAPrivateKey", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.clonePrivateKey(java.security.interfaces.RSAPrivateKey)", "public java.security.interfaces.RSAPrivateKey clonePrivateKey(java.security.interfaces.RSAPrivateKey) throws java.security.GeneralSecurityException"], ["java.security.KeyPairGenerator", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.getKeyPairGenerator()", "public java.security.KeyPairGenerator getKeyPairGenerator() throws java.security.GeneralSecurityException"], ["java.security.KeyFactory", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.getKeyFactoryInstance()", "public java.security.KeyFactory getKeyFactoryInstance() throws java.security.GeneralSecurityException"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.decodePublicKey(java.lang.String, java.io.InputStream)", "public java.security.PublicKey decodePublicKey(java.lang.String, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.encodePublicKey(java.io.OutputStream, java.security.PublicKey)", "public java.lang.String encodePublicKey(java.io.OutputStream, java.security.PublicKey) throws java.io.IOException"], ["java.security.PrivateKey", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.clonePrivateKey(java.security.PrivateKey)", "public java.security.PrivateKey clonePrivateKey(java.security.PrivateKey) throws java.security.GeneralSecurityException"], ["java.security.PublicKey", "org.apache.sshd.common.config.keys.RSAPublicKeyDecoder.clonePublicKey(java.security.PublicKey)", "public java.security.PublicKey clonePublicKey(java.security.PublicKey) throws java.security.GeneralSecurityException"], ["java.util.List<E>", "org.apache.sshd.common.config.ListParseResult.getParsedValues()", "public final java.util.List<E> getParsedValues()"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.config.ListParseResult.getUnsupportedValues()", "public java.util.List<java.lang.String> getUnsupportedValues()"], ["java.lang.String", "org.apache.sshd.common.config.ListParseResult.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.config.LogLevelValue[]", "org.apache.sshd.common.config.LogLevelValue.values()", "public static org.apache.sshd.common.config.LogLevelValue[] values()"], ["org.apache.sshd.common.config.LogLevelValue", "org.apache.sshd.common.config.LogLevelValue.valueOf(java.lang.String)", "public static org.apache.sshd.common.config.LogLevelValue valueOf(java.lang.String)"], ["org.apache.sshd.common.config.LogLevelValue", "org.apache.sshd.common.config.LogLevelValue.fromName(java.lang.String)", "public static org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.config.NamedFactoriesListParseResult.toString()", "public java.lang.String toString()"], ["java.util.List<R>", "org.apache.sshd.common.config.NamedResourceListParseResult.getParsedResources()", "public final java.util.List<R> getParsedResources()"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.config.NamedResourceListParseResult.getUnsupportedResources()", "public java.util.List<java.lang.String> getUnsupportedResources()"], ["java.lang.String", "org.apache.sshd.common.config.NamedResourceListParseResult.toString()", "public java.lang.String toString()"], ["java.util.Properties", "org.apache.sshd.common.config.SshConfigFileReader.readConfigFile(java.io.File)", "public static java.util.Properties readConfigFile(java.io.File) throws java.io.IOException"], ["java.util.Properties", "org.apache.sshd.common.config.SshConfigFileReader.readConfigFile(java.nio.file.Path, java.nio.file.OpenOption...)", "public static java.util.Properties readConfigFile(java.nio.file.Path, java.nio.file.OpenOption...) throws java.io.IOException"], ["java.util.Properties", "org.apache.sshd.common.config.SshConfigFileReader.readConfigFile(java.net.URL)", "public static java.util.Properties readConfigFile(java.net.URL) throws java.io.IOException"], ["java.util.Properties", "org.apache.sshd.common.config.SshConfigFileReader.readConfigFile(java.lang.String)", "public static java.util.Properties readConfigFile(java.lang.String) throws java.io.IOException"], ["java.util.Properties", "org.apache.sshd.common.config.SshConfigFileReader.readConfigFile(java.io.InputStream, boolean)", "public static java.util.Properties readConfigFile(java.io.InputStream, boolean) throws java.io.IOException"], ["java.util.Properties", "org.apache.sshd.common.config.SshConfigFileReader.readConfigFile(java.io.Reader, boolean)", "public static java.util.Properties readConfigFile(java.io.Reader, boolean) throws java.io.IOException"], ["java.util.Properties", "org.apache.sshd.common.config.SshConfigFileReader.readConfigFile(java.io.BufferedReader)", "public static java.util.Properties readConfigFile(java.io.BufferedReader) throws java.io.IOException"], ["long", "org.apache.sshd.common.config.SshConfigFileReader.getLongProperty(java.util.Properties, java.lang.String, long)", "public static long getLongProperty(java.util.Properties, java.lang.String, long)"], ["java.lang.Long", "org.apache.sshd.common.config.SshConfigFileReader.getLong(java.util.Properties, java.lang.String)", "public static java.lang.Long getLong(java.util.Properties, java.lang.String)"], ["int", "org.apache.sshd.common.config.SshConfigFileReader.getIntProperty(java.util.Properties, java.lang.String, int)", "public static int getIntProperty(java.util.Properties, java.lang.String, int)"], ["java.lang.Integer", "org.apache.sshd.common.config.SshConfigFileReader.getInteger(java.util.Properties, java.lang.String)", "public static java.lang.Integer getInteger(java.util.Properties, java.lang.String)"], ["boolean", "org.apache.sshd.common.config.SshConfigFileReader.getBooleanProperty(java.util.Properties, java.lang.String, boolean)", "public static boolean getBooleanProperty(java.util.Properties, java.lang.String, boolean)"], ["java.lang.Boolean", "org.apache.sshd.common.config.SshConfigFileReader.getBoolean(java.util.Properties, java.lang.String)", "public static java.lang.Boolean getBoolean(java.util.Properties, java.lang.String)"], ["boolean", "org.apache.sshd.common.config.SshConfigFileReader.parseBooleanValue(java.lang.String, boolean)", "public static boolean parseBooleanValue(java.lang.String, boolean)"], ["boolean", "org.apache.sshd.common.config.SshConfigFileReader.parseBooleanValue(java.lang.String)", "public static boolean parseBooleanValue(java.lang.String)"], ["org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult", "org.apache.sshd.common.config.SshConfigFileReader.getCiphers(java.util.Properties)", "public static org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult getCiphers(java.util.Properties)"], ["org.apache.sshd.common.mac.BuiltinMacs$ParseResult", "org.apache.sshd.common.config.SshConfigFileReader.getMacs(java.util.Properties)", "public static org.apache.sshd.common.mac.BuiltinMacs$ParseResult getMacs(java.util.Properties)"], ["org.apache.sshd.common.signature.BuiltinSignatures$ParseResult", "org.apache.sshd.common.config.SshConfigFileReader.getSignatures(java.util.Properties)", "public static org.apache.sshd.common.signature.BuiltinSignatures$ParseResult getSignatures(java.util.Properties)"], ["org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult", "org.apache.sshd.common.config.SshConfigFileReader.getKexFactories(java.util.Properties)", "public static org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult getKexFactories(java.util.Properties)"], ["org.apache.sshd.common.compression.CompressionFactory", "org.apache.sshd.common.config.SshConfigFileReader.getCompression(java.util.Properties)", "public static org.apache.sshd.common.compression.CompressionFactory getCompression(java.util.Properties)"], ["<S extends org.apache.sshd.server.SshServer> S", "org.apache.sshd.common.config.SshConfigFileReader.configure(S, java.util.Properties, boolean, boolean)", "public static <S extends org.apache.sshd.server.SshServer> S configure(S, java.util.Properties, boolean, boolean)"], ["<C extends org.apache.sshd.client.SshClient> C", "org.apache.sshd.common.config.SshConfigFileReader.configure(C, java.util.Properties, boolean, boolean)", "public static <C extends org.apache.sshd.client.SshClient> C configure(C, java.util.Properties, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configure(M, java.util.Properties, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configure(M, java.util.Properties, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureCiphers(M, java.util.Properties, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureCiphers(M, java.util.Properties, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureCiphers(M, java.lang.String, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureCiphers(M, java.lang.String, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureSignatures(M, java.util.Properties, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureSignatures(M, java.util.Properties, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureSignatures(M, java.lang.String, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureSignatures(M, java.lang.String, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureMacs(M, java.util.Properties, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureMacs(M, java.util.Properties, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureMacs(M, java.lang.String, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureMacs(M, java.lang.String, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureKeyExchanges(M, java.util.Properties, boolean, org.apache.sshd.common.util.Transformer<? super org.apache.sshd.common.kex.DHFactory, ? extends org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureKeyExchanges(M, java.util.Properties, boolean, org.apache.sshd.common.util.Transformer<? super org.apache.sshd.common.kex.DHFactory, ? extends org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureKeyExchanges(M, java.lang.String, boolean, org.apache.sshd.common.util.Transformer<? super org.apache.sshd.common.kex.DHFactory, ? extends org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureKeyExchanges(M, java.lang.String, boolean, org.apache.sshd.common.util.Transformer<? super org.apache.sshd.common.kex.DHFactory, ? extends org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureCompression(M, java.util.Properties, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureCompression(M, java.util.Properties, boolean, boolean)"], ["<M extends org.apache.sshd.common.AbstractFactoryManager> M", "org.apache.sshd.common.config.SshConfigFileReader.configureCompression(M, java.lang.String, boolean, boolean)", "public static <M extends org.apache.sshd.common.AbstractFactoryManager> M configureCompression(M, java.lang.String, boolean, boolean)"], ["org.apache.sshd.common.config.SyslogFacilityValue[]", "org.apache.sshd.common.config.SyslogFacilityValue.values()", "public static org.apache.sshd.common.config.SyslogFacilityValue[] values()"], ["org.apache.sshd.common.config.SyslogFacilityValue", "org.apache.sshd.common.config.SyslogFacilityValue.valueOf(java.lang.String)", "public static org.apache.sshd.common.config.SyslogFacilityValue valueOf(java.lang.String)"], ["org.apache.sshd.common.config.SyslogFacilityValue", "org.apache.sshd.common.config.SyslogFacilityValue.fromName(java.lang.String)", "public static org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)"], ["org.apache.sshd.common.config.TimeValueConfig[]", "org.apache.sshd.common.config.TimeValueConfig.values()", "public static org.apache.sshd.common.config.TimeValueConfig[] values()"], ["org.apache.sshd.common.config.TimeValueConfig", "org.apache.sshd.common.config.TimeValueConfig.valueOf(java.lang.String)", "public static org.apache.sshd.common.config.TimeValueConfig valueOf(java.lang.String)"], ["char", "org.apache.sshd.common.config.TimeValueConfig.getLowerCaseValue()", "public final char getLowerCaseValue()"], ["char", "org.apache.sshd.common.config.TimeValueConfig.getUpperCaseValue()", "public final char getUpperCaseValue()"], ["long", "org.apache.sshd.common.config.TimeValueConfig.getInterval()", "public final long getInterval()"], ["org.apache.sshd.common.config.TimeValueConfig", "org.apache.sshd.common.config.TimeValueConfig.fromValueChar(char)", "public static org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)"], ["long", "org.apache.sshd.common.config.TimeValueConfig.durationOf(java.lang.String)", "public static long durationOf(java.lang.String)"], ["java.util.Map<org.apache.sshd.common.config.TimeValueConfig, java.lang.Long>", "org.apache.sshd.common.config.TimeValueConfig.parse(java.lang.String)", "public static java.util.Map<org.apache.sshd.common.config.TimeValueConfig, java.lang.Long> parse(java.lang.String) throws java.lang.NumberFormatException, java.lang.IllegalArgumentException"], ["long", "org.apache.sshd.common.config.TimeValueConfig.durationOf(java.util.Map<org.apache.sshd.common.config.TimeValueConfig, ? extends java.lang.Number>)", "public static long durationOf(java.util.Map<org.apache.sshd.common.config.TimeValueConfig, ? extends java.lang.Number>) throws java.lang.IllegalArgumentException"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.sshd.common.config.VersionProperties.getVersionProperties()", "public static java.util.Map<java.lang.String, java.lang.String> getVersionProperties()"], ["org.apache.sshd.common.digest.BaseDigest", "org.apache.sshd.common.digest.BaseDigest(java.lang.String, int)", "public org.apache.sshd.common.digest.BaseDigest(java.lang.String, int)"], ["java.lang.String", "org.apache.sshd.common.digest.BaseDigest.getAlgorithm()", "public final java.lang.String getAlgorithm()"], ["int", "org.apache.sshd.common.digest.BaseDigest.getBlockSize()", "public int getBlockSize()"], ["void", "org.apache.sshd.common.digest.BaseDigest.init()", "public void init() throws java.lang.Exception"], ["void", "org.apache.sshd.common.digest.BaseDigest.update(byte[])", "public void update(byte[]) throws java.lang.Exception"], ["void", "org.apache.sshd.common.digest.BaseDigest.update(byte[], int, int)", "public void update(byte[], int, int) throws java.lang.Exception"], ["byte[]", "org.apache.sshd.common.digest.BaseDigest.digest()", "public byte[] digest() throws java.lang.Exception"], ["int", "org.apache.sshd.common.digest.BaseDigest.hashCode()", "public int hashCode()"], ["int", "org.apache.sshd.common.digest.BaseDigest.compareTo(org.apache.sshd.common.digest.Digest)", "public int compareTo(org.apache.sshd.common.digest.Digest)"], ["boolean", "org.apache.sshd.common.digest.BaseDigest.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.sshd.common.digest.BaseDigest.toString()", "public java.lang.String toString()"], ["int", "org.apache.sshd.common.digest.BaseDigest.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.sshd.common.digest.BuiltinDigests$Constants", "org.apache.sshd.common.digest.BuiltinDigests$Constants()", "public org.apache.sshd.common.digest.BuiltinDigests$Constants()"], ["org.apache.sshd.common.digest.BuiltinDigests[]", "org.apache.sshd.common.digest.BuiltinDigests.values()", "public static org.apache.sshd.common.digest.BuiltinDigests[] values()"], ["org.apache.sshd.common.digest.BuiltinDigests", "org.apache.sshd.common.digest.BuiltinDigests.valueOf(java.lang.String)", "public static org.apache.sshd.common.digest.BuiltinDigests valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.digest.BuiltinDigests.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.common.digest.BuiltinDigests.getAlgorithm()", "public final java.lang.String getAlgorithm()"], ["int", "org.apache.sshd.common.digest.BuiltinDigests.getBlockSize()", "public final int getBlockSize()"], ["java.lang.String", "org.apache.sshd.common.digest.BuiltinDigests.toString()", "public final java.lang.String toString()"], ["org.apache.sshd.common.digest.Digest", "org.apache.sshd.common.digest.BuiltinDigests.create()", "public final org.apache.sshd.common.digest.Digest create()"], ["org.apache.sshd.common.digest.BuiltinDigests", "org.apache.sshd.common.digest.BuiltinDigests.fromString(java.lang.String)", "public static org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)"], ["org.apache.sshd.common.digest.BuiltinDigests", "org.apache.sshd.common.digest.BuiltinDigests.fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.digest.Digest>)", "public static org.apache.sshd.common.digest.BuiltinDigests fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.digest.Digest>)"], ["org.apache.sshd.common.digest.BuiltinDigests", "org.apache.sshd.common.digest.BuiltinDigests.fromFactoryName(java.lang.String)", "public static org.apache.sshd.common.digest.BuiltinDigests fromFactoryName(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.digest.BuiltinDigests.create()", "public java.lang.Object create()"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String, java.nio.charset.Charset)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, java.lang.String, java.nio.charset.Charset) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String, java.nio.charset.Charset)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest, java.lang.String, java.nio.charset.Charset) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, byte...)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, byte...) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, byte[], int, int)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.Factory<? extends org.apache.sshd.common.digest.Digest>, byte[], int, int) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.digest.Digest, byte...)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest, byte...) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.digest.DigestUtils.getFingerPrint(org.apache.sshd.common.digest.Digest, byte[], int, int)", "public static java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest, byte[], int, int) throws java.lang.Exception"], ["long", "org.apache.sshd.common.FactoryManagerUtils.getLongProperty(org.apache.sshd.common.session.Session, java.lang.String, long)", "public static long getLongProperty(org.apache.sshd.common.session.Session, java.lang.String, long)"], ["long", "org.apache.sshd.common.FactoryManagerUtils.getLongProperty(org.apache.sshd.common.FactoryManager, java.lang.String, long)", "public static long getLongProperty(org.apache.sshd.common.FactoryManager, java.lang.String, long)"], ["long", "org.apache.sshd.common.FactoryManagerUtils.getLongProperty(java.util.Map<java.lang.String, ?>, java.lang.String, long)", "public static long getLongProperty(java.util.Map<java.lang.String, ?>, java.lang.String, long)"], ["java.lang.Long", "org.apache.sshd.common.FactoryManagerUtils.getLong(org.apache.sshd.common.session.Session, java.lang.String)", "public static java.lang.Long getLong(org.apache.sshd.common.session.Session, java.lang.String)"], ["java.lang.Long", "org.apache.sshd.common.FactoryManagerUtils.getLong(org.apache.sshd.common.FactoryManager, java.lang.String)", "public static java.lang.Long getLong(org.apache.sshd.common.FactoryManager, java.lang.String)"], ["java.lang.Long", "org.apache.sshd.common.FactoryManagerUtils.getLong(java.util.Map<java.lang.String, ?>, java.lang.String)", "public static java.lang.Long getLong(java.util.Map<java.lang.String, ?>, java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.session.Session, java.lang.String, long)", "public static java.lang.Object updateProperty(org.apache.sshd.common.session.Session, java.lang.String, long)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, long)", "public static java.lang.Object updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, long)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, long)", "public static java.lang.Object updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, long)"], ["int", "org.apache.sshd.common.FactoryManagerUtils.getIntProperty(org.apache.sshd.common.session.Session, java.lang.String, int)", "public static int getIntProperty(org.apache.sshd.common.session.Session, java.lang.String, int)"], ["int", "org.apache.sshd.common.FactoryManagerUtils.getIntProperty(org.apache.sshd.common.FactoryManager, java.lang.String, int)", "public static int getIntProperty(org.apache.sshd.common.FactoryManager, java.lang.String, int)"], ["int", "org.apache.sshd.common.FactoryManagerUtils.getIntProperty(java.util.Map<java.lang.String, ?>, java.lang.String, int)", "public static int getIntProperty(java.util.Map<java.lang.String, ?>, java.lang.String, int)"], ["java.lang.Integer", "org.apache.sshd.common.FactoryManagerUtils.getInteger(org.apache.sshd.common.session.Session, java.lang.String)", "public static java.lang.Integer getInteger(org.apache.sshd.common.session.Session, java.lang.String)"], ["java.lang.Integer", "org.apache.sshd.common.FactoryManagerUtils.getInteger(org.apache.sshd.common.FactoryManager, java.lang.String)", "public static java.lang.Integer getInteger(org.apache.sshd.common.FactoryManager, java.lang.String)"], ["java.lang.Integer", "org.apache.sshd.common.FactoryManagerUtils.getInteger(java.util.Map<java.lang.String, ?>, java.lang.String)", "public static java.lang.Integer getInteger(java.util.Map<java.lang.String, ?>, java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.session.Session, java.lang.String, int)", "public static java.lang.Object updateProperty(org.apache.sshd.common.session.Session, java.lang.String, int)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, int)", "public static java.lang.Object updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, int)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, int)", "public static java.lang.Object updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, int)"], ["boolean", "org.apache.sshd.common.FactoryManagerUtils.getBooleanProperty(org.apache.sshd.common.session.Session, java.lang.String, boolean)", "public static boolean getBooleanProperty(org.apache.sshd.common.session.Session, java.lang.String, boolean)"], ["boolean", "org.apache.sshd.common.FactoryManagerUtils.getBooleanProperty(org.apache.sshd.common.FactoryManager, java.lang.String, boolean)", "public static boolean getBooleanProperty(org.apache.sshd.common.FactoryManager, java.lang.String, boolean)"], ["boolean", "org.apache.sshd.common.FactoryManagerUtils.getBooleanProperty(java.util.Map<java.lang.String, ?>, java.lang.String, boolean)", "public static boolean getBooleanProperty(java.util.Map<java.lang.String, ?>, java.lang.String, boolean)"], ["java.lang.Boolean", "org.apache.sshd.common.FactoryManagerUtils.getBoolean(org.apache.sshd.common.session.Session, java.lang.String)", "public static java.lang.Boolean getBoolean(org.apache.sshd.common.session.Session, java.lang.String)"], ["java.lang.Boolean", "org.apache.sshd.common.FactoryManagerUtils.getBoolean(org.apache.sshd.common.FactoryManager, java.lang.String)", "public static java.lang.Boolean getBoolean(org.apache.sshd.common.FactoryManager, java.lang.String)"], ["java.lang.Boolean", "org.apache.sshd.common.FactoryManagerUtils.getBoolean(java.util.Map<java.lang.String, ?>, java.lang.String)", "public static java.lang.Boolean getBoolean(java.util.Map<java.lang.String, ?>, java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.session.Session, java.lang.String, boolean)", "public static java.lang.Object updateProperty(org.apache.sshd.common.session.Session, java.lang.String, boolean)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, boolean)", "public static java.lang.Object updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, boolean)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, boolean)", "public static java.lang.Object updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, boolean)"], ["java.lang.String", "org.apache.sshd.common.FactoryManagerUtils.getString(org.apache.sshd.common.session.Session, java.lang.String)", "public static java.lang.String getString(org.apache.sshd.common.session.Session, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.FactoryManagerUtils.getStringProperty(org.apache.sshd.common.session.Session, java.lang.String, java.lang.String)", "public static java.lang.String getStringProperty(org.apache.sshd.common.session.Session, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.FactoryManagerUtils.getString(org.apache.sshd.common.FactoryManager, java.lang.String)", "public static java.lang.String getString(org.apache.sshd.common.FactoryManager, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.FactoryManagerUtils.getStringProperty(org.apache.sshd.common.FactoryManager, java.lang.String, java.lang.String)", "public static java.lang.String getStringProperty(org.apache.sshd.common.FactoryManager, java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.FactoryManagerUtils.getString(java.util.Map<java.lang.String, ?>, java.lang.String)", "public static java.lang.String getString(java.util.Map<java.lang.String, ?>, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.FactoryManagerUtils.getStringProperty(java.util.Map<java.lang.String, ?>, java.lang.String, java.lang.String)", "public static java.lang.String getStringProperty(java.util.Map<java.lang.String, ?>, java.lang.String, java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.session.Session, java.lang.String, java.lang.Object)", "public static java.lang.Object updateProperty(org.apache.sshd.common.session.Session, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, java.lang.Object)", "public static java.lang.Object updateProperty(org.apache.sshd.common.FactoryManager, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.apache.sshd.common.FactoryManagerUtils.updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.Object)", "public static java.lang.Object updateProperty(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.Object)"], ["org.apache.sshd.common.file.nativefs.NativeFileSystemFactory", "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory()", "public org.apache.sshd.common.file.nativefs.NativeFileSystemFactory()"], ["org.apache.sshd.common.file.nativefs.NativeFileSystemFactory", "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory(boolean)", "public org.apache.sshd.common.file.nativefs.NativeFileSystemFactory(boolean)"], ["boolean", "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory.isCreateHome()", "public boolean isCreateHome()"], ["void", "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory.setCreateHome(boolean)", "public void setCreateHome(boolean)"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory.createFileSystem(org.apache.sshd.common.session.Session)", "public java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)"], ["org.apache.sshd.common.file.root.RootedFileSystem", "org.apache.sshd.common.file.root.RootedFileSystem(org.apache.sshd.common.file.root.RootedFileSystemProvider, java.nio.file.Path, java.util.Map<java.lang.String, ?>)", "public org.apache.sshd.common.file.root.RootedFileSystem(org.apache.sshd.common.file.root.RootedFileSystemProvider, java.nio.file.Path, java.util.Map<java.lang.String, ?>)"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.root.RootedFileSystem.getRootFileSystem()", "public java.nio.file.FileSystem getRootFileSystem()"], ["java.nio.file.Path", "org.apache.sshd.common.file.root.RootedFileSystem.getRoot()", "public java.nio.file.Path getRoot()"], ["void", "org.apache.sshd.common.file.root.RootedFileSystem.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.sshd.common.file.root.RootedFileSystem.isOpen()", "public boolean isOpen()"], ["boolean", "org.apache.sshd.common.file.root.RootedFileSystem.isReadOnly()", "public boolean isReadOnly()"], ["java.util.Set<java.lang.String>", "org.apache.sshd.common.file.root.RootedFileSystem.supportedFileAttributeViews()", "public java.util.Set<java.lang.String> supportedFileAttributeViews()"], ["java.nio.file.attribute.UserPrincipalLookupService", "org.apache.sshd.common.file.root.RootedFileSystem.getUserPrincipalLookupService()", "public java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()"], ["java.lang.Iterable<java.nio.file.FileStore>", "org.apache.sshd.common.file.root.RootedFileSystem.getFileStores()", "public java.lang.Iterable<java.nio.file.FileStore> getFileStores()"], ["java.lang.String", "org.apache.sshd.common.file.root.RootedFileSystem.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.file.root.RootedFileSystemProvider", "org.apache.sshd.common.file.root.RootedFileSystemProvider()", "public org.apache.sshd.common.file.root.RootedFileSystemProvider()"], ["java.lang.String", "org.apache.sshd.common.file.root.RootedFileSystemProvider.getScheme()", "public java.lang.String getScheme()"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newFileSystem(java.net.URI, java.util.Map<java.lang.String, ?>)", "public java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map<java.lang.String, ?>) throws java.io.IOException"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.root.RootedFileSystemProvider.getFileSystem(java.net.URI)", "public java.nio.file.FileSystem getFileSystem(java.net.URI)"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newFileSystem(java.nio.file.Path, java.util.Map<java.lang.String, ?>)", "public java.nio.file.FileSystem newFileSystem(java.nio.file.Path, java.util.Map<java.lang.String, ?>) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.file.root.RootedFileSystemProvider.getPath(java.net.URI)", "public java.nio.file.Path getPath(java.net.URI)"], ["java.io.InputStream", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)", "public java.io.InputStream newInputStream(java.nio.file.Path, java.nio.file.OpenOption...) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)", "public java.io.OutputStream newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...) throws java.io.IOException"], ["java.nio.channels.FileChannel", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...)", "public java.nio.channels.FileChannel newFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["java.nio.channels.AsynchronousFileChannel", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newAsynchronousFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute<?>...)", "public java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["java.nio.channels.SeekableByteChannel", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...)", "public java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["java.nio.file.DirectoryStream<java.nio.file.Path>", "org.apache.sshd.common.file.root.RootedFileSystemProvider.newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>)", "public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...)", "public void createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...)", "public void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.createLink(java.nio.file.Path, java.nio.file.Path)", "public void createLink(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.delete(java.nio.file.Path)", "public void delete(java.nio.file.Path) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.file.root.RootedFileSystemProvider.deleteIfExists(java.nio.file.Path)", "public boolean deleteIfExists(java.nio.file.Path) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.file.root.RootedFileSystemProvider.readSymbolicLink(java.nio.file.Path)", "public java.nio.file.Path readSymbolicLink(java.nio.file.Path) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)", "public void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)", "public void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.file.root.RootedFileSystemProvider.isSameFile(java.nio.file.Path, java.nio.file.Path)", "public boolean isSameFile(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.file.root.RootedFileSystemProvider.isHidden(java.nio.file.Path)", "public boolean isHidden(java.nio.file.Path) throws java.io.IOException"], ["java.nio.file.FileStore", "org.apache.sshd.common.file.root.RootedFileSystemProvider.getFileStore(java.nio.file.Path)", "public java.nio.file.FileStore getFileStore(java.nio.file.Path) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.checkAccess(java.nio.file.Path, java.nio.file.AccessMode...)", "public void checkAccess(java.nio.file.Path, java.nio.file.AccessMode...) throws java.io.IOException"], ["<V extends java.nio.file.attribute.FileAttributeView> V", "org.apache.sshd.common.file.root.RootedFileSystemProvider.getFileAttributeView(java.nio.file.Path, java.lang.Class<V>, java.nio.file.LinkOption...)", "public <V extends java.nio.file.attribute.FileAttributeView> V getFileAttributeView(java.nio.file.Path, java.lang.Class<V>, java.nio.file.LinkOption...)"], ["<A extends java.nio.file.attribute.BasicFileAttributes> A", "org.apache.sshd.common.file.root.RootedFileSystemProvider.readAttributes(java.nio.file.Path, java.lang.Class<A>, java.nio.file.LinkOption...)", "public <A extends java.nio.file.attribute.BasicFileAttributes> A readAttributes(java.nio.file.Path, java.lang.Class<A>, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.apache.sshd.common.file.root.RootedFileSystemProvider.readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...)", "public java.util.Map<java.lang.String, java.lang.Object> readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...) throws java.io.IOException"], ["void", "org.apache.sshd.common.file.root.RootedFileSystemProvider.setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption...)", "public void setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption...) throws java.io.IOException"], ["org.apache.sshd.common.file.root.RootedPath", "org.apache.sshd.common.file.root.RootedPath(org.apache.sshd.common.file.root.RootedFileSystem, java.lang.String, org.apache.sshd.common.file.util.ImmutableList<java.lang.String>)", "public org.apache.sshd.common.file.root.RootedPath(org.apache.sshd.common.file.root.RootedFileSystem, java.lang.String, org.apache.sshd.common.file.util.ImmutableList<java.lang.String>)"], ["java.io.File", "org.apache.sshd.common.file.root.RootedPath.toFile()", "public java.io.File toFile()"], ["org.apache.sshd.common.file.root.RootedPath", "org.apache.sshd.common.file.root.RootedPath.toRealPath(java.nio.file.LinkOption...)", "public org.apache.sshd.common.file.root.RootedPath toRealPath(java.nio.file.LinkOption...) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.file.root.RootedPath.toRealPath(java.nio.file.LinkOption[])", "public java.nio.file.Path toRealPath(java.nio.file.LinkOption[]) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.file.util.BaseFileSystem$1.matches(java.nio.file.Path)", "public boolean matches(java.nio.file.Path)"], ["org.apache.sshd.common.file.util.BaseFileSystem", "org.apache.sshd.common.file.util.BaseFileSystem(java.nio.file.spi.FileSystemProvider)", "public org.apache.sshd.common.file.util.BaseFileSystem(java.nio.file.spi.FileSystemProvider)"], ["T", "org.apache.sshd.common.file.util.BaseFileSystem.getDefaultDir()", "public T getDefaultDir()"], ["boolean", "org.apache.sshd.common.file.util.BaseFileSystem.isReadOnly()", "public boolean isReadOnly()"], ["java.nio.file.spi.FileSystemProvider", "org.apache.sshd.common.file.util.BaseFileSystem.provider()", "public java.nio.file.spi.FileSystemProvider provider()"], ["java.lang.String", "org.apache.sshd.common.file.util.BaseFileSystem.getSeparator()", "public java.lang.String getSeparator()"], ["java.lang.Iterable<java.nio.file.Path>", "org.apache.sshd.common.file.util.BaseFileSystem.getRootDirectories()", "public java.lang.Iterable<java.nio.file.Path> getRootDirectories()"], ["java.lang.Iterable<java.nio.file.FileStore>", "org.apache.sshd.common.file.util.BaseFileSystem.getFileStores()", "public java.lang.Iterable<java.nio.file.FileStore> getFileStores()"], ["T", "org.apache.sshd.common.file.util.BaseFileSystem.getPath(java.lang.String, java.lang.String...)", "public T getPath(java.lang.String, java.lang.String...)"], ["java.nio.file.PathMatcher", "org.apache.sshd.common.file.util.BaseFileSystem.getPathMatcher(java.lang.String)", "public java.nio.file.PathMatcher getPathMatcher(java.lang.String)"], ["java.nio.file.WatchService", "org.apache.sshd.common.file.util.BaseFileSystem.newWatchService()", "public java.nio.file.WatchService newWatchService() throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath$1.get(int)", "public java.nio.file.Path get(int)"], ["int", "org.apache.sshd.common.file.util.BasePath$1.size()", "public int size()"], ["java.lang.Object", "org.apache.sshd.common.file.util.BasePath$1.get(int)", "public java.lang.Object get(int)"], ["org.apache.sshd.common.file.util.BasePath", "org.apache.sshd.common.file.util.BasePath(FS, java.lang.String, org.apache.sshd.common.file.util.ImmutableList<java.lang.String>)", "public org.apache.sshd.common.file.util.BasePath(FS, java.lang.String, org.apache.sshd.common.file.util.ImmutableList<java.lang.String>)"], ["FS", "org.apache.sshd.common.file.util.BasePath.getFileSystem()", "public FS getFileSystem()"], ["boolean", "org.apache.sshd.common.file.util.BasePath.isAbsolute()", "public boolean isAbsolute()"], ["T", "org.apache.sshd.common.file.util.BasePath.getRoot()", "public T getRoot()"], ["T", "org.apache.sshd.common.file.util.BasePath.getFileName()", "public T getFileName()"], ["T", "org.apache.sshd.common.file.util.BasePath.getParent()", "public T getParent()"], ["int", "org.apache.sshd.common.file.util.BasePath.getNameCount()", "public int getNameCount()"], ["T", "org.apache.sshd.common.file.util.BasePath.getName(int)", "public T getName(int)"], ["T", "org.apache.sshd.common.file.util.BasePath.subpath(int, int)", "public T subpath(int, int)"], ["boolean", "org.apache.sshd.common.file.util.BasePath.startsWith(java.nio.file.Path)", "public boolean startsWith(java.nio.file.Path)"], ["boolean", "org.apache.sshd.common.file.util.BasePath.startsWith(java.lang.String)", "public boolean startsWith(java.lang.String)"], ["boolean", "org.apache.sshd.common.file.util.BasePath.endsWith(java.nio.file.Path)", "public boolean endsWith(java.nio.file.Path)"], ["boolean", "org.apache.sshd.common.file.util.BasePath.endsWith(java.lang.String)", "public boolean endsWith(java.lang.String)"], ["T", "org.apache.sshd.common.file.util.BasePath.normalize()", "public T normalize()"], ["T", "org.apache.sshd.common.file.util.BasePath.resolve(java.nio.file.Path)", "public T resolve(java.nio.file.Path)"], ["T", "org.apache.sshd.common.file.util.BasePath.resolve(java.lang.String)", "public T resolve(java.lang.String)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.resolveSibling(java.nio.file.Path)", "public java.nio.file.Path resolveSibling(java.nio.file.Path)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.resolveSibling(java.lang.String)", "public java.nio.file.Path resolveSibling(java.lang.String)"], ["T", "org.apache.sshd.common.file.util.BasePath.relativize(java.nio.file.Path)", "public T relativize(java.nio.file.Path)"], ["T", "org.apache.sshd.common.file.util.BasePath.toAbsolutePath()", "public T toAbsolutePath()"], ["java.net.URI", "org.apache.sshd.common.file.util.BasePath.toUri()", "public java.net.URI toUri()"], ["java.io.File", "org.apache.sshd.common.file.util.BasePath.toFile()", "public java.io.File toFile()"], ["java.nio.file.WatchKey", "org.apache.sshd.common.file.util.BasePath.register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>...)", "public java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>...) throws java.io.IOException"], ["java.nio.file.WatchKey", "org.apache.sshd.common.file.util.BasePath.register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>[], java.nio.file.WatchEvent$Modifier...)", "public java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>[], java.nio.file.WatchEvent$Modifier...) throws java.io.IOException"], ["java.util.Iterator<java.nio.file.Path>", "org.apache.sshd.common.file.util.BasePath.iterator()", "public java.util.Iterator<java.nio.file.Path> iterator()"], ["int", "org.apache.sshd.common.file.util.BasePath.compareTo(java.nio.file.Path)", "public int compareTo(java.nio.file.Path)"], ["int", "org.apache.sshd.common.file.util.BasePath.hashCode()", "public int hashCode()"], ["boolean", "org.apache.sshd.common.file.util.BasePath.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.sshd.common.file.util.BasePath.toString()", "public java.lang.String toString()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.toAbsolutePath()", "public java.nio.file.Path toAbsolutePath()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.relativize(java.nio.file.Path)", "public java.nio.file.Path relativize(java.nio.file.Path)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.resolve(java.lang.String)", "public java.nio.file.Path resolve(java.lang.String)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.resolve(java.nio.file.Path)", "public java.nio.file.Path resolve(java.nio.file.Path)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.normalize()", "public java.nio.file.Path normalize()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.subpath(int, int)", "public java.nio.file.Path subpath(int, int)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.getName(int)", "public java.nio.file.Path getName(int)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.getParent()", "public java.nio.file.Path getParent()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.getFileName()", "public java.nio.file.Path getFileName()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.BasePath.getRoot()", "public java.nio.file.Path getRoot()"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.util.BasePath.getFileSystem()", "public java.nio.file.FileSystem getFileSystem()"], ["int", "org.apache.sshd.common.file.util.BasePath.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.sshd.common.file.util.ImmutableList", "org.apache.sshd.common.file.util.ImmutableList(T[])", "public org.apache.sshd.common.file.util.ImmutableList(T[])"], ["org.apache.sshd.common.file.util.ImmutableList", "org.apache.sshd.common.file.util.ImmutableList(T[], int, int)", "public org.apache.sshd.common.file.util.ImmutableList(T[], int, int)"], ["T", "org.apache.sshd.common.file.util.ImmutableList.get(int)", "public T get(int)"], ["int", "org.apache.sshd.common.file.util.ImmutableList.size()", "public int size()"], ["org.apache.sshd.common.file.util.ImmutableList<T>", "org.apache.sshd.common.file.util.ImmutableList.subList(int, int)", "public org.apache.sshd.common.file.util.ImmutableList<T> subList(int, int)"], ["java.util.List", "org.apache.sshd.common.file.util.ImmutableList.subList(int, int)", "public java.util.List subList(int, int)"], ["org.apache.sshd.common.file.util.MockFileSystem", "org.apache.sshd.common.file.util.MockFileSystem(java.lang.String)", "public org.apache.sshd.common.file.util.MockFileSystem(java.lang.String)"], ["java.nio.file.spi.FileSystemProvider", "org.apache.sshd.common.file.util.MockFileSystem.provider()", "public java.nio.file.spi.FileSystemProvider provider()"], ["void", "org.apache.sshd.common.file.util.MockFileSystem.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.sshd.common.file.util.MockFileSystem.isOpen()", "public boolean isOpen()"], ["boolean", "org.apache.sshd.common.file.util.MockFileSystem.isReadOnly()", "public boolean isReadOnly()"], ["java.lang.String", "org.apache.sshd.common.file.util.MockFileSystem.getSeparator()", "public java.lang.String getSeparator()"], ["java.lang.Iterable<java.nio.file.Path>", "org.apache.sshd.common.file.util.MockFileSystem.getRootDirectories()", "public java.lang.Iterable<java.nio.file.Path> getRootDirectories()"], ["java.lang.Iterable<java.nio.file.FileStore>", "org.apache.sshd.common.file.util.MockFileSystem.getFileStores()", "public java.lang.Iterable<java.nio.file.FileStore> getFileStores()"], ["java.util.Set<java.lang.String>", "org.apache.sshd.common.file.util.MockFileSystem.supportedFileAttributeViews()", "public java.util.Set<java.lang.String> supportedFileAttributeViews()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockFileSystem.getPath(java.lang.String, java.lang.String...)", "public java.nio.file.Path getPath(java.lang.String, java.lang.String...)"], ["java.nio.file.PathMatcher", "org.apache.sshd.common.file.util.MockFileSystem.getPathMatcher(java.lang.String)", "public java.nio.file.PathMatcher getPathMatcher(java.lang.String)"], ["java.nio.file.attribute.UserPrincipalLookupService", "org.apache.sshd.common.file.util.MockFileSystem.getUserPrincipalLookupService()", "public java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()"], ["java.nio.file.WatchService", "org.apache.sshd.common.file.util.MockFileSystem.newWatchService()", "public java.nio.file.WatchService newWatchService() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.file.util.MockFileSystem.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.file.util.MockPath", "org.apache.sshd.common.file.util.MockPath(java.lang.String)", "public org.apache.sshd.common.file.util.MockPath(java.lang.String)"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.util.MockPath.getFileSystem()", "public java.nio.file.FileSystem getFileSystem()"], ["boolean", "org.apache.sshd.common.file.util.MockPath.isAbsolute()", "public boolean isAbsolute()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.getRoot()", "public java.nio.file.Path getRoot()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.getFileName()", "public java.nio.file.Path getFileName()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.getParent()", "public java.nio.file.Path getParent()"], ["int", "org.apache.sshd.common.file.util.MockPath.getNameCount()", "public int getNameCount()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.getName(int)", "public java.nio.file.Path getName(int)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.subpath(int, int)", "public java.nio.file.Path subpath(int, int)"], ["boolean", "org.apache.sshd.common.file.util.MockPath.startsWith(java.nio.file.Path)", "public boolean startsWith(java.nio.file.Path)"], ["boolean", "org.apache.sshd.common.file.util.MockPath.startsWith(java.lang.String)", "public boolean startsWith(java.lang.String)"], ["boolean", "org.apache.sshd.common.file.util.MockPath.endsWith(java.nio.file.Path)", "public boolean endsWith(java.nio.file.Path)"], ["boolean", "org.apache.sshd.common.file.util.MockPath.endsWith(java.lang.String)", "public boolean endsWith(java.lang.String)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.normalize()", "public java.nio.file.Path normalize()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.resolve(java.nio.file.Path)", "public java.nio.file.Path resolve(java.nio.file.Path)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.resolve(java.lang.String)", "public java.nio.file.Path resolve(java.lang.String)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.resolveSibling(java.nio.file.Path)", "public java.nio.file.Path resolveSibling(java.nio.file.Path)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.resolveSibling(java.lang.String)", "public java.nio.file.Path resolveSibling(java.lang.String)"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.relativize(java.nio.file.Path)", "public java.nio.file.Path relativize(java.nio.file.Path)"], ["java.net.URI", "org.apache.sshd.common.file.util.MockPath.toUri()", "public java.net.URI toUri()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.toAbsolutePath()", "public java.nio.file.Path toAbsolutePath()"], ["java.nio.file.Path", "org.apache.sshd.common.file.util.MockPath.toRealPath(java.nio.file.LinkOption...)", "public java.nio.file.Path toRealPath(java.nio.file.LinkOption...) throws java.io.IOException"], ["java.io.File", "org.apache.sshd.common.file.util.MockPath.toFile()", "public java.io.File toFile()"], ["java.nio.file.WatchKey", "org.apache.sshd.common.file.util.MockPath.register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>...)", "public java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>...) throws java.io.IOException"], ["java.nio.file.WatchKey", "org.apache.sshd.common.file.util.MockPath.register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>[], java.nio.file.WatchEvent$Modifier...)", "public java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>[], java.nio.file.WatchEvent$Modifier...) throws java.io.IOException"], ["java.util.Iterator<java.nio.file.Path>", "org.apache.sshd.common.file.util.MockPath.iterator()", "public java.util.Iterator<java.nio.file.Path> iterator()"], ["int", "org.apache.sshd.common.file.util.MockPath.compareTo(java.nio.file.Path)", "public int compareTo(java.nio.file.Path)"], ["java.lang.String", "org.apache.sshd.common.file.util.MockPath.toString()", "public java.lang.String toString()"], ["int", "org.apache.sshd.common.file.util.MockPath.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory", "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory()", "public org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory()"], ["org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory", "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory(java.lang.String)", "public org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory(java.lang.String)"], ["void", "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory.setDefaultHomeDir(java.lang.String)", "public void setDefaultHomeDir(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory.getDefaultHomeDir()", "public java.lang.String getDefaultHomeDir()"], ["void", "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory.setUserHomeDir(java.lang.String, java.lang.String)", "public void setUserHomeDir(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory.getUserHomeDir(java.lang.String)", "public java.lang.String getUserHomeDir(java.lang.String)"], ["java.nio.file.FileSystem", "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory.createFileSystem(org.apache.sshd.common.session.Session)", "public java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session) throws java.io.IOException"], ["org.apache.sshd.common.io.IoHandler", "org.apache.sshd.common.forward.DefaultTcpipForwarder$1.create()", "public org.apache.sshd.common.io.IoHandler create()"], ["java.lang.Object", "org.apache.sshd.common.forward.DefaultTcpipForwarder$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.io.IoHandler", "org.apache.sshd.common.forward.DefaultTcpipForwarder$2.create()", "public org.apache.sshd.common.io.IoHandler create()"], ["java.lang.Object", "org.apache.sshd.common.forward.DefaultTcpipForwarder$2.create()", "public java.lang.Object create()"], ["void", "org.apache.sshd.common.forward.DefaultTcpipForwarder$StaticIoHandler$1.operationComplete(org.apache.sshd.client.future.OpenFuture)", "public void operationComplete(org.apache.sshd.client.future.OpenFuture)"], ["void", "org.apache.sshd.common.forward.DefaultTcpipForwarder$StaticIoHandler$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["void", "org.apache.sshd.common.forward.DefaultTcpipForwarder$StaticIoHandler.sessionCreated(org.apache.sshd.common.io.IoSession)", "public void sessionCreated(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.forward.DefaultTcpipForwarder$StaticIoHandler.sessionClosed(org.apache.sshd.common.io.IoSession)", "public void sessionClosed(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.forward.DefaultTcpipForwarder$StaticIoHandler.messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable)", "public void messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable) throws java.lang.Exception"], ["void", "org.apache.sshd.common.forward.DefaultTcpipForwarder$StaticIoHandler.exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable)", "public void exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable) throws java.lang.Exception"], ["org.apache.sshd.common.forward.DefaultTcpipForwarder", "org.apache.sshd.common.forward.DefaultTcpipForwarder(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.common.forward.DefaultTcpipForwarder(org.apache.sshd.common.session.ConnectionService)"], ["org.apache.sshd.common.session.ConnectionService", "org.apache.sshd.common.forward.DefaultTcpipForwarder.getConnectionService()", "public final org.apache.sshd.common.session.ConnectionService getConnectionService()"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.org.apache.sshd.common.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress)", "public synchronized org.apache.sshd.common.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.void stopLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public synchronized void stopLocalPortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.org.apache.sshd.common.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress)", "public synchronized org.apache.sshd.common.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.void stopRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public synchronized void stopRemotePortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.org.apache.sshd.common.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public synchronized org.apache.sshd.common.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.void stopDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress)", "public synchronized void stopDynamicPortForwarding(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.org.apache.sshd.common.SshdSocketAddress getForwardedPort(int)", "public synchronized org.apache.sshd.common.SshdSocketAddress getForwardedPort(int)"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.org.apache.sshd.common.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.SshdSocketAddress)", "public synchronized org.apache.sshd.common.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.forward.DefaultTcpipForwarder.void localPortForwardingCancelled(org.apache.sshd.common.SshdSocketAddress)", "public synchronized void localPortForwardingCancelled(org.apache.sshd.common.SshdSocketAddress) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.forward.DefaultTcpipForwarder.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.forward.DefaultTcpipForwarderFactory", "org.apache.sshd.common.forward.DefaultTcpipForwarderFactory()", "public org.apache.sshd.common.forward.DefaultTcpipForwarderFactory()"], ["org.apache.sshd.common.forward.TcpipForwarder", "org.apache.sshd.common.forward.DefaultTcpipForwarderFactory.create(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.common.forward.TcpipForwarder create(org.apache.sshd.common.session.ConnectionService)"], ["org.apache.sshd.common.forward.LocalForwardingEntry", "org.apache.sshd.common.forward.LocalForwardingEntry(java.lang.String, java.lang.String, int)", "public org.apache.sshd.common.forward.LocalForwardingEntry(java.lang.String, java.lang.String, int)"], ["java.lang.String", "org.apache.sshd.common.forward.LocalForwardingEntry.getAlias()", "public java.lang.String getAlias()"], ["int", "org.apache.sshd.common.forward.LocalForwardingEntry.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.sshd.common.forward.LocalForwardingEntry.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.forward.LocalForwardingEntry", "org.apache.sshd.common.forward.LocalForwardingEntry.findMatchingEntry(java.lang.String, int, java.util.Collection<? extends org.apache.sshd.common.forward.LocalForwardingEntry>)", "public static final org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String, int, java.util.Collection<? extends org.apache.sshd.common.forward.LocalForwardingEntry>)"], ["void", "org.apache.sshd.common.forward.SocksProxy$Proxy.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.common.forward.SocksProxy$Socks4$1.operationComplete(org.apache.sshd.client.future.OpenFuture)", "public void operationComplete(org.apache.sshd.client.future.OpenFuture)"], ["void", "org.apache.sshd.common.forward.SocksProxy$Socks4$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.forward.SocksProxy$Socks4", "org.apache.sshd.common.forward.SocksProxy$Socks4(org.apache.sshd.common.forward.SocksProxy, org.apache.sshd.common.io.IoSession)", "public org.apache.sshd.common.forward.SocksProxy$Socks4(org.apache.sshd.common.forward.SocksProxy, org.apache.sshd.common.io.IoSession)"], ["void", "org.apache.sshd.common.forward.SocksProxy$Socks5$1.operationComplete(org.apache.sshd.client.future.OpenFuture)", "public void operationComplete(org.apache.sshd.client.future.OpenFuture)"], ["void", "org.apache.sshd.common.forward.SocksProxy$Socks5$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.forward.SocksProxy$Socks5", "org.apache.sshd.common.forward.SocksProxy$Socks5(org.apache.sshd.common.forward.SocksProxy, org.apache.sshd.common.io.IoSession)", "public org.apache.sshd.common.forward.SocksProxy$Socks5(org.apache.sshd.common.forward.SocksProxy, org.apache.sshd.common.io.IoSession)"], ["org.apache.sshd.common.forward.SocksProxy", "org.apache.sshd.common.forward.SocksProxy(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.common.forward.SocksProxy(org.apache.sshd.common.session.ConnectionService)"], ["void", "org.apache.sshd.common.forward.SocksProxy.sessionCreated(org.apache.sshd.common.io.IoSession)", "public void sessionCreated(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.forward.SocksProxy.sessionClosed(org.apache.sshd.common.io.IoSession)", "public void sessionClosed(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.forward.SocksProxy.messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable)", "public void messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable) throws java.lang.Exception"], ["void", "org.apache.sshd.common.forward.SocksProxy.exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable)", "public void exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable) throws java.lang.Exception"], ["org.apache.sshd.common.forward.TcpipClientChannel$Type[]", "org.apache.sshd.common.forward.TcpipClientChannel$Type.values()", "public static org.apache.sshd.common.forward.TcpipClientChannel$Type[] values()"], ["org.apache.sshd.common.forward.TcpipClientChannel$Type", "org.apache.sshd.common.forward.TcpipClientChannel$Type.valueOf(java.lang.String)", "public static org.apache.sshd.common.forward.TcpipClientChannel$Type valueOf(java.lang.String)"], ["org.apache.sshd.common.forward.TcpipClientChannel", "org.apache.sshd.common.forward.TcpipClientChannel(org.apache.sshd.common.forward.TcpipClientChannel$Type, org.apache.sshd.common.io.IoSession, org.apache.sshd.common.SshdSocketAddress)", "public org.apache.sshd.common.forward.TcpipClientChannel(org.apache.sshd.common.forward.TcpipClientChannel$Type, org.apache.sshd.common.io.IoSession, org.apache.sshd.common.SshdSocketAddress)"], ["org.apache.sshd.client.future.OpenFuture", "org.apache.sshd.common.forward.TcpipClientChannel.getOpenFuture()", "public org.apache.sshd.client.future.OpenFuture getOpenFuture()"], ["synchronized", "org.apache.sshd.common.forward.TcpipClientChannel.org.apache.sshd.client.future.OpenFuture open()", "public synchronized org.apache.sshd.client.future.OpenFuture open() throws java.io.IOException"], ["org.apache.sshd.common.future.DefaultCloseFuture", "org.apache.sshd.common.future.DefaultCloseFuture(java.lang.Object)", "public org.apache.sshd.common.future.DefaultCloseFuture(java.lang.Object)"], ["boolean", "org.apache.sshd.common.future.DefaultCloseFuture.isClosed()", "public boolean isClosed()"], ["void", "org.apache.sshd.common.future.DefaultCloseFuture.setClosed()", "public void setClosed()"], ["org.apache.sshd.common.future.DefaultSshFuture", "org.apache.sshd.common.future.DefaultSshFuture(java.lang.Object)", "public org.apache.sshd.common.future.DefaultSshFuture(java.lang.Object)"], ["T", "org.apache.sshd.common.future.DefaultSshFuture.await()", "public T await() throws java.io.IOException"], ["boolean", "org.apache.sshd.common.future.DefaultSshFuture.await(long, java.util.concurrent.TimeUnit)", "public boolean await(long, java.util.concurrent.TimeUnit) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.future.DefaultSshFuture.await(long)", "public boolean await(long) throws java.io.IOException"], ["T", "org.apache.sshd.common.future.DefaultSshFuture.awaitUninterruptibly()", "public T awaitUninterruptibly()"], ["boolean", "org.apache.sshd.common.future.DefaultSshFuture.awaitUninterruptibly(long, java.util.concurrent.TimeUnit)", "public boolean awaitUninterruptibly(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.apache.sshd.common.future.DefaultSshFuture.awaitUninterruptibly(long)", "public boolean awaitUninterruptibly(long)"], ["boolean", "org.apache.sshd.common.future.DefaultSshFuture.isDone()", "public boolean isDone()"], ["void", "org.apache.sshd.common.future.DefaultSshFuture.setValue(java.lang.Object)", "public void setValue(java.lang.Object)"], ["T", "org.apache.sshd.common.future.DefaultSshFuture.addListener(org.apache.sshd.common.future.SshFutureListener<T>)", "public T addListener(org.apache.sshd.common.future.SshFutureListener<T>)"], ["T", "org.apache.sshd.common.future.DefaultSshFuture.removeListener(org.apache.sshd.common.future.SshFutureListener<T>)", "public T removeListener(org.apache.sshd.common.future.SshFutureListener<T>)"], ["boolean", "org.apache.sshd.common.future.DefaultSshFuture.isCanceled()", "public boolean isCanceled()"], ["void", "org.apache.sshd.common.future.DefaultSshFuture.cancel()", "public void cancel()"], ["org.apache.sshd.common.FactoryManager", "org.apache.sshd.common.io.AbstractIoServiceFactory.getFactoryManager()", "public final org.apache.sshd.common.FactoryManager getFactoryManager()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.common.io.AbstractIoServiceFactory.getExecutorService()", "public final java.util.concurrent.ExecutorService getExecutorService()"], ["boolean", "org.apache.sshd.common.io.AbstractIoServiceFactory.isShutdownOnExit()", "public final boolean isShutdownOnExit()"], ["int", "org.apache.sshd.common.io.AbstractIoServiceFactory.getNioWorkers(org.apache.sshd.common.FactoryManager)", "public static int getNioWorkers(org.apache.sshd.common.FactoryManager)"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.common.io.AbstractIoServiceFactoryFactory.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["void", "org.apache.sshd.common.io.AbstractIoServiceFactoryFactory.setExecutorService(java.util.concurrent.ExecutorService)", "public void setExecutorService(java.util.concurrent.ExecutorService)"], ["boolean", "org.apache.sshd.common.io.AbstractIoServiceFactoryFactory.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["void", "org.apache.sshd.common.io.AbstractIoServiceFactoryFactory.setShutdownOnExit(boolean)", "public void setShutdownOnExit(boolean)"], ["void", "org.apache.sshd.common.io.AbstractIoWriteFuture.verify()", "public void verify() throws java.io.IOException"], ["void", "org.apache.sshd.common.io.AbstractIoWriteFuture.verify(long, java.util.concurrent.TimeUnit)", "public void verify(long, java.util.concurrent.TimeUnit) throws java.io.IOException"], ["void", "org.apache.sshd.common.io.AbstractIoWriteFuture.verify(long)", "public void verify(long) throws java.io.IOException"], ["boolean", "org.apache.sshd.common.io.AbstractIoWriteFuture.isWritten()", "public boolean isWritten()"], ["java.lang.Throwable", "org.apache.sshd.common.io.AbstractIoWriteFuture.getException()", "public java.lang.Throwable getException()"], ["org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories[]", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.values()", "public static org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories[] values()"], ["org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.valueOf(java.lang.String)", "public static org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories valueOf(java.lang.String)"], ["java.lang.Class<? extends org.apache.sshd.common.io.IoServiceFactoryFactory>", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.getFactoryClass()", "public final java.lang.Class<? extends org.apache.sshd.common.io.IoServiceFactoryFactory> getFactoryClass()"], ["java.lang.String", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.getName()", "public final java.lang.String getName()"], ["org.apache.sshd.common.io.IoServiceFactoryFactory", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.create()", "public final org.apache.sshd.common.io.IoServiceFactoryFactory create()"], ["org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.fromFactoryName(java.lang.String)", "public static org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryName(java.lang.String)"], ["org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.fromFactoryClass(java.lang.Class<?>)", "public static org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class<?>)"], ["java.lang.Object", "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.io.DefaultIoServiceFactoryFactory", "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory()", "public org.apache.sshd.common.io.DefaultIoServiceFactoryFactory()"], ["org.apache.sshd.common.io.IoServiceFactory", "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory.create(org.apache.sshd.common.FactoryManager)", "public org.apache.sshd.common.io.IoServiceFactory create(org.apache.sshd.common.FactoryManager)"], ["<T extends org.apache.sshd.common.io.IoServiceFactoryFactory> T", "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory.newInstance(java.lang.Class<T>)", "public static <T extends org.apache.sshd.common.io.IoServiceFactoryFactory> T newInstance(java.lang.Class<T>)"], ["<T extends org.apache.sshd.common.io.IoServiceFactoryFactory> T", "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory.tryLoad(java.util.ServiceLoader<T>)", "public static <T extends org.apache.sshd.common.io.IoServiceFactoryFactory> T tryLoad(java.util.ServiceLoader<T>)"], ["<T extends org.apache.sshd.common.io.IoServiceFactoryFactory> T", "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory.newInstance(java.lang.Class<T>, java.lang.String)", "public static <T extends org.apache.sshd.common.io.IoServiceFactoryFactory> T newInstance(java.lang.Class<T>, java.lang.String)"], ["org.apache.sshd.common.io.mina.MinaAcceptor", "org.apache.sshd.common.io.mina.MinaAcceptor(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, org.apache.mina.core.service.IoProcessor<org.apache.mina.transport.socket.nio.NioSession>)", "public org.apache.sshd.common.io.mina.MinaAcceptor(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, org.apache.mina.core.service.IoProcessor<org.apache.mina.transport.socket.nio.NioSession>)"], ["void", "org.apache.sshd.common.io.mina.MinaAcceptor.bind(java.util.Collection<? extends java.net.SocketAddress>)", "public void bind(java.util.Collection<? extends java.net.SocketAddress>) throws java.io.IOException"], ["void", "org.apache.sshd.common.io.mina.MinaAcceptor.bind(java.net.SocketAddress)", "public void bind(java.net.SocketAddress) throws java.io.IOException"], ["void", "org.apache.sshd.common.io.mina.MinaAcceptor.unbind()", "public void unbind()"], ["void", "org.apache.sshd.common.io.mina.MinaAcceptor.unbind(java.util.Collection<? extends java.net.SocketAddress>)", "public void unbind(java.util.Collection<? extends java.net.SocketAddress>)"], ["void", "org.apache.sshd.common.io.mina.MinaAcceptor.unbind(java.net.SocketAddress)", "public void unbind(java.net.SocketAddress)"], ["java.util.Set<java.net.SocketAddress>", "org.apache.sshd.common.io.mina.MinaAcceptor.getBoundAddresses()", "public java.util.Set<java.net.SocketAddress> getBoundAddresses()"], ["void", "org.apache.sshd.common.io.mina.MinaConnector$1.operationComplete(org.apache.mina.core.future.ConnectFuture)", "public void operationComplete(org.apache.mina.core.future.ConnectFuture)"], ["void", "org.apache.sshd.common.io.mina.MinaConnector$1.operationComplete(org.apache.mina.core.future.IoFuture)", "public void operationComplete(org.apache.mina.core.future.IoFuture)"], ["org.apache.sshd.common.io.IoSession", "org.apache.sshd.common.io.mina.MinaConnector$1Future.getSession()", "public org.apache.sshd.common.io.IoSession getSession()"], ["java.lang.Throwable", "org.apache.sshd.common.io.mina.MinaConnector$1Future.getException()", "public java.lang.Throwable getException()"], ["boolean", "org.apache.sshd.common.io.mina.MinaConnector$1Future.isConnected()", "public boolean isConnected()"], ["void", "org.apache.sshd.common.io.mina.MinaConnector$1Future.setSession(org.apache.sshd.common.io.IoSession)", "public void setSession(org.apache.sshd.common.io.IoSession)"], ["void", "org.apache.sshd.common.io.mina.MinaConnector$1Future.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["org.apache.sshd.common.io.mina.MinaConnector", "org.apache.sshd.common.io.mina.MinaConnector(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, org.apache.mina.core.service.IoProcessor<org.apache.mina.transport.socket.nio.NioSession>)", "public org.apache.sshd.common.io.mina.MinaConnector(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, org.apache.mina.core.service.IoProcessor<org.apache.mina.transport.socket.nio.NioSession>)"], ["org.apache.sshd.common.io.IoConnectFuture", "org.apache.sshd.common.io.mina.MinaConnector.connect(java.net.SocketAddress)", "public org.apache.sshd.common.io.IoConnectFuture connect(java.net.SocketAddress)"], ["org.apache.sshd.common.io.mina.MinaService", "org.apache.sshd.common.io.mina.MinaService(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, org.apache.mina.core.service.IoProcessor<org.apache.mina.transport.socket.nio.NioSession>)", "public org.apache.sshd.common.io.mina.MinaService(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, org.apache.mina.core.service.IoProcessor<org.apache.mina.transport.socket.nio.NioSession>)"], ["void", "org.apache.sshd.common.io.mina.MinaService.dispose()", "public void dispose()"], ["java.util.Map<java.lang.Long, org.apache.sshd.common.io.IoSession>", "org.apache.sshd.common.io.mina.MinaService.getManagedSessions()", "public java.util.Map<java.lang.Long, org.apache.sshd.common.io.IoSession> getManagedSessions()"], ["void", "org.apache.sshd.common.io.mina.MinaService.sessionOpened(org.apache.mina.core.session.IoSession)", "public void sessionOpened(org.apache.mina.core.session.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.io.mina.MinaService.sessionIdle(org.apache.mina.core.session.IoSession, org.apache.mina.core.session.IdleStatus)", "public void sessionIdle(org.apache.mina.core.session.IoSession, org.apache.mina.core.session.IdleStatus) throws java.lang.Exception"], ["void", "org.apache.sshd.common.io.mina.MinaService.messageSent(org.apache.mina.core.session.IoSession, java.lang.Object)", "public void messageSent(org.apache.mina.core.session.IoSession, java.lang.Object) throws java.lang.Exception"], ["void", "org.apache.sshd.common.io.mina.MinaService.inputClosed(org.apache.mina.core.session.IoSession)", "public void inputClosed(org.apache.mina.core.session.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.io.mina.MinaService.sessionCreated(org.apache.mina.core.session.IoSession)", "public void sessionCreated(org.apache.mina.core.session.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.io.mina.MinaService.sessionClosed(org.apache.mina.core.session.IoSession)", "public void sessionClosed(org.apache.mina.core.session.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.io.mina.MinaService.exceptionCaught(org.apache.mina.core.session.IoSession, java.lang.Throwable)", "public void exceptionCaught(org.apache.mina.core.session.IoSession, java.lang.Throwable) throws java.lang.Exception"], ["void", "org.apache.sshd.common.io.mina.MinaService.messageReceived(org.apache.mina.core.session.IoSession, java.lang.Object)", "public void messageReceived(org.apache.mina.core.session.IoSession, java.lang.Object) throws java.lang.Exception"], ["org.apache.sshd.common.io.mina.MinaServiceFactory", "org.apache.sshd.common.io.mina.MinaServiceFactory(org.apache.sshd.common.FactoryManager, java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.common.io.mina.MinaServiceFactory(org.apache.sshd.common.FactoryManager, java.util.concurrent.ExecutorService, boolean)"], ["org.apache.sshd.common.io.IoConnector", "org.apache.sshd.common.io.mina.MinaServiceFactory.createConnector(org.apache.sshd.common.io.IoHandler)", "public org.apache.sshd.common.io.IoConnector createConnector(org.apache.sshd.common.io.IoHandler)"], ["org.apache.sshd.common.io.IoAcceptor", "org.apache.sshd.common.io.mina.MinaServiceFactory.createAcceptor(org.apache.sshd.common.io.IoHandler)", "public org.apache.sshd.common.io.IoAcceptor createAcceptor(org.apache.sshd.common.io.IoHandler)"], ["org.apache.sshd.common.io.mina.MinaServiceFactoryFactory", "org.apache.sshd.common.io.mina.MinaServiceFactoryFactory()", "public org.apache.sshd.common.io.mina.MinaServiceFactoryFactory()"], ["org.apache.sshd.common.io.mina.MinaServiceFactoryFactory", "org.apache.sshd.common.io.mina.MinaServiceFactoryFactory(java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.common.io.mina.MinaServiceFactoryFactory(java.util.concurrent.ExecutorService, boolean)"], ["org.apache.sshd.common.io.IoServiceFactory", "org.apache.sshd.common.io.mina.MinaServiceFactoryFactory.create(org.apache.sshd.common.FactoryManager)", "public org.apache.sshd.common.io.IoServiceFactory create(org.apache.sshd.common.FactoryManager)"], ["void", "org.apache.sshd.common.io.mina.MinaSession$1$1.operationComplete(org.apache.mina.core.future.IoFuture)", "public void operationComplete(org.apache.mina.core.future.IoFuture)"], ["boolean", "org.apache.sshd.common.io.mina.MinaSession$1.isClosing()", "public boolean isClosing()"], ["boolean", "org.apache.sshd.common.io.mina.MinaSession$1.isClosed()", "public boolean isClosed()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.common.io.mina.MinaSession$1.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["void", "org.apache.sshd.common.io.mina.MinaSession$2.operationComplete(org.apache.mina.core.future.WriteFuture)", "public void operationComplete(org.apache.mina.core.future.WriteFuture)"], ["void", "org.apache.sshd.common.io.mina.MinaSession$2.operationComplete(org.apache.mina.core.future.IoFuture)", "public void operationComplete(org.apache.mina.core.future.IoFuture)"], ["void", "org.apache.sshd.common.io.mina.MinaSession$Future.setWritten()", "public void setWritten()"], ["void", "org.apache.sshd.common.io.mina.MinaSession$Future.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["org.apache.sshd.common.io.mina.MinaSession", "org.apache.sshd.common.io.mina.MinaSession(org.apache.sshd.common.io.mina.MinaService, org.apache.mina.core.session.IoSession)", "public org.apache.sshd.common.io.mina.MinaSession(org.apache.sshd.common.io.mina.MinaService, org.apache.mina.core.session.IoSession)"], ["org.apache.mina.core.session.IoSession", "org.apache.sshd.common.io.mina.MinaSession.getSession()", "public org.apache.mina.core.session.IoSession getSession()"], ["void", "org.apache.sshd.common.io.mina.MinaSession.suspend()", "public void suspend()"], ["java.lang.Object", "org.apache.sshd.common.io.mina.MinaSession.getAttribute(java.lang.Object)", "public java.lang.Object getAttribute(java.lang.Object)"], ["java.lang.Object", "org.apache.sshd.common.io.mina.MinaSession.setAttribute(java.lang.Object, java.lang.Object)", "public java.lang.Object setAttribute(java.lang.Object, java.lang.Object)"], ["java.net.SocketAddress", "org.apache.sshd.common.io.mina.MinaSession.getRemoteAddress()", "public java.net.SocketAddress getRemoteAddress()"], ["java.net.SocketAddress", "org.apache.sshd.common.io.mina.MinaSession.getLocalAddress()", "public java.net.SocketAddress getLocalAddress()"], ["long", "org.apache.sshd.common.io.mina.MinaSession.getId()", "public long getId()"], ["org.apache.mina.core.future.WriteFuture", "org.apache.sshd.common.io.mina.MinaSession.write(byte[], int, int)", "public org.apache.mina.core.future.WriteFuture write(byte[], int, int)"], ["org.apache.sshd.common.io.IoWriteFuture", "org.apache.sshd.common.io.mina.MinaSession.write(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.common.io.IoService", "org.apache.sshd.common.io.mina.MinaSession.getService()", "public org.apache.sshd.common.io.IoService getService()"], ["java.lang.String", "org.apache.sshd.common.io.mina.MinaSession.toString()", "public java.lang.String toString()"], ["int", "org.apache.sshd.common.io.mina.MinaSupport$1.available()", "public int available()"], ["void", "org.apache.sshd.common.io.mina.MinaSupport$1.getRawBytes(byte[], int, int)", "public void getRawBytes(byte[], int, int)"], ["org.apache.sshd.common.util.Readable", "org.apache.sshd.common.io.mina.MinaSupport.asReadable(org.apache.mina.core.buffer.IoBuffer)", "public static org.apache.sshd.common.util.Readable asReadable(org.apache.mina.core.buffer.IoBuffer)"], ["org.apache.mina.core.buffer.IoBuffer", "org.apache.sshd.common.io.mina.MinaSupport.asIoBuffer(org.apache.sshd.common.util.buffer.Buffer)", "public static org.apache.mina.core.buffer.IoBuffer asIoBuffer(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.common.io.nio2.Nio2Acceptor", "org.apache.sshd.common.io.nio2.Nio2Acceptor(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, java.nio.channels.AsynchronousChannelGroup)", "public org.apache.sshd.common.io.nio2.Nio2Acceptor(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, java.nio.channels.AsynchronousChannelGroup)"], ["void", "org.apache.sshd.common.io.nio2.Nio2Acceptor.bind(java.util.Collection<? extends java.net.SocketAddress>)", "public void bind(java.util.Collection<? extends java.net.SocketAddress>) throws java.io.IOException"], ["void", "org.apache.sshd.common.io.nio2.Nio2Acceptor.bind(java.net.SocketAddress)", "public void bind(java.net.SocketAddress) throws java.io.IOException"], ["void", "org.apache.sshd.common.io.nio2.Nio2Acceptor.unbind()", "public void unbind()"], ["void", "org.apache.sshd.common.io.nio2.Nio2Acceptor.unbind(java.util.Collection<? extends java.net.SocketAddress>)", "public void unbind(java.util.Collection<? extends java.net.SocketAddress>)"], ["void", "org.apache.sshd.common.io.nio2.Nio2Acceptor.unbind(java.net.SocketAddress)", "public void unbind(java.net.SocketAddress)"], ["java.util.Set<java.net.SocketAddress>", "org.apache.sshd.common.io.nio2.Nio2Acceptor.getBoundAddresses()", "public java.util.Set<java.net.SocketAddress> getBoundAddresses()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.common.io.nio2.Nio2Acceptor.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["void", "org.apache.sshd.common.io.nio2.Nio2Acceptor.doCloseImmediately()", "public void doCloseImmediately()"], ["java.lang.Object", "org.apache.sshd.common.io.nio2.Nio2CompletionHandler$1.run()", "public java.lang.Object run()"], ["java.lang.Object", "org.apache.sshd.common.io.nio2.Nio2CompletionHandler$2.run()", "public java.lang.Object run()"], ["org.apache.sshd.common.io.nio2.Nio2CompletionHandler", "org.apache.sshd.common.io.nio2.Nio2CompletionHandler()", "public org.apache.sshd.common.io.nio2.Nio2CompletionHandler()"], ["void", "org.apache.sshd.common.io.nio2.Nio2CompletionHandler.completed(V, A)", "public void completed(V, A)"], ["void", "org.apache.sshd.common.io.nio2.Nio2CompletionHandler.failed(java.lang.Throwable, A)", "public void failed(java.lang.Throwable, A)"], ["org.apache.sshd.common.io.IoSession", "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture.getSession()", "public org.apache.sshd.common.io.IoSession getSession()"], ["java.lang.Throwable", "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture.getException()", "public java.lang.Throwable getException()"], ["boolean", "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture.isConnected()", "public boolean isConnected()"], ["void", "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture.setSession(org.apache.sshd.common.io.IoSession)", "public void setSession(org.apache.sshd.common.io.IoSession)"], ["void", "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["org.apache.sshd.common.io.nio2.Nio2Connector", "org.apache.sshd.common.io.nio2.Nio2Connector(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, java.nio.channels.AsynchronousChannelGroup)", "public org.apache.sshd.common.io.nio2.Nio2Connector(org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, java.nio.channels.AsynchronousChannelGroup)"], ["org.apache.sshd.common.io.IoConnectFuture", "org.apache.sshd.common.io.nio2.Nio2Connector.connect(java.net.SocketAddress)", "public org.apache.sshd.common.io.IoConnectFuture connect(java.net.SocketAddress)"], ["org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture", "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture(java.lang.Object, java.nio.ByteBuffer)", "public org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture(java.lang.Object, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture.getBuffer()", "public java.nio.ByteBuffer getBuffer()"], ["void", "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture.setWritten()", "public void setWritten()"], ["void", "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["void", "org.apache.sshd.common.io.nio2.Nio2Service.dispose()", "public void dispose()"], ["java.util.Map<java.lang.Long, org.apache.sshd.common.io.IoSession>", "org.apache.sshd.common.io.nio2.Nio2Service.getManagedSessions()", "public java.util.Map<java.lang.Long, org.apache.sshd.common.io.IoSession> getManagedSessions()"], ["void", "org.apache.sshd.common.io.nio2.Nio2Service.sessionClosed(org.apache.sshd.common.io.nio2.Nio2Session)", "public void sessionClosed(org.apache.sshd.common.io.nio2.Nio2Session)"], ["org.apache.sshd.common.io.nio2.Nio2ServiceFactory", "org.apache.sshd.common.io.nio2.Nio2ServiceFactory(org.apache.sshd.common.FactoryManager, java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.common.io.nio2.Nio2ServiceFactory(org.apache.sshd.common.FactoryManager, java.util.concurrent.ExecutorService, boolean)"], ["org.apache.sshd.common.io.IoConnector", "org.apache.sshd.common.io.nio2.Nio2ServiceFactory.createConnector(org.apache.sshd.common.io.IoHandler)", "public org.apache.sshd.common.io.IoConnector createConnector(org.apache.sshd.common.io.IoHandler)"], ["org.apache.sshd.common.io.IoAcceptor", "org.apache.sshd.common.io.nio2.Nio2ServiceFactory.createAcceptor(org.apache.sshd.common.io.IoHandler)", "public org.apache.sshd.common.io.IoAcceptor createAcceptor(org.apache.sshd.common.io.IoHandler)"], ["org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory", "org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory()", "public org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory()"], ["org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory", "org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory(java.util.concurrent.ExecutorService, boolean)", "public org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory(java.util.concurrent.ExecutorService, boolean)"], ["org.apache.sshd.common.io.IoServiceFactory", "org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory.create(org.apache.sshd.common.FactoryManager)", "public org.apache.sshd.common.io.IoServiceFactory create(org.apache.sshd.common.FactoryManager)"], ["int", "org.apache.sshd.common.io.nio2.Nio2Session$1.available()", "public int available()"], ["void", "org.apache.sshd.common.io.nio2.Nio2Session$1.getRawBytes(byte[], int, int)", "public void getRawBytes(byte[], int, int)"], ["org.apache.sshd.common.io.nio2.Nio2Session", "org.apache.sshd.common.io.nio2.Nio2Session(org.apache.sshd.common.io.nio2.Nio2Service, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, java.nio.channels.AsynchronousSocketChannel)", "public org.apache.sshd.common.io.nio2.Nio2Session(org.apache.sshd.common.io.nio2.Nio2Service, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoHandler, java.nio.channels.AsynchronousSocketChannel) throws java.io.IOException"], ["long", "org.apache.sshd.common.io.nio2.Nio2Session.getId()", "public long getId()"], ["java.lang.Object", "org.apache.sshd.common.io.nio2.Nio2Session.getAttribute(java.lang.Object)", "public java.lang.Object getAttribute(java.lang.Object)"], ["java.lang.Object", "org.apache.sshd.common.io.nio2.Nio2Session.setAttribute(java.lang.Object, java.lang.Object)", "public java.lang.Object setAttribute(java.lang.Object, java.lang.Object)"], ["java.net.SocketAddress", "org.apache.sshd.common.io.nio2.Nio2Session.getRemoteAddress()", "public java.net.SocketAddress getRemoteAddress()"], ["java.net.SocketAddress", "org.apache.sshd.common.io.nio2.Nio2Session.getLocalAddress()", "public java.net.SocketAddress getLocalAddress()"], ["void", "org.apache.sshd.common.io.nio2.Nio2Session.suspend()", "public void suspend()"], ["org.apache.sshd.common.io.IoWriteFuture", "org.apache.sshd.common.io.nio2.Nio2Session.write(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.common.io.IoService", "org.apache.sshd.common.io.nio2.Nio2Session.getService()", "public org.apache.sshd.common.io.IoService getService()"], ["void", "org.apache.sshd.common.io.nio2.Nio2Session.startReading()", "public void startReading()"], ["void", "org.apache.sshd.common.io.nio2.Nio2Session.startReading(int)", "public void startReading(int)"], ["void", "org.apache.sshd.common.io.nio2.Nio2Session.startReading(byte[])", "public void startReading(byte[])"], ["void", "org.apache.sshd.common.io.nio2.Nio2Session.startReading(byte[], int, int)", "public void startReading(byte[], int, int)"], ["void", "org.apache.sshd.common.io.nio2.Nio2Session.startReading(java.nio.ByteBuffer)", "public void startReading(java.nio.ByteBuffer)"], ["java.lang.String", "org.apache.sshd.common.io.nio2.Nio2Session.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.io.ReadPendingException", "org.apache.sshd.common.io.ReadPendingException()", "public org.apache.sshd.common.io.ReadPendingException()"], ["org.apache.sshd.common.io.ReadPendingException", "org.apache.sshd.common.io.ReadPendingException(java.lang.String, java.lang.Throwable)", "public org.apache.sshd.common.io.ReadPendingException(java.lang.String, java.lang.Throwable)"], ["org.apache.sshd.common.io.ReadPendingException", "org.apache.sshd.common.io.ReadPendingException(java.lang.String)", "public org.apache.sshd.common.io.ReadPendingException(java.lang.String)"], ["org.apache.sshd.common.io.ReadPendingException", "org.apache.sshd.common.io.ReadPendingException(java.lang.Throwable)", "public org.apache.sshd.common.io.ReadPendingException(java.lang.Throwable)"], ["org.apache.sshd.common.io.WritePendingException", "org.apache.sshd.common.io.WritePendingException()", "public org.apache.sshd.common.io.WritePendingException()"], ["org.apache.sshd.common.io.WritePendingException", "org.apache.sshd.common.io.WritePendingException(java.lang.String, java.lang.Throwable)", "public org.apache.sshd.common.io.WritePendingException(java.lang.String, java.lang.Throwable)"], ["org.apache.sshd.common.io.WritePendingException", "org.apache.sshd.common.io.WritePendingException(java.lang.String)", "public org.apache.sshd.common.io.WritePendingException(java.lang.String)"], ["org.apache.sshd.common.io.WritePendingException", "org.apache.sshd.common.io.WritePendingException(java.lang.Throwable)", "public org.apache.sshd.common.io.WritePendingException(java.lang.Throwable)"], ["byte[]", "org.apache.sshd.common.kex.AbstractDH.getK()", "public byte[] getK() throws java.lang.Exception"], ["byte[]", "org.apache.sshd.common.kex.AbstractDH.stripLeadingZeroes(byte[])", "public static byte[] stripLeadingZeroes(byte[])"], ["org.apache.sshd.common.kex.DHG", "org.apache.sshd.common.kex.BuiltinDHFactories$1.create(java.lang.Object...)", "public org.apache.sshd.common.kex.DHG create(java.lang.Object...) throws java.lang.Exception"], ["org.apache.sshd.common.kex.AbstractDH", "org.apache.sshd.common.kex.BuiltinDHFactories$1.create(java.lang.Object[])", "public org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[]) throws java.lang.Exception"], ["org.apache.sshd.common.kex.DHG", "org.apache.sshd.common.kex.BuiltinDHFactories$2.create(java.lang.Object...)", "public org.apache.sshd.common.kex.DHG create(java.lang.Object...) throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories$2.isSupported()", "public boolean isSupported()"], ["org.apache.sshd.common.kex.AbstractDH", "org.apache.sshd.common.kex.BuiltinDHFactories$2.create(java.lang.Object[])", "public org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[]) throws java.lang.Exception"], ["org.apache.sshd.common.kex.DHG", "org.apache.sshd.common.kex.BuiltinDHFactories$3.create(java.lang.Object...)", "public org.apache.sshd.common.kex.DHG create(java.lang.Object...) throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories$3.isGroupExchange()", "public boolean isGroupExchange()"], ["org.apache.sshd.common.kex.AbstractDH", "org.apache.sshd.common.kex.BuiltinDHFactories$3.create(java.lang.Object[])", "public org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[]) throws java.lang.Exception"], ["org.apache.sshd.common.kex.AbstractDH", "org.apache.sshd.common.kex.BuiltinDHFactories$4.create(java.lang.Object...)", "public org.apache.sshd.common.kex.AbstractDH create(java.lang.Object...) throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories$4.isSupported()", "public boolean isSupported()"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories$4.isGroupExchange()", "public boolean isGroupExchange()"], ["org.apache.sshd.common.kex.ECDH", "org.apache.sshd.common.kex.BuiltinDHFactories$5.create(java.lang.Object...)", "public org.apache.sshd.common.kex.ECDH create(java.lang.Object...) throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories$5.isSupported()", "public boolean isSupported()"], ["org.apache.sshd.common.kex.AbstractDH", "org.apache.sshd.common.kex.BuiltinDHFactories$5.create(java.lang.Object[])", "public org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[]) throws java.lang.Exception"], ["org.apache.sshd.common.kex.ECDH", "org.apache.sshd.common.kex.BuiltinDHFactories$6.create(java.lang.Object...)", "public org.apache.sshd.common.kex.ECDH create(java.lang.Object...) throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories$6.isSupported()", "public boolean isSupported()"], ["org.apache.sshd.common.kex.AbstractDH", "org.apache.sshd.common.kex.BuiltinDHFactories$6.create(java.lang.Object[])", "public org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[]) throws java.lang.Exception"], ["org.apache.sshd.common.kex.ECDH", "org.apache.sshd.common.kex.BuiltinDHFactories$7.create(java.lang.Object...)", "public org.apache.sshd.common.kex.ECDH create(java.lang.Object...) throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories$7.isSupported()", "public boolean isSupported()"], ["org.apache.sshd.common.kex.AbstractDH", "org.apache.sshd.common.kex.BuiltinDHFactories$7.create(java.lang.Object[])", "public org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[]) throws java.lang.Exception"], ["org.apache.sshd.common.kex.BuiltinDHFactories$Constants", "org.apache.sshd.common.kex.BuiltinDHFactories$Constants()", "public org.apache.sshd.common.kex.BuiltinDHFactories$Constants()"], ["org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult", "org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult(java.util.List<org.apache.sshd.common.kex.DHFactory>, java.util.List<java.lang.String>)", "public org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult(java.util.List<org.apache.sshd.common.kex.DHFactory>, java.util.List<java.lang.String>)"], ["java.util.List<org.apache.sshd.common.kex.DHFactory>", "org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult.getParsedFactories()", "public java.util.List<org.apache.sshd.common.kex.DHFactory> getParsedFactories()"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult.getUnsupportedFactories()", "public java.util.List<java.lang.String> getUnsupportedFactories()"], ["org.apache.sshd.common.kex.BuiltinDHFactories[]", "org.apache.sshd.common.kex.BuiltinDHFactories.values()", "public static org.apache.sshd.common.kex.BuiltinDHFactories[] values()"], ["org.apache.sshd.common.kex.BuiltinDHFactories", "org.apache.sshd.common.kex.BuiltinDHFactories.valueOf(java.lang.String)", "public static org.apache.sshd.common.kex.BuiltinDHFactories valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.kex.BuiltinDHFactories.getName()", "public final java.lang.String getName()"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories.isSupported()", "public boolean isSupported()"], ["java.lang.String", "org.apache.sshd.common.kex.BuiltinDHFactories.toString()", "public final java.lang.String toString()"], ["void", "org.apache.sshd.common.kex.BuiltinDHFactories.registerExtension(org.apache.sshd.common.kex.DHFactory)", "public static void registerExtension(org.apache.sshd.common.kex.DHFactory)"], ["java.util.SortedSet<org.apache.sshd.common.kex.DHFactory>", "org.apache.sshd.common.kex.BuiltinDHFactories.getRegisteredExtensions()", "public static java.util.SortedSet<org.apache.sshd.common.kex.DHFactory> getRegisteredExtensions()"], ["org.apache.sshd.common.kex.DHFactory", "org.apache.sshd.common.kex.BuiltinDHFactories.unregisterExtension(java.lang.String)", "public static org.apache.sshd.common.kex.DHFactory unregisterExtension(java.lang.String)"], ["org.apache.sshd.common.kex.BuiltinDHFactories", "org.apache.sshd.common.kex.BuiltinDHFactories.fromFactoryName(java.lang.String)", "public static org.apache.sshd.common.kex.BuiltinDHFactories fromFactoryName(java.lang.String)"], ["boolean", "org.apache.sshd.common.kex.BuiltinDHFactories.isGroupExchange()", "public boolean isGroupExchange()"], ["org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult", "org.apache.sshd.common.kex.BuiltinDHFactories.parseDHFactoriesList(java.lang.String)", "public static org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.lang.String)"], ["org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult", "org.apache.sshd.common.kex.BuiltinDHFactories.parseDHFactoriesList(java.lang.String...)", "public static org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.lang.String...)"], ["org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult", "org.apache.sshd.common.kex.BuiltinDHFactories.parseDHFactoriesList(java.util.Collection<java.lang.String>)", "public static org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.kex.DHFactory", "org.apache.sshd.common.kex.BuiltinDHFactories.resolveFactory(java.lang.String)", "public static org.apache.sshd.common.kex.DHFactory resolveFactory(java.lang.String)"], ["void", "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange.init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[])", "public void init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[]) throws java.lang.Exception"], ["org.apache.sshd.common.session.AbstractSession", "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange.getSession()", "public org.apache.sshd.common.session.AbstractSession getSession()"], ["org.apache.sshd.common.digest.Digest", "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange.getHash()", "public org.apache.sshd.common.digest.Digest getHash()"], ["byte[]", "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange.getH()", "public byte[] getH()"], ["byte[]", "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange.getK()", "public byte[] getK()"], ["org.apache.sshd.common.kex.DHG", "org.apache.sshd.common.kex.DHG(org.apache.sshd.common.Factory<org.apache.sshd.common.digest.Digest>)", "public org.apache.sshd.common.kex.DHG(org.apache.sshd.common.Factory<org.apache.sshd.common.digest.Digest>) throws java.lang.Exception"], ["org.apache.sshd.common.kex.DHG", "org.apache.sshd.common.kex.DHG(org.apache.sshd.common.Factory<org.apache.sshd.common.digest.Digest>, java.math.BigInteger, java.math.BigInteger)", "public org.apache.sshd.common.kex.DHG(org.apache.sshd.common.Factory<org.apache.sshd.common.digest.Digest>, java.math.BigInteger, java.math.BigInteger) throws java.lang.Exception"], ["byte[]", "org.apache.sshd.common.kex.DHG.getE()", "public byte[] getE() throws java.lang.Exception"], ["void", "org.apache.sshd.common.kex.DHG.setP(byte[])", "public void setP(byte[])"], ["void", "org.apache.sshd.common.kex.DHG.setG(byte[])", "public void setG(byte[])"], ["void", "org.apache.sshd.common.kex.DHG.setF(byte[])", "public void setF(byte[])"], ["java.math.BigInteger", "org.apache.sshd.common.kex.DHG.getP()", "public java.math.BigInteger getP()"], ["void", "org.apache.sshd.common.kex.DHG.setP(java.math.BigInteger)", "public void setP(java.math.BigInteger)"], ["java.math.BigInteger", "org.apache.sshd.common.kex.DHG.getG()", "public java.math.BigInteger getG()"], ["void", "org.apache.sshd.common.kex.DHG.setG(java.math.BigInteger)", "public void setG(java.math.BigInteger)"], ["void", "org.apache.sshd.common.kex.DHG.setF(java.math.BigInteger)", "public void setF(java.math.BigInteger)"], ["org.apache.sshd.common.digest.Digest", "org.apache.sshd.common.kex.DHG.getHash()", "public org.apache.sshd.common.digest.Digest getHash() throws java.lang.Exception"], ["byte[]", "org.apache.sshd.common.kex.DHGroupData.getG()", "public static byte[] getG()"], ["byte[]", "org.apache.sshd.common.kex.DHGroupData.getP1()", "public static byte[] getP1()"], ["byte[]", "org.apache.sshd.common.kex.DHGroupData.getP14()", "public static byte[] getP14()"], ["org.apache.sshd.common.kex.ECDH", "org.apache.sshd.common.kex.ECDH()", "public org.apache.sshd.common.kex.ECDH() throws java.lang.Exception"], ["org.apache.sshd.common.kex.ECDH", "org.apache.sshd.common.kex.ECDH(java.lang.String)", "public org.apache.sshd.common.kex.ECDH(java.lang.String) throws java.lang.Exception"], ["org.apache.sshd.common.kex.ECDH", "org.apache.sshd.common.kex.ECDH(org.apache.sshd.common.cipher.ECCurves)", "public org.apache.sshd.common.kex.ECDH(org.apache.sshd.common.cipher.ECCurves) throws java.lang.Exception"], ["org.apache.sshd.common.kex.ECDH", "org.apache.sshd.common.kex.ECDH(java.security.spec.ECParameterSpec)", "public org.apache.sshd.common.kex.ECDH(java.security.spec.ECParameterSpec) throws java.lang.Exception"], ["byte[]", "org.apache.sshd.common.kex.ECDH.getE()", "public byte[] getE() throws java.lang.Exception"], ["void", "org.apache.sshd.common.kex.ECDH.setCurveParameters(java.security.spec.ECParameterSpec)", "public void setCurveParameters(java.security.spec.ECParameterSpec)"], ["void", "org.apache.sshd.common.kex.ECDH.setF(byte[])", "public void setF(byte[])"], ["org.apache.sshd.common.digest.Digest", "org.apache.sshd.common.kex.ECDH.getHash()", "public org.apache.sshd.common.digest.Digest getHash() throws java.lang.Exception"], ["int", "org.apache.sshd.common.kex.KexProposalOption$2.compare(org.apache.sshd.common.kex.KexProposalOption, org.apache.sshd.common.kex.KexProposalOption)", "public int compare(org.apache.sshd.common.kex.KexProposalOption, org.apache.sshd.common.kex.KexProposalOption)"], ["int", "org.apache.sshd.common.kex.KexProposalOption$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.sshd.common.kex.KexProposalOption$Constants", "org.apache.sshd.common.kex.KexProposalOption$Constants()", "public org.apache.sshd.common.kex.KexProposalOption$Constants()"], ["org.apache.sshd.common.kex.KexProposalOption[]", "org.apache.sshd.common.kex.KexProposalOption.values()", "public static org.apache.sshd.common.kex.KexProposalOption[] values()"], ["org.apache.sshd.common.kex.KexProposalOption", "org.apache.sshd.common.kex.KexProposalOption.valueOf(java.lang.String)", "public static org.apache.sshd.common.kex.KexProposalOption valueOf(java.lang.String)"], ["int", "org.apache.sshd.common.kex.KexProposalOption.getProposalIndex()", "public final int getProposalIndex()"], ["java.lang.String", "org.apache.sshd.common.kex.KexProposalOption.getDescription()", "public final java.lang.String getDescription()"], ["org.apache.sshd.common.kex.KexProposalOption", "org.apache.sshd.common.kex.KexProposalOption.fromName(java.lang.String)", "public static org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)"], ["org.apache.sshd.common.kex.KexProposalOption", "org.apache.sshd.common.kex.KexProposalOption.fromProposalIndex(int)", "public static org.apache.sshd.common.kex.KexProposalOption fromProposalIndex(int)"], ["org.apache.sshd.common.kex.KexState[]", "org.apache.sshd.common.kex.KexState.values()", "public static org.apache.sshd.common.kex.KexState[] values()"], ["org.apache.sshd.common.kex.KexState", "org.apache.sshd.common.kex.KexState.valueOf(java.lang.String)", "public static org.apache.sshd.common.kex.KexState valueOf(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.apache.sshd.common.keyprovider.AbstractClassLoadableResourceKeyPairProvider.getResources()", "public java.util.Collection<java.lang.String> getResources()"], ["void", "org.apache.sshd.common.keyprovider.AbstractClassLoadableResourceKeyPairProvider.setResources(java.util.Collection<java.lang.String>)", "public void setResources(java.util.Collection<java.lang.String>)"], ["java.lang.ClassLoader", "org.apache.sshd.common.keyprovider.AbstractClassLoadableResourceKeyPairProvider.getResourceLoader()", "public java.lang.ClassLoader getResourceLoader()"], ["void", "org.apache.sshd.common.keyprovider.AbstractClassLoadableResourceKeyPairProvider.setResourceLoader(java.lang.ClassLoader)", "public void setResourceLoader(java.lang.ClassLoader)"], ["java.lang.Iterable<java.security.KeyPair>", "org.apache.sshd.common.keyprovider.AbstractClassLoadableResourceKeyPairProvider.loadKeys()", "public java.lang.Iterable<java.security.KeyPair> loadKeys()"], ["java.util.Collection<? extends java.nio.file.Path>", "org.apache.sshd.common.keyprovider.AbstractFileKeyPairProvider.getPaths()", "public java.util.Collection<? extends java.nio.file.Path> getPaths()"], ["void", "org.apache.sshd.common.keyprovider.AbstractFileKeyPairProvider.setFiles(java.util.Collection<java.io.File>)", "public void setFiles(java.util.Collection<java.io.File>)"], ["void", "org.apache.sshd.common.keyprovider.AbstractFileKeyPairProvider.setPaths(java.util.Collection<? extends java.nio.file.Path>)", "public void setPaths(java.util.Collection<? extends java.nio.file.Path>)"], ["java.lang.Iterable<java.security.KeyPair>", "org.apache.sshd.common.keyprovider.AbstractFileKeyPairProvider.loadKeys()", "public java.lang.Iterable<java.security.KeyPair> loadKeys()"], ["java.security.KeyPair", "org.apache.sshd.common.keyprovider.AbstractKeyPairProvider.loadKey(java.lang.String)", "public java.security.KeyPair loadKey(java.lang.String)"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.keyprovider.AbstractKeyPairProvider.getKeyTypes()", "public java.util.List<java.lang.String> getKeyTypes()"], ["java.lang.Iterable", "org.apache.sshd.common.keyprovider.AbstractKeyPairProvider.getKeyTypes()", "public java.lang.Iterable getKeyTypes()"], ["java.util.Iterator<java.security.KeyPair>", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$1.iterator()", "public java.util.Iterator<java.security.KeyPair> iterator()"], ["org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator(java.util.Collection<? extends R>)", "public org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator(java.util.Collection<? extends R>)"], ["boolean", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator.hasNext()", "public boolean hasNext()"], ["java.security.KeyPair", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator.next()", "public java.security.KeyPair next()"], ["void", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator.next()", "public java.lang.Object next()"], ["org.apache.sshd.common.config.keys.FilePasswordProvider", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider.getPasswordFinder()", "public org.apache.sshd.common.config.keys.FilePasswordProvider getPasswordFinder()"], ["void", "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider.setPasswordFinder(org.apache.sshd.common.config.keys.FilePasswordProvider)", "public void setPasswordFinder(org.apache.sshd.common.config.keys.FilePasswordProvider)"], ["java.security.KeyPair", "org.apache.sshd.common.keyprovider.KeyPairProvider$1.loadKey(java.lang.String)", "public java.security.KeyPair loadKey(java.lang.String)"], ["java.lang.Iterable<java.lang.String>", "org.apache.sshd.common.keyprovider.KeyPairProvider$1.getKeyTypes()", "public java.lang.Iterable<java.lang.String> getKeyTypes()"], ["java.lang.Iterable<java.security.KeyPair>", "org.apache.sshd.common.keyprovider.KeyPairProvider$1.loadKeys()", "public java.lang.Iterable<java.security.KeyPair> loadKeys()"], ["java.lang.String", "org.apache.sshd.common.keyprovider.KeyPairProvider$1.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.keyprovider.KeyPairProvider", "org.apache.sshd.common.keyprovider.MappedKeyPairProvider$1.transform(java.util.Map<java.lang.String, java.security.KeyPair>)", "public org.apache.sshd.common.keyprovider.KeyPairProvider transform(java.util.Map<java.lang.String, java.security.KeyPair>)"], ["java.lang.Object", "org.apache.sshd.common.keyprovider.MappedKeyPairProvider$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.apache.sshd.common.keyprovider.MappedKeyPairProvider", "org.apache.sshd.common.keyprovider.MappedKeyPairProvider(java.util.Map<java.lang.String, java.security.KeyPair>)", "public org.apache.sshd.common.keyprovider.MappedKeyPairProvider(java.util.Map<java.lang.String, java.security.KeyPair>)"], ["java.lang.Iterable<java.security.KeyPair>", "org.apache.sshd.common.keyprovider.MappedKeyPairProvider.loadKeys()", "public java.lang.Iterable<java.security.KeyPair> loadKeys()"], ["java.security.KeyPair", "org.apache.sshd.common.keyprovider.MappedKeyPairProvider.loadKey(java.lang.String)", "public java.security.KeyPair loadKey(java.lang.String)"], ["java.lang.Iterable<java.lang.String>", "org.apache.sshd.common.keyprovider.MappedKeyPairProvider.getKeyTypes()", "public java.lang.Iterable<java.lang.String> getKeyTypes()"], ["java.lang.String", "org.apache.sshd.common.keyprovider.MappedKeyPairProvider.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.mac.BaseMac", "org.apache.sshd.common.mac.BaseMac(java.lang.String, int, int)", "public org.apache.sshd.common.mac.BaseMac(java.lang.String, int, int)"], ["java.lang.String", "org.apache.sshd.common.mac.BaseMac.getAlgorithm()", "public final java.lang.String getAlgorithm()"], ["int", "org.apache.sshd.common.mac.BaseMac.getBlockSize()", "public int getBlockSize()"], ["void", "org.apache.sshd.common.mac.BaseMac.init(byte[])", "public void init(byte[]) throws java.lang.Exception"], ["void", "org.apache.sshd.common.mac.BaseMac.updateUInt(long)", "public void updateUInt(long)"], ["void", "org.apache.sshd.common.mac.BaseMac.update(byte[], int, int)", "public void update(byte[], int, int)"], ["void", "org.apache.sshd.common.mac.BaseMac.doFinal(byte[], int)", "public void doFinal(byte[], int) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.mac.BaseMac.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.mac.Mac", "org.apache.sshd.common.mac.BuiltinMacs$1.create()", "public org.apache.sshd.common.mac.Mac create()"], ["java.lang.Object", "org.apache.sshd.common.mac.BuiltinMacs$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.mac.Mac", "org.apache.sshd.common.mac.BuiltinMacs$2.create()", "public org.apache.sshd.common.mac.Mac create()"], ["java.lang.Object", "org.apache.sshd.common.mac.BuiltinMacs$2.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.mac.Mac", "org.apache.sshd.common.mac.BuiltinMacs$3.create()", "public org.apache.sshd.common.mac.Mac create()"], ["java.lang.Object", "org.apache.sshd.common.mac.BuiltinMacs$3.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.mac.Mac", "org.apache.sshd.common.mac.BuiltinMacs$4.create()", "public org.apache.sshd.common.mac.Mac create()"], ["java.lang.Object", "org.apache.sshd.common.mac.BuiltinMacs$4.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.mac.Mac", "org.apache.sshd.common.mac.BuiltinMacs$5.create()", "public org.apache.sshd.common.mac.Mac create()"], ["java.lang.Object", "org.apache.sshd.common.mac.BuiltinMacs$5.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.mac.Mac", "org.apache.sshd.common.mac.BuiltinMacs$6.create()", "public org.apache.sshd.common.mac.Mac create()"], ["java.lang.Object", "org.apache.sshd.common.mac.BuiltinMacs$6.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.mac.BuiltinMacs$Constants", "org.apache.sshd.common.mac.BuiltinMacs$Constants()", "public org.apache.sshd.common.mac.BuiltinMacs$Constants()"], ["org.apache.sshd.common.mac.BuiltinMacs$ParseResult", "org.apache.sshd.common.mac.BuiltinMacs$ParseResult(java.util.List<org.apache.sshd.common.mac.MacFactory>, java.util.List<java.lang.String>)", "public org.apache.sshd.common.mac.BuiltinMacs$ParseResult(java.util.List<org.apache.sshd.common.mac.MacFactory>, java.util.List<java.lang.String>)"], ["org.apache.sshd.common.mac.BuiltinMacs[]", "org.apache.sshd.common.mac.BuiltinMacs.values()", "public static org.apache.sshd.common.mac.BuiltinMacs[] values()"], ["org.apache.sshd.common.mac.BuiltinMacs", "org.apache.sshd.common.mac.BuiltinMacs.valueOf(java.lang.String)", "public static org.apache.sshd.common.mac.BuiltinMacs valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.mac.BuiltinMacs.getName()", "public final java.lang.String getName()"], ["boolean", "org.apache.sshd.common.mac.BuiltinMacs.isSupported()", "public final boolean isSupported()"], ["java.lang.String", "org.apache.sshd.common.mac.BuiltinMacs.toString()", "public final java.lang.String toString()"], ["void", "org.apache.sshd.common.mac.BuiltinMacs.registerExtension(org.apache.sshd.common.mac.MacFactory)", "public static void registerExtension(org.apache.sshd.common.mac.MacFactory)"], ["java.util.SortedSet<org.apache.sshd.common.mac.MacFactory>", "org.apache.sshd.common.mac.BuiltinMacs.getRegisteredExtensions()", "public static java.util.SortedSet<org.apache.sshd.common.mac.MacFactory> getRegisteredExtensions()"], ["org.apache.sshd.common.mac.MacFactory", "org.apache.sshd.common.mac.BuiltinMacs.unregisterExtension(java.lang.String)", "public static org.apache.sshd.common.mac.MacFactory unregisterExtension(java.lang.String)"], ["org.apache.sshd.common.mac.BuiltinMacs", "org.apache.sshd.common.mac.BuiltinMacs.fromString(java.lang.String)", "public static org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)"], ["org.apache.sshd.common.mac.BuiltinMacs", "org.apache.sshd.common.mac.BuiltinMacs.fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.digest.Digest>)", "public static org.apache.sshd.common.mac.BuiltinMacs fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.digest.Digest>)"], ["org.apache.sshd.common.mac.BuiltinMacs", "org.apache.sshd.common.mac.BuiltinMacs.fromFactoryName(java.lang.String)", "public static org.apache.sshd.common.mac.BuiltinMacs fromFactoryName(java.lang.String)"], ["org.apache.sshd.common.mac.BuiltinMacs$ParseResult", "org.apache.sshd.common.mac.BuiltinMacs.parseMacsList(java.lang.String)", "public static org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.lang.String)"], ["org.apache.sshd.common.mac.BuiltinMacs$ParseResult", "org.apache.sshd.common.mac.BuiltinMacs.parseMacsList(java.lang.String...)", "public static org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.lang.String...)"], ["org.apache.sshd.common.mac.BuiltinMacs$ParseResult", "org.apache.sshd.common.mac.BuiltinMacs.parseMacsList(java.util.Collection<java.lang.String>)", "public static org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.mac.MacFactory", "org.apache.sshd.common.mac.BuiltinMacs.resolveFactory(java.lang.String)", "public static org.apache.sshd.common.mac.MacFactory resolveFactory(java.lang.String)"], ["<T> T", "org.apache.sshd.common.NamedFactory$Utils.create(java.util.Collection<? extends org.apache.sshd.common.NamedFactory<T>>, java.lang.String)", "public static <T> T create(java.util.Collection<? extends org.apache.sshd.common.NamedFactory<T>>, java.lang.String)"], ["<S extends org.apache.sshd.common.OptionalFeature, T, E extends org.apache.sshd.common.NamedFactory<T>> java.util.List<org.apache.sshd.common.NamedFactory<T>>", "org.apache.sshd.common.NamedFactory$Utils.setUpTransformedFactories(boolean, java.util.Collection<? extends S>, org.apache.sshd.common.util.Transformer<? super S, ? extends E>)", "public static <S extends org.apache.sshd.common.OptionalFeature, T, E extends org.apache.sshd.common.NamedFactory<T>> java.util.List<org.apache.sshd.common.NamedFactory<T>> setUpTransformedFactories(boolean, java.util.Collection<? extends S>, org.apache.sshd.common.util.Transformer<? super S, ? extends E>)"], ["<T, E extends org.apache.sshd.common.NamedFactory<T> & org.apache.sshd.common.OptionalFeature> java.util.List<org.apache.sshd.common.NamedFactory<T>>", "org.apache.sshd.common.NamedFactory$Utils.setUpBuiltinFactories(boolean, java.util.Collection<? extends E>)", "public static <T, E extends org.apache.sshd.common.NamedFactory<T> & org.apache.sshd.common.OptionalFeature> java.util.List<org.apache.sshd.common.NamedFactory<T>> setUpBuiltinFactories(boolean, java.util.Collection<? extends E>)"], ["int", "org.apache.sshd.common.NamedResource$1.compare(org.apache.sshd.common.NamedResource, org.apache.sshd.common.NamedResource)", "public int compare(org.apache.sshd.common.NamedResource, org.apache.sshd.common.NamedResource)"], ["int", "org.apache.sshd.common.NamedResource$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.apache.sshd.common.NamedResource$2.transform(org.apache.sshd.common.NamedResource)", "public java.lang.String transform(org.apache.sshd.common.NamedResource)"], ["java.lang.Object", "org.apache.sshd.common.NamedResource$2.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.NamedResource$Utils.getNameList(java.util.Collection<? extends org.apache.sshd.common.NamedResource>)", "public static java.util.List<java.lang.String> getNameList(java.util.Collection<? extends org.apache.sshd.common.NamedResource>)"], ["java.lang.String", "org.apache.sshd.common.NamedResource$Utils.getNames(java.util.Collection<? extends org.apache.sshd.common.NamedResource>)", "public static java.lang.String getNames(java.util.Collection<? extends org.apache.sshd.common.NamedResource>)"], ["<R extends org.apache.sshd.common.NamedResource> R", "org.apache.sshd.common.NamedResource$Utils.removeByName(java.lang.String, java.util.Comparator<? super java.lang.String>, java.util.Collection<? extends R>)", "public static <R extends org.apache.sshd.common.NamedResource> R removeByName(java.lang.String, java.util.Comparator<? super java.lang.String>, java.util.Collection<? extends R>)"], ["<R extends org.apache.sshd.common.NamedResource> R", "org.apache.sshd.common.NamedResource$Utils.findByName(java.lang.String, java.util.Comparator<? super java.lang.String>, java.util.Collection<? extends R>)", "public static <R extends org.apache.sshd.common.NamedResource> R findByName(java.lang.String, java.util.Comparator<? super java.lang.String>, java.util.Collection<? extends R>)"], ["void", "org.apache.sshd.common.random.AbstractRandom.fill(byte[])", "public void fill(byte[])"], ["org.apache.sshd.common.random.JceRandom", "org.apache.sshd.common.random.JceRandom()", "public org.apache.sshd.common.random.JceRandom()"], ["synchronized", "org.apache.sshd.common.random.JceRandom.void fill(byte[], int, int)", "public synchronized void fill(byte[], int, int)"], ["synchronized", "org.apache.sshd.common.random.JceRandom.int random(int)", "public synchronized int random(int)"], ["org.apache.sshd.common.random.JceRandomFactory", "org.apache.sshd.common.random.JceRandomFactory()", "public org.apache.sshd.common.random.JceRandomFactory()"], ["java.lang.String", "org.apache.sshd.common.random.JceRandomFactory.getName()", "public java.lang.String getName()"], ["boolean", "org.apache.sshd.common.random.JceRandomFactory.isSupported()", "public boolean isSupported()"], ["org.apache.sshd.common.random.Random", "org.apache.sshd.common.random.JceRandomFactory.create()", "public org.apache.sshd.common.random.Random create()"], ["java.lang.Object", "org.apache.sshd.common.random.JceRandomFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.random.SingletonRandomFactory", "org.apache.sshd.common.random.SingletonRandomFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.random.Random>)", "public org.apache.sshd.common.random.SingletonRandomFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.random.Random>)"], ["boolean", "org.apache.sshd.common.random.SingletonRandomFactory.isSupported()", "public boolean isSupported()"], ["void", "org.apache.sshd.common.random.SingletonRandomFactory.fill(byte[], int, int)", "public void fill(byte[], int, int)"], ["int", "org.apache.sshd.common.random.SingletonRandomFactory.random(int)", "public int random(int)"], ["java.lang.String", "org.apache.sshd.common.random.SingletonRandomFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.random.Random", "org.apache.sshd.common.random.SingletonRandomFactory.create()", "public org.apache.sshd.common.random.Random create()"], ["java.lang.Object", "org.apache.sshd.common.random.SingletonRandomFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.RuntimeSshException", "org.apache.sshd.common.RuntimeSshException()", "public org.apache.sshd.common.RuntimeSshException()"], ["org.apache.sshd.common.RuntimeSshException", "org.apache.sshd.common.RuntimeSshException(java.lang.String)", "public org.apache.sshd.common.RuntimeSshException(java.lang.String)"], ["org.apache.sshd.common.RuntimeSshException", "org.apache.sshd.common.RuntimeSshException(java.lang.Throwable)", "public org.apache.sshd.common.RuntimeSshException(java.lang.Throwable)"], ["org.apache.sshd.common.RuntimeSshException", "org.apache.sshd.common.RuntimeSshException(java.lang.String, java.lang.Throwable)", "public org.apache.sshd.common.RuntimeSshException(java.lang.String, java.lang.Throwable)"], ["org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver(java.nio.file.Path)", "public org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver(java.nio.file.Path) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver.getFileName()", "public java.lang.String getFileName() throws java.io.IOException"], ["java.util.Collection<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver.getPermissions()", "public java.util.Collection<java.nio.file.attribute.PosixFilePermission> getPermissions() throws java.io.IOException"], ["org.apache.sshd.common.scp.ScpTimestamp", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver.getTimestamp()", "public org.apache.sshd.common.scp.ScpTimestamp getTimestamp() throws java.io.IOException"], ["long", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver.getSize()", "public long getSize() throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver.getEventListenerFilePath()", "public java.nio.file.Path getEventListenerFilePath()"], ["java.io.InputStream", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver.resolveSourceStream()", "public java.io.InputStream resolveSourceStream() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.LocalFileScpSourceStreamResolver.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.scp.LocalFileScpTargetStreamResolver", "org.apache.sshd.common.scp.LocalFileScpTargetStreamResolver(java.nio.file.Path)", "public org.apache.sshd.common.scp.LocalFileScpTargetStreamResolver(java.nio.file.Path) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.common.scp.LocalFileScpTargetStreamResolver.resolveTargetStream(java.lang.String, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>)", "public java.io.OutputStream resolveTargetStream(java.lang.String, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.scp.LocalFileScpTargetStreamResolver.getEventListenerFilePath()", "public java.nio.file.Path getEventListenerFilePath()"], ["void", "org.apache.sshd.common.scp.LocalFileScpTargetStreamResolver.postProcessReceivedData(java.lang.String, boolean, java.util.Set<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp)", "public void postProcessReceivedData(java.lang.String, boolean, java.util.Set<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.LocalFileScpTargetStreamResolver.toString()", "public java.lang.String toString()"], ["java.io.OutputStream", "org.apache.sshd.common.scp.ScpHelper$1$1.resolveTargetStream(java.lang.String, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>)", "public java.io.OutputStream resolveTargetStream(java.lang.String, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.scp.ScpHelper$1$1.getEventListenerFilePath()", "public java.nio.file.Path getEventListenerFilePath()"], ["void", "org.apache.sshd.common.scp.ScpHelper$1$1.postProcessReceivedData(java.lang.String, boolean, java.util.Set<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp)", "public void postProcessReceivedData(java.lang.String, boolean, java.util.Set<java.nio.file.attribute.PosixFilePermission>, org.apache.sshd.common.scp.ScpTimestamp) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.ScpHelper$1$1.toString()", "public java.lang.String toString()"], ["void", "org.apache.sshd.common.scp.ScpHelper$1.process(java.lang.String, boolean, org.apache.sshd.common.scp.ScpTimestamp)", "public void process(java.lang.String, boolean, org.apache.sshd.common.scp.ScpTimestamp) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper$2.process(java.lang.String, boolean, org.apache.sshd.common.scp.ScpTimestamp)", "public void process(java.lang.String, boolean, org.apache.sshd.common.scp.ScpTimestamp) throws java.io.IOException"], ["org.apache.sshd.common.scp.ScpHelper", "org.apache.sshd.common.scp.ScpHelper(java.io.InputStream, java.io.OutputStream, java.nio.file.FileSystem, org.apache.sshd.common.scp.ScpTransferEventListener)", "public org.apache.sshd.common.scp.ScpHelper(java.io.InputStream, java.io.OutputStream, java.nio.file.FileSystem, org.apache.sshd.common.scp.ScpTransferEventListener)"], ["void", "org.apache.sshd.common.scp.ScpHelper.receiveFileStream(java.io.OutputStream, int)", "public void receiveFileStream(java.io.OutputStream, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.receive(java.nio.file.Path, boolean, boolean, boolean, int)", "public void receive(java.nio.file.Path, boolean, boolean, boolean, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.receiveDir(java.lang.String, java.nio.file.Path, org.apache.sshd.common.scp.ScpTimestamp, boolean, int)", "public void receiveDir(java.lang.String, java.nio.file.Path, org.apache.sshd.common.scp.ScpTimestamp, boolean, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.receiveFile(java.lang.String, java.nio.file.Path, org.apache.sshd.common.scp.ScpTimestamp, boolean, int)", "public void receiveFile(java.lang.String, java.nio.file.Path, org.apache.sshd.common.scp.ScpTimestamp, boolean, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.receiveStream(java.lang.String, org.apache.sshd.common.scp.ScpTargetStreamResolver, org.apache.sshd.common.scp.ScpTimestamp, boolean, int)", "public void receiveStream(java.lang.String, org.apache.sshd.common.scp.ScpTargetStreamResolver, org.apache.sshd.common.scp.ScpTimestamp, boolean, int) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.ScpHelper.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.ScpHelper.readLine(boolean)", "public java.lang.String readLine(boolean) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.send(java.util.Collection<java.lang.String>, boolean, boolean, int)", "public void send(java.util.Collection<java.lang.String>, boolean, boolean, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.sendPaths(java.util.Collection<? extends java.nio.file.Path>, boolean, boolean, int)", "public void sendPaths(java.util.Collection<? extends java.nio.file.Path>, boolean, boolean, int) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.scp.ScpHelper.resolveLocalPath(java.lang.String, java.lang.String)", "public java.nio.file.Path resolveLocalPath(java.lang.String, java.lang.String) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.common.scp.ScpHelper.resolveLocalPath(java.lang.String)", "public java.nio.file.Path resolveLocalPath(java.lang.String) throws java.io.IOException, java.nio.file.InvalidPathException"], ["void", "org.apache.sshd.common.scp.ScpHelper.sendFile(java.nio.file.Path, boolean, int)", "public void sendFile(java.nio.file.Path, boolean, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.sendStream(org.apache.sshd.common.scp.ScpSourceStreamResolver, boolean, int)", "public void sendStream(org.apache.sshd.common.scp.ScpSourceStreamResolver, boolean, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.scp.ScpHelper.sendDir(java.nio.file.Path, boolean, int)", "public void sendDir(java.nio.file.Path, boolean, int) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.ScpHelper.getOctalPermissions(java.nio.file.Path, java.nio.file.LinkOption...)", "public static java.lang.String getOctalPermissions(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.scp.ScpHelper.getOctalPermissions(java.util.Collection<java.nio.file.attribute.PosixFilePermission>)", "public static java.lang.String getOctalPermissions(java.util.Collection<java.nio.file.attribute.PosixFilePermission>)"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.common.scp.ScpHelper.setOctalPermissions(java.nio.file.Path, java.lang.String)", "public static java.util.Set<java.nio.file.attribute.PosixFilePermission> setOctalPermissions(java.nio.file.Path, java.lang.String) throws java.io.IOException"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.common.scp.ScpHelper.parseOctalPermissions(java.lang.String)", "public static java.util.Set<java.nio.file.attribute.PosixFilePermission> parseOctalPermissions(java.lang.String)"], ["void", "org.apache.sshd.common.scp.ScpHelper.ack()", "public void ack() throws java.io.IOException"], ["int", "org.apache.sshd.common.scp.ScpHelper.readAck(boolean)", "public int readAck(boolean) throws java.io.IOException"], ["org.apache.sshd.common.scp.ScpTimestamp", "org.apache.sshd.common.scp.ScpTimestamp(long, long)", "public org.apache.sshd.common.scp.ScpTimestamp(long, long)"], ["long", "org.apache.sshd.common.scp.ScpTimestamp.getLastModifiedTime()", "public long getLastModifiedTime()"], ["long", "org.apache.sshd.common.scp.ScpTimestamp.getLastAccessTime()", "public long getLastAccessTime()"], ["java.lang.String", "org.apache.sshd.common.scp.ScpTimestamp.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.scp.ScpTimestamp", "org.apache.sshd.common.scp.ScpTimestamp.parseTime(java.lang.String)", "public static org.apache.sshd.common.scp.ScpTimestamp parseTime(java.lang.String) throws java.lang.NumberFormatException"], ["void", "org.apache.sshd.common.scp.ScpTransferEventListener$1.startFileEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>)", "public void startFileEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>)"], ["void", "org.apache.sshd.common.scp.ScpTransferEventListener$1.endFileEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>, java.lang.Throwable)", "public void endFileEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, long, java.util.Set<java.nio.file.attribute.PosixFilePermission>, java.lang.Throwable)"], ["void", "org.apache.sshd.common.scp.ScpTransferEventListener$1.startFolderEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, java.util.Set<java.nio.file.attribute.PosixFilePermission>)", "public void startFolderEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, java.util.Set<java.nio.file.attribute.PosixFilePermission>)"], ["void", "org.apache.sshd.common.scp.ScpTransferEventListener$1.endFolderEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, java.util.Set<java.nio.file.attribute.PosixFilePermission>, java.lang.Throwable)", "public void endFolderEvent(org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation, java.nio.file.Path, java.util.Set<java.nio.file.attribute.PosixFilePermission>, java.lang.Throwable)"], ["org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation[]", "org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation.values()", "public static org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation[] values()"], ["org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation", "org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation.valueOf(java.lang.String)", "public static org.apache.sshd.common.scp.ScpTransferEventListener$FileOperation valueOf(java.lang.String)"], ["org.apache.sshd.common.Service", "org.apache.sshd.common.ServiceFactory$Utils.create(java.util.Collection<? extends org.apache.sshd.common.ServiceFactory>, java.lang.String, org.apache.sshd.common.session.Session)", "public static org.apache.sshd.common.Service create(java.util.Collection<? extends org.apache.sshd.common.ServiceFactory>, java.lang.String, org.apache.sshd.common.session.Session) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService$1.operationComplete(org.apache.sshd.client.future.OpenFuture)", "public void operationComplete(org.apache.sshd.client.future.OpenFuture)"], ["void", "org.apache.sshd.common.session.AbstractConnectionService$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["java.util.Collection<org.apache.sshd.common.channel.Channel>", "org.apache.sshd.common.session.AbstractConnectionService.getChannels()", "public java.util.Collection<org.apache.sshd.common.channel.Channel> getChannels()"], ["org.apache.sshd.common.session.AbstractSession", "org.apache.sshd.common.session.AbstractConnectionService.getSession()", "public org.apache.sshd.common.session.AbstractSession getSession()"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.start()", "public void start()"], ["org.apache.sshd.common.forward.TcpipForwarder", "org.apache.sshd.common.session.AbstractConnectionService.getTcpipForwarder()", "public org.apache.sshd.common.forward.TcpipForwarder getTcpipForwarder()"], ["int", "org.apache.sshd.common.session.AbstractConnectionService.registerChannel(org.apache.sshd.common.channel.Channel)", "public int registerChannel(org.apache.sshd.common.channel.Channel) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.unregisterChannel(org.apache.sshd.common.channel.Channel)", "public void unregisterChannel(org.apache.sshd.common.channel.Channel)"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.process(int, org.apache.sshd.common.util.buffer.Buffer)", "public void process(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.setAllowMoreSessions(boolean)", "public void setAllowMoreSessions(boolean)"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelOpenConfirmation(org.apache.sshd.common.util.buffer.Buffer)", "public void channelOpenConfirmation(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelOpenFailure(org.apache.sshd.common.util.buffer.Buffer)", "public void channelOpenFailure(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelData(org.apache.sshd.common.util.buffer.Buffer)", "public void channelData(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelExtendedData(org.apache.sshd.common.util.buffer.Buffer)", "public void channelExtendedData(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)", "public void channelWindowAdjust(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelEof(org.apache.sshd.common.util.buffer.Buffer)", "public void channelEof(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelClose(org.apache.sshd.common.util.buffer.Buffer)", "public void channelClose(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelRequest(org.apache.sshd.common.util.buffer.Buffer)", "public void channelRequest(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractConnectionService.channelFailure(org.apache.sshd.common.util.buffer.Buffer)", "public void channelFailure(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.session.AbstractConnectionService.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.session.Session", "org.apache.sshd.common.session.AbstractConnectionService.getSession()", "public org.apache.sshd.common.session.Session getSession()"], ["void", "org.apache.sshd.common.session.AbstractSession$1.run()", "public void run()"], ["void", "org.apache.sshd.common.session.AbstractSession$2.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.common.session.AbstractSession$2.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["void", "org.apache.sshd.common.session.AbstractSession$3.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.common.session.AbstractSession$3.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.session.AbstractSession", "org.apache.sshd.common.session.AbstractSession(boolean, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoSession)", "public org.apache.sshd.common.session.AbstractSession(boolean, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoSession)"], ["org.apache.sshd.common.session.AbstractSession", "org.apache.sshd.common.session.AbstractSession.getSession(org.apache.sshd.common.io.IoSession)", "public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession)"], ["org.apache.sshd.common.session.AbstractSession", "org.apache.sshd.common.session.AbstractSession.getSession(org.apache.sshd.common.io.IoSession, boolean)", "public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession, boolean)"], ["void", "org.apache.sshd.common.session.AbstractSession.attachSession(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.session.AbstractSession)", "public static void attachSession(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.session.AbstractSession)"], ["java.lang.String", "org.apache.sshd.common.session.AbstractSession.getServerVersion()", "public java.lang.String getServerVersion()"], ["java.lang.String", "org.apache.sshd.common.session.AbstractSession.getClientVersion()", "public java.lang.String getClientVersion()"], ["org.apache.sshd.common.kex.KeyExchange", "org.apache.sshd.common.session.AbstractSession.getKex()", "public org.apache.sshd.common.kex.KeyExchange getKex()"], ["byte[]", "org.apache.sshd.common.session.AbstractSession.getSessionId()", "public byte[] getSessionId()"], ["org.apache.sshd.common.io.IoSession", "org.apache.sshd.common.session.AbstractSession.getIoSession()", "public org.apache.sshd.common.io.IoSession getIoSession()"], ["org.apache.sshd.common.FactoryManager", "org.apache.sshd.common.session.AbstractSession.getFactoryManager()", "public org.apache.sshd.common.FactoryManager getFactoryManager()"], ["java.lang.String", "org.apache.sshd.common.session.AbstractSession.getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)", "public java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)"], ["boolean", "org.apache.sshd.common.session.AbstractSession.isAuthenticated()", "public boolean isAuthenticated()"], ["void", "org.apache.sshd.common.session.AbstractSession.setAuthenticated()", "public void setAuthenticated() throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractSession.messageReceived(org.apache.sshd.common.util.Readable)", "public void messageReceived(org.apache.sshd.common.util.Readable) throws java.lang.Exception"], ["void", "org.apache.sshd.common.session.AbstractSession.exceptionCaught(java.lang.Throwable)", "public void exceptionCaught(java.lang.Throwable)"], ["<T extends org.apache.sshd.common.Service> T", "org.apache.sshd.common.session.AbstractSession.getService(java.lang.Class<T>)", "public <T extends org.apache.sshd.common.Service> T getService(java.lang.Class<T>)"], ["org.apache.sshd.common.io.IoWriteFuture", "org.apache.sshd.common.session.AbstractSession.writePacket(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["org.apache.sshd.common.io.IoWriteFuture", "org.apache.sshd.common.session.AbstractSession.writePacket(org.apache.sshd.common.util.buffer.Buffer, long, java.util.concurrent.TimeUnit)", "public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer, long, java.util.concurrent.TimeUnit) throws java.io.IOException"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.common.session.AbstractSession.request(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.common.session.AbstractSession.createBuffer(byte)", "public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.common.session.AbstractSession.createBuffer(byte, int)", "public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte, int)"], ["void", "org.apache.sshd.common.session.AbstractSession.disconnect(int, java.lang.String)", "public void disconnect(int, java.lang.String) throws java.io.IOException"], ["int", "org.apache.sshd.common.session.AbstractSession.getIntProperty(java.lang.String, int)", "public int getIntProperty(java.lang.String, int)"], ["long", "org.apache.sshd.common.session.AbstractSession.getLongProperty(java.lang.String, long)", "public long getLongProperty(java.lang.String, long)"], ["<T> T", "org.apache.sshd.common.session.AbstractSession.getAttribute(org.apache.sshd.common.session.Session$AttributeKey<T>)", "public <T> T getAttribute(org.apache.sshd.common.session.Session$AttributeKey<T>)"], ["<T, E extends T> T", "org.apache.sshd.common.session.AbstractSession.setAttribute(org.apache.sshd.common.session.Session$AttributeKey<T>, E)", "public <T, E extends T> T setAttribute(org.apache.sshd.common.session.Session$AttributeKey<T>, E)"], ["java.lang.String", "org.apache.sshd.common.session.AbstractSession.getUsername()", "public java.lang.String getUsername()"], ["void", "org.apache.sshd.common.session.AbstractSession.setUsername(java.lang.String)", "public void setUsername(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.session.AbstractSession.getLock()", "public java.lang.Object getLock()"], ["void", "org.apache.sshd.common.session.AbstractSession.addListener(org.apache.sshd.common.session.SessionListener)", "public void addListener(org.apache.sshd.common.session.SessionListener)"], ["void", "org.apache.sshd.common.session.AbstractSession.removeListener(org.apache.sshd.common.session.SessionListener)", "public void removeListener(org.apache.sshd.common.session.SessionListener)"], ["org.apache.sshd.common.future.SshFuture", "org.apache.sshd.common.session.AbstractSession.reExchangeKeys()", "public org.apache.sshd.common.future.SshFuture reExchangeKeys() throws java.io.IOException"], ["void", "org.apache.sshd.common.session.AbstractSession.resetIdleTimeout()", "public void resetIdleTimeout()"], ["org.apache.sshd.common.session.Session$TimeoutStatus", "org.apache.sshd.common.session.AbstractSession.getTimeoutStatus()", "public org.apache.sshd.common.session.Session$TimeoutStatus getTimeoutStatus()"], ["long", "org.apache.sshd.common.session.AbstractSession.getAuthTimeout()", "public long getAuthTimeout()"], ["long", "org.apache.sshd.common.session.AbstractSession.getIdleTimeout()", "public long getIdleTimeout()"], ["java.lang.String", "org.apache.sshd.common.session.AbstractSession.toString()", "public java.lang.String toString()"], ["void", "org.apache.sshd.common.session.AbstractSessionFactory.addListener(org.apache.sshd.common.session.SessionListener)", "public void addListener(org.apache.sshd.common.session.SessionListener)"], ["void", "org.apache.sshd.common.session.AbstractSessionFactory.removeListener(org.apache.sshd.common.session.SessionListener)", "public void removeListener(org.apache.sshd.common.session.SessionListener)"], ["org.apache.sshd.common.session.AbstractSessionIoHandler", "org.apache.sshd.common.session.AbstractSessionIoHandler()", "public org.apache.sshd.common.session.AbstractSessionIoHandler()"], ["void", "org.apache.sshd.common.session.AbstractSessionIoHandler.sessionCreated(org.apache.sshd.common.io.IoSession)", "public void sessionCreated(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.session.AbstractSessionIoHandler.sessionClosed(org.apache.sshd.common.io.IoSession)", "public void sessionClosed(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.common.session.AbstractSessionIoHandler.exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable)", "public void exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable) throws java.lang.Exception"], ["void", "org.apache.sshd.common.session.AbstractSessionIoHandler.messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable)", "public void messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable) throws java.lang.Exception"], ["org.apache.sshd.common.session.PendingWriteFuture", "org.apache.sshd.common.session.PendingWriteFuture(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.session.PendingWriteFuture(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.common.util.buffer.Buffer", "org.apache.sshd.common.session.PendingWriteFuture.getBuffer()", "public org.apache.sshd.common.util.buffer.Buffer getBuffer()"], ["void", "org.apache.sshd.common.session.PendingWriteFuture.setWritten()", "public void setWritten()"], ["void", "org.apache.sshd.common.session.PendingWriteFuture.setException(java.lang.Throwable)", "public void setException(java.lang.Throwable)"], ["void", "org.apache.sshd.common.session.PendingWriteFuture.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.common.session.PendingWriteFuture.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.session.Session$AttributeKey", "org.apache.sshd.common.session.Session$AttributeKey()", "public org.apache.sshd.common.session.Session$AttributeKey()"], ["org.apache.sshd.common.session.Session$TimeoutStatus[]", "org.apache.sshd.common.session.Session$TimeoutStatus.values()", "public static org.apache.sshd.common.session.Session$TimeoutStatus[] values()"], ["org.apache.sshd.common.session.Session$TimeoutStatus", "org.apache.sshd.common.session.Session$TimeoutStatus.valueOf(java.lang.String)", "public static org.apache.sshd.common.session.Session$TimeoutStatus valueOf(java.lang.String)"], ["org.apache.sshd.common.session.SessionListener$Event[]", "org.apache.sshd.common.session.SessionListener$Event.values()", "public static org.apache.sshd.common.session.SessionListener$Event[] values()"], ["org.apache.sshd.common.session.SessionListener$Event", "org.apache.sshd.common.session.SessionListener$Event.valueOf(java.lang.String)", "public static org.apache.sshd.common.session.SessionListener$Event valueOf(java.lang.String)"], ["org.apache.sshd.common.session.SessionTimeoutListener", "org.apache.sshd.common.session.SessionTimeoutListener()", "public org.apache.sshd.common.session.SessionTimeoutListener()"], ["void", "org.apache.sshd.common.session.SessionTimeoutListener.sessionCreated(org.apache.sshd.common.session.Session)", "public void sessionCreated(org.apache.sshd.common.session.Session)"], ["void", "org.apache.sshd.common.session.SessionTimeoutListener.sessionEvent(org.apache.sshd.common.session.Session, org.apache.sshd.common.session.SessionListener$Event)", "public void sessionEvent(org.apache.sshd.common.session.Session, org.apache.sshd.common.session.SessionListener$Event)"], ["void", "org.apache.sshd.common.session.SessionTimeoutListener.sessionClosed(org.apache.sshd.common.session.Session)", "public void sessionClosed(org.apache.sshd.common.session.Session)"], ["void", "org.apache.sshd.common.session.SessionTimeoutListener.run()", "public void run()"], ["java.lang.String", "org.apache.sshd.common.signature.AbstractSignature.getAlgorithm()", "public final java.lang.String getAlgorithm()"], ["void", "org.apache.sshd.common.signature.AbstractSignature.initVerifier(java.security.PublicKey)", "public void initVerifier(java.security.PublicKey) throws java.lang.Exception"], ["void", "org.apache.sshd.common.signature.AbstractSignature.initSigner(java.security.PrivateKey)", "public void initSigner(java.security.PrivateKey) throws java.lang.Exception"], ["void", "org.apache.sshd.common.signature.AbstractSignature.update(byte[])", "public void update(byte[]) throws java.lang.Exception"], ["void", "org.apache.sshd.common.signature.AbstractSignature.update(byte[], int, int)", "public void update(byte[], int, int) throws java.lang.Exception"], ["java.lang.String", "org.apache.sshd.common.signature.AbstractSignature.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.signature.Signature", "org.apache.sshd.common.signature.BuiltinSignatures$1.create()", "public org.apache.sshd.common.signature.Signature create()"], ["java.lang.Object", "org.apache.sshd.common.signature.BuiltinSignatures$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.signature.Signature", "org.apache.sshd.common.signature.BuiltinSignatures$2.create()", "public org.apache.sshd.common.signature.Signature create()"], ["java.lang.Object", "org.apache.sshd.common.signature.BuiltinSignatures$2.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.signature.Signature", "org.apache.sshd.common.signature.BuiltinSignatures$3.create()", "public org.apache.sshd.common.signature.Signature create()"], ["boolean", "org.apache.sshd.common.signature.BuiltinSignatures$3.isSupported()", "public boolean isSupported()"], ["java.lang.Object", "org.apache.sshd.common.signature.BuiltinSignatures$3.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.signature.Signature", "org.apache.sshd.common.signature.BuiltinSignatures$4.create()", "public org.apache.sshd.common.signature.Signature create()"], ["boolean", "org.apache.sshd.common.signature.BuiltinSignatures$4.isSupported()", "public boolean isSupported()"], ["java.lang.Object", "org.apache.sshd.common.signature.BuiltinSignatures$4.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.signature.Signature", "org.apache.sshd.common.signature.BuiltinSignatures$5.create()", "public org.apache.sshd.common.signature.Signature create()"], ["boolean", "org.apache.sshd.common.signature.BuiltinSignatures$5.isSupported()", "public boolean isSupported()"], ["java.lang.Object", "org.apache.sshd.common.signature.BuiltinSignatures$5.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.signature.BuiltinSignatures$ParseResult", "org.apache.sshd.common.signature.BuiltinSignatures$ParseResult(java.util.List<org.apache.sshd.common.signature.SignatureFactory>, java.util.List<java.lang.String>)", "public org.apache.sshd.common.signature.BuiltinSignatures$ParseResult(java.util.List<org.apache.sshd.common.signature.SignatureFactory>, java.util.List<java.lang.String>)"], ["org.apache.sshd.common.signature.BuiltinSignatures[]", "org.apache.sshd.common.signature.BuiltinSignatures.values()", "public static org.apache.sshd.common.signature.BuiltinSignatures[] values()"], ["org.apache.sshd.common.signature.BuiltinSignatures", "org.apache.sshd.common.signature.BuiltinSignatures.valueOf(java.lang.String)", "public static org.apache.sshd.common.signature.BuiltinSignatures valueOf(java.lang.String)"], ["org.apache.sshd.common.signature.Signature", "org.apache.sshd.common.signature.BuiltinSignatures.getByCurveSize(java.security.spec.ECParameterSpec)", "public static org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)"], ["java.lang.String", "org.apache.sshd.common.signature.BuiltinSignatures.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.common.signature.BuiltinSignatures.toString()", "public final java.lang.String toString()"], ["boolean", "org.apache.sshd.common.signature.BuiltinSignatures.isSupported()", "public boolean isSupported()"], ["void", "org.apache.sshd.common.signature.BuiltinSignatures.registerExtension(org.apache.sshd.common.signature.SignatureFactory)", "public static void registerExtension(org.apache.sshd.common.signature.SignatureFactory)"], ["java.util.SortedSet<org.apache.sshd.common.signature.SignatureFactory>", "org.apache.sshd.common.signature.BuiltinSignatures.getRegisteredExtensions()", "public static java.util.SortedSet<org.apache.sshd.common.signature.SignatureFactory> getRegisteredExtensions()"], ["org.apache.sshd.common.signature.SignatureFactory", "org.apache.sshd.common.signature.BuiltinSignatures.unregisterExtension(java.lang.String)", "public static org.apache.sshd.common.signature.SignatureFactory unregisterExtension(java.lang.String)"], ["org.apache.sshd.common.signature.BuiltinSignatures", "org.apache.sshd.common.signature.BuiltinSignatures.fromString(java.lang.String)", "public static org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)"], ["org.apache.sshd.common.signature.BuiltinSignatures", "org.apache.sshd.common.signature.BuiltinSignatures.fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.digest.Digest>)", "public static org.apache.sshd.common.signature.BuiltinSignatures fromFactory(org.apache.sshd.common.NamedFactory<org.apache.sshd.common.digest.Digest>)"], ["org.apache.sshd.common.signature.BuiltinSignatures", "org.apache.sshd.common.signature.BuiltinSignatures.fromFactoryName(java.lang.String)", "public static org.apache.sshd.common.signature.BuiltinSignatures fromFactoryName(java.lang.String)"], ["org.apache.sshd.common.signature.BuiltinSignatures$ParseResult", "org.apache.sshd.common.signature.BuiltinSignatures.parseSignatureList(java.lang.String)", "public static org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String)"], ["org.apache.sshd.common.signature.BuiltinSignatures$ParseResult", "org.apache.sshd.common.signature.BuiltinSignatures.parseSignatureList(java.lang.String...)", "public static org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String...)"], ["org.apache.sshd.common.signature.BuiltinSignatures$ParseResult", "org.apache.sshd.common.signature.BuiltinSignatures.parseSignatureList(java.util.Collection<java.lang.String>)", "public static org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection<java.lang.String>)"], ["org.apache.sshd.common.signature.SignatureFactory", "org.apache.sshd.common.signature.BuiltinSignatures.resolveFactory(java.lang.String)", "public static org.apache.sshd.common.signature.SignatureFactory resolveFactory(java.lang.String)"], ["byte[]", "org.apache.sshd.common.signature.SignatureDSA.sign()", "public byte[] sign() throws java.lang.Exception"], ["void", "org.apache.sshd.common.signature.SignatureDSA.putBigInteger(java.math.BigInteger, byte[], int)", "public static void putBigInteger(java.math.BigInteger, byte[], int)"], ["boolean", "org.apache.sshd.common.signature.SignatureDSA.verify(byte[])", "public boolean verify(byte[]) throws java.lang.Exception"], ["byte[]", "org.apache.sshd.common.signature.SignatureECDSA.sign()", "public byte[] sign() throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.signature.SignatureECDSA.verify(byte[])", "public boolean verify(byte[]) throws java.lang.Exception"], ["org.apache.sshd.common.signature.SignatureRSA", "org.apache.sshd.common.signature.SignatureRSA()", "public org.apache.sshd.common.signature.SignatureRSA()"], ["byte[]", "org.apache.sshd.common.signature.SignatureRSA.sign()", "public byte[] sign() throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.signature.SignatureRSA.verify(byte[])", "public boolean verify(byte[]) throws java.lang.Exception"], ["org.apache.sshd.common.SshdSocketAddress", "org.apache.sshd.common.SshdSocketAddress(java.lang.String, int)", "public org.apache.sshd.common.SshdSocketAddress(java.lang.String, int)"], ["java.lang.String", "org.apache.sshd.common.SshdSocketAddress.getHostName()", "public java.lang.String getHostName()"], ["int", "org.apache.sshd.common.SshdSocketAddress.getPort()", "public int getPort()"], ["java.net.InetSocketAddress", "org.apache.sshd.common.SshdSocketAddress.toInetSocketAddress()", "public java.net.InetSocketAddress toInetSocketAddress()"], ["java.lang.String", "org.apache.sshd.common.SshdSocketAddress.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.sshd.common.SshdSocketAddress.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.sshd.common.SshdSocketAddress.hashCode()", "public int hashCode()"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException()", "public org.apache.sshd.common.SshException()"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException(java.lang.String)", "public org.apache.sshd.common.SshException(java.lang.String)"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException(java.lang.String, java.lang.Throwable)", "public org.apache.sshd.common.SshException(java.lang.String, java.lang.Throwable)"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException(java.lang.Throwable)", "public org.apache.sshd.common.SshException(java.lang.Throwable)"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException(int)", "public org.apache.sshd.common.SshException(int)"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException(int, java.lang.String)", "public org.apache.sshd.common.SshException(int, java.lang.String)"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException(int, java.lang.Throwable)", "public org.apache.sshd.common.SshException(int, java.lang.Throwable)"], ["org.apache.sshd.common.SshException", "org.apache.sshd.common.SshException(int, java.lang.String, java.lang.Throwable)", "public org.apache.sshd.common.SshException(int, java.lang.String, java.lang.Throwable)"], ["int", "org.apache.sshd.common.SshException.getDisconnectCode()", "public int getDisconnectCode()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.AbstractParser.getName()", "public final java.lang.String getName()"], ["T", "org.apache.sshd.common.subsystem.sftp.extensions.AbstractParser.transform(byte[])", "public T transform(byte[])"], ["T", "org.apache.sshd.common.subsystem.sftp.extensions.AbstractParser.parse(byte[])", "public T parse(byte[])"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.AbstractParser.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline", "org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline()", "public org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser", "org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline", "org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser.parse(byte[], int, int)", "public org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline", "org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser.parse(java.lang.String)", "public org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser$Newline parse(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.NewlineParser.parse(byte[], int, int)", "public java.lang.Object parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension(java.lang.String)", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension(java.lang.String)"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension(java.lang.String, java.lang.String)", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.getVersion()", "public java.lang.String getVersion()"], ["void", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.setVersion(java.lang.String)", "public void setVersion(java.lang.String)"], ["int", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.hashCode()", "public int hashCode()"], ["boolean", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.clone()", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension clone()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser.parse(byte[], int, int)", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser.parse(java.lang.String)", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser$OpenSSHExtension parse(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.AbstractOpenSSHExtensionParser.parse(byte[], int, int)", "public java.lang.Object parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.FstatVfsExtensionParser", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.FstatVfsExtensionParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.FstatVfsExtensionParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.FsyncExtensionParser", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.FsyncExtensionParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.FsyncExtensionParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.HardLinkExtensionParser", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.HardLinkExtensionParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.HardLinkExtensionParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.PosixRenameExtensionParser", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.PosixRenameExtensionParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.PosixRenameExtensionParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.openssh.StatVfsExtensionParser", "org.apache.sshd.common.subsystem.sftp.extensions.openssh.StatVfsExtensionParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.openssh.StatVfsExtensionParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?>", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.registerParser(org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?>)", "public static org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?> registerParser(org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?>)"], ["org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?>", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.unregisterParser(java.lang.String)", "public static org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?> unregisterParser(java.lang.String)"], ["org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?>", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.getRegisteredParser(java.lang.String)", "public static org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?> getRegisteredParser(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.getRegisteredParsersNames()", "public static java.util.Set<java.lang.String> getRegisteredParsersNames()"], ["java.util.List<org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?>>", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.getRegisteredParsers()", "public static java.util.List<org.apache.sshd.common.subsystem.sftp.extensions.ExtensionParser<?>> getRegisteredParsers()"], ["java.util.Set<java.lang.String>", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.supportedExtensions(java.util.Map<java.lang.String, ?>)", "public static java.util.Set<java.lang.String> supportedExtensions(java.util.Map<java.lang.String, ?>)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.parse(java.util.Map<java.lang.String, byte[]>)", "public static java.util.Map<java.lang.String, java.lang.Object> parse(java.util.Map<java.lang.String, byte[]>)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.ParserUtils.parse(java.lang.String, byte...)", "public static java.lang.Object parse(java.lang.String, byte...)"], ["org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo()", "public org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo()"], ["org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo(java.nio.file.FileStore)", "public org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo(java.nio.file.FileStore) throws java.io.IOException"], ["int", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.hashCode()", "public int hashCode()"], ["boolean", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.clone()", "public org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo clone()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.decode(org.apache.sshd.common.util.buffer.Buffer)", "public static org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo decode(org.apache.sshd.common.util.buffer.Buffer)"], ["void", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.decode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo)", "public static void decode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo)"], ["void", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.encode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo)", "public static void encode(org.apache.sshd.common.util.buffer.Buffer, org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.SpaceAvailableExtensionInfo.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2", "org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2()", "public org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser", "org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser()", "public org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2", "org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser.parse(byte[], int, int)", "public org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2 parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2", "org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser.parse(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser$Supported2 parse(org.apache.sshd.common.util.buffer.Buffer)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.Supported2Parser.parse(byte[], int, int)", "public java.lang.Object parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported", "org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported()", "public org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser", "org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported", "org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser.parse(byte[], int, int)", "public org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported", "org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser.parse(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser$Supported parse(org.apache.sshd.common.util.buffer.Buffer)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.SupportedParser.parse(byte[], int, int)", "public java.lang.Object parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId", "org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId()", "public org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser", "org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId", "org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser.parse(byte[], int, int)", "public org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId", "org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser.parse(org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser$VendorId parse(org.apache.sshd.common.util.buffer.Buffer)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.VendorIdParser.parse(byte[], int, int)", "public java.lang.Object parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions", "org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions()", "public org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions()"], ["java.lang.String", "org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser", "org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser()", "public org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser()"], ["org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions", "org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser.parse(byte[], int, int)", "public org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions parse(byte[], int, int)"], ["org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions", "org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser.parse(java.lang.String)", "public org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser$Versions parse(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.subsystem.sftp.extensions.VersionsParser.parse(byte[], int, int)", "public java.lang.Object parse(byte[], int, int)"], ["org.apache.sshd.common.util.Base64", "org.apache.sshd.common.util.Base64()", "public org.apache.sshd.common.util.Base64()"], ["boolean", "org.apache.sshd.common.util.Base64.isArrayByteBase64(byte[])", "public static boolean isArrayByteBase64(byte[])"], ["java.lang.String", "org.apache.sshd.common.util.Base64.encodeToString(byte...)", "public static java.lang.String encodeToString(byte...)"], ["byte[]", "org.apache.sshd.common.util.Base64.encodeBase64(byte[])", "public static byte[] encodeBase64(byte[])"], ["byte[]", "org.apache.sshd.common.util.Base64.encodeBase64Chunked(byte[])", "public static byte[] encodeBase64Chunked(byte[])"], ["java.lang.Object", "org.apache.sshd.common.util.Base64.decode(java.lang.Object)", "public java.lang.Object decode(java.lang.Object)"], ["byte[]", "org.apache.sshd.common.util.Base64.decode(byte[])", "public byte[] decode(byte[])"], ["byte[]", "org.apache.sshd.common.util.Base64.encodeBase64(byte[], boolean)", "public static byte[] encodeBase64(byte[], boolean)"], ["byte[]", "org.apache.sshd.common.util.Base64.decodeString(java.lang.String)", "public static byte[] decodeString(java.lang.String)"], ["byte[]", "org.apache.sshd.common.util.Base64.decodeBase64(byte[])", "public static byte[] decodeBase64(byte[])"], ["byte[]", "org.apache.sshd.common.util.Base64.discardNonBase64(byte[])", "public static byte[] discardNonBase64(byte[])"], ["java.lang.Object", "org.apache.sshd.common.util.Base64.encode(java.lang.Object)", "public java.lang.Object encode(java.lang.Object)"], ["byte[]", "org.apache.sshd.common.util.Base64.encode(byte[])", "public byte[] encode(byte[])"], ["byte[]", "org.apache.sshd.common.util.buffer.Buffer.getCompactData()", "public byte[] getCompactData()"], ["java.lang.String", "org.apache.sshd.common.util.buffer.Buffer.printHex()", "public java.lang.String printHex()"], ["int", "org.apache.sshd.common.util.buffer.Buffer.getUByte()", "public int getUByte()"], ["byte", "org.apache.sshd.common.util.buffer.Buffer.getByte()", "public byte getByte()"], ["short", "org.apache.sshd.common.util.buffer.Buffer.getShort()", "public short getShort()"], ["int", "org.apache.sshd.common.util.buffer.Buffer.getInt()", "public int getInt()"], ["long", "org.apache.sshd.common.util.buffer.Buffer.getUInt()", "public long getUInt()"], ["long", "org.apache.sshd.common.util.buffer.Buffer.getLong()", "public long getLong()"], ["boolean", "org.apache.sshd.common.util.buffer.Buffer.getBoolean()", "public boolean getBoolean()"], ["java.lang.String", "org.apache.sshd.common.util.buffer.Buffer.getString()", "public java.lang.String getString()"], ["java.util.Collection<java.lang.String>", "org.apache.sshd.common.util.buffer.Buffer.getStringList(boolean)", "public java.util.Collection<java.lang.String> getStringList(boolean)"], ["java.util.Collection<java.lang.String>", "org.apache.sshd.common.util.buffer.Buffer.getStringList(boolean, java.nio.charset.Charset)", "public java.util.Collection<java.lang.String> getStringList(boolean, java.nio.charset.Charset)"], ["java.util.Collection<java.lang.String>", "org.apache.sshd.common.util.buffer.Buffer.getAvailableStrings()", "public java.util.Collection<java.lang.String> getAvailableStrings()"], ["java.util.Collection<java.lang.String>", "org.apache.sshd.common.util.buffer.Buffer.getAvailableStrings(java.nio.charset.Charset)", "public java.util.Collection<java.lang.String> getAvailableStrings(java.nio.charset.Charset)"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.util.buffer.Buffer.getStringList(int)", "public java.util.List<java.lang.String> getStringList(int)"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.util.buffer.Buffer.getStringList(int, java.nio.charset.Charset)", "public java.util.List<java.lang.String> getStringList(int, java.nio.charset.Charset)"], ["java.math.BigInteger", "org.apache.sshd.common.util.buffer.Buffer.getMPInt()", "public java.math.BigInteger getMPInt()"], ["byte[]", "org.apache.sshd.common.util.buffer.Buffer.getMPIntAsBytes()", "public byte[] getMPIntAsBytes()"], ["byte[]", "org.apache.sshd.common.util.buffer.Buffer.getBytes()", "public byte[] getBytes()"], ["void", "org.apache.sshd.common.util.buffer.Buffer.getRawBytes(byte[])", "public void getRawBytes(byte[])"], ["java.security.PublicKey", "org.apache.sshd.common.util.buffer.Buffer.getPublicKey()", "public java.security.PublicKey getPublicKey() throws org.apache.sshd.common.SshException"], ["java.security.PublicKey", "org.apache.sshd.common.util.buffer.Buffer.getRawPublicKey()", "public java.security.PublicKey getRawPublicKey() throws org.apache.sshd.common.SshException"], ["java.security.KeyPair", "org.apache.sshd.common.util.buffer.Buffer.getKeyPair()", "public java.security.KeyPair getKeyPair() throws org.apache.sshd.common.SshException"], ["void", "org.apache.sshd.common.util.buffer.Buffer.ensureAvailable(int)", "public void ensureAvailable(int) throws org.apache.sshd.common.util.buffer.BufferException"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putByte(byte)", "public void putByte(byte)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putBuffer(org.apache.sshd.common.util.Readable)", "public void putBuffer(org.apache.sshd.common.util.Readable)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putShort(int)", "public void putShort(int)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putInt(long)", "public void putInt(long)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putLong(long)", "public void putLong(long)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putBoolean(boolean)", "public void putBoolean(boolean)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putBytes(byte[])", "public void putBytes(byte[])"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putBytes(byte[], int, int)", "public void putBytes(byte[], int, int)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putStringList(java.util.Collection<?>, boolean)", "public void putStringList(java.util.Collection<?>, boolean)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putStringList(java.util.Collection<?>, java.nio.charset.Charset, boolean)", "public void putStringList(java.util.Collection<?>, java.nio.charset.Charset, boolean)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putString(java.lang.String)", "public void putString(java.lang.String)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putString(java.lang.String, java.nio.charset.Charset)", "public void putString(java.lang.String, java.nio.charset.Charset)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putMPInt(java.math.BigInteger)", "public void putMPInt(java.math.BigInteger)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putMPInt(byte[])", "public void putMPInt(byte[])"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putRawBytes(byte[])", "public void putRawBytes(byte[])"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putPublicKey(java.security.PublicKey)", "public void putPublicKey(java.security.PublicKey)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putRawPublicKey(java.security.PublicKey)", "public void putRawPublicKey(java.security.PublicKey)"], ["void", "org.apache.sshd.common.util.buffer.Buffer.putKeyPair(java.security.KeyPair)", "public void putKeyPair(java.security.KeyPair)"], ["java.lang.String", "org.apache.sshd.common.util.buffer.Buffer.toString()", "public java.lang.String toString()"], ["org.apache.sshd.common.util.buffer.BufferException", "org.apache.sshd.common.util.buffer.BufferException(java.lang.String)", "public org.apache.sshd.common.util.buffer.BufferException(java.lang.String)"], ["int", "org.apache.sshd.common.util.buffer.BufferUtils$1.apply(int)", "public int apply(int)"], ["java.lang.String", "org.apache.sshd.common.util.buffer.BufferUtils.printHex(byte...)", "public static java.lang.String printHex(byte...)"], ["java.lang.String", "org.apache.sshd.common.util.buffer.BufferUtils.printHex(char, byte...)", "public static java.lang.String printHex(char, byte...)"], ["java.lang.String", "org.apache.sshd.common.util.buffer.BufferUtils.printHex(byte[], int, int)", "public static java.lang.String printHex(byte[], int, int)"], ["java.lang.String", "org.apache.sshd.common.util.buffer.BufferUtils.printHex(byte[], int, int, char)", "public static java.lang.String printHex(byte[], int, int, char)"], ["int", "org.apache.sshd.common.util.buffer.BufferUtils.readInt(java.io.InputStream, byte[])", "public static int readInt(java.io.InputStream, byte[]) throws java.io.IOException"], ["int", "org.apache.sshd.common.util.buffer.BufferUtils.readInt(java.io.InputStream, byte[], int, int)", "public static int readInt(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["long", "org.apache.sshd.common.util.buffer.BufferUtils.readUInt(java.io.InputStream, byte[])", "public static long readUInt(java.io.InputStream, byte[]) throws java.io.IOException"], ["long", "org.apache.sshd.common.util.buffer.BufferUtils.readUInt(java.io.InputStream, byte[], int, int)", "public static long readUInt(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["long", "org.apache.sshd.common.util.buffer.BufferUtils.getUInt(byte...)", "public static long getUInt(byte...)"], ["long", "org.apache.sshd.common.util.buffer.BufferUtils.getUInt(byte[], int, int)", "public static long getUInt(byte[], int, int)"], ["void", "org.apache.sshd.common.util.buffer.BufferUtils.writeInt(java.io.OutputStream, int, byte[])", "public static void writeInt(java.io.OutputStream, int, byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.buffer.BufferUtils.writeInt(java.io.OutputStream, int, byte[], int, int)", "public static void writeInt(java.io.OutputStream, int, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.buffer.BufferUtils.writeUInt(java.io.OutputStream, long, byte[])", "public static void writeUInt(java.io.OutputStream, long, byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.buffer.BufferUtils.writeUInt(java.io.OutputStream, long, byte[], int, int)", "public static void writeUInt(java.io.OutputStream, long, byte[], int, int) throws java.io.IOException"], ["int", "org.apache.sshd.common.util.buffer.BufferUtils.putUInt(long, byte[])", "public static int putUInt(long, byte[])"], ["int", "org.apache.sshd.common.util.buffer.BufferUtils.putUInt(long, byte[], int, int)", "public static int putUInt(long, byte[], int, int)"], ["boolean", "org.apache.sshd.common.util.buffer.BufferUtils.equals(byte[], byte[])", "public static boolean equals(byte[], byte[])"], ["boolean", "org.apache.sshd.common.util.buffer.BufferUtils.equals(byte[], int, byte[], int, int)", "public static boolean equals(byte[], int, byte[], int, int)"], ["int", "org.apache.sshd.common.util.buffer.BufferUtils.getNextPowerOf2(int)", "public static int getNextPowerOf2(int)"], ["int", "org.apache.sshd.common.util.buffer.BufferUtils.updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer, int)", "public static int updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer, int)"], ["void", "org.apache.sshd.common.util.buffer.BufferUtils.updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer, int, int)", "public static void updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer, int, int)"], ["<B extends org.apache.sshd.common.util.buffer.Buffer> B", "org.apache.sshd.common.util.buffer.BufferUtils.clear(B)", "public static <B extends org.apache.sshd.common.util.buffer.Buffer> B clear(B)"], ["org.apache.sshd.common.util.buffer.ByteArrayBuffer", "org.apache.sshd.common.util.buffer.ByteArrayBuffer()", "public org.apache.sshd.common.util.buffer.ByteArrayBuffer()"], ["org.apache.sshd.common.util.buffer.ByteArrayBuffer", "org.apache.sshd.common.util.buffer.ByteArrayBuffer(int)", "public org.apache.sshd.common.util.buffer.ByteArrayBuffer(int)"], ["org.apache.sshd.common.util.buffer.ByteArrayBuffer", "org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[])", "public org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[])"], ["org.apache.sshd.common.util.buffer.ByteArrayBuffer", "org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[], boolean)", "public org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[], boolean)"], ["org.apache.sshd.common.util.buffer.ByteArrayBuffer", "org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[], int, int)", "public org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[], int, int)"], ["org.apache.sshd.common.util.buffer.ByteArrayBuffer", "org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[], int, int, boolean)", "public org.apache.sshd.common.util.buffer.ByteArrayBuffer(byte[], int, int, boolean)"], ["int", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.rpos()", "public int rpos()"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.rpos(int)", "public void rpos(int)"], ["int", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.wpos()", "public int wpos()"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.wpos(int)", "public void wpos(int)"], ["int", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.available()", "public int available()"], ["int", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.capacity()", "public int capacity()"], ["byte[]", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.array()", "public byte[] array()"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.compact()", "public void compact()"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.clear()", "public void clear()"], ["byte", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.getByte()", "public byte getByte()"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.putByte(byte)", "public void putByte(byte)"], ["int", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.putBuffer(org.apache.sshd.common.util.Readable, boolean)", "public int putBuffer(org.apache.sshd.common.util.Readable, boolean)"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.putRawBytes(byte[], int, int)", "public void putRawBytes(byte[], int, int)"], ["java.lang.String", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.getString(java.nio.charset.Charset)", "public java.lang.String getString(java.nio.charset.Charset)"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.getRawBytes(byte[], int, int)", "public void getRawBytes(byte[], int, int)"], ["void", "org.apache.sshd.common.util.buffer.ByteArrayBuffer.ensureCapacity(int, org.apache.sshd.common.util.Int2IntFunction)", "public void ensureCapacity(int, org.apache.sshd.common.util.Int2IntFunction)"], ["void", "org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$1.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$State[]", "org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$State.values()", "public static org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$State[] values()"], ["org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$State", "org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$State.valueOf(java.lang.String)", "public static org.apache.sshd.common.util.CloseableUtils$AbstractCloseable$State valueOf(java.lang.String)"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.common.util.CloseableUtils$AbstractCloseable.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["boolean", "org.apache.sshd.common.util.CloseableUtils$AbstractCloseable.isClosed()", "public boolean isClosed()"], ["boolean", "org.apache.sshd.common.util.CloseableUtils$AbstractCloseable.isClosing()", "public boolean isClosing()"], ["void", "org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable$1.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.run(java.lang.Runnable)", "public org.apache.sshd.common.util.CloseableUtils$Builder run(java.lang.Runnable)"], ["<T extends org.apache.sshd.common.future.SshFuture> org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.when(org.apache.sshd.common.future.SshFuture<T>)", "public <T extends org.apache.sshd.common.future.SshFuture> org.apache.sshd.common.util.CloseableUtils$Builder when(org.apache.sshd.common.future.SshFuture<T>)"], ["<T extends org.apache.sshd.common.future.SshFuture> org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.when(org.apache.sshd.common.future.SshFuture<T>...)", "public <T extends org.apache.sshd.common.future.SshFuture> org.apache.sshd.common.util.CloseableUtils$Builder when(org.apache.sshd.common.future.SshFuture<T>...)"], ["<T extends org.apache.sshd.common.future.SshFuture> org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.when(java.lang.Iterable<? extends org.apache.sshd.common.future.SshFuture<T>>)", "public <T extends org.apache.sshd.common.future.SshFuture> org.apache.sshd.common.util.CloseableUtils$Builder when(java.lang.Iterable<? extends org.apache.sshd.common.future.SshFuture<T>>)"], ["org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.sequential(org.apache.sshd.common.Closeable...)", "public org.apache.sshd.common.util.CloseableUtils$Builder sequential(org.apache.sshd.common.Closeable...)"], ["org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.sequential(java.lang.Iterable<org.apache.sshd.common.Closeable>)", "public org.apache.sshd.common.util.CloseableUtils$Builder sequential(java.lang.Iterable<org.apache.sshd.common.Closeable>)"], ["org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.parallel(org.apache.sshd.common.Closeable...)", "public org.apache.sshd.common.util.CloseableUtils$Builder parallel(org.apache.sshd.common.Closeable...)"], ["org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.parallel(java.lang.Iterable<? extends org.apache.sshd.common.Closeable>)", "public org.apache.sshd.common.util.CloseableUtils$Builder parallel(java.lang.Iterable<? extends org.apache.sshd.common.Closeable>)"], ["org.apache.sshd.common.util.CloseableUtils$Builder", "org.apache.sshd.common.util.CloseableUtils$Builder.close(org.apache.sshd.common.Closeable)", "public org.apache.sshd.common.util.CloseableUtils$Builder close(org.apache.sshd.common.Closeable)"], ["org.apache.sshd.common.Closeable", "org.apache.sshd.common.util.CloseableUtils$Builder.build()", "public org.apache.sshd.common.Closeable build()"], ["java.lang.Object", "org.apache.sshd.common.util.CloseableUtils$Builder.build()", "public java.lang.Object build()"], ["void", "org.apache.sshd.common.util.CloseableUtils$FuturesCloseable$1.operationComplete(T)", "public void operationComplete(T)"], ["org.apache.sshd.common.util.CloseableUtils$FuturesCloseable", "org.apache.sshd.common.util.CloseableUtils$FuturesCloseable(java.lang.Object, java.lang.Iterable<? extends org.apache.sshd.common.future.SshFuture<T>>)", "public org.apache.sshd.common.util.CloseableUtils$FuturesCloseable(java.lang.Object, java.lang.Iterable<? extends org.apache.sshd.common.future.SshFuture<T>>)"], ["boolean", "org.apache.sshd.common.util.CloseableUtils$IoBaseCloseable.isOpen()", "public boolean isOpen()"], ["void", "org.apache.sshd.common.util.CloseableUtils$IoBaseCloseable.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.common.util.CloseableUtils$ParallelCloseable$1.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.common.util.CloseableUtils$ParallelCloseable$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["void", "org.apache.sshd.common.util.CloseableUtils$SequentialCloseable$1.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.common.util.CloseableUtils$SequentialCloseable$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.common.util.CloseableUtils$SequentialCloseable", "org.apache.sshd.common.util.CloseableUtils$SequentialCloseable(java.lang.Object, java.lang.Iterable<? extends org.apache.sshd.common.Closeable>)", "public org.apache.sshd.common.util.CloseableUtils$SequentialCloseable(java.lang.Object, java.lang.Iterable<? extends org.apache.sshd.common.Closeable>)"], ["org.apache.sshd.common.util.CloseableUtils$SimpleCloseable", "org.apache.sshd.common.util.CloseableUtils$SimpleCloseable(java.lang.Object)", "public org.apache.sshd.common.util.CloseableUtils$SimpleCloseable(java.lang.Object)"], ["boolean", "org.apache.sshd.common.util.CloseableUtils$SimpleCloseable.isClosed()", "public boolean isClosed()"], ["boolean", "org.apache.sshd.common.util.CloseableUtils$SimpleCloseable.isClosing()", "public boolean isClosing()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.common.util.CloseableUtils$SimpleCloseable.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["void", "org.apache.sshd.common.util.CloseableUtils.close(org.apache.sshd.common.Closeable)", "public static void close(org.apache.sshd.common.Closeable) throws java.io.IOException"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.common.util.CloseableUtils.closed()", "public static org.apache.sshd.common.future.CloseFuture closed()"], ["org.apache.sshd.common.util.DirectoryScanner", "org.apache.sshd.common.util.DirectoryScanner()", "public org.apache.sshd.common.util.DirectoryScanner()"], ["org.apache.sshd.common.util.DirectoryScanner", "org.apache.sshd.common.util.DirectoryScanner(java.lang.String, java.lang.String...)", "public org.apache.sshd.common.util.DirectoryScanner(java.lang.String, java.lang.String...)"], ["void", "org.apache.sshd.common.util.DirectoryScanner.setBasedir(java.lang.String)", "public void setBasedir(java.lang.String)"], ["void", "org.apache.sshd.common.util.DirectoryScanner.setBasedir(java.io.File)", "public void setBasedir(java.io.File)"], ["java.io.File", "org.apache.sshd.common.util.DirectoryScanner.getBasedir()", "public java.io.File getBasedir()"], ["void", "org.apache.sshd.common.util.DirectoryScanner.setIncludes(java.lang.String[])", "public void setIncludes(java.lang.String[])"], ["java.lang.String[]", "org.apache.sshd.common.util.DirectoryScanner.scan()", "public java.lang.String[] scan() throws java.lang.IllegalStateException"], ["java.lang.String[]", "org.apache.sshd.common.util.DirectoryScanner.getIncludedFiles()", "public java.lang.String[] getIncludedFiles()"], ["java.lang.String", "org.apache.sshd.common.util.DirectoryScanner.replace(java.lang.String, java.lang.String, java.lang.String, int)", "public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int)"], ["java.lang.Object", "org.apache.sshd.common.util.EventListenerUtils$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["<T extends java.util.EventListener> T", "org.apache.sshd.common.util.EventListenerUtils.proxyWrapper(java.lang.Class<T>, java.lang.Iterable<? extends T>)", "public static <T extends java.util.EventListener> T proxyWrapper(java.lang.Class<T>, java.lang.Iterable<? extends T>)"], ["<T extends java.util.EventListener> T", "org.apache.sshd.common.util.EventListenerUtils.proxyWrapper(java.lang.Class<T>, java.lang.ClassLoader, java.lang.Iterable<? extends T>)", "public static <T extends java.util.EventListener> T proxyWrapper(java.lang.Class<T>, java.lang.ClassLoader, java.lang.Iterable<? extends T>)"], ["int", "org.apache.sshd.common.util.GenericUtils$1.compare(java.lang.String, java.lang.String)", "public int compare(java.lang.String, java.lang.String)"], ["int", "org.apache.sshd.common.util.GenericUtils$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.sshd.common.util.GenericUtils$2.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.apache.sshd.common.util.GenericUtils$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.apache.sshd.common.util.GenericUtils.trimToEmpty(java.lang.String)", "public static java.lang.String trimToEmpty(java.lang.String)"], ["int", "org.apache.sshd.common.util.GenericUtils.safeCompare(java.lang.String, java.lang.String, boolean)", "public static int safeCompare(java.lang.String, java.lang.String, boolean)"], ["int", "org.apache.sshd.common.util.GenericUtils.length(java.lang.CharSequence)", "public static int length(java.lang.CharSequence)"], ["boolean", "org.apache.sshd.common.util.GenericUtils.isEmpty(java.lang.CharSequence)", "public static boolean isEmpty(java.lang.CharSequence)"], ["java.lang.String[]", "org.apache.sshd.common.util.GenericUtils.split(java.lang.String, char)", "public static java.lang.String[] split(java.lang.String, char)"], ["<T> java.lang.String", "org.apache.sshd.common.util.GenericUtils.join(T[], char)", "public static <T> java.lang.String join(T[], char)"], ["java.lang.String", "org.apache.sshd.common.util.GenericUtils.join(java.lang.Iterable<?>, char)", "public static java.lang.String join(java.lang.Iterable<?>, char)"], ["java.lang.String", "org.apache.sshd.common.util.GenericUtils.join(java.util.Iterator<?>, char)", "public static java.lang.String join(java.util.Iterator<?>, char)"], ["<T> java.lang.String", "org.apache.sshd.common.util.GenericUtils.join(T[], java.lang.CharSequence)", "public static <T> java.lang.String join(T[], java.lang.CharSequence)"], ["java.lang.String", "org.apache.sshd.common.util.GenericUtils.join(java.lang.Iterable<?>, java.lang.CharSequence)", "public static java.lang.String join(java.lang.Iterable<?>, java.lang.CharSequence)"], ["java.lang.String", "org.apache.sshd.common.util.GenericUtils.join(java.util.Iterator<?>, java.lang.CharSequence)", "public static java.lang.String join(java.util.Iterator<?>, java.lang.CharSequence)"], ["int", "org.apache.sshd.common.util.GenericUtils.size(java.util.Collection<?>)", "public static int size(java.util.Collection<?>)"], ["boolean", "org.apache.sshd.common.util.GenericUtils.isEmpty(java.util.Collection<?>)", "public static boolean isEmpty(java.util.Collection<?>)"], ["int", "org.apache.sshd.common.util.GenericUtils.size(java.util.Map<?, ?>)", "public static int size(java.util.Map<?, ?>)"], ["boolean", "org.apache.sshd.common.util.GenericUtils.isEmpty(java.util.Map<?, ?>)", "public static boolean isEmpty(java.util.Map<?, ?>)"], ["boolean", "org.apache.sshd.common.util.GenericUtils.isEmpty(byte[])", "public static boolean isEmpty(byte[])"], ["int", "org.apache.sshd.common.util.GenericUtils.length(byte...)", "public static int length(byte...)"], ["<T> int", "org.apache.sshd.common.util.GenericUtils.length(T...)", "public static <T> int length(T...)"], ["<T> boolean", "org.apache.sshd.common.util.GenericUtils.isEmpty(java.lang.Iterable<? extends T>)", "public static <T> boolean isEmpty(java.lang.Iterable<? extends T>)"], ["<T> boolean", "org.apache.sshd.common.util.GenericUtils.isEmpty(java.util.Iterator<? extends T>)", "public static <T> boolean isEmpty(java.util.Iterator<? extends T>)"], ["<T> boolean", "org.apache.sshd.common.util.GenericUtils.isEmpty(T...)", "public static <T> boolean isEmpty(T...)"], ["<E extends java.lang.Enum<E>> java.util.Set<E>", "org.apache.sshd.common.util.GenericUtils.of(E...)", "public static <E extends java.lang.Enum<E>> java.util.Set<E> of(E...)"], ["<E extends java.lang.Enum<E>> java.util.Set<E>", "org.apache.sshd.common.util.GenericUtils.of(java.util.Collection<? extends E>)", "public static <E extends java.lang.Enum<E>> java.util.Set<E> of(java.util.Collection<? extends E>)"], ["<V extends java.lang.Comparable<V>> java.util.Comparator<V>", "org.apache.sshd.common.util.GenericUtils.naturalComparator()", "public static <V extends java.lang.Comparable<V>> java.util.Comparator<V> naturalComparator()"], ["<V extends java.lang.Comparable<V>> java.util.SortedSet<V>", "org.apache.sshd.common.util.GenericUtils.asSortedSet(java.util.Collection<? extends V>)", "public static <V extends java.lang.Comparable<V>> java.util.SortedSet<V> asSortedSet(java.util.Collection<? extends V>)"], ["<V> java.util.SortedSet<V>", "org.apache.sshd.common.util.GenericUtils.asSortedSet(java.util.Comparator<? super V>, java.util.Collection<? extends V>)", "public static <V> java.util.SortedSet<V> asSortedSet(java.util.Comparator<? super V>, java.util.Collection<? extends V>)"], ["java.lang.CharSequence", "org.apache.sshd.common.util.GenericUtils.stripQuotes(java.lang.CharSequence)", "public static java.lang.CharSequence stripQuotes(java.lang.CharSequence)"], ["java.lang.CharSequence", "org.apache.sshd.common.util.GenericUtils.stripDelimiters(java.lang.CharSequence, char)", "public static java.lang.CharSequence stripDelimiters(java.lang.CharSequence, char)"], ["java.lang.Throwable", "org.apache.sshd.common.util.GenericUtils.resolveExceptionCause(java.lang.Throwable)", "public static java.lang.Throwable resolveExceptionCause(java.lang.Throwable)"], ["<T extends java.lang.Throwable> T", "org.apache.sshd.common.util.GenericUtils.accumulateException(T, T)", "public static <T extends java.lang.Throwable> T accumulateException(T, T)"], ["int", "org.apache.sshd.common.util.GenericUtils.hashCode(long)", "public static int hashCode(long)"], ["int", "org.apache.sshd.common.util.Int2IntFunction$1.apply(int)", "public int apply(int)"], ["int", "org.apache.sshd.common.util.Int2IntFunction$Utils$1.apply(int)", "public int apply(int)"], ["int", "org.apache.sshd.common.util.Int2IntFunction$Utils$2.apply(int)", "public int apply(int)"], ["int", "org.apache.sshd.common.util.Int2IntFunction$Utils$3.apply(int)", "public int apply(int)"], ["org.apache.sshd.common.util.Int2IntFunction", "org.apache.sshd.common.util.Int2IntFunction$Utils.sub(int)", "public static org.apache.sshd.common.util.Int2IntFunction sub(int)"], ["org.apache.sshd.common.util.Int2IntFunction", "org.apache.sshd.common.util.Int2IntFunction$Utils.add(int)", "public static org.apache.sshd.common.util.Int2IntFunction add(int)"], ["org.apache.sshd.common.util.Int2IntFunction", "org.apache.sshd.common.util.Int2IntFunction$Utils.mul(int)", "public static org.apache.sshd.common.util.Int2IntFunction mul(int)"], ["org.apache.sshd.common.util.Int2IntFunction", "org.apache.sshd.common.util.Int2IntFunction$Utils.div(int)", "public static org.apache.sshd.common.util.Int2IntFunction div(int)"], ["org.apache.sshd.common.util.io.CloseableEmptyInputStream", "org.apache.sshd.common.util.io.CloseableEmptyInputStream()", "public org.apache.sshd.common.util.io.CloseableEmptyInputStream()"], ["boolean", "org.apache.sshd.common.util.io.CloseableEmptyInputStream.isOpen()", "public boolean isOpen()"], ["int", "org.apache.sshd.common.util.io.CloseableEmptyInputStream.available()", "public int available() throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.CloseableEmptyInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.CloseableEmptyInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.sshd.common.util.io.CloseableEmptyInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.util.io.CloseableEmptyInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.CloseableEmptyInputStream.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.common.util.io.DERParser", "org.apache.sshd.common.util.io.DERParser(byte...)", "public org.apache.sshd.common.util.io.DERParser(byte...)"], ["org.apache.sshd.common.util.io.DERParser", "org.apache.sshd.common.util.io.DERParser(byte[], int, int)", "public org.apache.sshd.common.util.io.DERParser(byte[], int, int)"], ["org.apache.sshd.common.util.io.DERParser", "org.apache.sshd.common.util.io.DERParser(java.io.InputStream)", "public org.apache.sshd.common.util.io.DERParser(java.io.InputStream)"], ["int", "org.apache.sshd.common.util.io.DERParser.readLength()", "public int readLength() throws java.io.IOException"], ["java.math.BigInteger", "org.apache.sshd.common.util.io.DERParser.readBigInteger()", "public java.math.BigInteger readBigInteger() throws java.io.IOException"], ["org.apache.sshd.common.util.io.DERWriter", "org.apache.sshd.common.util.io.DERWriter()", "public org.apache.sshd.common.util.io.DERWriter()"], ["org.apache.sshd.common.util.io.DERWriter", "org.apache.sshd.common.util.io.DERWriter(int)", "public org.apache.sshd.common.util.io.DERWriter(int)"], ["org.apache.sshd.common.util.io.DERWriter", "org.apache.sshd.common.util.io.DERWriter(java.io.OutputStream)", "public org.apache.sshd.common.util.io.DERWriter(java.io.OutputStream)"], ["void", "org.apache.sshd.common.util.io.DERWriter.writeBigInteger(java.math.BigInteger)", "public void writeBigInteger(java.math.BigInteger) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.DERWriter.writeBigInteger(byte...)", "public void writeBigInteger(byte...) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.DERWriter.writeBigInteger(byte[], int, int)", "public void writeBigInteger(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.DERWriter.writeObject(byte, int, byte...)", "public void writeObject(byte, int, byte...) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.DERWriter.writeLength(int)", "public void writeLength(int) throws java.io.IOException"], ["byte[]", "org.apache.sshd.common.util.io.DERWriter.toByteArray()", "public byte[] toByteArray() throws java.io.IOException"], ["org.apache.sshd.common.util.io.EmptyInputStream", "org.apache.sshd.common.util.io.EmptyInputStream()", "public org.apache.sshd.common.util.io.EmptyInputStream()"], ["int", "org.apache.sshd.common.util.io.EmptyInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.EmptyInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.sshd.common.util.io.EmptyInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.EmptyInputStream.available()", "public int available() throws java.io.IOException"], ["synchronized", "org.apache.sshd.common.util.io.EmptyInputStream.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "org.apache.sshd.common.util.io.EmptyInputStream.void reset()", "public synchronized void reset() throws java.io.IOException"], ["java.lang.Boolean", "org.apache.sshd.common.util.io.FileInfoExtractor$1.infoOf(java.nio.file.Path, java.nio.file.LinkOption...)", "public java.lang.Boolean infoOf(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.common.util.io.FileInfoExtractor$1.infoOf(java.nio.file.Path, java.nio.file.LinkOption[])", "public java.lang.Object infoOf(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException"], ["java.lang.Boolean", "org.apache.sshd.common.util.io.FileInfoExtractor$2.infoOf(java.nio.file.Path, java.nio.file.LinkOption...)", "public java.lang.Boolean infoOf(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.common.util.io.FileInfoExtractor$2.infoOf(java.nio.file.Path, java.nio.file.LinkOption[])", "public java.lang.Object infoOf(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException"], ["java.lang.Boolean", "org.apache.sshd.common.util.io.FileInfoExtractor$3.infoOf(java.nio.file.Path, java.nio.file.LinkOption...)", "public java.lang.Boolean infoOf(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.common.util.io.FileInfoExtractor$3.infoOf(java.nio.file.Path, java.nio.file.LinkOption[])", "public java.lang.Object infoOf(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException"], ["java.lang.Boolean", "org.apache.sshd.common.util.io.FileInfoExtractor$4.infoOf(java.nio.file.Path, java.nio.file.LinkOption...)", "public java.lang.Boolean infoOf(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.common.util.io.FileInfoExtractor$4.infoOf(java.nio.file.Path, java.nio.file.LinkOption[])", "public java.lang.Object infoOf(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException"], ["java.lang.Long", "org.apache.sshd.common.util.io.FileInfoExtractor$5.infoOf(java.nio.file.Path, java.nio.file.LinkOption...)", "public java.lang.Long infoOf(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.common.util.io.FileInfoExtractor$5.infoOf(java.nio.file.Path, java.nio.file.LinkOption[])", "public java.lang.Object infoOf(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.common.util.io.FileInfoExtractor$6.infoOf(java.nio.file.Path, java.nio.file.LinkOption...)", "public java.util.Set<java.nio.file.attribute.PosixFilePermission> infoOf(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.common.util.io.FileInfoExtractor$6.infoOf(java.nio.file.Path, java.nio.file.LinkOption[])", "public java.lang.Object infoOf(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException"], ["java.nio.file.attribute.FileTime", "org.apache.sshd.common.util.io.FileInfoExtractor$7.infoOf(java.nio.file.Path, java.nio.file.LinkOption...)", "public java.nio.file.attribute.FileTime infoOf(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.common.util.io.FileInfoExtractor$7.infoOf(java.nio.file.Path, java.nio.file.LinkOption[])", "public java.lang.Object infoOf(java.nio.file.Path, java.nio.file.LinkOption[]) throws java.io.IOException"], ["java.nio.file.LinkOption[]", "org.apache.sshd.common.util.io.IoUtils.getLinkOptions(boolean)", "public static java.nio.file.LinkOption[] getLinkOptions(boolean)"], ["long", "org.apache.sshd.common.util.io.IoUtils.copy(java.io.InputStream, java.io.OutputStream)", "public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["long", "org.apache.sshd.common.util.io.IoUtils.copy(java.io.InputStream, java.io.OutputStream, int)", "public static long copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.IoUtils.closeQuietly(java.io.Closeable...)", "public static void closeQuietly(java.io.Closeable...)"], ["boolean", "org.apache.sshd.common.util.io.IoUtils.isWindowsExecutable(java.lang.String)", "public static boolean isWindowsExecutable(java.lang.String)"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.common.util.io.IoUtils.getPermissions(java.nio.file.Path, java.nio.file.LinkOption...)", "public static java.util.Set<java.nio.file.attribute.PosixFilePermission> getPermissions(java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.common.util.io.IoUtils.getPermissionsFromFile(java.io.File)", "public static java.util.Set<java.nio.file.attribute.PosixFilePermission> getPermissionsFromFile(java.io.File)"], ["void", "org.apache.sshd.common.util.io.IoUtils.setPermissions(java.nio.file.Path, java.util.Set<java.nio.file.attribute.PosixFilePermission>)", "public static void setPermissions(java.nio.file.Path, java.util.Set<java.nio.file.attribute.PosixFilePermission>) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.IoUtils.setPermissionsToFile(java.io.File, java.util.Collection<java.nio.file.attribute.PosixFilePermission>)", "public static void setPermissionsToFile(java.io.File, java.util.Collection<java.nio.file.attribute.PosixFilePermission>)"], ["java.lang.Boolean", "org.apache.sshd.common.util.io.IoUtils.checkFileExists(java.nio.file.Path, java.nio.file.LinkOption...)", "public static java.lang.Boolean checkFileExists(java.nio.file.Path, java.nio.file.LinkOption...)"], ["void", "org.apache.sshd.common.util.io.IoUtils.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.IoUtils.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.IoUtils.read(java.io.InputStream, byte[])", "public static int read(java.io.InputStream, byte[]) throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.IoUtils.read(java.io.InputStream, byte[], int, int)", "public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["java.nio.file.attribute.PosixFilePermission", "org.apache.sshd.common.util.io.IoUtils.validateExcludedPermissions(java.util.Collection<java.nio.file.attribute.PosixFilePermission>, java.util.Collection<java.nio.file.attribute.PosixFilePermission>)", "public static java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection<java.nio.file.attribute.PosixFilePermission>, java.util.Collection<java.nio.file.attribute.PosixFilePermission>)"], ["java.nio.file.Path", "org.apache.sshd.common.util.io.IoUtils.ensureDirectory(java.nio.file.Path, java.nio.file.LinkOption...)", "public static java.nio.file.Path ensureDirectory(java.nio.file.Path, java.nio.file.LinkOption...)"], ["boolean", "org.apache.sshd.common.util.io.IoUtils.followLinks(java.nio.file.LinkOption...)", "public static boolean followLinks(java.nio.file.LinkOption...)"], ["org.apache.sshd.common.util.io.LimitInputStream", "org.apache.sshd.common.util.io.LimitInputStream(java.io.InputStream, long)", "public org.apache.sshd.common.util.io.LimitInputStream(java.io.InputStream, long)"], ["boolean", "org.apache.sshd.common.util.io.LimitInputStream.isOpen()", "public boolean isOpen()"], ["int", "org.apache.sshd.common.util.io.LimitInputStream.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.LimitInputStream.read(byte[], int, int)", "public int read(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.sshd.common.util.io.LimitInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["int", "org.apache.sshd.common.util.io.LimitInputStream.available()", "public int available() throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.LimitInputStream.close()", "public void close() throws java.io.IOException"], ["org.apache.sshd.common.util.io.LoggingFilterOutputStream", "org.apache.sshd.common.util.io.LoggingFilterOutputStream(java.io.OutputStream, java.lang.String, org.slf4j.Logger)", "public org.apache.sshd.common.util.io.LoggingFilterOutputStream(java.io.OutputStream, java.lang.String, org.slf4j.Logger)"], ["void", "org.apache.sshd.common.util.io.LoggingFilterOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.LoggingFilterOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["org.apache.sshd.common.util.io.ModifiableFileWatcher", "org.apache.sshd.common.util.io.ModifiableFileWatcher(java.io.File)", "public org.apache.sshd.common.util.io.ModifiableFileWatcher(java.io.File)"], ["org.apache.sshd.common.util.io.ModifiableFileWatcher", "org.apache.sshd.common.util.io.ModifiableFileWatcher(java.nio.file.Path)", "public org.apache.sshd.common.util.io.ModifiableFileWatcher(java.nio.file.Path)"], ["org.apache.sshd.common.util.io.ModifiableFileWatcher", "org.apache.sshd.common.util.io.ModifiableFileWatcher(java.nio.file.Path, java.nio.file.LinkOption...)", "public org.apache.sshd.common.util.io.ModifiableFileWatcher(java.nio.file.Path, java.nio.file.LinkOption...)"], ["java.nio.file.Path", "org.apache.sshd.common.util.io.ModifiableFileWatcher.getPath()", "public final java.nio.file.Path getPath()"], ["boolean", "org.apache.sshd.common.util.io.ModifiableFileWatcher.exists()", "public final boolean exists() throws java.io.IOException"], ["long", "org.apache.sshd.common.util.io.ModifiableFileWatcher.size()", "public final long size() throws java.io.IOException"], ["java.nio.file.attribute.FileTime", "org.apache.sshd.common.util.io.ModifiableFileWatcher.lastModified()", "public final java.nio.file.attribute.FileTime lastModified() throws java.io.IOException"], ["boolean", "org.apache.sshd.common.util.io.ModifiableFileWatcher.checkReloadRequired()", "public boolean checkReloadRequired() throws java.io.IOException"], ["void", "org.apache.sshd.common.util.io.ModifiableFileWatcher.resetReloadAttributes()", "public void resetReloadAttributes()"], ["void", "org.apache.sshd.common.util.io.ModifiableFileWatcher.updateReloadAttributes()", "public void updateReloadAttributes() throws java.io.IOException"], ["org.apache.sshd.common.util.io.NoCloseInputStream", "org.apache.sshd.common.util.io.NoCloseInputStream(java.io.InputStream)", "public org.apache.sshd.common.util.io.NoCloseInputStream(java.io.InputStream)"], ["void", "org.apache.sshd.common.util.io.NoCloseInputStream.close()", "public void close() throws java.io.IOException"], ["java.io.InputStream", "org.apache.sshd.common.util.io.NoCloseInputStream.resolveInputStream(java.io.InputStream, boolean)", "public static java.io.InputStream resolveInputStream(java.io.InputStream, boolean)"], ["org.apache.sshd.common.util.io.NoCloseOutputStream", "org.apache.sshd.common.util.io.NoCloseOutputStream(java.io.OutputStream)", "public org.apache.sshd.common.util.io.NoCloseOutputStream(java.io.OutputStream)"], ["void", "org.apache.sshd.common.util.io.NoCloseOutputStream.close()", "public void close() throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.common.util.io.NoCloseOutputStream.resolveOutputStream(java.io.OutputStream, boolean)", "public static java.io.OutputStream resolveOutputStream(java.io.OutputStream, boolean)"], ["org.apache.sshd.common.util.io.NoCloseReader", "org.apache.sshd.common.util.io.NoCloseReader(java.io.Reader)", "public org.apache.sshd.common.util.io.NoCloseReader(java.io.Reader)"], ["void", "org.apache.sshd.common.util.io.NoCloseReader.close()", "public void close() throws java.io.IOException"], ["java.io.Reader", "org.apache.sshd.common.util.io.NoCloseReader.resolveReader(java.io.Reader, boolean)", "public static java.io.Reader resolveReader(java.io.Reader, boolean)"], ["org.apache.sshd.common.util.io.NoCloseWriter", "org.apache.sshd.common.util.io.NoCloseWriter(java.io.Writer)", "public org.apache.sshd.common.util.io.NoCloseWriter(java.io.Writer)"], ["void", "org.apache.sshd.common.util.io.NoCloseWriter.close()", "public void close() throws java.io.IOException"], ["java.io.Writer", "org.apache.sshd.common.util.io.NoCloseWriter.resolveWriter(java.io.Writer, boolean)", "public static java.io.Writer resolveWriter(java.io.Writer, boolean)"], ["void", "org.apache.sshd.common.util.logging.AbstractSimplifiedLog.log(java.util.logging.Level, java.lang.Object)", "public void log(java.util.logging.Level, java.lang.Object)"], ["void", "org.apache.sshd.common.util.logging.LoggingUtils$1.log(java.util.logging.Level, java.lang.Object, java.lang.Throwable)", "public void log(java.util.logging.Level, java.lang.Object, java.lang.Throwable)"], ["boolean", "org.apache.sshd.common.util.logging.LoggingUtils$1.isEnabled(java.util.logging.Level)", "public boolean isEnabled(java.util.logging.Level)"], ["boolean", "org.apache.sshd.common.util.logging.LoggingUtils.isLoggable(java.util.logging.Level, java.util.logging.Level)", "public static boolean isLoggable(java.util.logging.Level, java.util.logging.Level)"], ["org.apache.sshd.common.util.logging.SimplifiedLog", "org.apache.sshd.common.util.logging.LoggingUtils.wrap(org.slf4j.Logger)", "public static org.apache.sshd.common.util.logging.SimplifiedLog wrap(org.slf4j.Logger)"], ["void", "org.apache.sshd.common.util.logging.LoggingUtils.logMessage(org.slf4j.Logger, java.util.logging.Level, java.lang.Object, java.lang.Throwable)", "public static void logMessage(org.slf4j.Logger, java.util.logging.Level, java.lang.Object, java.lang.Throwable)"], ["boolean", "org.apache.sshd.common.util.logging.LoggingUtils.isLoggable(org.slf4j.Logger, java.util.logging.Level)", "public static boolean isLoggable(org.slf4j.Logger, java.util.logging.Level)"], ["boolean", "org.apache.sshd.common.util.logging.SimplifiedLog$1.isEnabled(java.util.logging.Level)", "public boolean isEnabled(java.util.logging.Level)"], ["void", "org.apache.sshd.common.util.logging.SimplifiedLog$1.log(java.util.logging.Level, java.lang.Object, java.lang.Throwable)", "public void log(java.util.logging.Level, java.lang.Object, java.lang.Throwable)"], ["java.lang.String", "org.apache.sshd.common.util.logging.SimplifiedLog$1.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.sshd.common.util.OsUtils.isUNIX()", "public static boolean isUNIX()"], ["boolean", "org.apache.sshd.common.util.OsUtils.isWin32()", "public static boolean isWin32()"], ["org.apache.sshd.common.util.Pair", "org.apache.sshd.common.util.Pair(U, V)", "public org.apache.sshd.common.util.Pair(U, V)"], ["U", "org.apache.sshd.common.util.Pair.getFirst()", "public U getFirst()"], ["V", "org.apache.sshd.common.util.Pair.getSecond()", "public V getSecond()"], ["java.lang.String", "org.apache.sshd.common.util.Pair.toString()", "public java.lang.String toString()"], ["java.security.KeyPair", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleInputStreamLoader.loadKeyPair(java.lang.String, java.io.InputStream, org.apache.sshd.common.config.keys.FilePasswordProvider)", "public static java.security.KeyPair loadKeyPair(java.lang.String, java.io.InputStream, org.apache.sshd.common.config.keys.FilePasswordProvider) throws java.io.IOException, java.security.GeneralSecurityException"], ["org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandom", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandom()", "public org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandom()"], ["void", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandom.fill(byte[], int, int)", "public void fill(byte[], int, int)"], ["int", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandom.random(int)", "public int random(int)"], ["boolean", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandomFactory.isSupported()", "public boolean isSupported()"], ["java.lang.String", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandomFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.random.Random", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandomFactory.create()", "public org.apache.sshd.common.random.Random create()"], ["java.lang.Object", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRandomFactory.create()", "public java.lang.Object create()"], ["java.lang.Void", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRegistration.call()", "public java.lang.Void call() throws java.lang.Exception"], ["java.lang.Object", "org.apache.sshd.common.util.SecurityUtils$BouncyCastleRegistration.call()", "public java.lang.Object call() throws java.lang.Exception"], ["boolean", "org.apache.sshd.common.util.SecurityUtils.hasEcc()", "public static boolean hasEcc()"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.void setSecurityProvider(java.lang.String)", "public static synchronized void setSecurityProvider(java.lang.String)"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.void setRegisterBouncyCastle(boolean)", "public static synchronized void setRegisterBouncyCastle(boolean)"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.java.lang.String getSecurityProvider()", "public static synchronized java.lang.String getSecurityProvider()"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.boolean isBouncyCastleRegistered()", "public static synchronized boolean isBouncyCastleRegistered()"], ["java.security.KeyPair", "org.apache.sshd.common.util.SecurityUtils.loadKeyPairIdentity(java.lang.String, java.io.InputStream, org.apache.sshd.common.config.keys.FilePasswordProvider)", "public static java.security.KeyPair loadKeyPairIdentity(java.lang.String, java.io.InputStream, org.apache.sshd.common.config.keys.FilePasswordProvider) throws java.io.IOException, java.security.GeneralSecurityException"], ["org.apache.sshd.common.keyprovider.AbstractFileKeyPairProvider", "org.apache.sshd.common.util.SecurityUtils.createFileKeyPairProvider()", "public static org.apache.sshd.common.keyprovider.AbstractFileKeyPairProvider createFileKeyPairProvider()"], ["org.apache.sshd.common.keyprovider.AbstractClassLoadableResourceKeyPairProvider", "org.apache.sshd.common.util.SecurityUtils.createClassLoadableResourceKeyPairProvider()", "public static org.apache.sshd.common.keyprovider.AbstractClassLoadableResourceKeyPairProvider createClassLoadableResourceKeyPairProvider()"], ["org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider", "org.apache.sshd.common.util.SecurityUtils.createGeneratorHostKeyProvider(java.nio.file.Path)", "public static org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider createGeneratorHostKeyProvider(java.nio.file.Path)"], ["org.apache.sshd.common.random.RandomFactory", "org.apache.sshd.common.util.SecurityUtils.getRandomFactory()", "public static org.apache.sshd.common.random.RandomFactory getRandomFactory()"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.java.security.KeyFactory getKeyFactory(java.lang.String)", "public static synchronized java.security.KeyFactory getKeyFactory(java.lang.String) throws java.security.GeneralSecurityException"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.javax.crypto.Cipher getCipher(java.lang.String)", "public static synchronized javax.crypto.Cipher getCipher(java.lang.String) throws java.security.GeneralSecurityException"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.java.security.MessageDigest getMessageDigest(java.lang.String)", "public static synchronized java.security.MessageDigest getMessageDigest(java.lang.String) throws java.security.GeneralSecurityException"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.java.security.KeyPairGenerator getKeyPairGenerator(java.lang.String)", "public static synchronized java.security.KeyPairGenerator getKeyPairGenerator(java.lang.String) throws java.security.GeneralSecurityException"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.javax.crypto.KeyAgreement getKeyAgreement(java.lang.String)", "public static synchronized javax.crypto.KeyAgreement getKeyAgreement(java.lang.String) throws java.security.GeneralSecurityException"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.javax.crypto.Mac getMac(java.lang.String)", "public static synchronized javax.crypto.Mac getMac(java.lang.String) throws java.security.GeneralSecurityException"], ["synchronized", "org.apache.sshd.common.util.SecurityUtils.java.security.Signature getSignature(java.lang.String)", "public static synchronized java.security.Signature getSignature(java.lang.String) throws java.security.GeneralSecurityException"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.matchPatternStart(java.lang.String, java.lang.String)", "public static boolean matchPatternStart(java.lang.String, java.lang.String)"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.matchPatternStart(java.lang.String, java.lang.String, boolean)", "public static boolean matchPatternStart(java.lang.String, java.lang.String, boolean)"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.matchPath(java.lang.String, java.lang.String)", "public static boolean matchPath(java.lang.String, java.lang.String)"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.matchPath(java.lang.String, java.lang.String, boolean)", "public static boolean matchPath(java.lang.String, java.lang.String, boolean)"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.match(java.lang.String, java.lang.String)", "public static boolean match(java.lang.String, java.lang.String)"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.match(java.lang.String, java.lang.String, boolean)", "public static boolean match(java.lang.String, java.lang.String, boolean)"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.util.SelectorUtils.tokenizePath(java.lang.String)", "public static java.util.List<java.lang.String> tokenizePath(java.lang.String)"], ["java.util.List<java.lang.String>", "org.apache.sshd.common.util.SelectorUtils.tokenizePath(java.lang.String, java.lang.String)", "public static java.util.List<java.lang.String> tokenizePath(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.normalizePath(java.lang.String, java.lang.String)", "public static java.lang.String normalizePath(java.lang.String, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.translateToLocalFileSystemPath(java.lang.String, char, java.nio.file.FileSystem)", "public static java.lang.String translateToLocalFileSystemPath(java.lang.String, char, java.nio.file.FileSystem)"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.translateToLocalFileSystemPath(java.lang.String, char, java.lang.String)", "public static java.lang.String translateToLocalFileSystemPath(java.lang.String, char, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.applySlashifyRules(java.lang.String, char)", "public static java.lang.String applySlashifyRules(java.lang.String, char)"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.translateToLocalPath(java.lang.String)", "public static java.lang.String translateToLocalPath(java.lang.String)"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.isWindowsDriveSpecified(java.lang.CharSequence)", "public static boolean isWindowsDriveSpecified(java.lang.CharSequence)"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.translateToFileSystemPath(java.lang.String, java.lang.String, java.nio.file.FileSystem)", "public static java.lang.String translateToFileSystemPath(java.lang.String, java.lang.String, java.nio.file.FileSystem)"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.translateToFileSystemPath(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String translateToFileSystemPath(java.lang.String, java.lang.String, java.lang.String)"], ["boolean", "org.apache.sshd.common.util.SelectorUtils.isOutOfDate(java.io.File, java.io.File, int)", "public static boolean isOutOfDate(java.io.File, java.io.File, int)"], ["java.lang.String", "org.apache.sshd.common.util.SelectorUtils.removeWhitespace(java.lang.String)", "public static java.lang.String removeWhitespace(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.common.util.threads.ThreadUtils$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["org.apache.sshd.common.util.threads.ThreadUtils$SshdThreadFactory", "org.apache.sshd.common.util.threads.ThreadUtils$SshdThreadFactory(java.lang.String)", "public org.apache.sshd.common.util.threads.ThreadUtils$SshdThreadFactory(java.lang.String)"], ["java.lang.Thread", "org.apache.sshd.common.util.threads.ThreadUtils$SshdThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.common.util.threads.ThreadUtils.protectExecutorServiceShutdown(java.util.concurrent.ExecutorService, boolean)", "public static java.util.concurrent.ExecutorService protectExecutorServiceShutdown(java.util.concurrent.ExecutorService, boolean)"], ["java.lang.ClassLoader", "org.apache.sshd.common.util.threads.ThreadUtils.resolveDefaultClassLoader(java.lang.Object)", "public static java.lang.ClassLoader resolveDefaultClassLoader(java.lang.Object)"], ["java.lang.ClassLoader", "org.apache.sshd.common.util.threads.ThreadUtils.resolveDefaultClassLoader(java.lang.Class<?>)", "public static java.lang.ClassLoader resolveDefaultClassLoader(java.lang.Class<?>)"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.common.util.threads.ThreadUtils.newFixedThreadPool(java.lang.String, int)", "public static java.util.concurrent.ExecutorService newFixedThreadPool(java.lang.String, int)"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.common.util.threads.ThreadUtils.newCachedThreadPool(java.lang.String)", "public static java.util.concurrent.ExecutorService newCachedThreadPool(java.lang.String)"], ["java.util.concurrent.ScheduledExecutorService", "org.apache.sshd.common.util.threads.ThreadUtils.newSingleThreadScheduledExecutor(java.lang.String)", "public static java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.lang.String)"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.common.util.threads.ThreadUtils.newSingleThreadExecutor(java.lang.String)", "public static java.util.concurrent.ExecutorService newSingleThreadExecutor(java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.util.Transformer$1.transform(java.lang.Object)", "public java.lang.String transform(java.lang.Object)"], ["java.lang.Object", "org.apache.sshd.common.util.Transformer$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["java.lang.String", "org.apache.sshd.common.util.Transformer$2.transform(java.lang.Enum<?>)", "public java.lang.String transform(java.lang.Enum<?>)"], ["java.lang.Object", "org.apache.sshd.common.util.Transformer$2.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["java.lang.Object", "org.apache.sshd.common.util.Transformer$Utils$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["<U extends V, V> org.apache.sshd.common.util.Transformer<U, V>", "org.apache.sshd.common.util.Transformer$Utils.identity()", "public static <U extends V, V> org.apache.sshd.common.util.Transformer<U, V> identity()"], ["<T> T", "org.apache.sshd.common.util.ValidateUtils.checkNotNull(T, java.lang.String)", "public static <T> T checkNotNull(T, java.lang.String)"], ["<T> T", "org.apache.sshd.common.util.ValidateUtils.checkNotNull(T, java.lang.String, java.lang.Object)", "public static <T> T checkNotNull(T, java.lang.String, java.lang.Object)"], ["<T> T", "org.apache.sshd.common.util.ValidateUtils.checkNotNull(T, java.lang.String, java.lang.Object...)", "public static <T> T checkNotNull(T, java.lang.String, java.lang.Object...)"], ["java.lang.String", "org.apache.sshd.common.util.ValidateUtils.checkNotNullAndNotEmpty(java.lang.String, java.lang.String)", "public static java.lang.String checkNotNullAndNotEmpty(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.sshd.common.util.ValidateUtils.checkNotNullAndNotEmpty(java.lang.String, java.lang.String, java.lang.Object)", "public static java.lang.String checkNotNullAndNotEmpty(java.lang.String, java.lang.String, java.lang.Object)"], ["java.lang.String", "org.apache.sshd.common.util.ValidateUtils.checkNotNullAndNotEmpty(java.lang.String, java.lang.String, java.lang.Object...)", "public static java.lang.String checkNotNullAndNotEmpty(java.lang.String, java.lang.String, java.lang.Object...)"], ["<K, V, M extends java.util.Map<K, V>> M", "org.apache.sshd.common.util.ValidateUtils.checkNotNullAndNotEmpty(M, java.lang.String, java.lang.Object...)", "public static <K, V, M extends java.util.Map<K, V>> M checkNotNullAndNotEmpty(M, java.lang.String, java.lang.Object...)"], ["<T, C extends java.util.Collection<T>> C", "org.apache.sshd.common.util.ValidateUtils.checkNotNullAndNotEmpty(C, java.lang.String, java.lang.Object...)", "public static <T, C extends java.util.Collection<T>> C checkNotNullAndNotEmpty(C, java.lang.String, java.lang.Object...)"], ["byte[]", "org.apache.sshd.common.util.ValidateUtils.checkNotNullAndNotEmpty(byte[], java.lang.String, java.lang.Object...)", "public static byte[] checkNotNullAndNotEmpty(byte[], java.lang.String, java.lang.Object...)"], ["<T> T[]", "org.apache.sshd.common.util.ValidateUtils.checkNotNullAndNotEmpty(T[], java.lang.String, java.lang.Object...)", "public static <T> T[] checkNotNullAndNotEmpty(T[], java.lang.String, java.lang.Object...)"], ["void", "org.apache.sshd.common.util.ValidateUtils.checkTrue(boolean, java.lang.String)", "public static void checkTrue(boolean, java.lang.String)"], ["void", "org.apache.sshd.common.util.ValidateUtils.checkTrue(boolean, java.lang.String, java.lang.Object)", "public static void checkTrue(boolean, java.lang.String, java.lang.Object)"], ["void", "org.apache.sshd.common.util.ValidateUtils.checkTrue(boolean, java.lang.String, java.lang.Object...)", "public static void checkTrue(boolean, java.lang.String, java.lang.Object...)"], ["void", "org.apache.sshd.common.util.ValidateUtils.throwIllegalArgumentException(java.lang.String, java.lang.Object...)", "public static void throwIllegalArgumentException(java.lang.String, java.lang.Object...)"], ["java.lang.String", "org.apache.sshd.server.auth.AbstractUserAuth.getUserName()", "public java.lang.String getUserName()"], ["java.lang.String", "org.apache.sshd.server.auth.AbstractUserAuth.getService()", "public java.lang.String getService()"], ["java.lang.Boolean", "org.apache.sshd.server.auth.AbstractUserAuth.auth(org.apache.sshd.server.session.ServerSession, java.lang.String, java.lang.String, org.apache.sshd.common.util.buffer.Buffer)", "public java.lang.Boolean auth(org.apache.sshd.server.session.ServerSession, java.lang.String, java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["java.lang.Boolean", "org.apache.sshd.server.auth.AbstractUserAuth.next(org.apache.sshd.common.util.buffer.Buffer)", "public java.lang.Boolean next(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["void", "org.apache.sshd.server.auth.AbstractUserAuth.destroy()", "public void destroy()"], ["org.apache.sshd.server.auth.CachingPublicKeyAuthenticator", "org.apache.sshd.server.auth.CachingPublicKeyAuthenticator(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator)", "public org.apache.sshd.server.auth.CachingPublicKeyAuthenticator(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator)"], ["boolean", "org.apache.sshd.server.auth.CachingPublicKeyAuthenticator.authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)", "public boolean authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)"], ["void", "org.apache.sshd.server.auth.CachingPublicKeyAuthenticator.sessionCreated(org.apache.sshd.common.session.Session)", "public void sessionCreated(org.apache.sshd.common.session.Session)"], ["void", "org.apache.sshd.server.auth.CachingPublicKeyAuthenticator.sessionEvent(org.apache.sshd.common.session.Session, org.apache.sshd.common.session.SessionListener$Event)", "public void sessionEvent(org.apache.sshd.common.session.Session, org.apache.sshd.common.session.SessionListener$Event)"], ["void", "org.apache.sshd.server.auth.CachingPublicKeyAuthenticator.sessionClosed(org.apache.sshd.common.session.Session)", "public void sessionClosed(org.apache.sshd.common.session.Session)"], ["javax.security.auth.login.AppConfigurationEntry[]", "org.apache.sshd.server.auth.gss.CredentialHelper$FixedLoginConfiguration.getAppConfigurationEntry(java.lang.String)", "public javax.security.auth.login.AppConfigurationEntry[] getAppConfigurationEntry(java.lang.String)"], ["void", "org.apache.sshd.server.auth.gss.CredentialHelper$FixedLoginConfiguration.refresh()", "public void refresh()"], ["org.ietf.jgss.GSSCredential", "org.apache.sshd.server.auth.gss.CredentialHelper$G.run()", "public org.ietf.jgss.GSSCredential run() throws org.ietf.jgss.GSSException"], ["java.lang.Object", "org.apache.sshd.server.auth.gss.CredentialHelper$G.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.ietf.jgss.GSSCredential", "org.apache.sshd.server.auth.gss.CredentialHelper.creds(org.ietf.jgss.GSSManager, java.lang.String, java.lang.String)", "public static org.ietf.jgss.GSSCredential creds(org.ietf.jgss.GSSManager, java.lang.String, java.lang.String) throws javax.security.auth.login.LoginException, org.ietf.jgss.GSSException"], ["org.apache.sshd.server.auth.gss.GSSAuthenticator", "org.apache.sshd.server.auth.gss.GSSAuthenticator()", "public org.apache.sshd.server.auth.gss.GSSAuthenticator()"], ["org.ietf.jgss.GSSManager", "org.apache.sshd.server.auth.gss.GSSAuthenticator.getGSSManager()", "public org.ietf.jgss.GSSManager getGSSManager()"], ["org.ietf.jgss.GSSCredential", "org.apache.sshd.server.auth.gss.GSSAuthenticator.getGSSCredential(org.ietf.jgss.GSSManager)", "public org.ietf.jgss.GSSCredential getGSSCredential(org.ietf.jgss.GSSManager) throws java.net.UnknownHostException, javax.security.auth.login.LoginException, org.ietf.jgss.GSSException"], ["boolean", "org.apache.sshd.server.auth.gss.GSSAuthenticator.validateInitialUser(org.apache.sshd.server.session.ServerSession, java.lang.String)", "public boolean validateInitialUser(org.apache.sshd.server.session.ServerSession, java.lang.String)"], ["boolean", "org.apache.sshd.server.auth.gss.GSSAuthenticator.validateIdentity(org.apache.sshd.server.session.ServerSession, java.lang.String)", "public boolean validateIdentity(org.apache.sshd.server.session.ServerSession, java.lang.String)"], ["void", "org.apache.sshd.server.auth.gss.GSSAuthenticator.setServicePrincipalName(java.lang.String)", "public void setServicePrincipalName(java.lang.String)"], ["void", "org.apache.sshd.server.auth.gss.GSSAuthenticator.setKeytabFile(java.lang.String)", "public void setKeytabFile(java.lang.String)"], ["org.apache.sshd.server.auth.gss.UserAuthGSS", "org.apache.sshd.server.auth.gss.UserAuthGSS()", "public org.apache.sshd.server.auth.gss.UserAuthGSS()"], ["java.lang.String", "org.apache.sshd.server.auth.gss.UserAuthGSS.getUserName()", "public java.lang.String getUserName()"], ["void", "org.apache.sshd.server.auth.gss.UserAuthGSS.destroy()", "public void destroy()"], ["org.apache.sshd.server.auth.gss.UserAuthGSSFactory", "org.apache.sshd.server.auth.gss.UserAuthGSSFactory()", "public org.apache.sshd.server.auth.gss.UserAuthGSSFactory()"], ["java.lang.String", "org.apache.sshd.server.auth.gss.UserAuthGSSFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.server.auth.UserAuth", "org.apache.sshd.server.auth.gss.UserAuthGSSFactory.create()", "public org.apache.sshd.server.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.server.auth.gss.UserAuthGSSFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.server.auth.password.StaticPasswordAuthenticator", "org.apache.sshd.server.auth.password.StaticPasswordAuthenticator(boolean)", "public org.apache.sshd.server.auth.password.StaticPasswordAuthenticator(boolean)"], ["boolean", "org.apache.sshd.server.auth.password.StaticPasswordAuthenticator.isAccepted()", "public final boolean isAccepted()"], ["boolean", "org.apache.sshd.server.auth.password.StaticPasswordAuthenticator.authenticate(java.lang.String, java.lang.String, org.apache.sshd.server.session.ServerSession)", "public final boolean authenticate(java.lang.String, java.lang.String, org.apache.sshd.server.session.ServerSession)"], ["org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator", "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator(java.util.Collection<? extends java.security.PublicKey>)", "public org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator(java.util.Collection<? extends java.security.PublicKey>)"], ["java.util.Collection<? extends java.security.PublicKey>", "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator.getKeySet()", "public final java.util.Collection<? extends java.security.PublicKey> getKeySet()"], ["boolean", "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator.authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)", "public boolean authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)"], ["boolean", "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator.authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession, java.util.Collection<? extends java.security.PublicKey>)", "public boolean authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession, java.util.Collection<? extends java.security.PublicKey>)"], ["boolean", "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator.isAccepted()", "public final boolean isAccepted()"], ["boolean", "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator.authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)", "public final boolean authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)"], ["org.apache.sshd.server.auth.UserAuthKeyboardInteractive", "org.apache.sshd.server.auth.UserAuthKeyboardInteractive()", "public org.apache.sshd.server.auth.UserAuthKeyboardInteractive()"], ["org.apache.sshd.server.auth.UserAuthKeyboardInteractiveFactory", "org.apache.sshd.server.auth.UserAuthKeyboardInteractiveFactory()", "public org.apache.sshd.server.auth.UserAuthKeyboardInteractiveFactory()"], ["java.lang.String", "org.apache.sshd.server.auth.UserAuthKeyboardInteractiveFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.server.auth.UserAuth", "org.apache.sshd.server.auth.UserAuthKeyboardInteractiveFactory.create()", "public org.apache.sshd.server.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.server.auth.UserAuthKeyboardInteractiveFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.server.auth.UserAuthNone", "org.apache.sshd.server.auth.UserAuthNone()", "public org.apache.sshd.server.auth.UserAuthNone()"], ["java.lang.Boolean", "org.apache.sshd.server.auth.UserAuthNone.doAuth(org.apache.sshd.common.util.buffer.Buffer, boolean)", "public java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer, boolean)"], ["org.apache.sshd.server.auth.UserAuthNoneFactory", "org.apache.sshd.server.auth.UserAuthNoneFactory()", "public org.apache.sshd.server.auth.UserAuthNoneFactory()"], ["java.lang.String", "org.apache.sshd.server.auth.UserAuthNoneFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.server.auth.UserAuth", "org.apache.sshd.server.auth.UserAuthNoneFactory.create()", "public org.apache.sshd.server.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.server.auth.UserAuthNoneFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.server.auth.UserAuthPassword", "org.apache.sshd.server.auth.UserAuthPassword()", "public org.apache.sshd.server.auth.UserAuthPassword()"], ["java.lang.Boolean", "org.apache.sshd.server.auth.UserAuthPassword.doAuth(org.apache.sshd.common.util.buffer.Buffer, boolean)", "public java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer, boolean) throws java.lang.Exception"], ["org.apache.sshd.server.auth.UserAuthPasswordFactory", "org.apache.sshd.server.auth.UserAuthPasswordFactory()", "public org.apache.sshd.server.auth.UserAuthPasswordFactory()"], ["java.lang.String", "org.apache.sshd.server.auth.UserAuthPasswordFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.server.auth.UserAuth", "org.apache.sshd.server.auth.UserAuthPasswordFactory.create()", "public org.apache.sshd.server.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.server.auth.UserAuthPasswordFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.server.auth.UserAuthPublicKey", "org.apache.sshd.server.auth.UserAuthPublicKey()", "public org.apache.sshd.server.auth.UserAuthPublicKey()"], ["java.lang.Boolean", "org.apache.sshd.server.auth.UserAuthPublicKey.doAuth(org.apache.sshd.common.util.buffer.Buffer, boolean)", "public java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer, boolean) throws java.lang.Exception"], ["org.apache.sshd.server.auth.UserAuthPublicKeyFactory", "org.apache.sshd.server.auth.UserAuthPublicKeyFactory()", "public org.apache.sshd.server.auth.UserAuthPublicKeyFactory()"], ["java.lang.String", "org.apache.sshd.server.auth.UserAuthPublicKeyFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.server.auth.UserAuth", "org.apache.sshd.server.auth.UserAuthPublicKeyFactory.create()", "public org.apache.sshd.server.auth.UserAuth create()"], ["java.lang.Object", "org.apache.sshd.server.auth.UserAuthPublicKeyFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.client.future.OpenFuture", "org.apache.sshd.server.channel.AbstractServerChannel.open(int, int, int, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.client.future.OpenFuture open(int, int, int, org.apache.sshd.common.util.buffer.Buffer)"], ["void", "org.apache.sshd.server.channel.AbstractServerChannel.handleOpenSuccess(int, int, int, org.apache.sshd.common.util.buffer.Buffer)", "public void handleOpenSuccess(int, int, int, org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.server.channel.AbstractServerChannel.handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)", "public void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)"], ["org.apache.sshd.server.channel.AsyncDataReceiver", "org.apache.sshd.server.channel.AsyncDataReceiver(org.apache.sshd.common.channel.Channel)", "public org.apache.sshd.server.channel.AsyncDataReceiver(org.apache.sshd.common.channel.Channel)"], ["org.apache.sshd.common.io.IoInputStream", "org.apache.sshd.server.channel.AsyncDataReceiver.getIn()", "public org.apache.sshd.common.io.IoInputStream getIn()"], ["int", "org.apache.sshd.server.channel.AsyncDataReceiver.data(org.apache.sshd.server.channel.ChannelSession, byte[], int, int)", "public int data(org.apache.sshd.server.channel.ChannelSession, byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.server.channel.AsyncDataReceiver.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.server.channel.ChannelSession$1.onExit(int)", "public void onExit(int)"], ["void", "org.apache.sshd.server.channel.ChannelSession$1.onExit(int, java.lang.String)", "public void onExit(int, java.lang.String)"], ["org.apache.sshd.server.channel.ChannelSession$ChannelSessionRequestHandler", "org.apache.sshd.server.channel.ChannelSession$ChannelSessionRequestHandler(org.apache.sshd.server.channel.ChannelSession)", "public org.apache.sshd.server.channel.ChannelSession$ChannelSessionRequestHandler(org.apache.sshd.server.channel.ChannelSession)"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.channel.ChannelSession$ChannelSessionRequestHandler.process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.channel.ChannelSession$ChannelSessionRequestHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["void", "org.apache.sshd.server.channel.ChannelSession$CommandCloseable$1.run()", "public void run()"], ["void", "org.apache.sshd.server.channel.ChannelSession$CommandCloseable$2.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.server.channel.ChannelSession$CommandCloseable$2.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.server.channel.ChannelSession$CommandCloseable", "org.apache.sshd.server.channel.ChannelSession$CommandCloseable(org.apache.sshd.server.channel.ChannelSession)", "public org.apache.sshd.server.channel.ChannelSession$CommandCloseable(org.apache.sshd.server.channel.ChannelSession)"], ["boolean", "org.apache.sshd.server.channel.ChannelSession$CommandCloseable.isClosed()", "public boolean isClosed()"], ["boolean", "org.apache.sshd.server.channel.ChannelSession$CommandCloseable.isClosing()", "public boolean isClosing()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.server.channel.ChannelSession$CommandCloseable.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["org.apache.sshd.server.channel.ChannelSession$StandardEnvironment", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment()", "public org.apache.sshd.server.channel.ChannelSession$StandardEnvironment()"], ["void", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.addSignalListener(org.apache.sshd.server.SignalListener, org.apache.sshd.server.Signal...)", "public void addSignalListener(org.apache.sshd.server.SignalListener, org.apache.sshd.server.Signal...)"], ["void", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.addSignalListener(org.apache.sshd.server.SignalListener)", "public void addSignalListener(org.apache.sshd.server.SignalListener)"], ["void", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.addSignalListener(org.apache.sshd.server.SignalListener, java.util.Collection<org.apache.sshd.server.Signal>)", "public void addSignalListener(org.apache.sshd.server.SignalListener, java.util.Collection<org.apache.sshd.server.Signal>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.getEnv()", "public java.util.Map<java.lang.String, java.lang.String> getEnv()"], ["java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer>", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.getPtyModes()", "public java.util.Map<org.apache.sshd.common.channel.PtyMode, java.lang.Integer> getPtyModes()"], ["void", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.removeSignalListener(org.apache.sshd.server.SignalListener)", "public void removeSignalListener(org.apache.sshd.server.SignalListener)"], ["void", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.signal(org.apache.sshd.server.Signal)", "public void signal(org.apache.sshd.server.Signal)"], ["void", "org.apache.sshd.server.channel.ChannelSession$StandardEnvironment.set(java.lang.String, java.lang.String)", "public void set(java.lang.String, java.lang.String)"], ["org.apache.sshd.server.channel.ChannelSession", "org.apache.sshd.server.channel.ChannelSession()", "public org.apache.sshd.server.channel.ChannelSession()"], ["void", "org.apache.sshd.server.channel.ChannelSession.handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)", "public void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.server.channel.ChannelSession.handleEof()", "public void handleEof() throws java.io.IOException"], ["java.lang.Boolean", "org.apache.sshd.server.channel.ChannelSession.handleRequest(java.lang.String, org.apache.sshd.common.util.buffer.Buffer)", "public java.lang.Boolean handleRequest(java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException"], ["void", "org.apache.sshd.server.channel.ChannelSession.setDataReceiver(org.apache.sshd.server.channel.ChannelDataReceiver)", "public void setDataReceiver(org.apache.sshd.server.channel.ChannelDataReceiver)"], ["org.apache.sshd.server.channel.ChannelSessionFactory", "org.apache.sshd.server.channel.ChannelSessionFactory()", "public org.apache.sshd.server.channel.ChannelSessionFactory()"], ["java.lang.String", "org.apache.sshd.server.channel.ChannelSessionFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.channel.Channel", "org.apache.sshd.server.channel.ChannelSessionFactory.create()", "public org.apache.sshd.common.channel.Channel create()"], ["java.lang.Object", "org.apache.sshd.server.channel.ChannelSessionFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.server.channel.OpenChannelException", "org.apache.sshd.server.channel.OpenChannelException(int, java.lang.String)", "public org.apache.sshd.server.channel.OpenChannelException(int, java.lang.String)"], ["org.apache.sshd.server.channel.OpenChannelException", "org.apache.sshd.server.channel.OpenChannelException(int, java.lang.String, java.lang.Throwable)", "public org.apache.sshd.server.channel.OpenChannelException(int, java.lang.String, java.lang.Throwable)"], ["int", "org.apache.sshd.server.channel.OpenChannelException.getReasonCode()", "public int getReasonCode()"], ["org.apache.sshd.server.channel.PipeDataReceiver", "org.apache.sshd.server.channel.PipeDataReceiver(org.apache.sshd.common.channel.Window)", "public org.apache.sshd.server.channel.PipeDataReceiver(org.apache.sshd.common.channel.Window)"], ["java.io.InputStream", "org.apache.sshd.server.channel.PipeDataReceiver.getIn()", "public java.io.InputStream getIn()"], ["void", "org.apache.sshd.server.channel.PipeDataReceiver.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.sshd.server.channel.PipeDataReceiver.data(org.apache.sshd.server.channel.ChannelSession, byte[], int, int)", "public int data(org.apache.sshd.server.channel.ChannelSession, byte[], int, int) throws java.io.IOException"], ["org.apache.sshd.server.channel.PuttyRequestHandler", "org.apache.sshd.server.channel.PuttyRequestHandler()", "public org.apache.sshd.server.channel.PuttyRequestHandler()"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.channel.PuttyRequestHandler.process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.channel.PuttyRequestHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.server.command.ScpCommand", "org.apache.sshd.server.command.ScpCommand(java.lang.String, java.util.concurrent.ExecutorService, boolean, int, int, org.apache.sshd.common.scp.ScpTransferEventListener)", "public org.apache.sshd.server.command.ScpCommand(java.lang.String, java.util.concurrent.ExecutorService, boolean, int, int, org.apache.sshd.common.scp.ScpTransferEventListener)"], ["void", "org.apache.sshd.server.command.ScpCommand.setInputStream(java.io.InputStream)", "public void setInputStream(java.io.InputStream)"], ["void", "org.apache.sshd.server.command.ScpCommand.setOutputStream(java.io.OutputStream)", "public void setOutputStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.command.ScpCommand.setErrorStream(java.io.OutputStream)", "public void setErrorStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.command.ScpCommand.setExitCallback(org.apache.sshd.server.ExitCallback)", "public void setExitCallback(org.apache.sshd.server.ExitCallback)"], ["void", "org.apache.sshd.server.command.ScpCommand.setFileSystem(java.nio.file.FileSystem)", "public void setFileSystem(java.nio.file.FileSystem)"], ["void", "org.apache.sshd.server.command.ScpCommand.start(org.apache.sshd.server.Environment)", "public void start(org.apache.sshd.server.Environment) throws java.io.IOException"], ["void", "org.apache.sshd.server.command.ScpCommand.destroy()", "public void destroy()"], ["void", "org.apache.sshd.server.command.ScpCommand.run()", "public void run()"], ["java.lang.String", "org.apache.sshd.server.command.ScpCommand.toString()", "public java.lang.String toString()"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder()", "public org.apache.sshd.server.command.ScpCommandFactory$Builder()"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder.withDelegate(org.apache.sshd.server.CommandFactory)", "public org.apache.sshd.server.command.ScpCommandFactory$Builder withDelegate(org.apache.sshd.server.CommandFactory)"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder.withExecutorService(java.util.concurrent.ExecutorService)", "public org.apache.sshd.server.command.ScpCommandFactory$Builder withExecutorService(java.util.concurrent.ExecutorService)"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder.withShutdownOnExit(boolean)", "public org.apache.sshd.server.command.ScpCommandFactory$Builder withShutdownOnExit(boolean)"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder.withSendBufferSize(int)", "public org.apache.sshd.server.command.ScpCommandFactory$Builder withSendBufferSize(int)"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder.withReceiveBufferSize(int)", "public org.apache.sshd.server.command.ScpCommandFactory$Builder withReceiveBufferSize(int)"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder.addEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)", "public org.apache.sshd.server.command.ScpCommandFactory$Builder addEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)"], ["org.apache.sshd.server.command.ScpCommandFactory$Builder", "org.apache.sshd.server.command.ScpCommandFactory$Builder.removeEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)", "public org.apache.sshd.server.command.ScpCommandFactory$Builder removeEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)"], ["org.apache.sshd.server.command.ScpCommandFactory", "org.apache.sshd.server.command.ScpCommandFactory$Builder.build()", "public org.apache.sshd.server.command.ScpCommandFactory build()"], ["java.lang.Object", "org.apache.sshd.server.command.ScpCommandFactory$Builder.build()", "public java.lang.Object build()"], ["org.apache.sshd.server.command.ScpCommandFactory", "org.apache.sshd.server.command.ScpCommandFactory()", "public org.apache.sshd.server.command.ScpCommandFactory()"], ["org.apache.sshd.server.CommandFactory", "org.apache.sshd.server.command.ScpCommandFactory.getDelegateCommandFactory()", "public org.apache.sshd.server.CommandFactory getDelegateCommandFactory()"], ["void", "org.apache.sshd.server.command.ScpCommandFactory.setDelegateCommandFactory(org.apache.sshd.server.CommandFactory)", "public void setDelegateCommandFactory(org.apache.sshd.server.CommandFactory)"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.server.command.ScpCommandFactory.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["void", "org.apache.sshd.server.command.ScpCommandFactory.setExecutorService(java.util.concurrent.ExecutorService)", "public void setExecutorService(java.util.concurrent.ExecutorService)"], ["boolean", "org.apache.sshd.server.command.ScpCommandFactory.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["void", "org.apache.sshd.server.command.ScpCommandFactory.setShutdownOnExit(boolean)", "public void setShutdownOnExit(boolean)"], ["int", "org.apache.sshd.server.command.ScpCommandFactory.getSendBufferSize()", "public int getSendBufferSize()"], ["void", "org.apache.sshd.server.command.ScpCommandFactory.setSendBufferSize(int)", "public void setSendBufferSize(int)"], ["int", "org.apache.sshd.server.command.ScpCommandFactory.getReceiveBufferSize()", "public int getReceiveBufferSize()"], ["void", "org.apache.sshd.server.command.ScpCommandFactory.setReceiveBufferSize(int)", "public void setReceiveBufferSize(int)"], ["boolean", "org.apache.sshd.server.command.ScpCommandFactory.addEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)", "public boolean addEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)"], ["boolean", "org.apache.sshd.server.command.ScpCommandFactory.removeEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)", "public boolean removeEventListener(org.apache.sshd.common.scp.ScpTransferEventListener)"], ["org.apache.sshd.server.Command", "org.apache.sshd.server.command.ScpCommandFactory.createCommand(java.lang.String)", "public org.apache.sshd.server.Command createCommand(java.lang.String)"], ["org.apache.sshd.server.command.ScpCommandFactory", "org.apache.sshd.server.command.ScpCommandFactory.clone()", "public org.apache.sshd.server.command.ScpCommandFactory clone()"], ["java.lang.Object", "org.apache.sshd.server.command.ScpCommandFactory.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.sshd.server.command.UnknownCommand", "org.apache.sshd.server.command.UnknownCommand(java.lang.String)", "public org.apache.sshd.server.command.UnknownCommand(java.lang.String)"], ["void", "org.apache.sshd.server.command.UnknownCommand.setInputStream(java.io.InputStream)", "public void setInputStream(java.io.InputStream)"], ["void", "org.apache.sshd.server.command.UnknownCommand.setOutputStream(java.io.OutputStream)", "public void setOutputStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.command.UnknownCommand.setErrorStream(java.io.OutputStream)", "public void setErrorStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.command.UnknownCommand.setExitCallback(org.apache.sshd.server.ExitCallback)", "public void setExitCallback(org.apache.sshd.server.ExitCallback)"], ["void", "org.apache.sshd.server.command.UnknownCommand.start(org.apache.sshd.server.Environment)", "public void start(org.apache.sshd.server.Environment) throws java.io.IOException"], ["void", "org.apache.sshd.server.command.UnknownCommand.destroy()", "public void destroy()"], ["org.apache.sshd.server.config.keys.AuthorizedKeyEntry", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry()", "public org.apache.sshd.server.config.keys.AuthorizedKeyEntry()"], ["java.lang.String", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.getComment()", "public java.lang.String getComment()"], ["void", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.setComment(java.lang.String)", "public void setComment(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.getLoginOptions()", "public java.util.Map<java.lang.String, java.lang.String> getLoginOptions()"], ["void", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.setLoginOptions(java.util.Map<java.lang.String, java.lang.String>)", "public void setLoginOptions(java.util.Map<java.lang.String, java.lang.String>)"], ["java.security.PublicKey", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.appendPublicKey(java.lang.Appendable)", "public java.security.PublicKey appendPublicKey(java.lang.Appendable) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.lang.String", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.toString()", "public java.lang.String toString()"], ["org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.fromAuthorizedEntries(java.util.Collection<? extends org.apache.sshd.server.config.keys.AuthorizedKeyEntry>)", "public static org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator fromAuthorizedEntries(java.util.Collection<? extends org.apache.sshd.server.config.keys.AuthorizedKeyEntry>) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.util.List<java.security.PublicKey>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.resolveAuthorizedKeys(java.util.Collection<? extends org.apache.sshd.server.config.keys.AuthorizedKeyEntry>)", "public static java.util.List<java.security.PublicKey> resolveAuthorizedKeys(java.util.Collection<? extends org.apache.sshd.server.config.keys.AuthorizedKeyEntry>) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.io.File", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.getDefaultAuthorizedKeysFile()", "public static java.io.File getDefaultAuthorizedKeysFile()"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readDefaultAuthorizedKeys()", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readDefaultAuthorizedKeys() throws java.io.IOException"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(java.net.URL)", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readAuthorizedKeys(java.net.URL) throws java.io.IOException"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(java.io.File)", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readAuthorizedKeys(java.io.File) throws java.io.IOException"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(java.nio.file.Path, java.nio.file.OpenOption...)", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readAuthorizedKeys(java.nio.file.Path, java.nio.file.OpenOption...) throws java.io.IOException"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(java.lang.String)", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readAuthorizedKeys(java.lang.String) throws java.io.IOException"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(java.io.InputStream, boolean)", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readAuthorizedKeys(java.io.InputStream, boolean) throws java.io.IOException"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(java.io.Reader, boolean)", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readAuthorizedKeys(java.io.Reader, boolean) throws java.io.IOException"], ["java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.readAuthorizedKeys(java.io.BufferedReader)", "public static java.util.List<org.apache.sshd.server.config.keys.AuthorizedKeyEntry> readAuthorizedKeys(java.io.BufferedReader) throws java.io.IOException"], ["org.apache.sshd.server.config.keys.AuthorizedKeyEntry", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.parseAuthorizedKeyEntry(java.lang.String)", "public static org.apache.sshd.server.config.keys.AuthorizedKeyEntry parseAuthorizedKeyEntry(java.lang.String) throws java.lang.IllegalArgumentException"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.sshd.server.config.keys.AuthorizedKeyEntry.parseLoginOptions(java.lang.String)", "public static java.util.Map<java.lang.String, java.lang.String> parseLoginOptions(java.lang.String)"], ["org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator(java.io.File)", "public org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator(java.io.File)"], ["org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator(java.nio.file.Path)", "public org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator(java.nio.file.Path)"], ["org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator(java.nio.file.Path, java.nio.file.LinkOption...)", "public org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator(java.nio.file.Path, java.nio.file.LinkOption...)"], ["boolean", "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator.authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)", "public boolean authenticate(java.lang.String, java.security.PublicKey, org.apache.sshd.server.session.ServerSession)"], ["org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(boolean)", "public org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(boolean)"], ["org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.lang.String, boolean)", "public org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.lang.String, boolean)"], ["org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.io.File, boolean)", "public org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.io.File, boolean)"], ["org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.lang.String, java.io.File, boolean)", "public org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.lang.String, java.io.File, boolean)"], ["org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.nio.file.Path, boolean, java.nio.file.LinkOption...)", "public org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.nio.file.Path, boolean, java.nio.file.LinkOption...)"], ["org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.lang.String, java.nio.file.Path, boolean, java.nio.file.LinkOption...)", "public org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator(java.lang.String, java.nio.file.Path, boolean, java.nio.file.LinkOption...)"], ["java.lang.String", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator.getUsername()", "public final java.lang.String getUsername()"], ["boolean", "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator.isStrict()", "public final boolean isStrict()"], ["java.lang.String", "org.apache.sshd.server.config.keys.ServerIdentity$1.transform(java.lang.String)", "public java.lang.String transform(java.lang.String)"], ["java.lang.Object", "org.apache.sshd.server.config.keys.ServerIdentity$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["<S extends org.apache.sshd.server.SshServer> S", "org.apache.sshd.server.config.keys.ServerIdentity.setKeyPairProvider(S, java.util.Properties, boolean)", "public static <S extends org.apache.sshd.server.SshServer> S setKeyPairProvider(S, java.util.Properties, boolean) throws java.io.IOException, java.security.GeneralSecurityException"], ["org.apache.sshd.common.keyprovider.KeyPairProvider", "org.apache.sshd.server.config.keys.ServerIdentity.loadKeyPairProvider(java.util.Properties, boolean, java.nio.file.LinkOption...)", "public static org.apache.sshd.common.keyprovider.KeyPairProvider loadKeyPairProvider(java.util.Properties, boolean, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.util.Map<java.lang.String, java.security.KeyPair>", "org.apache.sshd.server.config.keys.ServerIdentity.loadIdentities(java.util.Properties, java.nio.file.LinkOption...)", "public static java.util.Map<java.lang.String, java.security.KeyPair> loadIdentities(java.util.Properties, java.nio.file.LinkOption...) throws java.io.IOException, java.security.GeneralSecurityException"], ["java.util.Map<java.lang.String, java.nio.file.Path>", "org.apache.sshd.server.config.keys.ServerIdentity.findIdentities(java.util.Properties, java.nio.file.LinkOption...)", "public static java.util.Map<java.lang.String, java.nio.file.Path> findIdentities(java.util.Properties, java.nio.file.LinkOption...) throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.server.config.keys.ServerIdentity.getIdentityType(java.lang.String)", "public static java.lang.String getIdentityType(java.lang.String)"], ["java.lang.String", "org.apache.sshd.server.config.keys.ServerIdentity.getIdentityFileName(org.apache.sshd.common.NamedResource)", "public static java.lang.String getIdentityFileName(org.apache.sshd.common.NamedResource)"], ["java.lang.String", "org.apache.sshd.server.config.keys.ServerIdentity.getIdentityFileName(java.lang.String)", "public static java.lang.String getIdentityFileName(java.lang.String)"], ["org.apache.sshd.server.forward.AcceptAllForwardingFilter", "org.apache.sshd.server.forward.AcceptAllForwardingFilter()", "public org.apache.sshd.server.forward.AcceptAllForwardingFilter()"], ["org.apache.sshd.server.forward.DirectTcpipFactory", "org.apache.sshd.server.forward.DirectTcpipFactory()", "public org.apache.sshd.server.forward.DirectTcpipFactory()"], ["org.apache.sshd.server.forward.ForwardedTcpipFactory", "org.apache.sshd.server.forward.ForwardedTcpipFactory()", "public org.apache.sshd.server.forward.ForwardedTcpipFactory()"], ["org.apache.sshd.server.forward.ForwardingFilter$Type[]", "org.apache.sshd.server.forward.ForwardingFilter$Type.values()", "public static org.apache.sshd.server.forward.ForwardingFilter$Type[] values()"], ["org.apache.sshd.server.forward.ForwardingFilter$Type", "org.apache.sshd.server.forward.ForwardingFilter$Type.valueOf(java.lang.String)", "public static org.apache.sshd.server.forward.ForwardingFilter$Type valueOf(java.lang.String)"], ["java.lang.String", "org.apache.sshd.server.forward.ForwardingFilter$Type.getName()", "public final java.lang.String getName()"], ["org.apache.sshd.server.forward.ForwardingFilter$Type", "org.apache.sshd.server.forward.ForwardingFilter$Type.fromString(java.lang.String)", "public static org.apache.sshd.server.forward.ForwardingFilter$Type fromString(java.lang.String)"], ["org.apache.sshd.server.forward.ForwardingFilter$Type", "org.apache.sshd.server.forward.ForwardingFilter$Type.fromName(java.lang.String)", "public static org.apache.sshd.server.forward.ForwardingFilter$Type fromName(java.lang.String)"], ["org.apache.sshd.server.forward.ForwardingFilter$Type", "org.apache.sshd.server.forward.ForwardingFilter$Type.fromEnumName(java.lang.String)", "public static org.apache.sshd.server.forward.ForwardingFilter$Type fromEnumName(java.lang.String)"], ["org.apache.sshd.server.forward.RejectAllForwardingFilter", "org.apache.sshd.server.forward.RejectAllForwardingFilter()", "public org.apache.sshd.server.forward.RejectAllForwardingFilter()"], ["org.apache.sshd.server.forward.StaticDecisionForwardingFilter", "org.apache.sshd.server.forward.StaticDecisionForwardingFilter(boolean)", "public org.apache.sshd.server.forward.StaticDecisionForwardingFilter(boolean)"], ["boolean", "org.apache.sshd.server.forward.StaticDecisionForwardingFilter.isAccepted()", "public final boolean isAccepted()"], ["boolean", "org.apache.sshd.server.forward.StaticDecisionForwardingFilter.canForwardAgent(org.apache.sshd.common.session.Session)", "public boolean canForwardAgent(org.apache.sshd.common.session.Session)"], ["boolean", "org.apache.sshd.server.forward.StaticDecisionForwardingFilter.canForwardX11(org.apache.sshd.common.session.Session)", "public boolean canForwardX11(org.apache.sshd.common.session.Session)"], ["boolean", "org.apache.sshd.server.forward.StaticDecisionForwardingFilter.canListen(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.session.Session)", "public boolean canListen(org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.session.Session)"], ["boolean", "org.apache.sshd.server.forward.StaticDecisionForwardingFilter.canConnect(org.apache.sshd.server.forward.ForwardingFilter$Type, org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.session.Session)", "public boolean canConnect(org.apache.sshd.server.forward.ForwardingFilter$Type, org.apache.sshd.common.SshdSocketAddress, org.apache.sshd.common.session.Session)"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$1.messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable)", "public void messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable) throws java.lang.Exception"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$1.sessionCreated(org.apache.sshd.common.io.IoSession)", "public void sessionCreated(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$1.sessionClosed(org.apache.sshd.common.io.IoSession)", "public void sessionClosed(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$1.exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable)", "public void exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable) throws java.lang.Exception"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$2.operationComplete(org.apache.sshd.common.io.IoConnectFuture)", "public void operationComplete(org.apache.sshd.common.io.IoConnectFuture)"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$2.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$3.run()", "public void run()"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$4.operationComplete(org.apache.sshd.common.future.CloseFuture)", "public void operationComplete(org.apache.sshd.common.future.CloseFuture)"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$4.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$5.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.server.forward.TcpipServerChannel$5.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.server.forward.ForwardingFilter$Type", "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory.getType()", "public final org.apache.sshd.server.forward.ForwardingFilter$Type getType()"], ["java.lang.String", "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory.getName()", "public final java.lang.String getName()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["boolean", "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["org.apache.sshd.common.channel.Channel", "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory.create()", "public org.apache.sshd.common.channel.Channel create()"], ["java.lang.Object", "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.server.forward.TcpipServerChannel", "org.apache.sshd.server.forward.TcpipServerChannel(org.apache.sshd.server.forward.ForwardingFilter$Type)", "public org.apache.sshd.server.forward.TcpipServerChannel(org.apache.sshd.server.forward.ForwardingFilter$Type)"], ["org.apache.sshd.server.forward.ForwardingFilter$Type", "org.apache.sshd.server.forward.TcpipServerChannel.getChannelType()", "public final org.apache.sshd.server.forward.ForwardingFilter$Type getChannelType()"], ["org.apache.sshd.common.future.CloseFuture", "org.apache.sshd.server.forward.TcpipServerChannel.close(boolean)", "public org.apache.sshd.common.future.CloseFuture close(boolean)"], ["org.apache.sshd.server.global.CancelTcpipForwardHandler", "org.apache.sshd.server.global.CancelTcpipForwardHandler()", "public org.apache.sshd.server.global.CancelTcpipForwardHandler()"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.CancelTcpipForwardHandler.process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.CancelTcpipForwardHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.server.global.KeepAliveHandler", "org.apache.sshd.server.global.KeepAliveHandler()", "public org.apache.sshd.server.global.KeepAliveHandler()"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.KeepAliveHandler.process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.KeepAliveHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.server.global.NoMoreSessionsHandler", "org.apache.sshd.server.global.NoMoreSessionsHandler()", "public org.apache.sshd.server.global.NoMoreSessionsHandler()"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.NoMoreSessionsHandler.process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.NoMoreSessionsHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.server.global.TcpipForwardHandler", "org.apache.sshd.server.global.TcpipForwardHandler()", "public org.apache.sshd.server.global.TcpipForwardHandler()"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.TcpipForwardHandler.process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.channel.RequestHandler$Result", "org.apache.sshd.server.global.TcpipForwardHandler.process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer)", "public org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object, java.lang.String, boolean, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["void", "org.apache.sshd.server.jaas.JaasPasswordAuthenticator$1.handle(javax.security.auth.callback.Callback[])", "public void handle(javax.security.auth.callback.Callback[]) throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException"], ["org.apache.sshd.server.jaas.JaasPasswordAuthenticator", "org.apache.sshd.server.jaas.JaasPasswordAuthenticator()", "public org.apache.sshd.server.jaas.JaasPasswordAuthenticator()"], ["org.apache.sshd.server.jaas.JaasPasswordAuthenticator", "org.apache.sshd.server.jaas.JaasPasswordAuthenticator(java.lang.String)", "public org.apache.sshd.server.jaas.JaasPasswordAuthenticator(java.lang.String)"], ["java.lang.String", "org.apache.sshd.server.jaas.JaasPasswordAuthenticator.getDomain()", "public java.lang.String getDomain()"], ["void", "org.apache.sshd.server.jaas.JaasPasswordAuthenticator.setDomain(java.lang.String)", "public void setDomain(java.lang.String)"], ["boolean", "org.apache.sshd.server.jaas.JaasPasswordAuthenticator.authenticate(java.lang.String, java.lang.String, org.apache.sshd.server.session.ServerSession)", "public boolean authenticate(java.lang.String, java.lang.String, org.apache.sshd.server.session.ServerSession)"], ["boolean", "org.apache.sshd.server.jaas.JaasPasswordAuthenticator.authenticate(java.lang.String, java.lang.String)", "public boolean authenticate(java.lang.String, java.lang.String)"], ["void", "org.apache.sshd.server.kex.AbstractDHServerKeyExchange.init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[])", "public void init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[]) throws java.lang.Exception"], ["java.security.PublicKey", "org.apache.sshd.server.kex.AbstractDHServerKeyExchange.getServerKey()", "public java.security.PublicKey getServerKey()"], ["org.apache.sshd.common.kex.KeyExchange", "org.apache.sshd.server.kex.DHGEXServer$1.create()", "public org.apache.sshd.common.kex.KeyExchange create()"], ["java.lang.String", "org.apache.sshd.server.kex.DHGEXServer$1.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.server.kex.DHGEXServer$1.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.sshd.server.kex.DHGEXServer$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.kex.KeyExchangeFactory", "org.apache.sshd.server.kex.DHGEXServer.newFactory(org.apache.sshd.common.kex.DHFactory)", "public static org.apache.sshd.common.kex.KeyExchangeFactory newFactory(org.apache.sshd.common.kex.DHFactory)"], ["void", "org.apache.sshd.server.kex.DHGEXServer.init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[])", "public void init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[]) throws java.lang.Exception"], ["boolean", "org.apache.sshd.server.kex.DHGEXServer.next(org.apache.sshd.common.util.buffer.Buffer)", "public boolean next(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.kex.KeyExchange", "org.apache.sshd.server.kex.DHGServer$1.create()", "public org.apache.sshd.common.kex.KeyExchange create()"], ["java.lang.String", "org.apache.sshd.server.kex.DHGServer$1.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.apache.sshd.server.kex.DHGServer$1.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.sshd.server.kex.DHGServer$1.create()", "public java.lang.Object create()"], ["org.apache.sshd.common.kex.KeyExchangeFactory", "org.apache.sshd.server.kex.DHGServer.newFactory(org.apache.sshd.common.kex.DHFactory)", "public static org.apache.sshd.common.kex.KeyExchangeFactory newFactory(org.apache.sshd.common.kex.DHFactory)"], ["void", "org.apache.sshd.server.kex.DHGServer.init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[])", "public void init(org.apache.sshd.common.session.AbstractSession, byte[], byte[], byte[], byte[]) throws java.lang.Exception"], ["boolean", "org.apache.sshd.server.kex.DHGServer.next(org.apache.sshd.common.util.buffer.Buffer)", "public boolean next(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.server.kex.Moduli$DhGroup", "org.apache.sshd.server.kex.Moduli$DhGroup()", "public org.apache.sshd.server.kex.Moduli$DhGroup()"], ["java.util.List<org.apache.sshd.server.kex.Moduli$DhGroup>", "org.apache.sshd.server.kex.Moduli.parseModuli(java.net.URL)", "public static java.util.List<org.apache.sshd.server.kex.Moduli$DhGroup> parseModuli(java.net.URL) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.getPath()", "public java.nio.file.Path getPath()"], ["void", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.setFile(java.io.File)", "public void setFile(java.io.File)"], ["void", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.setPath(java.nio.file.Path)", "public void setPath(java.nio.file.Path)"], ["java.lang.String", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.getAlgorithm()", "public java.lang.String getAlgorithm()"], ["void", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.setAlgorithm(java.lang.String)", "public void setAlgorithm(java.lang.String)"], ["int", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.getKeySize()", "public int getKeySize()"], ["void", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.setKeySize(int)", "public void setKeySize(int)"], ["java.security.spec.AlgorithmParameterSpec", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.getKeySpec()", "public java.security.spec.AlgorithmParameterSpec getKeySpec()"], ["void", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.setKeySpec(java.security.spec.AlgorithmParameterSpec)", "public void setKeySpec(java.security.spec.AlgorithmParameterSpec)"], ["boolean", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.isOverwriteAllowed()", "public boolean isOverwriteAllowed()"], ["void", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.setOverwriteAllowed(boolean)", "public void setOverwriteAllowed(boolean)"], ["java.lang.Iterable<java.security.KeyPair>", "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider.loadKeys()", "public synchronized java.lang.Iterable<java.security.KeyPair> loadKeys()"], ["org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider", "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider()", "public org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider()"], ["org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider", "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider(java.io.File)", "public org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider(java.io.File)"], ["org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider", "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider(java.nio.file.Path)", "public org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider(java.nio.file.Path)"], ["org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>", "org.apache.sshd.server.ServerBuilder$1.transform(org.apache.sshd.common.kex.DHFactory)", "public org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange> transform(org.apache.sshd.common.kex.DHFactory)"], ["java.lang.Object", "org.apache.sshd.server.ServerBuilder$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.apache.sshd.server.ServerBuilder", "org.apache.sshd.server.ServerBuilder()", "public org.apache.sshd.server.ServerBuilder()"], ["org.apache.sshd.server.ServerBuilder", "org.apache.sshd.server.ServerBuilder.publickeyAuthenticator(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator)", "public org.apache.sshd.server.ServerBuilder publickeyAuthenticator(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator)"], ["org.apache.sshd.server.SshServer", "org.apache.sshd.server.ServerBuilder.build(boolean)", "public org.apache.sshd.server.SshServer build(boolean)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>", "org.apache.sshd.server.ServerBuilder.setUpDefaultKeyExchanges(boolean)", "public static java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>> setUpDefaultKeyExchanges(boolean)"], ["org.apache.sshd.server.ServerBuilder", "org.apache.sshd.server.ServerBuilder.builder()", "public static org.apache.sshd.server.ServerBuilder builder()"], ["org.apache.sshd.common.AbstractFactoryManager", "org.apache.sshd.server.ServerBuilder.build(boolean)", "public org.apache.sshd.common.AbstractFactoryManager build(boolean)"], ["java.lang.String", "org.apache.sshd.server.session.ServerConnectionService.initAgentForward()", "public java.lang.String initAgentForward() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.server.session.ServerConnectionService.createX11Display(boolean, java.lang.String, java.lang.String, int)", "public java.lang.String createX11Display(boolean, java.lang.String, java.lang.String, int) throws java.io.IOException"], ["org.apache.sshd.server.session.ServerConnectionServiceFactory", "org.apache.sshd.server.session.ServerConnectionServiceFactory()", "public org.apache.sshd.server.session.ServerConnectionServiceFactory()"], ["java.lang.String", "org.apache.sshd.server.session.ServerConnectionServiceFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.Service", "org.apache.sshd.server.session.ServerConnectionServiceFactory.create(org.apache.sshd.common.session.Session)", "public org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session) throws java.io.IOException"], ["void", "org.apache.sshd.server.session.ServerSessionImpl$1.operationComplete(org.apache.sshd.common.io.IoWriteFuture)", "public void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"], ["void", "org.apache.sshd.server.session.ServerSessionImpl$1.operationComplete(org.apache.sshd.common.future.SshFuture)", "public void operationComplete(org.apache.sshd.common.future.SshFuture)"], ["org.apache.sshd.server.session.ServerSessionImpl", "org.apache.sshd.server.session.ServerSessionImpl(org.apache.sshd.server.ServerFactoryManager, org.apache.sshd.common.io.IoSession)", "public org.apache.sshd.server.session.ServerSessionImpl(org.apache.sshd.server.ServerFactoryManager, org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["org.apache.sshd.server.ServerFactoryManager", "org.apache.sshd.server.session.ServerSessionImpl.getFactoryManager()", "public org.apache.sshd.server.ServerFactoryManager getFactoryManager()"], ["void", "org.apache.sshd.server.session.ServerSessionImpl.startService(java.lang.String)", "public void startService(java.lang.String) throws java.lang.Exception"], ["java.security.KeyPair", "org.apache.sshd.server.session.ServerSessionImpl.getHostKey()", "public java.security.KeyPair getHostKey()"], ["int", "org.apache.sshd.server.session.ServerSessionImpl.getActiveSessionCountForUser(java.lang.String)", "public int getActiveSessionCountForUser(java.lang.String)"], ["long", "org.apache.sshd.server.session.ServerSessionImpl.getId()", "public long getId()"], ["org.apache.sshd.common.FactoryManager", "org.apache.sshd.server.session.ServerSessionImpl.getFactoryManager()", "public org.apache.sshd.common.FactoryManager getFactoryManager()"], ["org.apache.sshd.server.session.ServerUserAuthService", "org.apache.sshd.server.session.ServerUserAuthService(org.apache.sshd.common.session.Session)", "public org.apache.sshd.server.session.ServerUserAuthService(org.apache.sshd.common.session.Session) throws org.apache.sshd.common.SshException"], ["void", "org.apache.sshd.server.session.ServerUserAuthService.start()", "public void start()"], ["org.apache.sshd.server.session.ServerSession", "org.apache.sshd.server.session.ServerUserAuthService.getSession()", "public org.apache.sshd.server.session.ServerSession getSession()"], ["void", "org.apache.sshd.server.session.ServerUserAuthService.process(int, org.apache.sshd.common.util.buffer.Buffer)", "public void process(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception"], ["org.apache.sshd.common.session.Session", "org.apache.sshd.server.session.ServerUserAuthService.getSession()", "public org.apache.sshd.common.session.Session getSession()"], ["org.apache.sshd.server.session.ServerUserAuthServiceFactory", "org.apache.sshd.server.session.ServerUserAuthServiceFactory()", "public org.apache.sshd.server.session.ServerUserAuthServiceFactory()"], ["java.lang.String", "org.apache.sshd.server.session.ServerUserAuthServiceFactory.getName()", "public java.lang.String getName()"], ["org.apache.sshd.common.Service", "org.apache.sshd.server.session.ServerUserAuthServiceFactory.create(org.apache.sshd.common.session.Session)", "public org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session) throws java.io.IOException"], ["org.apache.sshd.server.session.SessionFactory", "org.apache.sshd.server.session.SessionFactory()", "public org.apache.sshd.server.session.SessionFactory()"], ["org.apache.sshd.server.session.SessionFactory", "org.apache.sshd.server.session.SessionFactory(org.apache.sshd.server.ServerFactoryManager)", "public org.apache.sshd.server.session.SessionFactory(org.apache.sshd.server.ServerFactoryManager)"], ["org.apache.sshd.server.ServerFactoryManager", "org.apache.sshd.server.session.SessionFactory.getServer()", "public org.apache.sshd.server.ServerFactoryManager getServer()"], ["void", "org.apache.sshd.server.session.SessionFactory.setServer(org.apache.sshd.server.ServerFactoryManager)", "public void setServer(org.apache.sshd.server.ServerFactoryManager)"], ["org.apache.sshd.server.shell.InteractiveProcessShellFactory", "org.apache.sshd.server.shell.InteractiveProcessShellFactory()", "public org.apache.sshd.server.shell.InteractiveProcessShellFactory()"], ["java.lang.String[]", "org.apache.sshd.server.shell.InteractiveProcessShellFactory.resolveDefaultInteractiveCommand()", "public static java.lang.String[] resolveDefaultInteractiveCommand()"], ["java.lang.String[]", "org.apache.sshd.server.shell.InteractiveProcessShellFactory.resolveInteractiveCommand(boolean)", "public static java.lang.String[] resolveInteractiveCommand(boolean)"], ["void", "org.apache.sshd.server.shell.InvertedShellWrapper$1.run()", "public void run()"], ["org.apache.sshd.server.shell.InvertedShellWrapper", "org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell)", "public org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell)"], ["org.apache.sshd.server.shell.InvertedShellWrapper", "org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, java.util.concurrent.Executor)", "public org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, java.util.concurrent.Executor)"], ["org.apache.sshd.server.shell.InvertedShellWrapper", "org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, int)", "public org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, int)"], ["org.apache.sshd.server.shell.InvertedShellWrapper", "org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, java.util.concurrent.Executor, int)", "public org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, java.util.concurrent.Executor, int)"], ["org.apache.sshd.server.shell.InvertedShellWrapper", "org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, java.util.concurrent.Executor, boolean, int)", "public org.apache.sshd.server.shell.InvertedShellWrapper(org.apache.sshd.server.shell.InvertedShell, java.util.concurrent.Executor, boolean, int)"], ["void", "org.apache.sshd.server.shell.InvertedShellWrapper.setInputStream(java.io.InputStream)", "public void setInputStream(java.io.InputStream)"], ["void", "org.apache.sshd.server.shell.InvertedShellWrapper.setOutputStream(java.io.OutputStream)", "public void setOutputStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.shell.InvertedShellWrapper.setErrorStream(java.io.OutputStream)", "public void setErrorStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.shell.InvertedShellWrapper.setExitCallback(org.apache.sshd.server.ExitCallback)", "public void setExitCallback(org.apache.sshd.server.ExitCallback)"], ["void", "org.apache.sshd.server.shell.InvertedShellWrapper.setSession(org.apache.sshd.server.session.ServerSession)", "public void setSession(org.apache.sshd.server.session.ServerSession)"], ["synchronized", "org.apache.sshd.server.shell.InvertedShellWrapper.void start(org.apache.sshd.server.Environment)", "public synchronized void start(org.apache.sshd.server.Environment) throws java.io.IOException"], ["synchronized", "org.apache.sshd.server.shell.InvertedShellWrapper.void destroy()", "public synchronized void destroy()"], ["org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream(org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell, java.io.InputStream)", "public org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream(org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell, java.io.InputStream)"], ["int", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream.available()", "public int available() throws java.io.IOException"], ["synchronized", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream.int read()", "public synchronized int read() throws java.io.IOException"], ["synchronized", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream.int read(byte[], int, int)", "public synchronized int read(byte[], int, int) throws java.io.IOException"], ["org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterOutputStream", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterOutputStream(org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell, java.io.OutputStream, org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream)", "public org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterOutputStream(org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell, java.io.OutputStream, org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterInputStream)"], ["void", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell$TtyFilterOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell(org.apache.sshd.server.shell.ProcessShellFactory)", "public org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell(org.apache.sshd.server.shell.ProcessShellFactory)"], ["void", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell.start(java.util.Map<java.lang.String, java.lang.String>)", "public void start(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["java.io.OutputStream", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell.getInputStream()", "public java.io.OutputStream getInputStream()"], ["java.io.InputStream", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell.getOutputStream()", "public java.io.InputStream getOutputStream()"], ["java.io.InputStream", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell.getErrorStream()", "public java.io.InputStream getErrorStream()"], ["boolean", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell.isAlive()", "public boolean isAlive()"], ["int", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell.exitValue()", "public int exitValue()"], ["void", "org.apache.sshd.server.shell.ProcessShellFactory$ProcessShell.destroy()", "public void destroy()"], ["org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions[]", "org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions.values()", "public static org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions[] values()"], ["org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions", "org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions.valueOf(java.lang.String)", "public static org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions valueOf(java.lang.String)"], ["java.util.Set<org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions>", "org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions.resolveDefaultTtyOptions()", "public static java.util.Set<org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions> resolveDefaultTtyOptions()"], ["java.util.Set<org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions>", "org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions.resolveTtyOptions(boolean)", "public static java.util.Set<org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions> resolveTtyOptions(boolean)"], ["org.apache.sshd.server.shell.ProcessShellFactory", "org.apache.sshd.server.shell.ProcessShellFactory()", "public org.apache.sshd.server.shell.ProcessShellFactory()"], ["org.apache.sshd.server.shell.ProcessShellFactory", "org.apache.sshd.server.shell.ProcessShellFactory(java.lang.String[])", "public org.apache.sshd.server.shell.ProcessShellFactory(java.lang.String[])"], ["org.apache.sshd.server.shell.ProcessShellFactory", "org.apache.sshd.server.shell.ProcessShellFactory(java.lang.String[], java.util.Collection<org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions>)", "public org.apache.sshd.server.shell.ProcessShellFactory(java.lang.String[], java.util.Collection<org.apache.sshd.server.shell.ProcessShellFactory$TtyOptions>)"], ["java.lang.String[]", "org.apache.sshd.server.shell.ProcessShellFactory.getCommand()", "public java.lang.String[] getCommand()"], ["void", "org.apache.sshd.server.shell.ProcessShellFactory.setCommand(java.lang.String[])", "public void setCommand(java.lang.String[])"], ["org.apache.sshd.server.Command", "org.apache.sshd.server.shell.ProcessShellFactory.create()", "public org.apache.sshd.server.Command create()"], ["java.lang.Object", "org.apache.sshd.server.shell.ProcessShellFactory.create()", "public java.lang.Object create()"], ["org.apache.sshd.server.Signal[]", "org.apache.sshd.server.Signal.values()", "public static org.apache.sshd.server.Signal[] values()"], ["org.apache.sshd.server.Signal", "org.apache.sshd.server.Signal.valueOf(java.lang.String)", "public static org.apache.sshd.server.Signal valueOf(java.lang.String)"], ["org.apache.sshd.server.Signal", "org.apache.sshd.server.Signal.get(java.lang.String)", "public static org.apache.sshd.server.Signal get(java.lang.String)"], ["int", "org.apache.sshd.server.Signal.getNumeric()", "public int getNumeric()"], ["org.apache.sshd.server.SshServer", "org.apache.sshd.server.SshServer$1.create()", "public org.apache.sshd.server.SshServer create()"], ["java.lang.Object", "org.apache.sshd.server.SshServer$1.create()", "public java.lang.Object create()"], ["void", "org.apache.sshd.server.SshServer$2.run()", "public void run()"], ["void", "org.apache.sshd.server.SshServer$3.run()", "public void run()"], ["boolean", "org.apache.sshd.server.SshServer$4.authenticate(java.lang.String, java.lang.String, org.apache.sshd.server.session.ServerSession)", "public boolean authenticate(java.lang.String, java.lang.String, org.apache.sshd.server.session.ServerSession)"], ["org.apache.sshd.server.Command", "org.apache.sshd.server.SshServer$5.createCommand(java.lang.String)", "public org.apache.sshd.server.Command createCommand(java.lang.String)"], ["org.apache.sshd.server.SshServer", "org.apache.sshd.server.SshServer()", "public org.apache.sshd.server.SshServer()"], ["java.lang.String", "org.apache.sshd.server.SshServer.getHost()", "public java.lang.String getHost()"], ["void", "org.apache.sshd.server.SshServer.setHost(java.lang.String)", "public void setHost(java.lang.String)"], ["int", "org.apache.sshd.server.SshServer.getPort()", "public int getPort()"], ["void", "org.apache.sshd.server.SshServer.setPort(int)", "public void setPort(int)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.auth.UserAuth>>", "org.apache.sshd.server.SshServer.getUserAuthFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.auth.UserAuth>> getUserAuthFactories()"], ["void", "org.apache.sshd.server.SshServer.setUserAuthFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.auth.UserAuth>>)", "public void setUserAuthFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.auth.UserAuth>>)"], ["org.apache.sshd.common.Factory<org.apache.sshd.server.Command>", "org.apache.sshd.server.SshServer.getShellFactory()", "public org.apache.sshd.common.Factory<org.apache.sshd.server.Command> getShellFactory()"], ["void", "org.apache.sshd.server.SshServer.setShellFactory(org.apache.sshd.common.Factory<org.apache.sshd.server.Command>)", "public void setShellFactory(org.apache.sshd.common.Factory<org.apache.sshd.server.Command>)"], ["org.apache.sshd.server.session.SessionFactory", "org.apache.sshd.server.SshServer.getSessionFactory()", "public org.apache.sshd.server.session.SessionFactory getSessionFactory()"], ["void", "org.apache.sshd.server.SshServer.setSessionFactory(org.apache.sshd.server.session.SessionFactory)", "public void setSessionFactory(org.apache.sshd.server.session.SessionFactory)"], ["org.apache.sshd.server.CommandFactory", "org.apache.sshd.server.SshServer.getCommandFactory()", "public org.apache.sshd.server.CommandFactory getCommandFactory()"], ["void", "org.apache.sshd.server.SshServer.setCommandFactory(org.apache.sshd.server.CommandFactory)", "public void setCommandFactory(org.apache.sshd.server.CommandFactory)"], ["java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.Command>>", "org.apache.sshd.server.SshServer.getSubsystemFactories()", "public java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.Command>> getSubsystemFactories()"], ["void", "org.apache.sshd.server.SshServer.setSubsystemFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.Command>>)", "public void setSubsystemFactories(java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.Command>>)"], ["org.apache.sshd.server.auth.password.PasswordAuthenticator", "org.apache.sshd.server.SshServer.getPasswordAuthenticator()", "public org.apache.sshd.server.auth.password.PasswordAuthenticator getPasswordAuthenticator()"], ["void", "org.apache.sshd.server.SshServer.setPasswordAuthenticator(org.apache.sshd.server.auth.password.PasswordAuthenticator)", "public void setPasswordAuthenticator(org.apache.sshd.server.auth.password.PasswordAuthenticator)"], ["org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator", "org.apache.sshd.server.SshServer.getPublickeyAuthenticator()", "public org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator getPublickeyAuthenticator()"], ["void", "org.apache.sshd.server.SshServer.setPublickeyAuthenticator(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator)", "public void setPublickeyAuthenticator(org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator)"], ["org.apache.sshd.server.auth.gss.GSSAuthenticator", "org.apache.sshd.server.SshServer.getGSSAuthenticator()", "public org.apache.sshd.server.auth.gss.GSSAuthenticator getGSSAuthenticator()"], ["void", "org.apache.sshd.server.SshServer.setGSSAuthenticator(org.apache.sshd.server.auth.gss.GSSAuthenticator)", "public void setGSSAuthenticator(org.apache.sshd.server.auth.gss.GSSAuthenticator)"], ["void", "org.apache.sshd.server.SshServer.setTcpipForwardingFilter(org.apache.sshd.server.forward.ForwardingFilter)", "public void setTcpipForwardingFilter(org.apache.sshd.server.forward.ForwardingFilter)"], ["void", "org.apache.sshd.server.SshServer.start()", "public void start() throws java.io.IOException"], ["void", "org.apache.sshd.server.SshServer.stop()", "public void stop() throws java.io.IOException"], ["void", "org.apache.sshd.server.SshServer.stop(boolean)", "public void stop(boolean) throws java.io.IOException"], ["void", "org.apache.sshd.server.SshServer.open()", "public void open() throws java.io.IOException"], ["java.util.List<org.apache.sshd.common.session.AbstractSession>", "org.apache.sshd.server.SshServer.getActiveSessions()", "public java.util.List<org.apache.sshd.common.session.AbstractSession> getActiveSessions()"], ["java.lang.String", "org.apache.sshd.server.SshServer.toString()", "public java.lang.String toString()"], ["org.apache.sshd.server.SshServer", "org.apache.sshd.server.SshServer.setUpDefaultServer()", "public static org.apache.sshd.server.SshServer setUpDefaultServer()"], ["void", "org.apache.sshd.server.SshServer.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["org.apache.sshd.server.subsystem.sftp.DefaultGroupPrincipal", "org.apache.sshd.server.subsystem.sftp.DefaultGroupPrincipal(java.lang.String)", "public org.apache.sshd.server.subsystem.sftp.DefaultGroupPrincipal(java.lang.String)"], ["org.apache.sshd.server.subsystem.sftp.DefaultUserPrincipal", "org.apache.sshd.server.subsystem.sftp.DefaultUserPrincipal(java.lang.String)", "public org.apache.sshd.server.subsystem.sftp.DefaultUserPrincipal(java.lang.String)"], ["org.apache.sshd.server.subsystem.sftp.DirectoryHandle", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle(java.nio.file.Path)", "public org.apache.sshd.server.subsystem.sftp.DirectoryHandle(java.nio.file.Path) throws java.io.IOException"], ["boolean", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.isDone()", "public boolean isDone()"], ["void", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.markDone()", "public void markDone()"], ["boolean", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.isSendDot()", "public boolean isSendDot()"], ["void", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.markDotSent()", "public void markDotSent()"], ["boolean", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.isSendDotDot()", "public boolean isSendDotDot()"], ["void", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.markDotDotSent()", "public void markDotDotSent()"], ["boolean", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.hasNext()", "public boolean hasNext()"], ["java.nio.file.Path", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.next()", "public java.nio.file.Path next()"], ["void", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.remove()", "public void remove()"], ["void", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.close()", "public void close() throws java.io.IOException"], ["java.lang.Object", "org.apache.sshd.server.subsystem.sftp.DirectoryHandle.next()", "public java.lang.Object next()"], ["java.lang.String", "org.apache.sshd.server.subsystem.sftp.FileHandle$1.name()", "public java.lang.String name()"], ["java.lang.Object", "org.apache.sshd.server.subsystem.sftp.FileHandle$1.value()", "public java.lang.Object value()"], ["org.apache.sshd.server.subsystem.sftp.FileHandle", "org.apache.sshd.server.subsystem.sftp.FileHandle(org.apache.sshd.server.subsystem.sftp.SftpSubsystem, java.nio.file.Path, int, int, java.util.Map<java.lang.String, java.lang.Object>)", "public org.apache.sshd.server.subsystem.sftp.FileHandle(org.apache.sshd.server.subsystem.sftp.SftpSubsystem, java.nio.file.Path, int, int, java.util.Map<java.lang.String, java.lang.Object>) throws java.io.IOException"], ["java.nio.channels.FileChannel", "org.apache.sshd.server.subsystem.sftp.FileHandle.getFileChannel()", "public final java.nio.channels.FileChannel getFileChannel()"], ["int", "org.apache.sshd.server.subsystem.sftp.FileHandle.getAccessMask()", "public int getAccessMask()"], ["boolean", "org.apache.sshd.server.subsystem.sftp.FileHandle.isOpenAppend()", "public boolean isOpenAppend()"], ["int", "org.apache.sshd.server.subsystem.sftp.FileHandle.read(byte[], long)", "public int read(byte[], long) throws java.io.IOException"], ["int", "org.apache.sshd.server.subsystem.sftp.FileHandle.read(byte[], int, int, long)", "public int read(byte[], int, int, long) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.FileHandle.append(byte[])", "public void append(byte[]) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.FileHandle.append(byte[], int, int)", "public void append(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.FileHandle.write(byte[], long)", "public void write(byte[], long) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.FileHandle.write(byte[], int, int, long)", "public void write(byte[], int, int, long) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.FileHandle.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.FileHandle.lock(long, long, int)", "public void lock(long, long, int) throws java.io.IOException"], ["boolean", "org.apache.sshd.server.subsystem.sftp.FileHandle.unlock(long, long)", "public boolean unlock(long, long) throws java.io.IOException"], ["java.nio.file.Path", "org.apache.sshd.server.subsystem.sftp.Handle.getFile()", "public java.nio.file.Path getFile()"], ["void", "org.apache.sshd.server.subsystem.sftp.Handle.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.apache.sshd.server.subsystem.sftp.Handle.toString()", "public java.lang.String toString()"], ["org.apache.sshd.server.subsystem.sftp.InvalidHandleException", "org.apache.sshd.server.subsystem.sftp.InvalidHandleException(java.lang.String, org.apache.sshd.server.subsystem.sftp.Handle, java.lang.Class<? extends org.apache.sshd.server.subsystem.sftp.Handle>)", "public org.apache.sshd.server.subsystem.sftp.InvalidHandleException(java.lang.String, org.apache.sshd.server.subsystem.sftp.Handle, java.lang.Class<? extends org.apache.sshd.server.subsystem.sftp.Handle>)"], ["org.apache.sshd.server.subsystem.sftp.PrincipalBase", "org.apache.sshd.server.subsystem.sftp.PrincipalBase(java.lang.String)", "public org.apache.sshd.server.subsystem.sftp.PrincipalBase(java.lang.String)"], ["java.lang.String", "org.apache.sshd.server.subsystem.sftp.PrincipalBase.getName()", "public final java.lang.String getName()"], ["boolean", "org.apache.sshd.server.subsystem.sftp.PrincipalBase.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.sshd.server.subsystem.sftp.PrincipalBase.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.sshd.server.subsystem.sftp.PrincipalBase.toString()", "public java.lang.String toString()"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpHelper.writeAttrs(int, org.apache.sshd.common.util.buffer.Buffer, java.util.Map<java.lang.String, ?>)", "public static void writeAttrs(int, org.apache.sshd.common.util.buffer.Buffer, java.util.Map<java.lang.String, ?>) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpHelper.writeAttrsV3(org.apache.sshd.common.util.buffer.Buffer, java.util.Map<java.lang.String, ?>)", "public static void writeAttrsV3(org.apache.sshd.common.util.buffer.Buffer, java.util.Map<java.lang.String, ?>) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpHelper.writeAttrsV4(org.apache.sshd.common.util.buffer.Buffer, java.util.Map<java.lang.String, ?>)", "public static void writeAttrsV4(org.apache.sshd.common.util.buffer.Buffer, java.util.Map<java.lang.String, ?>) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpHelper.putFileTime(org.apache.sshd.common.util.buffer.Buffer, int, java.nio.file.attribute.FileTime)", "public static void putFileTime(org.apache.sshd.common.util.buffer.Buffer, int, java.nio.file.attribute.FileTime)"], ["int", "org.apache.sshd.server.subsystem.sftp.SftpHelper.attributesToPermissions(boolean, boolean, boolean, java.util.Collection<java.nio.file.attribute.PosixFilePermission>)", "public static int attributesToPermissions(boolean, boolean, boolean, java.util.Collection<java.nio.file.attribute.PosixFilePermission>)"], ["java.util.Set<java.nio.file.attribute.PosixFilePermission>", "org.apache.sshd.server.subsystem.sftp.SftpHelper.permissionsToAttributes(int)", "public static java.util.Set<java.nio.file.attribute.PosixFilePermission> permissionsToAttributes(int)"], ["int", "org.apache.sshd.server.subsystem.sftp.SftpHelper.resolveSubstatus(java.lang.Exception)", "public static int resolveSubstatus(java.lang.Exception)"], ["java.nio.file.attribute.AclEntry", "org.apache.sshd.server.subsystem.sftp.SftpHelper.buildAclEntry(int, int, int, java.lang.String)", "public static java.nio.file.attribute.AclEntry buildAclEntry(int, int, int, java.lang.String)"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystem", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem(java.util.concurrent.ExecutorService, boolean, org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy)", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystem(java.util.concurrent.ExecutorService, boolean, org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy)"], ["int", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.getVersion()", "public int getVersion()"], ["org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.getUnsupportedAttributePolicy()", "public final org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy getUnsupportedAttributePolicy()"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.setSession(org.apache.sshd.server.session.ServerSession)", "public void setSession(org.apache.sshd.server.session.ServerSession)"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.setFileSystem(java.nio.file.FileSystem)", "public void setFileSystem(java.nio.file.FileSystem)"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.setExitCallback(org.apache.sshd.server.ExitCallback)", "public void setExitCallback(org.apache.sshd.server.ExitCallback)"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.setInputStream(java.io.InputStream)", "public void setInputStream(java.io.InputStream)"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.setOutputStream(java.io.OutputStream)", "public void setOutputStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.setErrorStream(java.io.OutputStream)", "public void setErrorStream(java.io.OutputStream)"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.start(org.apache.sshd.server.Environment)", "public void start(org.apache.sshd.server.Environment) throws java.io.IOException"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.run()", "public void run()"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystem.destroy()", "public void destroy()"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder()", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder()"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder.withExecutorService(java.util.concurrent.ExecutorService)", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder withExecutorService(java.util.concurrent.ExecutorService)"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder.withShutdownOnExit(boolean)", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder withShutdownOnExit(boolean)"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder.withUnsupportedAttributePolicy(org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy)", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder withUnsupportedAttributePolicy(org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy)"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder.build()", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory build()"], ["java.lang.Object", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory$Builder.build()", "public java.lang.Object build()"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory()", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory()"], ["java.lang.String", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.getName()", "public java.lang.String getName()"], ["java.util.concurrent.ExecutorService", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.getExecutorService()", "public java.util.concurrent.ExecutorService getExecutorService()"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.setExecutorService(java.util.concurrent.ExecutorService)", "public void setExecutorService(java.util.concurrent.ExecutorService)"], ["boolean", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.isShutdownOnExit()", "public boolean isShutdownOnExit()"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.setShutdownOnExit(boolean)", "public void setShutdownOnExit(boolean)"], ["org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.getUnsupportedAttributePolicy()", "public org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy getUnsupportedAttributePolicy()"], ["void", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.setUnsupportedAttributePolicy(org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy)", "public void setUnsupportedAttributePolicy(org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy)"], ["org.apache.sshd.server.Command", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.create()", "public org.apache.sshd.server.Command create()"], ["org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.clone()", "public org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory clone()"], ["java.lang.Object", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.Object", "org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory.create()", "public java.lang.Object create()"], ["java.lang.String", "org.apache.sshd.server.subsystem.sftp.UnixDateFormat.getUnixDate(java.nio.file.attribute.FileTime)", "public static java.lang.String getUnixDate(java.nio.file.attribute.FileTime)"], ["java.lang.String", "org.apache.sshd.server.subsystem.sftp.UnixDateFormat.getUnixDate(long)", "public static java.lang.String getUnixDate(long)"], ["org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy[]", "org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy.values()", "public static org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy[] values()"], ["org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy", "org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy.valueOf(java.lang.String)", "public static org.apache.sshd.server.subsystem.sftp.UnsupportedAttributePolicy valueOf(java.lang.String)"], ["org.apache.sshd.server.x11.X11ForwardSupport$ChannelForwardedX11", "org.apache.sshd.server.x11.X11ForwardSupport$ChannelForwardedX11(org.apache.sshd.common.io.IoSession)", "public org.apache.sshd.server.x11.X11ForwardSupport$ChannelForwardedX11(org.apache.sshd.common.io.IoSession)"], ["synchronized", "org.apache.sshd.server.x11.X11ForwardSupport$ChannelForwardedX11.org.apache.sshd.client.future.OpenFuture open()", "public synchronized org.apache.sshd.client.future.OpenFuture open() throws java.io.IOException"], ["void", "org.apache.sshd.server.x11.X11ForwardSupport$ChannelForwardedX11.handleEof()", "public void handleEof() throws java.io.IOException"], ["org.apache.sshd.server.x11.X11ForwardSupport", "org.apache.sshd.server.x11.X11ForwardSupport(org.apache.sshd.common.session.ConnectionService)", "public org.apache.sshd.server.x11.X11ForwardSupport(org.apache.sshd.common.session.ConnectionService)"], ["void", "org.apache.sshd.server.x11.X11ForwardSupport.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.apache.sshd.server.x11.X11ForwardSupport.java.lang.String createDisplay(boolean, java.lang.String, java.lang.String, int)", "public synchronized java.lang.String createDisplay(boolean, java.lang.String, java.lang.String, int) throws java.io.IOException"], ["void", "org.apache.sshd.server.x11.X11ForwardSupport.sessionCreated(org.apache.sshd.common.io.IoSession)", "public void sessionCreated(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.server.x11.X11ForwardSupport.sessionClosed(org.apache.sshd.common.io.IoSession)", "public void sessionClosed(org.apache.sshd.common.io.IoSession) throws java.lang.Exception"], ["void", "org.apache.sshd.server.x11.X11ForwardSupport.messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable)", "public void messageReceived(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.util.Readable) throws java.lang.Exception"], ["void", "org.apache.sshd.server.x11.X11ForwardSupport.exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable)", "public void exceptionCaught(org.apache.sshd.common.io.IoSession, java.lang.Throwable) throws java.lang.Exception"]]}